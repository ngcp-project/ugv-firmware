
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008138  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080083d0  080083d0  000093d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008410  08008410  00009410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008418  08008418  00009418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800841c  0800841c  0000941c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000020  24000000  08008420  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000020  08008440  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000080  080084a0  0000a080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  240000e0  08008500  0000a0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000874  08008500  0000a874  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001908e  00000000  00000000  0000a10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb4  00000000  00000000  0002319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00025d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6d  00000000  00000000  00026d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037594  00000000  00000000  000279c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fab  00000000  00000000  0005ef59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e832  00000000  00000000  00075f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d4736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000442c  00000000  00000000  001d477c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001d8ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e0 	.word	0x240000e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080083b8 	.word	0x080083b8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000e4 	.word	0x240000e4
 80002d4:	080083b8 	.word	0x080083b8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fe24 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f82a 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9de 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d8:	f000 f9bc 	bl	8000954 <MX_DMA_Init>
  MX_ETH_Init();
 80005dc:	f000 f8a4 	bl	8000728 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 f93a 	bl	8000858 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e4:	f000 f984 	bl	80008f0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f8ea 	bl	80007c0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 80005ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f0:	2206      	movs	r2, #6
 80005f2:	490a      	ldr	r1, [pc, #40]	@ (800061c <main+0x54>)
 80005f4:	480a      	ldr	r0, [pc, #40]	@ (8000620 <main+0x58>)
 80005f6:	f006 fa91 	bl	8006b1c <HAL_UART_Transmit>
	  HAL_Delay(2000);
 80005fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005fe:	f000 fe9d 	bl	800133c <HAL_Delay>
	  HAL_UART_Transmit(&huart2, data_2, sizeof(data_2), 1000);
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	2206      	movs	r2, #6
 8000608:	4906      	ldr	r1, [pc, #24]	@ (8000624 <main+0x5c>)
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <main+0x58>)
 800060c:	f006 fa86 	bl	8006b1c <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000614:	f000 fe92 	bl	800133c <HAL_Delay>
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8000618:	bf00      	nop
 800061a:	e7e7      	b.n	80005ec <main+0x24>
 800061c:	24000000 	.word	0x24000000
 8000620:	240001e4 	.word	0x240001e4
 8000624:	24000008 	.word	0x24000008

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	@ 0x70
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000632:	224c      	movs	r2, #76	@ 0x4c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fe91 	bl	800835e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2220      	movs	r2, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fe8b 	bl	800835e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000648:	2002      	movs	r0, #2
 800064a:	f003 fbbb 	bl	8003dc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b33      	ldr	r3, [pc, #204]	@ (8000720 <SystemClock_Config+0xf8>)
 8000654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000656:	4a32      	ldr	r2, [pc, #200]	@ (8000720 <SystemClock_Config+0xf8>)
 8000658:	f023 0301 	bic.w	r3, r3, #1
 800065c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800065e:	4b30      	ldr	r3, [pc, #192]	@ (8000720 <SystemClock_Config+0xf8>)
 8000660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b2e      	ldr	r3, [pc, #184]	@ (8000724 <SystemClock_Config+0xfc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a2c      	ldr	r2, [pc, #176]	@ (8000724 <SystemClock_Config+0xfc>)
 8000672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <SystemClock_Config+0xfc>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000684:	bf00      	nop
 8000686:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <SystemClock_Config+0xfc>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000692:	d1f8      	bne.n	8000686 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000694:	2303      	movs	r3, #3
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800069e:	2301      	movs	r3, #1
 80006a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2340      	movs	r3, #64	@ 0x40
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b2:	2318      	movs	r3, #24
 80006b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c2:	230c      	movs	r3, #12
 80006c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fbc0 	bl	8003e58 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006de:	f000 fa35 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	233f      	movs	r3, #63	@ 0x3f
 80006e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f800 	bl	800470c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000712:	f000 fa1b 	bl	8000b4c <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3770      	adds	r7, #112	@ 0x70
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	58000400 	.word	0x58000400
 8000724:	58024800 	.word	0x58024800

08000728 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <MX_ETH_Init+0x80>)
 800072e:	4a1f      	ldr	r2, [pc, #124]	@ (80007ac <MX_ETH_Init+0x84>)
 8000730:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_ETH_Init+0x88>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_ETH_Init+0x88>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_ETH_Init+0x88>)
 8000740:	22e1      	movs	r2, #225	@ 0xe1
 8000742:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_ETH_Init+0x88>)
 8000746:	2200      	movs	r2, #0
 8000748:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_ETH_Init+0x88>)
 800074c:	2200      	movs	r2, #0
 800074e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_ETH_Init+0x88>)
 8000752:	2200      	movs	r2, #0
 8000754:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_ETH_Init+0x80>)
 8000758:	4a15      	ldr	r2, [pc, #84]	@ (80007b0 <MX_ETH_Init+0x88>)
 800075a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_ETH_Init+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_ETH_Init+0x80>)
 8000764:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_ETH_Init+0x8c>)
 8000766:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_ETH_Init+0x80>)
 800076a:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <MX_ETH_Init+0x90>)
 800076c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_ETH_Init+0x80>)
 8000770:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000774:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000776:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <MX_ETH_Init+0x80>)
 8000778:	f002 fbf6 	bl	8002f68 <HAL_ETH_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000782:	f000 f9e3 	bl	8000b4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000786:	2238      	movs	r2, #56	@ 0x38
 8000788:	2100      	movs	r1, #0
 800078a:	480c      	ldr	r0, [pc, #48]	@ (80007bc <MX_ETH_Init+0x94>)
 800078c:	f007 fde7 	bl	800835e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_ETH_Init+0x94>)
 8000792:	2221      	movs	r2, #33	@ 0x21
 8000794:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_ETH_Init+0x94>)
 8000798:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800079c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_ETH_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	24000134 	.word	0x24000134
 80007ac:	40028000 	.word	0x40028000
 80007b0:	24000868 	.word	0x24000868
 80007b4:	24000080 	.word	0x24000080
 80007b8:	24000020 	.word	0x24000020
 80007bc:	240000fc 	.word	0x240000fc

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007c6:	4a23      	ldr	r2, [pc, #140]	@ (8000854 <MX_USART2_UART_Init+0x94>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000808:	4811      	ldr	r0, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 800080a:	f006 f937 	bl	8006a7c <HAL_UART_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000814:	f000 f99a 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	480d      	ldr	r0, [pc, #52]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 800081c:	f007 f9cd 	bl	8007bba <HAL_UARTEx_SetTxFifoThreshold>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000826:	f000 f991 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	4808      	ldr	r0, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 800082e:	f007 fa02 	bl	8007c36 <HAL_UARTEx_SetRxFifoThreshold>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000838:	f000 f988 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_USART2_UART_Init+0x90>)
 800083e:	f007 f983 	bl	8007b48 <HAL_UARTEx_DisableFifoMode>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000848:	f000 f980 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	240001e4 	.word	0x240001e4
 8000854:	40004400 	.word	0x40004400

08000858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	@ (80008ec <MX_USART3_UART_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008a2:	f006 f8eb 	bl	8006a7c <HAL_UART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f94e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008b4:	f007 f981 	bl	8007bba <HAL_UARTEx_SetTxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f945 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008c6:	f007 f9b6 	bl	8007c36 <HAL_UARTEx_SetRxFifoThreshold>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f93c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008d6:	f007 f937 	bl	8007b48 <HAL_UARTEx_DisableFifoMode>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f934 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	24000278 	.word	0x24000278
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f6:	4a16      	ldr	r2, [pc, #88]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fc:	2209      	movs	r2, #9
 80008fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000902:	2202      	movs	r2, #2
 8000904:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090e:	2202      	movs	r2, #2
 8000910:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000914:	2201      	movs	r2, #1
 8000916:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091a:	2200      	movs	r2, #0
 800091c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000926:	2201      	movs	r2, #1
 8000928:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092c:	2201      	movs	r2, #1
 800092e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000938:	f003 f913 	bl	8003b62 <HAL_PCD_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 f903 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	24000384 	.word	0x24000384
 8000950:	40080000 	.word	0x40080000

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_DMA_Init+0x3c>)
 800095c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000960:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <MX_DMA_Init+0x3c>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_DMA_Init+0x3c>)
 800096c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	200b      	movs	r0, #11
 800097e:	f000 fdfc 	bl	800157a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000982:	200b      	movs	r0, #11
 8000984:	f000 fe13 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58024400 	.word	0x58024400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	@ 0x30
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b62      	ldr	r3, [pc, #392]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a60      	ldr	r2, [pc, #384]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	4a59      	ldr	r2, [pc, #356]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d8:	4b56      	ldr	r3, [pc, #344]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b53      	ldr	r3, [pc, #332]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	4a51      	ldr	r2, [pc, #324]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b4b      	ldr	r3, [pc, #300]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a14:	4b47      	ldr	r3, [pc, #284]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b44      	ldr	r3, [pc, #272]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	4a42      	ldr	r2, [pc, #264]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a32:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a40:	4b3c      	ldr	r3, [pc, #240]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	4a3b      	ldr	r2, [pc, #236]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a50:	4b38      	ldr	r3, [pc, #224]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5e:	4b35      	ldr	r3, [pc, #212]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	4a33      	ldr	r2, [pc, #204]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6e:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a82:	482d      	ldr	r0, [pc, #180]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000a84:	f003 f854 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8e:	482b      	ldr	r0, [pc, #172]	@ (8000b3c <MX_GPIO_Init+0x1a8>)
 8000a90:	f003 f84e 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	4829      	ldr	r0, [pc, #164]	@ (8000b40 <MX_GPIO_Init+0x1ac>)
 8000a9a:	f003 f849 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4824      	ldr	r0, [pc, #144]	@ (8000b44 <MX_GPIO_Init+0x1b0>)
 8000ab4:	f002 fe8c 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ab8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4819      	ldr	r0, [pc, #100]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000ad2:	f002 fe7d 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <MX_GPIO_Init+0x1a8>)
 8000af0:	f002 fe6e 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	480f      	ldr	r0, [pc, #60]	@ (8000b48 <MX_GPIO_Init+0x1b4>)
 8000b0a:	f002 fe61 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <MX_GPIO_Init+0x1ac>)
 8000b26:	f002 fe53 	bl	80037d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	@ 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	58024400 	.word	0x58024400
 8000b38:	58020400 	.word	0x58020400
 8000b3c:	58020c00 	.word	0x58020c00
 8000b40:	58021000 	.word	0x58021000
 8000b44:	58020800 	.word	0x58020800
 8000b48:	58021800 	.word	0x58021800

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b64:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	58024400 	.word	0x58024400

08000b8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	@ 0x38
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a59      	ldr	r2, [pc, #356]	@ (8000d10 <HAL_ETH_MspInit+0x184>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 80ab 	bne.w	8000d06 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bb0:	4b58      	ldr	r3, [pc, #352]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bb6:	4a57      	ldr	r2, [pc, #348]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bbc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bc0:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bca:	623b      	str	r3, [r7, #32]
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bce:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bde:	4b4d      	ldr	r3, [pc, #308]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bec:	4b49      	ldr	r3, [pc, #292]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf2:	4a48      	ldr	r2, [pc, #288]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bfc:	4b45      	ldr	r3, [pc, #276]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b42      	ldr	r3, [pc, #264]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	4a40      	ldr	r2, [pc, #256]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	4a39      	ldr	r2, [pc, #228]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c38:	4b36      	ldr	r3, [pc, #216]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a31      	ldr	r2, [pc, #196]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c82:	2332      	movs	r3, #50	@ 0x32
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481e      	ldr	r0, [pc, #120]	@ (8000d18 <HAL_ETH_MspInit+0x18c>)
 8000c9e:	f002 fd97 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ca2:	2386      	movs	r3, #134	@ 0x86
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4817      	ldr	r0, [pc, #92]	@ (8000d1c <HAL_ETH_MspInit+0x190>)
 8000cbe:	f002 fd87 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd4:	230b      	movs	r3, #11
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <HAL_ETH_MspInit+0x194>)
 8000ce0:	f002 fd76 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ce4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf6:	230b      	movs	r3, #11
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <HAL_ETH_MspInit+0x198>)
 8000d02:	f002 fd65 	bl	80037d0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	3738      	adds	r7, #56	@ 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40028000 	.word	0x40028000
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	58020000 	.word	0x58020000
 8000d20:	58020400 	.word	0x58020400
 8000d24:	58021800 	.word	0x58021800

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0be      	sub	sp, #248	@ 0xf8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	22c0      	movs	r2, #192	@ 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f007 fb08 	bl	800835e <memset>
  if(huart->Instance==USART2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a76      	ldr	r2, [pc, #472]	@ (8000f2c <HAL_UART_MspInit+0x204>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 8098 	bne.w	8000e8a <HAL_UART_MspInit+0x162>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d5a:	f04f 0202 	mov.w	r2, #2
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 f857 	bl	8004e24 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000d7c:	f7ff fee6 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d80:	4b6b      	ldr	r3, [pc, #428]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d86:	4a6a      	ldr	r2, [pc, #424]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d90:	4b67      	ldr	r3, [pc, #412]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	61fb      	str	r3, [r7, #28]
 8000d9c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b64      	ldr	r3, [pc, #400]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da4:	4a62      	ldr	r2, [pc, #392]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dae:	4b60      	ldr	r3, [pc, #384]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b58      	ldr	r3, [pc, #352]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df2:	2307      	movs	r3, #7
 8000df4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	484d      	ldr	r0, [pc, #308]	@ (8000f34 <HAL_UART_MspInit+0x20c>)
 8000e00:	f002 fce6 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e04:	2320      	movs	r3, #32
 8000e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e22:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4843      	ldr	r0, [pc, #268]	@ (8000f38 <HAL_UART_MspInit+0x210>)
 8000e2a:	f002 fcd1 	bl	80037d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream0;
 8000e2e:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e30:	4a43      	ldr	r2, [pc, #268]	@ (8000f40 <HAL_UART_MspInit+0x218>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000e34:	4b41      	ldr	r3, [pc, #260]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e36:	222c      	movs	r2, #44	@ 0x2c
 8000e38:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e3c:	2240      	movs	r2, #64	@ 0x40
 8000e3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	4b3e      	ldr	r3, [pc, #248]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e54:	4b39      	ldr	r3, [pc, #228]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e5a:	4b38      	ldr	r3, [pc, #224]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e66:	4b35      	ldr	r3, [pc, #212]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e6c:	4833      	ldr	r0, [pc, #204]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e6e:	f000 fbb9 	bl	80015e4 <HAL_DMA_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8000e78:	f7ff fe68 	bl	8000b4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e80:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000e82:	4a2e      	ldr	r2, [pc, #184]	@ (8000f3c <HAL_UART_MspInit+0x214>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e88:	e04b      	b.n	8000f22 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f44 <HAL_UART_MspInit+0x21c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d146      	bne.n	8000f22 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e94:	f04f 0202 	mov.w	r2, #2
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 ffba 	bl	8004e24 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_UART_MspInit+0x192>
      Error_Handler();
 8000eb6:	f7ff fe49 	bl	8000b4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000ec2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0x208>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ef6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f10:	2307      	movs	r3, #7
 8000f12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f16:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <HAL_UART_MspInit+0x210>)
 8000f1e:	f002 fc57 	bl	80037d0 <HAL_GPIO_Init>
}
 8000f22:	bf00      	nop
 8000f24:	37f8      	adds	r7, #248	@ 0xf8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020000 	.word	0x58020000
 8000f38:	58020c00 	.word	0x58020c00
 8000f3c:	2400030c 	.word	0x2400030c
 8000f40:	40020010 	.word	0x40020010
 8000f44:	40004800 	.word	0x40004800

08000f48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	22c0      	movs	r2, #192	@ 0xc0
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f007 f9f8 	bl	800835e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a30      	ldr	r2, [pc, #192]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d159      	bne.n	800102c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f78:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 ff47 	bl	8004e24 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f9c:	f7ff fdd6 	bl	8000b4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fa0:	f002 ff4a 	bl	8003e38 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000faa:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb4:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fc2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fdc:	230a      	movs	r3, #10
 8000fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4814      	ldr	r0, [pc, #80]	@ (800103c <HAL_PCD_MspInit+0xf4>)
 8000fea:	f002 fbf1 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <HAL_PCD_MspInit+0xf4>)
 800100a:	f002 fbe1 	bl	80037d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8001010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001014:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8001016:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800101a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8001020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	37e8      	adds	r7, #232	@ 0xe8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40080000 	.word	0x40080000
 8001038:	58024400 	.word	0x58024400
 800103c:	58020000 	.word	0x58020000

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <NMI_Handler+0x4>

08001048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <MemManage_Handler+0x4>

08001058 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <UsageFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001096:	f000 f931 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <DMA1_Stream0_IRQHandler+0x10>)
 80010a6:	f000 fdf9 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2400030c 	.word	0x2400030c

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010b8:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <SystemInit+0xe4>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010be:	4a36      	ldr	r2, [pc, #216]	@ (8001198 <SystemInit+0xe4>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c8:	4b34      	ldr	r3, [pc, #208]	@ (800119c <SystemInit+0xe8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d807      	bhi.n	80010e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d4:	4b31      	ldr	r3, [pc, #196]	@ (800119c <SystemInit+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 030f 	bic.w	r3, r3, #15
 80010dc:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <SystemInit+0xe8>)
 80010de:	f043 0307 	orr.w	r3, r3, #7
 80010e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010e4:	4b2e      	ldr	r3, [pc, #184]	@ (80011a0 <SystemInit+0xec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2d      	ldr	r2, [pc, #180]	@ (80011a0 <SystemInit+0xec>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <SystemInit+0xec>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <SystemInit+0xec>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4929      	ldr	r1, [pc, #164]	@ (80011a0 <SystemInit+0xec>)
 80010fc:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <SystemInit+0xf0>)
 80010fe:	4013      	ands	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001102:	4b26      	ldr	r3, [pc, #152]	@ (800119c <SystemInit+0xe8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <SystemInit+0xe8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 030f 	bic.w	r3, r3, #15
 8001116:	4a21      	ldr	r2, [pc, #132]	@ (800119c <SystemInit+0xe8>)
 8001118:	f043 0307 	orr.w	r3, r3, #7
 800111c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <SystemInit+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <SystemInit+0xec>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <SystemInit+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <SystemInit+0xec>)
 8001132:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <SystemInit+0xf4>)
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <SystemInit+0xec>)
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <SystemInit+0xf8>)
 800113a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <SystemInit+0xec>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	@ (80011b0 <SystemInit+0xfc>)
 8001140:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <SystemInit+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001148:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <SystemInit+0xec>)
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <SystemInit+0xfc>)
 800114c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <SystemInit+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <SystemInit+0xec>)
 8001156:	4a16      	ldr	r2, [pc, #88]	@ (80011b0 <SystemInit+0xfc>)
 8001158:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <SystemInit+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <SystemInit+0xec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0e      	ldr	r2, [pc, #56]	@ (80011a0 <SystemInit+0xec>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <SystemInit+0xec>)
 800116e:	2200      	movs	r2, #0
 8001170:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <SystemInit+0x100>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <SystemInit+0x104>)
 8001178:	4013      	ands	r3, r2
 800117a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800117e:	d202      	bcs.n	8001186 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <SystemInit+0x108>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <SystemInit+0x10c>)
 8001188:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800118c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	52002000 	.word	0x52002000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011a8:	02020200 	.word	0x02020200
 80011ac:	01ff0000 	.word	0x01ff0000
 80011b0:	01010280 	.word	0x01010280
 80011b4:	5c001000 	.word	0x5c001000
 80011b8:	ffff0000 	.word	0xffff0000
 80011bc:	51008108 	.word	0x51008108
 80011c0:	52004000 	.word	0x52004000

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c8:	f7ff ff74 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f007 f8bd 	bl	8008370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff f9e7 	bl	80005c8 <main>
  bx  lr
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001200:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001204:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001208:	08008420 	.word	0x08008420
  ldr r2, =_sbss
 800120c:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8001210:	24000874 	.word	0x24000874

08001214 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC3_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f9a0 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001224:	f003 fc28 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_Init+0x68>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	4913      	ldr	r1, [pc, #76]	@ (8001284 <HAL_Init+0x6c>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_Init+0x68>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_Init+0x6c>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_Init+0x70>)
 800125a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800125c:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <HAL_Init+0x74>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f814 	bl	8001290 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e002      	b.n	8001278 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001272:	f7ff fc71 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	080083d0 	.word	0x080083d0
 8001288:	24000014 	.word	0x24000014
 800128c:	24000010 	.word	0x24000010

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_InitTick+0x60>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e021      	b.n	80012e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_InitTick+0x64>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_InitTick+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f985 	bl	80015ca <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f94f 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_InitTick+0x68>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2400001c 	.word	0x2400001c
 80012f4:	24000010 	.word	0x24000010
 80012f8:	24000018 	.word	0x24000018

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2400001c 	.word	0x2400001c
 8001320:	24000870 	.word	0x24000870

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	24000870 	.word	0x24000870

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400001c 	.word	0x2400001c

08001384 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <HAL_GetREVID+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0c1b      	lsrs	r3, r3, #16
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	5c001000 	.word	0x5c001000

0800139c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013ac:	4904      	ldr	r1, [pc, #16]	@ (80013c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	58000400 	.word	0x58000400

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0000 	.word	0x05fa0000

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	@ (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	@ (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	@ 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff40 	bl	800140c <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff33 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa4 	bl	8001520 <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff fe9a 	bl	8001324 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e316      	b.n	8001c2a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a66      	ldr	r2, [pc, #408]	@ (800179c <HAL_DMA_Init+0x1b8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d04a      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a65      	ldr	r2, [pc, #404]	@ (80017a0 <HAL_DMA_Init+0x1bc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d045      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a63      	ldr	r2, [pc, #396]	@ (80017a4 <HAL_DMA_Init+0x1c0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d040      	beq.n	800169c <HAL_DMA_Init+0xb8>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a62      	ldr	r2, [pc, #392]	@ (80017a8 <HAL_DMA_Init+0x1c4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d03b      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a60      	ldr	r2, [pc, #384]	@ (80017ac <HAL_DMA_Init+0x1c8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d036      	beq.n	800169c <HAL_DMA_Init+0xb8>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a5f      	ldr	r2, [pc, #380]	@ (80017b0 <HAL_DMA_Init+0x1cc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d031      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a5d      	ldr	r2, [pc, #372]	@ (80017b4 <HAL_DMA_Init+0x1d0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d02c      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a5c      	ldr	r2, [pc, #368]	@ (80017b8 <HAL_DMA_Init+0x1d4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d027      	beq.n	800169c <HAL_DMA_Init+0xb8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a5a      	ldr	r2, [pc, #360]	@ (80017bc <HAL_DMA_Init+0x1d8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d022      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a59      	ldr	r2, [pc, #356]	@ (80017c0 <HAL_DMA_Init+0x1dc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d01d      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a57      	ldr	r2, [pc, #348]	@ (80017c4 <HAL_DMA_Init+0x1e0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d018      	beq.n	800169c <HAL_DMA_Init+0xb8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a56      	ldr	r2, [pc, #344]	@ (80017c8 <HAL_DMA_Init+0x1e4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d013      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a54      	ldr	r2, [pc, #336]	@ (80017cc <HAL_DMA_Init+0x1e8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00e      	beq.n	800169c <HAL_DMA_Init+0xb8>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a53      	ldr	r2, [pc, #332]	@ (80017d0 <HAL_DMA_Init+0x1ec>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d009      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a51      	ldr	r2, [pc, #324]	@ (80017d4 <HAL_DMA_Init+0x1f0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d004      	beq.n	800169c <HAL_DMA_Init+0xb8>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a50      	ldr	r2, [pc, #320]	@ (80017d8 <HAL_DMA_Init+0x1f4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d101      	bne.n	80016a0 <HAL_DMA_Init+0xbc>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_DMA_Init+0xbe>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 813b 	beq.w	800191e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a37      	ldr	r2, [pc, #220]	@ (800179c <HAL_DMA_Init+0x1b8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d04a      	beq.n	8001758 <HAL_DMA_Init+0x174>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a36      	ldr	r2, [pc, #216]	@ (80017a0 <HAL_DMA_Init+0x1bc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d045      	beq.n	8001758 <HAL_DMA_Init+0x174>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a34      	ldr	r2, [pc, #208]	@ (80017a4 <HAL_DMA_Init+0x1c0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d040      	beq.n	8001758 <HAL_DMA_Init+0x174>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a33      	ldr	r2, [pc, #204]	@ (80017a8 <HAL_DMA_Init+0x1c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d03b      	beq.n	8001758 <HAL_DMA_Init+0x174>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <HAL_DMA_Init+0x1c8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d036      	beq.n	8001758 <HAL_DMA_Init+0x174>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a30      	ldr	r2, [pc, #192]	@ (80017b0 <HAL_DMA_Init+0x1cc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d031      	beq.n	8001758 <HAL_DMA_Init+0x174>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2e      	ldr	r2, [pc, #184]	@ (80017b4 <HAL_DMA_Init+0x1d0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d02c      	beq.n	8001758 <HAL_DMA_Init+0x174>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2d      	ldr	r2, [pc, #180]	@ (80017b8 <HAL_DMA_Init+0x1d4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d027      	beq.n	8001758 <HAL_DMA_Init+0x174>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2b      	ldr	r2, [pc, #172]	@ (80017bc <HAL_DMA_Init+0x1d8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d022      	beq.n	8001758 <HAL_DMA_Init+0x174>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a2a      	ldr	r2, [pc, #168]	@ (80017c0 <HAL_DMA_Init+0x1dc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d01d      	beq.n	8001758 <HAL_DMA_Init+0x174>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a28      	ldr	r2, [pc, #160]	@ (80017c4 <HAL_DMA_Init+0x1e0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d018      	beq.n	8001758 <HAL_DMA_Init+0x174>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a27      	ldr	r2, [pc, #156]	@ (80017c8 <HAL_DMA_Init+0x1e4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_DMA_Init+0x174>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a25      	ldr	r2, [pc, #148]	@ (80017cc <HAL_DMA_Init+0x1e8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00e      	beq.n	8001758 <HAL_DMA_Init+0x174>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a24      	ldr	r2, [pc, #144]	@ (80017d0 <HAL_DMA_Init+0x1ec>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d009      	beq.n	8001758 <HAL_DMA_Init+0x174>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a22      	ldr	r2, [pc, #136]	@ (80017d4 <HAL_DMA_Init+0x1f0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d004      	beq.n	8001758 <HAL_DMA_Init+0x174>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <HAL_DMA_Init+0x1f4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d108      	bne.n	800176a <HAL_DMA_Init+0x186>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e007      	b.n	800177a <HAL_DMA_Init+0x196>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800177a:	e02f      	b.n	80017dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177c:	f7ff fdd2 	bl	8001324 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b05      	cmp	r3, #5
 8001788:	d928      	bls.n	80017dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2203      	movs	r2, #3
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e246      	b.n	8001c2a <HAL_DMA_Init+0x646>
 800179c:	40020010 	.word	0x40020010
 80017a0:	40020028 	.word	0x40020028
 80017a4:	40020040 	.word	0x40020040
 80017a8:	40020058 	.word	0x40020058
 80017ac:	40020070 	.word	0x40020070
 80017b0:	40020088 	.word	0x40020088
 80017b4:	400200a0 	.word	0x400200a0
 80017b8:	400200b8 	.word	0x400200b8
 80017bc:	40020410 	.word	0x40020410
 80017c0:	40020428 	.word	0x40020428
 80017c4:	40020440 	.word	0x40020440
 80017c8:	40020458 	.word	0x40020458
 80017cc:	40020470 	.word	0x40020470
 80017d0:	40020488 	.word	0x40020488
 80017d4:	400204a0 	.word	0x400204a0
 80017d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1c8      	bne.n	800177c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4b83      	ldr	r3, [pc, #524]	@ (8001a04 <HAL_DMA_Init+0x420>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001802:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	2b04      	cmp	r3, #4
 800182e:	d107      	bne.n	8001840 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001838:	4313      	orrs	r3, r2
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001840:	4b71      	ldr	r3, [pc, #452]	@ (8001a08 <HAL_DMA_Init+0x424>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b71      	ldr	r3, [pc, #452]	@ (8001a0c <HAL_DMA_Init+0x428>)
 8001846:	4013      	ands	r3, r2
 8001848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800184c:	d328      	bcc.n	80018a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b28      	cmp	r3, #40	@ 0x28
 8001854:	d903      	bls.n	800185e <HAL_DMA_Init+0x27a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b2e      	cmp	r3, #46	@ 0x2e
 800185c:	d917      	bls.n	800188e <HAL_DMA_Init+0x2aa>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b3e      	cmp	r3, #62	@ 0x3e
 8001864:	d903      	bls.n	800186e <HAL_DMA_Init+0x28a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b42      	cmp	r3, #66	@ 0x42
 800186c:	d90f      	bls.n	800188e <HAL_DMA_Init+0x2aa>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b46      	cmp	r3, #70	@ 0x46
 8001874:	d903      	bls.n	800187e <HAL_DMA_Init+0x29a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b48      	cmp	r3, #72	@ 0x48
 800187c:	d907      	bls.n	800188e <HAL_DMA_Init+0x2aa>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b4e      	cmp	r3, #78	@ 0x4e
 8001884:	d905      	bls.n	8001892 <HAL_DMA_Init+0x2ae>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b52      	cmp	r3, #82	@ 0x52
 800188c:	d801      	bhi.n	8001892 <HAL_DMA_Init+0x2ae>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_DMA_Init+0x2b0>
 8001892:	2300      	movs	r3, #0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800189e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f023 0307 	bic.w	r3, r3, #7
 80018b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d117      	bne.n	80018fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00e      	beq.n	80018fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 f9b9 	bl	8002c54 <DMA_CheckFifoParam>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2240      	movs	r2, #64	@ 0x40
 80018ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e197      	b.n	8001c2a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f001 f8f4 	bl	8002af0 <DMA_CalcBaseAndBitshift>
 8001908:	4603      	mov	r3, r0
 800190a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	223f      	movs	r2, #63	@ 0x3f
 8001916:	409a      	lsls	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	e0cd      	b.n	8001aba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a3b      	ldr	r2, [pc, #236]	@ (8001a10 <HAL_DMA_Init+0x42c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <HAL_DMA_Init+0x38a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a39      	ldr	r2, [pc, #228]	@ (8001a14 <HAL_DMA_Init+0x430>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01d      	beq.n	800196e <HAL_DMA_Init+0x38a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <HAL_DMA_Init+0x434>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d018      	beq.n	800196e <HAL_DMA_Init+0x38a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a36      	ldr	r2, [pc, #216]	@ (8001a1c <HAL_DMA_Init+0x438>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_DMA_Init+0x38a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a35      	ldr	r2, [pc, #212]	@ (8001a20 <HAL_DMA_Init+0x43c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00e      	beq.n	800196e <HAL_DMA_Init+0x38a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a33      	ldr	r2, [pc, #204]	@ (8001a24 <HAL_DMA_Init+0x440>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_DMA_Init+0x38a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a32      	ldr	r2, [pc, #200]	@ (8001a28 <HAL_DMA_Init+0x444>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_DMA_Init+0x38a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a30      	ldr	r2, [pc, #192]	@ (8001a2c <HAL_DMA_Init+0x448>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_DMA_Init+0x38e>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_DMA_Init+0x390>
 8001972:	2300      	movs	r3, #0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8097 	beq.w	8001aa8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a24      	ldr	r2, [pc, #144]	@ (8001a10 <HAL_DMA_Init+0x42c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d021      	beq.n	80019c8 <HAL_DMA_Init+0x3e4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a22      	ldr	r2, [pc, #136]	@ (8001a14 <HAL_DMA_Init+0x430>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01c      	beq.n	80019c8 <HAL_DMA_Init+0x3e4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <HAL_DMA_Init+0x434>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d017      	beq.n	80019c8 <HAL_DMA_Init+0x3e4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a1c <HAL_DMA_Init+0x438>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d012      	beq.n	80019c8 <HAL_DMA_Init+0x3e4>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a20 <HAL_DMA_Init+0x43c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00d      	beq.n	80019c8 <HAL_DMA_Init+0x3e4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <HAL_DMA_Init+0x440>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d008      	beq.n	80019c8 <HAL_DMA_Init+0x3e4>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <HAL_DMA_Init+0x444>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d003      	beq.n	80019c8 <HAL_DMA_Init+0x3e4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <HAL_DMA_Init+0x448>)
 80019c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <HAL_DMA_Init+0x44c>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b40      	cmp	r3, #64	@ 0x40
 80019ee:	d021      	beq.n	8001a34 <HAL_DMA_Init+0x450>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b80      	cmp	r3, #128	@ 0x80
 80019f6:	d102      	bne.n	80019fe <HAL_DMA_Init+0x41a>
 80019f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019fc:	e01b      	b.n	8001a36 <HAL_DMA_Init+0x452>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e019      	b.n	8001a36 <HAL_DMA_Init+0x452>
 8001a02:	bf00      	nop
 8001a04:	fe10803f 	.word	0xfe10803f
 8001a08:	5c001000 	.word	0x5c001000
 8001a0c:	ffff0000 	.word	0xffff0000
 8001a10:	58025408 	.word	0x58025408
 8001a14:	5802541c 	.word	0x5802541c
 8001a18:	58025430 	.word	0x58025430
 8001a1c:	58025444 	.word	0x58025444
 8001a20:	58025458 	.word	0x58025458
 8001a24:	5802546c 	.word	0x5802546c
 8001a28:	58025480 	.word	0x58025480
 8001a2c:	58025494 	.word	0x58025494
 8001a30:	fffe000f 	.word	0xfffe000f
 8001a34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68d2      	ldr	r2, [r2, #12]
 8001a3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c34 <HAL_DMA_Init+0x650>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c38 <HAL_DMA_Init+0x654>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f001 f82f 	bl	8002af0 <DMA_CalcBaseAndBitshift>
 8001a92:	4603      	mov	r3, r0
 8001a94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	e008      	b.n	8001aba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	@ 0x40
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0b7      	b.n	8001c2a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5f      	ldr	r2, [pc, #380]	@ (8001c3c <HAL_DMA_Init+0x658>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d072      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c40 <HAL_DMA_Init+0x65c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d06d      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c44 <HAL_DMA_Init+0x660>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d068      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5a      	ldr	r2, [pc, #360]	@ (8001c48 <HAL_DMA_Init+0x664>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d063      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a59      	ldr	r2, [pc, #356]	@ (8001c4c <HAL_DMA_Init+0x668>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d05e      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <HAL_DMA_Init+0x66c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d059      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a56      	ldr	r2, [pc, #344]	@ (8001c54 <HAL_DMA_Init+0x670>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d054      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a54      	ldr	r2, [pc, #336]	@ (8001c58 <HAL_DMA_Init+0x674>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d04f      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a53      	ldr	r2, [pc, #332]	@ (8001c5c <HAL_DMA_Init+0x678>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04a      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a51      	ldr	r2, [pc, #324]	@ (8001c60 <HAL_DMA_Init+0x67c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d045      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_DMA_Init+0x680>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d040      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c68 <HAL_DMA_Init+0x684>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03b      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a4d      	ldr	r2, [pc, #308]	@ (8001c6c <HAL_DMA_Init+0x688>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d036      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	@ (8001c70 <HAL_DMA_Init+0x68c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c74 <HAL_DMA_Init+0x690>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d02c      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a48      	ldr	r2, [pc, #288]	@ (8001c78 <HAL_DMA_Init+0x694>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a47      	ldr	r2, [pc, #284]	@ (8001c7c <HAL_DMA_Init+0x698>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a45      	ldr	r2, [pc, #276]	@ (8001c80 <HAL_DMA_Init+0x69c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a44      	ldr	r2, [pc, #272]	@ (8001c84 <HAL_DMA_Init+0x6a0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a42      	ldr	r2, [pc, #264]	@ (8001c88 <HAL_DMA_Init+0x6a4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a41      	ldr	r2, [pc, #260]	@ (8001c8c <HAL_DMA_Init+0x6a8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a3f      	ldr	r2, [pc, #252]	@ (8001c90 <HAL_DMA_Init+0x6ac>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c94 <HAL_DMA_Init+0x6b0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Init+0x5c6>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8001c98 <HAL_DMA_Init+0x6b4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Init+0x5ca>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_DMA_Init+0x5cc>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d032      	beq.n	8001c1a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f001 f8c9 	bl	8002d4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b80      	cmp	r3, #128	@ 0x80
 8001bc0:	d102      	bne.n	8001bc8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <HAL_DMA_Init+0x624>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d80c      	bhi.n	8001c08 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f001 f946 	bl	8002e80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	e008      	b.n	8001c1a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	a7fdabf8 	.word	0xa7fdabf8
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	40020010 	.word	0x40020010
 8001c40:	40020028 	.word	0x40020028
 8001c44:	40020040 	.word	0x40020040
 8001c48:	40020058 	.word	0x40020058
 8001c4c:	40020070 	.word	0x40020070
 8001c50:	40020088 	.word	0x40020088
 8001c54:	400200a0 	.word	0x400200a0
 8001c58:	400200b8 	.word	0x400200b8
 8001c5c:	40020410 	.word	0x40020410
 8001c60:	40020428 	.word	0x40020428
 8001c64:	40020440 	.word	0x40020440
 8001c68:	40020458 	.word	0x40020458
 8001c6c:	40020470 	.word	0x40020470
 8001c70:	40020488 	.word	0x40020488
 8001c74:	400204a0 	.word	0x400204a0
 8001c78:	400204b8 	.word	0x400204b8
 8001c7c:	58025408 	.word	0x58025408
 8001c80:	5802541c 	.word	0x5802541c
 8001c84:	58025430 	.word	0x58025430
 8001c88:	58025444 	.word	0x58025444
 8001c8c:	58025458 	.word	0x58025458
 8001c90:	5802546c 	.word	0x5802546c
 8001c94:	58025480 	.word	0x58025480
 8001c98:	58025494 	.word	0x58025494

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	@ 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca8:	4b67      	ldr	r3, [pc, #412]	@ (8001e48 <HAL_DMA_IRQHandler+0x1ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a67      	ldr	r2, [pc, #412]	@ (8001e4c <HAL_DMA_IRQHandler+0x1b0>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e50 <HAL_DMA_IRQHandler+0x1b4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d04a      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a5d      	ldr	r2, [pc, #372]	@ (8001e54 <HAL_DMA_IRQHandler+0x1b8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d045      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e58 <HAL_DMA_IRQHandler+0x1bc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d040      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5a      	ldr	r2, [pc, #360]	@ (8001e5c <HAL_DMA_IRQHandler+0x1c0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d03b      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a59      	ldr	r2, [pc, #356]	@ (8001e60 <HAL_DMA_IRQHandler+0x1c4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d036      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a57      	ldr	r2, [pc, #348]	@ (8001e64 <HAL_DMA_IRQHandler+0x1c8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a56      	ldr	r2, [pc, #344]	@ (8001e68 <HAL_DMA_IRQHandler+0x1cc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d02c      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a54      	ldr	r2, [pc, #336]	@ (8001e6c <HAL_DMA_IRQHandler+0x1d0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d027      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a53      	ldr	r2, [pc, #332]	@ (8001e70 <HAL_DMA_IRQHandler+0x1d4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a51      	ldr	r2, [pc, #324]	@ (8001e74 <HAL_DMA_IRQHandler+0x1d8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01d      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a50      	ldr	r2, [pc, #320]	@ (8001e78 <HAL_DMA_IRQHandler+0x1dc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d018      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a4e      	ldr	r2, [pc, #312]	@ (8001e7c <HAL_DMA_IRQHandler+0x1e0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8001e80 <HAL_DMA_IRQHandler+0x1e4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00e      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a4b      	ldr	r2, [pc, #300]	@ (8001e84 <HAL_DMA_IRQHandler+0x1e8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d009      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e88 <HAL_DMA_IRQHandler+0x1ec>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d004      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xd2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a48      	ldr	r2, [pc, #288]	@ (8001e8c <HAL_DMA_IRQHandler+0x1f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_IRQHandler+0xd6>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 842b 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80a2 	beq.w	8001ed4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	@ (8001e50 <HAL_DMA_IRQHandler+0x1b4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d04a      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e54 <HAL_DMA_IRQHandler+0x1b8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d045      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e58 <HAL_DMA_IRQHandler+0x1bc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d040      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e5c <HAL_DMA_IRQHandler+0x1c0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d03b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <HAL_DMA_IRQHandler+0x1c4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d036      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <HAL_DMA_IRQHandler+0x1c8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d031      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	@ (8001e68 <HAL_DMA_IRQHandler+0x1cc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d02c      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a24      	ldr	r2, [pc, #144]	@ (8001e6c <HAL_DMA_IRQHandler+0x1d0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d027      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a22      	ldr	r2, [pc, #136]	@ (8001e70 <HAL_DMA_IRQHandler+0x1d4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d022      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	@ (8001e74 <HAL_DMA_IRQHandler+0x1d8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d01d      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e78 <HAL_DMA_IRQHandler+0x1dc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d018      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <HAL_DMA_IRQHandler+0x1e0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e80 <HAL_DMA_IRQHandler+0x1e4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00e      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1b      	ldr	r2, [pc, #108]	@ (8001e84 <HAL_DMA_IRQHandler+0x1e8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <HAL_DMA_IRQHandler+0x1ec>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x194>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a18      	ldr	r2, [pc, #96]	@ (8001e8c <HAL_DMA_IRQHandler+0x1f0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d12f      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x1f4>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf14      	ite	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	2300      	moveq	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	e02e      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x208>
 8001e46:	bf00      	nop
 8001e48:	24000010 	.word	0x24000010
 8001e4c:	1b4e81b5 	.word	0x1b4e81b5
 8001e50:	40020010 	.word	0x40020010
 8001e54:	40020028 	.word	0x40020028
 8001e58:	40020040 	.word	0x40020040
 8001e5c:	40020058 	.word	0x40020058
 8001e60:	40020070 	.word	0x40020070
 8001e64:	40020088 	.word	0x40020088
 8001e68:	400200a0 	.word	0x400200a0
 8001e6c:	400200b8 	.word	0x400200b8
 8001e70:	40020410 	.word	0x40020410
 8001e74:	40020428 	.word	0x40020428
 8001e78:	40020440 	.word	0x40020440
 8001e7c:	40020458 	.word	0x40020458
 8001e80:	40020470 	.word	0x40020470
 8001e84:	40020488 	.word	0x40020488
 8001e88:	400204a0 	.word	0x400204a0
 8001e8c:	400204b8 	.word	0x400204b8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf14      	ite	ne
 8001e9e:	2301      	movne	r3, #1
 8001ea0:	2300      	moveq	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0204 	bic.w	r2, r2, #4
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d06e      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a69      	ldr	r2, [pc, #420]	@ (8002094 <HAL_DMA_IRQHandler+0x3f8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04a      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a67      	ldr	r2, [pc, #412]	@ (8002098 <HAL_DMA_IRQHandler+0x3fc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d045      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a66      	ldr	r2, [pc, #408]	@ (800209c <HAL_DMA_IRQHandler+0x400>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d040      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a64      	ldr	r2, [pc, #400]	@ (80020a0 <HAL_DMA_IRQHandler+0x404>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d03b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a63      	ldr	r2, [pc, #396]	@ (80020a4 <HAL_DMA_IRQHandler+0x408>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d036      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a61      	ldr	r2, [pc, #388]	@ (80020a8 <HAL_DMA_IRQHandler+0x40c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_DMA_IRQHandler+0x410>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d02c      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a5e      	ldr	r2, [pc, #376]	@ (80020b0 <HAL_DMA_IRQHandler+0x414>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d027      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80020b4 <HAL_DMA_IRQHandler+0x418>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a5b      	ldr	r2, [pc, #364]	@ (80020b8 <HAL_DMA_IRQHandler+0x41c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a5a      	ldr	r2, [pc, #360]	@ (80020bc <HAL_DMA_IRQHandler+0x420>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a58      	ldr	r2, [pc, #352]	@ (80020c0 <HAL_DMA_IRQHandler+0x424>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a57      	ldr	r2, [pc, #348]	@ (80020c4 <HAL_DMA_IRQHandler+0x428>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00e      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a55      	ldr	r2, [pc, #340]	@ (80020c8 <HAL_DMA_IRQHandler+0x42c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a54      	ldr	r2, [pc, #336]	@ (80020cc <HAL_DMA_IRQHandler+0x430>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2ee>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a52      	ldr	r2, [pc, #328]	@ (80020d0 <HAL_DMA_IRQHandler+0x434>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10a      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x304>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e003      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 808f 	beq.w	80020fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8002094 <HAL_DMA_IRQHandler+0x3f8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d04a      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <HAL_DMA_IRQHandler+0x3fc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d045      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a29      	ldr	r2, [pc, #164]	@ (800209c <HAL_DMA_IRQHandler+0x400>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d040      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <HAL_DMA_IRQHandler+0x404>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d03b      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a26      	ldr	r2, [pc, #152]	@ (80020a4 <HAL_DMA_IRQHandler+0x408>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d036      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a24      	ldr	r2, [pc, #144]	@ (80020a8 <HAL_DMA_IRQHandler+0x40c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d031      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a23      	ldr	r2, [pc, #140]	@ (80020ac <HAL_DMA_IRQHandler+0x410>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d02c      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a21      	ldr	r2, [pc, #132]	@ (80020b0 <HAL_DMA_IRQHandler+0x414>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d027      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a20      	ldr	r2, [pc, #128]	@ (80020b4 <HAL_DMA_IRQHandler+0x418>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_DMA_IRQHandler+0x41c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01d      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_DMA_IRQHandler+0x420>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d018      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <HAL_DMA_IRQHandler+0x424>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1a      	ldr	r2, [pc, #104]	@ (80020c4 <HAL_DMA_IRQHandler+0x428>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00e      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <HAL_DMA_IRQHandler+0x42c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a17      	ldr	r2, [pc, #92]	@ (80020cc <HAL_DMA_IRQHandler+0x430>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_DMA_IRQHandler+0x3e2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a15      	ldr	r2, [pc, #84]	@ (80020d0 <HAL_DMA_IRQHandler+0x434>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12a      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x438>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e023      	b.n	80020dc <HAL_DMA_IRQHandler+0x440>
 8002094:	40020010 	.word	0x40020010
 8002098:	40020028 	.word	0x40020028
 800209c:	40020040 	.word	0x40020040
 80020a0:	40020058 	.word	0x40020058
 80020a4:	40020070 	.word	0x40020070
 80020a8:	40020088 	.word	0x40020088
 80020ac:	400200a0 	.word	0x400200a0
 80020b0:	400200b8 	.word	0x400200b8
 80020b4:	40020410 	.word	0x40020410
 80020b8:	40020428 	.word	0x40020428
 80020bc:	40020440 	.word	0x40020440
 80020c0:	40020458 	.word	0x40020458
 80020c4:	40020470 	.word	0x40020470
 80020c8:	40020488 	.word	0x40020488
 80020cc:	400204a0 	.word	0x400204a0
 80020d0:	400204b8 	.word	0x400204b8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2204      	movs	r2, #4
 80020ea:	409a      	lsls	r2, r3
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f4:	f043 0204 	orr.w	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2210      	movs	r2, #16
 8002106:	409a      	lsls	r2, r3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a6 	beq.w	800225e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a85      	ldr	r2, [pc, #532]	@ (800232c <HAL_DMA_IRQHandler+0x690>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d04a      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a83      	ldr	r2, [pc, #524]	@ (8002330 <HAL_DMA_IRQHandler+0x694>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d045      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a82      	ldr	r2, [pc, #520]	@ (8002334 <HAL_DMA_IRQHandler+0x698>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d040      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a80      	ldr	r2, [pc, #512]	@ (8002338 <HAL_DMA_IRQHandler+0x69c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d03b      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <HAL_DMA_IRQHandler+0x6a0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d036      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a7d      	ldr	r2, [pc, #500]	@ (8002340 <HAL_DMA_IRQHandler+0x6a4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d031      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7c      	ldr	r2, [pc, #496]	@ (8002344 <HAL_DMA_IRQHandler+0x6a8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d02c      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a7a      	ldr	r2, [pc, #488]	@ (8002348 <HAL_DMA_IRQHandler+0x6ac>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d027      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a79      	ldr	r2, [pc, #484]	@ (800234c <HAL_DMA_IRQHandler+0x6b0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a77      	ldr	r2, [pc, #476]	@ (8002350 <HAL_DMA_IRQHandler+0x6b4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01d      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a76      	ldr	r2, [pc, #472]	@ (8002354 <HAL_DMA_IRQHandler+0x6b8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a74      	ldr	r2, [pc, #464]	@ (8002358 <HAL_DMA_IRQHandler+0x6bc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a73      	ldr	r2, [pc, #460]	@ (800235c <HAL_DMA_IRQHandler+0x6c0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00e      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a71      	ldr	r2, [pc, #452]	@ (8002360 <HAL_DMA_IRQHandler+0x6c4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a70      	ldr	r2, [pc, #448]	@ (8002364 <HAL_DMA_IRQHandler+0x6c8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x516>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002368 <HAL_DMA_IRQHandler+0x6cc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10a      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x52c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e009      	b.n	80021dc <HAL_DMA_IRQHandler+0x540>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d03e      	beq.n	800225e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2210      	movs	r2, #16
 80021ea:	409a      	lsls	r2, r3
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d018      	beq.n	8002230 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d108      	bne.n	800221e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d024      	beq.n	800225e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e01f      	b.n	800225e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01b      	beq.n	800225e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
 800222e:	e016      	b.n	800225e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2220      	movs	r2, #32
 8002268:	409a      	lsls	r2, r3
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8110 	beq.w	8002494 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2c      	ldr	r2, [pc, #176]	@ (800232c <HAL_DMA_IRQHandler+0x690>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d04a      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2b      	ldr	r2, [pc, #172]	@ (8002330 <HAL_DMA_IRQHandler+0x694>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d045      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a29      	ldr	r2, [pc, #164]	@ (8002334 <HAL_DMA_IRQHandler+0x698>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d040      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a28      	ldr	r2, [pc, #160]	@ (8002338 <HAL_DMA_IRQHandler+0x69c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d03b      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a26      	ldr	r2, [pc, #152]	@ (800233c <HAL_DMA_IRQHandler+0x6a0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d036      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a25      	ldr	r2, [pc, #148]	@ (8002340 <HAL_DMA_IRQHandler+0x6a4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d031      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <HAL_DMA_IRQHandler+0x6a8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02c      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a22      	ldr	r2, [pc, #136]	@ (8002348 <HAL_DMA_IRQHandler+0x6ac>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d027      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a20      	ldr	r2, [pc, #128]	@ (800234c <HAL_DMA_IRQHandler+0x6b0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002350 <HAL_DMA_IRQHandler+0x6b4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01d      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <HAL_DMA_IRQHandler+0x6b8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d018      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002358 <HAL_DMA_IRQHandler+0x6bc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1a      	ldr	r2, [pc, #104]	@ (800235c <HAL_DMA_IRQHandler+0x6c0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <HAL_DMA_IRQHandler+0x6c4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a17      	ldr	r2, [pc, #92]	@ (8002364 <HAL_DMA_IRQHandler+0x6c8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_DMA_IRQHandler+0x678>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a16      	ldr	r2, [pc, #88]	@ (8002368 <HAL_DMA_IRQHandler+0x6cc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d12b      	bne.n	800236c <HAL_DMA_IRQHandler+0x6d0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	e02a      	b.n	8002380 <HAL_DMA_IRQHandler+0x6e4>
 800232a:	bf00      	nop
 800232c:	40020010 	.word	0x40020010
 8002330:	40020028 	.word	0x40020028
 8002334:	40020040 	.word	0x40020040
 8002338:	40020058 	.word	0x40020058
 800233c:	40020070 	.word	0x40020070
 8002340:	40020088 	.word	0x40020088
 8002344:	400200a0 	.word	0x400200a0
 8002348:	400200b8 	.word	0x400200b8
 800234c:	40020410 	.word	0x40020410
 8002350:	40020428 	.word	0x40020428
 8002354:	40020440 	.word	0x40020440
 8002358:	40020458 	.word	0x40020458
 800235c:	40020470 	.word	0x40020470
 8002360:	40020488 	.word	0x40020488
 8002364:	400204a0 	.word	0x400204a0
 8002368:	400204b8 	.word	0x400204b8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf14      	ite	ne
 800237a:	2301      	movne	r3, #1
 800237c:	2300      	moveq	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8087 	beq.w	8002494 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2220      	movs	r2, #32
 8002390:	409a      	lsls	r2, r3
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d139      	bne.n	8002416 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0216 	bic.w	r2, r2, #22
 80023b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x736>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	223f      	movs	r2, #63	@ 0x3f
 80023ec:	409a      	lsls	r2, r3
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 834a 	beq.w	8002aa0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
          }
          return;
 8002414:	e344      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d018      	beq.n	8002456 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02c      	beq.n	8002494 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
 8002442:	e027      	b.n	8002494 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
 8002454:	e01e      	b.n	8002494 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8306 	beq.w	8002aaa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8088 	beq.w	80025bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2204      	movs	r2, #4
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7a      	ldr	r2, [pc, #488]	@ (80026a4 <HAL_DMA_IRQHandler+0xa08>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d04a      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a79      	ldr	r2, [pc, #484]	@ (80026a8 <HAL_DMA_IRQHandler+0xa0c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d045      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a77      	ldr	r2, [pc, #476]	@ (80026ac <HAL_DMA_IRQHandler+0xa10>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a76      	ldr	r2, [pc, #472]	@ (80026b0 <HAL_DMA_IRQHandler+0xa14>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d03b      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a74      	ldr	r2, [pc, #464]	@ (80026b4 <HAL_DMA_IRQHandler+0xa18>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d036      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	@ (80026b8 <HAL_DMA_IRQHandler+0xa1c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a71      	ldr	r2, [pc, #452]	@ (80026bc <HAL_DMA_IRQHandler+0xa20>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02c      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a70      	ldr	r2, [pc, #448]	@ (80026c0 <HAL_DMA_IRQHandler+0xa24>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d027      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6e      	ldr	r2, [pc, #440]	@ (80026c4 <HAL_DMA_IRQHandler+0xa28>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6d      	ldr	r2, [pc, #436]	@ (80026c8 <HAL_DMA_IRQHandler+0xa2c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01d      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6b      	ldr	r2, [pc, #428]	@ (80026cc <HAL_DMA_IRQHandler+0xa30>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d018      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6a      	ldr	r2, [pc, #424]	@ (80026d0 <HAL_DMA_IRQHandler+0xa34>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	@ (80026d4 <HAL_DMA_IRQHandler+0xa38>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00e      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a67      	ldr	r2, [pc, #412]	@ (80026d8 <HAL_DMA_IRQHandler+0xa3c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <HAL_DMA_IRQHandler+0xa40>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_DMA_IRQHandler+0x8b8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a64      	ldr	r2, [pc, #400]	@ (80026e0 <HAL_DMA_IRQHandler+0xa44>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d108      	bne.n	8002566 <HAL_DMA_IRQHandler+0x8ca>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e007      	b.n	8002576 <HAL_DMA_IRQHandler+0x8da>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257e:	429a      	cmp	r2, r3
 8002580:	d307      	bcc.n	8002592 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f2      	bne.n	8002576 <HAL_DMA_IRQHandler+0x8da>
 8002590:	e000      	b.n	8002594 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002592:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80025aa:	e003      	b.n	80025b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8272 	beq.w	8002aaa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
 80025ce:	e26c      	b.n	8002aaa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a43      	ldr	r2, [pc, #268]	@ (80026e4 <HAL_DMA_IRQHandler+0xa48>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d022      	beq.n	8002620 <HAL_DMA_IRQHandler+0x984>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a42      	ldr	r2, [pc, #264]	@ (80026e8 <HAL_DMA_IRQHandler+0xa4c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01d      	beq.n	8002620 <HAL_DMA_IRQHandler+0x984>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a40      	ldr	r2, [pc, #256]	@ (80026ec <HAL_DMA_IRQHandler+0xa50>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d018      	beq.n	8002620 <HAL_DMA_IRQHandler+0x984>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a3f      	ldr	r2, [pc, #252]	@ (80026f0 <HAL_DMA_IRQHandler+0xa54>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_IRQHandler+0x984>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a3d      	ldr	r2, [pc, #244]	@ (80026f4 <HAL_DMA_IRQHandler+0xa58>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00e      	beq.n	8002620 <HAL_DMA_IRQHandler+0x984>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3c      	ldr	r2, [pc, #240]	@ (80026f8 <HAL_DMA_IRQHandler+0xa5c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_DMA_IRQHandler+0x984>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a3a      	ldr	r2, [pc, #232]	@ (80026fc <HAL_DMA_IRQHandler+0xa60>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_DMA_IRQHandler+0x984>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a39      	ldr	r2, [pc, #228]	@ (8002700 <HAL_DMA_IRQHandler+0xa64>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_DMA_IRQHandler+0x988>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_DMA_IRQHandler+0x98a>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 823f 	beq.w	8002aaa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2204      	movs	r2, #4
 800263e:	409a      	lsls	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80cd 	beq.w	80027e4 <HAL_DMA_IRQHandler+0xb48>
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80c7 	beq.w	80027e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2204      	movs	r2, #4
 8002660:	409a      	lsls	r2, r3
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d049      	beq.n	8002704 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8210 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800268c:	e20a      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8206 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026a0:	e200      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xe08>
 80026a2:	bf00      	nop
 80026a4:	40020010 	.word	0x40020010
 80026a8:	40020028 	.word	0x40020028
 80026ac:	40020040 	.word	0x40020040
 80026b0:	40020058 	.word	0x40020058
 80026b4:	40020070 	.word	0x40020070
 80026b8:	40020088 	.word	0x40020088
 80026bc:	400200a0 	.word	0x400200a0
 80026c0:	400200b8 	.word	0x400200b8
 80026c4:	40020410 	.word	0x40020410
 80026c8:	40020428 	.word	0x40020428
 80026cc:	40020440 	.word	0x40020440
 80026d0:	40020458 	.word	0x40020458
 80026d4:	40020470 	.word	0x40020470
 80026d8:	40020488 	.word	0x40020488
 80026dc:	400204a0 	.word	0x400204a0
 80026e0:	400204b8 	.word	0x400204b8
 80026e4:	58025408 	.word	0x58025408
 80026e8:	5802541c 	.word	0x5802541c
 80026ec:	58025430 	.word	0x58025430
 80026f0:	58025444 	.word	0x58025444
 80026f4:	58025458 	.word	0x58025458
 80026f8:	5802546c 	.word	0x5802546c
 80026fc:	58025480 	.word	0x58025480
 8002700:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d160      	bne.n	80027d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7f      	ldr	r2, [pc, #508]	@ (8002910 <HAL_DMA_IRQHandler+0xc74>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04a      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a7d      	ldr	r2, [pc, #500]	@ (8002914 <HAL_DMA_IRQHandler+0xc78>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d045      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a7c      	ldr	r2, [pc, #496]	@ (8002918 <HAL_DMA_IRQHandler+0xc7c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d040      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a7a      	ldr	r2, [pc, #488]	@ (800291c <HAL_DMA_IRQHandler+0xc80>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d03b      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a79      	ldr	r2, [pc, #484]	@ (8002920 <HAL_DMA_IRQHandler+0xc84>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d036      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a77      	ldr	r2, [pc, #476]	@ (8002924 <HAL_DMA_IRQHandler+0xc88>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a76      	ldr	r2, [pc, #472]	@ (8002928 <HAL_DMA_IRQHandler+0xc8c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d02c      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a74      	ldr	r2, [pc, #464]	@ (800292c <HAL_DMA_IRQHandler+0xc90>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a73      	ldr	r2, [pc, #460]	@ (8002930 <HAL_DMA_IRQHandler+0xc94>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a71      	ldr	r2, [pc, #452]	@ (8002934 <HAL_DMA_IRQHandler+0xc98>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a70      	ldr	r2, [pc, #448]	@ (8002938 <HAL_DMA_IRQHandler+0xc9c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d018      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6e      	ldr	r2, [pc, #440]	@ (800293c <HAL_DMA_IRQHandler+0xca0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6d      	ldr	r2, [pc, #436]	@ (8002940 <HAL_DMA_IRQHandler+0xca4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6b      	ldr	r2, [pc, #428]	@ (8002944 <HAL_DMA_IRQHandler+0xca8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6a      	ldr	r2, [pc, #424]	@ (8002948 <HAL_DMA_IRQHandler+0xcac>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_IRQHandler+0xb12>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a68      	ldr	r2, [pc, #416]	@ (800294c <HAL_DMA_IRQHandler+0xcb0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d108      	bne.n	80027c0 <HAL_DMA_IRQHandler+0xb24>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e007      	b.n	80027d0 <HAL_DMA_IRQHandler+0xb34>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8165 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027e2:	e15f      	b.n	8002aa4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2202      	movs	r2, #2
 80027ee:	409a      	lsls	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80c5 	beq.w	8002984 <HAL_DMA_IRQHandler+0xce8>
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80bf 	beq.w	8002984 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2202      	movs	r2, #2
 8002810:	409a      	lsls	r2, r3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d018      	beq.n	8002852 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 813a 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800283c:	e134      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8130 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002850:	e12a      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 8089 	bne.w	8002970 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2b      	ldr	r2, [pc, #172]	@ (8002910 <HAL_DMA_IRQHandler+0xc74>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d04a      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a29      	ldr	r2, [pc, #164]	@ (8002914 <HAL_DMA_IRQHandler+0xc78>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d045      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a28      	ldr	r2, [pc, #160]	@ (8002918 <HAL_DMA_IRQHandler+0xc7c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d040      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a26      	ldr	r2, [pc, #152]	@ (800291c <HAL_DMA_IRQHandler+0xc80>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d03b      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a25      	ldr	r2, [pc, #148]	@ (8002920 <HAL_DMA_IRQHandler+0xc84>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d036      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a23      	ldr	r2, [pc, #140]	@ (8002924 <HAL_DMA_IRQHandler+0xc88>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d031      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a22      	ldr	r2, [pc, #136]	@ (8002928 <HAL_DMA_IRQHandler+0xc8c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d02c      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a20      	ldr	r2, [pc, #128]	@ (800292c <HAL_DMA_IRQHandler+0xc90>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d027      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <HAL_DMA_IRQHandler+0xc94>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <HAL_DMA_IRQHandler+0xc98>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01d      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <HAL_DMA_IRQHandler+0xc9c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d018      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1a      	ldr	r2, [pc, #104]	@ (800293c <HAL_DMA_IRQHandler+0xca0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a19      	ldr	r2, [pc, #100]	@ (8002940 <HAL_DMA_IRQHandler+0xca4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a17      	ldr	r2, [pc, #92]	@ (8002944 <HAL_DMA_IRQHandler+0xca8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a16      	ldr	r2, [pc, #88]	@ (8002948 <HAL_DMA_IRQHandler+0xcac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_DMA_IRQHandler+0xc62>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <HAL_DMA_IRQHandler+0xcb0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d128      	bne.n	8002950 <HAL_DMA_IRQHandler+0xcb4>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0214 	bic.w	r2, r2, #20
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e027      	b.n	8002960 <HAL_DMA_IRQHandler+0xcc4>
 8002910:	40020010 	.word	0x40020010
 8002914:	40020028 	.word	0x40020028
 8002918:	40020040 	.word	0x40020040
 800291c:	40020058 	.word	0x40020058
 8002920:	40020070 	.word	0x40020070
 8002924:	40020088 	.word	0x40020088
 8002928:	400200a0 	.word	0x400200a0
 800292c:	400200b8 	.word	0x400200b8
 8002930:	40020410 	.word	0x40020410
 8002934:	40020428 	.word	0x40020428
 8002938:	40020440 	.word	0x40020440
 800293c:	40020458 	.word	0x40020458
 8002940:	40020470 	.word	0x40020470
 8002944:	40020488 	.word	0x40020488
 8002948:	400204a0 	.word	0x400204a0
 800294c:	400204b8 	.word	0x400204b8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 020a 	bic.w	r2, r2, #10
 800295e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002982:	e091      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2208      	movs	r2, #8
 800298e:	409a      	lsls	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8088 	beq.w	8002aaa <HAL_DMA_IRQHandler+0xe0e>
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8082 	beq.w	8002aaa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a41      	ldr	r2, [pc, #260]	@ (8002ab0 <HAL_DMA_IRQHandler+0xe14>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d04a      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ab4 <HAL_DMA_IRQHandler+0xe18>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d045      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a3e      	ldr	r2, [pc, #248]	@ (8002ab8 <HAL_DMA_IRQHandler+0xe1c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d040      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3c      	ldr	r2, [pc, #240]	@ (8002abc <HAL_DMA_IRQHandler+0xe20>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d03b      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac0 <HAL_DMA_IRQHandler+0xe24>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d036      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a39      	ldr	r2, [pc, #228]	@ (8002ac4 <HAL_DMA_IRQHandler+0xe28>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a38      	ldr	r2, [pc, #224]	@ (8002ac8 <HAL_DMA_IRQHandler+0xe2c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d02c      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a36      	ldr	r2, [pc, #216]	@ (8002acc <HAL_DMA_IRQHandler+0xe30>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d027      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a35      	ldr	r2, [pc, #212]	@ (8002ad0 <HAL_DMA_IRQHandler+0xe34>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a33      	ldr	r2, [pc, #204]	@ (8002ad4 <HAL_DMA_IRQHandler+0xe38>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a32      	ldr	r2, [pc, #200]	@ (8002ad8 <HAL_DMA_IRQHandler+0xe3c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a30      	ldr	r2, [pc, #192]	@ (8002adc <HAL_DMA_IRQHandler+0xe40>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae0 <HAL_DMA_IRQHandler+0xe44>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae4 <HAL_DMA_IRQHandler+0xe48>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae8 <HAL_DMA_IRQHandler+0xe4c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xdaa>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a2a      	ldr	r2, [pc, #168]	@ (8002aec <HAL_DMA_IRQHandler+0xe50>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d108      	bne.n	8002a58 <HAL_DMA_IRQHandler+0xdbc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 021c 	bic.w	r2, r2, #28
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e007      	b.n	8002a68 <HAL_DMA_IRQHandler+0xdcc>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020e 	bic.w	r2, r2, #14
 8002a66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2201      	movs	r2, #1
 8002a72:	409a      	lsls	r2, r3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
 8002a9e:	e004      	b.n	8002aaa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002aa0:	bf00      	nop
 8002aa2:	e002      	b.n	8002aaa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aa8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002aaa:	3728      	adds	r7, #40	@ 0x28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	40020040 	.word	0x40020040
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	40020070 	.word	0x40020070
 8002ac4:	40020088 	.word	0x40020088
 8002ac8:	400200a0 	.word	0x400200a0
 8002acc:	400200b8 	.word	0x400200b8
 8002ad0:	40020410 	.word	0x40020410
 8002ad4:	40020428 	.word	0x40020428
 8002ad8:	40020440 	.word	0x40020440
 8002adc:	40020458 	.word	0x40020458
 8002ae0:	40020470 	.word	0x40020470
 8002ae4:	40020488 	.word	0x40020488
 8002ae8:	400204a0 	.word	0x400204a0
 8002aec:	400204b8 	.word	0x400204b8

08002af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a42      	ldr	r2, [pc, #264]	@ (8002c08 <DMA_CalcBaseAndBitshift+0x118>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d04a      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a41      	ldr	r2, [pc, #260]	@ (8002c0c <DMA_CalcBaseAndBitshift+0x11c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d045      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a3f      	ldr	r2, [pc, #252]	@ (8002c10 <DMA_CalcBaseAndBitshift+0x120>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d040      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c14 <DMA_CalcBaseAndBitshift+0x124>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d03b      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3c      	ldr	r2, [pc, #240]	@ (8002c18 <DMA_CalcBaseAndBitshift+0x128>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d036      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c1c <DMA_CalcBaseAndBitshift+0x12c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d031      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a39      	ldr	r2, [pc, #228]	@ (8002c20 <DMA_CalcBaseAndBitshift+0x130>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02c      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a38      	ldr	r2, [pc, #224]	@ (8002c24 <DMA_CalcBaseAndBitshift+0x134>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d027      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a36      	ldr	r2, [pc, #216]	@ (8002c28 <DMA_CalcBaseAndBitshift+0x138>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d022      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <DMA_CalcBaseAndBitshift+0x13c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01d      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a33      	ldr	r2, [pc, #204]	@ (8002c30 <DMA_CalcBaseAndBitshift+0x140>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d018      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a32      	ldr	r2, [pc, #200]	@ (8002c34 <DMA_CalcBaseAndBitshift+0x144>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a30      	ldr	r2, [pc, #192]	@ (8002c38 <DMA_CalcBaseAndBitshift+0x148>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x14c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x150>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <DMA_CalcBaseAndBitshift+0xa8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <DMA_CalcBaseAndBitshift+0x154>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <DMA_CalcBaseAndBitshift+0xac>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <DMA_CalcBaseAndBitshift+0xae>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d024      	beq.n	8002bec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3b10      	subs	r3, #16
 8002baa:	4a27      	ldr	r2, [pc, #156]	@ (8002c48 <DMA_CalcBaseAndBitshift+0x158>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	4a24      	ldr	r2, [pc, #144]	@ (8002c4c <DMA_CalcBaseAndBitshift+0x15c>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d908      	bls.n	8002bdc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c50 <DMA_CalcBaseAndBitshift+0x160>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bda:	e00d      	b.n	8002bf8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <DMA_CalcBaseAndBitshift+0x160>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bea:	e005      	b.n	8002bf8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40020010 	.word	0x40020010
 8002c0c:	40020028 	.word	0x40020028
 8002c10:	40020040 	.word	0x40020040
 8002c14:	40020058 	.word	0x40020058
 8002c18:	40020070 	.word	0x40020070
 8002c1c:	40020088 	.word	0x40020088
 8002c20:	400200a0 	.word	0x400200a0
 8002c24:	400200b8 	.word	0x400200b8
 8002c28:	40020410 	.word	0x40020410
 8002c2c:	40020428 	.word	0x40020428
 8002c30:	40020440 	.word	0x40020440
 8002c34:	40020458 	.word	0x40020458
 8002c38:	40020470 	.word	0x40020470
 8002c3c:	40020488 	.word	0x40020488
 8002c40:	400204a0 	.word	0x400204a0
 8002c44:	400204b8 	.word	0x400204b8
 8002c48:	aaaaaaab 	.word	0xaaaaaaab
 8002c4c:	080083e0 	.word	0x080083e0
 8002c50:	fffffc00 	.word	0xfffffc00

08002c54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d120      	bne.n	8002caa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d858      	bhi.n	8002d22 <DMA_CheckFifoParam+0xce>
 8002c70:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <DMA_CheckFifoParam+0x24>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c9b 	.word	0x08002c9b
 8002c80:	08002c89 	.word	0x08002c89
 8002c84:	08002d23 	.word	0x08002d23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d048      	beq.n	8002d26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c98:	e045      	b.n	8002d26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ca2:	d142      	bne.n	8002d2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ca8:	e03f      	b.n	8002d2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cb2:	d123      	bne.n	8002cfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d838      	bhi.n	8002d2e <DMA_CheckFifoParam+0xda>
 8002cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <DMA_CheckFifoParam+0x70>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002cdb 	.word	0x08002cdb
 8002ccc:	08002cd5 	.word	0x08002cd5
 8002cd0:	08002ced 	.word	0x08002ced
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
        break;
 8002cd8:	e030      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d025      	beq.n	8002d32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cea:	e022      	b.n	8002d32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cf4:	d11f      	bne.n	8002d36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cfa:	e01c      	b.n	8002d36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d902      	bls.n	8002d0a <DMA_CheckFifoParam+0xb6>
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d003      	beq.n	8002d10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002d08:	e018      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d0e:	e015      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8002d20:	e00b      	b.n	8002d3a <DMA_CheckFifoParam+0xe6>
        break;
 8002d22:	bf00      	nop
 8002d24:	e00a      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
        break;
 8002d26:	bf00      	nop
 8002d28:	e008      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
        break;
 8002d2a:	bf00      	nop
 8002d2c:	e006      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
        break;
 8002d2e:	bf00      	nop
 8002d30:	e004      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
        break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
        break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <DMA_CheckFifoParam+0xe8>
    break;
 8002d3a:	bf00      	nop
    }
  }

  return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop

08002d4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a38      	ldr	r2, [pc, #224]	@ (8002e40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d022      	beq.n	8002daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a36      	ldr	r2, [pc, #216]	@ (8002e44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01d      	beq.n	8002daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a35      	ldr	r2, [pc, #212]	@ (8002e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d018      	beq.n	8002daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a33      	ldr	r2, [pc, #204]	@ (8002e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a32      	ldr	r2, [pc, #200]	@ (8002e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00e      	beq.n	8002daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a30      	ldr	r2, [pc, #192]	@ (8002e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d009      	beq.n	8002daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01a      	beq.n	8002dea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3b08      	subs	r3, #8
 8002dbc:	4a28      	ldr	r2, [pc, #160]	@ (8002e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4b26      	ldr	r3, [pc, #152]	@ (8002e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a24      	ldr	r2, [pc, #144]	@ (8002e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002dd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2201      	movs	r2, #1
 8002de2:	409a      	lsls	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002de8:	e024      	b.n	8002e34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3b10      	subs	r3, #16
 8002df2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d806      	bhi.n	8002e12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4a1b      	ldr	r2, [pc, #108]	@ (8002e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d902      	bls.n	8002e12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002e24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	58025408 	.word	0x58025408
 8002e44:	5802541c 	.word	0x5802541c
 8002e48:	58025430 	.word	0x58025430
 8002e4c:	58025444 	.word	0x58025444
 8002e50:	58025458 	.word	0x58025458
 8002e54:	5802546c 	.word	0x5802546c
 8002e58:	58025480 	.word	0x58025480
 8002e5c:	58025494 	.word	0x58025494
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	16009600 	.word	0x16009600
 8002e68:	58025880 	.word	0x58025880
 8002e6c:	aaaaaaab 	.word	0xaaaaaaab
 8002e70:	400204b8 	.word	0x400204b8
 8002e74:	4002040f 	.word	0x4002040f
 8002e78:	10008200 	.word	0x10008200
 8002e7c:	40020880 	.word	0x40020880

08002e80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d04a      	beq.n	8002f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d847      	bhi.n	8002f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a24      	ldr	r2, [pc, #144]	@ (8002f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01d      	beq.n	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a21      	ldr	r2, [pc, #132]	@ (8002f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a15      	ldr	r2, [pc, #84]	@ (8002f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002f08:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f0a:	e009      	b.n	8002f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a11      	ldr	r2, [pc, #68]	@ (8002f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002f1e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	2201      	movs	r2, #1
 8002f26:	409a      	lsls	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	58025408 	.word	0x58025408
 8002f3c:	5802541c 	.word	0x5802541c
 8002f40:	58025430 	.word	0x58025430
 8002f44:	58025444 	.word	0x58025444
 8002f48:	58025458 	.word	0x58025458
 8002f4c:	5802546c 	.word	0x5802546c
 8002f50:	58025480 	.word	0x58025480
 8002f54:	58025494 	.word	0x58025494
 8002f58:	1600963f 	.word	0x1600963f
 8002f5c:	58025940 	.word	0x58025940
 8002f60:	1000823f 	.word	0x1000823f
 8002f64:	40020940 	.word	0x40020940

08002f68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0e3      	b.n	8003142 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2223      	movs	r2, #35	@ 0x23
 8002f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fdfd 	bl	8000b8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f92:	4b6e      	ldr	r3, [pc, #440]	@ (800314c <HAL_ETH_Init+0x1e4>)
 8002f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f98:	4a6c      	ldr	r2, [pc, #432]	@ (800314c <HAL_ETH_Init+0x1e4>)
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800314c <HAL_ETH_Init+0x1e4>)
 8002fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7a1b      	ldrb	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fe f9ef 	bl	800139c <HAL_SYSCFG_ETHInterfaceSelect>
 8002fbe:	e003      	b.n	8002fc8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002fc0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002fc4:	f7fe f9ea 	bl	800139c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002fc8:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_ETH_Init+0x1e8>)
 8002fca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fe2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe4:	f7fe f99e 	bl	8001324 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002fea:	e011      	b.n	8003010 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002fec:	f7fe f99a 	bl	8001324 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ffa:	d909      	bls.n	8003010 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2204      	movs	r2, #4
 8003000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	22e0      	movs	r2, #224	@ 0xe0
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e098      	b.n	8003142 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e4      	bne.n	8002fec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f89e 	bl	8003164 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003028:	f001 fea0 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 800302c:	4603      	mov	r3, r0
 800302e:	4a49      	ldr	r2, [pc, #292]	@ (8003154 <HAL_ETH_Init+0x1ec>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	0c9a      	lsrs	r2, r3, #18
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3a01      	subs	r2, #1
 800303c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa81 	bl	8003548 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800304e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003052:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800305e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003062:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	22e0      	movs	r2, #224	@ 0xe0
 800307e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e05d      	b.n	8003142 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800308e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003092:	4b31      	ldr	r3, [pc, #196]	@ (8003158 <HAL_ETH_Init+0x1f0>)
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6952      	ldr	r2, [r2, #20]
 800309a:	0051      	lsls	r1, r2, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030a6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fae9 	bl	8003682 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fb2f 	bl	8003714 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	3305      	adds	r3, #5
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	021a      	lsls	r2, r3, #8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	3303      	adds	r3, #3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	061a      	lsls	r2, r3, #24
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	3302      	adds	r3, #2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	3301      	adds	r3, #1
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80030f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003102:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003104:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <HAL_ETH_Init+0x1f4>)
 8003116:	430b      	orrs	r3, r1
 8003118:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <HAL_ETH_Init+0x1f8>)
 800312a:	430b      	orrs	r3, r1
 800312c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2210      	movs	r2, #16
 800313c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	58024400 	.word	0x58024400
 8003150:	58000400 	.word	0x58000400
 8003154:	431bde83 	.word	0x431bde83
 8003158:	ffff8001 	.word	0xffff8001
 800315c:	0c020060 	.word	0x0c020060
 8003160:	0c20c000 	.word	0x0c20c000

08003164 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003174:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800317c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800317e:	f001 fdf5 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8003182:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4a1a      	ldr	r2, [pc, #104]	@ (80031f0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d804      	bhi.n	8003196 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	e022      	b.n	80031dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4a16      	ldr	r2, [pc, #88]	@ (80031f4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d204      	bcs.n	80031a8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e019      	b.n	80031dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4a13      	ldr	r2, [pc, #76]	@ (80031f8 <HAL_ETH_SetMDIOClockRange+0x94>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d915      	bls.n	80031dc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <HAL_ETH_SetMDIOClockRange+0x98>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d804      	bhi.n	80031c2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e00c      	b.n	80031dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d804      	bhi.n	80031d4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e003      	b.n	80031dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80031da:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	02160ebf 	.word	0x02160ebf
 80031f4:	03938700 	.word	0x03938700
 80031f8:	05f5e0ff 	.word	0x05f5e0ff
 80031fc:	08f0d17f 	.word	0x08f0d17f
 8003200:	0ee6b27f 	.word	0x0ee6b27f

08003204 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	791b      	ldrb	r3, [r3, #4]
 800321c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800321e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	7b1b      	ldrb	r3, [r3, #12]
 8003224:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	7b5b      	ldrb	r3, [r3, #13]
 800322c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800322e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	7b9b      	ldrb	r3, [r3, #14]
 8003234:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	7bdb      	ldrb	r3, [r3, #15]
 800323c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800323e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	7c12      	ldrb	r2, [r2, #16]
 8003244:	2a00      	cmp	r2, #0
 8003246:	d102      	bne.n	800324e <ETH_SetMACConfig+0x4a>
 8003248:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800324c:	e000      	b.n	8003250 <ETH_SetMACConfig+0x4c>
 800324e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003250:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	7c52      	ldrb	r2, [r2, #17]
 8003256:	2a00      	cmp	r2, #0
 8003258:	d102      	bne.n	8003260 <ETH_SetMACConfig+0x5c>
 800325a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800325e:	e000      	b.n	8003262 <ETH_SetMACConfig+0x5e>
 8003260:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	7c9b      	ldrb	r3, [r3, #18]
 8003268:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800326a:	431a      	orrs	r2, r3
               macconf->Speed |
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003270:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003276:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	7f1b      	ldrb	r3, [r3, #28]
 800327c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800327e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	7f5b      	ldrb	r3, [r3, #29]
 8003284:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003286:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	7f92      	ldrb	r2, [r2, #30]
 800328c:	2a00      	cmp	r2, #0
 800328e:	d102      	bne.n	8003296 <ETH_SetMACConfig+0x92>
 8003290:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003294:	e000      	b.n	8003298 <ETH_SetMACConfig+0x94>
 8003296:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003298:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	7fdb      	ldrb	r3, [r3, #31]
 800329e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80032a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80032a8:	2a00      	cmp	r2, #0
 80032aa:	d102      	bne.n	80032b2 <ETH_SetMACConfig+0xae>
 80032ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032b0:	e000      	b.n	80032b4 <ETH_SetMACConfig+0xb0>
 80032b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80032b4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80032ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032c2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80032c4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b56      	ldr	r3, [pc, #344]	@ (8003430 <ETH_SetMACConfig+0x22c>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	430b      	orrs	r3, r1
 80032e0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032ee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80032f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032f8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80032fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003302:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003304:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800330c:	2a00      	cmp	r2, #0
 800330e:	d102      	bne.n	8003316 <ETH_SetMACConfig+0x112>
 8003310:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003314:	e000      	b.n	8003318 <ETH_SetMACConfig+0x114>
 8003316:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003318:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b42      	ldr	r3, [pc, #264]	@ (8003434 <ETH_SetMACConfig+0x230>)
 800332a:	4013      	ands	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	430b      	orrs	r3, r1
 8003334:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800333c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	4b3a      	ldr	r3, [pc, #232]	@ (8003438 <ETH_SetMACConfig+0x234>)
 800334e:	4013      	ands	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	430b      	orrs	r3, r1
 8003358:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003360:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003366:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800336e:	2a00      	cmp	r2, #0
 8003370:	d101      	bne.n	8003376 <ETH_SetMACConfig+0x172>
 8003372:	2280      	movs	r2, #128	@ 0x80
 8003374:	e000      	b.n	8003378 <ETH_SetMACConfig+0x174>
 8003376:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003378:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800338a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800338e:	4013      	ands	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	430b      	orrs	r3, r1
 8003398:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80033a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80033a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	f023 0103 	bic.w	r1, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80033ce:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	d101      	bne.n	80033f2 <ETH_SetMACConfig+0x1ee>
 80033ee:	2240      	movs	r2, #64	@ 0x40
 80033f0:	e000      	b.n	80033f4 <ETH_SetMACConfig+0x1f0>
 80033f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80033f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80033fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003406:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003414:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	430a      	orrs	r2, r1
 8003420:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	00048083 	.word	0x00048083
 8003434:	c0f88000 	.word	0xc0f88000
 8003438:	fffffef0 	.word	0xfffffef0

0800343c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b38      	ldr	r3, [pc, #224]	@ (8003534 <ETH_SetDMAConfig+0xf8>)
 8003452:	4013      	ands	r3, r2
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	6811      	ldr	r1, [r2, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003462:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	791b      	ldrb	r3, [r3, #4]
 8003468:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800346e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7b1b      	ldrb	r3, [r3, #12]
 8003474:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	4b2c      	ldr	r3, [pc, #176]	@ (8003538 <ETH_SetDMAConfig+0xfc>)
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	430b      	orrs	r3, r1
 8003490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003494:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	7b5b      	ldrb	r3, [r3, #13]
 800349a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80034b0:	4b22      	ldr	r3, [pc, #136]	@ (800353c <ETH_SetDMAConfig+0x100>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	430b      	orrs	r3, r1
 80034bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034c0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	7d1b      	ldrb	r3, [r3, #20]
 80034cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80034ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	7f5b      	ldrb	r3, [r3, #29]
 80034d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80034e6:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <ETH_SetDMAConfig+0x104>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	68f9      	ldr	r1, [r7, #12]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034f6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	7f1b      	ldrb	r3, [r3, #28]
 80034fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003510:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003514:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <ETH_SetDMAConfig+0x108>)
 8003516:	4013      	ands	r3, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	430b      	orrs	r3, r1
 8003520:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003524:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	ffff87fd 	.word	0xffff87fd
 8003538:	ffff2ffe 	.word	0xffff2ffe
 800353c:	fffec000 	.word	0xfffec000
 8003540:	ffc0efef 	.word	0xffc0efef
 8003544:	7fc0ffff 	.word	0x7fc0ffff

08003548 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b0a4      	sub	sp, #144	@ 0x90
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003556:	2300      	movs	r3, #0
 8003558:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003588:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800358a:	2300      	movs	r3, #0
 800358c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003590:	2300      	movs	r3, #0
 8003592:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80035a0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80035a4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80035ac:	2300      	movs	r3, #0
 80035ae:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80035c2:	2300      	movs	r3, #0
 80035c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80035ca:	2300      	movs	r3, #0
 80035cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80035e0:	2320      	movs	r3, #32
 80035e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80035f2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035fc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003604:	2302      	movs	r3, #2
 8003606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003622:	2300      	movs	r3, #0
 8003624:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800362c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fde6 	bl	8003204 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003638:	2301      	movs	r3, #1
 800363a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800363c:	2301      	movs	r3, #1
 800363e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800364a:	2300      	movs	r3, #0
 800364c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800364e:	2300      	movs	r3, #0
 8003650:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003652:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003656:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800365c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003660:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003668:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fee1 	bl	800343c <ETH_SetDMAConfig>
}
 800367a:	bf00      	nop
 800367c:	3790      	adds	r7, #144	@ 0x90
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e01d      	b.n	80036cc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68d9      	ldr	r1, [r3, #12]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	3206      	adds	r2, #6
 80036c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3301      	adds	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d9de      	bls.n	8003690 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e0:	461a      	mov	r2, r3
 80036e2:	2303      	movs	r3, #3
 80036e4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003704:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e023      	b.n	800376a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6919      	ldr	r1, [r3, #16]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	3212      	adds	r2, #18
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3301      	adds	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d9d8      	bls.n	8003722 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003796:	461a      	mov	r2, r3
 8003798:	2303      	movs	r3, #3
 800379a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037aa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037be:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	@ 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80037de:	4b89      	ldr	r3, [pc, #548]	@ (8003a04 <HAL_GPIO_Init+0x234>)
 80037e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037e2:	e194      	b.n	8003b0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa01 f303 	lsl.w	r3, r1, r3
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8186 	beq.w	8003b08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d005      	beq.n	8003814 <HAL_GPIO_Init+0x44>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d130      	bne.n	8003876 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800384a:	2201      	movs	r2, #1
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 0201 	and.w	r2, r3, #1
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b03      	cmp	r3, #3
 8003880:	d017      	beq.n	80038b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d123      	bne.n	8003906 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	08da      	lsrs	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3208      	adds	r2, #8
 80038c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	220f      	movs	r2, #15
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3208      	adds	r2, #8
 8003900:	69b9      	ldr	r1, [r7, #24]
 8003902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	2203      	movs	r2, #3
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0203 	and.w	r2, r3, #3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80e0 	beq.w	8003b08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003948:	4b2f      	ldr	r3, [pc, #188]	@ (8003a08 <HAL_GPIO_Init+0x238>)
 800394a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800394e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a08 <HAL_GPIO_Init+0x238>)
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003958:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_GPIO_Init+0x238>)
 800395a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003966:	4a29      	ldr	r2, [pc, #164]	@ (8003a0c <HAL_GPIO_Init+0x23c>)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a20      	ldr	r2, [pc, #128]	@ (8003a10 <HAL_GPIO_Init+0x240>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d052      	beq.n	8003a38 <HAL_GPIO_Init+0x268>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <HAL_GPIO_Init+0x244>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d031      	beq.n	80039fe <HAL_GPIO_Init+0x22e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a18 <HAL_GPIO_Init+0x248>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02b      	beq.n	80039fa <HAL_GPIO_Init+0x22a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_GPIO_Init+0x24c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d025      	beq.n	80039f6 <HAL_GPIO_Init+0x226>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <HAL_GPIO_Init+0x250>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01f      	beq.n	80039f2 <HAL_GPIO_Init+0x222>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <HAL_GPIO_Init+0x254>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d019      	beq.n	80039ee <HAL_GPIO_Init+0x21e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a28 <HAL_GPIO_Init+0x258>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_GPIO_Init+0x21a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a19      	ldr	r2, [pc, #100]	@ (8003a2c <HAL_GPIO_Init+0x25c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00d      	beq.n	80039e6 <HAL_GPIO_Init+0x216>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a18      	ldr	r2, [pc, #96]	@ (8003a30 <HAL_GPIO_Init+0x260>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <HAL_GPIO_Init+0x212>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a17      	ldr	r2, [pc, #92]	@ (8003a34 <HAL_GPIO_Init+0x264>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_GPIO_Init+0x20e>
 80039da:	2309      	movs	r3, #9
 80039dc:	e02d      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039de:	230a      	movs	r3, #10
 80039e0:	e02b      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039e2:	2308      	movs	r3, #8
 80039e4:	e029      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039e6:	2307      	movs	r3, #7
 80039e8:	e027      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039ea:	2306      	movs	r3, #6
 80039ec:	e025      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039ee:	2305      	movs	r3, #5
 80039f0:	e023      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039f2:	2304      	movs	r3, #4
 80039f4:	e021      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039f6:	2303      	movs	r3, #3
 80039f8:	e01f      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e01d      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e01b      	b.n	8003a3a <HAL_GPIO_Init+0x26a>
 8003a02:	bf00      	nop
 8003a04:	58000080 	.word	0x58000080
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	58000400 	.word	0x58000400
 8003a10:	58020000 	.word	0x58020000
 8003a14:	58020400 	.word	0x58020400
 8003a18:	58020800 	.word	0x58020800
 8003a1c:	58020c00 	.word	0x58020c00
 8003a20:	58021000 	.word	0x58021000
 8003a24:	58021400 	.word	0x58021400
 8003a28:	58021800 	.word	0x58021800
 8003a2c:	58021c00 	.word	0x58021c00
 8003a30:	58022000 	.word	0x58022000
 8003a34:	58022400 	.word	0x58022400
 8003a38:	2300      	movs	r3, #0
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	f002 0203 	and.w	r2, r2, #3
 8003a40:	0092      	lsls	r2, r2, #2
 8003a42:	4093      	lsls	r3, r2
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a4a:	4938      	ldr	r1, [pc, #224]	@ (8003b2c <HAL_GPIO_Init+0x35c>)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3302      	adds	r3, #2
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f47f ae63 	bne.w	80037e4 <HAL_GPIO_Init+0x14>
  }
}
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
 8003b22:	3724      	adds	r7, #36	@ 0x24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	58000400 	.word	0x58000400

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0fe      	b.n	8003d72 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fd f9dd 	bl	8000f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f004 f94a 	bl	8007e34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7c1a      	ldrb	r2, [r3, #16]
 8003ba8:	f88d 2000 	strb.w	r2, [sp]
 8003bac:	3304      	adds	r3, #4
 8003bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb0:	f004 f8ce 	bl	8007d50 <USB_CoreInit>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0d5      	b.n	8003d72 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f004 f942 	bl	8007e56 <USB_SetCurrentMode>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0c6      	b.n	8003d72 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e04a      	b.n	8003c80 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3315      	adds	r3, #21
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	b298      	uxth	r0, r3
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	332e      	adds	r3, #46	@ 0x2e
 8003c26:	4602      	mov	r2, r0
 8003c28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3318      	adds	r3, #24
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	331c      	adds	r3, #28
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	3320      	adds	r3, #32
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	3324      	adds	r3, #36	@ 0x24
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	791b      	ldrb	r3, [r3, #4]
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3af      	bcc.n	8003bea <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e044      	b.n	8003d1a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	3301      	adds	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3b5      	bcc.n	8003c90 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7c1a      	ldrb	r2, [r3, #16]
 8003d2c:	f88d 2000 	strb.w	r2, [sp]
 8003d30:	3304      	adds	r3, #4
 8003d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d34:	f004 f8dc 	bl	8007ef0 <USB_DevInit>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e013      	b.n	8003d72 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7b1b      	ldrb	r3, [r3, #12]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f80b 	bl	8003d7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 fa97 	bl	800829e <USB_DevDisconnect>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003daa:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	10000003 	.word	0x10000003

08003dc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <HAL_PWREx_ConfigSupply+0x70>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d00a      	beq.n	8003dee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003dd8:	4b16      	ldr	r3, [pc, #88]	@ (8003e34 <HAL_PWREx_ConfigSupply+0x70>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e01f      	b.n	8003e2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e01d      	b.n	8003e2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dee:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <HAL_PWREx_ConfigSupply+0x70>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f023 0207 	bic.w	r2, r3, #7
 8003df6:	490f      	ldr	r1, [pc, #60]	@ (8003e34 <HAL_PWREx_ConfigSupply+0x70>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dfe:	f7fd fa91 	bl	8001324 <HAL_GetTick>
 8003e02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e04:	e009      	b.n	8003e1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e06:	f7fd fa8d 	bl	8001324 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e14:	d901      	bls.n	8003e1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e007      	b.n	8003e2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e1a:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <HAL_PWREx_ConfigSupply+0x70>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e26:	d1ee      	bne.n	8003e06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	58024800 	.word	0x58024800

08003e38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e46:	60d3      	str	r3, [r2, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58024800 	.word	0x58024800

08003e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f000 bc48 	b.w	80046fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8088 	beq.w	8003f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7a:	4b99      	ldr	r3, [pc, #612]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e84:	4b96      	ldr	r3, [pc, #600]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d007      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x48>
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	2b18      	cmp	r3, #24
 8003e94:	d111      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d06d      	beq.n	8003f88 <HAL_RCC_OscConfig+0x130>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d169      	bne.n	8003f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f000 bc21 	b.w	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7a>
 8003ec4:	4b86      	ldr	r3, [pc, #536]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a85      	ldr	r2, [pc, #532]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e02e      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x9c>
 8003eda:	4b81      	ldr	r3, [pc, #516]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a80      	ldr	r2, [pc, #512]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7d      	ldr	r2, [pc, #500]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xc0>
 8003efe:	4b78      	ldr	r3, [pc, #480]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a77      	ldr	r2, [pc, #476]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b75      	ldr	r3, [pc, #468]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a74      	ldr	r2, [pc, #464]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003f18:	4b71      	ldr	r3, [pc, #452]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a70      	ldr	r2, [pc, #448]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6e      	ldr	r3, [pc, #440]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6d      	ldr	r2, [pc, #436]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fd f9f4 	bl	8001324 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fd f9f0 	bl	8001324 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e3d4      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f52:	4b63      	ldr	r3, [pc, #396]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe8>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd f9e0 	bl	8001324 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fd f9dc 	bl	8001324 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e3c0      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f7a:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x110>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80ca 	beq.w	800412c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f98:	4b51      	ldr	r3, [pc, #324]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fa0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <HAL_RCC_OscConfig+0x166>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	2b18      	cmp	r3, #24
 8003fb2:	d156      	bne.n	8004062 <HAL_RCC_OscConfig+0x20a>
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d151      	bne.n	8004062 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fbe:	4b48      	ldr	r3, [pc, #288]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x17e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e392      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fd6:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 0219 	bic.w	r2, r3, #25
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	493f      	ldr	r1, [pc, #252]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd f99c 	bl	8001324 <HAL_GetTick>
 8003fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fd f998 	bl	8001324 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e37c      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004002:	4b37      	ldr	r3, [pc, #220]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400e:	f7fd f9b9 	bl	8001384 <HAL_GetREVID>
 8004012:	4603      	mov	r3, r0
 8004014:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004018:	4293      	cmp	r3, r2
 800401a:	d817      	bhi.n	800404c <HAL_RCC_OscConfig+0x1f4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d108      	bne.n	8004036 <HAL_RCC_OscConfig+0x1de>
 8004024:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800402c:	4a2c      	ldr	r2, [pc, #176]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800402e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004032:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004034:	e07a      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	4b2a      	ldr	r3, [pc, #168]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	031b      	lsls	r3, r3, #12
 8004044:	4926      	ldr	r1, [pc, #152]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404a:	e06f      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b24      	ldr	r3, [pc, #144]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	4921      	ldr	r1, [pc, #132]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004060:	e064      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d047      	beq.n	80040fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800406a:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0219 	bic.w	r2, r3, #25
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	491a      	ldr	r1, [pc, #104]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd f952 	bl	8001324 <HAL_GetTick>
 8004080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004084:	f7fd f94e 	bl	8001324 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e332      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004096:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	f7fd f96f 	bl	8001384 <HAL_GetREVID>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d819      	bhi.n	80040e4 <HAL_RCC_OscConfig+0x28c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b40      	cmp	r3, #64	@ 0x40
 80040b6:	d108      	bne.n	80040ca <HAL_RCC_OscConfig+0x272>
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80040c0:	4a07      	ldr	r2, [pc, #28]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c6:	6053      	str	r3, [r2, #4]
 80040c8:	e030      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
 80040ca:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	031b      	lsls	r3, r3, #12
 80040d8:	4901      	ldr	r1, [pc, #4]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	604b      	str	r3, [r1, #4]
 80040de:	e025      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
 80040e0:	58024400 	.word	0x58024400
 80040e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	4997      	ldr	r1, [pc, #604]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
 80040f8:	e018      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fa:	4b95      	ldr	r3, [pc, #596]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a94      	ldr	r2, [pc, #592]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fd f90d 	bl	8001324 <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410e:	f7fd f909 	bl	8001324 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e2ed      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004120:	4b8b      	ldr	r3, [pc, #556]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f0      	bne.n	800410e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a9 	beq.w	800428c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	4b85      	ldr	r3, [pc, #532]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004142:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004144:	4b82      	ldr	r3, [pc, #520]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d007      	beq.n	8004160 <HAL_RCC_OscConfig+0x308>
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b18      	cmp	r3, #24
 8004154:	d13a      	bne.n	80041cc <HAL_RCC_OscConfig+0x374>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d135      	bne.n	80041cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004160:	4b7b      	ldr	r3, [pc, #492]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_OscConfig+0x320>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b80      	cmp	r3, #128	@ 0x80
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e2c1      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004178:	f7fd f904 	bl	8001384 <HAL_GetREVID>
 800417c:	4603      	mov	r3, r0
 800417e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004182:	4293      	cmp	r3, r2
 8004184:	d817      	bhi.n	80041b6 <HAL_RCC_OscConfig+0x35e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	2b20      	cmp	r3, #32
 800418c:	d108      	bne.n	80041a0 <HAL_RCC_OscConfig+0x348>
 800418e:	4b70      	ldr	r3, [pc, #448]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004196:	4a6e      	ldr	r2, [pc, #440]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004198:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800419c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800419e:	e075      	b.n	800428c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	069b      	lsls	r3, r3, #26
 80041ae:	4968      	ldr	r1, [pc, #416]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041b4:	e06a      	b.n	800428c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041b6:	4b66      	ldr	r3, [pc, #408]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	061b      	lsls	r3, r3, #24
 80041c4:	4962      	ldr	r1, [pc, #392]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ca:	e05f      	b.n	800428c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d042      	beq.n	800425a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fd f8a0 	bl	8001324 <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041e8:	f7fd f89c 	bl	8001324 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e280      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041fa:	4b55      	ldr	r3, [pc, #340]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004206:	f7fd f8bd 	bl	8001384 <HAL_GetREVID>
 800420a:	4603      	mov	r3, r0
 800420c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004210:	4293      	cmp	r3, r2
 8004212:	d817      	bhi.n	8004244 <HAL_RCC_OscConfig+0x3ec>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	2b20      	cmp	r3, #32
 800421a:	d108      	bne.n	800422e <HAL_RCC_OscConfig+0x3d6>
 800421c:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004224:	4a4a      	ldr	r2, [pc, #296]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004226:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e02e      	b.n	800428c <HAL_RCC_OscConfig+0x434>
 800422e:	4b48      	ldr	r3, [pc, #288]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	069b      	lsls	r3, r3, #26
 800423c:	4944      	ldr	r1, [pc, #272]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
 8004242:	e023      	b.n	800428c <HAL_RCC_OscConfig+0x434>
 8004244:	4b42      	ldr	r3, [pc, #264]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	493f      	ldr	r1, [pc, #252]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	60cb      	str	r3, [r1, #12]
 8004258:	e018      	b.n	800428c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800425a:	4b3d      	ldr	r3, [pc, #244]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3c      	ldr	r2, [pc, #240]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd f85d 	bl	8001324 <HAL_GetTick>
 800426a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800426e:	f7fd f859 	bl	8001324 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e23d      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004280:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d036      	beq.n	8004306 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d019      	beq.n	80042d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fd f83a 	bl	8001324 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fd f836 	bl	8001324 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e21a      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042c6:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x45c>
 80042d2:	e018      	b.n	8004306 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fd f820 	bl	8001324 <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fd f81c 	bl	8001324 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e200      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d039      	beq.n	8004386 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01c      	beq.n	8004354 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004326:	f7fc fffd 	bl	8001324 <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800432e:	f7fc fff9 	bl	8001324 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e1dd      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004340:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x4d6>
 800434c:	e01b      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004354:	4b9b      	ldr	r3, [pc, #620]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a9a      	ldr	r2, [pc, #616]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800435a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800435e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004360:	f7fc ffe0 	bl	8001324 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004368:	f7fc ffdc 	bl	8001324 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1c0      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800437a:	4b92      	ldr	r3, [pc, #584]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8081 	beq.w	8004496 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004394:	4b8c      	ldr	r3, [pc, #560]	@ (80045c8 <HAL_RCC_OscConfig+0x770>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a8b      	ldr	r2, [pc, #556]	@ (80045c8 <HAL_RCC_OscConfig+0x770>)
 800439a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800439e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a0:	f7fc ffc0 	bl	8001324 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a8:	f7fc ffbc 	bl	8001324 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1a0      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043ba:	4b83      	ldr	r3, [pc, #524]	@ (80045c8 <HAL_RCC_OscConfig+0x770>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x584>
 80043ce:	4b7d      	ldr	r3, [pc, #500]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	4a7c      	ldr	r2, [pc, #496]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043da:	e02d      	b.n	8004438 <HAL_RCC_OscConfig+0x5e0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10c      	bne.n	80043fe <HAL_RCC_OscConfig+0x5a6>
 80043e4:	4b77      	ldr	r3, [pc, #476]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a76      	ldr	r2, [pc, #472]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f0:	4b74      	ldr	r3, [pc, #464]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f4:	4a73      	ldr	r2, [pc, #460]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043f6:	f023 0304 	bic.w	r3, r3, #4
 80043fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fc:	e01c      	b.n	8004438 <HAL_RCC_OscConfig+0x5e0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x5c8>
 8004406:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a6e      	ldr	r2, [pc, #440]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800440c:	f043 0304 	orr.w	r3, r3, #4
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
 8004412:	4b6c      	ldr	r3, [pc, #432]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0x5e0>
 8004420:	4b68      	ldr	r3, [pc, #416]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a67      	ldr	r2, [pc, #412]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
 800442c:	4b65      	ldr	r3, [pc, #404]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	4a64      	ldr	r2, [pc, #400]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004432:	f023 0304 	bic.w	r3, r3, #4
 8004436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fc ff70 	bl	8001324 <HAL_GetTick>
 8004444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004446:	e00a      	b.n	800445e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fc ff6c 	bl	8001324 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e14e      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800445e:	4b59      	ldr	r3, [pc, #356]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ee      	beq.n	8004448 <HAL_RCC_OscConfig+0x5f0>
 800446a:	e014      	b.n	8004496 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fc ff5a 	bl	8001324 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004472:	e00a      	b.n	800448a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004474:	f7fc ff56 	bl	8001324 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e138      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800448a:	4b4e      	ldr	r3, [pc, #312]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ee      	bne.n	8004474 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 812d 	beq.w	80046fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044a0:	4b48      	ldr	r3, [pc, #288]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044a8:	2b18      	cmp	r3, #24
 80044aa:	f000 80bd 	beq.w	8004628 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	f040 809e 	bne.w	80045f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b42      	ldr	r3, [pc, #264]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a41      	ldr	r2, [pc, #260]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fc ff2e 	bl	8001324 <HAL_GetTick>
 80044c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fc ff2a 	bl	8001324 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e10e      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ea:	4b36      	ldr	r3, [pc, #216]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ee:	4b37      	ldr	r3, [pc, #220]	@ (80045cc <HAL_RCC_OscConfig+0x774>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	430a      	orrs	r2, r1
 80044fe:	4931      	ldr	r1, [pc, #196]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	628b      	str	r3, [r1, #40]	@ 0x28
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	3b01      	subs	r3, #1
 800450a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004512:	3b01      	subs	r3, #1
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	b29b      	uxth	r3, r3
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	3b01      	subs	r3, #1
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004534:	4923      	ldr	r1, [pc, #140]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800453a:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	4a21      	ldr	r2, [pc, #132]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004546:	4b1f      	ldr	r3, [pc, #124]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800454a:	4b21      	ldr	r3, [pc, #132]	@ (80045d0 <HAL_RCC_OscConfig+0x778>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004552:	00d2      	lsls	r2, r2, #3
 8004554:	491b      	ldr	r1, [pc, #108]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800455a:	4b1a      	ldr	r3, [pc, #104]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	f023 020c 	bic.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	4917      	ldr	r1, [pc, #92]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800456c:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	f023 0202 	bic.w	r2, r3, #2
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	4912      	ldr	r1, [pc, #72]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800457e:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458a:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	4a0d      	ldr	r2, [pc, #52]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	4a0a      	ldr	r2, [pc, #40]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045a2:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	4a07      	ldr	r2, [pc, #28]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fc feb3 	bl	8001324 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045c0:	e011      	b.n	80045e6 <HAL_RCC_OscConfig+0x78e>
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58024800 	.word	0x58024800
 80045cc:	fffffc0c 	.word	0xfffffc0c
 80045d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fc fea6 	bl	8001324 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e08a      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045e6:	4b47      	ldr	r3, [pc, #284]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x77c>
 80045f2:	e082      	b.n	80046fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f4:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a42      	ldr	r2, [pc, #264]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80045fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fc fe90 	bl	8001324 <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fc fe8c 	bl	8001324 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e070      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800461a:	4b3a      	ldr	r3, [pc, #232]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x7b0>
 8004626:	e068      	b.n	80046fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004628:	4b36      	ldr	r3, [pc, #216]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800462e:	4b35      	ldr	r3, [pc, #212]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	2b01      	cmp	r3, #1
 800463a:	d031      	beq.n	80046a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d12a      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d122      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004664:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d11a      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	0a5b      	lsrs	r3, r3, #9
 800466e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004676:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d111      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d108      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	0e1b      	lsrs	r3, r3, #24
 8004692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e02b      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046a4:	4b17      	ldr	r3, [pc, #92]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a8:	08db      	lsrs	r3, r3, #3
 80046aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d01f      	beq.n	80046fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046ba:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046c6:	f7fc fe2d 	bl	8001324 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80046cc:	bf00      	nop
 80046ce:	f7fc fe29 	bl	8001324 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d0f9      	beq.n	80046ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046da:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046de:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <HAL_RCC_OscConfig+0x8b0>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046e6:	00d2      	lsls	r2, r2, #3
 80046e8:	4906      	ldr	r1, [pc, #24]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046ee:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	4a04      	ldr	r2, [pc, #16]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3730      	adds	r7, #48	@ 0x30
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	58024400 	.word	0x58024400
 8004708:	ffff0007 	.word	0xffff0007

0800470c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e19c      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004720:	4b8a      	ldr	r3, [pc, #552]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d910      	bls.n	8004750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	4b87      	ldr	r3, [pc, #540]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 020f 	bic.w	r2, r3, #15
 8004736:	4985      	ldr	r1, [pc, #532]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b83      	ldr	r3, [pc, #524]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e184      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d010      	beq.n	800477e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	4b7b      	ldr	r3, [pc, #492]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004768:	429a      	cmp	r2, r3
 800476a:	d908      	bls.n	800477e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800476c:	4b78      	ldr	r3, [pc, #480]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	4975      	ldr	r1, [pc, #468]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800477a:	4313      	orrs	r3, r2
 800477c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	4b70      	ldr	r3, [pc, #448]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004796:	429a      	cmp	r2, r3
 8004798:	d908      	bls.n	80047ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800479a:	4b6d      	ldr	r3, [pc, #436]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	496a      	ldr	r1, [pc, #424]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	4b64      	ldr	r3, [pc, #400]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d908      	bls.n	80047da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047c8:	4b61      	ldr	r3, [pc, #388]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	495e      	ldr	r1, [pc, #376]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	4b59      	ldr	r3, [pc, #356]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d908      	bls.n	8004808 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047f6:	4b56      	ldr	r3, [pc, #344]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4953      	ldr	r1, [pc, #332]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004804:	4313      	orrs	r3, r2
 8004806:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b4d      	ldr	r3, [pc, #308]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	429a      	cmp	r2, r3
 8004822:	d908      	bls.n	8004836 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b4a      	ldr	r3, [pc, #296]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f023 020f 	bic.w	r2, r3, #15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4947      	ldr	r1, [pc, #284]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004832:	4313      	orrs	r3, r2
 8004834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d055      	beq.n	80048ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004842:	4b43      	ldr	r3, [pc, #268]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4940      	ldr	r1, [pc, #256]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004850:	4313      	orrs	r3, r2
 8004852:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d107      	bne.n	800486c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800485c:	4b3c      	ldr	r3, [pc, #240]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d121      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0f6      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004874:	4b36      	ldr	r3, [pc, #216]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d115      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0ea      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800488c:	4b30      	ldr	r3, [pc, #192]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0de      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800489c:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0d6      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ac:	4b28      	ldr	r3, [pc, #160]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f023 0207 	bic.w	r2, r3, #7
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4925      	ldr	r1, [pc, #148]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048be:	f7fc fd31 	bl	8001324 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c6:	f7fc fd2d 	bl	8001324 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e0be      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d1eb      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	429a      	cmp	r2, r3
 8004908:	d208      	bcs.n	800491c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490a:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f023 020f 	bic.w	r2, r3, #15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	490e      	ldr	r1, [pc, #56]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004918:	4313      	orrs	r3, r2
 800491a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d214      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b08      	ldr	r3, [pc, #32]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 020f 	bic.w	r2, r3, #15
 8004932:	4906      	ldr	r1, [pc, #24]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b04      	ldr	r3, [pc, #16]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e086      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
 800494c:	52002000 	.word	0x52002000
 8004950:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d010      	beq.n	8004982 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800496c:	429a      	cmp	r2, r3
 800496e:	d208      	bcs.n	8004982 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004970:	4b3c      	ldr	r3, [pc, #240]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	4939      	ldr	r1, [pc, #228]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 800497e:	4313      	orrs	r3, r2
 8004980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800499a:	429a      	cmp	r2, r3
 800499c:	d208      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800499e:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	492e      	ldr	r1, [pc, #184]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d208      	bcs.n	80049de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	4922      	ldr	r1, [pc, #136]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d208      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4917      	ldr	r1, [pc, #92]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a0c:	f000 f834 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b14      	ldr	r3, [pc, #80]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	4912      	ldr	r1, [pc, #72]	@ (8004a68 <HAL_RCC_ClockConfig+0x35c>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	4a0d      	ldr	r2, [pc, #52]	@ (8004a68 <HAL_RCC_ClockConfig+0x35c>)
 8004a34:	5cd3      	ldrb	r3, [r2, r3]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a40:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <HAL_RCC_ClockConfig+0x360>)
 8004a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a44:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <HAL_RCC_ClockConfig+0x364>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <HAL_RCC_ClockConfig+0x368>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fc1e 	bl	8001290 <HAL_InitTick>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
 8004a68:	080083d0 	.word	0x080083d0
 8004a6c:	24000014 	.word	0x24000014
 8004a70:	24000010 	.word	0x24000010
 8004a74:	24000018 	.word	0x24000018

08004a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7e:	4bb3      	ldr	r3, [pc, #716]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a86:	2b18      	cmp	r3, #24
 8004a88:	f200 8155 	bhi.w	8004d36 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004d37 	.word	0x08004d37
 8004a9c:	08004d37 	.word	0x08004d37
 8004aa0:	08004d37 	.word	0x08004d37
 8004aa4:	08004d37 	.word	0x08004d37
 8004aa8:	08004d37 	.word	0x08004d37
 8004aac:	08004d37 	.word	0x08004d37
 8004ab0:	08004d37 	.word	0x08004d37
 8004ab4:	08004b1f 	.word	0x08004b1f
 8004ab8:	08004d37 	.word	0x08004d37
 8004abc:	08004d37 	.word	0x08004d37
 8004ac0:	08004d37 	.word	0x08004d37
 8004ac4:	08004d37 	.word	0x08004d37
 8004ac8:	08004d37 	.word	0x08004d37
 8004acc:	08004d37 	.word	0x08004d37
 8004ad0:	08004d37 	.word	0x08004d37
 8004ad4:	08004b25 	.word	0x08004b25
 8004ad8:	08004d37 	.word	0x08004d37
 8004adc:	08004d37 	.word	0x08004d37
 8004ae0:	08004d37 	.word	0x08004d37
 8004ae4:	08004d37 	.word	0x08004d37
 8004ae8:	08004d37 	.word	0x08004d37
 8004aec:	08004d37 	.word	0x08004d37
 8004af0:	08004d37 	.word	0x08004d37
 8004af4:	08004b2b 	.word	0x08004b2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af8:	4b94      	ldr	r3, [pc, #592]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b04:	4b91      	ldr	r3, [pc, #580]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	08db      	lsrs	r3, r3, #3
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	4a90      	ldr	r2, [pc, #576]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b16:	e111      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b18:	4b8d      	ldr	r3, [pc, #564]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b1a:	61bb      	str	r3, [r7, #24]
      break;
 8004b1c:	e10e      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b20:	61bb      	str	r3, [r7, #24]
      break;
 8004b22:	e10b      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b24:	4b8c      	ldr	r3, [pc, #560]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b26:	61bb      	str	r3, [r7, #24]
      break;
 8004b28:	e108      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b2a:	4b88      	ldr	r3, [pc, #544]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b34:	4b85      	ldr	r3, [pc, #532]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b40:	4b82      	ldr	r3, [pc, #520]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b4a:	4b80      	ldr	r3, [pc, #512]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80e1 	beq.w	8004d30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	f000 8083 	beq.w	8004c7c <HAL_RCC_GetSysClockFreq+0x204>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	f200 80a1 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x248>
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x114>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d056      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b8a:	e099      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02d      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b98:	4b6c      	ldr	r3, [pc, #432]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	08db      	lsrs	r3, r3, #3
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	4a6b      	ldr	r2, [pc, #428]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b62      	ldr	r3, [pc, #392]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004bf2:	e087      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b51      	ldr	r3, [pc, #324]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c36:	e065      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c7a:	e043      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ca2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cbe:	e021      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	0a5b      	lsrs	r3, r3, #9
 8004d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d0e:	3301      	adds	r3, #1
 8004d10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d28:	ee17 3a90 	vmov	r3, s15
 8004d2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]
      break;
 8004d34:	e002      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d38:	61bb      	str	r3, [r7, #24]
      break;
 8004d3a:	bf00      	nop
  }

  return sysclockfreq;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3724      	adds	r7, #36	@ 0x24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	03d09000 	.word	0x03d09000
 8004d54:	003d0900 	.word	0x003d0900
 8004d58:	007a1200 	.word	0x007a1200
 8004d5c:	46000000 	.word	0x46000000
 8004d60:	4c742400 	.word	0x4c742400
 8004d64:	4a742400 	.word	0x4a742400
 8004d68:	4af42400 	.word	0x4af42400

08004d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d72:	f7ff fe81 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004d76:	4602      	mov	r2, r0
 8004d78:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	490f      	ldr	r1, [pc, #60]	@ (8004dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d84:	5ccb      	ldrb	r3, [r1, r3]
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d90:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d9a:	5cd3      	ldrb	r3, [r2, r3]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a07      	ldr	r2, [pc, #28]	@ (8004dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004da8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004daa:	4a07      	ldr	r2, [pc, #28]	@ (8004dc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004db0:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	080083d0 	.word	0x080083d0
 8004dc4:	24000014 	.word	0x24000014
 8004dc8:	24000010 	.word	0x24000010

08004dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004dd0:	f7ff ffcc 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	58024400 	.word	0x58024400
 8004df4:	080083d0 	.word	0x080083d0

08004df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004dfc:	f7ff ffb6 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4904      	ldr	r1, [pc, #16]	@ (8004e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	080083d0 	.word	0x080083d0

08004e24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e28:	b0ca      	sub	sp, #296	@ 0x128
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004e48:	2500      	movs	r5, #0
 8004e4a:	ea54 0305 	orrs.w	r3, r4, r5
 8004e4e:	d049      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e5a:	d02f      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e60:	d828      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e66:	d01a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e6c:	d822      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e76:	d007      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7a:	4bb8      	ldr	r3, [pc, #736]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	4ab7      	ldr	r2, [pc, #732]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e86:	e01a      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	2102      	movs	r1, #2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 fc8f 	bl	80067b4 <RCCEx_PLL2_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e9c:	e00f      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	3328      	adds	r3, #40	@ 0x28
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fd36 	bl	8006918 <RCCEx_PLL3_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004eb2:	e004      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eba:	e000      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ec6:	4ba5      	ldr	r3, [pc, #660]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ed4:	4aa1      	ldr	r2, [pc, #644]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eda:	e003      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ef0:	f04f 0900 	mov.w	r9, #0
 8004ef4:	ea58 0309 	orrs.w	r3, r8, r9
 8004ef8:	d047      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d82a      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f21 	.word	0x08004f21
 8004f10:	08004f2f 	.word	0x08004f2f
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f63 	.word	0x08004f63
 8004f1c:	08004f63 	.word	0x08004f63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4b8e      	ldr	r3, [pc, #568]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	4a8d      	ldr	r2, [pc, #564]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e01a      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	3308      	adds	r3, #8
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 fc3c 	bl	80067b4 <RCCEx_PLL2_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f42:	e00f      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f48:	3328      	adds	r3, #40	@ 0x28
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fce3 	bl	8006918 <RCCEx_PLL3_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	f023 0107 	bic.w	r1, r3, #7
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	4a78      	ldr	r2, [pc, #480]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004f96:	f04f 0b00 	mov.w	fp, #0
 8004f9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f9e:	d04c      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004faa:	d030      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d829      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb4:	d02d      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb8:	d825      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fba:	2b80      	cmp	r3, #128	@ 0x80
 8004fbc:	d018      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004fbe:	2b80      	cmp	r3, #128	@ 0x80
 8004fc0:	d821      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004fc6:	2b40      	cmp	r3, #64	@ 0x40
 8004fc8:	d007      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004fca:	e01c      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fcc:	4b63      	ldr	r3, [pc, #396]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	4a62      	ldr	r2, [pc, #392]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e01c      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	3308      	adds	r3, #8
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fbe6 	bl	80067b4 <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fee:	e011      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff4:	3328      	adds	r3, #40	@ 0x28
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 fc8d 	bl	8006918 <RCCEx_PLL3_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005004:	e006      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800500c:	e002      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800501c:	4b4f      	ldr	r3, [pc, #316]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005020:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502a:	4a4c      	ldr	r2, [pc, #304]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800502c:	430b      	orrs	r3, r1
 800502e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005030:	e003      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005046:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005050:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d053      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005062:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005066:	d035      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005068:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800506c:	d82e      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800506e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005072:	d031      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005074:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005078:	d828      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507e:	d01a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005084:	d822      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800508a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800508e:	d007      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005090:	e01c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005092:	4b32      	ldr	r3, [pc, #200]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a31      	ldr	r2, [pc, #196]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800509c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800509e:	e01c      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a4:	3308      	adds	r3, #8
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 fb83 	bl	80067b4 <RCCEx_PLL2_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050b4:	e011      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	3328      	adds	r3, #40	@ 0x28
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 fc2a 	bl	8006918 <RCCEx_PLL3_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ca:	e006      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050d2:	e002      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050e2:	4b1e      	ldr	r3, [pc, #120]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050f2:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f8:	e003      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800510e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005118:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d056      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800512a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800512e:	d038      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005130:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005134:	d831      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800513a:	d034      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800513c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005140:	d82b      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005146:	d01d      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005148:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800514c:	d825      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d006      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005158:	e01f      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4ba2      	ldr	r3, [pc, #648]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	4aa1      	ldr	r2, [pc, #644]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800516c:	e01c      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	3308      	adds	r3, #8
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f001 fb1c 	bl	80067b4 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005182:	e011      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005188:	3328      	adds	r3, #40	@ 0x28
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f001 fbc3 	bl	8006918 <RCCEx_PLL3_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051a0:	e002      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80051a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051b0:	4b8e      	ldr	r3, [pc, #568]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80051b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051c0:	4a8a      	ldr	r2, [pc, #552]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051c2:	430b      	orrs	r3, r1
 80051c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d03a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f6:	2b30      	cmp	r3, #48	@ 0x30
 80051f8:	d01f      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051fa:	2b30      	cmp	r3, #48	@ 0x30
 80051fc:	d819      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d00c      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005202:	2b20      	cmp	r3, #32
 8005204:	d815      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d019      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800520a:	2b10      	cmp	r3, #16
 800520c:	d111      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520e:	4b77      	ldr	r3, [pc, #476]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	4a76      	ldr	r2, [pc, #472]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800521a:	e011      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	3308      	adds	r3, #8
 8005222:	2102      	movs	r1, #2
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fac5 	bl	80067b4 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005230:	e006      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005238:	e002      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800523e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005248:	4b68      	ldr	r3, [pc, #416]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005256:	4a65      	ldr	r2, [pc, #404]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005258:	430b      	orrs	r3, r1
 800525a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800525c:	e003      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005272:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800527c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005280:	460b      	mov	r3, r1
 8005282:	4313      	orrs	r3, r2
 8005284:	d051      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005290:	d035      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005296:	d82e      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005298:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800529c:	d031      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800529e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052a2:	d828      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a8:	d01a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80052aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ae:	d822      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b8:	d007      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80052ba:	e01c      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052bc:	4b4b      	ldr	r3, [pc, #300]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	4a4a      	ldr	r2, [pc, #296]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052c8:	e01c      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	3308      	adds	r3, #8
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 fa6e 	bl	80067b4 <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052de:	e011      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	3328      	adds	r3, #40	@ 0x28
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 fb15 	bl	8006918 <RCCEx_PLL3_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800530c:	4b37      	ldr	r3, [pc, #220]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005310:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531a:	4a34      	ldr	r2, [pc, #208]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800531c:	430b      	orrs	r3, r1
 800531e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005320:	e003      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005336:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005340:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005344:	460b      	mov	r3, r1
 8005346:	4313      	orrs	r3, r2
 8005348:	d056      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005354:	d033      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005356:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800535a:	d82c      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800535c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005360:	d02f      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005362:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005366:	d826      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800536c:	d02b      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800536e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005372:	d820      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005378:	d012      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800537a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800537e:	d81a      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d022      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005388:	d115      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	3308      	adds	r3, #8
 8005390:	2101      	movs	r1, #1
 8005392:	4618      	mov	r0, r3
 8005394:	f001 fa0e 	bl	80067b4 <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800539e:	e015      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	3328      	adds	r3, #40	@ 0x28
 80053a6:	2101      	movs	r1, #1
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 fab5 	bl	8006918 <RCCEx_PLL3_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80053b4:	e00a      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053be:	bf00      	nop
 80053c0:	e004      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053d4:	4b05      	ldr	r3, [pc, #20]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e2:	4a02      	ldr	r2, [pc, #8]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80053e8:	e006      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80053ea:	bf00      	nop
 80053ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800540e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d055      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005424:	d033      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800542a:	d82c      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005430:	d02f      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005436:	d826      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005438:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800543c:	d02b      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800543e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005442:	d820      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005448:	d012      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800544a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800544e:	d81a      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d022      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005458:	d115      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545e:	3308      	adds	r3, #8
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f001 f9a6 	bl	80067b4 <RCCEx_PLL2_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800546e:	e015      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	3328      	adds	r3, #40	@ 0x28
 8005476:	2101      	movs	r1, #1
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fa4d 	bl	8006918 <RCCEx_PLL3_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005484:	e00a      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800548c:	e006      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800548e:	bf00      	nop
 8005490:	e004      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800549a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054a4:	4ba3      	ldr	r3, [pc, #652]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054b4:	4a9f      	ldr	r2, [pc, #636]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ba:	e003      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d037      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ee:	d00e      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80054f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f4:	d816      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80054fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054fe:	d111      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005500:	4b8c      	ldr	r3, [pc, #560]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a8b      	ldr	r2, [pc, #556]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800550a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800550c:	e00f      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005512:	3308      	adds	r3, #8
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f94c 	bl	80067b4 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005536:	4b7f      	ldr	r3, [pc, #508]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005544:	4a7b      	ldr	r2, [pc, #492]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005546:	430b      	orrs	r3, r1
 8005548:	6513      	str	r3, [r2, #80]	@ 0x50
 800554a:	e003      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800556a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d039      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557a:	2b03      	cmp	r3, #3
 800557c:	d81c      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800557e:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055c1 	.word	0x080055c1
 8005588:	08005595 	.word	0x08005595
 800558c:	080055a3 	.word	0x080055a3
 8005590:	080055c1 	.word	0x080055c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005594:	4b67      	ldr	r3, [pc, #412]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	4a66      	ldr	r2, [pc, #408]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800559a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055a0:	e00f      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	3308      	adds	r3, #8
 80055a8:	2102      	movs	r1, #2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 f902 	bl	80067b4 <RCCEx_PLL2_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ce:	f023 0103 	bic.w	r1, r3, #3
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d8:	4a56      	ldr	r2, [pc, #344]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055da:	430b      	orrs	r3, r1
 80055dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055f8:	2300      	movs	r3, #0
 80055fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005602:	460b      	mov	r3, r1
 8005604:	4313      	orrs	r3, r2
 8005606:	f000 809f 	beq.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800560a:	4b4b      	ldr	r3, [pc, #300]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a4a      	ldr	r2, [pc, #296]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005616:	f7fb fe85 	bl	8001324 <HAL_GetTick>
 800561a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800561e:	e00b      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005620:	f7fb fe80 	bl	8001324 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b64      	cmp	r3, #100	@ 0x64
 800562e:	d903      	bls.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005636:	e005      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005638:	4b3f      	ldr	r3, [pc, #252]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ed      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	2b00      	cmp	r3, #0
 800564a:	d179      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800564c:	4b39      	ldr	r3, [pc, #228]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800564e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005658:	4053      	eors	r3, r2
 800565a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d015      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005662:	4b34      	ldr	r3, [pc, #208]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800566a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800566e:	4b31      	ldr	r3, [pc, #196]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a30      	ldr	r2, [pc, #192]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800567a:	4b2e      	ldr	r3, [pc, #184]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	4a2d      	ldr	r2, [pc, #180]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005684:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005686:	4a2b      	ldr	r2, [pc, #172]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800568c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569a:	d118      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fb fe42 	bl	8001324 <HAL_GetTick>
 80056a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a4:	e00d      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fb fe3d 	bl	8001324 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d903      	bls.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80056c0:	e005      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0eb      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d129      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e6:	d10e      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80056e8:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056f8:	091a      	lsrs	r2, r3, #4
 80056fa:	4b10      	ldr	r3, [pc, #64]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005700:	430b      	orrs	r3, r1
 8005702:	6113      	str	r3, [r2, #16]
 8005704:	e005      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005706:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4a0a      	ldr	r2, [pc, #40]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800570c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005710:	6113      	str	r3, [r2, #16]
 8005712:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005714:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800571e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005722:	4a04      	ldr	r2, [pc, #16]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005724:	430b      	orrs	r3, r1
 8005726:	6713      	str	r3, [r2, #112]	@ 0x70
 8005728:	e00e      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005732:	e009      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005734:	58024400 	.word	0x58024400
 8005738:	58024800 	.word	0x58024800
 800573c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f002 0301 	and.w	r3, r2, #1
 8005754:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800575e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	f000 8089 	beq.w	800587c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005770:	2b28      	cmp	r3, #40	@ 0x28
 8005772:	d86b      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005774:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	08005855 	.word	0x08005855
 8005780:	0800584d 	.word	0x0800584d
 8005784:	0800584d 	.word	0x0800584d
 8005788:	0800584d 	.word	0x0800584d
 800578c:	0800584d 	.word	0x0800584d
 8005790:	0800584d 	.word	0x0800584d
 8005794:	0800584d 	.word	0x0800584d
 8005798:	0800584d 	.word	0x0800584d
 800579c:	08005821 	.word	0x08005821
 80057a0:	0800584d 	.word	0x0800584d
 80057a4:	0800584d 	.word	0x0800584d
 80057a8:	0800584d 	.word	0x0800584d
 80057ac:	0800584d 	.word	0x0800584d
 80057b0:	0800584d 	.word	0x0800584d
 80057b4:	0800584d 	.word	0x0800584d
 80057b8:	0800584d 	.word	0x0800584d
 80057bc:	08005837 	.word	0x08005837
 80057c0:	0800584d 	.word	0x0800584d
 80057c4:	0800584d 	.word	0x0800584d
 80057c8:	0800584d 	.word	0x0800584d
 80057cc:	0800584d 	.word	0x0800584d
 80057d0:	0800584d 	.word	0x0800584d
 80057d4:	0800584d 	.word	0x0800584d
 80057d8:	0800584d 	.word	0x0800584d
 80057dc:	08005855 	.word	0x08005855
 80057e0:	0800584d 	.word	0x0800584d
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	0800584d 	.word	0x0800584d
 80057ec:	0800584d 	.word	0x0800584d
 80057f0:	0800584d 	.word	0x0800584d
 80057f4:	0800584d 	.word	0x0800584d
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	08005855 	.word	0x08005855
 8005800:	0800584d 	.word	0x0800584d
 8005804:	0800584d 	.word	0x0800584d
 8005808:	0800584d 	.word	0x0800584d
 800580c:	0800584d 	.word	0x0800584d
 8005810:	0800584d 	.word	0x0800584d
 8005814:	0800584d 	.word	0x0800584d
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005855 	.word	0x08005855
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	3308      	adds	r3, #8
 8005826:	2101      	movs	r1, #1
 8005828:	4618      	mov	r0, r3
 800582a:	f000 ffc3 	bl	80067b4 <RCCEx_PLL2_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005834:	e00f      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	3328      	adds	r3, #40	@ 0x28
 800583c:	2101      	movs	r1, #1
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f86a 	bl	8006918 <RCCEx_PLL3_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800584a:	e004      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800585e:	4bbf      	ldr	r3, [pc, #764]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800586c:	4abb      	ldr	r2, [pc, #748]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800586e:	430b      	orrs	r3, r1
 8005870:	6553      	str	r3, [r2, #84]	@ 0x54
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f002 0302 	and.w	r3, r2, #2
 8005888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005892:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	d041      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d824      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	080058c5 	.word	0x080058c5
 80058b4:	080058db 	.word	0x080058db
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058f9 	.word	0x080058f9
 80058c0:	080058f9 	.word	0x080058f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	3308      	adds	r3, #8
 80058ca:	2101      	movs	r1, #1
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 ff71 	bl	80067b4 <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058d8:	e00f      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3328      	adds	r3, #40	@ 0x28
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 f818 	bl	8006918 <RCCEx_PLL3_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058ee:	e004      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005902:	4b96      	ldr	r3, [pc, #600]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	f023 0107 	bic.w	r1, r3, #7
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005910:	4a92      	ldr	r2, [pc, #584]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005912:	430b      	orrs	r3, r1
 8005914:	6553      	str	r3, [r2, #84]	@ 0x54
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 0304 	and.w	r3, r2, #4
 800592c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005936:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d044      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005948:	2b05      	cmp	r3, #5
 800594a:	d825      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800594c:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	080059a1 	.word	0x080059a1
 8005958:	0800596d 	.word	0x0800596d
 800595c:	08005983 	.word	0x08005983
 8005960:	080059a1 	.word	0x080059a1
 8005964:	080059a1 	.word	0x080059a1
 8005968:	080059a1 	.word	0x080059a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	3308      	adds	r3, #8
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f000 ff1d 	bl	80067b4 <RCCEx_PLL2_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005980:	e00f      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	3328      	adds	r3, #40	@ 0x28
 8005988:	2101      	movs	r1, #1
 800598a:	4618      	mov	r0, r3
 800598c:	f000 ffc4 	bl	8006918 <RCCEx_PLL3_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059aa:	4b6c      	ldr	r3, [pc, #432]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ae:	f023 0107 	bic.w	r1, r3, #7
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ba:	4a68      	ldr	r2, [pc, #416]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059bc:	430b      	orrs	r3, r1
 80059be:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c0:	e003      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f002 0320 	and.w	r3, r2, #32
 80059d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059da:	2300      	movs	r3, #0
 80059dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059e4:	460b      	mov	r3, r1
 80059e6:	4313      	orrs	r3, r2
 80059e8:	d055      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059f6:	d033      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80059f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059fc:	d82c      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a02:	d02f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a08:	d826      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a0e:	d02b      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005a10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a14:	d820      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a1a:	d012      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a20:	d81a      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d022      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a2a:	d115      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	3308      	adds	r3, #8
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 febd 	bl	80067b4 <RCCEx_PLL2_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a40:	e015      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	3328      	adds	r3, #40	@ 0x28
 8005a48:	2102      	movs	r1, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 ff64 	bl	8006918 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a56:	e00a      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a5e:	e006      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a60:	bf00      	nop
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a76:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	4a35      	ldr	r2, [pc, #212]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a8c:	e003      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005aac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d058      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005abe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ac2:	d033      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005ac4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ac8:	d82c      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ace:	d02f      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad4:	d826      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ada:	d02b      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae0:	d820      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae6:	d012      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aec:	d81a      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d022      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af6:	d115      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	3308      	adds	r3, #8
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fe57 	bl	80067b4 <RCCEx_PLL2_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e015      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	3328      	adds	r3, #40	@ 0x28
 8005b14:	2102      	movs	r1, #2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fefe 	bl	8006918 <RCCEx_PLL3_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b22:	e00a      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b2a:	e006      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b2c:	bf00      	nop
 8005b2e:	e004      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10e      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b42:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b52:	4a02      	ldr	r2, [pc, #8]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005b5a:	bf00      	nop
 8005b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b82:	460b      	mov	r3, r1
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d055      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b94:	d033      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005b96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b9a:	d82c      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba0:	d02f      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba6:	d826      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ba8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bac:	d02b      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005bae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bb2:	d820      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb8:	d012      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bbe:	d81a      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d022      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc8:	d115      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fdee 	bl	80067b4 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bde:	e015      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be4:	3328      	adds	r3, #40	@ 0x28
 8005be6:	2102      	movs	r1, #2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fe95 	bl	8006918 <RCCEx_PLL3_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e00a      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bfc:	e006      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c14:	4ba1      	ldr	r3, [pc, #644]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c24:	4a9d      	ldr	r2, [pc, #628]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c26:	430b      	orrs	r3, r1
 8005c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2a:	e003      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f002 0308 	and.w	r3, r2, #8
 8005c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c44:	2300      	movs	r3, #0
 8005c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	d01e      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c66:	3328      	adds	r3, #40	@ 0x28
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fe54 	bl	8006918 <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c7c:	4b87      	ldr	r3, [pc, #540]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8c:	4a83      	ldr	r2, [pc, #524]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f002 0310 	and.w	r3, r2, #16
 8005c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ca8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005cac:	460b      	mov	r3, r1
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	d01e      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cbe:	d10c      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	3328      	adds	r3, #40	@ 0x28
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fe25 	bl	8006918 <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cda:	4b70      	ldr	r3, [pc, #448]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cea:	4a6c      	ldr	r2, [pc, #432]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	d03e      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d1c:	d022      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d22:	d81b      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2c:	d00b      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005d2e:	e015      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d34:	3308      	adds	r3, #8
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fd3b 	bl	80067b4 <RCCEx_PLL2_Config>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d44:	e00f      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	3328      	adds	r3, #40	@ 0x28
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fde2 	bl	8006918 <RCCEx_PLL3_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d5a:	e004      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d7e:	4a47      	ldr	r2, [pc, #284]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d84:	e003      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005da0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d03b      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005db6:	d01f      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dbc:	d818      	bhi.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dc2:	d003      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dc8:	d007      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005dca:	e011      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dcc:	4b33      	ldr	r3, [pc, #204]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	4a32      	ldr	r2, [pc, #200]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dd8:	e00f      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	3328      	adds	r3, #40	@ 0x28
 8005de0:	2101      	movs	r1, #1
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fd98 	bl	8006918 <RCCEx_PLL3_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dee:	e004      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e02:	4b26      	ldr	r3, [pc, #152]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e12:	4a22      	ldr	r2, [pc, #136]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e18:	e003      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e30:	2300      	movs	r3, #0
 8005e32:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	d034      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4c:	d007      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005e4e:	e011      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4b12      	ldr	r3, [pc, #72]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4a11      	ldr	r2, [pc, #68]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00e      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3308      	adds	r3, #8
 8005e64:	2102      	movs	r1, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fca4 	bl	80067b4 <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e72:	e003      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e84:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e92:	4a02      	ldr	r2, [pc, #8]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e94:	430b      	orrs	r3, r1
 8005e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005e9a:	bf00      	nop
 8005e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005eba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d00c      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	3328      	adds	r3, #40	@ 0x28
 8005eca:	2102      	movs	r1, #2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fd23 	bl	8006918 <RCCEx_PLL3_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005eea:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eec:	2300      	movs	r3, #0
 8005eee:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ef0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d038      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f06:	d018      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f0c:	d811      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f12:	d014      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f18:	d80b      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d011      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f22:	d106      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f24:	4bc3      	ldr	r3, [pc, #780]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f28:	4ac2      	ldr	r2, [pc, #776]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f30:	e008      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f38:	e004      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f5c:	4ab5      	ldr	r2, [pc, #724]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f62:	e003      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f88:	4baa      	ldr	r3, [pc, #680]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f96:	4aa7      	ldr	r2, [pc, #668]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005faa:	2300      	movs	r3, #0
 8005fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	d00a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fb8:	4b9e      	ldr	r3, [pc, #632]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005fc8:	4a9a      	ldr	r2, [pc, #616]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fdc:	2300      	movs	r3, #0
 8005fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fea:	4b92      	ldr	r3, [pc, #584]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800600a:	643b      	str	r3, [r7, #64]	@ 0x40
 800600c:	2300      	movs	r3, #0
 800600e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006010:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800601a:	4b86      	ldr	r3, [pc, #536]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	4a85      	ldr	r2, [pc, #532]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006020:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006024:	6113      	str	r3, [r2, #16]
 8006026:	4b83      	ldr	r3, [pc, #524]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006028:	6919      	ldr	r1, [r3, #16]
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006032:	4a80      	ldr	r2, [pc, #512]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006034:	430b      	orrs	r3, r1
 8006036:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006046:	2300      	movs	r3, #0
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800604a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006054:	4b77      	ldr	r3, [pc, #476]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006058:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	4a74      	ldr	r2, [pc, #464]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006064:	430b      	orrs	r3, r1
 8006066:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006074:	633b      	str	r3, [r7, #48]	@ 0x30
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	@ 0x34
 800607a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800607e:	460b      	mov	r3, r1
 8006080:	4313      	orrs	r3, r2
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006084:	4b6b      	ldr	r3, [pc, #428]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006088:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006094:	4a67      	ldr	r2, [pc, #412]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006096:	430b      	orrs	r3, r1
 8006098:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	2100      	movs	r1, #0
 80060a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80060b0:	460b      	mov	r3, r1
 80060b2:	4313      	orrs	r3, r2
 80060b4:	d011      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	3308      	adds	r3, #8
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb78 	bl	80067b4 <RCCEx_PLL2_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	2100      	movs	r1, #0
 80060e4:	6239      	str	r1, [r7, #32]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d011      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	3308      	adds	r3, #8
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fb58 	bl	80067b4 <RCCEx_PLL2_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	2100      	movs	r1, #0
 8006124:	61b9      	str	r1, [r7, #24]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d011      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	3308      	adds	r3, #8
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb38 	bl	80067b4 <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800614a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	2100      	movs	r1, #0
 8006164:	6139      	str	r1, [r7, #16]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006170:	460b      	mov	r3, r1
 8006172:	4313      	orrs	r3, r2
 8006174:	d011      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617a:	3328      	adds	r3, #40	@ 0x28
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fbca 	bl	8006918 <RCCEx_PLL3_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800618a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	2100      	movs	r1, #0
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061b0:	460b      	mov	r3, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	d011      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ba:	3328      	adds	r3, #40	@ 0x28
 80061bc:	2101      	movs	r1, #1
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fbaa 	bl	8006918 <RCCEx_PLL3_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	2100      	movs	r1, #0
 80061e4:	6039      	str	r1, [r7, #0]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	607b      	str	r3, [r7, #4]
 80061ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061f0:	460b      	mov	r3, r1
 80061f2:	4313      	orrs	r3, r2
 80061f4:	d011      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	3328      	adds	r3, #40	@ 0x28
 80061fc:	2102      	movs	r1, #2
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fb8a 	bl	8006918 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800620a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800621a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e000      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
}
 8006228:	4618      	mov	r0, r3
 800622a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800622e:	46bd      	mov	sp, r7
 8006230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006234:	58024400 	.word	0x58024400

08006238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800623c:	f7fe fd96 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b06      	ldr	r3, [pc, #24]	@ (800625c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	091b      	lsrs	r3, r3, #4
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4904      	ldr	r1, [pc, #16]	@ (8006260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	58024400 	.word	0x58024400
 8006260:	080083d0 	.word	0x080083d0

08006264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	@ 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800626c:	4ba1      	ldr	r3, [pc, #644]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006276:	4b9f      	ldr	r3, [pc, #636]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	0b1b      	lsrs	r3, r3, #12
 800627c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006282:	4b9c      	ldr	r3, [pc, #624]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	091b      	lsrs	r3, r3, #4
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800628e:	4b99      	ldr	r3, [pc, #612]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8111 	beq.w	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f000 8083 	beq.w	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	f200 80a1 	bhi.w	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d056      	beq.n	800637c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062ce:	e099      	b.n	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d0:	4b88      	ldr	r3, [pc, #544]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02d      	beq.n	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062dc:	4b85      	ldr	r3, [pc, #532]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	4a84      	ldr	r2, [pc, #528]	@ (80064f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b7b      	ldr	r3, [pc, #492]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a03 	vldr	s12, [r7, #12]
 800631a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006336:	e087      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006500 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b6a      	ldr	r3, [pc, #424]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a03 	vldr	s12, [r7, #12]
 800635e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800637a:	e065      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006386:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b59      	ldr	r3, [pc, #356]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063be:	e043      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d2:	4b48      	ldr	r3, [pc, #288]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006402:	e021      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006416:	4b37      	ldr	r3, [pc, #220]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006426:	ed97 6a03 	vldr	s12, [r7, #12]
 800642a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006446:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006448:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	0a5b      	lsrs	r3, r3, #9
 800644e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800645e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006462:	edd7 6a07 	vldr	s13, [r7, #28]
 8006466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646e:	ee17 2a90 	vmov	r2, s15
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006476:	4b1f      	ldr	r3, [pc, #124]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006490:	edd7 6a07 	vldr	s13, [r7, #28]
 8006494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649c:	ee17 2a90 	vmov	r2, s15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064a4:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	0e1b      	lsrs	r3, r3, #24
 80064aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064be:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ca:	ee17 2a90 	vmov	r2, s15
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064d2:	e008      	b.n	80064e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	609a      	str	r2, [r3, #8]
}
 80064e6:	bf00      	nop
 80064e8:	3724      	adds	r7, #36	@ 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	58024400 	.word	0x58024400
 80064f8:	03d09000 	.word	0x03d09000
 80064fc:	46000000 	.word	0x46000000
 8006500:	4c742400 	.word	0x4c742400
 8006504:	4a742400 	.word	0x4a742400
 8006508:	4af42400 	.word	0x4af42400

0800650c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	@ 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006514:	4ba1      	ldr	r3, [pc, #644]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800651e:	4b9f      	ldr	r3, [pc, #636]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	0d1b      	lsrs	r3, r3, #20
 8006524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006528:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800652a:	4b9c      	ldr	r3, [pc, #624]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006536:	4b99      	ldr	r3, [pc, #612]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8111 	beq.w	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b02      	cmp	r3, #2
 800655e:	f000 8083 	beq.w	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b02      	cmp	r3, #2
 8006566:	f200 80a1 	bhi.w	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d056      	beq.n	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006576:	e099      	b.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006578:	4b88      	ldr	r3, [pc, #544]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02d      	beq.n	80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006584:	4b85      	ldr	r3, [pc, #532]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	4a84      	ldr	r2, [pc, #528]	@ (80067a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b7b      	ldr	r3, [pc, #492]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065de:	e087      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	4b6a      	ldr	r3, [pc, #424]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	ed97 6a03 	vldr	s12, [r7, #12]
 8006606:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800660a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006622:	e065      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006636:	4b59      	ldr	r3, [pc, #356]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006646:	ed97 6a03 	vldr	s12, [r7, #12]
 800664a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800664e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006666:	e043      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667a:	4b48      	ldr	r3, [pc, #288]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668a:	ed97 6a03 	vldr	s12, [r7, #12]
 800668e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800669e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066aa:	e021      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066be:	4b37      	ldr	r3, [pc, #220]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80066f0:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	0a5b      	lsrs	r3, r3, #9
 80066f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800670a:	edd7 6a07 	vldr	s13, [r7, #28]
 800670e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006716:	ee17 2a90 	vmov	r2, s15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800671e:	4b1f      	ldr	r3, [pc, #124]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	0c1b      	lsrs	r3, r3, #16
 8006724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006730:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006738:	edd7 6a07 	vldr	s13, [r7, #28]
 800673c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006744:	ee17 2a90 	vmov	r2, s15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800674c:	4b13      	ldr	r3, [pc, #76]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006766:	edd7 6a07 	vldr	s13, [r7, #28]
 800676a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006772:	ee17 2a90 	vmov	r2, s15
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800677a:	e008      	b.n	800678e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	609a      	str	r2, [r3, #8]
}
 800678e:	bf00      	nop
 8006790:	3724      	adds	r7, #36	@ 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
 80067a0:	03d09000 	.word	0x03d09000
 80067a4:	46000000 	.word	0x46000000
 80067a8:	4c742400 	.word	0x4c742400
 80067ac:	4a742400 	.word	0x4a742400
 80067b0:	4af42400 	.word	0x4af42400

080067b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067c2:	4b53      	ldr	r3, [pc, #332]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d101      	bne.n	80067d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e099      	b.n	8006906 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fa fda1 	bl	8001324 <HAL_GetTick>
 80067e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067e4:	e008      	b.n	80067f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067e6:	f7fa fd9d 	bl	8001324 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e086      	b.n	8006906 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067f8:	4b45      	ldr	r3, [pc, #276]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f0      	bne.n	80067e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006804:	4b42      	ldr	r3, [pc, #264]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006808:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	493f      	ldr	r1, [pc, #252]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	628b      	str	r3, [r1, #40]	@ 0x28
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	3b01      	subs	r3, #1
 800681e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	3b01      	subs	r3, #1
 8006828:	025b      	lsls	r3, r3, #9
 800682a:	b29b      	uxth	r3, r3
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	3b01      	subs	r3, #1
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	3b01      	subs	r3, #1
 8006842:	061b      	lsls	r3, r3, #24
 8006844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006848:	4931      	ldr	r1, [pc, #196]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800684a:	4313      	orrs	r3, r2
 800684c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800684e:	4b30      	ldr	r3, [pc, #192]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006852:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	492d      	ldr	r1, [pc, #180]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006860:	4b2b      	ldr	r3, [pc, #172]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	f023 0220 	bic.w	r2, r3, #32
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4928      	ldr	r1, [pc, #160]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800686e:	4313      	orrs	r3, r2
 8006870:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006872:	4b27      	ldr	r3, [pc, #156]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	4a26      	ldr	r2, [pc, #152]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006878:	f023 0310 	bic.w	r3, r3, #16
 800687c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800687e:	4b24      	ldr	r3, [pc, #144]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006880:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006882:	4b24      	ldr	r3, [pc, #144]	@ (8006914 <RCCEx_PLL2_Config+0x160>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	69d2      	ldr	r2, [r2, #28]
 800688a:	00d2      	lsls	r2, r2, #3
 800688c:	4920      	ldr	r1, [pc, #128]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006892:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006898:	f043 0310 	orr.w	r3, r3, #16
 800689c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	4a19      	ldr	r2, [pc, #100]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068b0:	e00f      	b.n	80068d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d106      	bne.n	80068c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068b8:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	4a14      	ldr	r2, [pc, #80]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068c4:	e005      	b.n	80068d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068c6:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	4a11      	ldr	r2, [pc, #68]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068de:	f7fa fd21 	bl	8001324 <HAL_GetTick>
 80068e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068e4:	e008      	b.n	80068f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068e6:	f7fa fd1d 	bl	8001324 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e006      	b.n	8006906 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
 8006914:	ffff0007 	.word	0xffff0007

08006918 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006926:	4b53      	ldr	r3, [pc, #332]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b03      	cmp	r3, #3
 8006930:	d101      	bne.n	8006936 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e099      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006936:	4b4f      	ldr	r3, [pc, #316]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a4e      	ldr	r2, [pc, #312]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800693c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006942:	f7fa fcef 	bl	8001324 <HAL_GetTick>
 8006946:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006948:	e008      	b.n	800695c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800694a:	f7fa fceb 	bl	8001324 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e086      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800695c:	4b45      	ldr	r3, [pc, #276]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f0      	bne.n	800694a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006968:	4b42      	ldr	r3, [pc, #264]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	051b      	lsls	r3, r3, #20
 8006976:	493f      	ldr	r1, [pc, #252]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006978:	4313      	orrs	r3, r2
 800697a:	628b      	str	r3, [r1, #40]	@ 0x28
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	3b01      	subs	r3, #1
 8006982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	3b01      	subs	r3, #1
 800698c:	025b      	lsls	r3, r3, #9
 800698e:	b29b      	uxth	r3, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	3b01      	subs	r3, #1
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	061b      	lsls	r3, r3, #24
 80069a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069ac:	4931      	ldr	r1, [pc, #196]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069b2:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	492d      	ldr	r1, [pc, #180]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	4928      	ldr	r1, [pc, #160]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069d6:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	4a26      	ldr	r2, [pc, #152]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069e2:	4b24      	ldr	r3, [pc, #144]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069e6:	4b24      	ldr	r3, [pc, #144]	@ (8006a78 <RCCEx_PLL3_Config+0x160>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	69d2      	ldr	r2, [r2, #28]
 80069ee:	00d2      	lsls	r2, r2, #3
 80069f0:	4920      	ldr	r1, [pc, #128]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a08:	4b1a      	ldr	r3, [pc, #104]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a14:	e00f      	b.n	8006a36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a1c:	4b15      	ldr	r3, [pc, #84]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	4a14      	ldr	r2, [pc, #80]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a28:	e005      	b.n	8006a36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a2a:	4b12      	ldr	r3, [pc, #72]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	4a11      	ldr	r2, [pc, #68]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a36:	4b0f      	ldr	r3, [pc, #60]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a42:	f7fa fc6f 	bl	8001324 <HAL_GetTick>
 8006a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a48:	e008      	b.n	8006a5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a4a:	f7fa fc6b 	bl	8001324 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e006      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f0      	beq.n	8006a4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	58024400 	.word	0x58024400
 8006a78:	ffff0007 	.word	0xffff0007

08006a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e042      	b.n	8006b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fa f941 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2224      	movs	r2, #36	@ 0x24
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fe1e 	bl	8007708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8b3 	bl	8006c38 <UART_SetConfig>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e01b      	b.n	8006b14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fe9d 	bl	800784c <UART_CheckIdleState>
 8006b12:	4603      	mov	r3, r0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	@ 0x28
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d17b      	bne.n	8006c2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <HAL_UART_Transmit+0x26>
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e074      	b.n	8006c30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2221      	movs	r2, #33	@ 0x21
 8006b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b56:	f7fa fbe5 	bl	8001324 <HAL_GetTick>
 8006b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	88fa      	ldrh	r2, [r7, #6]
 8006b60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	88fa      	ldrh	r2, [r7, #6]
 8006b68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b74:	d108      	bne.n	8006b88 <HAL_UART_Transmit+0x6c>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e003      	b.n	8006b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b90:	e030      	b.n	8006bf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2180      	movs	r1, #128	@ 0x80
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 feff 	bl	80079a0 <UART_WaitOnFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e03d      	b.n	8006c30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	3302      	adds	r3, #2
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	e007      	b.n	8006be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1c8      	bne.n	8006b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2200      	movs	r2, #0
 8006c08:	2140      	movs	r1, #64	@ 0x40
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fec8 	bl	80079a0 <UART_WaitOnFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e006      	b.n	8006c30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3720      	adds	r7, #32
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c3c:	b092      	sub	sp, #72	@ 0x48
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4bbe      	ldr	r3, [pc, #760]	@ (8006f60 <UART_SetConfig+0x328>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	6812      	ldr	r2, [r2, #0]
 8006c6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4ab3      	ldr	r2, [pc, #716]	@ (8006f64 <UART_SetConfig+0x32c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	4baf      	ldr	r3, [pc, #700]	@ (8006f68 <UART_SetConfig+0x330>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	f023 010f 	bic.w	r1, r3, #15
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4aa6      	ldr	r2, [pc, #664]	@ (8006f6c <UART_SetConfig+0x334>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d177      	bne.n	8006dc8 <UART_SetConfig+0x190>
 8006cd8:	4ba5      	ldr	r3, [pc, #660]	@ (8006f70 <UART_SetConfig+0x338>)
 8006cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ce0:	2b28      	cmp	r3, #40	@ 0x28
 8006ce2:	d86d      	bhi.n	8006dc0 <UART_SetConfig+0x188>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0xb4>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d91 	.word	0x08006d91
 8006cf0:	08006dc1 	.word	0x08006dc1
 8006cf4:	08006dc1 	.word	0x08006dc1
 8006cf8:	08006dc1 	.word	0x08006dc1
 8006cfc:	08006dc1 	.word	0x08006dc1
 8006d00:	08006dc1 	.word	0x08006dc1
 8006d04:	08006dc1 	.word	0x08006dc1
 8006d08:	08006dc1 	.word	0x08006dc1
 8006d0c:	08006d99 	.word	0x08006d99
 8006d10:	08006dc1 	.word	0x08006dc1
 8006d14:	08006dc1 	.word	0x08006dc1
 8006d18:	08006dc1 	.word	0x08006dc1
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006dc1 	.word	0x08006dc1
 8006d24:	08006dc1 	.word	0x08006dc1
 8006d28:	08006dc1 	.word	0x08006dc1
 8006d2c:	08006da1 	.word	0x08006da1
 8006d30:	08006dc1 	.word	0x08006dc1
 8006d34:	08006dc1 	.word	0x08006dc1
 8006d38:	08006dc1 	.word	0x08006dc1
 8006d3c:	08006dc1 	.word	0x08006dc1
 8006d40:	08006dc1 	.word	0x08006dc1
 8006d44:	08006dc1 	.word	0x08006dc1
 8006d48:	08006dc1 	.word	0x08006dc1
 8006d4c:	08006da9 	.word	0x08006da9
 8006d50:	08006dc1 	.word	0x08006dc1
 8006d54:	08006dc1 	.word	0x08006dc1
 8006d58:	08006dc1 	.word	0x08006dc1
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006dc1 	.word	0x08006dc1
 8006d64:	08006dc1 	.word	0x08006dc1
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006db1 	.word	0x08006db1
 8006d70:	08006dc1 	.word	0x08006dc1
 8006d74:	08006dc1 	.word	0x08006dc1
 8006d78:	08006dc1 	.word	0x08006dc1
 8006d7c:	08006dc1 	.word	0x08006dc1
 8006d80:	08006dc1 	.word	0x08006dc1
 8006d84:	08006dc1 	.word	0x08006dc1
 8006d88:	08006dc1 	.word	0x08006dc1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d96:	e222      	b.n	80071de <UART_SetConfig+0x5a6>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9e:	e21e      	b.n	80071de <UART_SetConfig+0x5a6>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da6:	e21a      	b.n	80071de <UART_SetConfig+0x5a6>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e216      	b.n	80071de <UART_SetConfig+0x5a6>
 8006db0:	2320      	movs	r3, #32
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e212      	b.n	80071de <UART_SetConfig+0x5a6>
 8006db8:	2340      	movs	r3, #64	@ 0x40
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e20e      	b.n	80071de <UART_SetConfig+0x5a6>
 8006dc0:	2380      	movs	r3, #128	@ 0x80
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e20a      	b.n	80071de <UART_SetConfig+0x5a6>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a69      	ldr	r2, [pc, #420]	@ (8006f74 <UART_SetConfig+0x33c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d130      	bne.n	8006e34 <UART_SetConfig+0x1fc>
 8006dd2:	4b67      	ldr	r3, [pc, #412]	@ (8006f70 <UART_SetConfig+0x338>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d826      	bhi.n	8006e2c <UART_SetConfig+0x1f4>
 8006dde:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <UART_SetConfig+0x1ac>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e02:	e1ec      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e04:	2304      	movs	r3, #4
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0a:	e1e8      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e12:	e1e4      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1a:	e1e0      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e1c:	2320      	movs	r3, #32
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e22:	e1dc      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e24:	2340      	movs	r3, #64	@ 0x40
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e1d8      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e2c:	2380      	movs	r3, #128	@ 0x80
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e1d4      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a4f      	ldr	r2, [pc, #316]	@ (8006f78 <UART_SetConfig+0x340>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d130      	bne.n	8006ea0 <UART_SetConfig+0x268>
 8006e3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006f70 <UART_SetConfig+0x338>)
 8006e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d826      	bhi.n	8006e98 <UART_SetConfig+0x260>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <UART_SetConfig+0x218>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e69 	.word	0x08006e69
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e79 	.word	0x08006e79
 8006e5c:	08006e81 	.word	0x08006e81
 8006e60:	08006e89 	.word	0x08006e89
 8006e64:	08006e91 	.word	0x08006e91
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6e:	e1b6      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e76:	e1b2      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7e:	e1ae      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e86:	e1aa      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e88:	2320      	movs	r3, #32
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8e:	e1a6      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e90:	2340      	movs	r3, #64	@ 0x40
 8006e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e96:	e1a2      	b.n	80071de <UART_SetConfig+0x5a6>
 8006e98:	2380      	movs	r3, #128	@ 0x80
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9e:	e19e      	b.n	80071de <UART_SetConfig+0x5a6>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a35      	ldr	r2, [pc, #212]	@ (8006f7c <UART_SetConfig+0x344>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d130      	bne.n	8006f0c <UART_SetConfig+0x2d4>
 8006eaa:	4b31      	ldr	r3, [pc, #196]	@ (8006f70 <UART_SetConfig+0x338>)
 8006eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	d826      	bhi.n	8006f04 <UART_SetConfig+0x2cc>
 8006eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ebc <UART_SetConfig+0x284>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006ed5 	.word	0x08006ed5
 8006ec0:	08006edd 	.word	0x08006edd
 8006ec4:	08006ee5 	.word	0x08006ee5
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eda:	e180      	b.n	80071de <UART_SetConfig+0x5a6>
 8006edc:	2304      	movs	r3, #4
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee2:	e17c      	b.n	80071de <UART_SetConfig+0x5a6>
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eea:	e178      	b.n	80071de <UART_SetConfig+0x5a6>
 8006eec:	2310      	movs	r3, #16
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef2:	e174      	b.n	80071de <UART_SetConfig+0x5a6>
 8006ef4:	2320      	movs	r3, #32
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efa:	e170      	b.n	80071de <UART_SetConfig+0x5a6>
 8006efc:	2340      	movs	r3, #64	@ 0x40
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f02:	e16c      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f04:	2380      	movs	r3, #128	@ 0x80
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e168      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1b      	ldr	r2, [pc, #108]	@ (8006f80 <UART_SetConfig+0x348>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d142      	bne.n	8006f9c <UART_SetConfig+0x364>
 8006f16:	4b16      	ldr	r3, [pc, #88]	@ (8006f70 <UART_SetConfig+0x338>)
 8006f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d838      	bhi.n	8006f94 <UART_SetConfig+0x35c>
 8006f22:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <UART_SetConfig+0x2f0>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f41 	.word	0x08006f41
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	08006f51 	.word	0x08006f51
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f85 	.word	0x08006f85
 8006f3c:	08006f8d 	.word	0x08006f8d
 8006f40:	2300      	movs	r3, #0
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f46:	e14a      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4e:	e146      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f50:	2308      	movs	r3, #8
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f56:	e142      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f58:	2310      	movs	r3, #16
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5e:	e13e      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f60:	cfff69f3 	.word	0xcfff69f3
 8006f64:	58000c00 	.word	0x58000c00
 8006f68:	11fff4ff 	.word	0x11fff4ff
 8006f6c:	40011000 	.word	0x40011000
 8006f70:	58024400 	.word	0x58024400
 8006f74:	40004400 	.word	0x40004400
 8006f78:	40004800 	.word	0x40004800
 8006f7c:	40004c00 	.word	0x40004c00
 8006f80:	40005000 	.word	0x40005000
 8006f84:	2320      	movs	r3, #32
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e128      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f8c:	2340      	movs	r3, #64	@ 0x40
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e124      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f94:	2380      	movs	r3, #128	@ 0x80
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e120      	b.n	80071de <UART_SetConfig+0x5a6>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4acb      	ldr	r2, [pc, #812]	@ (80072d0 <UART_SetConfig+0x698>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d176      	bne.n	8007094 <UART_SetConfig+0x45c>
 8006fa6:	4bcb      	ldr	r3, [pc, #812]	@ (80072d4 <UART_SetConfig+0x69c>)
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fae:	2b28      	cmp	r3, #40	@ 0x28
 8006fb0:	d86c      	bhi.n	800708c <UART_SetConfig+0x454>
 8006fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <UART_SetConfig+0x380>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	0800705d 	.word	0x0800705d
 8006fbc:	0800708d 	.word	0x0800708d
 8006fc0:	0800708d 	.word	0x0800708d
 8006fc4:	0800708d 	.word	0x0800708d
 8006fc8:	0800708d 	.word	0x0800708d
 8006fcc:	0800708d 	.word	0x0800708d
 8006fd0:	0800708d 	.word	0x0800708d
 8006fd4:	0800708d 	.word	0x0800708d
 8006fd8:	08007065 	.word	0x08007065
 8006fdc:	0800708d 	.word	0x0800708d
 8006fe0:	0800708d 	.word	0x0800708d
 8006fe4:	0800708d 	.word	0x0800708d
 8006fe8:	0800708d 	.word	0x0800708d
 8006fec:	0800708d 	.word	0x0800708d
 8006ff0:	0800708d 	.word	0x0800708d
 8006ff4:	0800708d 	.word	0x0800708d
 8006ff8:	0800706d 	.word	0x0800706d
 8006ffc:	0800708d 	.word	0x0800708d
 8007000:	0800708d 	.word	0x0800708d
 8007004:	0800708d 	.word	0x0800708d
 8007008:	0800708d 	.word	0x0800708d
 800700c:	0800708d 	.word	0x0800708d
 8007010:	0800708d 	.word	0x0800708d
 8007014:	0800708d 	.word	0x0800708d
 8007018:	08007075 	.word	0x08007075
 800701c:	0800708d 	.word	0x0800708d
 8007020:	0800708d 	.word	0x0800708d
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800708d 	.word	0x0800708d
 800702c:	0800708d 	.word	0x0800708d
 8007030:	0800708d 	.word	0x0800708d
 8007034:	0800708d 	.word	0x0800708d
 8007038:	0800707d 	.word	0x0800707d
 800703c:	0800708d 	.word	0x0800708d
 8007040:	0800708d 	.word	0x0800708d
 8007044:	0800708d 	.word	0x0800708d
 8007048:	0800708d 	.word	0x0800708d
 800704c:	0800708d 	.word	0x0800708d
 8007050:	0800708d 	.word	0x0800708d
 8007054:	0800708d 	.word	0x0800708d
 8007058:	08007085 	.word	0x08007085
 800705c:	2301      	movs	r3, #1
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007062:	e0bc      	b.n	80071de <UART_SetConfig+0x5a6>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706a:	e0b8      	b.n	80071de <UART_SetConfig+0x5a6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007072:	e0b4      	b.n	80071de <UART_SetConfig+0x5a6>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e0b0      	b.n	80071de <UART_SetConfig+0x5a6>
 800707c:	2320      	movs	r3, #32
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e0ac      	b.n	80071de <UART_SetConfig+0x5a6>
 8007084:	2340      	movs	r3, #64	@ 0x40
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e0a8      	b.n	80071de <UART_SetConfig+0x5a6>
 800708c:	2380      	movs	r3, #128	@ 0x80
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e0a4      	b.n	80071de <UART_SetConfig+0x5a6>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a8f      	ldr	r2, [pc, #572]	@ (80072d8 <UART_SetConfig+0x6a0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d130      	bne.n	8007100 <UART_SetConfig+0x4c8>
 800709e:	4b8d      	ldr	r3, [pc, #564]	@ (80072d4 <UART_SetConfig+0x69c>)
 80070a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d826      	bhi.n	80070f8 <UART_SetConfig+0x4c0>
 80070aa:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <UART_SetConfig+0x478>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070c9 	.word	0x080070c9
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	080070d9 	.word	0x080070d9
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ce:	e086      	b.n	80071de <UART_SetConfig+0x5a6>
 80070d0:	2304      	movs	r3, #4
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d6:	e082      	b.n	80071de <UART_SetConfig+0x5a6>
 80070d8:	2308      	movs	r3, #8
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070de:	e07e      	b.n	80071de <UART_SetConfig+0x5a6>
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e07a      	b.n	80071de <UART_SetConfig+0x5a6>
 80070e8:	2320      	movs	r3, #32
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e076      	b.n	80071de <UART_SetConfig+0x5a6>
 80070f0:	2340      	movs	r3, #64	@ 0x40
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e072      	b.n	80071de <UART_SetConfig+0x5a6>
 80070f8:	2380      	movs	r3, #128	@ 0x80
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e06e      	b.n	80071de <UART_SetConfig+0x5a6>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a75      	ldr	r2, [pc, #468]	@ (80072dc <UART_SetConfig+0x6a4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d130      	bne.n	800716c <UART_SetConfig+0x534>
 800710a:	4b72      	ldr	r3, [pc, #456]	@ (80072d4 <UART_SetConfig+0x69c>)
 800710c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	2b05      	cmp	r3, #5
 8007114:	d826      	bhi.n	8007164 <UART_SetConfig+0x52c>
 8007116:	a201      	add	r2, pc, #4	@ (adr r2, 800711c <UART_SetConfig+0x4e4>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007135 	.word	0x08007135
 8007120:	0800713d 	.word	0x0800713d
 8007124:	08007145 	.word	0x08007145
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713a:	e050      	b.n	80071de <UART_SetConfig+0x5a6>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007142:	e04c      	b.n	80071de <UART_SetConfig+0x5a6>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714a:	e048      	b.n	80071de <UART_SetConfig+0x5a6>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007152:	e044      	b.n	80071de <UART_SetConfig+0x5a6>
 8007154:	2320      	movs	r3, #32
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800715a:	e040      	b.n	80071de <UART_SetConfig+0x5a6>
 800715c:	2340      	movs	r3, #64	@ 0x40
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007162:	e03c      	b.n	80071de <UART_SetConfig+0x5a6>
 8007164:	2380      	movs	r3, #128	@ 0x80
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716a:	e038      	b.n	80071de <UART_SetConfig+0x5a6>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5b      	ldr	r2, [pc, #364]	@ (80072e0 <UART_SetConfig+0x6a8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d130      	bne.n	80071d8 <UART_SetConfig+0x5a0>
 8007176:	4b57      	ldr	r3, [pc, #348]	@ (80072d4 <UART_SetConfig+0x69c>)
 8007178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	2b05      	cmp	r3, #5
 8007180:	d826      	bhi.n	80071d0 <UART_SetConfig+0x598>
 8007182:	a201      	add	r2, pc, #4	@ (adr r2, 8007188 <UART_SetConfig+0x550>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071a1 	.word	0x080071a1
 800718c:	080071a9 	.word	0x080071a9
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071c1 	.word	0x080071c1
 800719c:	080071c9 	.word	0x080071c9
 80071a0:	2302      	movs	r3, #2
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a6:	e01a      	b.n	80071de <UART_SetConfig+0x5a6>
 80071a8:	2304      	movs	r3, #4
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ae:	e016      	b.n	80071de <UART_SetConfig+0x5a6>
 80071b0:	2308      	movs	r3, #8
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b6:	e012      	b.n	80071de <UART_SetConfig+0x5a6>
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071be:	e00e      	b.n	80071de <UART_SetConfig+0x5a6>
 80071c0:	2320      	movs	r3, #32
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c6:	e00a      	b.n	80071de <UART_SetConfig+0x5a6>
 80071c8:	2340      	movs	r3, #64	@ 0x40
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ce:	e006      	b.n	80071de <UART_SetConfig+0x5a6>
 80071d0:	2380      	movs	r3, #128	@ 0x80
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d6:	e002      	b.n	80071de <UART_SetConfig+0x5a6>
 80071d8:	2380      	movs	r3, #128	@ 0x80
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a3f      	ldr	r2, [pc, #252]	@ (80072e0 <UART_SetConfig+0x6a8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	f040 80f8 	bne.w	80073da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	dc46      	bgt.n	8007280 <UART_SetConfig+0x648>
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	f2c0 8082 	blt.w	80072fc <UART_SetConfig+0x6c4>
 80071f8:	3b02      	subs	r3, #2
 80071fa:	2b1e      	cmp	r3, #30
 80071fc:	d87e      	bhi.n	80072fc <UART_SetConfig+0x6c4>
 80071fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007204 <UART_SetConfig+0x5cc>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007287 	.word	0x08007287
 8007208:	080072fd 	.word	0x080072fd
 800720c:	0800728f 	.word	0x0800728f
 8007210:	080072fd 	.word	0x080072fd
 8007214:	080072fd 	.word	0x080072fd
 8007218:	080072fd 	.word	0x080072fd
 800721c:	0800729f 	.word	0x0800729f
 8007220:	080072fd 	.word	0x080072fd
 8007224:	080072fd 	.word	0x080072fd
 8007228:	080072fd 	.word	0x080072fd
 800722c:	080072fd 	.word	0x080072fd
 8007230:	080072fd 	.word	0x080072fd
 8007234:	080072fd 	.word	0x080072fd
 8007238:	080072fd 	.word	0x080072fd
 800723c:	080072af 	.word	0x080072af
 8007240:	080072fd 	.word	0x080072fd
 8007244:	080072fd 	.word	0x080072fd
 8007248:	080072fd 	.word	0x080072fd
 800724c:	080072fd 	.word	0x080072fd
 8007250:	080072fd 	.word	0x080072fd
 8007254:	080072fd 	.word	0x080072fd
 8007258:	080072fd 	.word	0x080072fd
 800725c:	080072fd 	.word	0x080072fd
 8007260:	080072fd 	.word	0x080072fd
 8007264:	080072fd 	.word	0x080072fd
 8007268:	080072fd 	.word	0x080072fd
 800726c:	080072fd 	.word	0x080072fd
 8007270:	080072fd 	.word	0x080072fd
 8007274:	080072fd 	.word	0x080072fd
 8007278:	080072fd 	.word	0x080072fd
 800727c:	080072ef 	.word	0x080072ef
 8007280:	2b40      	cmp	r3, #64	@ 0x40
 8007282:	d037      	beq.n	80072f4 <UART_SetConfig+0x6bc>
 8007284:	e03a      	b.n	80072fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007286:	f7fe ffd7 	bl	8006238 <HAL_RCCEx_GetD3PCLK1Freq>
 800728a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800728c:	e03c      	b.n	8007308 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800728e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe ffe6 	bl	8006264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729c:	e034      	b.n	8007308 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800729e:	f107 0318 	add.w	r3, r7, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff f932 	bl	800650c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ac:	e02c      	b.n	8007308 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ae:	4b09      	ldr	r3, [pc, #36]	@ (80072d4 <UART_SetConfig+0x69c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d016      	beq.n	80072e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072ba:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <UART_SetConfig+0x69c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	08db      	lsrs	r3, r3, #3
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	4a07      	ldr	r2, [pc, #28]	@ (80072e4 <UART_SetConfig+0x6ac>)
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072cc:	e01c      	b.n	8007308 <UART_SetConfig+0x6d0>
 80072ce:	bf00      	nop
 80072d0:	40011400 	.word	0x40011400
 80072d4:	58024400 	.word	0x58024400
 80072d8:	40007800 	.word	0x40007800
 80072dc:	40007c00 	.word	0x40007c00
 80072e0:	58000c00 	.word	0x58000c00
 80072e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80072e8:	4b9d      	ldr	r3, [pc, #628]	@ (8007560 <UART_SetConfig+0x928>)
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ec:	e00c      	b.n	8007308 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072ee:	4b9d      	ldr	r3, [pc, #628]	@ (8007564 <UART_SetConfig+0x92c>)
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072f2:	e009      	b.n	8007308 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fa:	e005      	b.n	8007308 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007306:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 81de 	beq.w	80076cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007314:	4a94      	ldr	r2, [pc, #592]	@ (8007568 <UART_SetConfig+0x930>)
 8007316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800731a:	461a      	mov	r2, r3
 800731c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007322:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007330:	429a      	cmp	r2, r3
 8007332:	d305      	bcc.n	8007340 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800733a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733c:	429a      	cmp	r2, r3
 800733e:	d903      	bls.n	8007348 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007346:	e1c1      	b.n	80076cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734a:	2200      	movs	r2, #0
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	60fa      	str	r2, [r7, #12]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	4a84      	ldr	r2, [pc, #528]	@ (8007568 <UART_SetConfig+0x930>)
 8007356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800735a:	b29b      	uxth	r3, r3
 800735c:	2200      	movs	r2, #0
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800736a:	f7f8 ffb5 	bl	80002d8 <__aeabi_uldivmod>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4610      	mov	r0, r2
 8007374:	4619      	mov	r1, r3
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	020b      	lsls	r3, r1, #8
 8007380:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007384:	0202      	lsls	r2, r0, #8
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	6849      	ldr	r1, [r1, #4]
 800738a:	0849      	lsrs	r1, r1, #1
 800738c:	2000      	movs	r0, #0
 800738e:	460c      	mov	r4, r1
 8007390:	4605      	mov	r5, r0
 8007392:	eb12 0804 	adds.w	r8, r2, r4
 8007396:	eb43 0905 	adc.w	r9, r3, r5
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	469a      	mov	sl, r3
 80073a2:	4693      	mov	fp, r2
 80073a4:	4652      	mov	r2, sl
 80073a6:	465b      	mov	r3, fp
 80073a8:	4640      	mov	r0, r8
 80073aa:	4649      	mov	r1, r9
 80073ac:	f7f8 ff94 	bl	80002d8 <__aeabi_uldivmod>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4613      	mov	r3, r2
 80073b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073be:	d308      	bcc.n	80073d2 <UART_SetConfig+0x79a>
 80073c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073c6:	d204      	bcs.n	80073d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073ce:	60da      	str	r2, [r3, #12]
 80073d0:	e17c      	b.n	80076cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073d8:	e178      	b.n	80076cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073e2:	f040 80c5 	bne.w	8007570 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80073e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	dc48      	bgt.n	8007480 <UART_SetConfig+0x848>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	db7b      	blt.n	80074ea <UART_SetConfig+0x8b2>
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d879      	bhi.n	80074ea <UART_SetConfig+0x8b2>
 80073f6:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <UART_SetConfig+0x7c4>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007487 	.word	0x08007487
 8007400:	0800748f 	.word	0x0800748f
 8007404:	080074eb 	.word	0x080074eb
 8007408:	080074eb 	.word	0x080074eb
 800740c:	08007497 	.word	0x08007497
 8007410:	080074eb 	.word	0x080074eb
 8007414:	080074eb 	.word	0x080074eb
 8007418:	080074eb 	.word	0x080074eb
 800741c:	080074a7 	.word	0x080074a7
 8007420:	080074eb 	.word	0x080074eb
 8007424:	080074eb 	.word	0x080074eb
 8007428:	080074eb 	.word	0x080074eb
 800742c:	080074eb 	.word	0x080074eb
 8007430:	080074eb 	.word	0x080074eb
 8007434:	080074eb 	.word	0x080074eb
 8007438:	080074eb 	.word	0x080074eb
 800743c:	080074b7 	.word	0x080074b7
 8007440:	080074eb 	.word	0x080074eb
 8007444:	080074eb 	.word	0x080074eb
 8007448:	080074eb 	.word	0x080074eb
 800744c:	080074eb 	.word	0x080074eb
 8007450:	080074eb 	.word	0x080074eb
 8007454:	080074eb 	.word	0x080074eb
 8007458:	080074eb 	.word	0x080074eb
 800745c:	080074eb 	.word	0x080074eb
 8007460:	080074eb 	.word	0x080074eb
 8007464:	080074eb 	.word	0x080074eb
 8007468:	080074eb 	.word	0x080074eb
 800746c:	080074eb 	.word	0x080074eb
 8007470:	080074eb 	.word	0x080074eb
 8007474:	080074eb 	.word	0x080074eb
 8007478:	080074eb 	.word	0x080074eb
 800747c:	080074dd 	.word	0x080074dd
 8007480:	2b40      	cmp	r3, #64	@ 0x40
 8007482:	d02e      	beq.n	80074e2 <UART_SetConfig+0x8aa>
 8007484:	e031      	b.n	80074ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007486:	f7fd fca1 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 800748a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800748c:	e033      	b.n	80074f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800748e:	f7fd fcb3 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 8007492:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007494:	e02f      	b.n	80074f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fee2 	bl	8006264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a4:	e027      	b.n	80074f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a6:	f107 0318 	add.w	r3, r7, #24
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff f82e 	bl	800650c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b4:	e01f      	b.n	80074f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074b6:	4b2d      	ldr	r3, [pc, #180]	@ (800756c <UART_SetConfig+0x934>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d009      	beq.n	80074d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074c2:	4b2a      	ldr	r3, [pc, #168]	@ (800756c <UART_SetConfig+0x934>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	08db      	lsrs	r3, r3, #3
 80074c8:	f003 0303 	and.w	r3, r3, #3
 80074cc:	4a24      	ldr	r2, [pc, #144]	@ (8007560 <UART_SetConfig+0x928>)
 80074ce:	fa22 f303 	lsr.w	r3, r2, r3
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074d4:	e00f      	b.n	80074f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80074d6:	4b22      	ldr	r3, [pc, #136]	@ (8007560 <UART_SetConfig+0x928>)
 80074d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074da:	e00c      	b.n	80074f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074dc:	4b21      	ldr	r3, [pc, #132]	@ (8007564 <UART_SetConfig+0x92c>)
 80074de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e0:	e009      	b.n	80074f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e8:	e005      	b.n	80074f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80074f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 80e7 	beq.w	80076cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	4a19      	ldr	r2, [pc, #100]	@ (8007568 <UART_SetConfig+0x930>)
 8007504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007508:	461a      	mov	r2, r3
 800750a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800750c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007510:	005a      	lsls	r2, r3, #1
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	085b      	lsrs	r3, r3, #1
 8007518:	441a      	add	r2, r3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007522:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d916      	bls.n	8007558 <UART_SetConfig+0x920>
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007530:	d212      	bcs.n	8007558 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007534:	b29b      	uxth	r3, r3
 8007536:	f023 030f 	bic.w	r3, r3, #15
 800753a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	b29b      	uxth	r3, r3
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	b29a      	uxth	r2, r3
 8007548:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800754a:	4313      	orrs	r3, r2
 800754c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	e0b9      	b.n	80076cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800755e:	e0b5      	b.n	80076cc <UART_SetConfig+0xa94>
 8007560:	03d09000 	.word	0x03d09000
 8007564:	003d0900 	.word	0x003d0900
 8007568:	080083e8 	.word	0x080083e8
 800756c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007570:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007574:	2b20      	cmp	r3, #32
 8007576:	dc49      	bgt.n	800760c <UART_SetConfig+0x9d4>
 8007578:	2b00      	cmp	r3, #0
 800757a:	db7c      	blt.n	8007676 <UART_SetConfig+0xa3e>
 800757c:	2b20      	cmp	r3, #32
 800757e:	d87a      	bhi.n	8007676 <UART_SetConfig+0xa3e>
 8007580:	a201      	add	r2, pc, #4	@ (adr r2, 8007588 <UART_SetConfig+0x950>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	08007613 	.word	0x08007613
 800758c:	0800761b 	.word	0x0800761b
 8007590:	08007677 	.word	0x08007677
 8007594:	08007677 	.word	0x08007677
 8007598:	08007623 	.word	0x08007623
 800759c:	08007677 	.word	0x08007677
 80075a0:	08007677 	.word	0x08007677
 80075a4:	08007677 	.word	0x08007677
 80075a8:	08007633 	.word	0x08007633
 80075ac:	08007677 	.word	0x08007677
 80075b0:	08007677 	.word	0x08007677
 80075b4:	08007677 	.word	0x08007677
 80075b8:	08007677 	.word	0x08007677
 80075bc:	08007677 	.word	0x08007677
 80075c0:	08007677 	.word	0x08007677
 80075c4:	08007677 	.word	0x08007677
 80075c8:	08007643 	.word	0x08007643
 80075cc:	08007677 	.word	0x08007677
 80075d0:	08007677 	.word	0x08007677
 80075d4:	08007677 	.word	0x08007677
 80075d8:	08007677 	.word	0x08007677
 80075dc:	08007677 	.word	0x08007677
 80075e0:	08007677 	.word	0x08007677
 80075e4:	08007677 	.word	0x08007677
 80075e8:	08007677 	.word	0x08007677
 80075ec:	08007677 	.word	0x08007677
 80075f0:	08007677 	.word	0x08007677
 80075f4:	08007677 	.word	0x08007677
 80075f8:	08007677 	.word	0x08007677
 80075fc:	08007677 	.word	0x08007677
 8007600:	08007677 	.word	0x08007677
 8007604:	08007677 	.word	0x08007677
 8007608:	08007669 	.word	0x08007669
 800760c:	2b40      	cmp	r3, #64	@ 0x40
 800760e:	d02e      	beq.n	800766e <UART_SetConfig+0xa36>
 8007610:	e031      	b.n	8007676 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007612:	f7fd fbdb 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8007616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007618:	e033      	b.n	8007682 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800761a:	f7fd fbed 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 800761e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007620:	e02f      	b.n	8007682 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fe1c 	bl	8006264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007630:	e027      	b.n	8007682 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007632:	f107 0318 	add.w	r3, r7, #24
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe ff68 	bl	800650c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007640:	e01f      	b.n	8007682 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007642:	4b2d      	ldr	r3, [pc, #180]	@ (80076f8 <UART_SetConfig+0xac0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800764e:	4b2a      	ldr	r3, [pc, #168]	@ (80076f8 <UART_SetConfig+0xac0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	08db      	lsrs	r3, r3, #3
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	4a28      	ldr	r2, [pc, #160]	@ (80076fc <UART_SetConfig+0xac4>)
 800765a:	fa22 f303 	lsr.w	r3, r2, r3
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007660:	e00f      	b.n	8007682 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007662:	4b26      	ldr	r3, [pc, #152]	@ (80076fc <UART_SetConfig+0xac4>)
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007666:	e00c      	b.n	8007682 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007668:	4b25      	ldr	r3, [pc, #148]	@ (8007700 <UART_SetConfig+0xac8>)
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766c:	e009      	b.n	8007682 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007674:	e005      	b.n	8007682 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007680:	bf00      	nop
    }

    if (pclk != 0U)
 8007682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d021      	beq.n	80076cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	4a1d      	ldr	r2, [pc, #116]	@ (8007704 <UART_SetConfig+0xacc>)
 800768e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007692:	461a      	mov	r2, r3
 8007694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007696:	fbb3 f2f2 	udiv	r2, r3, r2
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	441a      	add	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	2b0f      	cmp	r3, #15
 80076b0:	d909      	bls.n	80076c6 <UART_SetConfig+0xa8e>
 80076b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b8:	d205      	bcs.n	80076c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076bc:	b29a      	uxth	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	e002      	b.n	80076cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2200      	movs	r2, #0
 80076e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80076e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3748      	adds	r7, #72	@ 0x48
 80076f0:	46bd      	mov	sp, r7
 80076f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f6:	bf00      	nop
 80076f8:	58024400 	.word	0x58024400
 80076fc:	03d09000 	.word	0x03d09000
 8007700:	003d0900 	.word	0x003d0900
 8007704:	080083e8 	.word	0x080083e8

08007708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00a      	beq.n	8007776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01a      	beq.n	800781e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007806:	d10a      	bne.n	800781e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	605a      	str	r2, [r3, #4]
  }
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b098      	sub	sp, #96	@ 0x60
 8007850:	af02      	add	r7, sp, #8
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800785c:	f7f9 fd62 	bl	8001324 <HAL_GetTick>
 8007860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b08      	cmp	r3, #8
 800786e:	d12f      	bne.n	80078d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007878:	2200      	movs	r2, #0
 800787a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f88e 	bl	80079a0 <UART_WaitOnFlagUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d022      	beq.n	80078d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800789e:	653b      	str	r3, [r7, #80]	@ 0x50
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e063      	b.n	8007998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0304 	and.w	r3, r3, #4
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d149      	bne.n	8007972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e6:	2200      	movs	r2, #0
 80078e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f857 	bl	80079a0 <UART_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d03c      	beq.n	8007972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	623b      	str	r3, [r7, #32]
   return(result);
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800790c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007916:	633b      	str	r3, [r7, #48]	@ 0x30
 8007918:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800791c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e6      	bne.n	80078f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	60fb      	str	r3, [r7, #12]
   return(result);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f023 0301 	bic.w	r3, r3, #1
 8007940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3308      	adds	r3, #8
 8007948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800794a:	61fa      	str	r2, [r7, #28]
 800794c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	69b9      	ldr	r1, [r7, #24]
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	617b      	str	r3, [r7, #20]
   return(result);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e5      	bne.n	800792a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e012      	b.n	8007998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3758      	adds	r7, #88	@ 0x58
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b0:	e04f      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d04b      	beq.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ba:	f7f9 fcb3 	bl	8001324 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d302      	bcc.n	80079d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e04e      	b.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d037      	beq.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b80      	cmp	r3, #128	@ 0x80
 80079e6:	d034      	beq.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	d031      	beq.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d110      	bne.n	8007a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2208      	movs	r2, #8
 8007a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f839 	bl	8007a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e029      	b.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a2c:	d111      	bne.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f81f 	bl	8007a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e00f      	b.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	bf0c      	ite	eq
 8007a62:	2301      	moveq	r3, #1
 8007a64:	2300      	movne	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d0a0      	beq.n	80079b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b095      	sub	sp, #84	@ 0x54
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007aa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e6      	bne.n	8007a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b44 <UART_EndRxTransfer+0xc8>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e5      	bne.n	8007ab6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d118      	bne.n	8007b24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f023 0310 	bic.w	r3, r3, #16
 8007b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6979      	ldr	r1, [r7, #20]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e6      	bne.n	8007af2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b38:	bf00      	nop
 8007b3a:	3754      	adds	r7, #84	@ 0x54
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	effffffe 	.word	0xeffffffe

08007b48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <HAL_UARTEx_DisableFifoMode+0x16>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e027      	b.n	8007bae <HAL_UARTEx_DisableFifoMode+0x66>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2224      	movs	r2, #36	@ 0x24
 8007b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0201 	bic.w	r2, r2, #1
 8007b84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e02d      	b.n	8007c2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2224      	movs	r2, #36	@ 0x24
 8007bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0201 	bic.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f850 	bl	8007cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e02d      	b.n	8007caa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2224      	movs	r2, #36	@ 0x24
 8007c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f812 	bl	8007cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d108      	bne.n	8007cd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cd4:	e031      	b.n	8007d3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cd6:	2310      	movs	r3, #16
 8007cd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cda:	2310      	movs	r3, #16
 8007cdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	0e5b      	lsrs	r3, r3, #25
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	0f5b      	lsrs	r3, r3, #29
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	7b3a      	ldrb	r2, [r7, #12]
 8007d02:	4911      	ldr	r1, [pc, #68]	@ (8007d48 <UARTEx_SetNbDataToProcess+0x94>)
 8007d04:	5c8a      	ldrb	r2, [r1, r2]
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d0a:	7b3a      	ldrb	r2, [r7, #12]
 8007d0c:	490f      	ldr	r1, [pc, #60]	@ (8007d4c <UARTEx_SetNbDataToProcess+0x98>)
 8007d0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	7b7a      	ldrb	r2, [r7, #13]
 8007d20:	4909      	ldr	r1, [pc, #36]	@ (8007d48 <UARTEx_SetNbDataToProcess+0x94>)
 8007d22:	5c8a      	ldrb	r2, [r1, r2]
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d28:	7b7a      	ldrb	r2, [r7, #13]
 8007d2a:	4908      	ldr	r1, [pc, #32]	@ (8007d4c <UARTEx_SetNbDataToProcess+0x98>)
 8007d2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	08008400 	.word	0x08008400
 8007d4c:	08008408 	.word	0x08008408

08007d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d50:	b084      	sub	sp, #16
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	f107 001c 	add.w	r0, r7, #28
 8007d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d121      	bne.n	8007dae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8007e2c <USB_CoreInit+0xdc>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d105      	bne.n	8007da2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 faaa 	bl	80082fc <USB_CoreReset>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
 8007dac:	e01b      	b.n	8007de6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa9e 	bl	80082fc <USB_CoreReset>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007dc4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d106      	bne.n	8007dda <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dd8:	e005      	b.n	8007de6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007de6:	7fbb      	ldrb	r3, [r7, #30]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d116      	bne.n	8007e1a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <USB_CoreInit+0xe0>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f043 0206 	orr.w	r2, r3, #6
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f043 0220 	orr.w	r2, r3, #32
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e26:	b004      	add	sp, #16
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	ffbdffbf 	.word	0xffbdffbf
 8007e30:	03ee0000 	.word	0x03ee0000

08007e34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f023 0201 	bic.w	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d115      	bne.n	8007ea4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e84:	200a      	movs	r0, #10
 8007e86:	f7f9 fa59 	bl	800133c <HAL_Delay>
      ms += 10U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	330a      	adds	r3, #10
 8007e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa25 	bl	80082e0 <USB_GetMode>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d01e      	beq.n	8007eda <USB_SetCurrentMode+0x84>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ea0:	d9f0      	bls.n	8007e84 <USB_SetCurrentMode+0x2e>
 8007ea2:	e01a      	b.n	8007eda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d115      	bne.n	8007ed6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007eb6:	200a      	movs	r0, #10
 8007eb8:	f7f9 fa40 	bl	800133c <HAL_Delay>
      ms += 10U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	330a      	adds	r3, #10
 8007ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa0c 	bl	80082e0 <USB_GetMode>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <USB_SetCurrentMode+0x84>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ed2:	d9f0      	bls.n	8007eb6 <USB_SetCurrentMode+0x60>
 8007ed4:	e001      	b.n	8007eda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e005      	b.n	8007ee6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2bc8      	cmp	r3, #200	@ 0xc8
 8007ede:	d101      	bne.n	8007ee4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b086      	sub	sp, #24
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	613b      	str	r3, [r7, #16]
 8007f0e:	e009      	b.n	8007f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3340      	adds	r3, #64	@ 0x40
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	3301      	adds	r3, #1
 8007f22:	613b      	str	r3, [r7, #16]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2b0e      	cmp	r3, #14
 8007f28:	d9f2      	bls.n	8007f10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d11c      	bne.n	8007f6c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f40:	f043 0302 	orr.w	r3, r3, #2
 8007f44:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e005      	b.n	8007f78 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f7e:	461a      	mov	r2, r3
 8007f80:	2300      	movs	r3, #0
 8007f82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d10d      	bne.n	8007fa8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f968 	bl	800826c <USB_SetDevSpeed>
 8007f9c:	e008      	b.n	8007fb0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f963 	bl	800826c <USB_SetDevSpeed>
 8007fa6:	e003      	b.n	8007fb0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fa8:	2103      	movs	r1, #3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f95e 	bl	800826c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fb0:	2110      	movs	r1, #16
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f8fa 	bl	80081ac <USB_FlushTxFifo>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f924 	bl	8008210 <USB_FlushRxFifo>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd8:	461a      	mov	r2, r3
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	e043      	b.n	8008084 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800800e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008012:	d118      	bne.n	8008046 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008026:	461a      	mov	r2, r3
 8008028:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	e013      	b.n	8008058 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803c:	461a      	mov	r2, r3
 800803e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	e008      	b.n	8008058 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008052:	461a      	mov	r2, r3
 8008054:	2300      	movs	r3, #0
 8008056:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008064:	461a      	mov	r2, r3
 8008066:	2300      	movs	r3, #0
 8008068:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008076:	461a      	mov	r2, r3
 8008078:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800807c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	3301      	adds	r3, #1
 8008082:	613b      	str	r3, [r7, #16]
 8008084:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008088:	461a      	mov	r2, r3
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4293      	cmp	r3, r2
 800808e:	d3b5      	bcc.n	8007ffc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008090:	2300      	movs	r3, #0
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	e043      	b.n	800811e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ac:	d118      	bne.n	80080e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c0:	461a      	mov	r2, r3
 80080c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e013      	b.n	80080f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d6:	461a      	mov	r2, r3
 80080d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080dc:	6013      	str	r3, [r2, #0]
 80080de:	e008      	b.n	80080f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ec:	461a      	mov	r2, r3
 80080ee:	2300      	movs	r3, #0
 80080f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080fe:	461a      	mov	r2, r3
 8008100:	2300      	movs	r3, #0
 8008102:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008110:	461a      	mov	r2, r3
 8008112:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	3301      	adds	r3, #1
 800811c:	613b      	str	r3, [r7, #16]
 800811e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008122:	461a      	mov	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	4293      	cmp	r3, r2
 8008128:	d3b5      	bcc.n	8008096 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800813c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800814a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800814c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f043 0210 	orr.w	r2, r3, #16
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	4b0f      	ldr	r3, [pc, #60]	@ (80081a4 <USB_DevInit+0x2b4>)
 8008166:	4313      	orrs	r3, r2
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800816c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f043 0208 	orr.w	r2, r3, #8
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008180:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008184:	2b01      	cmp	r3, #1
 8008186:	d105      	bne.n	8008194 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699a      	ldr	r2, [r3, #24]
 800818c:	4b06      	ldr	r3, [pc, #24]	@ (80081a8 <USB_DevInit+0x2b8>)
 800818e:	4313      	orrs	r3, r2
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081a0:	b004      	add	sp, #16
 80081a2:	4770      	bx	lr
 80081a4:	803c3800 	.word	0x803c3800
 80081a8:	40000004 	.word	0x40000004

080081ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081c6:	d901      	bls.n	80081cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e01b      	b.n	8008204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	daf2      	bge.n	80081ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	019b      	lsls	r3, r3, #6
 80081dc:	f043 0220 	orr.w	r2, r3, #32
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3301      	adds	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081f0:	d901      	bls.n	80081f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e006      	b.n	8008204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d0f0      	beq.n	80081e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008228:	d901      	bls.n	800822e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e018      	b.n	8008260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	daf2      	bge.n	800821c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2210      	movs	r2, #16
 800823e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3301      	adds	r3, #1
 8008244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800824c:	d901      	bls.n	8008252 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e006      	b.n	8008260 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0310 	and.w	r3, r3, #16
 800825a:	2b10      	cmp	r3, #16
 800825c:	d0f0      	beq.n	8008240 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800828c:	4313      	orrs	r3, r2
 800828e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082b8:	f023 0303 	bic.w	r3, r3, #3
 80082bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082cc:	f043 0302 	orr.w	r3, r3, #2
 80082d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	f003 0301 	and.w	r3, r3, #1
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008314:	d901      	bls.n	800831a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e01b      	b.n	8008352 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	daf2      	bge.n	8008308 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f043 0201 	orr.w	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3301      	adds	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800833e:	d901      	bls.n	8008344 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e006      	b.n	8008352 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b01      	cmp	r3, #1
 800834e:	d0f0      	beq.n	8008332 <USB_CoreReset+0x36>

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <memset>:
 800835e:	4402      	add	r2, r0
 8008360:	4603      	mov	r3, r0
 8008362:	4293      	cmp	r3, r2
 8008364:	d100      	bne.n	8008368 <memset+0xa>
 8008366:	4770      	bx	lr
 8008368:	f803 1b01 	strb.w	r1, [r3], #1
 800836c:	e7f9      	b.n	8008362 <memset+0x4>
	...

08008370 <__libc_init_array>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	4d0d      	ldr	r5, [pc, #52]	@ (80083a8 <__libc_init_array+0x38>)
 8008374:	4c0d      	ldr	r4, [pc, #52]	@ (80083ac <__libc_init_array+0x3c>)
 8008376:	1b64      	subs	r4, r4, r5
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	2600      	movs	r6, #0
 800837c:	42a6      	cmp	r6, r4
 800837e:	d109      	bne.n	8008394 <__libc_init_array+0x24>
 8008380:	4d0b      	ldr	r5, [pc, #44]	@ (80083b0 <__libc_init_array+0x40>)
 8008382:	4c0c      	ldr	r4, [pc, #48]	@ (80083b4 <__libc_init_array+0x44>)
 8008384:	f000 f818 	bl	80083b8 <_init>
 8008388:	1b64      	subs	r4, r4, r5
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	2600      	movs	r6, #0
 800838e:	42a6      	cmp	r6, r4
 8008390:	d105      	bne.n	800839e <__libc_init_array+0x2e>
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	f855 3b04 	ldr.w	r3, [r5], #4
 8008398:	4798      	blx	r3
 800839a:	3601      	adds	r6, #1
 800839c:	e7ee      	b.n	800837c <__libc_init_array+0xc>
 800839e:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a2:	4798      	blx	r3
 80083a4:	3601      	adds	r6, #1
 80083a6:	e7f2      	b.n	800838e <__libc_init_array+0x1e>
 80083a8:	08008418 	.word	0x08008418
 80083ac:	08008418 	.word	0x08008418
 80083b0:	08008418 	.word	0x08008418
 80083b4:	0800841c 	.word	0x0800841c

080083b8 <_init>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr

080083c4 <_fini>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr
