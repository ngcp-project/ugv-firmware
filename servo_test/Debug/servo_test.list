
servo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc8  08003cc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08003cdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003cdc  00020134  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d401  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abb  00000000  00000000  0002d47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e2  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f84  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc71  00000000  00000000  00057306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f77cb  00000000  00000000  00064f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f58  00000000  00000000  0015c744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003c90 	.word	0x08003c90

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003c90 	.word	0x08003c90

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fb80 	bl	8000c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f847 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f931 	bl	80007a8 <MX_GPIO_Init>
  MX_TIM10_Init();
 8000546:	f000 f8b1 	bl	80006ac <MX_TIM10_Init>
  MX_USART3_UART_Init();
 800054a:	f000 f8fd 	bl	8000748 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // 2022 Servo Driver
    steeringServo.timerInstance = &htim10;
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <main+0x74>)
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <main+0x78>)
 8000552:	601a      	str	r2, [r3, #0]
    steeringServo.timerCCRX = &TIM10->CCR1;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <main+0x74>)
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <main+0x7c>)
 8000558:	605a      	str	r2, [r3, #4]
    steeringServo.timerCh = TIM_CHANNEL_1;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <main+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	811a      	strh	r2, [r3, #8]
    steeringServo.timerARR = 59999;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <main+0x74>)
 8000562:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000566:	815a      	strh	r2, [r3, #10]
    steeringServo.minPulse = 500;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <main+0x74>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <main+0x80>)
 800056c:	60da      	str	r2, [r3, #12]
    steeringServo.maxPulse = 2500;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <main+0x74>)
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <main+0x84>)
 8000572:	611a      	str	r2, [r3, #16]
    steeringServo.timerPeriod = 20000;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <main+0x74>)
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <main+0x88>)
 8000578:	615a      	str	r2, [r3, #20]
    steeringServo.travelAngle = 270.0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x74>)
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <main+0x8c>)
 800057e:	625a      	str	r2, [r3, #36]	; 0x24
    //  steeringServo.minLimit = 70.0;
    //  steeringServo.maxLimit = 180.0;

	//steeringServo.minLimit = 40.0;
	//steeringServo.maxLimit = 220.0;
	steeringServo.minLimit = 10.0;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <main+0x74>)
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <main+0x90>)
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
	steeringServo.maxLimit = 260.0;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0x74>)
 8000588:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <main+0x94>)
 800058a:	631a      	str	r2, [r3, #48]	; 0x30
	//steeringServo.travelOffset = 125.0;
	//steeringServo.travelOffset = 50;
	steeringServo.travelOffset = 10;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <main+0x74>)
 800058e:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <main+0x90>)
 8000590:	629a      	str	r2, [r3, #40]	; 0x28

	ugv_servoInitServo(&steeringServo);
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <main+0x74>)
 8000594:	f003 fa69 	bl	8003a6a <ugv_servoInitServo>

	float steer_val = 55.0;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <main+0x98>)
 800059a:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ugv_servoSetAngle(&steeringServo, steer_val);
 800059c:	ed97 0a01 	vldr	s0, [r7, #4]
 80005a0:	4801      	ldr	r0, [pc, #4]	; (80005a8 <main+0x74>)
 80005a2:	f003 faa6 	bl	8003af2 <ugv_servoSetAngle>
 80005a6:	e7f9      	b.n	800059c <main+0x68>
 80005a8:	200000fc 	.word	0x200000fc
 80005ac:	20000028 	.word	0x20000028
 80005b0:	40014434 	.word	0x40014434
 80005b4:	43fa0000 	.word	0x43fa0000
 80005b8:	451c4000 	.word	0x451c4000
 80005bc:	469c4000 	.word	0x469c4000
 80005c0:	43870000 	.word	0x43870000
 80005c4:	41200000 	.word	0x41200000
 80005c8:	43820000 	.word	0x43820000
 80005cc:	425c0000 	.word	0x425c0000

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb29 	bl	8003c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <SystemClock_Config+0xd4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a2a      	ldr	r2, [pc, #168]	; (80006a4 <SystemClock_Config+0xd4>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <SystemClock_Config+0xd8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a25      	ldr	r2, [pc, #148]	; (80006a8 <SystemClock_Config+0xd8>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <SystemClock_Config+0xd8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800063c:	23d8      	movs	r3, #216	; 0xd8
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fe4d 	bl	80012f0 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800065c:	f000 f9a8 	bl	80009b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000660:	f000 fdf6 	bl	8001250 <HAL_PWREx_EnableOverDrive>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066a:	f000 f9a1 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2107      	movs	r1, #7
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f8dd 	bl	800184c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000698:	f000 f98a 	bl	80009b0 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_TIM10_Init+0x94>)
 80006c6:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <MX_TIM10_Init+0x98>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_TIM10_Init+0x94>)
 80006cc:	2247      	movs	r2, #71	; 0x47
 80006ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_TIM10_Init+0x94>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 59999;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_TIM10_Init+0x94>)
 80006d8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80006dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_TIM10_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_TIM10_Init+0x94>)
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80006ea:	4815      	ldr	r0, [pc, #84]	; (8000740 <MX_TIM10_Init+0x94>)
 80006ec:	f001 fefa 	bl	80024e4 <HAL_TIM_Base_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80006f6:	f000 f95b 	bl	80009b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80006fa:	4811      	ldr	r0, [pc, #68]	; (8000740 <MX_TIM10_Init+0x94>)
 80006fc:	f001 ff49 	bl	8002592 <HAL_TIM_PWM_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000706:	f000 f953 	bl	80009b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070a:	2360      	movs	r3, #96	; 0x60
 800070c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	4619      	mov	r1, r3
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <MX_TIM10_Init+0x94>)
 8000722:	f002 f891 	bl	8002848 <HAL_TIM_PWM_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800072c:	f000 f940 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <MX_TIM10_Init+0x94>)
 8000732:	f000 f987 	bl	8000a44 <HAL_TIM_MspPostInit>

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028
 8000744:	40014400 	.word	0x40014400

08000748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <MX_USART3_UART_Init+0x5c>)
 8000750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800078c:	f002 fc9f 	bl	80030ce <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f90b 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000074 	.word	0x20000074
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b77      	ldr	r3, [pc, #476]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a76      	ldr	r2, [pc, #472]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b74      	ldr	r3, [pc, #464]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4b71      	ldr	r3, [pc, #452]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a70      	ldr	r2, [pc, #448]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b6e      	ldr	r3, [pc, #440]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b6b      	ldr	r3, [pc, #428]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a6a      	ldr	r2, [pc, #424]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b68      	ldr	r3, [pc, #416]	; (800099c <MX_GPIO_Init+0x1f4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b65      	ldr	r3, [pc, #404]	; (800099c <MX_GPIO_Init+0x1f4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a64      	ldr	r2, [pc, #400]	; (800099c <MX_GPIO_Init+0x1f4>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b62      	ldr	r3, [pc, #392]	; (800099c <MX_GPIO_Init+0x1f4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <MX_GPIO_Init+0x1f4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a5e      	ldr	r2, [pc, #376]	; (800099c <MX_GPIO_Init+0x1f4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b5c      	ldr	r3, [pc, #368]	; (800099c <MX_GPIO_Init+0x1f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	4b59      	ldr	r3, [pc, #356]	; (800099c <MX_GPIO_Init+0x1f4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a58      	ldr	r2, [pc, #352]	; (800099c <MX_GPIO_Init+0x1f4>)
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b56      	ldr	r3, [pc, #344]	; (800099c <MX_GPIO_Init+0x1f4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f244 0181 	movw	r1, #16513	; 0x4081
 8000854:	4852      	ldr	r0, [pc, #328]	; (80009a0 <MX_GPIO_Init+0x1f8>)
 8000856:	f000 fce1 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2140      	movs	r1, #64	; 0x40
 800085e:	4851      	ldr	r0, [pc, #324]	; (80009a4 <MX_GPIO_Init+0x1fc>)
 8000860:	f000 fcdc 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	484b      	ldr	r0, [pc, #300]	; (80009a8 <MX_GPIO_Init+0x200>)
 800087c:	f000 fb22 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000880:	2332      	movs	r3, #50	; 0x32
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4843      	ldr	r0, [pc, #268]	; (80009a8 <MX_GPIO_Init+0x200>)
 800089c:	f000 fb12 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008a0:	2386      	movs	r3, #134	; 0x86
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	483c      	ldr	r0, [pc, #240]	; (80009ac <MX_GPIO_Init+0x204>)
 80008bc:	f000 fb02 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4831      	ldr	r0, [pc, #196]	; (80009a0 <MX_GPIO_Init+0x1f8>)
 80008da:	f000 faf3 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f0:	230b      	movs	r3, #11
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <MX_GPIO_Init+0x1f8>)
 80008fc:	f000 fae2 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4823      	ldr	r0, [pc, #140]	; (80009a4 <MX_GPIO_Init+0x1fc>)
 8000918:	f000 fad4 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	481d      	ldr	r0, [pc, #116]	; (80009a4 <MX_GPIO_Init+0x1fc>)
 8000930:	f000 fac8 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000934:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000946:	230a      	movs	r3, #10
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4816      	ldr	r0, [pc, #88]	; (80009ac <MX_GPIO_Init+0x204>)
 8000952:	f000 fab7 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_GPIO_Init+0x204>)
 800096c:	f000 faaa 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000970:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000982:	230b      	movs	r3, #11
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_GPIO_Init+0x1fc>)
 800098e:	f000 fa99 	bl	8000ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40021800 	.word	0x40021800
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020000 	.word	0x40020000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_MspInit+0x44>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x44>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x44>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x44>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_TIM_Base_MspInit+0x38>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d10b      	bne.n	8000a2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_TIM_Base_MspInit+0x3c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_TIM_Base_MspInit+0x3c>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <HAL_TIM_Base_MspInit+0x3c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40014400 	.word	0x40014400
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_TIM_MspPostInit+0x64>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d11c      	bne.n	8000aa0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_TIM_MspPostInit+0x68>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_TIM_MspPostInit+0x68>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_TIM_MspPostInit+0x68>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000a90:	2303      	movs	r3, #3
 8000a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_TIM_MspPostInit+0x6c>)
 8000a9c:	f000 fa12 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40014400 	.word	0x40014400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ae      	sub	sp, #184	; 0xb8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2290      	movs	r2, #144	; 0x90
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 f8ae 	bl	8003c36 <memset>
  if(huart->Instance==USART3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <HAL_UART_MspInit+0xb4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d13c      	bne.n	8000b5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f8ce 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000afe:	f7ff ff57 	bl	80009b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_UART_MspInit+0xb8>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0xb8>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0xb8>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_UART_MspInit+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <HAL_UART_MspInit+0xb8>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_UART_MspInit+0xb8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_UART_MspInit+0xbc>)
 8000b5a:	f000 f9b3 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	37b8      	adds	r7, #184	; 0xb8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40004800 	.word	0x40004800
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f87a 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f003 f815 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fc89 	bl	8000534 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c30:	08003cd0 	.word	0x08003cd0
  ldr r2, =_sbss
 8000c34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c38:	20000134 	.word	0x20000134

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>

08000c3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f90a 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 f805 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4e:	f7ff feb5 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f917 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c94:	f000 f8ed 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000130 	.word	0x20000130

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000130 	.word	0x20000130

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	05fa0000 	.word	0x05fa0000

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff47 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff5c 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffb0 	bl	8000e18 <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e175      	b.n	80011d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8164 	bne.w	80011ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_GPIO_Init+0x56>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80be 	beq.w	80011ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b66      	ldr	r3, [pc, #408]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a65      	ldr	r2, [pc, #404]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <HAL_GPIO_Init+0x324>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001066:	4a61      	ldr	r2, [pc, #388]	; (80011ec <HAL_GPIO_Init+0x328>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <HAL_GPIO_Init+0x32c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d037      	beq.n	8001102 <HAL_GPIO_Init+0x23e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <HAL_GPIO_Init+0x330>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d031      	beq.n	80010fe <HAL_GPIO_Init+0x23a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a56      	ldr	r2, [pc, #344]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x236>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a55      	ldr	r2, [pc, #340]	; (80011fc <HAL_GPIO_Init+0x338>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x232>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a54      	ldr	r2, [pc, #336]	; (8001200 <HAL_GPIO_Init+0x33c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x22e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a53      	ldr	r2, [pc, #332]	; (8001204 <HAL_GPIO_Init+0x340>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x22a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_GPIO_Init+0x344>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_GPIO_Init+0x348>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x34c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_GPIO_Init+0x350>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x21a>
 80010da:	2309      	movs	r3, #9
 80010dc:	e012      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010de:	230a      	movs	r3, #10
 80010e0:	e010      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010e2:	2308      	movs	r3, #8
 80010e4:	e00e      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00c      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010ea:	2306      	movs	r3, #6
 80010ec:	e00a      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e008      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010f6:	2303      	movs	r3, #3
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x240>
 8001102:	2300      	movs	r3, #0
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	f002 0203 	and.w	r2, r2, #3
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4093      	lsls	r3, r2
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001114:	4935      	ldr	r1, [pc, #212]	; (80011ec <HAL_GPIO_Init+0x328>)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3302      	adds	r3, #2
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a34      	ldr	r2, [pc, #208]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <HAL_GPIO_Init+0x354>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <HAL_GPIO_Init+0x354>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_GPIO_Init+0x354>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_GPIO_Init+0x354>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3301      	adds	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	f67f ae86 	bls.w	8000ee4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40021000 	.word	0x40021000
 8001204:	40021400 	.word	0x40021400
 8001208:	40021800 	.word	0x40021800
 800120c:	40021c00 	.word	0x40021c00
 8001210:	40022000 	.word	0x40022000
 8001214:	40022400 	.word	0x40022400
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127e:	f7ff fd2f 	bl	8000ce0 <HAL_GetTick>
 8001282:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001284:	e009      	b.n	800129a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001286:	f7ff fd2b 	bl	8000ce0 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001294:	d901      	bls.n	800129a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e022      	b.n	80012e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a6:	d1ee      	bne.n	8001286 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b4:	f7ff fd14 	bl	8000ce0 <HAL_GetTick>
 80012b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ba:	e009      	b.n	80012d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012bc:	f7ff fd10 	bl	8000ce0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ca:	d901      	bls.n	80012d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e007      	b.n	80012e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012dc:	d1ee      	bne.n	80012bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e29b      	b.n	800183e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001314:	4b96      	ldr	r3, [pc, #600]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001320:	4b93      	ldr	r3, [pc, #588]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d112      	bne.n	8001352 <HAL_RCC_OscConfig+0x62>
 800132c:	4b90      	ldr	r3, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x130>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d168      	bne.n	8001420 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e275      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x7a>
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a83      	ldr	r2, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02e      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x9c>
 8001372:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7e      	ldr	r2, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7b      	ldr	r2, [pc, #492]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a75      	ldr	r2, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a72      	ldr	r2, [pc, #456]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 80013b0:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6e      	ldr	r2, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a6b      	ldr	r2, [pc, #428]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc86 	bl	8000ce0 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc82 	bl	8000ce0 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e229      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc72 	bl	8000ce0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fc6e 	bl	8000ce0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e215      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x110>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d069      	beq.n	8001502 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x190>
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x17a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1e9      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	493d      	ldr	r1, [pc, #244]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e040      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fc24 	bl	8000ce0 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fc20 	bl	8000ce0 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1c7      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4929      	ldr	r1, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fc00 	bl	8000ce0 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff fbfc 	bl	8000ce0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1a3      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d038      	beq.n	8001580 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d019      	beq.n	800154a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fbdd 	bl	8000ce0 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fbd9 	bl	8000ce0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e180      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x23a>
 8001548:	e01a      	b.n	8001580 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fbc3 	bl	8000ce0 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fbbf 	bl	8000ce0 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d903      	bls.n	8001574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e166      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
 8001570:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a4 	beq.w	80016d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158e:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a88      	ldr	r2, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b86      	ldr	r3, [pc, #536]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b6:	4b83      	ldr	r3, [pc, #524]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015c2:	4b80      	ldr	r3, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7f      	ldr	r2, [pc, #508]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fb87 	bl	8000ce0 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fb83 	bl	8000ce0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e12a      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x31a>
 80015fc:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a6f      	ldr	r2, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	e02d      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x33c>
 8001612:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a6a      	ldr	r2, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	e01c      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x35e>
 8001634:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a5e      	ldr	r2, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800164e:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a5b      	ldr	r2, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d015      	beq.n	800169a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fb37 	bl	8000ce0 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fb33 	bl	8000ce0 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e0d8      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ee      	beq.n	8001676 <HAL_RCC_OscConfig+0x386>
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff fb21 	bl	8000ce0 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb1d 	bl	8000ce0 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0c2      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d105      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80ae 	beq.w	800183c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e0:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d06d      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d14b      	bne.n	800178c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a31      	ldr	r2, [pc, #196]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff faee 	bl	8000ce0 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff faea 	bl	8000ce0 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e091      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	019b      	lsls	r3, r3, #6
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	3b01      	subs	r3, #1
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	071b      	lsls	r3, r3, #28
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fabc 	bl	8000ce0 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fab8 	bl	8000ce0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e05f      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x47c>
 800178a:	e057      	b.n	800183c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff faa2 	bl	8000ce0 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff fa9e 	bl	8000ce0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e045      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4b0>
 80017be:	e03d      	b.n	800183c <HAL_RCC_OscConfig+0x54c>
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_RCC_OscConfig+0x558>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d030      	beq.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d129      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d122      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001800:	4293      	cmp	r3, r2
 8001802:	d119      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d10f      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0d0      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d910      	bls.n	8001894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 020f 	bic.w	r2, r3, #15
 800187a:	4965      	ldr	r1, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d040      	beq.n	8001970 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d115      	bne.n	800192e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e073      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4936      	ldr	r1, [pc, #216]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001940:	f7ff f9ce 	bl	8000ce0 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff f9ca 	bl	8000ce0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e053      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d210      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 020f 	bic.w	r2, r3, #15
 8001986:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1cc>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1d0>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1d4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f92a 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08003ca8 	.word	0x08003ca8
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a28:	b094      	sub	sp, #80	; 0x50
 8001a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a30:	2300      	movs	r3, #0
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a3c:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d00d      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	f200 80e1 	bhi.w	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x34>
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a56:	e0db      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a5c:	e0db      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5e:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a62:	e0d8      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d063      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	2200      	movs	r2, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
 8001a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a96:	4622      	mov	r2, r4
 8001a98:	462b      	mov	r3, r5
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	0159      	lsls	r1, r3, #5
 8001aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa8:	0150      	lsls	r0, r2, #5
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4621      	mov	r1, r4
 8001ab0:	1a51      	subs	r1, r2, r1
 8001ab2:	6139      	str	r1, [r7, #16]
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac8:	4659      	mov	r1, fp
 8001aca:	018b      	lsls	r3, r1, #6
 8001acc:	4651      	mov	r1, sl
 8001ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad2:	4651      	mov	r1, sl
 8001ad4:	018a      	lsls	r2, r1, #6
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8001adc:	4659      	mov	r1, fp
 8001ade:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af6:	4690      	mov	r8, r2
 8001af8:	4699      	mov	r9, r3
 8001afa:	4623      	mov	r3, r4
 8001afc:	eb18 0303 	adds.w	r3, r8, r3
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	462b      	mov	r3, r5
 8001b04:	eb49 0303 	adc.w	r3, r9, r3
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b16:	4629      	mov	r1, r5
 8001b18:	028b      	lsls	r3, r1, #10
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b20:	4621      	mov	r1, r4
 8001b22:	028a      	lsls	r2, r1, #10
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b34:	f7fe fb80 	bl	8000238 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b40:	e058      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	464b      	mov	r3, r9
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	0159      	lsls	r1, r3, #5
 8001b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6e:	0150      	lsls	r0, r2, #5
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4641      	mov	r1, r8
 8001b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b94:	ebb2 040a 	subs.w	r4, r2, sl
 8001b98:	eb63 050b 	sbc.w	r5, r3, fp
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	00eb      	lsls	r3, r5, #3
 8001ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001baa:	00e2      	lsls	r2, r4, #3
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	18e3      	adds	r3, r4, r3
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	eb45 0303 	adc.w	r3, r5, r3
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	028b      	lsls	r3, r1, #10
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	028a      	lsls	r2, r1, #10
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	61fa      	str	r2, [r7, #28]
 8001be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be8:	f7fe fb26 	bl	8000238 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400

08001c2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a9b      	lsrs	r3, r3, #10
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08003cb8 	.word	0x08003cb8

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c70:	f7ff ffdc 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08003cb8 	.word	0x08003cb8

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d012      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a68      	ldr	r2, [pc, #416]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cc6:	6093      	str	r3, [r2, #8]
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	4964      	ldr	r1, [pc, #400]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d017      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cee:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	4959      	ldr	r1, [pc, #356]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d017      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	494a      	ldr	r1, [pc, #296]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d48:	d101      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 808b 	beq.w	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a39      	ldr	r2, [pc, #228]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d90:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a34      	ldr	r2, [pc, #208]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d9c:	f7fe ffa0 	bl	8000ce0 <HAL_GetTick>
 8001da0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe ff9c 	bl	8000ce0 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e38f      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d035      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d02e      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e02:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d114      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff64 	bl	8000ce0 <HAL_GetTick>
 8001e18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7fe ff60 	bl	8000ce0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e351      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ee      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e4a:	d111      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	4901      	ldr	r1, [pc, #4]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	0ffffcff 	.word	0x0ffffcff
 8001e70:	4bac      	ldr	r3, [pc, #688]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4aab      	ldr	r2, [pc, #684]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e7a:	6093      	str	r3, [r2, #8]
 8001e7c:	4ba9      	ldr	r3, [pc, #676]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	49a6      	ldr	r1, [pc, #664]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e9a:	4ba2      	ldr	r3, [pc, #648]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea0:	4aa0      	ldr	r2, [pc, #640]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eaa:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	499b      	ldr	r1, [pc, #620]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec8:	4b96      	ldr	r3, [pc, #600]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed6:	4993      	ldr	r1, [pc, #588]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eea:	4b8e      	ldr	r3, [pc, #568]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef8:	498a      	ldr	r1, [pc, #552]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f0c:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1a:	4982      	ldr	r1, [pc, #520]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f2e:	4b7d      	ldr	r3, [pc, #500]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	4979      	ldr	r1, [pc, #484]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f50:	4b74      	ldr	r3, [pc, #464]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4971      	ldr	r1, [pc, #452]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f023 020c 	bic.w	r2, r3, #12
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	4968      	ldr	r1, [pc, #416]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f94:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4960      	ldr	r1, [pc, #384]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc4:	4957      	ldr	r1, [pc, #348]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fd8:	4b52      	ldr	r3, [pc, #328]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	494f      	ldr	r1, [pc, #316]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4946      	ldr	r1, [pc, #280]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	493e      	ldr	r1, [pc, #248]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	4935      	ldr	r1, [pc, #212]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002060:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800206e:	492d      	ldr	r1, [pc, #180]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d011      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002090:	4924      	ldr	r1, [pc, #144]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800209c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	4914      	ldr	r1, [pc, #80]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f4:	490b      	ldr	r1, [pc, #44]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00f      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002118:	4902      	ldr	r1, [pc, #8]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002120:	e002      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00b      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002134:	4b8a      	ldr	r3, [pc, #552]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800213a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	4986      	ldr	r1, [pc, #536]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002158:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800215e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002168:	497d      	ldr	r1, [pc, #500]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d006      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80d6 	beq.w	8002330 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002184:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800218e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002190:	f7fe fda6 	bl	8000ce0 <HAL_GetTick>
 8002194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002198:	f7fe fda2 	bl	8000ce0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e195      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d021      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11d      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021ca:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021d8:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021de:	0e1b      	lsrs	r3, r3, #24
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	019a      	lsls	r2, r3, #6
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	071b      	lsls	r3, r3, #28
 80021fe:	4958      	ldr	r1, [pc, #352]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02e      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002230:	d129      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002232:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002246:	0f1b      	lsrs	r3, r3, #28
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	019a      	lsls	r2, r3, #6
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	061b      	lsls	r3, r3, #24
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	493e      	ldr	r1, [pc, #248]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002274:	f023 021f 	bic.w	r2, r3, #31
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	3b01      	subs	r3, #1
 800227e:	4938      	ldr	r1, [pc, #224]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01d      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002298:	0e1b      	lsrs	r3, r3, #24
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a6:	0f1b      	lsrs	r3, r3, #28
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	019a      	lsls	r2, r3, #6
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	071b      	lsls	r3, r3, #28
 80022c6:	4926      	ldr	r1, [pc, #152]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d011      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	019a      	lsls	r2, r3, #6
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	071b      	lsls	r3, r3, #28
 80022f6:	491a      	ldr	r1, [pc, #104]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002304:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230a:	f7fe fce9 	bl	8000ce0 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002312:	f7fe fce5 	bl	8000ce0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0d8      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b01      	cmp	r3, #1
 8002334:	f040 80ce 	bne.w	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe fccc 	bl	8000ce0 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800234a:	e00b      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800234c:	f7fe fcc8 	bl	8000ce0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d904      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0bb      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002364:	4b5e      	ldr	r3, [pc, #376]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800236c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002370:	d0ec      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02e      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d12a      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800239a:	4b51      	ldr	r3, [pc, #324]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023a8:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	0f1b      	lsrs	r3, r3, #28
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	019a      	lsls	r2, r3, #6
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	431a      	orrs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	071b      	lsls	r3, r3, #28
 80023ce:	4944      	ldr	r1, [pc, #272]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023d6:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	493d      	ldr	r1, [pc, #244]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d022      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002404:	d11d      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	0e1b      	lsrs	r3, r3, #24
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002414:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	0f1b      	lsrs	r3, r3, #28
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	019a      	lsls	r2, r3, #6
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	061b      	lsls	r3, r3, #24
 8002434:	431a      	orrs	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	071b      	lsls	r3, r3, #28
 800243a:	4929      	ldr	r1, [pc, #164]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d028      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	0e1b      	lsrs	r3, r3, #24
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	019a      	lsls	r2, r3, #6
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	431a      	orrs	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	071b      	lsls	r3, r3, #28
 8002482:	4917      	ldr	r1, [pc, #92]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	4911      	ldr	r1, [pc, #68]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ac:	f7fe fc18 	bl	8000ce0 <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024b4:	f7fe fc14 	bl	8000ce0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e007      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d2:	d1ef      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e049      	b.n	800258a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fa7a 	bl	8000a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 faa4 	bl	8002a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e049      	b.n	8002638 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f841 	bl	8002640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3304      	adds	r3, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f000 fa4d 	bl	8002a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_TIM_PWM_Start+0x24>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e03c      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d109      	bne.n	8002692 <HAL_TIM_PWM_Start+0x3e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e02f      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d109      	bne.n	80026ac <HAL_TIM_PWM_Start+0x58>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e022      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d109      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x72>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e015      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x8c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e008      	b.n	80026f2 <HAL_TIM_PWM_Start+0x9e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e092      	b.n	8002820 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0xb6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	e023      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0xc6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002718:	e01b      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xd6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002728:	e013      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d104      	bne.n	800273a <HAL_TIM_PWM_Start+0xe6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002738:	e00b      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b10      	cmp	r3, #16
 800273e:	d104      	bne.n	800274a <HAL_TIM_PWM_Start+0xf6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002748:	e003      	b.n	8002752 <HAL_TIM_PWM_Start+0xfe>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fc92 	bl	8003084 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a30      	ldr	r2, [pc, #192]	; (8002828 <HAL_TIM_PWM_Start+0x1d4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_TIM_PWM_Start+0x120>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2f      	ldr	r2, [pc, #188]	; (800282c <HAL_TIM_PWM_Start+0x1d8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_TIM_PWM_Start+0x124>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_TIM_PWM_Start+0x126>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_TIM_PWM_Start+0x1d4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d022      	beq.n	80027de <HAL_TIM_PWM_Start+0x18a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d01d      	beq.n	80027de <HAL_TIM_PWM_Start+0x18a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a22      	ldr	r2, [pc, #136]	; (8002830 <HAL_TIM_PWM_Start+0x1dc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d018      	beq.n	80027de <HAL_TIM_PWM_Start+0x18a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_TIM_PWM_Start+0x1e0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_TIM_PWM_Start+0x18a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_TIM_PWM_Start+0x1e4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00e      	beq.n	80027de <HAL_TIM_PWM_Start+0x18a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_TIM_PWM_Start+0x1d8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_TIM_PWM_Start+0x18a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_TIM_PWM_Start+0x1e8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_TIM_PWM_Start+0x18a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a19      	ldr	r2, [pc, #100]	; (8002840 <HAL_TIM_PWM_Start+0x1ec>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d115      	bne.n	800280a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_TIM_PWM_Start+0x1f0>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d015      	beq.n	800281c <HAL_TIM_PWM_Start+0x1c8>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f6:	d011      	beq.n	800281c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	e008      	b.n	800281c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e000      	b.n	800281e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40010000 	.word	0x40010000
 800282c:	40010400 	.word	0x40010400
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40014000 	.word	0x40014000
 8002840:	40001800 	.word	0x40001800
 8002844:	00010007 	.word	0x00010007

08002848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002862:	2302      	movs	r3, #2
 8002864:	e0ff      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b14      	cmp	r3, #20
 8002872:	f200 80f0 	bhi.w	8002a56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	080028d1 	.word	0x080028d1
 8002880:	08002a57 	.word	0x08002a57
 8002884:	08002a57 	.word	0x08002a57
 8002888:	08002a57 	.word	0x08002a57
 800288c:	08002911 	.word	0x08002911
 8002890:	08002a57 	.word	0x08002a57
 8002894:	08002a57 	.word	0x08002a57
 8002898:	08002a57 	.word	0x08002a57
 800289c:	08002953 	.word	0x08002953
 80028a0:	08002a57 	.word	0x08002a57
 80028a4:	08002a57 	.word	0x08002a57
 80028a8:	08002a57 	.word	0x08002a57
 80028ac:	08002993 	.word	0x08002993
 80028b0:	08002a57 	.word	0x08002a57
 80028b4:	08002a57 	.word	0x08002a57
 80028b8:	08002a57 	.word	0x08002a57
 80028bc:	080029d5 	.word	0x080029d5
 80028c0:	08002a57 	.word	0x08002a57
 80028c4:	08002a57 	.word	0x08002a57
 80028c8:	08002a57 	.word	0x08002a57
 80028cc:	08002a15 	.word	0x08002a15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f976 	bl	8002bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0208 	orr.w	r2, r2, #8
 80028ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6999      	ldr	r1, [r3, #24]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	619a      	str	r2, [r3, #24]
      break;
 800290e:	e0a5      	b.n	8002a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f9c8 	bl	8002cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	021a      	lsls	r2, r3, #8
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	619a      	str	r2, [r3, #24]
      break;
 8002950:	e084      	b.n	8002a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fa1f 	bl	8002d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0208 	orr.w	r2, r2, #8
 800296c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0204 	bic.w	r2, r2, #4
 800297c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69d9      	ldr	r1, [r3, #28]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	61da      	str	r2, [r3, #28]
      break;
 8002990:	e064      	b.n	8002a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fa75 	bl	8002e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69d9      	ldr	r1, [r3, #28]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	61da      	str	r2, [r3, #28]
      break;
 80029d2:	e043      	b.n	8002a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 faac 	bl	8002f38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0208 	orr.w	r2, r2, #8
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a12:	e023      	b.n	8002a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fade 	bl	8002fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	021a      	lsls	r2, r3, #8
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop

08002a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a46      	ldr	r2, [pc, #280]	; (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d00f      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <TIM_Base_SetConfig+0x134>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d007      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a41      	ldr	r2, [pc, #260]	; (8002ba8 <TIM_Base_SetConfig+0x138>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a40      	ldr	r2, [pc, #256]	; (8002bac <TIM_Base_SetConfig+0x13c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d108      	bne.n	8002ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a35      	ldr	r2, [pc, #212]	; (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d027      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d023      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <TIM_Base_SetConfig+0x134>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <TIM_Base_SetConfig+0x138>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <TIM_Base_SetConfig+0x13c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d017      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2e      	ldr	r2, [pc, #184]	; (8002bb0 <TIM_Base_SetConfig+0x140>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <TIM_Base_SetConfig+0x144>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2c      	ldr	r2, [pc, #176]	; (8002bb8 <TIM_Base_SetConfig+0x148>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <TIM_Base_SetConfig+0x14c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <TIM_Base_SetConfig+0x150>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <TIM_Base_SetConfig+0x154>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d108      	bne.n	8002b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_Base_SetConfig+0xf8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a12      	ldr	r2, [pc, #72]	; (8002bac <TIM_Base_SetConfig+0x13c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d103      	bne.n	8002b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f023 0201 	bic.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40010400 	.word	0x40010400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800
 8002bbc:	40001800 	.word	0x40001800
 8002bc0:	40001c00 	.word	0x40001c00
 8002bc4:	40002000 	.word	0x40002000

08002bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f023 0201 	bic.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <TIM_OC1_SetConfig+0xd8>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 0302 	bic.w	r3, r3, #2
 8002c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <TIM_OC1_SetConfig+0xdc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_OC1_SetConfig+0x64>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a20      	ldr	r2, [pc, #128]	; (8002ca8 <TIM_OC1_SetConfig+0xe0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10c      	bne.n	8002c46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f023 0308 	bic.w	r3, r3, #8
 8002c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <TIM_OC1_SetConfig+0xdc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_OC1_SetConfig+0x8e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <TIM_OC1_SetConfig+0xe0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d111      	bne.n	8002c7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	fffeff8f 	.word	0xfffeff8f
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40010400 	.word	0x40010400

08002cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f023 0210 	bic.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <TIM_OC2_SetConfig+0xe4>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0320 	bic.w	r3, r3, #32
 8002cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a23      	ldr	r2, [pc, #140]	; (8002d94 <TIM_OC2_SetConfig+0xe8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_OC2_SetConfig+0x68>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <TIM_OC2_SetConfig+0xec>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10d      	bne.n	8002d30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <TIM_OC2_SetConfig+0xe8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_OC2_SetConfig+0x94>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <TIM_OC2_SetConfig+0xec>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d113      	bne.n	8002d68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	feff8fff 	.word	0xfeff8fff
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40010400 	.word	0x40010400

08002d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <TIM_OC3_SetConfig+0xe0>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <TIM_OC3_SetConfig+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_OC3_SetConfig+0x66>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <TIM_OC3_SetConfig+0xe8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10d      	bne.n	8002e1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <TIM_OC3_SetConfig+0xe4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_OC3_SetConfig+0x92>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a16      	ldr	r2, [pc, #88]	; (8002e84 <TIM_OC3_SetConfig+0xe8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d113      	bne.n	8002e56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	621a      	str	r2, [r3, #32]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	fffeff8f 	.word	0xfffeff8f
 8002e80:	40010000 	.word	0x40010000
 8002e84:	40010400 	.word	0x40010400

08002e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <TIM_OC4_SetConfig+0xa4>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	031b      	lsls	r3, r3, #12
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <TIM_OC4_SetConfig+0xa8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_OC4_SetConfig+0x68>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <TIM_OC4_SetConfig+0xac>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d109      	bne.n	8002f04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	feff8fff 	.word	0xfeff8fff
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40010400 	.word	0x40010400

08002f38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <TIM_OC5_SetConfig+0x98>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <TIM_OC5_SetConfig+0x9c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_OC5_SetConfig+0x5e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <TIM_OC5_SetConfig+0xa0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d109      	bne.n	8002faa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	621a      	str	r2, [r3, #32]
}
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	fffeff8f 	.word	0xfffeff8f
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40010400 	.word	0x40010400

08002fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <TIM_OC6_SetConfig+0x9c>)
 8003008:	4013      	ands	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800301e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	051b      	lsls	r3, r3, #20
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a13      	ldr	r2, [pc, #76]	; (800307c <TIM_OC6_SetConfig+0xa0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_OC6_SetConfig+0x60>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <TIM_OC6_SetConfig+0xa4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d109      	bne.n	8003050 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	feff8fff 	.word	0xfeff8fff
 800307c:	40010000 	.word	0x40010000
 8003080:	40010400 	.word	0x40010400

08003084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2201      	movs	r2, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	401a      	ands	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e040      	b.n	8003162 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fd fcdf 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2224      	movs	r2, #36	; 0x24
 80030fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fa8d 	bl	8003634 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f826 	bl	800316c <UART_SetConfig>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e01b      	b.n	8003162 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003138:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003148:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fb0c 	bl	8003778 <UART_CheckIdleState>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4ba6      	ldr	r3, [pc, #664]	; (8003430 <UART_SetConfig+0x2c4>)
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a94      	ldr	r2, [pc, #592]	; (8003434 <UART_SetConfig+0x2c8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d120      	bne.n	800322a <UART_SetConfig+0xbe>
 80031e8:	4b93      	ldr	r3, [pc, #588]	; (8003438 <UART_SetConfig+0x2cc>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d816      	bhi.n	8003224 <UART_SetConfig+0xb8>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0x90>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	08003219 	.word	0x08003219
 8003204:	08003213 	.word	0x08003213
 8003208:	0800321f 	.word	0x0800321f
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e150      	b.n	80034b4 <UART_SetConfig+0x348>
 8003212:	2302      	movs	r3, #2
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e14d      	b.n	80034b4 <UART_SetConfig+0x348>
 8003218:	2304      	movs	r3, #4
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e14a      	b.n	80034b4 <UART_SetConfig+0x348>
 800321e:	2308      	movs	r3, #8
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e147      	b.n	80034b4 <UART_SetConfig+0x348>
 8003224:	2310      	movs	r3, #16
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e144      	b.n	80034b4 <UART_SetConfig+0x348>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a83      	ldr	r2, [pc, #524]	; (800343c <UART_SetConfig+0x2d0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d132      	bne.n	800329a <UART_SetConfig+0x12e>
 8003234:	4b80      	ldr	r3, [pc, #512]	; (8003438 <UART_SetConfig+0x2cc>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d828      	bhi.n	8003294 <UART_SetConfig+0x128>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0xdc>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003295 	.word	0x08003295
 8003250:	08003295 	.word	0x08003295
 8003254:	08003295 	.word	0x08003295
 8003258:	08003289 	.word	0x08003289
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	08003295 	.word	0x08003295
 8003268:	08003283 	.word	0x08003283
 800326c:	08003295 	.word	0x08003295
 8003270:	08003295 	.word	0x08003295
 8003274:	08003295 	.word	0x08003295
 8003278:	0800328f 	.word	0x0800328f
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e118      	b.n	80034b4 <UART_SetConfig+0x348>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e115      	b.n	80034b4 <UART_SetConfig+0x348>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e112      	b.n	80034b4 <UART_SetConfig+0x348>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e10f      	b.n	80034b4 <UART_SetConfig+0x348>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e10c      	b.n	80034b4 <UART_SetConfig+0x348>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a68      	ldr	r2, [pc, #416]	; (8003440 <UART_SetConfig+0x2d4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d120      	bne.n	80032e6 <UART_SetConfig+0x17a>
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <UART_SetConfig+0x2cc>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032ae:	2b30      	cmp	r3, #48	; 0x30
 80032b0:	d013      	beq.n	80032da <UART_SetConfig+0x16e>
 80032b2:	2b30      	cmp	r3, #48	; 0x30
 80032b4:	d814      	bhi.n	80032e0 <UART_SetConfig+0x174>
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d009      	beq.n	80032ce <UART_SetConfig+0x162>
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d810      	bhi.n	80032e0 <UART_SetConfig+0x174>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <UART_SetConfig+0x15c>
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d006      	beq.n	80032d4 <UART_SetConfig+0x168>
 80032c6:	e00b      	b.n	80032e0 <UART_SetConfig+0x174>
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e0f2      	b.n	80034b4 <UART_SetConfig+0x348>
 80032ce:	2302      	movs	r3, #2
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e0ef      	b.n	80034b4 <UART_SetConfig+0x348>
 80032d4:	2304      	movs	r3, #4
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0ec      	b.n	80034b4 <UART_SetConfig+0x348>
 80032da:	2308      	movs	r3, #8
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e0e9      	b.n	80034b4 <UART_SetConfig+0x348>
 80032e0:	2310      	movs	r3, #16
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e0e6      	b.n	80034b4 <UART_SetConfig+0x348>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a56      	ldr	r2, [pc, #344]	; (8003444 <UART_SetConfig+0x2d8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d120      	bne.n	8003332 <UART_SetConfig+0x1c6>
 80032f0:	4b51      	ldr	r3, [pc, #324]	; (8003438 <UART_SetConfig+0x2cc>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032fa:	2bc0      	cmp	r3, #192	; 0xc0
 80032fc:	d013      	beq.n	8003326 <UART_SetConfig+0x1ba>
 80032fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003300:	d814      	bhi.n	800332c <UART_SetConfig+0x1c0>
 8003302:	2b80      	cmp	r3, #128	; 0x80
 8003304:	d009      	beq.n	800331a <UART_SetConfig+0x1ae>
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d810      	bhi.n	800332c <UART_SetConfig+0x1c0>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <UART_SetConfig+0x1a8>
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d006      	beq.n	8003320 <UART_SetConfig+0x1b4>
 8003312:	e00b      	b.n	800332c <UART_SetConfig+0x1c0>
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e0cc      	b.n	80034b4 <UART_SetConfig+0x348>
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e0c9      	b.n	80034b4 <UART_SetConfig+0x348>
 8003320:	2304      	movs	r3, #4
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e0c6      	b.n	80034b4 <UART_SetConfig+0x348>
 8003326:	2308      	movs	r3, #8
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e0c3      	b.n	80034b4 <UART_SetConfig+0x348>
 800332c:	2310      	movs	r3, #16
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e0c0      	b.n	80034b4 <UART_SetConfig+0x348>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a44      	ldr	r2, [pc, #272]	; (8003448 <UART_SetConfig+0x2dc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d125      	bne.n	8003388 <UART_SetConfig+0x21c>
 800333c:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <UART_SetConfig+0x2cc>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334a:	d017      	beq.n	800337c <UART_SetConfig+0x210>
 800334c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003350:	d817      	bhi.n	8003382 <UART_SetConfig+0x216>
 8003352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003356:	d00b      	beq.n	8003370 <UART_SetConfig+0x204>
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d811      	bhi.n	8003382 <UART_SetConfig+0x216>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <UART_SetConfig+0x1fe>
 8003362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003366:	d006      	beq.n	8003376 <UART_SetConfig+0x20a>
 8003368:	e00b      	b.n	8003382 <UART_SetConfig+0x216>
 800336a:	2300      	movs	r3, #0
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e0a1      	b.n	80034b4 <UART_SetConfig+0x348>
 8003370:	2302      	movs	r3, #2
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e09e      	b.n	80034b4 <UART_SetConfig+0x348>
 8003376:	2304      	movs	r3, #4
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e09b      	b.n	80034b4 <UART_SetConfig+0x348>
 800337c:	2308      	movs	r3, #8
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e098      	b.n	80034b4 <UART_SetConfig+0x348>
 8003382:	2310      	movs	r3, #16
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e095      	b.n	80034b4 <UART_SetConfig+0x348>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2f      	ldr	r2, [pc, #188]	; (800344c <UART_SetConfig+0x2e0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d125      	bne.n	80033de <UART_SetConfig+0x272>
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <UART_SetConfig+0x2cc>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800339c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a0:	d017      	beq.n	80033d2 <UART_SetConfig+0x266>
 80033a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a6:	d817      	bhi.n	80033d8 <UART_SetConfig+0x26c>
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d00b      	beq.n	80033c6 <UART_SetConfig+0x25a>
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b2:	d811      	bhi.n	80033d8 <UART_SetConfig+0x26c>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <UART_SetConfig+0x254>
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d006      	beq.n	80033cc <UART_SetConfig+0x260>
 80033be:	e00b      	b.n	80033d8 <UART_SetConfig+0x26c>
 80033c0:	2301      	movs	r3, #1
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e076      	b.n	80034b4 <UART_SetConfig+0x348>
 80033c6:	2302      	movs	r3, #2
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e073      	b.n	80034b4 <UART_SetConfig+0x348>
 80033cc:	2304      	movs	r3, #4
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e070      	b.n	80034b4 <UART_SetConfig+0x348>
 80033d2:	2308      	movs	r3, #8
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e06d      	b.n	80034b4 <UART_SetConfig+0x348>
 80033d8:	2310      	movs	r3, #16
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e06a      	b.n	80034b4 <UART_SetConfig+0x348>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <UART_SetConfig+0x2e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d138      	bne.n	800345a <UART_SetConfig+0x2ee>
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <UART_SetConfig+0x2cc>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033f6:	d017      	beq.n	8003428 <UART_SetConfig+0x2bc>
 80033f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033fc:	d82a      	bhi.n	8003454 <UART_SetConfig+0x2e8>
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	d00b      	beq.n	800341c <UART_SetConfig+0x2b0>
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d824      	bhi.n	8003454 <UART_SetConfig+0x2e8>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <UART_SetConfig+0x2aa>
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d006      	beq.n	8003422 <UART_SetConfig+0x2b6>
 8003414:	e01e      	b.n	8003454 <UART_SetConfig+0x2e8>
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e04b      	b.n	80034b4 <UART_SetConfig+0x348>
 800341c:	2302      	movs	r3, #2
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e048      	b.n	80034b4 <UART_SetConfig+0x348>
 8003422:	2304      	movs	r3, #4
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e045      	b.n	80034b4 <UART_SetConfig+0x348>
 8003428:	2308      	movs	r3, #8
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e042      	b.n	80034b4 <UART_SetConfig+0x348>
 800342e:	bf00      	nop
 8003430:	efff69f3 	.word	0xefff69f3
 8003434:	40011000 	.word	0x40011000
 8003438:	40023800 	.word	0x40023800
 800343c:	40004400 	.word	0x40004400
 8003440:	40004800 	.word	0x40004800
 8003444:	40004c00 	.word	0x40004c00
 8003448:	40005000 	.word	0x40005000
 800344c:	40011400 	.word	0x40011400
 8003450:	40007800 	.word	0x40007800
 8003454:	2310      	movs	r3, #16
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e02c      	b.n	80034b4 <UART_SetConfig+0x348>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a72      	ldr	r2, [pc, #456]	; (8003628 <UART_SetConfig+0x4bc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d125      	bne.n	80034b0 <UART_SetConfig+0x344>
 8003464:	4b71      	ldr	r3, [pc, #452]	; (800362c <UART_SetConfig+0x4c0>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800346e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003472:	d017      	beq.n	80034a4 <UART_SetConfig+0x338>
 8003474:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003478:	d817      	bhi.n	80034aa <UART_SetConfig+0x33e>
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	d00b      	beq.n	8003498 <UART_SetConfig+0x32c>
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	d811      	bhi.n	80034aa <UART_SetConfig+0x33e>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <UART_SetConfig+0x326>
 800348a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348e:	d006      	beq.n	800349e <UART_SetConfig+0x332>
 8003490:	e00b      	b.n	80034aa <UART_SetConfig+0x33e>
 8003492:	2300      	movs	r3, #0
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e00d      	b.n	80034b4 <UART_SetConfig+0x348>
 8003498:	2302      	movs	r3, #2
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e00a      	b.n	80034b4 <UART_SetConfig+0x348>
 800349e:	2304      	movs	r3, #4
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e007      	b.n	80034b4 <UART_SetConfig+0x348>
 80034a4:	2308      	movs	r3, #8
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e004      	b.n	80034b4 <UART_SetConfig+0x348>
 80034aa:	2310      	movs	r3, #16
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e001      	b.n	80034b4 <UART_SetConfig+0x348>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034bc:	d15b      	bne.n	8003576 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d828      	bhi.n	8003516 <UART_SetConfig+0x3aa>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x360>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003517 	.word	0x08003517
 80034dc:	08003507 	.word	0x08003507
 80034e0:	08003517 	.word	0x08003517
 80034e4:	08003517 	.word	0x08003517
 80034e8:	08003517 	.word	0x08003517
 80034ec:	0800350f 	.word	0x0800350f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe fba8 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 80034f4:	61b8      	str	r0, [r7, #24]
        break;
 80034f6:	e013      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7fe fbb8 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 80034fc:	61b8      	str	r0, [r7, #24]
        break;
 80034fe:	e00f      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <UART_SetConfig+0x4c4>)
 8003502:	61bb      	str	r3, [r7, #24]
        break;
 8003504:	e00c      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe fa8d 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 800350a:	61b8      	str	r0, [r7, #24]
        break;
 800350c:	e008      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e004      	b.n	8003520 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	77bb      	strb	r3, [r7, #30]
        break;
 800351e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d074      	beq.n	8003610 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	d916      	bls.n	8003570 <UART_SetConfig+0x404>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d212      	bcs.n	8003570 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f023 030f 	bic.w	r3, r3, #15
 8003552:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	b29a      	uxth	r2, r3
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	4313      	orrs	r3, r2
 8003564:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	89fa      	ldrh	r2, [r7, #14]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	e04f      	b.n	8003610 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	77bb      	strb	r3, [r7, #30]
 8003574:	e04c      	b.n	8003610 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d828      	bhi.n	80035ce <UART_SetConfig+0x462>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0x418>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035b9 	.word	0x080035b9
 8003590:	080035cf 	.word	0x080035cf
 8003594:	080035bf 	.word	0x080035bf
 8003598:	080035cf 	.word	0x080035cf
 800359c:	080035cf 	.word	0x080035cf
 80035a0:	080035cf 	.word	0x080035cf
 80035a4:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7fe fb4c 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 80035ac:	61b8      	str	r0, [r7, #24]
        break;
 80035ae:	e013      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b0:	f7fe fb5c 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 80035b4:	61b8      	str	r0, [r7, #24]
        break;
 80035b6:	e00f      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <UART_SetConfig+0x4c4>)
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e00c      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fa31 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80035c2:	61b8      	str	r0, [r7, #24]
        break;
 80035c4:	e008      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e004      	b.n	80035d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	77bb      	strb	r3, [r7, #30]
        break;
 80035d6:	bf00      	nop
    }

    if (pclk != 0U)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	085a      	lsrs	r2, r3, #1
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	441a      	add	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b0f      	cmp	r3, #15
 80035f6:	d909      	bls.n	800360c <UART_SetConfig+0x4a0>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fe:	d205      	bcs.n	800360c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	e001      	b.n	8003610 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800361c:	7fbb      	ldrb	r3, [r7, #30]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40007c00 	.word	0x40007c00
 800362c:	40023800 	.word	0x40023800
 8003630:	00f42400 	.word	0x00f42400

08003634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01a      	beq.n	800374a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003732:	d10a      	bne.n	800374a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b098      	sub	sp, #96	; 0x60
 800377c:	af02      	add	r7, sp, #8
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003788:	f7fd faaa 	bl	8000ce0 <HAL_GetTick>
 800378c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d12e      	bne.n	80037fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800379c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f88c 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d021      	beq.n	80037fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ca:	653b      	str	r3, [r7, #80]	; 0x50
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
 80037d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e6      	bne.n	80037b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e062      	b.n	80038c0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d149      	bne.n	800389c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f856 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03c      	beq.n	800389c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	623b      	str	r3, [r7, #32]
   return(result);
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	633b      	str	r3, [r7, #48]	; 0x30
 8003842:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e6      	bne.n	8003822 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3308      	adds	r3, #8
 800385a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60fb      	str	r3, [r7, #12]
   return(result);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3308      	adds	r3, #8
 8003872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003874:	61fa      	str	r2, [r7, #28]
 8003876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	617b      	str	r3, [r7, #20]
   return(result);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e011      	b.n	80038c0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3758      	adds	r7, #88	; 0x58
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d8:	e04f      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e0:	d04b      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fd f9fd 	bl	8000ce0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e04e      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d037      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d034      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d031      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d110      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f838 	bl	80039a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2208      	movs	r2, #8
 8003936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e029      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003954:	d111      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800395e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f81e 	bl	80039a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d0a0      	beq.n	80038da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b095      	sub	sp, #84	; 0x54
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	643b      	str	r3, [r7, #64]	; 0x40
 80039ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e6      	bne.n	80039aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3308      	adds	r3, #8
 80039fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d118      	bne.n	8003a4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	613b      	str	r3, [r7, #16]
   return(result);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a5e:	bf00      	nop
 8003a60:	3754      	adds	r7, #84	; 0x54
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <ugv_servoInitServo>:
#include "ugv_servo.h"


void ugv_servoInitServo(ugvServo_t *servoM){
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(servoM->timerInstance, servoM->timerCh);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	891b      	ldrh	r3, [r3, #8]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7fe fde9 	bl	8002654 <HAL_TIM_PWM_Start>

	servoM->maxPeriod = (int) (servoM->timerARR)*(servoM->maxPulse/servoM->timerPeriod);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	895b      	ldrh	r3, [r3, #10]
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	ed93 6a04 	vldr	s12, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	edd3 6a05 	vldr	s13, [r3, #20]
 8003a9a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa6:	ee17 2a90 	vmov	r2, s15
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	61da      	str	r2, [r3, #28]
	servoM->minPeriod = (int) (servoM->timerARR)*(servoM->minPulse/servoM->timerPeriod);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	895b      	ldrh	r3, [r3, #10]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	ed93 6a03 	vldr	s12, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	edd3 6a05 	vldr	s13, [r3, #20]
 8003ac6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad2:	ee17 2a90 	vmov	r2, s15
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	619a      	str	r2, [r3, #24]

	ugv_servoSetAngle(servoM, servoM->travelOffset);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f804 	bl	8003af2 <ugv_servoSetAngle>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <ugv_servoSetAngle>:
/**
 *	Make the servo move to a specific angle
 * @param s
 * @param angle
 */
void ugv_servoSetAngle(ugvServo_t *servoM, float angle) {
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	ed87 0a00 	vstr	s0, [r7]
	float setAngle = angle + servoM->travelOffset;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003b04:	ed97 7a00 	vldr	s14, [r7]
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((setAngle) > servoM->maxLimit) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003b16:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	dd2d      	ble.n	8003b80 <ugv_servoSetAngle+0x8e>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
				* (servoM->maxPeriod - servoM->minPeriod))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	ee07 3a90 	vmov	s15, r3
 8003b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b3c:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b56:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b62:	ee17 2a90 	vmov	r2, s15
 8003b66:	601a      	str	r2, [r3, #0]

		servoM->setPointAngle = servoM->maxLimit - servoM->travelOffset;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	edc3 7a08 	vstr	s15, [r3, #32]
				* (servoM->maxPeriod - servoM->minPeriod))
				/ (servoM->travelAngle)) + servoM->minPeriod);
		servoM->setPointAngle = angle;
	}

}
 8003b7e:	e054      	b.n	8003c2a <ugv_servoSetAngle+0x138>
	} else if ((setAngle) < servoM->minLimit) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003b86:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	d526      	bpl.n	8003be2 <ugv_servoSetAngle+0xf0>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
				* (servoM->maxPeriod - servoM->minPeriod))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bac:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd2:	ee17 2a90 	vmov	r2, s15
 8003bd6:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = servoM->minLimit;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	e023      	b.n	8003c2a <ugv_servoSetAngle+0x138>
				* (servoM->maxPeriod - servoM->minPeriod))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bf8:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c12:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((setAngle)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1e:	ee17 2a90 	vmov	r2, s15
 8003c22:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = angle;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <memset>:
 8003c36:	4402      	add	r2, r0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d100      	bne.n	8003c40 <memset+0xa>
 8003c3e:	4770      	bx	lr
 8003c40:	f803 1b01 	strb.w	r1, [r3], #1
 8003c44:	e7f9      	b.n	8003c3a <memset+0x4>
	...

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4d0d      	ldr	r5, [pc, #52]	; (8003c80 <__libc_init_array+0x38>)
 8003c4c:	4c0d      	ldr	r4, [pc, #52]	; (8003c84 <__libc_init_array+0x3c>)
 8003c4e:	1b64      	subs	r4, r4, r5
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	2600      	movs	r6, #0
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	4d0b      	ldr	r5, [pc, #44]	; (8003c88 <__libc_init_array+0x40>)
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	; (8003c8c <__libc_init_array+0x44>)
 8003c5c:	f000 f818 	bl	8003c90 <_init>
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	2600      	movs	r6, #0
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08003cc8 	.word	0x08003cc8
 8003c84:	08003cc8 	.word	0x08003cc8
 8003c88:	08003cc8 	.word	0x08003cc8
 8003c8c:	08003ccc 	.word	0x08003ccc

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
