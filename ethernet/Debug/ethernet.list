
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010670  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f70  08010870  08010870  00020870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137e0  080137e0  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  080137e0  080137e0  000237e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137e8  080137e8  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137e8  080137e8  000237e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137ec  080137ec  000237ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080137f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801387c  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801391c  0003012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a528  200001cc  080139bc  000301cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000a6f4  080139bc  0003a6f4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001a282  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004f63  00000000  00000000  0004a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001350  00000000  00000000  0004f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000f53  00000000  00000000  00050778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000333e8  00000000  00000000  000516cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002139d  00000000  00000000  00084ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001056f0  00000000  00000000  000a5e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005594  00000000  00000000  001ab540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  001b0ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	08010858 	.word	0x08010858

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	08010858 	.word	0x08010858

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e6:	f3bf 8f6f 	isb	sy
}
 80005ea:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <SCB_EnableICache+0x48>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <SCB_EnableICache+0x48>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <SCB_EnableICache+0x48>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SCB_EnableDCache+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <SCB_EnableDCache+0x84>)
 800063e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000642:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	0b5b      	lsrs	r3, r3, #13
 8000648:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800064c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	08db      	lsrs	r3, r3, #3
 8000652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000656:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	015a      	lsls	r2, r3, #5
 800065c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000660:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000666:	4911      	ldr	r1, [pc, #68]	; (80006ac <SCB_EnableDCache+0x84>)
 8000668:	4313      	orrs	r3, r2
 800066a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1ef      	bne.n	8000658 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	60fa      	str	r2, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e5      	bne.n	800064e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000682:	f3bf 8f4f 	dsb	sy
}
 8000686:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <SCB_EnableDCache+0x84>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <SCB_EnableDCache+0x84>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000692:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
}
 8000698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069a:	f3bf 8f6f 	isb	sy
}
 800069e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 f95a 	bl	800096c <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b8:	f7ff ff90 	bl	80005dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006bc:	f7ff ffb4 	bl	8000628 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fbe2 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f810 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f87c 	bl	80007c4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006cc:	f002 fdb6 	bl	800323c <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <main+0x34>)
 80006d2:	f002 ff55 	bl	8003580 <ethernetif_input>
	  ethernet_link_check_state(&gnetif);
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <main+0x34>)
 80006d8:	f003 f8c8 	bl	800386c <ethernet_link_check_state>

	  sys_check_timeouts();
 80006dc:	f00a fa30 	bl	800ab40 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006e0:	e7f6      	b.n	80006d0 <main+0x20>
 80006e2:	bf00      	nop
 80006e4:	200001f0 	.word	0x200001f0

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00f fa01 	bl	800fafe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <SystemClock_Config+0xd4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <SystemClock_Config+0xd8>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000754:	23d8      	movs	r3, #216	; 0xd8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f002 f8bd 	bl	80028e8 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000774:	f000 f928 	bl	80009c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000778:	f002 f866 	bl	8002848 <HAL_PWREx_EnableOverDrive>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000782:	f000 f921 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2107      	movs	r1, #7
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fb4d 	bl	8002e44 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007b0:	f000 f90a 	bl	80009c8 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	; 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b5e      	ldr	r3, [pc, #376]	; (8000954 <MX_GPIO_Init+0x190>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a5d      	ldr	r2, [pc, #372]	; (8000954 <MX_GPIO_Init+0x190>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b5b      	ldr	r3, [pc, #364]	; (8000954 <MX_GPIO_Init+0x190>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b58      	ldr	r3, [pc, #352]	; (8000954 <MX_GPIO_Init+0x190>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a57      	ldr	r2, [pc, #348]	; (8000954 <MX_GPIO_Init+0x190>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b55      	ldr	r3, [pc, #340]	; (8000954 <MX_GPIO_Init+0x190>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b52      	ldr	r3, [pc, #328]	; (8000954 <MX_GPIO_Init+0x190>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a51      	ldr	r2, [pc, #324]	; (8000954 <MX_GPIO_Init+0x190>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b4f      	ldr	r3, [pc, #316]	; (8000954 <MX_GPIO_Init+0x190>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b4c      	ldr	r3, [pc, #304]	; (8000954 <MX_GPIO_Init+0x190>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a4b      	ldr	r2, [pc, #300]	; (8000954 <MX_GPIO_Init+0x190>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b49      	ldr	r3, [pc, #292]	; (8000954 <MX_GPIO_Init+0x190>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b46      	ldr	r3, [pc, #280]	; (8000954 <MX_GPIO_Init+0x190>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a45      	ldr	r2, [pc, #276]	; (8000954 <MX_GPIO_Init+0x190>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b43      	ldr	r3, [pc, #268]	; (8000954 <MX_GPIO_Init+0x190>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000852:	4b40      	ldr	r3, [pc, #256]	; (8000954 <MX_GPIO_Init+0x190>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a3f      	ldr	r2, [pc, #252]	; (8000954 <MX_GPIO_Init+0x190>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <MX_GPIO_Init+0x190>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000870:	4839      	ldr	r0, [pc, #228]	; (8000958 <MX_GPIO_Init+0x194>)
 8000872:	f001 ffcf 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4838      	ldr	r0, [pc, #224]	; (800095c <MX_GPIO_Init+0x198>)
 800087c:	f001 ffca 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4832      	ldr	r0, [pc, #200]	; (8000960 <MX_GPIO_Init+0x19c>)
 8000898:	f001 fe10 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800089c:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4828      	ldr	r0, [pc, #160]	; (8000958 <MX_GPIO_Init+0x194>)
 80008b6:	f001 fe01 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008cc:	2307      	movs	r3, #7
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_GPIO_Init+0x1a0>)
 80008d8:	f001 fdf0 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	481a      	ldr	r0, [pc, #104]	; (800095c <MX_GPIO_Init+0x198>)
 80008f4:	f001 fde2 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4814      	ldr	r0, [pc, #80]	; (800095c <MX_GPIO_Init+0x198>)
 800090c:	f001 fdd6 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000910:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000922:	230a      	movs	r3, #10
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_GPIO_Init+0x1a4>)
 800092e:	f001 fdc5 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <MX_GPIO_Init+0x1a4>)
 8000948:	f001 fdb8 	bl	80024bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094c:	bf00      	nop
 800094e:	3730      	adds	r7, #48	; 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40020400 	.word	0x40020400
 800095c:	40021800 	.word	0x40021800
 8000960:	40020800 	.word	0x40020800
 8000964:	40020c00 	.word	0x40020c00
 8000968:	40020000 	.word	0x40020000

0800096c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800097e:	f000 fbf3 	bl	8001168 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000982:	2301      	movs	r3, #1
 8000984:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000986:	2300      	movs	r3, #0
 8000988:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MPU_Config+0x58>)
 800098c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800098e:	230d      	movs	r3, #13
 8000990:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000992:	2300      	movs	r3, #0
 8000994:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000996:	2301      	movs	r3, #1
 8000998:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800099a:	2303      	movs	r3, #3
 800099c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800099e:	2301      	movs	r3, #1
 80009a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009a2:	2301      	movs	r3, #1
 80009a4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009ae:	463b      	mov	r3, r7
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fc11 	bl	80011d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009b6:	2004      	movs	r0, #4
 80009b8:	f000 fbee 	bl	8001198 <HAL_MPU_Enable>

}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2007c000 	.word	0x2007c000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x44>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_MspInit+0x44>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_MspInit+0x44>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x44>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_MspInit+0x44>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_MspInit+0x44>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 fa54 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_kill>:

int _kill(int pid, int sig)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_kill+0x20>)
 8000a8c:	2216      	movs	r2, #22
 8000a8e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	2000a6e4 	.word	0x2000a6e4

08000aa4 <_exit>:

void _exit (int status)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ffe5 	bl	8000a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ab6:	e7fe      	b.n	8000ab6 <_exit+0x12>

08000ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e00a      	b.n	8000ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aca:	f3af 8000 	nop.w
 8000ace:	4601      	mov	r1, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf0      	blt.n	8000aca <_read+0x12>
  }

  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <_write+0x12>
  }
  return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d205      	bcs.n	8000bd0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <_sbrk+0x6c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	371c      	adds	r7, #28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20080000 	.word	0x20080000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	200001e8 	.word	0x200001e8
 8000bfc:	2000a6f8 	.word	0x2000a6f8
 8000c00:	2000a6e4 	.word	0x2000a6e4

08000c04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2c:	f7ff ffea 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f00e ffa1 	bl	800fb9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fd29 	bl	80006b0 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000c6c:	080137f0 	.word	0x080137f0
  ldr r2, =_sbss
 8000c70:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000c74:	2000a6f4 	.word	0x2000a6f4

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>

08000c7a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00b      	beq.n	8000ca2 <LAN8742_RegisterBusIO+0x28>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <LAN8742_RegisterBusIO+0x28>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <LAN8742_RegisterBusIO+0x28>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca6:	e014      	b.n	8000cd2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d139      	bne.n	8000d6e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e01c      	b.n	8000d4e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f107 020c 	add.w	r2, r7, #12
 8000d1c:	2112      	movs	r1, #18
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	4798      	blx	r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da03      	bge.n	8000d30 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d28:	f06f 0304 	mvn.w	r3, #4
 8000d2c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d2e:	e00b      	b.n	8000d48 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d105      	bne.n	8000d48 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
         break;
 8000d46:	e005      	b.n	8000d54 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b1f      	cmp	r3, #31
 8000d52:	d9df      	bls.n	8000d14 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b1f      	cmp	r3, #31
 8000d5a:	d902      	bls.n	8000d62 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d5c:	f06f 0302 	mvn.w	r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 }
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6810      	ldr	r0, [r2, #0]
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	2101      	movs	r1, #1
 8000d92:	4798      	blx	r3
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da02      	bge.n	8000da0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d9a:	f06f 0304 	mvn.w	r3, #4
 8000d9e:	e06e      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6810      	ldr	r0, [r2, #0]
 8000da8:	f107 020c 	add.w	r2, r7, #12
 8000dac:	2101      	movs	r1, #1
 8000dae:	4798      	blx	r3
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	da02      	bge.n	8000dbc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000db6:	f06f 0304 	mvn.w	r3, #4
 8000dba:	e060      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e059      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	6810      	ldr	r0, [r2, #0]
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4798      	blx	r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	da02      	bge.n	8000de6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000de0:	f06f 0304 	mvn.w	r3, #4
 8000de4:	e04b      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d11b      	bne.n	8000e28 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <LAN8742_GetLinkState+0x90>
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e04:	2302      	movs	r3, #2
 8000e06:	e03a      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e033      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e20:	2304      	movs	r3, #4
 8000e22:	e02c      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e24:	2305      	movs	r3, #5
 8000e26:	e02a      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6810      	ldr	r0, [r2, #0]
 8000e30:	f107 020c 	add.w	r2, r7, #12
 8000e34:	211f      	movs	r1, #31
 8000e36:	4798      	blx	r3
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	da02      	bge.n	8000e44 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e3e:	f06f 0304 	mvn.w	r3, #4
 8000e42:	e01c      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	e015      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f003 031c 	and.w	r3, r3, #28
 8000e58:	2b18      	cmp	r3, #24
 8000e5a:	d101      	bne.n	8000e60 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e00e      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 031c 	and.w	r3, r3, #28
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d101      	bne.n	8000e6e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e007      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f003 031c 	and.w	r3, r3, #28
 8000e74:	2b14      	cmp	r3, #20
 8000e76:	d101      	bne.n	8000e7c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e000      	b.n	8000e7e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e7c:	2305      	movs	r3, #5
    }
  }
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x28>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x28>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f931 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fd96 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f93b 	bl	800114e <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef0:	f000 f911 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	200001ec 	.word	0x200001ec

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200001ec 	.word	0x200001ec

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <__NVIC_SetPriorityGrouping+0x40>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x40>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00
 8000fe0:	05fa0000 	.word	0x05fa0000

08000fe4 <__NVIC_GetPriorityGrouping>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_SetPriority>:
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff47 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5c 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800116c:	f3bf 8f5f 	dmb	sy
}
 8001170:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_MPU_Disable+0x28>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_MPU_Disable+0x28>)
 8001178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_MPU_Disable+0x2c>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	e000ed90 	.word	0xe000ed90

08001198 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_MPU_Enable+0x38>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_MPU_Enable+0x3c>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_MPU_Enable+0x3c>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011b6:	f3bf 8f4f 	dsb	sy
}
 80011ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011bc:	f3bf 8f6f 	isb	sy
}
 80011c0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed90 	.word	0xe000ed90
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	785a      	ldrb	r2, [r3, #1]
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_MPU_ConfigRegion+0x7c>)
 80011e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_MPU_ConfigRegion+0x7c>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_MPU_ConfigRegion+0x7c>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011f4:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_MPU_ConfigRegion+0x7c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7b1b      	ldrb	r3, [r3, #12]
 8001200:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7adb      	ldrb	r3, [r3, #11]
 8001206:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001210:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b5b      	ldrb	r3, [r3, #13]
 8001216:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001218:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7b9b      	ldrb	r3, [r3, #14]
 800121e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001220:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7bdb      	ldrb	r3, [r3, #15]
 8001226:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001228:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7a5b      	ldrb	r3, [r3, #9]
 800122e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001230:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7a1b      	ldrb	r3, [r3, #8]
 8001236:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001238:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001242:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001244:	6113      	str	r3, [r2, #16]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed90 	.word	0xe000ed90

08001258 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e086      	b.n	8001378 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2223      	movs	r2, #35	; 0x23
 8001278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f002 f9ef 	bl	8003660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <HAL_ETH_Init+0x128>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a3e      	ldr	r2, [pc, #248]	; (8001380 <HAL_ETH_Init+0x128>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <HAL_ETH_Init+0x128>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_ETH_Init+0x12c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a39      	ldr	r2, [pc, #228]	; (8001384 <HAL_ETH_Init+0x12c>)
 80012a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_ETH_Init+0x12c>)
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4935      	ldr	r1, [pc, #212]	; (8001384 <HAL_ETH_Init+0x12c>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_ETH_Init+0x12c>)
 80012b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff fe34 	bl	8000f3c <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d6:	e011      	b.n	80012fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d8:	f7ff fe30 	bl	8000f3c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e6:	d909      	bls.n	80012fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2204      	movs	r2, #4
 80012ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	22e0      	movs	r2, #224	; 0xe0
 80012f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e03d      	b.n	8001378 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1e4      	bne.n	80012d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fe18 	bl	8001f44 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fec3 	bl	80020a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 ff19 	bl	8002152 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	461a      	mov	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fe81 	bl	8002030 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_ETH_Init+0x130>)
 800134c:	430b      	orrs	r3, r1
 800134e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001362:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2210      	movs	r2, #16
 8001372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	00020060 	.word	0x00020060

0800138c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800139a:	2b10      	cmp	r3, #16
 800139c:	d150      	bne.n	8001440 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2223      	movs	r2, #35	; 0x23
 80013a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2204      	movs	r2, #4
 80013aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f9f9 	bl	80017a4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0208 	orr.w	r2, r2, #8
 80013c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff fdc2 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fdaf 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fc3c 	bl	8001c7c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001432:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2223      	movs	r2, #35	; 0x23
 8001438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001458:	2b23      	cmp	r3, #35	; 0x23
 800145a:	d14a      	bne.n	80014f2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2223      	movs	r2, #35	; 0x23
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800147a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	f023 0302 	bic.w	r3, r3, #2
 800148e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001492:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff fd51 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fbde 	bl	8001c7c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0208 	bic.w	r2, r2, #8
 80014ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fd3b 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2210      	movs	r2, #16
 80014ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
  }
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d109      	bne.n	8001522 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07c      	b.n	800161c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001528:	2b23      	cmp	r3, #35	; 0x23
 800152a:	d176      	bne.n	800161a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800152c:	2200      	movs	r2, #0
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fe7d 	bl	8002230 <ETH_Prepare_Tx_Descriptors>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	f043 0202 	orr.w	r2, r3, #2
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e065      	b.n	800161c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001550:	f3bf 8f4f 	dsb	sy
}
 8001554:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3206      	adds	r2, #6
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	2b03      	cmp	r3, #3
 8001574:	d904      	bls.n	8001580 <HAL_ETH_Transmit+0x84>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	1f1a      	subs	r2, r3, #4
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3106      	adds	r1, #6
 800158c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001590:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001594:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001596:	f7ff fcd1 	bl	8000f3c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800159c:	e037      	b.n	800160e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d011      	beq.n	80015d4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	f043 0208 	orr.w	r2, r3, #8
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e023      	b.n	800161c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015da:	d018      	beq.n	800160e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015dc:	f7ff fcae 	bl	8000f3c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d302      	bcc.n	80015f2 <HAL_ETH_Transmit+0xf6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f8:	f043 0204 	orr.w	r2, r3, #4
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001608:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e006      	b.n	800161c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dbc3      	blt.n	800159e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
  }
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0a4      	b.n	800179a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001656:	2b23      	cmp	r3, #35	; 0x23
 8001658:	d001      	beq.n	800165e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e09d      	b.n	800179a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	3212      	adds	r2, #18
 800166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001674:	f1c3 0304 	rsb	r3, r3, #4
 8001678:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800167a:	e066      	b.n	800174a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <HAL_ETH_ReadData+0x88>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d03c      	beq.n	8001726 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016ce:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001700:	461a      	mov	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	b29b      	uxth	r3, r3
 8001706:	f002 f96d 	bl	80039e4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	441a      	add	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d902      	bls.n	8001738 <HAL_ETH_ReadData+0x114>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b04      	subs	r3, #4
 8001736:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	3212      	adds	r2, #18
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800174e:	2b00      	cmp	r3, #0
 8001750:	db06      	blt.n	8001760 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	429a      	cmp	r2, r3
 8001758:	d202      	bcs.n	8001760 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d08d      	beq.n	800167c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	441a      	add	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f815 	bl	80017a4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017b0:	2301      	movs	r3, #1
 80017b2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017b8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	3212      	adds	r2, #18
 80017c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ca:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017cc:	e042      	b.n	8001854 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d112      	bne.n	80017fc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 f8d2 	bl	8003984 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	74fb      	strb	r3, [r7, #19]
 80017ea:	e007      	b.n	80017fc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	461a      	mov	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	461a      	mov	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017fc:	7cfb      	ldrb	r3, [r7, #19]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d028      	beq.n	8001854 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <ETH_UpdateDescriptor+0x104>)
 8001810:	4313      	orrs	r3, r2
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	6053      	str	r3, [r2, #4]
 8001816:	e005      	b.n	8001824 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d902      	bls.n	8001842 <ETH_UpdateDescriptor+0x9e>
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	3b04      	subs	r3, #4
 8001840:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	3212      	adds	r2, #18
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	617b      	str	r3, [r7, #20]
      desccount--;
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	3b01      	subs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <ETH_UpdateDescriptor+0xbc>
 800185a:	7cfb      	ldrb	r3, [r7, #19]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1b6      	bne.n	80017ce <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	429a      	cmp	r2, r3
 8001868:	d01a      	beq.n	80018a0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3301      	adds	r3, #1
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001874:	f3bf 8f5f 	dmb	sy
}
 8001878:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6919      	ldr	r1, [r3, #16]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	18ca      	adds	r2, r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001892:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	80004000 	.word	0x80004000

080018ac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 031c 	and.w	r3, r3, #28
 80018c8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	02db      	lsls	r3, r3, #11
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0302 	bic.w	r3, r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80018fc:	f7ff fb1e 	bl	8000f3c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001902:	e00d      	b.n	8001920 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001904:	f7ff fb1a 	bl	8000f3c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001912:	d301      	bcc.n	8001918 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e010      	b.n	800193a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ec      	bne.n	8001904 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 031c 	and.w	r3, r3, #28
 800195e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	02db      	lsls	r3, r3, #11
 8001964:	b29b      	uxth	r3, r3
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	019b      	lsls	r3, r3, #6
 8001970:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	4313      	orrs	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800199c:	f7ff face 	bl	8000f3c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019a2:	e00d      	b.n	80019c0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80019a4:	f7ff faca 	bl	8000f3c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b2:	d301      	bcc.n	80019b8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e009      	b.n	80019cc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ec      	bne.n	80019a4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0e6      	b.n	8001bb6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00b      	b.n	8001bee <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d105      	bne.n	8001bec <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f870 	bl	8001cc8 <ETH_SetMACConfig>

    return HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e000      	b.n	8001bee <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
  }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 031c 	bic.w	r3, r3, #28
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c10:	f001 fb08 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8001c14:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d804      	bhi.n	8001c28 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e019      	b.n	8001c5c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d204      	bcs.n	8001c3a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f043 030c 	orr.w	r3, r3, #12
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e010      	b.n	8001c5c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d90c      	bls.n	8001c5c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d804      	bhi.n	8001c54 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e003      	b.n	8001c5c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	611a      	str	r2, [r3, #16]
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	02160ebf 	.word	0x02160ebf
 8001c70:	03938700 	.word	0x03938700
 8001c74:	05f5e0ff 	.word	0x05f5e0ff
 8001c78:	08f0d17f 	.word	0x08f0d17f

08001c7c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c9e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f7ff f951 	bl	8000f54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cbc:	6193      	str	r3, [r2, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <ETH_SetMACConfig+0x164>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7b9b      	ldrb	r3, [r3, #14]
 8001ce6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	7c12      	ldrb	r2, [r2, #16]
 8001cec:	2a00      	cmp	r2, #0
 8001cee:	d102      	bne.n	8001cf6 <ETH_SetMACConfig+0x2e>
 8001cf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cf4:	e000      	b.n	8001cf8 <ETH_SetMACConfig+0x30>
 8001cf6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cf8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	7c52      	ldrb	r2, [r2, #17]
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d102      	bne.n	8001d08 <ETH_SetMACConfig+0x40>
 8001d02:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d06:	e000      	b.n	8001d0a <ETH_SetMACConfig+0x42>
 8001d08:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d0a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	7fdb      	ldrb	r3, [r3, #31]
 8001d16:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d18:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	7f92      	ldrb	r2, [r2, #30]
 8001d24:	2a00      	cmp	r2, #0
 8001d26:	d102      	bne.n	8001d2e <ETH_SetMACConfig+0x66>
 8001d28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2c:	e000      	b.n	8001d30 <ETH_SetMACConfig+0x68>
 8001d2e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	7f1b      	ldrb	r3, [r3, #28]
 8001d36:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d38:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	791b      	ldrb	r3, [r3, #4]
 8001d44:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d102      	bne.n	8001d58 <ETH_SetMACConfig+0x90>
 8001d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d56:	e000      	b.n	8001d5a <ETH_SetMACConfig+0x92>
 8001d58:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	7bdb      	ldrb	r3, [r3, #15]
 8001d60:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d62:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d70:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d72:	4313      	orrs	r3, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7ff f8e2 	bl	8000f54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d101      	bne.n	8001dbe <ETH_SetMACConfig+0xf6>
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	e000      	b.n	8001dc0 <ETH_SetMACConfig+0xf8>
 8001dbe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dc0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001dce:	2a01      	cmp	r2, #1
 8001dd0:	d101      	bne.n	8001dd6 <ETH_SetMACConfig+0x10e>
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	e000      	b.n	8001dd8 <ETH_SetMACConfig+0x110>
 8001dd6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dd8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001de0:	2a01      	cmp	r2, #1
 8001de2:	d101      	bne.n	8001de8 <ETH_SetMACConfig+0x120>
 8001de4:	2204      	movs	r2, #4
 8001de6:	e000      	b.n	8001dea <ETH_SetMACConfig+0x122>
 8001de8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001df2:	2a01      	cmp	r2, #1
 8001df4:	d101      	bne.n	8001dfa <ETH_SetMACConfig+0x132>
 8001df6:	2202      	movs	r2, #2
 8001df8:	e000      	b.n	8001dfc <ETH_SetMACConfig+0x134>
 8001dfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff f89d 	bl	8000f54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	619a      	str	r2, [r3, #24]
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	fd20810f 	.word	0xfd20810f

08001e30 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <ETH_SetDMAConfig+0x110>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7b1b      	ldrb	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <ETH_SetDMAConfig+0x2c>
 8001e56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e5a:	e000      	b.n	8001e5e <ETH_SetDMAConfig+0x2e>
 8001e5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7b5b      	ldrb	r3, [r3, #13]
 8001e62:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e64:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	7f52      	ldrb	r2, [r2, #29]
 8001e6a:	2a00      	cmp	r2, #0
 8001e6c:	d102      	bne.n	8001e74 <ETH_SetDMAConfig+0x44>
 8001e6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e72:	e000      	b.n	8001e76 <ETH_SetDMAConfig+0x46>
 8001e74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	7b9b      	ldrb	r3, [r3, #14]
 8001e7c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e7e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
 8001e8a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	7f9b      	ldrb	r3, [r3, #30]
 8001e92:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e94:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e9a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff f844 	bl	8000f54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	791b      	ldrb	r3, [r3, #4]
 8001ede:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ee4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001eea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ef0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ef8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001efa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f02:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f08:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f16:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff f815 	bl	8000f54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	f8de3f23 	.word	0xf8de3f23

08001f44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0a6      	sub	sp, #152	; 0x98
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f86:	2300      	movs	r3, #0
 8001f88:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fe7f 	bl	8001cc8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002000:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002004:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff05 	bl	8001e30 <ETH_SetDMAConfig>
}
 8002026:	bf00      	nop
 8002028:	3798      	adds	r7, #152	; 0x98
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3305      	adds	r3, #5
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	3204      	adds	r2, #4
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <ETH_MACAddressConfig+0x68>)
 8002052:	4413      	add	r3, r2
 8002054:	461a      	mov	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3303      	adds	r3, #3
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	061a      	lsls	r2, r3, #24
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3302      	adds	r3, #2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	4313      	orrs	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <ETH_MACAddressConfig+0x6c>)
 8002082:	4413      	add	r3, r2
 8002084:	461a      	mov	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6013      	str	r3, [r2, #0]
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40028040 	.word	0x40028040
 800209c:	40028044 	.word	0x40028044

080020a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e03e      	b.n	800212c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	3206      	adds	r2, #6
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d80c      	bhi.n	8002110 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68d9      	ldr	r1, [r3, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	461a      	mov	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e004      	b.n	800211a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3301      	adds	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d9bd      	bls.n	80020ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	611a      	str	r2, [r3, #16]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	e048      	b.n	80021f2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800219c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	3212      	adds	r2, #18
 80021be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d80c      	bhi.n	80021e2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6919      	ldr	r1, [r3, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	e004      	b.n	80021ec <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d9b3      	bls.n	8002160 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002222:	60da      	str	r2, [r3, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002230:	b480      	push	{r7}
 8002232:	b091      	sub	sp, #68	; 0x44
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3318      	adds	r3, #24
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800226e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002272:	d007      	beq.n	8002284 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002278:	3304      	adds	r3, #4
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002284:	2302      	movs	r3, #2
 8002286:	e111      	b.n	80024ac <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	3301      	adds	r3, #1
 800228c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4b86      	ldr	r3, [pc, #536]	; (80024b8 <ETH_Prepare_Tx_Descriptors+0x288>)
 800229e:	4013      	ands	r3, r2
 80022a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a2:	6852      	ldr	r2, [r2, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800230a:	e082      	b.n	8002412 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e005      	b.n	8002338 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233a:	3301      	adds	r3, #1
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002340:	2b03      	cmp	r3, #3
 8002342:	d902      	bls.n	800234a <ETH_Prepare_Tx_Descriptors+0x11a>
 8002344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002346:	3b04      	subs	r3, #4
 8002348:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002352:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800235c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002360:	d007      	beq.n	8002372 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002366:	3304      	adds	r3, #4
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d029      	beq.n	80023c6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002380:	2300      	movs	r3, #0
 8002382:	63bb      	str	r3, [r7, #56]	; 0x38
 8002384:	e019      	b.n	80023ba <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002386:	f3bf 8f5f 	dmb	sy
}
 800238a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239a:	3301      	adds	r3, #1
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800239e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d902      	bls.n	80023aa <ETH_Prepare_Tx_Descriptors+0x17a>
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	3b04      	subs	r3, #4
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80023b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b6:	3301      	adds	r3, #1
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3e1      	bcc.n	8002386 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	e072      	b.n	80024ac <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	3301      	adds	r3, #1
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <ETH_Prepare_Tx_Descriptors+0x288>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f2:	6852      	ldr	r2, [r2, #4]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	3301      	adds	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002400:	f3bf 8f5f 	dmb	sy
}
 8002404:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f47f af78 	bne.w	800230c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e005      	b.n	800243c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	6a3a      	ldr	r2, [r7, #32]
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002452:	f3bf 8f5f 	dmb	sy
}
 8002456:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246c:	3304      	adds	r3, #4
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002478:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800247a:	f3ef 8310 	mrs	r3, PRIMASK
 800247e:	613b      	str	r3, [r7, #16]
  return(result);
 8002480:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	2301      	movs	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f383 8810 	msr	PRIMASK, r3
}
 800248e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	4413      	add	r3, r2
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f383 8810 	msr	PRIMASK, r3
}
 80024a8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3744      	adds	r7, #68	; 0x44
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	ffffe000 	.word	0xffffe000

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e175      	b.n	80027c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8164 	bne.w	80027c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_GPIO_Init+0x56>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d017      	beq.n	80025b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80be 	beq.w	80027c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b66      	ldr	r3, [pc, #408]	; (80027e0 <HAL_GPIO_Init+0x324>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a65      	ldr	r2, [pc, #404]	; (80027e0 <HAL_GPIO_Init+0x324>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_GPIO_Init+0x324>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800265e:	4a61      	ldr	r2, [pc, #388]	; (80027e4 <HAL_GPIO_Init+0x328>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_GPIO_Init+0x32c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d037      	beq.n	80026fa <HAL_GPIO_Init+0x23e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a57      	ldr	r2, [pc, #348]	; (80027ec <HAL_GPIO_Init+0x330>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d031      	beq.n	80026f6 <HAL_GPIO_Init+0x23a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a56      	ldr	r2, [pc, #344]	; (80027f0 <HAL_GPIO_Init+0x334>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02b      	beq.n	80026f2 <HAL_GPIO_Init+0x236>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a55      	ldr	r2, [pc, #340]	; (80027f4 <HAL_GPIO_Init+0x338>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d025      	beq.n	80026ee <HAL_GPIO_Init+0x232>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a54      	ldr	r2, [pc, #336]	; (80027f8 <HAL_GPIO_Init+0x33c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01f      	beq.n	80026ea <HAL_GPIO_Init+0x22e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a53      	ldr	r2, [pc, #332]	; (80027fc <HAL_GPIO_Init+0x340>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d019      	beq.n	80026e6 <HAL_GPIO_Init+0x22a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_GPIO_Init+0x344>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_GPIO_Init+0x348>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00d      	beq.n	80026de <HAL_GPIO_Init+0x222>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_GPIO_Init+0x34c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <HAL_GPIO_Init+0x21e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_GPIO_Init+0x350>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_GPIO_Init+0x21a>
 80026d2:	2309      	movs	r3, #9
 80026d4:	e012      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026d6:	230a      	movs	r3, #10
 80026d8:	e010      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026da:	2308      	movs	r3, #8
 80026dc:	e00e      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026de:	2307      	movs	r3, #7
 80026e0:	e00c      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026e2:	2306      	movs	r3, #6
 80026e4:	e00a      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026e6:	2305      	movs	r3, #5
 80026e8:	e008      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026ea:	2304      	movs	r3, #4
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026ee:	2303      	movs	r3, #3
 80026f0:	e004      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026fa:	2300      	movs	r3, #0
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f002 0203 	and.w	r2, r2, #3
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	4093      	lsls	r3, r2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800270c:	4935      	ldr	r1, [pc, #212]	; (80027e4 <HAL_GPIO_Init+0x328>)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_GPIO_Init+0x354>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_GPIO_Init+0x354>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b32      	ldr	r3, [pc, #200]	; (8002810 <HAL_GPIO_Init+0x354>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a29      	ldr	r2, [pc, #164]	; (8002810 <HAL_GPIO_Init+0x354>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_GPIO_Init+0x354>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002792:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_GPIO_Init+0x354>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_GPIO_Init+0x354>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_GPIO_Init+0x354>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	f67f ae86 	bls.w	80024dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40013800 	.word	0x40013800
 80027e8:	40020000 	.word	0x40020000
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40020800 	.word	0x40020800
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40021400 	.word	0x40021400
 8002800:	40021800 	.word	0x40021800
 8002804:	40021c00 	.word	0x40021c00
 8002808:	40022000 	.word	0x40022000
 800280c:	40022400 	.word	0x40022400
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002876:	f7fe fb61 	bl	8000f3c <HAL_GetTick>
 800287a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800287c:	e009      	b.n	8002892 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800287e:	f7fe fb5d 	bl	8000f3c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800288c:	d901      	bls.n	8002892 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e022      	b.n	80028d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d1ee      	bne.n	800287e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ac:	f7fe fb46 	bl	8000f3c <HAL_GetTick>
 80028b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028b2:	e009      	b.n	80028c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028b4:	f7fe fb42 	bl	8000f3c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c2:	d901      	bls.n	80028c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e007      	b.n	80028d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028d4:	d1ee      	bne.n	80028b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40007000 	.word	0x40007000

080028e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e29b      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8087 	beq.w	8002a1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800290c:	4b96      	ldr	r3, [pc, #600]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b04      	cmp	r3, #4
 8002916:	d00c      	beq.n	8002932 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002918:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d112      	bne.n	800294a <HAL_RCC_OscConfig+0x62>
 8002924:	4b90      	ldr	r3, [pc, #576]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002930:	d10b      	bne.n	800294a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002932:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d06c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x130>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d168      	bne.n	8002a18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e275      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x7a>
 8002954:	4b84      	ldr	r3, [pc, #528]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a83      	ldr	r2, [pc, #524]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	e02e      	b.n	80029c0 <HAL_RCC_OscConfig+0xd8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x9c>
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7e      	ldr	r2, [pc, #504]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7b      	ldr	r2, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800297c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0xd8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0xc0>
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0xd8>
 80029a8:	4b6f      	ldr	r3, [pc, #444]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6e      	ldr	r2, [pc, #440]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6b      	ldr	r2, [pc, #428]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fab8 	bl	8000f3c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe fab4 	bl	8000f3c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e229      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xe8>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe faa4 	bl	8000f3c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe faa0 	bl	8000f3c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e215      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x110>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d069      	beq.n	8002afa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a26:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x190>
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1e9      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	493d      	ldr	r1, [pc, #244]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	e040      	b.n	8002afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d023      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fa56 	bl	8000f3c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe fa52 	bl	8000f3c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1c7      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4929      	ldr	r1, [pc, #164]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fa32 	bl	8000f3c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7fe fa2e 	bl	8000f3c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1a3      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d038      	beq.n	8002b78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d019      	beq.n	8002b42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fa0f 	bl	8000f3c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fa0b 	bl	8000f3c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e180      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x23a>
 8002b40:	e01a      	b.n	8002b78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_RCC_OscConfig+0x280>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe f9f5 	bl	8000f3c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fe f9f1 	bl	8000f3c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d903      	bls.n	8002b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e166      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
 8002b68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	4b92      	ldr	r3, [pc, #584]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a4 	beq.w	8002cce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b8c      	ldr	r3, [pc, #560]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b89      	ldr	r3, [pc, #548]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a88      	ldr	r2, [pc, #544]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b86      	ldr	r3, [pc, #536]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	4b83      	ldr	r3, [pc, #524]	; (8002dbc <HAL_RCC_OscConfig+0x4d4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bba:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <HAL_RCC_OscConfig+0x4d4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7f      	ldr	r2, [pc, #508]	; (8002dbc <HAL_RCC_OscConfig+0x4d4>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe f9b9 	bl	8000f3c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe f9b5 	bl	8000f3c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e12a      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be0:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x4d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x31a>
 8002bf4:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a6f      	ldr	r2, [pc, #444]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	e02d      	b.n	8002c5e <HAL_RCC_OscConfig+0x376>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x33c>
 8002c0a:	4b6b      	ldr	r3, [pc, #428]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a6a      	ldr	r2, [pc, #424]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
 8002c16:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a67      	ldr	r2, [pc, #412]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	e01c      	b.n	8002c5e <HAL_RCC_OscConfig+0x376>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x35e>
 8002c2c:	4b62      	ldr	r3, [pc, #392]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a61      	ldr	r2, [pc, #388]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
 8002c38:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a5e      	ldr	r2, [pc, #376]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x376>
 8002c46:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a5b      	ldr	r2, [pc, #364]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d015      	beq.n	8002c92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7fe f969 	bl	8000f3c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe f965 	bl	8000f3c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0d8      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCC_OscConfig+0x386>
 8002c90:	e014      	b.n	8002cbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7fe f953 	bl	8000f3c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe f94f 	bl	8000f3c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0c2      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	4b41      	ldr	r3, [pc, #260]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a3c      	ldr	r2, [pc, #240]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80ae 	beq.w	8002e34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d06d      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d14b      	bne.n	8002d84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f920 	bl	8000f3c <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe f91c 	bl	8000f3c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e091      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	491b      	ldr	r1, [pc, #108]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe f8ee 	bl	8000f3c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe f8ea 	bl	8000f3c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e05f      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x47c>
 8002d82:	e057      	b.n	8002e34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe f8d4 	bl	8000f3c <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe f8d0 	bl	8000f3c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e045      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4b0>
 8002db6:	e03d      	b.n	8002e34 <HAL_RCC_OscConfig+0x54c>
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_RCC_OscConfig+0x558>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d030      	beq.n	8002e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d129      	bne.n	8002e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d122      	bne.n	8002e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d119      	bne.n	8002e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d10f      	bne.n	8002e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800

08002e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0d0      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d910      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b67      	ldr	r3, [pc, #412]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 020f 	bic.w	r2, r3, #15
 8002e72:	4965      	ldr	r1, [pc, #404]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d040      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e073      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06b      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4936      	ldr	r1, [pc, #216]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f38:	f7fe f800 	bl	8000f3c <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fd fffc 	bl	8000f3c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e053      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d210      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f821 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	; (8003010 <HAL_RCC_ClockConfig+0x1cc>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1d0>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1d4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd ff5c 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023c00 	.word	0x40023c00
 800300c:	40023800 	.word	0x40023800
 8003010:	080135f0 	.word	0x080135f0
 8003014:	20000000 	.word	0x20000000
 8003018:	20000004 	.word	0x20000004

0800301c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b094      	sub	sp, #80	; 0x50
 8003022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	647b      	str	r3, [r7, #68]	; 0x44
 8003028:	2300      	movs	r3, #0
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800302c:	2300      	movs	r3, #0
 800302e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003034:	4b79      	ldr	r3, [pc, #484]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d00d      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x40>
 8003040:	2b08      	cmp	r3, #8
 8003042:	f200 80e1 	bhi.w	8003208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x34>
 800304a:	2b04      	cmp	r3, #4
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x3a>
 800304e:	e0db      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCC_GetSysClockFreq+0x204>)
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003054:	e0db      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003056:	4b72      	ldr	r3, [pc, #456]	; (8003220 <HAL_RCC_GetSysClockFreq+0x204>)
 8003058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800305a:	e0d8      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003064:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003066:	4b6d      	ldr	r3, [pc, #436]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d063      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	63bb      	str	r3, [r7, #56]	; 0x38
 800307c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
 8003086:	2300      	movs	r3, #0
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
 800308a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800308e:	4622      	mov	r2, r4
 8003090:	462b      	mov	r3, r5
 8003092:	f04f 0000 	mov.w	r0, #0
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	0159      	lsls	r1, r3, #5
 800309c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a0:	0150      	lsls	r0, r2, #5
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4621      	mov	r1, r4
 80030a8:	1a51      	subs	r1, r2, r1
 80030aa:	6139      	str	r1, [r7, #16]
 80030ac:	4629      	mov	r1, r5
 80030ae:	eb63 0301 	sbc.w	r3, r3, r1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c0:	4659      	mov	r1, fp
 80030c2:	018b      	lsls	r3, r1, #6
 80030c4:	4651      	mov	r1, sl
 80030c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ca:	4651      	mov	r1, sl
 80030cc:	018a      	lsls	r2, r1, #6
 80030ce:	4651      	mov	r1, sl
 80030d0:	ebb2 0801 	subs.w	r8, r2, r1
 80030d4:	4659      	mov	r1, fp
 80030d6:	eb63 0901 	sbc.w	r9, r3, r1
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ee:	4690      	mov	r8, r2
 80030f0:	4699      	mov	r9, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	eb18 0303 	adds.w	r3, r8, r3
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	462b      	mov	r3, r5
 80030fc:	eb49 0303 	adc.w	r3, r9, r3
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800310e:	4629      	mov	r1, r5
 8003110:	028b      	lsls	r3, r1, #10
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003118:	4621      	mov	r1, r4
 800311a:	028a      	lsls	r2, r1, #10
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003122:	2200      	movs	r2, #0
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
 8003126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800312c:	f7fd f8d8 	bl	80002e0 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003138:	e058      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	4618      	mov	r0, r3
 8003144:	4611      	mov	r1, r2
 8003146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800314a:	623b      	str	r3, [r7, #32]
 800314c:	2300      	movs	r3, #0
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	0159      	lsls	r1, r3, #5
 8003162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003166:	0150      	lsls	r0, r2, #5
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4641      	mov	r1, r8
 800316e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003172:	4649      	mov	r1, r9
 8003174:	eb63 0b01 	sbc.w	fp, r3, r1
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800318c:	ebb2 040a 	subs.w	r4, r2, sl
 8003190:	eb63 050b 	sbc.w	r5, r3, fp
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	00eb      	lsls	r3, r5, #3
 800319e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a2:	00e2      	lsls	r2, r4, #3
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	4643      	mov	r3, r8
 80031aa:	18e3      	adds	r3, r4, r3
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	464b      	mov	r3, r9
 80031b0:	eb45 0303 	adc.w	r3, r5, r3
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031c2:	4629      	mov	r1, r5
 80031c4:	028b      	lsls	r3, r1, #10
 80031c6:	4621      	mov	r1, r4
 80031c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031cc:	4621      	mov	r1, r4
 80031ce:	028a      	lsls	r2, r1, #10
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d6:	2200      	movs	r2, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	61fa      	str	r2, [r7, #28]
 80031dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e0:	f7fd f87e 	bl	80002e0 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4613      	mov	r3, r2
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	3301      	adds	r3, #1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80031fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003206:	e002      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetSysClockFreq+0x204>)
 800320a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800320c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003210:	4618      	mov	r0, r3
 8003212:	3750      	adds	r7, #80	; 0x50
 8003214:	46bd      	mov	sp, r7
 8003216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	00f42400 	.word	0x00f42400

08003224 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_GetHCLKFreq+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000000 	.word	0x20000000

0800323c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003242:	f000 fc3f 	bl	8003ac4 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <MX_LWIP_Init+0x54>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <MX_LWIP_Init+0x58>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <MX_LWIP_Init+0x5c>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <MX_LWIP_Init+0x60>)
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <MX_LWIP_Init+0x64>)
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	2300      	movs	r3, #0
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <MX_LWIP_Init+0x5c>)
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <MX_LWIP_Init+0x58>)
 8003268:	4909      	ldr	r1, [pc, #36]	; (8003290 <MX_LWIP_Init+0x54>)
 800326a:	480e      	ldr	r0, [pc, #56]	; (80032a4 <MX_LWIP_Init+0x68>)
 800326c:	f001 f916 	bl	800449c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003270:	480c      	ldr	r0, [pc, #48]	; (80032a4 <MX_LWIP_Init+0x68>)
 8003272:	f001 facd 	bl	8004810 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003276:	480b      	ldr	r0, [pc, #44]	; (80032a4 <MX_LWIP_Init+0x68>)
 8003278:	f001 fada 	bl	8004830 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800327c:	490a      	ldr	r1, [pc, #40]	; (80032a8 <MX_LWIP_Init+0x6c>)
 800327e:	4809      	ldr	r0, [pc, #36]	; (80032a4 <MX_LWIP_Init+0x68>)
 8003280:	f001 fbdc 	bl	8004a3c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003284:	4807      	ldr	r0, [pc, #28]	; (80032a4 <MX_LWIP_Init+0x68>)
 8003286:	f008 fcd7 	bl	800bc38 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000228 	.word	0x20000228
 8003294:	2000022c 	.word	0x2000022c
 8003298:	20000230 	.word	0x20000230
 800329c:	0800f689 	.word	0x0800f689
 80032a0:	080035c1 	.word	0x080035c1
 80032a4:	200001f0 	.word	0x200001f0
 80032a8:	080032ad 	.word	0x080032ad

080032ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <SCB_InvalidateDCache_by_Addr>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80032d2:	2320      	movs	r3, #32
 80032d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80032d6:	f3bf 8f4f 	dsb	sy
}
 80032da:	bf00      	nop
    while (op_size > 0) {
 80032dc:	e00b      	b.n	80032f6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <SCB_InvalidateDCache_by_Addr+0x54>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	dcf0      	bgt.n	80032de <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80032fc:	f3bf 8f4f 	dsb	sy
}
 8003300:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003302:	f3bf 8f6f 	isb	sy
}
 8003306:	bf00      	nop
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <low_level_init+0x110>)
 8003326:	4a41      	ldr	r2, [pc, #260]	; (800342c <low_level_init+0x114>)
 8003328:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003332:	23e1      	movs	r3, #225	; 0xe1
 8003334:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003336:	2300      	movs	r3, #0
 8003338:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800333a:	2300      	movs	r3, #0
 800333c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003342:	4a39      	ldr	r2, [pc, #228]	; (8003428 <low_level_init+0x110>)
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800334a:	4b37      	ldr	r3, [pc, #220]	; (8003428 <low_level_init+0x110>)
 800334c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003350:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003352:	4b35      	ldr	r3, [pc, #212]	; (8003428 <low_level_init+0x110>)
 8003354:	4a36      	ldr	r2, [pc, #216]	; (8003430 <low_level_init+0x118>)
 8003356:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003358:	4b33      	ldr	r3, [pc, #204]	; (8003428 <low_level_init+0x110>)
 800335a:	4a36      	ldr	r2, [pc, #216]	; (8003434 <low_level_init+0x11c>)
 800335c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800335e:	4b32      	ldr	r3, [pc, #200]	; (8003428 <low_level_init+0x110>)
 8003360:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003364:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003366:	4830      	ldr	r0, [pc, #192]	; (8003428 <low_level_init+0x110>)
 8003368:	f7fd ff76 	bl	8001258 <HAL_ETH_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003370:	2238      	movs	r2, #56	; 0x38
 8003372:	2100      	movs	r1, #0
 8003374:	4830      	ldr	r0, [pc, #192]	; (8003438 <low_level_init+0x120>)
 8003376:	f00c fbc2 	bl	800fafe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800337a:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <low_level_init+0x120>)
 800337c:	2221      	movs	r2, #33	; 0x21
 800337e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <low_level_init+0x120>)
 8003382:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003386:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <low_level_init+0x120>)
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800338e:	482b      	ldr	r0, [pc, #172]	; (800343c <low_level_init+0x124>)
 8003390:	f000 ff4c 	bl	800422c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2206      	movs	r2, #6
 8003398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800339c:	4b22      	ldr	r3, [pc, #136]	; (8003428 <low_level_init+0x110>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <low_level_init+0x110>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	785a      	ldrb	r2, [r3, #1]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80033b4:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <low_level_init+0x110>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	789a      	ldrb	r2, [r3, #2]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80033c0:	4b19      	ldr	r3, [pc, #100]	; (8003428 <low_level_init+0x110>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	78da      	ldrb	r2, [r3, #3]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <low_level_init+0x110>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	791a      	ldrb	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <low_level_init+0x110>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	795a      	ldrb	r2, [r3, #5]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033f2:	f043 030a 	orr.w	r3, r3, #10
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80033fe:	4910      	ldr	r1, [pc, #64]	; (8003440 <low_level_init+0x128>)
 8003400:	4810      	ldr	r0, [pc, #64]	; (8003444 <low_level_init+0x12c>)
 8003402:	f7fd fc3a 	bl	8000c7a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003406:	480f      	ldr	r0, [pc, #60]	; (8003444 <low_level_init+0x12c>)
 8003408:	f7fd fc69 	bl	8000cde <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fa2a 	bl	800386c <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8003418:	e001      	b.n	800341e <low_level_init+0x106>
    Error_Handler();
 800341a:	f7fd fad5 	bl	80009c8 <Error_Handler>
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20004bc0 	.word	0x20004bc0
 800342c:	40028000 	.word	0x40028000
 8003430:	2000012c 	.word	0x2000012c
 8003434:	2000008c 	.word	0x2000008c
 8003438:	20004c70 	.word	0x20004c70
 800343c:	08013600 	.word	0x08013600
 8003440:	2000000c 	.word	0x2000000c
 8003444:	20004ca8 	.word	0x20004ca8

08003448 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b092      	sub	sp, #72	; 0x48
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	2230      	movs	r2, #48	; 0x30
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f00c fb48 	bl	800fafe <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	2230      	movs	r2, #48	; 0x30
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f00c fb41 	bl	800fafe <memset>

  for(q = p; q != NULL; q = q->next)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	643b      	str	r3, [r7, #64]	; 0x40
 8003480:	e045      	b.n	800350e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003484:	2b03      	cmp	r3, #3
 8003486:	d902      	bls.n	800348e <low_level_output+0x46>
      return ERR_IF;
 8003488:	f06f 030b 	mvn.w	r3, #11
 800348c:	e055      	b.n	800353a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3348      	adds	r3, #72	; 0x48
 800349e:	443b      	add	r3, r7
 80034a0:	3b3c      	subs	r3, #60	; 0x3c
 80034a2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	895b      	ldrh	r3, [r3, #10]
 80034a8:	4619      	mov	r1, r3
 80034aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	3348      	adds	r3, #72	; 0x48
 80034b6:	443b      	add	r3, r7
 80034b8:	3b38      	subs	r3, #56	; 0x38
 80034ba:	6019      	str	r1, [r3, #0]

    if(i>0)
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d011      	beq.n	80034e6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80034c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	f107 000c 	add.w	r0, r7, #12
 80034ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034cc:	460b      	mov	r3, r1
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	440b      	add	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	18c1      	adds	r1, r0, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	3348      	adds	r3, #72	; 0x48
 80034e0:	443b      	add	r3, r7
 80034e2:	3b34      	subs	r3, #52	; 0x34
 80034e4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80034e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80034ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	3348      	adds	r3, #72	; 0x48
 80034fa:	443b      	add	r3, r7
 80034fc:	3b34      	subs	r3, #52	; 0x34
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003504:	3301      	adds	r3, #1
 8003506:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	643b      	str	r3, [r7, #64]	; 0x40
 800350e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1b6      	bne.n	8003482 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	891b      	ldrh	r3, [r3, #8]
 8003518:	461a      	mov	r2, r3
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <low_level_output+0xfc>)
 800351c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <low_level_output+0xfc>)
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <low_level_output+0xfc>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800352c:	2214      	movs	r2, #20
 800352e:	4905      	ldr	r1, [pc, #20]	; (8003544 <low_level_output+0xfc>)
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <low_level_output+0x100>)
 8003532:	f7fd ffe3 	bl	80014fc <HAL_ETH_Transmit>

  return errval;
 8003536:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800353a:	4618      	mov	r0, r3
 800353c:	3748      	adds	r7, #72	; 0x48
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20004c70 	.word	0x20004c70
 8003548:	20004bc0 	.word	0x20004bc0

0800354c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <low_level_input+0x2c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	4619      	mov	r1, r3
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <low_level_input+0x30>)
 8003568:	f7fe f85c 	bl	8001624 <HAL_ETH_ReadData>
  }

  return p;
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20004bbc 	.word	0x20004bbc
 800357c:	20004bc0 	.word	0x20004bc0

08003580 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ffdd 	bl	800354c <low_level_input>
 8003592:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	4798      	blx	r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f001 fdc6 	bl	800513c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ea      	bne.n	800358c <ethernetif_input+0xc>
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <ethernetif_init+0x1c>
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <ethernetif_init+0x48>)
 80035d0:	f240 127b 	movw	r2, #379	; 0x17b
 80035d4:	490d      	ldr	r1, [pc, #52]	; (800360c <ethernetif_init+0x4c>)
 80035d6:	480e      	ldr	r0, [pc, #56]	; (8003610 <ethernetif_init+0x50>)
 80035d8:	f00c fa2c 	bl	800fa34 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2273      	movs	r2, #115	; 0x73
 80035e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2274      	movs	r2, #116	; 0x74
 80035e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a09      	ldr	r2, [pc, #36]	; (8003614 <ethernetif_init+0x54>)
 80035f0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a08      	ldr	r2, [pc, #32]	; (8003618 <ethernetif_init+0x58>)
 80035f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff fe8d 	bl	8003318 <low_level_init>

  return ERR_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	08010870 	.word	0x08010870
 800360c:	0801088c 	.word	0x0801088c
 8003610:	0801089c 	.word	0x0801089c
 8003614:	0800db05 	.word	0x0800db05
 8003618:	08003449 	.word	0x08003449

0800361c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	4807      	ldr	r0, [pc, #28]	; (8003648 <pbuf_free_custom+0x2c>)
 800362c:	f000 fee0 	bl	80043f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <pbuf_free_custom+0x30>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <pbuf_free_custom+0x30>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
  }
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	08013600 	.word	0x08013600
 800364c:	20004bbc 	.word	0x20004bbc

08003650 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003654:	f7fd fc72 	bl	8000f3c <HAL_GetTick>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	; 0x38
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a4e      	ldr	r2, [pc, #312]	; (80037b8 <HAL_ETH_MspInit+0x158>)
 800367e:	4293      	cmp	r3, r2
 8003680:	f040 8096 	bne.w	80037b0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003684:	4b4d      	ldr	r3, [pc, #308]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 800368a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800368e:	6313      	str	r3, [r2, #48]	; 0x30
 8003690:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	623b      	str	r3, [r7, #32]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4a46      	ldr	r2, [pc, #280]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036a6:	6313      	str	r3, [r2, #48]	; 0x30
 80036a8:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	4a40      	ldr	r2, [pc, #256]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036be:	6313      	str	r3, [r2, #48]	; 0x30
 80036c0:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	4a3a      	ldr	r2, [pc, #232]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036d2:	f043 0304 	orr.w	r3, r3, #4
 80036d6:	6313      	str	r3, [r2, #48]	; 0x30
 80036d8:	4b38      	ldr	r3, [pc, #224]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e4:	4b35      	ldr	r3, [pc, #212]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4a34      	ldr	r2, [pc, #208]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4a2e      	ldr	r2, [pc, #184]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	6313      	str	r3, [r2, #48]	; 0x30
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003714:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a28      	ldr	r2, [pc, #160]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 800371a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371e:	6313      	str	r3, [r2, #48]	; 0x30
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_ETH_MspInit+0x15c>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800372c:	2332      	movs	r3, #50	; 0x32
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2303      	movs	r3, #3
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800373c:	230b      	movs	r3, #11
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003744:	4619      	mov	r1, r3
 8003746:	481e      	ldr	r0, [pc, #120]	; (80037c0 <HAL_ETH_MspInit+0x160>)
 8003748:	f7fe feb8 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800374c:	2386      	movs	r3, #134	; 0x86
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800375c:	230b      	movs	r3, #11
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003764:	4619      	mov	r1, r3
 8003766:	4817      	ldr	r0, [pc, #92]	; (80037c4 <HAL_ETH_MspInit+0x164>)
 8003768:	f7fe fea8 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800376c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377a:	2303      	movs	r3, #3
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800377e:	230b      	movs	r3, #11
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003786:	4619      	mov	r1, r3
 8003788:	480f      	ldr	r0, [pc, #60]	; (80037c8 <HAL_ETH_MspInit+0x168>)
 800378a:	f7fe fe97 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800378e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003794:	2302      	movs	r3, #2
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379c:	2303      	movs	r3, #3
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037a0:	230b      	movs	r3, #11
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a8:	4619      	mov	r1, r3
 80037aa:	4808      	ldr	r0, [pc, #32]	; (80037cc <HAL_ETH_MspInit+0x16c>)
 80037ac:	f7fe fe86 	bl	80024bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80037b0:	bf00      	nop
 80037b2:	3738      	adds	r7, #56	; 0x38
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40028000 	.word	0x40028000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020800 	.word	0x40020800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020400 	.word	0x40020400
 80037cc:	40021800 	.word	0x40021800

080037d0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <ETH_PHY_IO_Init+0x10>)
 80037d6:	f7fe fa0f 	bl	8001bf8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20004bc0 	.word	0x20004bc0

080037e4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <ETH_PHY_IO_ReadReg+0x30>)
 8003808:	f7fe f850 	bl	80018ac <HAL_ETH_ReadPHYRegister>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003816:	e000      	b.n	800381a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20004bc0 	.word	0x20004bc0

08003828 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	4807      	ldr	r0, [pc, #28]	; (8003858 <ETH_PHY_IO_WriteReg+0x30>)
 800383c:	f7fe f881 	bl	8001942 <HAL_ETH_WritePHYRegister>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800384a:	e000      	b.n	800384e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20004bc0 	.word	0x20004bc0

0800385c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003860:	f7fd fb6c 	bl	8000f3c <HAL_GetTick>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b0a0      	sub	sp, #128	; 0x80
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	2264      	movs	r2, #100	; 0x64
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f00c f93e 	bl	800fafe <memset>
  int32_t PHYLinkState = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	67fb      	str	r3, [r7, #124]	; 0x7c
 800388a:	2300      	movs	r3, #0
 800388c:	67bb      	str	r3, [r7, #120]	; 0x78
 800388e:	2300      	movs	r3, #0
 8003890:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003892:	483a      	ldr	r0, [pc, #232]	; (800397c <ethernet_link_check_state+0x110>)
 8003894:	f7fd fa70 	bl	8000d78 <LAN8742_GetLinkState>
 8003898:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <ethernet_link_check_state+0x5a>
 80038ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	dc09      	bgt.n	80038c6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80038b2:	4833      	ldr	r0, [pc, #204]	; (8003980 <ethernet_link_check_state+0x114>)
 80038b4:	f7fd fdc9 	bl	800144a <HAL_ETH_Stop>
    netif_set_down(netif);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f001 f825 	bl	8004908 <netif_set_down>
    netif_set_link_down(netif);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 f88c 	bl	80049dc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80038c4:	e055      	b.n	8003972 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d14e      	bne.n	8003972 <ethernet_link_check_state+0x106>
 80038d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	dd4b      	ble.n	8003972 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80038da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038dc:	3b02      	subs	r3, #2
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d82a      	bhi.n	8003938 <ethernet_link_check_state+0xcc>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <ethernet_link_check_state+0x7c>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	0800390b 	.word	0x0800390b
 80038f0:	0800391b 	.word	0x0800391b
 80038f4:	0800392b 	.word	0x0800392b
      duplex = ETH_FULLDUPLEX_MODE;
 80038f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80038fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003902:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003904:	2301      	movs	r3, #1
 8003906:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003908:	e017      	b.n	800393a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800390a:	2300      	movs	r3, #0
 800390c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800390e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003912:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003914:	2301      	movs	r3, #1
 8003916:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003918:	e00f      	b.n	800393a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800391a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800391e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003920:	2300      	movs	r3, #0
 8003922:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003924:	2301      	movs	r3, #1
 8003926:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003928:	e007      	b.n	800393a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800392a:	2300      	movs	r3, #0
 800392c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800392e:	2300      	movs	r3, #0
 8003930:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003936:	e000      	b.n	800393a <ethernet_link_check_state+0xce>
      break;
 8003938:	bf00      	nop
    if(linkchanged)
 800393a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d018      	beq.n	8003972 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	4619      	mov	r1, r3
 8003946:	480e      	ldr	r0, [pc, #56]	; (8003980 <ethernet_link_check_state+0x114>)
 8003948:	f7fe f844 	bl	80019d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800394c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003952:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003954:	f107 030c 	add.w	r3, r7, #12
 8003958:	4619      	mov	r1, r3
 800395a:	4809      	ldr	r0, [pc, #36]	; (8003980 <ethernet_link_check_state+0x114>)
 800395c:	f7fe f931 	bl	8001bc2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003960:	4807      	ldr	r0, [pc, #28]	; (8003980 <ethernet_link_check_state+0x114>)
 8003962:	f7fd fd13 	bl	800138c <HAL_ETH_Start>
      netif_set_up(netif);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 ff62 	bl	8004830 <netif_set_up>
      netif_set_link_up(netif);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fffd 	bl	800496c <netif_set_link_up>
}
 8003972:	bf00      	nop
 8003974:	3780      	adds	r7, #128	; 0x80
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20004ca8 	.word	0x20004ca8
 8003980:	20004bc0 	.word	0x20004bc0

08003984 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af02      	add	r7, sp, #8
 800398a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800398c:	4812      	ldr	r0, [pc, #72]	; (80039d8 <HAL_ETH_RxAllocateCallback+0x54>)
 800398e:	f000 fcc1 	bl	8004314 <memp_malloc_pool>
 8003992:	60f8      	str	r0, [r7, #12]
  if (p)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d014      	beq.n	80039c4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f103 0220 	add.w	r2, r3, #32
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_ETH_RxAllocateCallback+0x58>)
 80039a8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80039b2:	9201      	str	r2, [sp, #4]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2241      	movs	r2, #65	; 0x41
 80039ba:	2100      	movs	r1, #0
 80039bc:	2000      	movs	r0, #0
 80039be:	f001 fa03 	bl	8004dc8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80039c2:	e005      	b.n	80039d0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08013600 	.word	0x08013600
 80039dc:	0800361d 	.word	0x0800361d
 80039e0:	20004bbc 	.word	0x20004bbc

080039e4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3b20      	subs	r3, #32
 8003a02:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e003      	b.n	8003a2e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e009      	b.n	8003a50 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	891a      	ldrh	r2, [r3, #8]
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	4413      	add	r3, r2
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f2      	bne.n	8003a3c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8003a56:	887b      	ldrh	r3, [r7, #2]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fc30 	bl	80032c0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003a60:	bf00      	nop
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	b21a      	sxth	r2, r3
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	b29b      	uxth	r3, r3
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	061a      	lsls	r2, r3, #24
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0e1b      	lsrs	r3, r3, #24
 8003ab6:	4313      	orrs	r3, r2
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003ace:	f000 f8d5 	bl	8003c7c <mem_init>
  memp_init();
 8003ad2:	f000 fbdb 	bl	800428c <memp_init>
  pbuf_init();
  netif_init();
 8003ad6:	f000 fcd9 	bl	800448c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003ada:	f007 f873 	bl	800abc4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003ade:	f001 fdcb 	bl	8005678 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003ae2:	f006 ffe5 	bl	800aab0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <ptr_to_mem+0x20>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	4413      	add	r3, r2
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200074f4 	.word	0x200074f4

08003b14 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <mem_to_ptr+0x20>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	b29b      	uxth	r3, r3
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	200074f4 	.word	0x200074f4

08003b38 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <plug_holes+0x120>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d206      	bcs.n	8003b58 <plug_holes+0x20>
 8003b4a:	4b44      	ldr	r3, [pc, #272]	; (8003c5c <plug_holes+0x124>)
 8003b4c:	f240 12df 	movw	r2, #479	; 0x1df
 8003b50:	4943      	ldr	r1, [pc, #268]	; (8003c60 <plug_holes+0x128>)
 8003b52:	4844      	ldr	r0, [pc, #272]	; (8003c64 <plug_holes+0x12c>)
 8003b54:	f00b ff6e 	bl	800fa34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003b58:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <plug_holes+0x130>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d306      	bcc.n	8003b70 <plug_holes+0x38>
 8003b62:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <plug_holes+0x124>)
 8003b64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b68:	4940      	ldr	r1, [pc, #256]	; (8003c6c <plug_holes+0x134>)
 8003b6a:	483e      	ldr	r0, [pc, #248]	; (8003c64 <plug_holes+0x12c>)
 8003b6c:	f00b ff62 	bl	800fa34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	791b      	ldrb	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d006      	beq.n	8003b86 <plug_holes+0x4e>
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <plug_holes+0x124>)
 8003b7a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003b7e:	493c      	ldr	r1, [pc, #240]	; (8003c70 <plug_holes+0x138>)
 8003b80:	4838      	ldr	r0, [pc, #224]	; (8003c64 <plug_holes+0x12c>)
 8003b82:	f00b ff57 	bl	800fa34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003b8e:	d906      	bls.n	8003b9e <plug_holes+0x66>
 8003b90:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <plug_holes+0x124>)
 8003b92:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003b96:	4937      	ldr	r1, [pc, #220]	; (8003c74 <plug_holes+0x13c>)
 8003b98:	4832      	ldr	r0, [pc, #200]	; (8003c64 <plug_holes+0x12c>)
 8003b9a:	f00b ff4b 	bl	800fa34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ffa4 	bl	8003af0 <ptr_to_mem>
 8003ba8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d024      	beq.n	8003bfc <plug_holes+0xc4>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	791b      	ldrb	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d120      	bne.n	8003bfc <plug_holes+0xc4>
 8003bba:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <plug_holes+0x130>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d01b      	beq.n	8003bfc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003bc4:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <plug_holes+0x140>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d102      	bne.n	8003bd4 <plug_holes+0x9c>
      lfree = mem;
 8003bce:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <plug_holes+0x140>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003be4:	d00a      	beq.n	8003bfc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff80 	bl	8003af0 <ptr_to_mem>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ff8e 	bl	8003b14 <mem_to_ptr>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	885b      	ldrh	r3, [r3, #2]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff75 	bl	8003af0 <ptr_to_mem>
 8003c06:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d01f      	beq.n	8003c50 <plug_holes+0x118>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	791b      	ldrb	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11b      	bne.n	8003c50 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003c18:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <plug_holes+0x140>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d102      	bne.n	8003c28 <plug_holes+0xf0>
      lfree = pmem;
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <plug_holes+0x140>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003c38:	d00a      	beq.n	8003c50 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff56 	bl	8003af0 <ptr_to_mem>
 8003c44:	4604      	mov	r4, r0
 8003c46:	68b8      	ldr	r0, [r7, #8]
 8003c48:	f7ff ff64 	bl	8003b14 <mem_to_ptr>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd90      	pop	{r4, r7, pc}
 8003c58:	200074f4 	.word	0x200074f4
 8003c5c:	080108c4 	.word	0x080108c4
 8003c60:	080108f4 	.word	0x080108f4
 8003c64:	0801090c 	.word	0x0801090c
 8003c68:	200074f8 	.word	0x200074f8
 8003c6c:	08010934 	.word	0x08010934
 8003c70:	08010950 	.word	0x08010950
 8003c74:	0801096c 	.word	0x0801096c
 8003c78:	200074fc 	.word	0x200074fc

08003c7c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <mem_init+0x68>)
 8003c84:	3303      	adds	r3, #3
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <mem_init+0x6c>)
 8003c8e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003c90:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <mem_init+0x6c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003c9c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003caa:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8003cae:	f7ff ff1f 	bl	8003af0 <ptr_to_mem>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <mem_init+0x70>)
 8003cb6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <mem_init+0x70>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <mem_init+0x70>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003cc8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <mem_init+0x70>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003cd2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <mem_init+0x6c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <mem_init+0x74>)
 8003cda:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20004ce0 	.word	0x20004ce0
 8003ce8:	200074f4 	.word	0x200074f4
 8003cec:	200074f8 	.word	0x200074f8
 8003cf0:	200074fc 	.word	0x200074fc

08003cf4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ff09 	bl	8003b14 <mem_to_ptr>
 8003d02:	4603      	mov	r3, r0
 8003d04:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fef0 	bl	8003af0 <ptr_to_mem>
 8003d10:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	885b      	ldrh	r3, [r3, #2]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff feea 	bl	8003af0 <ptr_to_mem>
 8003d1c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003d26:	d818      	bhi.n	8003d5a <mem_link_valid+0x66>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	885b      	ldrh	r3, [r3, #2]
 8003d2c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003d30:	d813      	bhi.n	8003d5a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003d36:	8afa      	ldrh	r2, [r7, #22]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d004      	beq.n	8003d46 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	8afa      	ldrh	r2, [r7, #22]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d109      	bne.n	8003d5a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <mem_link_valid+0x74>)
 8003d48:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d006      	beq.n	8003d5e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	885b      	ldrh	r3, [r3, #2]
 8003d54:	8afa      	ldrh	r2, [r7, #22]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d001      	beq.n	8003d5e <mem_link_valid+0x6a>
    return 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e000      	b.n	8003d60 <mem_link_valid+0x6c>
  }
  return 1;
 8003d5e:	2301      	movs	r3, #1
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200074f8 	.word	0x200074f8

08003d6c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04c      	beq.n	8003e14 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <mem_free+0xb0>)
 8003d86:	f240 2273 	movw	r2, #627	; 0x273
 8003d8a:	4925      	ldr	r1, [pc, #148]	; (8003e20 <mem_free+0xb4>)
 8003d8c:	4825      	ldr	r0, [pc, #148]	; (8003e24 <mem_free+0xb8>)
 8003d8e:	f00b fe51 	bl	800fa34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003d92:	e040      	b.n	8003e16 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b08      	subs	r3, #8
 8003d98:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <mem_free+0xbc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d306      	bcc.n	8003db2 <mem_free+0x46>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f103 020c 	add.w	r2, r3, #12
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <mem_free+0xc0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d907      	bls.n	8003dc2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <mem_free+0xb0>)
 8003db4:	f240 227f 	movw	r2, #639	; 0x27f
 8003db8:	491d      	ldr	r1, [pc, #116]	; (8003e30 <mem_free+0xc4>)
 8003dba:	481a      	ldr	r0, [pc, #104]	; (8003e24 <mem_free+0xb8>)
 8003dbc:	f00b fe3a 	bl	800fa34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003dc0:	e029      	b.n	8003e16 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	791b      	ldrb	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003dca:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <mem_free+0xb0>)
 8003dcc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003dd0:	4918      	ldr	r1, [pc, #96]	; (8003e34 <mem_free+0xc8>)
 8003dd2:	4814      	ldr	r0, [pc, #80]	; (8003e24 <mem_free+0xb8>)
 8003dd4:	f00b fe2e 	bl	800fa34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003dd8:	e01d      	b.n	8003e16 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f7ff ff8a 	bl	8003cf4 <mem_link_valid>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d107      	bne.n	8003df6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <mem_free+0xb0>)
 8003de8:	f240 2295 	movw	r2, #661	; 0x295
 8003dec:	4912      	ldr	r1, [pc, #72]	; (8003e38 <mem_free+0xcc>)
 8003dee:	480d      	ldr	r0, [pc, #52]	; (8003e24 <mem_free+0xb8>)
 8003df0:	f00b fe20 	bl	800fa34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003df4:	e00f      	b.n	8003e16 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <mem_free+0xd0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d202      	bcs.n	8003e0c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003e06:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <mem_free+0xd0>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fe93 	bl	8003b38 <plug_holes>
 8003e12:	e000      	b.n	8003e16 <mem_free+0xaa>
    return;
 8003e14:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	080108c4 	.word	0x080108c4
 8003e20:	08010998 	.word	0x08010998
 8003e24:	0801090c 	.word	0x0801090c
 8003e28:	200074f4 	.word	0x200074f4
 8003e2c:	200074f8 	.word	0x200074f8
 8003e30:	080109bc 	.word	0x080109bc
 8003e34:	080109d8 	.word	0x080109d8
 8003e38:	08010a00 	.word	0x08010a00
 8003e3c:	200074fc 	.word	0x200074fc

08003e40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	3303      	adds	r3, #3
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003e58:	8bfb      	ldrh	r3, [r7, #30]
 8003e5a:	2b0b      	cmp	r3, #11
 8003e5c:	d801      	bhi.n	8003e62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003e5e:	230c      	movs	r3, #12
 8003e60:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003e62:	8bfb      	ldrh	r3, [r7, #30]
 8003e64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e68:	d803      	bhi.n	8003e72 <mem_trim+0x32>
 8003e6a:	8bfa      	ldrh	r2, [r7, #30]
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d201      	bcs.n	8003e76 <mem_trim+0x36>
    return NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e0cc      	b.n	8004010 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003e76:	4b68      	ldr	r3, [pc, #416]	; (8004018 <mem_trim+0x1d8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d304      	bcc.n	8003e8a <mem_trim+0x4a>
 8003e80:	4b66      	ldr	r3, [pc, #408]	; (800401c <mem_trim+0x1dc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d306      	bcc.n	8003e98 <mem_trim+0x58>
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <mem_trim+0x1e0>)
 8003e8c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003e90:	4964      	ldr	r1, [pc, #400]	; (8004024 <mem_trim+0x1e4>)
 8003e92:	4865      	ldr	r0, [pc, #404]	; (8004028 <mem_trim+0x1e8>)
 8003e94:	f00b fdce 	bl	800fa34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003e98:	4b5f      	ldr	r3, [pc, #380]	; (8004018 <mem_trim+0x1d8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d304      	bcc.n	8003eac <mem_trim+0x6c>
 8003ea2:	4b5e      	ldr	r3, [pc, #376]	; (800401c <mem_trim+0x1dc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d301      	bcc.n	8003eb0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	e0af      	b.n	8004010 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3b08      	subs	r3, #8
 8003eb4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003eb6:	69b8      	ldr	r0, [r7, #24]
 8003eb8:	f7ff fe2c 	bl	8003b14 <mem_to_ptr>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	8afb      	ldrh	r3, [r7, #22]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b08      	subs	r3, #8
 8003ecc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003ece:	8bfa      	ldrh	r2, [r7, #30]
 8003ed0:	8abb      	ldrh	r3, [r7, #20]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d906      	bls.n	8003ee4 <mem_trim+0xa4>
 8003ed6:	4b52      	ldr	r3, [pc, #328]	; (8004020 <mem_trim+0x1e0>)
 8003ed8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003edc:	4953      	ldr	r1, [pc, #332]	; (800402c <mem_trim+0x1ec>)
 8003ede:	4852      	ldr	r0, [pc, #328]	; (8004028 <mem_trim+0x1e8>)
 8003ee0:	f00b fda8 	bl	800fa34 <iprintf>
  if (newsize > size) {
 8003ee4:	8bfa      	ldrh	r2, [r7, #30]
 8003ee6:	8abb      	ldrh	r3, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d901      	bls.n	8003ef0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e08f      	b.n	8004010 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003ef0:	8bfa      	ldrh	r2, [r7, #30]
 8003ef2:	8abb      	ldrh	r3, [r7, #20]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d101      	bne.n	8003efc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	e089      	b.n	8004010 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fdf5 	bl	8003af0 <ptr_to_mem>
 8003f06:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d13f      	bne.n	8003f90 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f18:	d106      	bne.n	8003f28 <mem_trim+0xe8>
 8003f1a:	4b41      	ldr	r3, [pc, #260]	; (8004020 <mem_trim+0x1e0>)
 8003f1c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003f20:	4943      	ldr	r1, [pc, #268]	; (8004030 <mem_trim+0x1f0>)
 8003f22:	4841      	ldr	r0, [pc, #260]	; (8004028 <mem_trim+0x1e8>)
 8003f24:	f00b fd86 	bl	800fa34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003f2e:	8afa      	ldrh	r2, [r7, #22]
 8003f30:	8bfb      	ldrh	r3, [r7, #30]
 8003f32:	4413      	add	r3, r2
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3308      	adds	r3, #8
 8003f38:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003f3a:	4b3e      	ldr	r3, [pc, #248]	; (8004034 <mem_trim+0x1f4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d106      	bne.n	8003f52 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003f44:	89fb      	ldrh	r3, [r7, #14]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fdd2 	bl	8003af0 <ptr_to_mem>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4a39      	ldr	r2, [pc, #228]	; (8004034 <mem_trim+0x1f4>)
 8003f50:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fdcb 	bl	8003af0 <ptr_to_mem>
 8003f5a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	89ba      	ldrh	r2, [r7, #12]
 8003f66:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	8afa      	ldrh	r2, [r7, #22]
 8003f6c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	89fa      	ldrh	r2, [r7, #14]
 8003f72:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f7c:	d047      	beq.n	800400e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fdb4 	bl	8003af0 <ptr_to_mem>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
 8003f8c:	8053      	strh	r3, [r2, #2]
 8003f8e:	e03e      	b.n	800400e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003f90:	8bfb      	ldrh	r3, [r7, #30]
 8003f92:	f103 0214 	add.w	r2, r3, #20
 8003f96:	8abb      	ldrh	r3, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d838      	bhi.n	800400e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003f9c:	8afa      	ldrh	r2, [r7, #22]
 8003f9e:	8bfb      	ldrh	r3, [r7, #30]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003fb0:	d106      	bne.n	8003fc0 <mem_trim+0x180>
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <mem_trim+0x1e0>)
 8003fb4:	f240 3216 	movw	r2, #790	; 0x316
 8003fb8:	491d      	ldr	r1, [pc, #116]	; (8004030 <mem_trim+0x1f0>)
 8003fba:	481b      	ldr	r0, [pc, #108]	; (8004028 <mem_trim+0x1e8>)
 8003fbc:	f00b fd3a 	bl	800fa34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fd94 	bl	8003af0 <ptr_to_mem>
 8003fc8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <mem_trim+0x1f4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d202      	bcs.n	8003fda <mem_trim+0x19a>
      lfree = mem2;
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <mem_trim+0x1f4>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	881a      	ldrh	r2, [r3, #0]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	8afa      	ldrh	r2, [r7, #22]
 8003fec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	89fa      	ldrh	r2, [r7, #14]
 8003ff2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003ffc:	d007      	beq.n	800400e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fd74 	bl	8003af0 <ptr_to_mem>
 8004008:	4602      	mov	r2, r0
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800400e:	687b      	ldr	r3, [r7, #4]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	200074f4 	.word	0x200074f4
 800401c:	200074f8 	.word	0x200074f8
 8004020:	080108c4 	.word	0x080108c4
 8004024:	08010a34 	.word	0x08010a34
 8004028:	0801090c 	.word	0x0801090c
 800402c:	08010a4c 	.word	0x08010a4c
 8004030:	08010a6c 	.word	0x08010a6c
 8004034:	200074fc 	.word	0x200074fc

08004038 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <mem_malloc+0x14>
    return NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	e0d9      	b.n	8004200 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	3303      	adds	r3, #3
 8004050:	b29b      	uxth	r3, r3
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004058:	8bbb      	ldrh	r3, [r7, #28]
 800405a:	2b0b      	cmp	r3, #11
 800405c:	d801      	bhi.n	8004062 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800405e:	230c      	movs	r3, #12
 8004060:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004062:	8bbb      	ldrh	r3, [r7, #28]
 8004064:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004068:	d803      	bhi.n	8004072 <mem_malloc+0x3a>
 800406a:	8bba      	ldrh	r2, [r7, #28]
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	429a      	cmp	r2, r3
 8004070:	d201      	bcs.n	8004076 <mem_malloc+0x3e>
    return NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	e0c4      	b.n	8004200 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004076:	4b64      	ldr	r3, [pc, #400]	; (8004208 <mem_malloc+0x1d0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fd4a 	bl	8003b14 <mem_to_ptr>
 8004080:	4603      	mov	r3, r0
 8004082:	83fb      	strh	r3, [r7, #30]
 8004084:	e0b4      	b.n	80041f0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004086:	8bfb      	ldrh	r3, [r7, #30]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fd31 	bl	8003af0 <ptr_to_mem>
 800408e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	791b      	ldrb	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 80a4 	bne.w	80041e2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	8bfb      	ldrh	r3, [r7, #30]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f1a3 0208 	sub.w	r2, r3, #8
 80040a8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80040aa:	429a      	cmp	r2, r3
 80040ac:	f0c0 8099 	bcc.w	80041e2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	8bfb      	ldrh	r3, [r7, #30]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f1a3 0208 	sub.w	r2, r3, #8
 80040be:	8bbb      	ldrh	r3, [r7, #28]
 80040c0:	3314      	adds	r3, #20
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d333      	bcc.n	800412e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80040c6:	8bfa      	ldrh	r2, [r7, #30]
 80040c8:	8bbb      	ldrh	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3308      	adds	r3, #8
 80040d0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80040d2:	8a7b      	ldrh	r3, [r7, #18]
 80040d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80040d8:	d106      	bne.n	80040e8 <mem_malloc+0xb0>
 80040da:	4b4c      	ldr	r3, [pc, #304]	; (800420c <mem_malloc+0x1d4>)
 80040dc:	f240 3287 	movw	r2, #903	; 0x387
 80040e0:	494b      	ldr	r1, [pc, #300]	; (8004210 <mem_malloc+0x1d8>)
 80040e2:	484c      	ldr	r0, [pc, #304]	; (8004214 <mem_malloc+0x1dc>)
 80040e4:	f00b fca6 	bl	800fa34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80040e8:	8a7b      	ldrh	r3, [r7, #18]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fd00 	bl	8003af0 <ptr_to_mem>
 80040f0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	881a      	ldrh	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8bfa      	ldrh	r2, [r7, #30]
 8004104:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	8a7a      	ldrh	r2, [r7, #18]
 800410a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2201      	movs	r2, #1
 8004110:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800411a:	d00b      	beq.n	8004134 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fce5 	bl	8003af0 <ptr_to_mem>
 8004126:	4602      	mov	r2, r0
 8004128:	8a7b      	ldrh	r3, [r7, #18]
 800412a:	8053      	strh	r3, [r2, #2]
 800412c:	e002      	b.n	8004134 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2201      	movs	r2, #1
 8004132:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004134:	4b34      	ldr	r3, [pc, #208]	; (8004208 <mem_malloc+0x1d0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	429a      	cmp	r2, r3
 800413c:	d127      	bne.n	800418e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800413e:	4b32      	ldr	r3, [pc, #200]	; (8004208 <mem_malloc+0x1d0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004144:	e005      	b.n	8004152 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fcd0 	bl	8003af0 <ptr_to_mem>
 8004150:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	791b      	ldrb	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <mem_malloc+0x12c>
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <mem_malloc+0x1e0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	429a      	cmp	r2, r3
 8004162:	d1f0      	bne.n	8004146 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004164:	4a28      	ldr	r2, [pc, #160]	; (8004208 <mem_malloc+0x1d0>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800416a:	4b27      	ldr	r3, [pc, #156]	; (8004208 <mem_malloc+0x1d0>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <mem_malloc+0x1e0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d00b      	beq.n	800418e <mem_malloc+0x156>
 8004176:	4b24      	ldr	r3, [pc, #144]	; (8004208 <mem_malloc+0x1d0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	791b      	ldrb	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d006      	beq.n	800418e <mem_malloc+0x156>
 8004180:	4b22      	ldr	r3, [pc, #136]	; (800420c <mem_malloc+0x1d4>)
 8004182:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004186:	4925      	ldr	r1, [pc, #148]	; (800421c <mem_malloc+0x1e4>)
 8004188:	4822      	ldr	r0, [pc, #136]	; (8004214 <mem_malloc+0x1dc>)
 800418a:	f00b fc53 	bl	800fa34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800418e:	8bba      	ldrh	r2, [r7, #28]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4413      	add	r3, r2
 8004194:	3308      	adds	r3, #8
 8004196:	4a20      	ldr	r2, [pc, #128]	; (8004218 <mem_malloc+0x1e0>)
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	4293      	cmp	r3, r2
 800419c:	d906      	bls.n	80041ac <mem_malloc+0x174>
 800419e:	4b1b      	ldr	r3, [pc, #108]	; (800420c <mem_malloc+0x1d4>)
 80041a0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80041a4:	491e      	ldr	r1, [pc, #120]	; (8004220 <mem_malloc+0x1e8>)
 80041a6:	481b      	ldr	r0, [pc, #108]	; (8004214 <mem_malloc+0x1dc>)
 80041a8:	f00b fc44 	bl	800fa34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d006      	beq.n	80041c4 <mem_malloc+0x18c>
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <mem_malloc+0x1d4>)
 80041b8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80041bc:	4919      	ldr	r1, [pc, #100]	; (8004224 <mem_malloc+0x1ec>)
 80041be:	4815      	ldr	r0, [pc, #84]	; (8004214 <mem_malloc+0x1dc>)
 80041c0:	f00b fc38 	bl	800fa34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d006      	beq.n	80041dc <mem_malloc+0x1a4>
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <mem_malloc+0x1d4>)
 80041d0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80041d4:	4914      	ldr	r1, [pc, #80]	; (8004228 <mem_malloc+0x1f0>)
 80041d6:	480f      	ldr	r0, [pc, #60]	; (8004214 <mem_malloc+0x1dc>)
 80041d8:	f00b fc2c 	bl	800fa34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3308      	adds	r3, #8
 80041e0:	e00e      	b.n	8004200 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80041e2:	8bfb      	ldrh	r3, [r7, #30]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fc83 	bl	8003af0 <ptr_to_mem>
 80041ea:	4603      	mov	r3, r0
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80041f0:	8bfa      	ldrh	r2, [r7, #30]
 80041f2:	8bbb      	ldrh	r3, [r7, #28]
 80041f4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80041f8:	429a      	cmp	r2, r3
 80041fa:	f4ff af44 	bcc.w	8004086 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200074fc 	.word	0x200074fc
 800420c:	080108c4 	.word	0x080108c4
 8004210:	08010a6c 	.word	0x08010a6c
 8004214:	0801090c 	.word	0x0801090c
 8004218:	200074f8 	.word	0x200074f8
 800421c:	08010a80 	.word	0x08010a80
 8004220:	08010a9c 	.word	0x08010a9c
 8004224:	08010acc 	.word	0x08010acc
 8004228:	08010afc 	.word	0x08010afc

0800422c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	3303      	adds	r3, #3
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e011      	b.n	8004272 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4413      	add	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	885b      	ldrh	r3, [r3, #2]
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4293      	cmp	r3, r2
 800427c:	dbe7      	blt.n	800424e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004292:	2300      	movs	r3, #0
 8004294:	80fb      	strh	r3, [r7, #6]
 8004296:	e009      	b.n	80042ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	4a08      	ldr	r2, [pc, #32]	; (80042bc <memp_init+0x30>)
 800429c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ffc3 	bl	800422c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	3301      	adds	r3, #1
 80042aa:	80fb      	strh	r3, [r7, #6]
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d9f2      	bls.n	8004298 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08013678 	.word	0x08013678

080042c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <do_memp_malloc_pool+0x38>
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <do_memp_malloc_pool+0x48>)
 80042ec:	f44f 728c 	mov.w	r2, #280	; 0x118
 80042f0:	4906      	ldr	r1, [pc, #24]	; (800430c <do_memp_malloc_pool+0x4c>)
 80042f2:	4807      	ldr	r0, [pc, #28]	; (8004310 <do_memp_malloc_pool+0x50>)
 80042f4:	f00b fb9e 	bl	800fa34 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	e000      	b.n	80042fe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	08010b20 	.word	0x08010b20
 800430c:	08010b50 	.word	0x08010b50
 8004310:	08010b74 	.word	0x08010b74

08004314 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <memp_malloc_pool+0x1c>
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <memp_malloc_pool+0x38>)
 8004324:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004328:	4909      	ldr	r1, [pc, #36]	; (8004350 <memp_malloc_pool+0x3c>)
 800432a:	480a      	ldr	r0, [pc, #40]	; (8004354 <memp_malloc_pool+0x40>)
 800432c:	f00b fb82 	bl	800fa34 <iprintf>
  if (desc == NULL) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <memp_malloc_pool+0x26>
    return NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	e003      	b.n	8004342 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ffc0 	bl	80042c0 <do_memp_malloc_pool>
 8004340:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	08010b20 	.word	0x08010b20
 8004350:	08010b9c 	.word	0x08010b9c
 8004354:	08010b74 	.word	0x08010b74

08004358 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d908      	bls.n	800437a <memp_malloc+0x22>
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <memp_malloc+0x3c>)
 800436a:	f240 1257 	movw	r2, #343	; 0x157
 800436e:	490a      	ldr	r1, [pc, #40]	; (8004398 <memp_malloc+0x40>)
 8004370:	480a      	ldr	r0, [pc, #40]	; (800439c <memp_malloc+0x44>)
 8004372:	f00b fb5f 	bl	800fa34 <iprintf>
 8004376:	2300      	movs	r3, #0
 8004378:	e008      	b.n	800438c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <memp_malloc+0x48>)
 800437e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff9c 	bl	80042c0 <do_memp_malloc_pool>
 8004388:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	08010b20 	.word	0x08010b20
 8004398:	08010bb0 	.word	0x08010bb0
 800439c:	08010b74 	.word	0x08010b74
 80043a0:	08013678 	.word	0x08013678

080043a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <do_memp_free_pool+0x22>
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <do_memp_free_pool+0x40>)
 80043ba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80043be:	490a      	ldr	r1, [pc, #40]	; (80043e8 <do_memp_free_pool+0x44>)
 80043c0:	480a      	ldr	r0, [pc, #40]	; (80043ec <do_memp_free_pool+0x48>)
 80043c2:	f00b fb37 	bl	800fa34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	08010b20 	.word	0x08010b20
 80043e8:	08010bd0 	.word	0x08010bd0
 80043ec:	08010b74 	.word	0x08010b74

080043f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <memp_free_pool+0x1e>
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <memp_free_pool+0x3c>)
 8004402:	f240 1295 	movw	r2, #405	; 0x195
 8004406:	490a      	ldr	r1, [pc, #40]	; (8004430 <memp_free_pool+0x40>)
 8004408:	480a      	ldr	r0, [pc, #40]	; (8004434 <memp_free_pool+0x44>)
 800440a:	f00b fb13 	bl	800fa34 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <memp_free_pool+0x34>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ffc1 	bl	80043a4 <do_memp_free_pool>
 8004422:	e000      	b.n	8004426 <memp_free_pool+0x36>
    return;
 8004424:	bf00      	nop
}
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	08010b20 	.word	0x08010b20
 8004430:	08010b9c 	.word	0x08010b9c
 8004434:	08010b74 	.word	0x08010b74

08004438 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	6039      	str	r1, [r7, #0]
 8004442:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	2b08      	cmp	r3, #8
 8004448:	d907      	bls.n	800445a <memp_free+0x22>
 800444a:	4b0c      	ldr	r3, [pc, #48]	; (800447c <memp_free+0x44>)
 800444c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004450:	490b      	ldr	r1, [pc, #44]	; (8004480 <memp_free+0x48>)
 8004452:	480c      	ldr	r0, [pc, #48]	; (8004484 <memp_free+0x4c>)
 8004454:	f00b faee 	bl	800fa34 <iprintf>
 8004458:	e00c      	b.n	8004474 <memp_free+0x3c>

  if (mem == NULL) {
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <memp_free+0x50>)
 8004464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004468:	6839      	ldr	r1, [r7, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ff9a 	bl	80043a4 <do_memp_free_pool>
 8004470:	e000      	b.n	8004474 <memp_free+0x3c>
    return;
 8004472:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	08010b20 	.word	0x08010b20
 8004480:	08010bf0 	.word	0x08010bf0
 8004484:	08010b74 	.word	0x08010b74
 8004488:	08013678 	.word	0x08013678

0800448c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <netif_add+0x26>
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <netif_add+0x184>)
 80044b2:	f240 1227 	movw	r2, #295	; 0x127
 80044b6:	495b      	ldr	r1, [pc, #364]	; (8004624 <netif_add+0x188>)
 80044b8:	485b      	ldr	r0, [pc, #364]	; (8004628 <netif_add+0x18c>)
 80044ba:	f00b fabb 	bl	800fa34 <iprintf>
 80044be:	2300      	movs	r3, #0
 80044c0:	e0a9      	b.n	8004616 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <netif_add+0x3e>
 80044c8:	4b55      	ldr	r3, [pc, #340]	; (8004620 <netif_add+0x184>)
 80044ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 80044ce:	4957      	ldr	r1, [pc, #348]	; (800462c <netif_add+0x190>)
 80044d0:	4855      	ldr	r0, [pc, #340]	; (8004628 <netif_add+0x18c>)
 80044d2:	f00b faaf 	bl	800fa34 <iprintf>
 80044d6:	2300      	movs	r3, #0
 80044d8:	e09d      	b.n	8004616 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <netif_add+0x194>)
 80044e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80044ea:	4b51      	ldr	r3, [pc, #324]	; (8004630 <netif_add+0x194>)
 80044ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80044f4:	4b4e      	ldr	r3, [pc, #312]	; (8004630 <netif_add+0x194>)
 80044f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a49      	ldr	r2, [pc, #292]	; (8004634 <netif_add+0x198>)
 800450e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3324      	adds	r3, #36	; 0x24
 8004522:	2204      	movs	r2, #4
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f00b fae9 	bl	800fafe <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004538:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <netif_add+0x19c>)
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004546:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f914 	bl	800477c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	4798      	blx	r3
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <netif_add+0xc8>
    return NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	e058      	b.n	8004616 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800456a:	2bff      	cmp	r3, #255	; 0xff
 800456c:	d103      	bne.n	8004576 <netif_add+0xda>
        netif->num = 0;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <netif_add+0x1a0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e02b      	b.n	80045da <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	429a      	cmp	r2, r3
 8004588:	d106      	bne.n	8004598 <netif_add+0xfc>
 800458a:	4b25      	ldr	r3, [pc, #148]	; (8004620 <netif_add+0x184>)
 800458c:	f240 128b 	movw	r2, #395	; 0x18b
 8004590:	492b      	ldr	r1, [pc, #172]	; (8004640 <netif_add+0x1a4>)
 8004592:	4825      	ldr	r0, [pc, #148]	; (8004628 <netif_add+0x18c>)
 8004594:	f00b fa4e 	bl	800fa34 <iprintf>
        num_netifs++;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3301      	adds	r3, #1
 800459c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2bff      	cmp	r3, #255	; 0xff
 80045a2:	dd06      	ble.n	80045b2 <netif_add+0x116>
 80045a4:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <netif_add+0x184>)
 80045a6:	f240 128d 	movw	r2, #397	; 0x18d
 80045aa:	4926      	ldr	r1, [pc, #152]	; (8004644 <netif_add+0x1a8>)
 80045ac:	481e      	ldr	r0, [pc, #120]	; (8004628 <netif_add+0x18c>)
 80045ae:	f00b fa41 	bl	800fa34 <iprintf>
        if (netif2->num == netif->num) {
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045be:	429a      	cmp	r2, r3
 80045c0:	d108      	bne.n	80045d4 <netif_add+0x138>
          netif->num++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045c8:	3301      	adds	r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80045d2:	e005      	b.n	80045e0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1d0      	bne.n	8004582 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1be      	bne.n	8004564 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ec:	2bfe      	cmp	r3, #254	; 0xfe
 80045ee:	d103      	bne.n	80045f8 <netif_add+0x15c>
    netif_num = 0;
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <netif_add+0x19c>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e006      	b.n	8004606 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045fe:	3301      	adds	r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <netif_add+0x19c>)
 8004604:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <netif_add+0x1a0>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800460e:	4a0b      	ldr	r2, [pc, #44]	; (800463c <netif_add+0x1a0>)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	08010c0c 	.word	0x08010c0c
 8004624:	08010ca0 	.word	0x08010ca0
 8004628:	08010c5c 	.word	0x08010c5c
 800462c:	08010cbc 	.word	0x08010cbc
 8004630:	080136ec 	.word	0x080136ec
 8004634:	08004a5f 	.word	0x08004a5f
 8004638:	2000a414 	.word	0x2000a414
 800463c:	2000a40c 	.word	0x2000a40c
 8004640:	08010ce0 	.word	0x08010ce0
 8004644:	08010cf4 	.word	0x08010cf4

08004648 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f002 fb57 	bl	8006d08 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f006 ff3d 	bl	800b4dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <netif_do_set_ipaddr+0x20>
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <netif_do_set_ipaddr+0x88>)
 8004680:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004684:	491c      	ldr	r1, [pc, #112]	; (80046f8 <netif_do_set_ipaddr+0x8c>)
 8004686:	481d      	ldr	r0, [pc, #116]	; (80046fc <netif_do_set_ipaddr+0x90>)
 8004688:	f00b f9d4 	bl	800fa34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <netif_do_set_ipaddr+0x34>
 8004692:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <netif_do_set_ipaddr+0x88>)
 8004694:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004698:	4917      	ldr	r1, [pc, #92]	; (80046f8 <netif_do_set_ipaddr+0x8c>)
 800469a:	4818      	ldr	r0, [pc, #96]	; (80046fc <netif_do_set_ipaddr+0x90>)
 800469c:	f00b f9ca 	bl	800fa34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3304      	adds	r3, #4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d01c      	beq.n	80046e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3304      	adds	r3, #4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80046be:	f107 0314 	add.w	r3, r7, #20
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ffbf 	bl	8004648 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <netif_do_set_ipaddr+0x6a>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	e000      	b.n	80046d8 <netif_do_set_ipaddr+0x6c>
 80046d6:	2300      	movs	r3, #0
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80046dc:	2101      	movs	r1, #1
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f8d2 	bl	8004888 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	08010c0c 	.word	0x08010c0c
 80046f8:	08010d24 	.word	0x08010d24
 80046fc:	08010c5c 	.word	0x08010c5c

08004700 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3308      	adds	r3, #8
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d00a      	beq.n	8004730 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <netif_do_set_netmask+0x26>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	e000      	b.n	8004728 <netif_do_set_netmask+0x28>
 8004726:	2300      	movs	r3, #0
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	330c      	adds	r3, #12
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d00a      	beq.n	800476e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <netif_do_set_gw+0x26>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	e000      	b.n	8004766 <netif_do_set_gw+0x28>
 8004764:	2300      	movs	r3, #0
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004798:	4b1c      	ldr	r3, [pc, #112]	; (800480c <netif_set_addr+0x90>)
 800479a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <netif_set_addr+0x90>)
 80047a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <netif_set_addr+0x90>)
 80047ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <netif_set_addr+0x42>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <netif_set_addr+0x46>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <netif_set_addr+0x48>
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d006      	beq.n	80047da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	461a      	mov	r2, r3
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff ff49 	bl	800466c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff8e 	bl	8004700 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff ffa8 	bl	800473e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	461a      	mov	r2, r3
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff ff35 	bl	800466c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004802:	bf00      	nop
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	080136ec 	.word	0x080136ec

08004810 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004818:	4a04      	ldr	r2, [pc, #16]	; (800482c <netif_set_default+0x1c>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000a410 	.word	0x2000a410

08004830 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <netif_set_up+0x1e>
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <netif_set_up+0x4c>)
 8004840:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004844:	490e      	ldr	r1, [pc, #56]	; (8004880 <netif_set_up+0x50>)
 8004846:	480f      	ldr	r0, [pc, #60]	; (8004884 <netif_set_up+0x54>)
 8004848:	f00b f8f4 	bl	800fa34 <iprintf>
 800484c:	e013      	b.n	8004876 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10c      	bne.n	8004876 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	b2da      	uxtb	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800486e:	2103      	movs	r1, #3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f809 	bl	8004888 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	08010c0c 	.word	0x08010c0c
 8004880:	08010d94 	.word	0x08010d94
 8004884:	08010c5c 	.word	0x08010c5c

08004888 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <netif_issue_reports+0x20>
 800489a:	4b18      	ldr	r3, [pc, #96]	; (80048fc <netif_issue_reports+0x74>)
 800489c:	f240 326d 	movw	r2, #877	; 0x36d
 80048a0:	4917      	ldr	r1, [pc, #92]	; (8004900 <netif_issue_reports+0x78>)
 80048a2:	4818      	ldr	r0, [pc, #96]	; (8004904 <netif_issue_reports+0x7c>)
 80048a4:	f00b f8c6 	bl	800fa34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01e      	beq.n	80048f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d017      	beq.n	80048f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d013      	beq.n	80048f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00e      	beq.n	80048f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f009 fbf7 	bl	800e0e0 <etharp_request>
 80048f2:	e000      	b.n	80048f6 <netif_issue_reports+0x6e>
    return;
 80048f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	08010c0c 	.word	0x08010c0c
 8004900:	08010db0 	.word	0x08010db0
 8004904:	08010c5c 	.word	0x08010c5c

08004908 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <netif_set_down+0x1e>
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <netif_set_down+0x58>)
 8004918:	f240 329b 	movw	r2, #923	; 0x39b
 800491c:	4911      	ldr	r1, [pc, #68]	; (8004964 <netif_set_down+0x5c>)
 800491e:	4812      	ldr	r0, [pc, #72]	; (8004968 <netif_set_down+0x60>)
 8004920:	f00b f888 	bl	800fa34 <iprintf>
 8004924:	e019      	b.n	800495a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d012      	beq.n	800495a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f008 ff7d 	bl	800d854 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	08010c0c 	.word	0x08010c0c
 8004964:	08010dd4 	.word	0x08010dd4
 8004968:	08010c5c 	.word	0x08010c5c

0800496c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <netif_set_link_up+0x1e>
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <netif_set_link_up+0x64>)
 800497c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004980:	4914      	ldr	r1, [pc, #80]	; (80049d4 <netif_set_link_up+0x68>)
 8004982:	4815      	ldr	r0, [pc, #84]	; (80049d8 <netif_set_link_up+0x6c>)
 8004984:	f00b f856 	bl	800fa34 <iprintf>
 8004988:	e01e      	b.n	80049c8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d117      	bne.n	80049c8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f007 f9c2 	bl	800bd34 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80049b0:	2103      	movs	r1, #3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ff68 	bl	8004888 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <netif_set_link_up+0x5c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	08010c0c 	.word	0x08010c0c
 80049d4:	08010df4 	.word	0x08010df4
 80049d8:	08010c5c 	.word	0x08010c5c

080049dc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <netif_set_link_down+0x1e>
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <netif_set_link_down+0x54>)
 80049ec:	f240 4206 	movw	r2, #1030	; 0x406
 80049f0:	4910      	ldr	r1, [pc, #64]	; (8004a34 <netif_set_link_down+0x58>)
 80049f2:	4811      	ldr	r0, [pc, #68]	; (8004a38 <netif_set_link_down+0x5c>)
 80049f4:	f00b f81e 	bl	800fa34 <iprintf>
 80049f8:	e017      	b.n	8004a2a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d010      	beq.n	8004a2a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a0e:	f023 0304 	bic.w	r3, r3, #4
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <netif_set_link_down+0x4e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	08010c0c 	.word	0x08010c0c
 8004a34:	08010e18 	.word	0x08010e18
 8004a38:	08010c5c 	.word	0x08010c5c

08004a3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	61da      	str	r2, [r3, #28]
  }
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b085      	sub	sp, #20
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004a6a:	f06f 030b 	mvn.w	r3, #11
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <netif_get_by_index+0x48>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e00c      	b.n	8004aae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	79fa      	ldrb	r2, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d101      	bne.n	8004aa8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	e006      	b.n	8004ab6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000a40c 	.word	0x2000a40c

08004ac8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <pbuf_free_ooseq+0x38>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <pbuf_free_ooseq+0x3c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	607b      	str	r3, [r7, #4]
 8004ada:	e00a      	b.n	8004af2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f002 f94d 	bl	8006d84 <tcp_free_ooseq>
      return;
 8004aea:	e005      	b.n	8004af8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f1      	bne.n	8004adc <pbuf_free_ooseq+0x14>
    }
  }
}
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000a415 	.word	0x2000a415
 8004b04:	2000a424 	.word	0x2000a424

08004b08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <pbuf_pool_is_empty+0x14>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	2000a415 	.word	0x2000a415

08004b20 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	460b      	mov	r3, r1
 8004b30:	80fb      	strh	r3, [r7, #6]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	88fa      	ldrh	r2, [r7, #6]
 8004b46:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	88ba      	ldrh	r2, [r7, #4]
 8004b4c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004b4e:	8b3b      	ldrh	r3, [r7, #24]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	7f3a      	ldrb	r2, [r7, #28]
 8004b5a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	73da      	strb	r2, [r3, #15]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08c      	sub	sp, #48	; 0x30
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	80bb      	strh	r3, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004b8a:	887b      	ldrh	r3, [r7, #2]
 8004b8c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004b90:	d07f      	beq.n	8004c92 <pbuf_alloc+0x11e>
 8004b92:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004b96:	f300 80c8 	bgt.w	8004d2a <pbuf_alloc+0x1b6>
 8004b9a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004b9e:	d010      	beq.n	8004bc2 <pbuf_alloc+0x4e>
 8004ba0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004ba4:	f300 80c1 	bgt.w	8004d2a <pbuf_alloc+0x1b6>
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d002      	beq.n	8004bb2 <pbuf_alloc+0x3e>
 8004bac:	2b41      	cmp	r3, #65	; 0x41
 8004bae:	f040 80bc 	bne.w	8004d2a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	88bb      	ldrh	r3, [r7, #4]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f000 f8d1 	bl	8004d60 <pbuf_alloc_reference>
 8004bbe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004bc0:	e0bd      	b.n	8004d3e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004bca:	88bb      	ldrh	r3, [r7, #4]
 8004bcc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004bce:	2008      	movs	r0, #8
 8004bd0:	f7ff fbc2 	bl	8004358 <memp_malloc>
 8004bd4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004bdc:	f7ff ff94 	bl	8004b08 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <pbuf_alloc+0x78>
            pbuf_free(p);
 8004be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004be8:	f000 faa8 	bl	800513c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e0a7      	b.n	8004d40 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bf2:	3303      	adds	r3, #3
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8b7a      	ldrh	r2, [r7, #26]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bf28      	it	cs
 8004c08:	4613      	movcs	r3, r2
 8004c0a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004c0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c0e:	3310      	adds	r3, #16
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	3303      	adds	r3, #3
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	89f9      	ldrh	r1, [r7, #14]
 8004c1e:	8b7a      	ldrh	r2, [r7, #26]
 8004c20:	2300      	movs	r3, #0
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	887b      	ldrh	r3, [r7, #2]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	6938      	ldr	r0, [r7, #16]
 8004c2e:	f7ff ff77 	bl	8004b20 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <pbuf_alloc+0xd8>
 8004c3e:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <pbuf_alloc+0x1d4>)
 8004c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c44:	4941      	ldr	r1, [pc, #260]	; (8004d4c <pbuf_alloc+0x1d8>)
 8004c46:	4842      	ldr	r0, [pc, #264]	; (8004d50 <pbuf_alloc+0x1dc>)
 8004c48:	f00a fef4 	bl	800fa34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004c4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c4e:	3303      	adds	r3, #3
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004c58:	d106      	bne.n	8004c68 <pbuf_alloc+0xf4>
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <pbuf_alloc+0x1d4>)
 8004c5c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004c60:	493c      	ldr	r1, [pc, #240]	; (8004d54 <pbuf_alloc+0x1e0>)
 8004c62:	483b      	ldr	r0, [pc, #236]	; (8004d50 <pbuf_alloc+0x1dc>)
 8004c64:	f00a fee6 	bl	800fa34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	e002      	b.n	8004c7a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004c7e:	8b7a      	ldrh	r2, [r7, #26]
 8004c80:	89fb      	ldrh	r3, [r7, #14]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004c8a:	8b7b      	ldrh	r3, [r7, #26]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d19e      	bne.n	8004bce <pbuf_alloc+0x5a>
      break;
 8004c90:	e055      	b.n	8004d3e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004c92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c94:	3303      	adds	r3, #3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f023 0303 	bic.w	r3, r3, #3
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	88bb      	ldrh	r3, [r7, #4]
 8004ca0:	3303      	adds	r3, #3
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004cae:	8b3b      	ldrh	r3, [r7, #24]
 8004cb0:	3310      	adds	r3, #16
 8004cb2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004cb4:	8b3a      	ldrh	r2, [r7, #24]
 8004cb6:	88bb      	ldrh	r3, [r7, #4]
 8004cb8:	3303      	adds	r3, #3
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d306      	bcc.n	8004cd0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004cc2:	8afa      	ldrh	r2, [r7, #22]
 8004cc4:	88bb      	ldrh	r3, [r7, #4]
 8004cc6:	3303      	adds	r3, #3
 8004cc8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d201      	bcs.n	8004cd4 <pbuf_alloc+0x160>
        return NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e035      	b.n	8004d40 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004cd4:	8afb      	ldrh	r3, [r7, #22]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f9ae 	bl	8004038 <mem_malloc>
 8004cdc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <pbuf_alloc+0x174>
        return NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e02b      	b.n	8004d40 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004ce8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cea:	3310      	adds	r3, #16
 8004cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cee:	4413      	add	r3, r2
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	88b9      	ldrh	r1, [r7, #4]
 8004cfa:	88ba      	ldrh	r2, [r7, #4]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	460b      	mov	r3, r1
 8004d06:	4601      	mov	r1, r0
 8004d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d0a:	f7ff ff09 	bl	8004b20 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d010      	beq.n	8004d3c <pbuf_alloc+0x1c8>
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <pbuf_alloc+0x1d4>)
 8004d1c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004d20:	490d      	ldr	r1, [pc, #52]	; (8004d58 <pbuf_alloc+0x1e4>)
 8004d22:	480b      	ldr	r0, [pc, #44]	; (8004d50 <pbuf_alloc+0x1dc>)
 8004d24:	f00a fe86 	bl	800fa34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004d28:	e008      	b.n	8004d3c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <pbuf_alloc+0x1d4>)
 8004d2c:	f240 1227 	movw	r2, #295	; 0x127
 8004d30:	490a      	ldr	r1, [pc, #40]	; (8004d5c <pbuf_alloc+0x1e8>)
 8004d32:	4807      	ldr	r0, [pc, #28]	; (8004d50 <pbuf_alloc+0x1dc>)
 8004d34:	f00a fe7e 	bl	800fa34 <iprintf>
      return NULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e001      	b.n	8004d40 <pbuf_alloc+0x1cc>
      break;
 8004d3c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3728      	adds	r7, #40	; 0x28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08010e3c 	.word	0x08010e3c
 8004d4c:	08010e6c 	.word	0x08010e6c
 8004d50:	08010e9c 	.word	0x08010e9c
 8004d54:	08010ec4 	.word	0x08010ec4
 8004d58:	08010ef8 	.word	0x08010ef8
 8004d5c:	08010f24 	.word	0x08010f24

08004d60 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	807b      	strh	r3, [r7, #2]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004d70:	883b      	ldrh	r3, [r7, #0]
 8004d72:	2b41      	cmp	r3, #65	; 0x41
 8004d74:	d009      	beq.n	8004d8a <pbuf_alloc_reference+0x2a>
 8004d76:	883b      	ldrh	r3, [r7, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d006      	beq.n	8004d8a <pbuf_alloc_reference+0x2a>
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <pbuf_alloc_reference+0x5c>)
 8004d7e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004d82:	490f      	ldr	r1, [pc, #60]	; (8004dc0 <pbuf_alloc_reference+0x60>)
 8004d84:	480f      	ldr	r0, [pc, #60]	; (8004dc4 <pbuf_alloc_reference+0x64>)
 8004d86:	f00a fe55 	bl	800fa34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004d8a:	2007      	movs	r0, #7
 8004d8c:	f7ff fae4 	bl	8004358 <memp_malloc>
 8004d90:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e00b      	b.n	8004db4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004d9c:	8879      	ldrh	r1, [r7, #2]
 8004d9e:	887a      	ldrh	r2, [r7, #2]
 8004da0:	2300      	movs	r3, #0
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	883b      	ldrh	r3, [r7, #0]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	460b      	mov	r3, r1
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff feb7 	bl	8004b20 <pbuf_init_alloced_pbuf>
  return p;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	08010e3c 	.word	0x08010e3c
 8004dc0:	08010f40 	.word	0x08010f40
 8004dc4:	08010e9c 	.word	0x08010e9c

08004dc8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	81bb      	strh	r3, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004de0:	8a7b      	ldrh	r3, [r7, #18]
 8004de2:	3303      	adds	r3, #3
 8004de4:	f023 0203 	bic.w	r2, r3, #3
 8004de8:	89bb      	ldrh	r3, [r7, #12]
 8004dea:	441a      	add	r2, r3
 8004dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d901      	bls.n	8004df6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e018      	b.n	8004e28 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004dfc:	8a7b      	ldrh	r3, [r7, #18]
 8004dfe:	3303      	adds	r3, #3
 8004e00:	f023 0303 	bic.w	r3, r3, #3
 8004e04:	6a3a      	ldr	r2, [r7, #32]
 8004e06:	4413      	add	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e001      	b.n	8004e10 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	89b9      	ldrh	r1, [r7, #12]
 8004e14:	89ba      	ldrh	r2, [r7, #12]
 8004e16:	2302      	movs	r3, #2
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	f7ff fe7d 	bl	8004b20 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004e26:	687b      	ldr	r3, [r7, #4]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <pbuf_realloc+0x20>
 8004e42:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <pbuf_realloc+0xfc>)
 8004e44:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004e48:	4939      	ldr	r1, [pc, #228]	; (8004f30 <pbuf_realloc+0x100>)
 8004e4a:	483a      	ldr	r0, [pc, #232]	; (8004f34 <pbuf_realloc+0x104>)
 8004e4c:	f00a fdf2 	bl	800fa34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	891b      	ldrh	r3, [r3, #8]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d263      	bcs.n	8004f22 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	891a      	ldrh	r2, [r3, #8]
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004e64:	887b      	ldrh	r3, [r7, #2]
 8004e66:	817b      	strh	r3, [r7, #10]
  q = p;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004e6c:	e018      	b.n	8004ea0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	895b      	ldrh	r3, [r3, #10]
 8004e72:	897a      	ldrh	r2, [r7, #10]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	891a      	ldrh	r2, [r3, #8]
 8004e7c:	893b      	ldrh	r3, [r7, #8]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <pbuf_realloc+0x70>
 8004e92:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <pbuf_realloc+0xfc>)
 8004e94:	f240 12af 	movw	r2, #431	; 0x1af
 8004e98:	4927      	ldr	r1, [pc, #156]	; (8004f38 <pbuf_realloc+0x108>)
 8004e9a:	4826      	ldr	r0, [pc, #152]	; (8004f34 <pbuf_realloc+0x104>)
 8004e9c:	f00a fdca 	bl	800fa34 <iprintf>
  while (rem_len > q->len) {
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	895b      	ldrh	r3, [r3, #10]
 8004ea4:	897a      	ldrh	r2, [r7, #10]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d8e1      	bhi.n	8004e6e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	7b1b      	ldrb	r3, [r3, #12]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d121      	bne.n	8004efa <pbuf_realloc+0xca>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	895b      	ldrh	r3, [r3, #10]
 8004eba:	897a      	ldrh	r2, [r7, #10]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d01c      	beq.n	8004efa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	7b5b      	ldrb	r3, [r3, #13]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d116      	bne.n	8004efa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	4413      	add	r3, r2
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4619      	mov	r1, r3
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7fe ffae 	bl	8003e40 <mem_trim>
 8004ee4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <pbuf_realloc+0xca>
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <pbuf_realloc+0xfc>)
 8004eee:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004ef2:	4912      	ldr	r1, [pc, #72]	; (8004f3c <pbuf_realloc+0x10c>)
 8004ef4:	480f      	ldr	r0, [pc, #60]	; (8004f34 <pbuf_realloc+0x104>)
 8004ef6:	f00a fd9d 	bl	800fa34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	897a      	ldrh	r2, [r7, #10]
 8004efe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	895a      	ldrh	r2, [r3, #10]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 f911 	bl	800513c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e000      	b.n	8004f24 <pbuf_realloc+0xf4>
    return;
 8004f22:	bf00      	nop

}
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	08010e3c 	.word	0x08010e3c
 8004f30:	08010f54 	.word	0x08010f54
 8004f34:	08010e9c 	.word	0x08010e9c
 8004f38:	08010f6c 	.word	0x08010f6c
 8004f3c:	08010f84 	.word	0x08010f84

08004f40 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <pbuf_add_header_impl+0x22>
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <pbuf_add_header_impl+0xc4>)
 8004f56:	f240 12df 	movw	r2, #479	; 0x1df
 8004f5a:	492b      	ldr	r1, [pc, #172]	; (8005008 <pbuf_add_header_impl+0xc8>)
 8004f5c:	482b      	ldr	r0, [pc, #172]	; (800500c <pbuf_add_header_impl+0xcc>)
 8004f5e:	f00a fd69 	bl	800fa34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <pbuf_add_header_impl+0x30>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6e:	d301      	bcc.n	8004f74 <pbuf_add_header_impl+0x34>
    return 1;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e043      	b.n	8004ffc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <pbuf_add_header_impl+0x3e>
    return 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e03e      	b.n	8004ffc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	891a      	ldrh	r2, [r3, #8]
 8004f86:	8a7b      	ldrh	r3, [r7, #18]
 8004f88:	4413      	add	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8a7a      	ldrh	r2, [r7, #18]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d901      	bls.n	8004f96 <pbuf_add_header_impl+0x56>
    return 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e032      	b.n	8004ffc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	7b1b      	ldrb	r3, [r3, #12]
 8004f9a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004f9c:	8a3b      	ldrh	r3, [r7, #16]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	425b      	negs	r3, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3310      	adds	r3, #16
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d20d      	bcs.n	8004fd8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e01d      	b.n	8004ffc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d006      	beq.n	8004fd4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	425b      	negs	r3, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e001      	b.n	8004fd8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e011      	b.n	8004ffc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	895a      	ldrh	r2, [r3, #10]
 8004fe2:	8a7b      	ldrh	r3, [r7, #18]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	891a      	ldrh	r2, [r3, #8]
 8004ff0:	8a7b      	ldrh	r3, [r7, #18]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	811a      	strh	r2, [r3, #8]


  return 0;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	08010e3c 	.word	0x08010e3c
 8005008:	08010fa0 	.word	0x08010fa0
 800500c:	08010e9c 	.word	0x08010e9c

08005010 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800501a:	2200      	movs	r2, #0
 800501c:	6839      	ldr	r1, [r7, #0]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff ff8e 	bl	8004f40 <pbuf_add_header_impl>
 8005024:	4603      	mov	r3, r0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <pbuf_remove_header+0x1e>
 8005040:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <pbuf_remove_header+0x94>)
 8005042:	f240 224b 	movw	r2, #587	; 0x24b
 8005046:	4920      	ldr	r1, [pc, #128]	; (80050c8 <pbuf_remove_header+0x98>)
 8005048:	4820      	ldr	r0, [pc, #128]	; (80050cc <pbuf_remove_header+0x9c>)
 800504a:	f00a fcf3 	bl	800fa34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <pbuf_remove_header+0x2c>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505a:	d301      	bcc.n	8005060 <pbuf_remove_header+0x30>
    return 1;
 800505c:	2301      	movs	r3, #1
 800505e:	e02c      	b.n	80050ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <pbuf_remove_header+0x3a>
    return 0;
 8005066:	2300      	movs	r3, #0
 8005068:	e027      	b.n	80050ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	895b      	ldrh	r3, [r3, #10]
 8005072:	89fa      	ldrh	r2, [r7, #14]
 8005074:	429a      	cmp	r2, r3
 8005076:	d908      	bls.n	800508a <pbuf_remove_header+0x5a>
 8005078:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <pbuf_remove_header+0x94>)
 800507a:	f240 2255 	movw	r2, #597	; 0x255
 800507e:	4914      	ldr	r1, [pc, #80]	; (80050d0 <pbuf_remove_header+0xa0>)
 8005080:	4812      	ldr	r0, [pc, #72]	; (80050cc <pbuf_remove_header+0x9c>)
 8005082:	f00a fcd7 	bl	800fa34 <iprintf>
 8005086:	2301      	movs	r3, #1
 8005088:	e017      	b.n	80050ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	441a      	add	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	895a      	ldrh	r2, [r3, #10]
 80050a0:	89fb      	ldrh	r3, [r7, #14]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	891a      	ldrh	r2, [r3, #8]
 80050ae:	89fb      	ldrh	r3, [r7, #14]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	08010e3c 	.word	0x08010e3c
 80050c8:	08010fa0 	.word	0x08010fa0
 80050cc:	08010e9c 	.word	0x08010e9c
 80050d0:	08010fac 	.word	0x08010fac

080050d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
 80050e0:	4613      	mov	r3, r2
 80050e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80050e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	da08      	bge.n	80050fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80050ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050f0:	425b      	negs	r3, r3
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff ff9b 	bl	8005030 <pbuf_remove_header>
 80050fa:	4603      	mov	r3, r0
 80050fc:	e007      	b.n	800510e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80050fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005102:	787a      	ldrb	r2, [r7, #1]
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ff1a 	bl	8004f40 <pbuf_add_header_impl>
 800510c:	4603      	mov	r3, r0
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005126:	2201      	movs	r2, #1
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffd2 	bl	80050d4 <pbuf_header_impl>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <pbuf_free+0x22>
 8005150:	4b38      	ldr	r3, [pc, #224]	; (8005234 <pbuf_free+0xf8>)
 8005152:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005156:	4938      	ldr	r1, [pc, #224]	; (8005238 <pbuf_free+0xfc>)
 8005158:	4838      	ldr	r0, [pc, #224]	; (800523c <pbuf_free+0x100>)
 800515a:	f00a fc6b 	bl	800fa34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800515e:	2300      	movs	r3, #0
 8005160:	e063      	b.n	800522a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005166:	e05c      	b.n	8005222 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7b9b      	ldrb	r3, [r3, #14]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <pbuf_free+0x42>
 8005170:	4b30      	ldr	r3, [pc, #192]	; (8005234 <pbuf_free+0xf8>)
 8005172:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005176:	4932      	ldr	r1, [pc, #200]	; (8005240 <pbuf_free+0x104>)
 8005178:	4830      	ldr	r0, [pc, #192]	; (800523c <pbuf_free+0x100>)
 800517a:	f00a fc5b 	bl	800fa34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	7b9b      	ldrb	r3, [r3, #14]
 8005182:	3b01      	subs	r3, #1
 8005184:	b2da      	uxtb	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	739a      	strb	r2, [r3, #14]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7b9b      	ldrb	r3, [r3, #14]
 800518e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005190:	7dbb      	ldrb	r3, [r7, #22]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d143      	bne.n	800521e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7b1b      	ldrb	r3, [r3, #12]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7b5b      	ldrb	r3, [r3, #13]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d011      	beq.n	80051d6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <pbuf_free+0x90>
 80051be:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <pbuf_free+0xf8>)
 80051c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80051c4:	491f      	ldr	r1, [pc, #124]	; (8005244 <pbuf_free+0x108>)
 80051c6:	481d      	ldr	r0, [pc, #116]	; (800523c <pbuf_free+0x100>)
 80051c8:	f00a fc34 	bl	800fa34 <iprintf>
        pc->custom_free_function(p);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	4798      	blx	r3
 80051d4:	e01d      	b.n	8005212 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d104      	bne.n	80051e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	2008      	movs	r0, #8
 80051e0:	f7ff f92a 	bl	8004438 <memp_free>
 80051e4:	e015      	b.n	8005212 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d104      	bne.n	80051f6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	2007      	movs	r0, #7
 80051f0:	f7ff f922 	bl	8004438 <memp_free>
 80051f4:	e00d      	b.n	8005212 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <pbuf_free+0xc8>
          mem_free(p);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fe fdb5 	bl	8003d6c <mem_free>
 8005202:	e006      	b.n	8005212 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <pbuf_free+0xf8>)
 8005206:	f240 320f 	movw	r2, #783	; 0x30f
 800520a:	490f      	ldr	r1, [pc, #60]	; (8005248 <pbuf_free+0x10c>)
 800520c:	480b      	ldr	r0, [pc, #44]	; (800523c <pbuf_free+0x100>)
 800520e:	f00a fc11 	bl	800fa34 <iprintf>
        }
      }
      count++;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	3301      	adds	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	e001      	b.n	8005222 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d19f      	bne.n	8005168 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	08010e3c 	.word	0x08010e3c
 8005238:	08010fa0 	.word	0x08010fa0
 800523c:	08010e9c 	.word	0x08010e9c
 8005240:	08010fcc 	.word	0x08010fcc
 8005244:	08010fe4 	.word	0x08010fe4
 8005248:	08011008 	.word	0x08011008

0800524c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005258:	e005      	b.n	8005266 <pbuf_clen+0x1a>
    ++len;
 800525a:	89fb      	ldrh	r3, [r7, #14]
 800525c:	3301      	adds	r3, #1
 800525e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f6      	bne.n	800525a <pbuf_clen+0xe>
  }
  return len;
 800526c:	89fb      	ldrh	r3, [r7, #14]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d010      	beq.n	80052ac <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7b9b      	ldrb	r3, [r3, #14]
 800528e:	3301      	adds	r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7b9b      	ldrb	r3, [r3, #14]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <pbuf_ref+0x30>
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <pbuf_ref+0x38>)
 80052a0:	f240 3242 	movw	r2, #834	; 0x342
 80052a4:	4904      	ldr	r1, [pc, #16]	; (80052b8 <pbuf_ref+0x3c>)
 80052a6:	4805      	ldr	r0, [pc, #20]	; (80052bc <pbuf_ref+0x40>)
 80052a8:	f00a fbc4 	bl	800fa34 <iprintf>
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	08010e3c 	.word	0x08010e3c
 80052b8:	0801101c 	.word	0x0801101c
 80052bc:	08010e9c 	.word	0x08010e9c

080052c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <pbuf_cat+0x16>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <pbuf_cat+0x26>
 80052d6:	4b20      	ldr	r3, [pc, #128]	; (8005358 <pbuf_cat+0x98>)
 80052d8:	f240 3259 	movw	r2, #857	; 0x359
 80052dc:	491f      	ldr	r1, [pc, #124]	; (800535c <pbuf_cat+0x9c>)
 80052de:	4820      	ldr	r0, [pc, #128]	; (8005360 <pbuf_cat+0xa0>)
 80052e0:	f00a fba8 	bl	800fa34 <iprintf>
 80052e4:	e034      	b.n	8005350 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	e00a      	b.n	8005302 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	891a      	ldrh	r2, [r3, #8]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	891b      	ldrh	r3, [r3, #8]
 80052f4:	4413      	add	r3, r2
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	891a      	ldrh	r2, [r3, #8]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	895b      	ldrh	r3, [r3, #10]
 8005312:	429a      	cmp	r2, r3
 8005314:	d006      	beq.n	8005324 <pbuf_cat+0x64>
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <pbuf_cat+0x98>)
 8005318:	f240 3262 	movw	r2, #866	; 0x362
 800531c:	4911      	ldr	r1, [pc, #68]	; (8005364 <pbuf_cat+0xa4>)
 800531e:	4810      	ldr	r0, [pc, #64]	; (8005360 <pbuf_cat+0xa0>)
 8005320:	f00a fb88 	bl	800fa34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <pbuf_cat+0x7a>
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <pbuf_cat+0x98>)
 800532e:	f240 3263 	movw	r2, #867	; 0x363
 8005332:	490d      	ldr	r1, [pc, #52]	; (8005368 <pbuf_cat+0xa8>)
 8005334:	480a      	ldr	r0, [pc, #40]	; (8005360 <pbuf_cat+0xa0>)
 8005336:	f00a fb7d 	bl	800fa34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	891a      	ldrh	r2, [r3, #8]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	891b      	ldrh	r3, [r3, #8]
 8005342:	4413      	add	r3, r2
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08010e3c 	.word	0x08010e3c
 800535c:	08011030 	.word	0x08011030
 8005360:	08010e9c 	.word	0x08010e9c
 8005364:	08011068 	.word	0x08011068
 8005368:	08011098 	.word	0x08011098

0800536c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ffa1 	bl	80052c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800537e:	6838      	ldr	r0, [r7, #0]
 8005380:	f7ff ff7c 	bl	800527c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <pbuf_copy+0x2a>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <pbuf_copy+0x2a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	891a      	ldrh	r2, [r3, #8]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	891b      	ldrh	r3, [r3, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d209      	bcs.n	80053ca <pbuf_copy+0x3e>
 80053b6:	4b57      	ldr	r3, [pc, #348]	; (8005514 <pbuf_copy+0x188>)
 80053b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80053bc:	4956      	ldr	r1, [pc, #344]	; (8005518 <pbuf_copy+0x18c>)
 80053be:	4857      	ldr	r0, [pc, #348]	; (800551c <pbuf_copy+0x190>)
 80053c0:	f00a fb38 	bl	800fa34 <iprintf>
 80053c4:	f06f 030f 	mvn.w	r3, #15
 80053c8:	e09f      	b.n	800550a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	895b      	ldrh	r3, [r3, #10]
 80053ce:	461a      	mov	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	895b      	ldrh	r3, [r3, #10]
 80053d8:	4619      	mov	r1, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1acb      	subs	r3, r1, r3
 80053de:	429a      	cmp	r2, r3
 80053e0:	d306      	bcc.n	80053f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	895b      	ldrh	r3, [r3, #10]
 80053e6:	461a      	mov	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e005      	b.n	80053fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	895b      	ldrh	r3, [r3, #10]
 80053f4:	461a      	mov	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	18d0      	adds	r0, r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4619      	mov	r1, r3
 8005410:	f00a fbeb 	bl	800fbea <memcpy>
    offset_to += len;
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	895b      	ldrh	r3, [r3, #10]
 8005428:	461a      	mov	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4293      	cmp	r3, r2
 800542e:	d906      	bls.n	800543e <pbuf_copy+0xb2>
 8005430:	4b38      	ldr	r3, [pc, #224]	; (8005514 <pbuf_copy+0x188>)
 8005432:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005436:	493a      	ldr	r1, [pc, #232]	; (8005520 <pbuf_copy+0x194>)
 8005438:	4838      	ldr	r0, [pc, #224]	; (800551c <pbuf_copy+0x190>)
 800543a:	f00a fafb 	bl	800fa34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	895b      	ldrh	r3, [r3, #10]
 8005442:	461a      	mov	r2, r3
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4293      	cmp	r3, r2
 8005448:	d906      	bls.n	8005458 <pbuf_copy+0xcc>
 800544a:	4b32      	ldr	r3, [pc, #200]	; (8005514 <pbuf_copy+0x188>)
 800544c:	f240 32da 	movw	r2, #986	; 0x3da
 8005450:	4934      	ldr	r1, [pc, #208]	; (8005524 <pbuf_copy+0x198>)
 8005452:	4832      	ldr	r0, [pc, #200]	; (800551c <pbuf_copy+0x190>)
 8005454:	f00a faee 	bl	800fa34 <iprintf>
    if (offset_from >= p_from->len) {
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	895b      	ldrh	r3, [r3, #10]
 800545c:	461a      	mov	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4293      	cmp	r3, r2
 8005462:	d304      	bcc.n	800546e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	895b      	ldrh	r3, [r3, #10]
 8005472:	461a      	mov	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4293      	cmp	r3, r2
 8005478:	d114      	bne.n	80054a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10c      	bne.n	80054a4 <pbuf_copy+0x118>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <pbuf_copy+0x118>
 8005490:	4b20      	ldr	r3, [pc, #128]	; (8005514 <pbuf_copy+0x188>)
 8005492:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005496:	4924      	ldr	r1, [pc, #144]	; (8005528 <pbuf_copy+0x19c>)
 8005498:	4820      	ldr	r0, [pc, #128]	; (800551c <pbuf_copy+0x190>)
 800549a:	f00a facb 	bl	800fa34 <iprintf>
 800549e:	f06f 030f 	mvn.w	r3, #15
 80054a2:	e032      	b.n	800550a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d013      	beq.n	80054d2 <pbuf_copy+0x146>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	895a      	ldrh	r2, [r3, #10]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	891b      	ldrh	r3, [r3, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d10d      	bne.n	80054d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <pbuf_copy+0x146>
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <pbuf_copy+0x188>)
 80054c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80054c4:	4919      	ldr	r1, [pc, #100]	; (800552c <pbuf_copy+0x1a0>)
 80054c6:	4815      	ldr	r0, [pc, #84]	; (800551c <pbuf_copy+0x190>)
 80054c8:	f00a fab4 	bl	800fa34 <iprintf>
 80054cc:	f06f 0305 	mvn.w	r3, #5
 80054d0:	e01b      	b.n	800550a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d013      	beq.n	8005500 <pbuf_copy+0x174>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	895a      	ldrh	r2, [r3, #10]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	891b      	ldrh	r3, [r3, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d10d      	bne.n	8005500 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <pbuf_copy+0x174>
 80054ec:	4b09      	ldr	r3, [pc, #36]	; (8005514 <pbuf_copy+0x188>)
 80054ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80054f2:	490e      	ldr	r1, [pc, #56]	; (800552c <pbuf_copy+0x1a0>)
 80054f4:	4809      	ldr	r0, [pc, #36]	; (800551c <pbuf_copy+0x190>)
 80054f6:	f00a fa9d 	bl	800fa34 <iprintf>
 80054fa:	f06f 0305 	mvn.w	r3, #5
 80054fe:	e004      	b.n	800550a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f47f af61 	bne.w	80053ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	08010e3c 	.word	0x08010e3c
 8005518:	080110e4 	.word	0x080110e4
 800551c:	08010e9c 	.word	0x08010e9c
 8005520:	08011114 	.word	0x08011114
 8005524:	0801112c 	.word	0x0801112c
 8005528:	08011148 	.word	0x08011148
 800552c:	08011158 	.word	0x08011158

08005530 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4611      	mov	r1, r2
 800553c:	461a      	mov	r2, r3
 800553e:	460b      	mov	r3, r1
 8005540:	80fb      	strh	r3, [r7, #6]
 8005542:	4613      	mov	r3, r2
 8005544:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d108      	bne.n	8005566 <pbuf_copy_partial+0x36>
 8005554:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <pbuf_copy_partial+0xd4>)
 8005556:	f240 420a 	movw	r2, #1034	; 0x40a
 800555a:	492b      	ldr	r1, [pc, #172]	; (8005608 <pbuf_copy_partial+0xd8>)
 800555c:	482b      	ldr	r0, [pc, #172]	; (800560c <pbuf_copy_partial+0xdc>)
 800555e:	f00a fa69 	bl	800fa34 <iprintf>
 8005562:	2300      	movs	r3, #0
 8005564:	e04a      	b.n	80055fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <pbuf_copy_partial+0x4e>
 800556c:	4b25      	ldr	r3, [pc, #148]	; (8005604 <pbuf_copy_partial+0xd4>)
 800556e:	f240 420b 	movw	r2, #1035	; 0x40b
 8005572:	4927      	ldr	r1, [pc, #156]	; (8005610 <pbuf_copy_partial+0xe0>)
 8005574:	4825      	ldr	r0, [pc, #148]	; (800560c <pbuf_copy_partial+0xdc>)
 8005576:	f00a fa5d 	bl	800fa34 <iprintf>
 800557a:	2300      	movs	r3, #0
 800557c:	e03e      	b.n	80055fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e034      	b.n	80055ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005584:	88bb      	ldrh	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <pbuf_copy_partial+0x70>
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	895b      	ldrh	r3, [r3, #10]
 800558e:	88ba      	ldrh	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d305      	bcc.n	80055a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	895b      	ldrh	r3, [r3, #10]
 8005598:	88ba      	ldrh	r2, [r7, #4]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	80bb      	strh	r3, [r7, #4]
 800559e:	e023      	b.n	80055e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	895a      	ldrh	r2, [r3, #10]
 80055a4:	88bb      	ldrh	r3, [r7, #4]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80055aa:	8b3a      	ldrh	r2, [r7, #24]
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d901      	bls.n	80055b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80055b6:	8b7b      	ldrh	r3, [r7, #26]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	18d0      	adds	r0, r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	88bb      	ldrh	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	8b3a      	ldrh	r2, [r7, #24]
 80055c6:	4619      	mov	r1, r3
 80055c8:	f00a fb0f 	bl	800fbea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80055cc:	8afa      	ldrh	r2, [r7, #22]
 80055ce:	8b3b      	ldrh	r3, [r7, #24]
 80055d0:	4413      	add	r3, r2
 80055d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80055d4:	8b7a      	ldrh	r2, [r7, #26]
 80055d6:	8b3b      	ldrh	r3, [r7, #24]
 80055d8:	4413      	add	r3, r2
 80055da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	8b3b      	ldrh	r3, [r7, #24]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <pbuf_copy_partial+0xca>
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1c4      	bne.n	8005584 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80055fa:	8afb      	ldrh	r3, [r7, #22]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	08010e3c 	.word	0x08010e3c
 8005608:	08011184 	.word	0x08011184
 800560c:	08010e9c 	.word	0x08010e9c
 8005610:	080111a4 	.word	0x080111a4

08005614 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	603a      	str	r2, [r7, #0]
 800561e:	71fb      	strb	r3, [r7, #7]
 8005620:	460b      	mov	r3, r1
 8005622:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	8919      	ldrh	r1, [r3, #8]
 8005628:	88ba      	ldrh	r2, [r7, #4]
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff faa1 	bl	8004b74 <pbuf_alloc>
 8005632:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <pbuf_clone+0x2a>
    return NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	e011      	b.n	8005662 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fea3 	bl	800538c <pbuf_copy>
 8005646:	4603      	mov	r3, r0
 8005648:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800564a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d006      	beq.n	8005660 <pbuf_clone+0x4c>
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <pbuf_clone+0x58>)
 8005654:	f240 5224 	movw	r2, #1316	; 0x524
 8005658:	4905      	ldr	r1, [pc, #20]	; (8005670 <pbuf_clone+0x5c>)
 800565a:	4806      	ldr	r0, [pc, #24]	; (8005674 <pbuf_clone+0x60>)
 800565c:	f00a f9ea 	bl	800fa34 <iprintf>
  return q;
 8005660:	68fb      	ldr	r3, [r7, #12]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08010e3c 	.word	0x08010e3c
 8005670:	080112b0 	.word	0x080112b0
 8005674:	08010e9c 	.word	0x08010e9c

08005678 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800567c:	f00a f8da 	bl	800f834 <rand>
 8005680:	4603      	mov	r3, r0
 8005682:	b29b      	uxth	r3, r3
 8005684:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005688:	b29b      	uxth	r3, r3
 800568a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800568e:	b29a      	uxth	r2, r3
 8005690:	4b01      	ldr	r3, [pc, #4]	; (8005698 <tcp_init+0x20>)
 8005692:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005694:	bf00      	nop
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000020 	.word	0x20000020

0800569c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7d1b      	ldrb	r3, [r3, #20]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d105      	bne.n	80056b8 <tcp_free+0x1c>
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <tcp_free+0x2c>)
 80056ae:	22d4      	movs	r2, #212	; 0xd4
 80056b0:	4906      	ldr	r1, [pc, #24]	; (80056cc <tcp_free+0x30>)
 80056b2:	4807      	ldr	r0, [pc, #28]	; (80056d0 <tcp_free+0x34>)
 80056b4:	f00a f9be 	bl	800fa34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	2001      	movs	r0, #1
 80056bc:	f7fe febc 	bl	8004438 <memp_free>
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	0801133c 	.word	0x0801133c
 80056cc:	0801136c 	.word	0x0801136c
 80056d0:	08011380 	.word	0x08011380

080056d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	7d1b      	ldrb	r3, [r3, #20]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d105      	bne.n	80056f0 <tcp_free_listen+0x1c>
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <tcp_free_listen+0x2c>)
 80056e6:	22df      	movs	r2, #223	; 0xdf
 80056e8:	4906      	ldr	r1, [pc, #24]	; (8005704 <tcp_free_listen+0x30>)
 80056ea:	4807      	ldr	r0, [pc, #28]	; (8005708 <tcp_free_listen+0x34>)
 80056ec:	f00a f9a2 	bl	800fa34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	2002      	movs	r0, #2
 80056f4:	f7fe fea0 	bl	8004438 <memp_free>
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	0801133c 	.word	0x0801133c
 8005704:	080113a8 	.word	0x080113a8
 8005708:	08011380 	.word	0x08011380

0800570c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005710:	f000 fea2 	bl	8006458 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005714:	4b07      	ldr	r3, [pc, #28]	; (8005734 <tcp_tmr+0x28>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	3301      	adds	r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <tcp_tmr+0x28>)
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <tcp_tmr+0x28>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800572c:	f000 fb54 	bl	8005dd8 <tcp_slowtmr>
  }
}
 8005730:	bf00      	nop
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2000a42d 	.word	0x2000a42d

08005738 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <tcp_remove_listener+0x1c>
 8005748:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <tcp_remove_listener+0x48>)
 800574a:	22ff      	movs	r2, #255	; 0xff
 800574c:	490d      	ldr	r1, [pc, #52]	; (8005784 <tcp_remove_listener+0x4c>)
 800574e:	480e      	ldr	r0, [pc, #56]	; (8005788 <tcp_remove_listener+0x50>)
 8005750:	f00a f970 	bl	800fa34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e00a      	b.n	8005770 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d102      	bne.n	800576a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f1      	bne.n	800575a <tcp_remove_listener+0x22>
    }
  }
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	0801133c 	.word	0x0801133c
 8005784:	080113c4 	.word	0x080113c4
 8005788:	08011380 	.word	0x08011380

0800578c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <tcp_listen_closed+0x1c>
 800579a:	4b14      	ldr	r3, [pc, #80]	; (80057ec <tcp_listen_closed+0x60>)
 800579c:	f240 1211 	movw	r2, #273	; 0x111
 80057a0:	4913      	ldr	r1, [pc, #76]	; (80057f0 <tcp_listen_closed+0x64>)
 80057a2:	4814      	ldr	r0, [pc, #80]	; (80057f4 <tcp_listen_closed+0x68>)
 80057a4:	f00a f946 	bl	800fa34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	7d1b      	ldrb	r3, [r3, #20]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d006      	beq.n	80057be <tcp_listen_closed+0x32>
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <tcp_listen_closed+0x60>)
 80057b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80057b6:	4910      	ldr	r1, [pc, #64]	; (80057f8 <tcp_listen_closed+0x6c>)
 80057b8:	480e      	ldr	r0, [pc, #56]	; (80057f4 <tcp_listen_closed+0x68>)
 80057ba:	f00a f93b 	bl	800fa34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80057be:	2301      	movs	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	e00b      	b.n	80057dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <tcp_listen_closed+0x70>)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ffb1 	bl	8005738 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d9f0      	bls.n	80057c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	0801133c 	.word	0x0801133c
 80057f0:	080113ec 	.word	0x080113ec
 80057f4:	08011380 	.word	0x08011380
 80057f8:	080113f8 	.word	0x080113f8
 80057fc:	080136b4 	.word	0x080136b4

08005800 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005800:	b5b0      	push	{r4, r5, r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af04      	add	r7, sp, #16
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <tcp_close_shutdown+0x20>
 8005812:	4b63      	ldr	r3, [pc, #396]	; (80059a0 <tcp_close_shutdown+0x1a0>)
 8005814:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005818:	4962      	ldr	r1, [pc, #392]	; (80059a4 <tcp_close_shutdown+0x1a4>)
 800581a:	4863      	ldr	r0, [pc, #396]	; (80059a8 <tcp_close_shutdown+0x1a8>)
 800581c:	f00a f90a 	bl	800fa34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d066      	beq.n	80058f4 <tcp_close_shutdown+0xf4>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7d1b      	ldrb	r3, [r3, #20]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d003      	beq.n	8005836 <tcp_close_shutdown+0x36>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7d1b      	ldrb	r3, [r3, #20]
 8005832:	2b07      	cmp	r3, #7
 8005834:	d15e      	bne.n	80058f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <tcp_close_shutdown+0x48>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005846:	d055      	beq.n	80058f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8b5b      	ldrh	r3, [r3, #26]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <tcp_close_shutdown+0x62>
 8005854:	4b52      	ldr	r3, [pc, #328]	; (80059a0 <tcp_close_shutdown+0x1a0>)
 8005856:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800585a:	4954      	ldr	r1, [pc, #336]	; (80059ac <tcp_close_shutdown+0x1ac>)
 800585c:	4852      	ldr	r0, [pc, #328]	; (80059a8 <tcp_close_shutdown+0x1a8>)
 800585e:	f00a f8e9 	bl	800fa34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800586a:	687d      	ldr	r5, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	8ad2      	ldrh	r2, [r2, #22]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	8b09      	ldrh	r1, [r1, #24]
 8005878:	9102      	str	r1, [sp, #8]
 800587a:	9201      	str	r2, [sp, #4]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	462b      	mov	r3, r5
 8005880:	4622      	mov	r2, r4
 8005882:	4601      	mov	r1, r0
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f004 fe91 	bl	800a5ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 f8c6 	bl	8006a1c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005890:	4b47      	ldr	r3, [pc, #284]	; (80059b0 <tcp_close_shutdown+0x1b0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d105      	bne.n	80058a6 <tcp_close_shutdown+0xa6>
 800589a:	4b45      	ldr	r3, [pc, #276]	; (80059b0 <tcp_close_shutdown+0x1b0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4a43      	ldr	r2, [pc, #268]	; (80059b0 <tcp_close_shutdown+0x1b0>)
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	e013      	b.n	80058ce <tcp_close_shutdown+0xce>
 80058a6:	4b42      	ldr	r3, [pc, #264]	; (80059b0 <tcp_close_shutdown+0x1b0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e00c      	b.n	80058c8 <tcp_close_shutdown+0xc8>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d104      	bne.n	80058c2 <tcp_close_shutdown+0xc2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	60da      	str	r2, [r3, #12]
 80058c0:	e005      	b.n	80058ce <tcp_close_shutdown+0xce>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1ef      	bne.n	80058ae <tcp_close_shutdown+0xae>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	4b37      	ldr	r3, [pc, #220]	; (80059b4 <tcp_close_shutdown+0x1b4>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80058da:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <tcp_close_shutdown+0x1b8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d102      	bne.n	80058ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80058e4:	f003 fd5e 	bl	80093a4 <tcp_trigger_input_pcb_close>
 80058e8:	e002      	b.n	80058f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff fed6 	bl	800569c <tcp_free>
      }
      return ERR_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e050      	b.n	8005996 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	7d1b      	ldrb	r3, [r3, #20]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d03b      	beq.n	8005974 <tcp_close_shutdown+0x174>
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	dc44      	bgt.n	800598a <tcp_close_shutdown+0x18a>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <tcp_close_shutdown+0x10a>
 8005904:	2b01      	cmp	r3, #1
 8005906:	d02a      	beq.n	800595e <tcp_close_shutdown+0x15e>
 8005908:	e03f      	b.n	800598a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8adb      	ldrh	r3, [r3, #22]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d021      	beq.n	8005956 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005912:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <tcp_close_shutdown+0x1bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d105      	bne.n	8005928 <tcp_close_shutdown+0x128>
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <tcp_close_shutdown+0x1bc>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	4a26      	ldr	r2, [pc, #152]	; (80059bc <tcp_close_shutdown+0x1bc>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e013      	b.n	8005950 <tcp_close_shutdown+0x150>
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <tcp_close_shutdown+0x1bc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	e00c      	b.n	800594a <tcp_close_shutdown+0x14a>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	d104      	bne.n	8005944 <tcp_close_shutdown+0x144>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e005      	b.n	8005950 <tcp_close_shutdown+0x150>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1ef      	bne.n	8005930 <tcp_close_shutdown+0x130>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fea0 	bl	800569c <tcp_free>
      break;
 800595c:	e01a      	b.n	8005994 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff14 	bl	800578c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4816      	ldr	r0, [pc, #88]	; (80059c0 <tcp_close_shutdown+0x1c0>)
 8005968:	f001 f8a8 	bl	8006abc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff feb1 	bl	80056d4 <tcp_free_listen>
      break;
 8005972:	e00f      	b.n	8005994 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	480e      	ldr	r0, [pc, #56]	; (80059b0 <tcp_close_shutdown+0x1b0>)
 8005978:	f001 f8a0 	bl	8006abc <tcp_pcb_remove>
 800597c:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <tcp_close_shutdown+0x1b4>)
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fe8a 	bl	800569c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005988:	e004      	b.n	8005994 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f81a 	bl	80059c4 <tcp_close_shutdown_fin>
 8005990:	4603      	mov	r3, r0
 8005992:	e000      	b.n	8005996 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bdb0      	pop	{r4, r5, r7, pc}
 800599e:	bf00      	nop
 80059a0:	0801133c 	.word	0x0801133c
 80059a4:	08011410 	.word	0x08011410
 80059a8:	08011380 	.word	0x08011380
 80059ac:	08011430 	.word	0x08011430
 80059b0:	2000a424 	.word	0x2000a424
 80059b4:	2000a42c 	.word	0x2000a42c
 80059b8:	2000a464 	.word	0x2000a464
 80059bc:	2000a41c 	.word	0x2000a41c
 80059c0:	2000a420 	.word	0x2000a420

080059c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <tcp_close_shutdown_fin+0x1c>
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <tcp_close_shutdown_fin+0xc8>)
 80059d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80059d8:	492d      	ldr	r1, [pc, #180]	; (8005a90 <tcp_close_shutdown_fin+0xcc>)
 80059da:	482e      	ldr	r0, [pc, #184]	; (8005a94 <tcp_close_shutdown_fin+0xd0>)
 80059dc:	f00a f82a 	bl	800fa34 <iprintf>

  switch (pcb->state) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	7d1b      	ldrb	r3, [r3, #20]
 80059e4:	2b07      	cmp	r3, #7
 80059e6:	d020      	beq.n	8005a2a <tcp_close_shutdown_fin+0x66>
 80059e8:	2b07      	cmp	r3, #7
 80059ea:	dc2b      	bgt.n	8005a44 <tcp_close_shutdown_fin+0x80>
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d002      	beq.n	80059f6 <tcp_close_shutdown_fin+0x32>
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d00d      	beq.n	8005a10 <tcp_close_shutdown_fin+0x4c>
 80059f4:	e026      	b.n	8005a44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f003 fee6 	bl	80097c8 <tcp_send_fin>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11f      	bne.n	8005a48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2205      	movs	r2, #5
 8005a0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005a0e:	e01b      	b.n	8005a48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f003 fed9 	bl	80097c8 <tcp_send_fin>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d114      	bne.n	8005a4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2205      	movs	r2, #5
 8005a26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005a28:	e010      	b.n	8005a4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f003 fecc 	bl	80097c8 <tcp_send_fin>
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2209      	movs	r2, #9
 8005a40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005a42:	e005      	b.n	8005a50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	e01c      	b.n	8005a82 <tcp_close_shutdown_fin+0xbe>
      break;
 8005a48:	bf00      	nop
 8005a4a:	e002      	b.n	8005a52 <tcp_close_shutdown_fin+0x8e>
      break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <tcp_close_shutdown_fin+0x8e>
      break;
 8005a50:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f003 fff2 	bl	8009a44 <tcp_output>
 8005a60:	e00d      	b.n	8005a7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a6a:	d108      	bne.n	8005a7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8b5b      	ldrh	r3, [r3, #26]
 8005a70:	f043 0308 	orr.w	r3, r3, #8
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e001      	b.n	8005a82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	0801133c 	.word	0x0801133c
 8005a90:	080113ec 	.word	0x080113ec
 8005a94:	08011380 	.word	0x08011380

08005a98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <tcp_close+0x22>
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <tcp_close+0x4c>)
 8005aa8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005aac:	490e      	ldr	r1, [pc, #56]	; (8005ae8 <tcp_close+0x50>)
 8005aae:	480f      	ldr	r0, [pc, #60]	; (8005aec <tcp_close+0x54>)
 8005ab0:	f009 ffc0 	bl	800fa34 <iprintf>
 8005ab4:	f06f 030f 	mvn.w	r3, #15
 8005ab8:	e00f      	b.n	8005ada <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	7d1b      	ldrb	r3, [r3, #20]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d006      	beq.n	8005ad0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8b5b      	ldrh	r3, [r3, #26]
 8005ac6:	f043 0310 	orr.w	r3, r3, #16
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fe94 	bl	8005800 <tcp_close_shutdown>
 8005ad8:	4603      	mov	r3, r0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	0801133c 	.word	0x0801133c
 8005ae8:	0801144c 	.word	0x0801144c
 8005aec:	08011380 	.word	0x08011380

08005af0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
 8005af4:	af04      	add	r7, sp, #16
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d107      	bne.n	8005b10 <tcp_abandon+0x20>
 8005b00:	4b52      	ldr	r3, [pc, #328]	; (8005c4c <tcp_abandon+0x15c>)
 8005b02:	f240 223d 	movw	r2, #573	; 0x23d
 8005b06:	4952      	ldr	r1, [pc, #328]	; (8005c50 <tcp_abandon+0x160>)
 8005b08:	4852      	ldr	r0, [pc, #328]	; (8005c54 <tcp_abandon+0x164>)
 8005b0a:	f009 ff93 	bl	800fa34 <iprintf>
 8005b0e:	e099      	b.n	8005c44 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	7d1b      	ldrb	r3, [r3, #20]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d106      	bne.n	8005b26 <tcp_abandon+0x36>
 8005b18:	4b4c      	ldr	r3, [pc, #304]	; (8005c4c <tcp_abandon+0x15c>)
 8005b1a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005b1e:	494e      	ldr	r1, [pc, #312]	; (8005c58 <tcp_abandon+0x168>)
 8005b20:	484c      	ldr	r0, [pc, #304]	; (8005c54 <tcp_abandon+0x164>)
 8005b22:	f009 ff87 	bl	800fa34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7d1b      	ldrb	r3, [r3, #20]
 8005b2a:	2b0a      	cmp	r3, #10
 8005b2c:	d107      	bne.n	8005b3e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	484a      	ldr	r0, [pc, #296]	; (8005c5c <tcp_abandon+0x16c>)
 8005b32:	f000 ffc3 	bl	8006abc <tcp_pcb_remove>
    tcp_free(pcb);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fdb0 	bl	800569c <tcp_free>
 8005b3c:	e082      	b.n	8005c44 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7d1b      	ldrb	r3, [r3, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d126      	bne.n	8005bb6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8adb      	ldrh	r3, [r3, #22]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02e      	beq.n	8005bce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005b70:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <tcp_abandon+0x170>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d105      	bne.n	8005b86 <tcp_abandon+0x96>
 8005b7a:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <tcp_abandon+0x170>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a37      	ldr	r2, [pc, #220]	; (8005c60 <tcp_abandon+0x170>)
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	e013      	b.n	8005bae <tcp_abandon+0xbe>
 8005b86:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <tcp_abandon+0x170>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e00c      	b.n	8005ba8 <tcp_abandon+0xb8>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d104      	bne.n	8005ba2 <tcp_abandon+0xb2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	e005      	b.n	8005bae <tcp_abandon+0xbe>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ef      	bne.n	8005b8e <tcp_abandon+0x9e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	60da      	str	r2, [r3, #12]
 8005bb4:	e00b      	b.n	8005bce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8adb      	ldrh	r3, [r3, #22]
 8005bbe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4828      	ldr	r0, [pc, #160]	; (8005c64 <tcp_abandon+0x174>)
 8005bc4:	f000 ff7a 	bl	8006abc <tcp_pcb_remove>
 8005bc8:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <tcp_abandon+0x178>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fd1c 	bl	8006618 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fd13 	bl	8006618 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fd0a 	bl	8006618 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	8b12      	ldrh	r2, [r2, #24]
 8005c14:	9202      	str	r2, [sp, #8]
 8005c16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005c18:	9201      	str	r2, [sp, #4]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	69b9      	ldr	r1, [r7, #24]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f004 fcc2 	bl	800a5ac <tcp_rst>
    }
    last_state = pcb->state;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7d1b      	ldrb	r3, [r3, #20]
 8005c2c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff fd34 	bl	800569c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d004      	beq.n	8005c44 <tcp_abandon+0x154>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f06f 010c 	mvn.w	r1, #12
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	4798      	blx	r3
  }
}
 8005c44:	3728      	adds	r7, #40	; 0x28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	0801133c 	.word	0x0801133c
 8005c50:	08011480 	.word	0x08011480
 8005c54:	08011380 	.word	0x08011380
 8005c58:	0801149c 	.word	0x0801149c
 8005c5c:	2000a428 	.word	0x2000a428
 8005c60:	2000a41c 	.word	0x2000a41c
 8005c64:	2000a424 	.word	0x2000a424
 8005c68:	2000a42c 	.word	0x2000a42c

08005c6c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005c74:	2101      	movs	r1, #1
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff ff3a 	bl	8005af0 <tcp_abandon>
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <tcp_update_rcv_ann_wnd+0x1c>
 8005c92:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <tcp_update_rcv_ann_wnd+0xa4>)
 8005c94:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005c98:	4924      	ldr	r1, [pc, #144]	; (8005d2c <tcp_update_rcv_ann_wnd+0xa8>)
 8005c9a:	4825      	ldr	r0, [pc, #148]	; (8005d30 <tcp_update_rcv_ann_wnd+0xac>)
 8005c9c:	f009 feca 	bl	800fa34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005ca8:	4413      	add	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005cb4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005cb8:	bf28      	it	cs
 8005cba:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db08      	blt.n	8005cdc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	e020      	b.n	8005d1e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd03      	ble.n	8005cf2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cf0:	e014      	b.n	8005d1c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d306      	bcc.n	8005d14 <tcp_update_rcv_ann_wnd+0x90>
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <tcp_update_rcv_ann_wnd+0xa4>)
 8005d08:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005d0c:	4909      	ldr	r1, [pc, #36]	; (8005d34 <tcp_update_rcv_ann_wnd+0xb0>)
 8005d0e:	4808      	ldr	r0, [pc, #32]	; (8005d30 <tcp_update_rcv_ann_wnd+0xac>)
 8005d10:	f009 fe90 	bl	800fa34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005d1c:	2300      	movs	r3, #0
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	0801133c 	.word	0x0801133c
 8005d2c:	08011598 	.word	0x08011598
 8005d30:	08011380 	.word	0x08011380
 8005d34:	080115bc 	.word	0x080115bc

08005d38 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <tcp_recved+0x22>
 8005d4a:	4b1f      	ldr	r3, [pc, #124]	; (8005dc8 <tcp_recved+0x90>)
 8005d4c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005d50:	491e      	ldr	r1, [pc, #120]	; (8005dcc <tcp_recved+0x94>)
 8005d52:	481f      	ldr	r0, [pc, #124]	; (8005dd0 <tcp_recved+0x98>)
 8005d54:	f009 fe6e 	bl	800fa34 <iprintf>
 8005d58:	e032      	b.n	8005dc0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7d1b      	ldrb	r3, [r3, #20]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d106      	bne.n	8005d70 <tcp_recved+0x38>
 8005d62:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <tcp_recved+0x90>)
 8005d64:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005d68:	491a      	ldr	r1, [pc, #104]	; (8005dd4 <tcp_recved+0x9c>)
 8005d6a:	4819      	ldr	r0, [pc, #100]	; (8005dd0 <tcp_recved+0x98>)
 8005d6c:	f009 fe62 	bl	800fa34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	4413      	add	r3, r2
 8005d78:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005d7a:	89fb      	ldrh	r3, [r7, #14]
 8005d7c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005d80:	d804      	bhi.n	8005d8c <tcp_recved+0x54>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	89fa      	ldrh	r2, [r7, #14]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d204      	bcs.n	8005d96 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005d92:	851a      	strh	r2, [r3, #40]	; 0x28
 8005d94:	e002      	b.n	8005d9c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	89fa      	ldrh	r2, [r7, #14]
 8005d9a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff71 	bl	8005c84 <tcp_update_rcv_ann_wnd>
 8005da2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005daa:	d309      	bcc.n	8005dc0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8b5b      	ldrh	r3, [r3, #26]
 8005db0:	f043 0302 	orr.w	r3, r3, #2
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f003 fe42 	bl	8009a44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	0801133c 	.word	0x0801133c
 8005dcc:	080115d8 	.word	0x080115d8
 8005dd0:	08011380 	.word	0x08011380
 8005dd4:	080115f0 	.word	0x080115f0

08005dd8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005dd8:	b5b0      	push	{r4, r5, r7, lr}
 8005dda:	b090      	sub	sp, #64	; 0x40
 8005ddc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005de4:	4b94      	ldr	r3, [pc, #592]	; (8006038 <tcp_slowtmr+0x260>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	4a93      	ldr	r2, [pc, #588]	; (8006038 <tcp_slowtmr+0x260>)
 8005dec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005dee:	4b93      	ldr	r3, [pc, #588]	; (800603c <tcp_slowtmr+0x264>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	4b91      	ldr	r3, [pc, #580]	; (800603c <tcp_slowtmr+0x264>)
 8005df8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005dfe:	4b90      	ldr	r3, [pc, #576]	; (8006040 <tcp_slowtmr+0x268>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005e04:	e29d      	b.n	8006342 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	7d1b      	ldrb	r3, [r3, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <tcp_slowtmr+0x44>
 8005e0e:	4b8d      	ldr	r3, [pc, #564]	; (8006044 <tcp_slowtmr+0x26c>)
 8005e10:	f240 42be 	movw	r2, #1214	; 0x4be
 8005e14:	498c      	ldr	r1, [pc, #560]	; (8006048 <tcp_slowtmr+0x270>)
 8005e16:	488d      	ldr	r0, [pc, #564]	; (800604c <tcp_slowtmr+0x274>)
 8005e18:	f009 fe0c 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	7d1b      	ldrb	r3, [r3, #20]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d106      	bne.n	8005e32 <tcp_slowtmr+0x5a>
 8005e24:	4b87      	ldr	r3, [pc, #540]	; (8006044 <tcp_slowtmr+0x26c>)
 8005e26:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005e2a:	4989      	ldr	r1, [pc, #548]	; (8006050 <tcp_slowtmr+0x278>)
 8005e2c:	4887      	ldr	r0, [pc, #540]	; (800604c <tcp_slowtmr+0x274>)
 8005e2e:	f009 fe01 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	7d1b      	ldrb	r3, [r3, #20]
 8005e36:	2b0a      	cmp	r3, #10
 8005e38:	d106      	bne.n	8005e48 <tcp_slowtmr+0x70>
 8005e3a:	4b82      	ldr	r3, [pc, #520]	; (8006044 <tcp_slowtmr+0x26c>)
 8005e3c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005e40:	4984      	ldr	r1, [pc, #528]	; (8006054 <tcp_slowtmr+0x27c>)
 8005e42:	4882      	ldr	r0, [pc, #520]	; (800604c <tcp_slowtmr+0x274>)
 8005e44:	f009 fdf6 	bl	800fa34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	7f9a      	ldrb	r2, [r3, #30]
 8005e4c:	4b7b      	ldr	r3, [pc, #492]	; (800603c <tcp_slowtmr+0x264>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d105      	bne.n	8005e60 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005e5e:	e270      	b.n	8006342 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005e60:	4b76      	ldr	r3, [pc, #472]	; (800603c <tcp_slowtmr+0x264>)
 8005e62:	781a      	ldrb	r2, [r3, #0]
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	7d1b      	ldrb	r3, [r3, #20]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d10a      	bne.n	8005e92 <tcp_slowtmr+0xba>
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d905      	bls.n	8005e92 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e90:	e11e      	b.n	80060d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e98:	2b0b      	cmp	r3, #11
 8005e9a:	d905      	bls.n	8005ea8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ea6:	e113      	b.n	80060d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d075      	beq.n	8005f9e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <tcp_slowtmr+0xf0>
 8005eba:	4b62      	ldr	r3, [pc, #392]	; (8006044 <tcp_slowtmr+0x26c>)
 8005ebc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005ec0:	4965      	ldr	r1, [pc, #404]	; (8006058 <tcp_slowtmr+0x280>)
 8005ec2:	4862      	ldr	r0, [pc, #392]	; (800604c <tcp_slowtmr+0x274>)
 8005ec4:	f009 fdb6 	bl	800fa34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <tcp_slowtmr+0x106>
 8005ed0:	4b5c      	ldr	r3, [pc, #368]	; (8006044 <tcp_slowtmr+0x26c>)
 8005ed2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005ed6:	4961      	ldr	r1, [pc, #388]	; (800605c <tcp_slowtmr+0x284>)
 8005ed8:	485c      	ldr	r0, [pc, #368]	; (800604c <tcp_slowtmr+0x274>)
 8005eda:	f009 fdab 	bl	800fa34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005ee4:	2b0b      	cmp	r3, #11
 8005ee6:	d905      	bls.n	8005ef4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eec:	3301      	adds	r3, #1
 8005eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ef2:	e0ed      	b.n	80060d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005efa:	3b01      	subs	r3, #1
 8005efc:	4a58      	ldr	r2, [pc, #352]	; (8006060 <tcp_slowtmr+0x288>)
 8005efe:	5cd3      	ldrb	r3, [r2, r3]
 8005f00:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f08:	7c7a      	ldrb	r2, [r7, #17]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d907      	bls.n	8005f1e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f14:	3301      	adds	r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f24:	7c7a      	ldrb	r2, [r7, #17]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	f200 80d2 	bhi.w	80060d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f3c:	f004 fc2a 	bl	800a794 <tcp_zero_window_probe>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d014      	beq.n	8005f70 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005f46:	2300      	movs	r3, #0
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	e011      	b.n	8005f70 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f52:	4619      	mov	r1, r3
 8005f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f56:	f003 faef 	bl	8009538 <tcp_split_unsent_seg>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d107      	bne.n	8005f70 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f62:	f003 fd6f 	bl	8009a44 <tcp_output>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80ac 	beq.w	80060d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	f200 80a2 	bhi.w	80060d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005f92:	3301      	adds	r3, #1
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005f9c:	e098      	b.n	80060d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	db0f      	blt.n	8005fc8 <tcp_slowtmr+0x1f0>
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005fae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d008      	beq.n	8005fc8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	b21a      	sxth	r2, r3
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	db7b      	blt.n	80060d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fda:	f004 f827 	bl	800a02c <tcp_rexmit_rto_prepare>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <tcp_slowtmr+0x21c>
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d171      	bne.n	80060d0 <tcp_slowtmr+0x2f8>
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d06d      	beq.n	80060d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	7d1b      	ldrb	r3, [r3, #20]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d03a      	beq.n	8006072 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006002:	2b0c      	cmp	r3, #12
 8006004:	bf28      	it	cs
 8006006:	230c      	movcs	r3, #12
 8006008:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006010:	10db      	asrs	r3, r3, #3
 8006012:	b21b      	sxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800601c:	4413      	add	r3, r2
 800601e:	7efa      	ldrb	r2, [r7, #27]
 8006020:	4910      	ldr	r1, [pc, #64]	; (8006064 <tcp_slowtmr+0x28c>)
 8006022:	5c8a      	ldrb	r2, [r1, r2]
 8006024:	4093      	lsls	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800602e:	4293      	cmp	r3, r2
 8006030:	dc1a      	bgt.n	8006068 <tcp_slowtmr+0x290>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	b21a      	sxth	r2, r3
 8006036:	e019      	b.n	800606c <tcp_slowtmr+0x294>
 8006038:	2000a418 	.word	0x2000a418
 800603c:	2000a42e 	.word	0x2000a42e
 8006040:	2000a424 	.word	0x2000a424
 8006044:	0801133c 	.word	0x0801133c
 8006048:	08011680 	.word	0x08011680
 800604c:	08011380 	.word	0x08011380
 8006050:	080116ac 	.word	0x080116ac
 8006054:	080116d8 	.word	0x080116d8
 8006058:	08011708 	.word	0x08011708
 800605c:	0801173c 	.word	0x0801173c
 8006060:	080136ac 	.word	0x080136ac
 8006064:	0801369c 	.word	0x0801369c
 8006068:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	2200      	movs	r2, #0
 8006076:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006084:	4293      	cmp	r3, r2
 8006086:	bf28      	it	cs
 8006088:	4613      	movcs	r3, r2
 800608a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800608c:	8a7b      	ldrh	r3, [r7, #18]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d206      	bcs.n	80060b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80060ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060cc:	f004 f81e 	bl	800a10c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	7d1b      	ldrb	r3, [r3, #20]
 80060d4:	2b06      	cmp	r3, #6
 80060d6:	d111      	bne.n	80060fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	8b5b      	ldrh	r3, [r3, #26]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80060e4:	4b9c      	ldr	r3, [pc, #624]	; (8006358 <tcp_slowtmr+0x580>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b28      	cmp	r3, #40	; 0x28
 80060f0:	d904      	bls.n	80060fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80060f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f6:	3301      	adds	r3, #1
 80060f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	7a5b      	ldrb	r3, [r3, #9]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d04a      	beq.n	800619e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800610c:	2b04      	cmp	r3, #4
 800610e:	d003      	beq.n	8006118 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006114:	2b07      	cmp	r3, #7
 8006116:	d142      	bne.n	800619e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006118:	4b8f      	ldr	r3, [pc, #572]	; (8006358 <tcp_slowtmr+0x580>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006128:	4b8c      	ldr	r3, [pc, #560]	; (800635c <tcp_slowtmr+0x584>)
 800612a:	440b      	add	r3, r1
 800612c:	498c      	ldr	r1, [pc, #560]	; (8006360 <tcp_slowtmr+0x588>)
 800612e:	fba1 1303 	umull	r1, r3, r1, r3
 8006132:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006134:	429a      	cmp	r2, r3
 8006136:	d90a      	bls.n	800614e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800613c:	3301      	adds	r3, #1
 800613e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006146:	3301      	adds	r3, #1
 8006148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800614c:	e027      	b.n	800619e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800614e:	4b82      	ldr	r3, [pc, #520]	; (8006358 <tcp_slowtmr+0x580>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006164:	4618      	mov	r0, r3
 8006166:	4b7f      	ldr	r3, [pc, #508]	; (8006364 <tcp_slowtmr+0x58c>)
 8006168:	fb00 f303 	mul.w	r3, r0, r3
 800616c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800616e:	497c      	ldr	r1, [pc, #496]	; (8006360 <tcp_slowtmr+0x588>)
 8006170:	fba1 1303 	umull	r1, r3, r1, r3
 8006174:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006176:	429a      	cmp	r2, r3
 8006178:	d911      	bls.n	800619e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800617a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800617c:	f004 faca 	bl	800a714 <tcp_keepalive>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006186:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800618a:	2b00      	cmp	r3, #0
 800618c:	d107      	bne.n	800619e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006194:	3301      	adds	r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d011      	beq.n	80061ca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80061a6:	4b6c      	ldr	r3, [pc, #432]	; (8006358 <tcp_slowtmr+0x580>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80061b6:	4619      	mov	r1, r3
 80061b8:	460b      	mov	r3, r1
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	440b      	add	r3, r1
 80061be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80061c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061c6:	f000 fddd 	bl	8006d84 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	7d1b      	ldrb	r3, [r3, #20]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d10b      	bne.n	80061ea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061d2:	4b61      	ldr	r3, [pc, #388]	; (8006358 <tcp_slowtmr+0x580>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b28      	cmp	r3, #40	; 0x28
 80061de:	d904      	bls.n	80061ea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80061e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e4:	3301      	adds	r3, #1
 80061e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	7d1b      	ldrb	r3, [r3, #20]
 80061ee:	2b09      	cmp	r3, #9
 80061f0:	d10b      	bne.n	800620a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80061f2:	4b59      	ldr	r3, [pc, #356]	; (8006358 <tcp_slowtmr+0x580>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2bf0      	cmp	r3, #240	; 0xf0
 80061fe:	d904      	bls.n	800620a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8006200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006204:	3301      	adds	r3, #1
 8006206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800620a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620e:	2b00      	cmp	r3, #0
 8006210:	d060      	beq.n	80062d4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006218:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800621a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800621c:	f000 fbfe 	bl	8006a1c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006226:	4b50      	ldr	r3, [pc, #320]	; (8006368 <tcp_slowtmr+0x590>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800622c:	429a      	cmp	r2, r3
 800622e:	d106      	bne.n	800623e <tcp_slowtmr+0x466>
 8006230:	4b4e      	ldr	r3, [pc, #312]	; (800636c <tcp_slowtmr+0x594>)
 8006232:	f240 526d 	movw	r2, #1389	; 0x56d
 8006236:	494e      	ldr	r1, [pc, #312]	; (8006370 <tcp_slowtmr+0x598>)
 8006238:	484e      	ldr	r0, [pc, #312]	; (8006374 <tcp_slowtmr+0x59c>)
 800623a:	f009 fbfb 	bl	800fa34 <iprintf>
        prev->next = pcb->next;
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e00f      	b.n	8006268 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006248:	4b47      	ldr	r3, [pc, #284]	; (8006368 <tcp_slowtmr+0x590>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624e:	429a      	cmp	r2, r3
 8006250:	d006      	beq.n	8006260 <tcp_slowtmr+0x488>
 8006252:	4b46      	ldr	r3, [pc, #280]	; (800636c <tcp_slowtmr+0x594>)
 8006254:	f240 5271 	movw	r2, #1393	; 0x571
 8006258:	4947      	ldr	r1, [pc, #284]	; (8006378 <tcp_slowtmr+0x5a0>)
 800625a:	4846      	ldr	r0, [pc, #280]	; (8006374 <tcp_slowtmr+0x59c>)
 800625c:	f009 fbea 	bl	800fa34 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4a40      	ldr	r2, [pc, #256]	; (8006368 <tcp_slowtmr+0x590>)
 8006266:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800626c:	2b00      	cmp	r3, #0
 800626e:	d013      	beq.n	8006298 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006278:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	3304      	adds	r3, #4
 800627e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006280:	8ad2      	ldrh	r2, [r2, #22]
 8006282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006284:	8b09      	ldrh	r1, [r1, #24]
 8006286:	9102      	str	r1, [sp, #8]
 8006288:	9201      	str	r2, [sp, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	462b      	mov	r3, r5
 800628e:	4622      	mov	r2, r4
 8006290:	4601      	mov	r1, r0
 8006292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006294:	f004 f98a 	bl	800a5ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	7d1b      	ldrb	r3, [r3, #20]
 80062a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f7ff f9f4 	bl	800569c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80062b4:	4b31      	ldr	r3, [pc, #196]	; (800637c <tcp_slowtmr+0x5a4>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <tcp_slowtmr+0x4f2>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f06f 010c 	mvn.w	r1, #12
 80062c6:	68b8      	ldr	r0, [r7, #8]
 80062c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80062ca:	4b2c      	ldr	r3, [pc, #176]	; (800637c <tcp_slowtmr+0x5a4>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d037      	beq.n	8006342 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80062d2:	e592      	b.n	8005dfa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	7f1b      	ldrb	r3, [r3, #28]
 80062e2:	3301      	adds	r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	7f1a      	ldrb	r2, [r3, #28]
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	7f5b      	ldrb	r3, [r3, #29]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d325      	bcc.n	8006342 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80062fc:	4b1f      	ldr	r3, [pc, #124]	; (800637c <tcp_slowtmr+0x5a4>)
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <tcp_slowtmr+0x54c>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006314:	6912      	ldr	r2, [r2, #16]
 8006316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	4603      	mov	r3, r0
 800631e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006322:	e002      	b.n	800632a <tcp_slowtmr+0x552>
 8006324:	2300      	movs	r3, #0
 8006326:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800632a:	4b14      	ldr	r3, [pc, #80]	; (800637c <tcp_slowtmr+0x5a4>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d000      	beq.n	8006334 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8006332:	e562      	b.n	8005dfa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006334:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800633c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633e:	f003 fb81 	bl	8009a44 <tcp_output>
  while (pcb != NULL) {
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	f47f ad5e 	bne.w	8005e06 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <tcp_slowtmr+0x5a8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006354:	e069      	b.n	800642a <tcp_slowtmr+0x652>
 8006356:	bf00      	nop
 8006358:	2000a418 	.word	0x2000a418
 800635c:	000a4cb8 	.word	0x000a4cb8
 8006360:	10624dd3 	.word	0x10624dd3
 8006364:	000124f8 	.word	0x000124f8
 8006368:	2000a424 	.word	0x2000a424
 800636c:	0801133c 	.word	0x0801133c
 8006370:	08011774 	.word	0x08011774
 8006374:	08011380 	.word	0x08011380
 8006378:	080117a0 	.word	0x080117a0
 800637c:	2000a42c 	.word	0x2000a42c
 8006380:	2000a428 	.word	0x2000a428
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	7d1b      	ldrb	r3, [r3, #20]
 8006388:	2b0a      	cmp	r3, #10
 800638a:	d006      	beq.n	800639a <tcp_slowtmr+0x5c2>
 800638c:	4b2b      	ldr	r3, [pc, #172]	; (800643c <tcp_slowtmr+0x664>)
 800638e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006392:	492b      	ldr	r1, [pc, #172]	; (8006440 <tcp_slowtmr+0x668>)
 8006394:	482b      	ldr	r0, [pc, #172]	; (8006444 <tcp_slowtmr+0x66c>)
 8006396:	f009 fb4d 	bl	800fa34 <iprintf>
    pcb_remove = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80063a0:	4b29      	ldr	r3, [pc, #164]	; (8006448 <tcp_slowtmr+0x670>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2bf0      	cmp	r3, #240	; 0xf0
 80063ac:	d904      	bls.n	80063b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80063ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063b2:	3301      	adds	r3, #1
 80063b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80063b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02f      	beq.n	8006420 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80063c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063c2:	f000 fb2b 	bl	8006a1c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80063cc:	4b1f      	ldr	r3, [pc, #124]	; (800644c <tcp_slowtmr+0x674>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d106      	bne.n	80063e4 <tcp_slowtmr+0x60c>
 80063d6:	4b19      	ldr	r3, [pc, #100]	; (800643c <tcp_slowtmr+0x664>)
 80063d8:	f240 52af 	movw	r2, #1455	; 0x5af
 80063dc:	491c      	ldr	r1, [pc, #112]	; (8006450 <tcp_slowtmr+0x678>)
 80063de:	4819      	ldr	r0, [pc, #100]	; (8006444 <tcp_slowtmr+0x66c>)
 80063e0:	f009 fb28 	bl	800fa34 <iprintf>
        prev->next = pcb->next;
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	60da      	str	r2, [r3, #12]
 80063ec:	e00f      	b.n	800640e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80063ee:	4b17      	ldr	r3, [pc, #92]	; (800644c <tcp_slowtmr+0x674>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d006      	beq.n	8006406 <tcp_slowtmr+0x62e>
 80063f8:	4b10      	ldr	r3, [pc, #64]	; (800643c <tcp_slowtmr+0x664>)
 80063fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80063fe:	4915      	ldr	r1, [pc, #84]	; (8006454 <tcp_slowtmr+0x67c>)
 8006400:	4810      	ldr	r0, [pc, #64]	; (8006444 <tcp_slowtmr+0x66c>)
 8006402:	f009 fb17 	bl	800fa34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a10      	ldr	r2, [pc, #64]	; (800644c <tcp_slowtmr+0x674>)
 800640c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006418:	69f8      	ldr	r0, [r7, #28]
 800641a:	f7ff f93f 	bl	800569c <tcp_free>
 800641e:	e004      	b.n	800642a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1a9      	bne.n	8006384 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	3730      	adds	r7, #48	; 0x30
 8006436:	46bd      	mov	sp, r7
 8006438:	bdb0      	pop	{r4, r5, r7, pc}
 800643a:	bf00      	nop
 800643c:	0801133c 	.word	0x0801133c
 8006440:	080117cc 	.word	0x080117cc
 8006444:	08011380 	.word	0x08011380
 8006448:	2000a418 	.word	0x2000a418
 800644c:	2000a428 	.word	0x2000a428
 8006450:	080117fc 	.word	0x080117fc
 8006454:	08011824 	.word	0x08011824

08006458 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800645e:	4b2d      	ldr	r3, [pc, #180]	; (8006514 <tcp_fasttmr+0xbc>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4b2b      	ldr	r3, [pc, #172]	; (8006514 <tcp_fasttmr+0xbc>)
 8006468:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800646a:	4b2b      	ldr	r3, [pc, #172]	; (8006518 <tcp_fasttmr+0xc0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006470:	e048      	b.n	8006504 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7f9a      	ldrb	r2, [r3, #30]
 8006476:	4b27      	ldr	r3, [pc, #156]	; (8006514 <tcp_fasttmr+0xbc>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d03f      	beq.n	80064fe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800647e:	4b25      	ldr	r3, [pc, #148]	; (8006514 <tcp_fasttmr+0xbc>)
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8b5b      	ldrh	r3, [r3, #26]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d010      	beq.n	80064b4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	8b5b      	ldrh	r3, [r3, #26]
 8006496:	f043 0302 	orr.w	r3, r3, #2
 800649a:	b29a      	uxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f003 facf 	bl	8009a44 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8b5b      	ldrh	r3, [r3, #26]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8b5b      	ldrh	r3, [r3, #26]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8b5b      	ldrh	r3, [r3, #26]
 80064c4:	f023 0308 	bic.w	r3, r3, #8
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fa78 	bl	80059c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <tcp_fasttmr+0xc4>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f819 	bl	8006520 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80064ee:	4b0b      	ldr	r3, [pc, #44]	; (800651c <tcp_fasttmr+0xc4>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d000      	beq.n	80064f8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80064f6:	e7b8      	b.n	800646a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	e002      	b.n	8006504 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1b3      	bne.n	8006472 <tcp_fasttmr+0x1a>
    }
  }
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	2000a42e 	.word	0x2000a42e
 8006518:	2000a424 	.word	0x2000a424
 800651c:	2000a42c 	.word	0x2000a42c

08006520 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <tcp_process_refused_data+0x22>
 800652e:	4b37      	ldr	r3, [pc, #220]	; (800660c <tcp_process_refused_data+0xec>)
 8006530:	f240 6209 	movw	r2, #1545	; 0x609
 8006534:	4936      	ldr	r1, [pc, #216]	; (8006610 <tcp_process_refused_data+0xf0>)
 8006536:	4837      	ldr	r0, [pc, #220]	; (8006614 <tcp_process_refused_data+0xf4>)
 8006538:	f009 fa7c 	bl	800fa34 <iprintf>
 800653c:	f06f 030f 	mvn.w	r3, #15
 8006540:	e060      	b.n	8006604 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006546:	7b5b      	ldrb	r3, [r3, #13]
 8006548:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800654e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <tcp_process_refused_data+0x58>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6918      	ldr	r0, [r3, #16]
 800656a:	2300      	movs	r3, #0
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	47a0      	blx	r4
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
 8006576:	e007      	b.n	8006588 <tcp_process_refused_data+0x68>
 8006578:	2300      	movs	r3, #0
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	2000      	movs	r0, #0
 8006580:	f000 f8a4 	bl	80066cc <tcp_recv_null>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d12a      	bne.n	80065e6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d033      	beq.n	8006602 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80065a2:	d005      	beq.n	80065b0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a8:	3301      	adds	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00b      	beq.n	80065d2 <tcp_process_refused_data+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6918      	ldr	r0, [r3, #16]
 80065c4:	2300      	movs	r3, #0
 80065c6:	2200      	movs	r2, #0
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	47a0      	blx	r4
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
 80065d0:	e001      	b.n	80065d6 <tcp_process_refused_data+0xb6>
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80065d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065da:	f113 0f0d 	cmn.w	r3, #13
 80065de:	d110      	bne.n	8006602 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80065e0:	f06f 030c 	mvn.w	r3, #12
 80065e4:	e00e      	b.n	8006604 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80065e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ea:	f113 0f0d 	cmn.w	r3, #13
 80065ee:	d102      	bne.n	80065f6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80065f0:	f06f 030c 	mvn.w	r3, #12
 80065f4:	e006      	b.n	8006604 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80065fc:	f06f 0304 	mvn.w	r3, #4
 8006600:	e000      	b.n	8006604 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	bd90      	pop	{r4, r7, pc}
 800660c:	0801133c 	.word	0x0801133c
 8006610:	0801184c 	.word	0x0801184c
 8006614:	08011380 	.word	0x08011380

08006618 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006620:	e007      	b.n	8006632 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f80a 	bl	8006642 <tcp_seg_free>
    seg = next;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f4      	bne.n	8006622 <tcp_segs_free+0xa>
  }
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d004      	beq.n	8006662 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fe fd6d 	bl	800513c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	2003      	movs	r0, #3
 8006666:	f7fd fee7 	bl	8004438 <memp_free>
  }
}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <tcp_seg_copy+0x1c>
 8006682:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <tcp_seg_copy+0x4c>)
 8006684:	f240 6282 	movw	r2, #1666	; 0x682
 8006688:	490e      	ldr	r1, [pc, #56]	; (80066c4 <tcp_seg_copy+0x50>)
 800668a:	480f      	ldr	r0, [pc, #60]	; (80066c8 <tcp_seg_copy+0x54>)
 800668c:	f009 f9d2 	bl	800fa34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006690:	2003      	movs	r0, #3
 8006692:	f7fd fe61 	bl	8004358 <memp_malloc>
 8006696:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <tcp_seg_copy+0x2e>
    return NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	e00a      	b.n	80066b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80066a2:	2210      	movs	r2, #16
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f009 fa9f 	bl	800fbea <memcpy>
  pbuf_ref(cseg->p);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fde3 	bl	800527c <pbuf_ref>
  return cseg;
 80066b6:	68fb      	ldr	r3, [r7, #12]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	0801133c 	.word	0x0801133c
 80066c4:	08011890 	.word	0x08011890
 80066c8:	08011380 	.word	0x08011380

080066cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <tcp_recv_null+0x28>
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <tcp_recv_null+0x60>)
 80066e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80066e6:	4912      	ldr	r1, [pc, #72]	; (8006730 <tcp_recv_null+0x64>)
 80066e8:	4812      	ldr	r0, [pc, #72]	; (8006734 <tcp_recv_null+0x68>)
 80066ea:	f009 f9a3 	bl	800fa34 <iprintf>
 80066ee:	f06f 030f 	mvn.w	r3, #15
 80066f2:	e016      	b.n	8006722 <tcp_recv_null+0x56>

  if (p != NULL) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	891b      	ldrh	r3, [r3, #8]
 80066fe:	4619      	mov	r1, r3
 8006700:	68b8      	ldr	r0, [r7, #8]
 8006702:	f7ff fb19 	bl	8005d38 <tcp_recved>
    pbuf_free(p);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fe fd18 	bl	800513c <pbuf_free>
 800670c:	e008      	b.n	8006720 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800670e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006716:	68b8      	ldr	r0, [r7, #8]
 8006718:	f7ff f9be 	bl	8005a98 <tcp_close>
 800671c:	4603      	mov	r3, r0
 800671e:	e000      	b.n	8006722 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	0801133c 	.word	0x0801133c
 8006730:	080118ac 	.word	0x080118ac
 8006734:	08011380 	.word	0x08011380

08006738 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006746:	2b00      	cmp	r3, #0
 8006748:	db01      	blt.n	800674e <tcp_kill_prio+0x16>
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	e000      	b.n	8006750 <tcp_kill_prio+0x18>
 800674e:	237f      	movs	r3, #127	; 0x7f
 8006750:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006752:	7afb      	ldrb	r3, [r7, #11]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d034      	beq.n	80067c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	3b01      	subs	r3, #1
 800675c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006766:	4b19      	ldr	r3, [pc, #100]	; (80067cc <tcp_kill_prio+0x94>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e01f      	b.n	80067ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	7d5b      	ldrb	r3, [r3, #21]
 8006772:	7afa      	ldrb	r2, [r7, #11]
 8006774:	429a      	cmp	r2, r3
 8006776:	d80c      	bhi.n	8006792 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800677c:	7afa      	ldrb	r2, [r7, #11]
 800677e:	429a      	cmp	r2, r3
 8006780:	d112      	bne.n	80067a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <tcp_kill_prio+0x98>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d80a      	bhi.n	80067a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006792:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <tcp_kill_prio+0x98>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	7d5b      	ldrb	r3, [r3, #21]
 80067a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1dc      	bne.n	800676e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80067ba:	6938      	ldr	r0, [r7, #16]
 80067bc:	f7ff fa56 	bl	8005c6c <tcp_abort>
 80067c0:	e000      	b.n	80067c4 <tcp_kill_prio+0x8c>
    return;
 80067c2:	bf00      	nop
  }
}
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000a424 	.word	0x2000a424
 80067d0:	2000a418 	.word	0x2000a418

080067d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d009      	beq.n	80067f8 <tcp_kill_state+0x24>
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d006      	beq.n	80067f8 <tcp_kill_state+0x24>
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <tcp_kill_state+0x80>)
 80067ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80067f0:	4919      	ldr	r1, [pc, #100]	; (8006858 <tcp_kill_state+0x84>)
 80067f2:	481a      	ldr	r0, [pc, #104]	; (800685c <tcp_kill_state+0x88>)
 80067f4:	f009 f91e 	bl	800fa34 <iprintf>

  inactivity = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006800:	4b17      	ldr	r3, [pc, #92]	; (8006860 <tcp_kill_state+0x8c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e017      	b.n	8006838 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	7d1b      	ldrb	r3, [r3, #20]
 800680c:	79fa      	ldrb	r2, [r7, #7]
 800680e:	429a      	cmp	r2, r3
 8006810:	d10f      	bne.n	8006832 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006812:	4b14      	ldr	r3, [pc, #80]	; (8006864 <tcp_kill_state+0x90>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	429a      	cmp	r2, r3
 8006820:	d807      	bhi.n	8006832 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <tcp_kill_state+0x90>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e4      	bne.n	8006808 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006844:	2100      	movs	r1, #0
 8006846:	6938      	ldr	r0, [r7, #16]
 8006848:	f7ff f952 	bl	8005af0 <tcp_abandon>
  }
}
 800684c:	bf00      	nop
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	0801133c 	.word	0x0801133c
 8006858:	080118c8 	.word	0x080118c8
 800685c:	08011380 	.word	0x08011380
 8006860:	2000a424 	.word	0x2000a424
 8006864:	2000a418 	.word	0x2000a418

08006868 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006876:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <tcp_kill_timewait+0x58>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e012      	b.n	80068a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <tcp_kill_timewait+0x5c>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	d807      	bhi.n	800689e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <tcp_kill_timewait+0x5c>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e9      	bne.n	800687e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80068b0:	68b8      	ldr	r0, [r7, #8]
 80068b2:	f7ff f9db 	bl	8005c6c <tcp_abort>
  }
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	2000a428 	.word	0x2000a428
 80068c4:	2000a418 	.word	0x2000a418

080068c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <tcp_handle_closepend+0x48>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80068d4:	e014      	b.n	8006900 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8b5b      	ldrh	r3, [r3, #26]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8b5b      	ldrh	r3, [r3, #26]
 80068ec:	f023 0308 	bic.w	r3, r3, #8
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff f864 	bl	80059c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e7      	bne.n	80068d6 <tcp_handle_closepend+0xe>
  }
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	2000a424 	.word	0x2000a424

08006914 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800691e:	2001      	movs	r0, #1
 8006920:	f7fd fd1a 	bl	8004358 <memp_malloc>
 8006924:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d126      	bne.n	800697a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800692c:	f7ff ffcc 	bl	80068c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006930:	f7ff ff9a 	bl	8006868 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006934:	2001      	movs	r0, #1
 8006936:	f7fd fd0f 	bl	8004358 <memp_malloc>
 800693a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d11b      	bne.n	800697a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006942:	2009      	movs	r0, #9
 8006944:	f7ff ff46 	bl	80067d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006948:	2001      	movs	r0, #1
 800694a:	f7fd fd05 	bl	8004358 <memp_malloc>
 800694e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d111      	bne.n	800697a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006956:	2008      	movs	r0, #8
 8006958:	f7ff ff3c 	bl	80067d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800695c:	2001      	movs	r0, #1
 800695e:	f7fd fcfb 	bl	8004358 <memp_malloc>
 8006962:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fee3 	bl	8006738 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006972:	2001      	movs	r0, #1
 8006974:	f7fd fcf0 	bl	8004358 <memp_malloc>
 8006978:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d03f      	beq.n	8006a00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006980:	229c      	movs	r2, #156	; 0x9c
 8006982:	2100      	movs	r1, #0
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f009 f8ba 	bl	800fafe <memset>
    pcb->prio = prio;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	79fa      	ldrb	r2, [r7, #7]
 800698e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006996:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80069a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	22ff      	movs	r2, #255	; 0xff
 80069ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80069b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2206      	movs	r2, #6
 80069bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2206      	movs	r2, #6
 80069c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80069d6:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <tcp_alloc+0xf8>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80069de:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <tcp_alloc+0xfc>)
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80069ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <tcp_alloc+0x100>)
 80069f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4a07      	ldr	r2, [pc, #28]	; (8006a18 <tcp_alloc+0x104>)
 80069fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006a00:	68fb      	ldr	r3, [r7, #12]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000a418 	.word	0x2000a418
 8006a10:	2000a42e 	.word	0x2000a42e
 8006a14:	080066cd 	.word	0x080066cd
 8006a18:	006ddd00 	.word	0x006ddd00

08006a1c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d107      	bne.n	8006a3a <tcp_pcb_purge+0x1e>
 8006a2a:	4b21      	ldr	r3, [pc, #132]	; (8006ab0 <tcp_pcb_purge+0x94>)
 8006a2c:	f640 0251 	movw	r2, #2129	; 0x851
 8006a30:	4920      	ldr	r1, [pc, #128]	; (8006ab4 <tcp_pcb_purge+0x98>)
 8006a32:	4821      	ldr	r0, [pc, #132]	; (8006ab8 <tcp_pcb_purge+0x9c>)
 8006a34:	f008 fffe 	bl	800fa34 <iprintf>
 8006a38:	e037      	b.n	8006aaa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7d1b      	ldrb	r3, [r3, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d033      	beq.n	8006aaa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006a46:	2b0a      	cmp	r3, #10
 8006a48:	d02f      	beq.n	8006aaa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d02b      	beq.n	8006aaa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fb6c 	bl	800513c <pbuf_free>
      pcb->refused_data = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f986 	bl	8006d84 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a7e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fdc7 	bl	8006618 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fdc2 	bl	8006618 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	0801133c 	.word	0x0801133c
 8006ab4:	08011988 	.word	0x08011988
 8006ab8:	08011380 	.word	0x08011380

08006abc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <tcp_pcb_remove+0x1e>
 8006acc:	4b3e      	ldr	r3, [pc, #248]	; (8006bc8 <tcp_pcb_remove+0x10c>)
 8006ace:	f640 0283 	movw	r2, #2179	; 0x883
 8006ad2:	493e      	ldr	r1, [pc, #248]	; (8006bcc <tcp_pcb_remove+0x110>)
 8006ad4:	483e      	ldr	r0, [pc, #248]	; (8006bd0 <tcp_pcb_remove+0x114>)
 8006ad6:	f008 ffad 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <tcp_pcb_remove+0x32>
 8006ae0:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <tcp_pcb_remove+0x10c>)
 8006ae2:	f640 0284 	movw	r2, #2180	; 0x884
 8006ae6:	493b      	ldr	r1, [pc, #236]	; (8006bd4 <tcp_pcb_remove+0x118>)
 8006ae8:	4839      	ldr	r0, [pc, #228]	; (8006bd0 <tcp_pcb_remove+0x114>)
 8006aea:	f008 ffa3 	bl	800fa34 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d105      	bne.n	8006b04 <tcp_pcb_remove+0x48>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e013      	b.n	8006b2c <tcp_pcb_remove+0x70>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e00c      	b.n	8006b26 <tcp_pcb_remove+0x6a>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d104      	bne.n	8006b20 <tcp_pcb_remove+0x64>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e005      	b.n	8006b2c <tcp_pcb_remove+0x70>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ef      	bne.n	8006b0c <tcp_pcb_remove+0x50>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006b32:	6838      	ldr	r0, [r7, #0]
 8006b34:	f7ff ff72 	bl	8006a1c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	2b0a      	cmp	r3, #10
 8006b3e:	d013      	beq.n	8006b68 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d00f      	beq.n	8006b68 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	8b5b      	ldrh	r3, [r3, #26]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	8b5b      	ldrh	r3, [r3, #26]
 8006b58:	f043 0302 	orr.w	r3, r3, #2
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006b62:	6838      	ldr	r0, [r7, #0]
 8006b64:	f002 ff6e 	bl	8009a44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	7d1b      	ldrb	r3, [r3, #20]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d020      	beq.n	8006bb2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <tcp_pcb_remove+0xca>
 8006b78:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <tcp_pcb_remove+0x10c>)
 8006b7a:	f640 0293 	movw	r2, #2195	; 0x893
 8006b7e:	4916      	ldr	r1, [pc, #88]	; (8006bd8 <tcp_pcb_remove+0x11c>)
 8006b80:	4813      	ldr	r0, [pc, #76]	; (8006bd0 <tcp_pcb_remove+0x114>)
 8006b82:	f008 ff57 	bl	800fa34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d006      	beq.n	8006b9c <tcp_pcb_remove+0xe0>
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <tcp_pcb_remove+0x10c>)
 8006b90:	f640 0294 	movw	r2, #2196	; 0x894
 8006b94:	4911      	ldr	r1, [pc, #68]	; (8006bdc <tcp_pcb_remove+0x120>)
 8006b96:	480e      	ldr	r0, [pc, #56]	; (8006bd0 <tcp_pcb_remove+0x114>)
 8006b98:	f008 ff4c 	bl	800fa34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d006      	beq.n	8006bb2 <tcp_pcb_remove+0xf6>
 8006ba4:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <tcp_pcb_remove+0x10c>)
 8006ba6:	f640 0296 	movw	r2, #2198	; 0x896
 8006baa:	490d      	ldr	r1, [pc, #52]	; (8006be0 <tcp_pcb_remove+0x124>)
 8006bac:	4808      	ldr	r0, [pc, #32]	; (8006bd0 <tcp_pcb_remove+0x114>)
 8006bae:	f008 ff41 	bl	800fa34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	0801133c 	.word	0x0801133c
 8006bcc:	080119a4 	.word	0x080119a4
 8006bd0:	08011380 	.word	0x08011380
 8006bd4:	080119c0 	.word	0x080119c0
 8006bd8:	080119e0 	.word	0x080119e0
 8006bdc:	080119f8 	.word	0x080119f8
 8006be0:	08011a14 	.word	0x08011a14

08006be4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <tcp_next_iss+0x1c>
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <tcp_next_iss+0x38>)
 8006bf4:	f640 02af 	movw	r2, #2223	; 0x8af
 8006bf8:	4909      	ldr	r1, [pc, #36]	; (8006c20 <tcp_next_iss+0x3c>)
 8006bfa:	480a      	ldr	r0, [pc, #40]	; (8006c24 <tcp_next_iss+0x40>)
 8006bfc:	f008 ff1a 	bl	800fa34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006c00:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <tcp_next_iss+0x44>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <tcp_next_iss+0x48>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4413      	add	r3, r2
 8006c0a:	4a07      	ldr	r2, [pc, #28]	; (8006c28 <tcp_next_iss+0x44>)
 8006c0c:	6013      	str	r3, [r2, #0]
  return iss;
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <tcp_next_iss+0x44>)
 8006c10:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	0801133c 	.word	0x0801133c
 8006c20:	08011a2c 	.word	0x08011a2c
 8006c24:	08011380 	.word	0x08011380
 8006c28:	20000024 	.word	0x20000024
 8006c2c:	2000a418 	.word	0x2000a418

08006c30 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d106      	bne.n	8006c52 <tcp_eff_send_mss_netif+0x22>
 8006c44:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <tcp_eff_send_mss_netif+0x68>)
 8006c46:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006c4a:	4914      	ldr	r1, [pc, #80]	; (8006c9c <tcp_eff_send_mss_netif+0x6c>)
 8006c4c:	4814      	ldr	r0, [pc, #80]	; (8006ca0 <tcp_eff_send_mss_netif+0x70>)
 8006c4e:	f008 fef1 	bl	800fa34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006c58:	89fb      	ldrh	r3, [r7, #14]
 8006c5a:	e019      	b.n	8006c90 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c60:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006c62:	8afb      	ldrh	r3, [r7, #22]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d012      	beq.n	8006c8e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006c68:	2328      	movs	r3, #40	; 0x28
 8006c6a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006c6c:	8afa      	ldrh	r2, [r7, #22]
 8006c6e:	8abb      	ldrh	r3, [r7, #20]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d904      	bls.n	8006c7e <tcp_eff_send_mss_netif+0x4e>
 8006c74:	8afa      	ldrh	r2, [r7, #22]
 8006c76:	8abb      	ldrh	r3, [r7, #20]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	e000      	b.n	8006c80 <tcp_eff_send_mss_netif+0x50>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006c82:	8a7a      	ldrh	r2, [r7, #18]
 8006c84:	89fb      	ldrh	r3, [r7, #14]
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bf28      	it	cs
 8006c8a:	4613      	movcs	r3, r2
 8006c8c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006c8e:	89fb      	ldrh	r3, [r7, #14]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	0801133c 	.word	0x0801133c
 8006c9c:	08011a48 	.word	0x08011a48
 8006ca0:	08011380 	.word	0x08011380

08006ca4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d119      	bne.n	8006cec <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006cb8:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006cba:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006cbe:	4910      	ldr	r1, [pc, #64]	; (8006d00 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006cc0:	4810      	ldr	r0, [pc, #64]	; (8006d04 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006cc2:	f008 feb7 	bl	800fa34 <iprintf>

  while (pcb != NULL) {
 8006cc6:	e011      	b.n	8006cec <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d108      	bne.n	8006ce6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7fe ffc6 	bl	8005c6c <tcp_abort>
      pcb = next;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e002      	b.n	8006cec <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1ea      	bne.n	8006cc8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	0801133c 	.word	0x0801133c
 8006d00:	08011a70 	.word	0x08011a70
 8006d04:	08011380 	.word	0x08011380

08006d08 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d02a      	beq.n	8006d6e <tcp_netif_ip_addr_changed+0x66>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d026      	beq.n	8006d6e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006d20:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <tcp_netif_ip_addr_changed+0x70>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff ffbc 	bl	8006ca4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006d2c:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <tcp_netif_ip_addr_changed+0x74>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff ffb6 	bl	8006ca4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d017      	beq.n	8006d6e <tcp_netif_ip_addr_changed+0x66>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006d46:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <tcp_netif_ip_addr_changed+0x78>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e00c      	b.n	8006d68 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d103      	bne.n	8006d62 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1ef      	bne.n	8006d4e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2000a424 	.word	0x2000a424
 8006d7c:	2000a41c 	.word	0x2000a41c
 8006d80:	2000a420 	.word	0x2000a420

08006d84 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fc3d 	bl	8006618 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006dac:	b590      	push	{r4, r7, lr}
 8006dae:	b08d      	sub	sp, #52	; 0x34
 8006db0:	af04      	add	r7, sp, #16
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d105      	bne.n	8006dc8 <tcp_input+0x1c>
 8006dbc:	4b9b      	ldr	r3, [pc, #620]	; (800702c <tcp_input+0x280>)
 8006dbe:	2283      	movs	r2, #131	; 0x83
 8006dc0:	499b      	ldr	r1, [pc, #620]	; (8007030 <tcp_input+0x284>)
 8006dc2:	489c      	ldr	r0, [pc, #624]	; (8007034 <tcp_input+0x288>)
 8006dc4:	f008 fe36 	bl	800fa34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	4a9a      	ldr	r2, [pc, #616]	; (8007038 <tcp_input+0x28c>)
 8006dce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	895b      	ldrh	r3, [r3, #10]
 8006dd4:	2b13      	cmp	r3, #19
 8006dd6:	f240 83d1 	bls.w	800757c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006dda:	4b98      	ldr	r3, [pc, #608]	; (800703c <tcp_input+0x290>)
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	4a97      	ldr	r2, [pc, #604]	; (800703c <tcp_input+0x290>)
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f007 fdcf 	bl	800e988 <ip4_addr_isbroadcast_u32>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 83c7 	bne.w	8007580 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006df2:	4b92      	ldr	r3, [pc, #584]	; (800703c <tcp_input+0x290>)
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006dfa:	2be0      	cmp	r3, #224	; 0xe0
 8006dfc:	f000 83c0 	beq.w	8007580 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006e00:	4b8d      	ldr	r3, [pc, #564]	; (8007038 <tcp_input+0x28c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	899b      	ldrh	r3, [r3, #12]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fc fe2d 	bl	8003a68 <lwip_htons>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	0b1b      	lsrs	r3, r3, #12
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006e1a:	7cbb      	ldrb	r3, [r7, #18]
 8006e1c:	2b13      	cmp	r3, #19
 8006e1e:	f240 83b1 	bls.w	8007584 <tcp_input+0x7d8>
 8006e22:	7cbb      	ldrb	r3, [r7, #18]
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	891b      	ldrh	r3, [r3, #8]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	f200 83aa 	bhi.w	8007584 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006e30:	7cbb      	ldrb	r3, [r7, #18]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b14      	subs	r3, #20
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	4b81      	ldr	r3, [pc, #516]	; (8007040 <tcp_input+0x294>)
 8006e3a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006e3c:	4b81      	ldr	r3, [pc, #516]	; (8007044 <tcp_input+0x298>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	895a      	ldrh	r2, [r3, #10]
 8006e46:	7cbb      	ldrb	r3, [r7, #18]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d309      	bcc.n	8006e62 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006e4e:	4b7c      	ldr	r3, [pc, #496]	; (8007040 <tcp_input+0x294>)
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	4b7d      	ldr	r3, [pc, #500]	; (8007048 <tcp_input+0x29c>)
 8006e54:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006e56:	7cbb      	ldrb	r3, [r7, #18]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fe f8e8 	bl	8005030 <pbuf_remove_header>
 8006e60:	e04e      	b.n	8006f00 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <tcp_input+0xca>
 8006e6a:	4b70      	ldr	r3, [pc, #448]	; (800702c <tcp_input+0x280>)
 8006e6c:	22c2      	movs	r2, #194	; 0xc2
 8006e6e:	4977      	ldr	r1, [pc, #476]	; (800704c <tcp_input+0x2a0>)
 8006e70:	4870      	ldr	r0, [pc, #448]	; (8007034 <tcp_input+0x288>)
 8006e72:	f008 fddf 	bl	800fa34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006e76:	2114      	movs	r1, #20
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fe f8d9 	bl	8005030 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	895a      	ldrh	r2, [r3, #10]
 8006e82:	4b71      	ldr	r3, [pc, #452]	; (8007048 <tcp_input+0x29c>)
 8006e84:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006e86:	4b6e      	ldr	r3, [pc, #440]	; (8007040 <tcp_input+0x294>)
 8006e88:	881a      	ldrh	r2, [r3, #0]
 8006e8a:	4b6f      	ldr	r3, [pc, #444]	; (8007048 <tcp_input+0x29c>)
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006e92:	4b6d      	ldr	r3, [pc, #436]	; (8007048 <tcp_input+0x29c>)
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fe f8c9 	bl	8005030 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	895b      	ldrh	r3, [r3, #10]
 8006ea4:	8a3a      	ldrh	r2, [r7, #16]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	f200 836e 	bhi.w	8007588 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	4a64      	ldr	r2, [pc, #400]	; (8007044 <tcp_input+0x298>)
 8006eb4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	8a3a      	ldrh	r2, [r7, #16]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe f8b6 	bl	8005030 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	891a      	ldrh	r2, [r3, #8]
 8006ec8:	8a3b      	ldrh	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	895b      	ldrh	r3, [r3, #10]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <tcp_input+0x13a>
 8006eda:	4b54      	ldr	r3, [pc, #336]	; (800702c <tcp_input+0x280>)
 8006edc:	22df      	movs	r2, #223	; 0xdf
 8006ede:	495c      	ldr	r1, [pc, #368]	; (8007050 <tcp_input+0x2a4>)
 8006ee0:	4854      	ldr	r0, [pc, #336]	; (8007034 <tcp_input+0x288>)
 8006ee2:	f008 fda7 	bl	800fa34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	891a      	ldrh	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	891b      	ldrh	r3, [r3, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d005      	beq.n	8006f00 <tcp_input+0x154>
 8006ef4:	4b4d      	ldr	r3, [pc, #308]	; (800702c <tcp_input+0x280>)
 8006ef6:	22e0      	movs	r2, #224	; 0xe0
 8006ef8:	4956      	ldr	r1, [pc, #344]	; (8007054 <tcp_input+0x2a8>)
 8006efa:	484e      	ldr	r0, [pc, #312]	; (8007034 <tcp_input+0x288>)
 8006efc:	f008 fd9a 	bl	800fa34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006f00:	4b4d      	ldr	r3, [pc, #308]	; (8007038 <tcp_input+0x28c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4a4b      	ldr	r2, [pc, #300]	; (8007038 <tcp_input+0x28c>)
 8006f0a:	6814      	ldr	r4, [r2, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fc fdab 	bl	8003a68 <lwip_htons>
 8006f12:	4603      	mov	r3, r0
 8006f14:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006f16:	4b48      	ldr	r3, [pc, #288]	; (8007038 <tcp_input+0x28c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4a46      	ldr	r2, [pc, #280]	; (8007038 <tcp_input+0x28c>)
 8006f20:	6814      	ldr	r4, [r2, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fc fda0 	bl	8003a68 <lwip_htons>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006f2c:	4b42      	ldr	r3, [pc, #264]	; (8007038 <tcp_input+0x28c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4a41      	ldr	r2, [pc, #260]	; (8007038 <tcp_input+0x28c>)
 8006f34:	6814      	ldr	r4, [r2, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fc fdab 	bl	8003a92 <lwip_htonl>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	4a45      	ldr	r2, [pc, #276]	; (8007058 <tcp_input+0x2ac>)
 8006f44:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006f46:	4b3c      	ldr	r3, [pc, #240]	; (8007038 <tcp_input+0x28c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4a3a      	ldr	r2, [pc, #232]	; (8007038 <tcp_input+0x28c>)
 8006f4e:	6814      	ldr	r4, [r2, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fc fd9e 	bl	8003a92 <lwip_htonl>
 8006f56:	4603      	mov	r3, r0
 8006f58:	60a3      	str	r3, [r4, #8]
 8006f5a:	68a3      	ldr	r3, [r4, #8]
 8006f5c:	4a3f      	ldr	r2, [pc, #252]	; (800705c <tcp_input+0x2b0>)
 8006f5e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006f60:	4b35      	ldr	r3, [pc, #212]	; (8007038 <tcp_input+0x28c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	89db      	ldrh	r3, [r3, #14]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4a33      	ldr	r2, [pc, #204]	; (8007038 <tcp_input+0x28c>)
 8006f6a:	6814      	ldr	r4, [r2, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fc fd7b 	bl	8003a68 <lwip_htons>
 8006f72:	4603      	mov	r3, r0
 8006f74:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006f76:	4b30      	ldr	r3, [pc, #192]	; (8007038 <tcp_input+0x28c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	899b      	ldrh	r3, [r3, #12]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fc fd72 	bl	8003a68 <lwip_htons>
 8006f84:	4603      	mov	r3, r0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	4b34      	ldr	r3, [pc, #208]	; (8007060 <tcp_input+0x2b4>)
 8006f90:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	891a      	ldrh	r2, [r3, #8]
 8006f96:	4b33      	ldr	r3, [pc, #204]	; (8007064 <tcp_input+0x2b8>)
 8006f98:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006f9a:	4b31      	ldr	r3, [pc, #196]	; (8007060 <tcp_input+0x2b4>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <tcp_input+0x214>
    tcplen++;
 8006fa6:	4b2f      	ldr	r3, [pc, #188]	; (8007064 <tcp_input+0x2b8>)
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	4b2d      	ldr	r3, [pc, #180]	; (8007064 <tcp_input+0x2b8>)
 8006fb0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	891a      	ldrh	r2, [r3, #8]
 8006fb6:	4b2b      	ldr	r3, [pc, #172]	; (8007064 <tcp_input+0x2b8>)
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	f200 82e6 	bhi.w	800758c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <tcp_input+0x2bc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e09d      	b.n	8007108 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	7d1b      	ldrb	r3, [r3, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <tcp_input+0x234>
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <tcp_input+0x280>)
 8006fd6:	22fb      	movs	r2, #251	; 0xfb
 8006fd8:	4924      	ldr	r1, [pc, #144]	; (800706c <tcp_input+0x2c0>)
 8006fda:	4816      	ldr	r0, [pc, #88]	; (8007034 <tcp_input+0x288>)
 8006fdc:	f008 fd2a 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	7d1b      	ldrb	r3, [r3, #20]
 8006fe4:	2b0a      	cmp	r3, #10
 8006fe6:	d105      	bne.n	8006ff4 <tcp_input+0x248>
 8006fe8:	4b10      	ldr	r3, [pc, #64]	; (800702c <tcp_input+0x280>)
 8006fea:	22fc      	movs	r2, #252	; 0xfc
 8006fec:	4920      	ldr	r1, [pc, #128]	; (8007070 <tcp_input+0x2c4>)
 8006fee:	4811      	ldr	r0, [pc, #68]	; (8007034 <tcp_input+0x288>)
 8006ff0:	f008 fd20 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	7d1b      	ldrb	r3, [r3, #20]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d105      	bne.n	8007008 <tcp_input+0x25c>
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	; (800702c <tcp_input+0x280>)
 8006ffe:	22fd      	movs	r2, #253	; 0xfd
 8007000:	491c      	ldr	r1, [pc, #112]	; (8007074 <tcp_input+0x2c8>)
 8007002:	480c      	ldr	r0, [pc, #48]	; (8007034 <tcp_input+0x288>)
 8007004:	f008 fd16 	bl	800fa34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	7a1b      	ldrb	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d033      	beq.n	8007078 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	7a1a      	ldrb	r2, [r3, #8]
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <tcp_input+0x290>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800701c:	3301      	adds	r3, #1
 800701e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007020:	429a      	cmp	r2, r3
 8007022:	d029      	beq.n	8007078 <tcp_input+0x2cc>
      prev = pcb;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	61bb      	str	r3, [r7, #24]
      continue;
 8007028:	e06b      	b.n	8007102 <tcp_input+0x356>
 800702a:	bf00      	nop
 800702c:	08011aa4 	.word	0x08011aa4
 8007030:	08011ad8 	.word	0x08011ad8
 8007034:	08011af0 	.word	0x08011af0
 8007038:	2000a440 	.word	0x2000a440
 800703c:	20004cc8 	.word	0x20004cc8
 8007040:	2000a444 	.word	0x2000a444
 8007044:	2000a448 	.word	0x2000a448
 8007048:	2000a446 	.word	0x2000a446
 800704c:	08011b18 	.word	0x08011b18
 8007050:	08011b28 	.word	0x08011b28
 8007054:	08011b34 	.word	0x08011b34
 8007058:	2000a450 	.word	0x2000a450
 800705c:	2000a454 	.word	0x2000a454
 8007060:	2000a45c 	.word	0x2000a45c
 8007064:	2000a45a 	.word	0x2000a45a
 8007068:	2000a424 	.word	0x2000a424
 800706c:	08011b54 	.word	0x08011b54
 8007070:	08011b7c 	.word	0x08011b7c
 8007074:	08011ba8 	.word	0x08011ba8
    }

    if (pcb->remote_port == tcphdr->src &&
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	8b1a      	ldrh	r2, [r3, #24]
 800707c:	4b72      	ldr	r3, [pc, #456]	; (8007248 <tcp_input+0x49c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	429a      	cmp	r2, r3
 8007086:	d13a      	bne.n	80070fe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	8ada      	ldrh	r2, [r3, #22]
 800708c:	4b6e      	ldr	r3, [pc, #440]	; (8007248 <tcp_input+0x49c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007094:	429a      	cmp	r2, r3
 8007096:	d132      	bne.n	80070fe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4b6b      	ldr	r3, [pc, #428]	; (800724c <tcp_input+0x4a0>)
 800709e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d12c      	bne.n	80070fe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b68      	ldr	r3, [pc, #416]	; (800724c <tcp_input+0x4a0>)
 80070aa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d126      	bne.n	80070fe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d106      	bne.n	80070c8 <tcp_input+0x31c>
 80070ba:	4b65      	ldr	r3, [pc, #404]	; (8007250 <tcp_input+0x4a4>)
 80070bc:	f240 120d 	movw	r2, #269	; 0x10d
 80070c0:	4964      	ldr	r1, [pc, #400]	; (8007254 <tcp_input+0x4a8>)
 80070c2:	4865      	ldr	r0, [pc, #404]	; (8007258 <tcp_input+0x4ac>)
 80070c4:	f008 fcb6 	bl	800fa34 <iprintf>
      if (prev != NULL) {
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <tcp_input+0x338>
        prev->next = pcb->next;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80070d6:	4b61      	ldr	r3, [pc, #388]	; (800725c <tcp_input+0x4b0>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80070de:	4a5f      	ldr	r2, [pc, #380]	; (800725c <tcp_input+0x4b0>)
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d111      	bne.n	8007112 <tcp_input+0x366>
 80070ee:	4b58      	ldr	r3, [pc, #352]	; (8007250 <tcp_input+0x4a4>)
 80070f0:	f240 1215 	movw	r2, #277	; 0x115
 80070f4:	495a      	ldr	r1, [pc, #360]	; (8007260 <tcp_input+0x4b4>)
 80070f6:	4858      	ldr	r0, [pc, #352]	; (8007258 <tcp_input+0x4ac>)
 80070f8:	f008 fc9c 	bl	800fa34 <iprintf>
      break;
 80070fc:	e009      	b.n	8007112 <tcp_input+0x366>
    }
    prev = pcb;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	61fb      	str	r3, [r7, #28]
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f47f af5e 	bne.w	8006fcc <tcp_input+0x220>
 8007110:	e000      	b.n	8007114 <tcp_input+0x368>
      break;
 8007112:	bf00      	nop
  }

  if (pcb == NULL) {
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 80aa 	bne.w	8007270 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800711c:	4b51      	ldr	r3, [pc, #324]	; (8007264 <tcp_input+0x4b8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e03f      	b.n	80071a4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	7d1b      	ldrb	r3, [r3, #20]
 8007128:	2b0a      	cmp	r3, #10
 800712a:	d006      	beq.n	800713a <tcp_input+0x38e>
 800712c:	4b48      	ldr	r3, [pc, #288]	; (8007250 <tcp_input+0x4a4>)
 800712e:	f240 121f 	movw	r2, #287	; 0x11f
 8007132:	494d      	ldr	r1, [pc, #308]	; (8007268 <tcp_input+0x4bc>)
 8007134:	4848      	ldr	r0, [pc, #288]	; (8007258 <tcp_input+0x4ac>)
 8007136:	f008 fc7d 	bl	800fa34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	7a1b      	ldrb	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	7a1a      	ldrb	r2, [r3, #8]
 8007146:	4b41      	ldr	r3, [pc, #260]	; (800724c <tcp_input+0x4a0>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800714e:	3301      	adds	r3, #1
 8007150:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007152:	429a      	cmp	r2, r3
 8007154:	d122      	bne.n	800719c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	8b1a      	ldrh	r2, [r3, #24]
 800715a:	4b3b      	ldr	r3, [pc, #236]	; (8007248 <tcp_input+0x49c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	429a      	cmp	r2, r3
 8007164:	d11b      	bne.n	800719e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	8ada      	ldrh	r2, [r3, #22]
 800716a:	4b37      	ldr	r3, [pc, #220]	; (8007248 <tcp_input+0x49c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	885b      	ldrh	r3, [r3, #2]
 8007170:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007172:	429a      	cmp	r2, r3
 8007174:	d113      	bne.n	800719e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	4b34      	ldr	r3, [pc, #208]	; (800724c <tcp_input+0x4a0>)
 800717c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800717e:	429a      	cmp	r2, r3
 8007180:	d10d      	bne.n	800719e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4b31      	ldr	r3, [pc, #196]	; (800724c <tcp_input+0x4a0>)
 8007188:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800718a:	429a      	cmp	r2, r3
 800718c:	d107      	bne.n	800719e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800718e:	69f8      	ldr	r0, [r7, #28]
 8007190:	f000 fb56 	bl	8007840 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fd ffd1 	bl	800513c <pbuf_free>
        return;
 800719a:	e1fd      	b.n	8007598 <tcp_input+0x7ec>
        continue;
 800719c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1bc      	bne.n	8007124 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80071ae:	4b2f      	ldr	r3, [pc, #188]	; (800726c <tcp_input+0x4c0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	e02a      	b.n	800720c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	7a1b      	ldrb	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00c      	beq.n	80071d8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	7a1a      	ldrb	r2, [r3, #8]
 80071c2:	4b22      	ldr	r3, [pc, #136]	; (800724c <tcp_input+0x4a0>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071ca:	3301      	adds	r3, #1
 80071cc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d002      	beq.n	80071d8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	61bb      	str	r3, [r7, #24]
        continue;
 80071d6:	e016      	b.n	8007206 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	8ada      	ldrh	r2, [r3, #22]
 80071dc:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <tcp_input+0x49c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d10c      	bne.n	8007202 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	4b17      	ldr	r3, [pc, #92]	; (800724c <tcp_input+0x4a0>)
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d00f      	beq.n	8007214 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <tcp_input+0x46a>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1d1      	bne.n	80071b6 <tcp_input+0x40a>
 8007212:	e000      	b.n	8007216 <tcp_input+0x46a>
            break;
 8007214:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d029      	beq.n	8007270 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800722a:	4b10      	ldr	r3, [pc, #64]	; (800726c <tcp_input+0x4c0>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007232:	4a0e      	ldr	r2, [pc, #56]	; (800726c <tcp_input+0x4c0>)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	f000 fa03 	bl	8007644 <tcp_listen_input>
      }
      pbuf_free(p);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fd ff7c 	bl	800513c <pbuf_free>
      return;
 8007244:	e1a8      	b.n	8007598 <tcp_input+0x7ec>
 8007246:	bf00      	nop
 8007248:	2000a440 	.word	0x2000a440
 800724c:	20004cc8 	.word	0x20004cc8
 8007250:	08011aa4 	.word	0x08011aa4
 8007254:	08011bd0 	.word	0x08011bd0
 8007258:	08011af0 	.word	0x08011af0
 800725c:	2000a424 	.word	0x2000a424
 8007260:	08011bfc 	.word	0x08011bfc
 8007264:	2000a428 	.word	0x2000a428
 8007268:	08011c28 	.word	0x08011c28
 800726c:	2000a420 	.word	0x2000a420
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 8158 	beq.w	8007528 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007278:	4b95      	ldr	r3, [pc, #596]	; (80074d0 <tcp_input+0x724>)
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	891a      	ldrh	r2, [r3, #8]
 8007282:	4b93      	ldr	r3, [pc, #588]	; (80074d0 <tcp_input+0x724>)
 8007284:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007286:	4a92      	ldr	r2, [pc, #584]	; (80074d0 <tcp_input+0x724>)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800728c:	4b91      	ldr	r3, [pc, #580]	; (80074d4 <tcp_input+0x728>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a8f      	ldr	r2, [pc, #572]	; (80074d0 <tcp_input+0x724>)
 8007292:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007294:	4b90      	ldr	r3, [pc, #576]	; (80074d8 <tcp_input+0x72c>)
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800729a:	4b90      	ldr	r3, [pc, #576]	; (80074dc <tcp_input+0x730>)
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80072a0:	4b8f      	ldr	r3, [pc, #572]	; (80074e0 <tcp_input+0x734>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80072a6:	4b8f      	ldr	r3, [pc, #572]	; (80074e4 <tcp_input+0x738>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d006      	beq.n	80072c0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	7b5b      	ldrb	r3, [r3, #13]
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d017      	beq.n	80072f8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80072c8:	69f8      	ldr	r0, [r7, #28]
 80072ca:	f7ff f929 	bl	8006520 <tcp_process_refused_data>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f113 0f0d 	cmn.w	r3, #13
 80072d4:	d007      	beq.n	80072e6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00c      	beq.n	80072f8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80072de:	4b82      	ldr	r3, [pc, #520]	; (80074e8 <tcp_input+0x73c>)
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f040 80e3 	bne.w	80074b6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80072f0:	69f8      	ldr	r0, [r7, #28]
 80072f2:	f003 f9ad 	bl	800a650 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80072f6:	e0de      	b.n	80074b6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80072f8:	4a7c      	ldr	r2, [pc, #496]	; (80074ec <tcp_input+0x740>)
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80072fe:	69f8      	ldr	r0, [r7, #28]
 8007300:	f000 fb18 	bl	8007934 <tcp_process>
 8007304:	4603      	mov	r3, r0
 8007306:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800730c:	f113 0f0d 	cmn.w	r3, #13
 8007310:	f000 80d3 	beq.w	80074ba <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007314:	4b71      	ldr	r3, [pc, #452]	; (80074dc <tcp_input+0x730>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d015      	beq.n	800734c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <tcp_input+0x590>
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	6912      	ldr	r2, [r2, #16]
 8007334:	f06f 010d 	mvn.w	r1, #13
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800733c:	69f9      	ldr	r1, [r7, #28]
 800733e:	486c      	ldr	r0, [pc, #432]	; (80074f0 <tcp_input+0x744>)
 8007340:	f7ff fbbc 	bl	8006abc <tcp_pcb_remove>
        tcp_free(pcb);
 8007344:	69f8      	ldr	r0, [r7, #28]
 8007346:	f7fe f9a9 	bl	800569c <tcp_free>
 800734a:	e0da      	b.n	8007502 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007350:	4b63      	ldr	r3, [pc, #396]	; (80074e0 <tcp_input+0x734>)
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01d      	beq.n	8007394 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007358:	4b61      	ldr	r3, [pc, #388]	; (80074e0 <tcp_input+0x734>)
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <tcp_input+0x5d2>
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	6910      	ldr	r0, [r2, #16]
 8007372:	89fa      	ldrh	r2, [r7, #14]
 8007374:	69f9      	ldr	r1, [r7, #28]
 8007376:	4798      	blx	r3
 8007378:	4603      	mov	r3, r0
 800737a:	74fb      	strb	r3, [r7, #19]
 800737c:	e001      	b.n	8007382 <tcp_input+0x5d6>
 800737e:	2300      	movs	r3, #0
 8007380:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007382:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007386:	f113 0f0d 	cmn.w	r3, #13
 800738a:	f000 8098 	beq.w	80074be <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800738e:	4b54      	ldr	r3, [pc, #336]	; (80074e0 <tcp_input+0x734>)
 8007390:	2200      	movs	r2, #0
 8007392:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007394:	69f8      	ldr	r0, [r7, #28]
 8007396:	f000 f915 	bl	80075c4 <tcp_input_delayed_close>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	f040 8090 	bne.w	80074c2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80073a2:	4b4d      	ldr	r3, [pc, #308]	; (80074d8 <tcp_input+0x72c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d041      	beq.n	800742e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d006      	beq.n	80073c0 <tcp_input+0x614>
 80073b2:	4b50      	ldr	r3, [pc, #320]	; (80074f4 <tcp_input+0x748>)
 80073b4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80073b8:	494f      	ldr	r1, [pc, #316]	; (80074f8 <tcp_input+0x74c>)
 80073ba:	4850      	ldr	r0, [pc, #320]	; (80074fc <tcp_input+0x750>)
 80073bc:	f008 fb3a 	bl	800fa34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	8b5b      	ldrh	r3, [r3, #26]
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80073cc:	4b42      	ldr	r3, [pc, #264]	; (80074d8 <tcp_input+0x72c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd feb3 	bl	800513c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80073d6:	69f8      	ldr	r0, [r7, #28]
 80073d8:	f7fe fc48 	bl	8005c6c <tcp_abort>
            goto aborted;
 80073dc:	e091      	b.n	8007502 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00c      	beq.n	8007402 <tcp_input+0x656>
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	6918      	ldr	r0, [r3, #16]
 80073f2:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <tcp_input+0x72c>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	69f9      	ldr	r1, [r7, #28]
 80073fa:	47a0      	blx	r4
 80073fc:	4603      	mov	r3, r0
 80073fe:	74fb      	strb	r3, [r7, #19]
 8007400:	e008      	b.n	8007414 <tcp_input+0x668>
 8007402:	4b35      	ldr	r3, [pc, #212]	; (80074d8 <tcp_input+0x72c>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	2300      	movs	r3, #0
 8007408:	69f9      	ldr	r1, [r7, #28]
 800740a:	2000      	movs	r0, #0
 800740c:	f7ff f95e 	bl	80066cc <tcp_recv_null>
 8007410:	4603      	mov	r3, r0
 8007412:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007414:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007418:	f113 0f0d 	cmn.w	r3, #13
 800741c:	d053      	beq.n	80074c6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800741e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007426:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <tcp_input+0x72c>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800742e:	4b2b      	ldr	r3, [pc, #172]	; (80074dc <tcp_input+0x730>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d030      	beq.n	800749c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007446:	7b5a      	ldrb	r2, [r3, #13]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744c:	f042 0220 	orr.w	r2, r2, #32
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	735a      	strb	r2, [r3, #13]
 8007454:	e022      	b.n	800749c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800745e:	d005      	beq.n	800746c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007464:	3301      	adds	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <tcp_input+0x6e2>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	6918      	ldr	r0, [r3, #16]
 8007480:	2300      	movs	r3, #0
 8007482:	2200      	movs	r2, #0
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	47a0      	blx	r4
 8007488:	4603      	mov	r3, r0
 800748a:	74fb      	strb	r3, [r7, #19]
 800748c:	e001      	b.n	8007492 <tcp_input+0x6e6>
 800748e:	2300      	movs	r3, #0
 8007490:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007496:	f113 0f0d 	cmn.w	r3, #13
 800749a:	d016      	beq.n	80074ca <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <tcp_input+0x740>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80074a2:	69f8      	ldr	r0, [r7, #28]
 80074a4:	f000 f88e 	bl	80075c4 <tcp_input_delayed_close>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d128      	bne.n	8007500 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80074ae:	69f8      	ldr	r0, [r7, #28]
 80074b0:	f002 fac8 	bl	8009a44 <tcp_output>
 80074b4:	e025      	b.n	8007502 <tcp_input+0x756>
        goto aborted;
 80074b6:	bf00      	nop
 80074b8:	e023      	b.n	8007502 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80074ba:	bf00      	nop
 80074bc:	e021      	b.n	8007502 <tcp_input+0x756>
              goto aborted;
 80074be:	bf00      	nop
 80074c0:	e01f      	b.n	8007502 <tcp_input+0x756>
          goto aborted;
 80074c2:	bf00      	nop
 80074c4:	e01d      	b.n	8007502 <tcp_input+0x756>
            goto aborted;
 80074c6:	bf00      	nop
 80074c8:	e01b      	b.n	8007502 <tcp_input+0x756>
              goto aborted;
 80074ca:	bf00      	nop
 80074cc:	e019      	b.n	8007502 <tcp_input+0x756>
 80074ce:	bf00      	nop
 80074d0:	2000a430 	.word	0x2000a430
 80074d4:	2000a440 	.word	0x2000a440
 80074d8:	2000a460 	.word	0x2000a460
 80074dc:	2000a45d 	.word	0x2000a45d
 80074e0:	2000a458 	.word	0x2000a458
 80074e4:	2000a45c 	.word	0x2000a45c
 80074e8:	2000a45a 	.word	0x2000a45a
 80074ec:	2000a464 	.word	0x2000a464
 80074f0:	2000a424 	.word	0x2000a424
 80074f4:	08011aa4 	.word	0x08011aa4
 80074f8:	08011c58 	.word	0x08011c58
 80074fc:	08011af0 	.word	0x08011af0
          goto aborted;
 8007500:	bf00      	nop
    tcp_input_pcb = NULL;
 8007502:	4b27      	ldr	r3, [pc, #156]	; (80075a0 <tcp_input+0x7f4>)
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007508:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <tcp_input+0x7f8>)
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800750e:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <tcp_input+0x7fc>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d03f      	beq.n	8007596 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007516:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <tcp_input+0x7fc>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd fe0e 	bl	800513c <pbuf_free>
      inseg.p = NULL;
 8007520:	4b21      	ldr	r3, [pc, #132]	; (80075a8 <tcp_input+0x7fc>)
 8007522:	2200      	movs	r2, #0
 8007524:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007526:	e036      	b.n	8007596 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007528:	4b20      	ldr	r3, [pc, #128]	; (80075ac <tcp_input+0x800>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	899b      	ldrh	r3, [r3, #12]
 800752e:	b29b      	uxth	r3, r3
 8007530:	4618      	mov	r0, r3
 8007532:	f7fc fa99 	bl	8003a68 <lwip_htons>
 8007536:	4603      	mov	r3, r0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d118      	bne.n	8007574 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007542:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <tcp_input+0x804>)
 8007544:	6819      	ldr	r1, [r3, #0]
 8007546:	4b1b      	ldr	r3, [pc, #108]	; (80075b4 <tcp_input+0x808>)
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	4b1a      	ldr	r3, [pc, #104]	; (80075b8 <tcp_input+0x80c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007552:	4b16      	ldr	r3, [pc, #88]	; (80075ac <tcp_input+0x800>)
 8007554:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007556:	885b      	ldrh	r3, [r3, #2]
 8007558:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800755a:	4a14      	ldr	r2, [pc, #80]	; (80075ac <tcp_input+0x800>)
 800755c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800755e:	8812      	ldrh	r2, [r2, #0]
 8007560:	b292      	uxth	r2, r2
 8007562:	9202      	str	r2, [sp, #8]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	4b15      	ldr	r3, [pc, #84]	; (80075bc <tcp_input+0x810>)
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <tcp_input+0x814>)
 800756c:	4602      	mov	r2, r0
 800756e:	2000      	movs	r0, #0
 8007570:	f003 f81c 	bl	800a5ac <tcp_rst>
    pbuf_free(p);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7fd fde1 	bl	800513c <pbuf_free>
  return;
 800757a:	e00c      	b.n	8007596 <tcp_input+0x7ea>
    goto dropped;
 800757c:	bf00      	nop
 800757e:	e006      	b.n	800758e <tcp_input+0x7e2>
    goto dropped;
 8007580:	bf00      	nop
 8007582:	e004      	b.n	800758e <tcp_input+0x7e2>
    goto dropped;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <tcp_input+0x7e2>
      goto dropped;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <tcp_input+0x7e2>
      goto dropped;
 800758c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fd fdd4 	bl	800513c <pbuf_free>
 8007594:	e000      	b.n	8007598 <tcp_input+0x7ec>
  return;
 8007596:	bf00      	nop
}
 8007598:	3724      	adds	r7, #36	; 0x24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd90      	pop	{r4, r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000a464 	.word	0x2000a464
 80075a4:	2000a460 	.word	0x2000a460
 80075a8:	2000a430 	.word	0x2000a430
 80075ac:	2000a440 	.word	0x2000a440
 80075b0:	2000a454 	.word	0x2000a454
 80075b4:	2000a45a 	.word	0x2000a45a
 80075b8:	2000a450 	.word	0x2000a450
 80075bc:	20004cd8 	.word	0x20004cd8
 80075c0:	20004cdc 	.word	0x20004cdc

080075c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <tcp_input_delayed_close+0x1c>
 80075d2:	4b17      	ldr	r3, [pc, #92]	; (8007630 <tcp_input_delayed_close+0x6c>)
 80075d4:	f240 225a 	movw	r2, #602	; 0x25a
 80075d8:	4916      	ldr	r1, [pc, #88]	; (8007634 <tcp_input_delayed_close+0x70>)
 80075da:	4817      	ldr	r0, [pc, #92]	; (8007638 <tcp_input_delayed_close+0x74>)
 80075dc:	f008 fa2a 	bl	800fa34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80075e0:	4b16      	ldr	r3, [pc, #88]	; (800763c <tcp_input_delayed_close+0x78>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01c      	beq.n	8007626 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8b5b      	ldrh	r3, [r3, #26]
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10d      	bne.n	8007614 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d008      	beq.n	8007614 <tcp_input_delayed_close+0x50>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6912      	ldr	r2, [r2, #16]
 800760c:	f06f 010e 	mvn.w	r1, #14
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	480a      	ldr	r0, [pc, #40]	; (8007640 <tcp_input_delayed_close+0x7c>)
 8007618:	f7ff fa50 	bl	8006abc <tcp_pcb_remove>
    tcp_free(pcb);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7fe f83d 	bl	800569c <tcp_free>
    return 1;
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	08011aa4 	.word	0x08011aa4
 8007634:	08011c74 	.word	0x08011c74
 8007638:	08011af0 	.word	0x08011af0
 800763c:	2000a45d 	.word	0x2000a45d
 8007640:	2000a424 	.word	0x2000a424

08007644 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b08b      	sub	sp, #44	; 0x2c
 8007648:	af04      	add	r7, sp, #16
 800764a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800764c:	4b6f      	ldr	r3, [pc, #444]	; (800780c <tcp_listen_input+0x1c8>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	f040 80d2 	bne.w	80077fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <tcp_listen_input+0x2a>
 8007660:	4b6b      	ldr	r3, [pc, #428]	; (8007810 <tcp_listen_input+0x1cc>)
 8007662:	f240 2281 	movw	r2, #641	; 0x281
 8007666:	496b      	ldr	r1, [pc, #428]	; (8007814 <tcp_listen_input+0x1d0>)
 8007668:	486b      	ldr	r0, [pc, #428]	; (8007818 <tcp_listen_input+0x1d4>)
 800766a:	f008 f9e3 	bl	800fa34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800766e:	4b67      	ldr	r3, [pc, #412]	; (800780c <tcp_listen_input+0x1c8>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	d019      	beq.n	80076ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800767a:	4b68      	ldr	r3, [pc, #416]	; (800781c <tcp_listen_input+0x1d8>)
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	4b68      	ldr	r3, [pc, #416]	; (8007820 <tcp_listen_input+0x1dc>)
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	4b67      	ldr	r3, [pc, #412]	; (8007824 <tcp_listen_input+0x1e0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800768a:	4b67      	ldr	r3, [pc, #412]	; (8007828 <tcp_listen_input+0x1e4>)
 800768c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800768e:	885b      	ldrh	r3, [r3, #2]
 8007690:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007692:	4a65      	ldr	r2, [pc, #404]	; (8007828 <tcp_listen_input+0x1e4>)
 8007694:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007696:	8812      	ldrh	r2, [r2, #0]
 8007698:	b292      	uxth	r2, r2
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	4b63      	ldr	r3, [pc, #396]	; (800782c <tcp_listen_input+0x1e8>)
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	4b63      	ldr	r3, [pc, #396]	; (8007830 <tcp_listen_input+0x1ec>)
 80076a4:	4602      	mov	r2, r0
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f002 ff80 	bl	800a5ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80076ac:	e0a9      	b.n	8007802 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80076ae:	4b57      	ldr	r3, [pc, #348]	; (800780c <tcp_listen_input+0x1c8>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80a3 	beq.w	8007802 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7d5b      	ldrb	r3, [r3, #21]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff f927 	bl	8006914 <tcp_alloc>
 80076c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d111      	bne.n	80076f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <tcp_listen_input+0xa8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6910      	ldr	r0, [r2, #16]
 80076de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076e2:	2100      	movs	r1, #0
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]
      return;
 80076ea:	e08b      	b.n	8007804 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80076ec:	23f0      	movs	r3, #240	; 0xf0
 80076ee:	73bb      	strb	r3, [r7, #14]
      return;
 80076f0:	e088      	b.n	8007804 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80076f2:	4b50      	ldr	r3, [pc, #320]	; (8007834 <tcp_listen_input+0x1f0>)
 80076f4:	695a      	ldr	r2, [r3, #20]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80076fa:	4b4e      	ldr	r3, [pc, #312]	; (8007834 <tcp_listen_input+0x1f0>)
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	8ada      	ldrh	r2, [r3, #22]
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800770a:	4b47      	ldr	r3, [pc, #284]	; (8007828 <tcp_listen_input+0x1e4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29a      	uxth	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2203      	movs	r2, #3
 800771a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800771c:	4b41      	ldr	r3, [pc, #260]	; (8007824 <tcp_listen_input+0x1e0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800772e:	6978      	ldr	r0, [r7, #20]
 8007730:	f7ff fa58 	bl	8006be4 <tcp_next_iss>
 8007734:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800774e:	4b35      	ldr	r3, [pc, #212]	; (8007824 <tcp_listen_input+0x1e0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	1e5a      	subs	r2, r3, #1
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7a5b      	ldrb	r3, [r3, #9]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	b2da      	uxtb	r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7a1a      	ldrb	r2, [r3, #8]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800777c:	4b2e      	ldr	r3, [pc, #184]	; (8007838 <tcp_listen_input+0x1f4>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	60da      	str	r2, [r3, #12]
 8007784:	4a2c      	ldr	r2, [pc, #176]	; (8007838 <tcp_listen_input+0x1f4>)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	f003 f8d1 	bl	800a930 <tcp_timer_needed>
 800778e:	4b2b      	ldr	r3, [pc, #172]	; (800783c <tcp_listen_input+0x1f8>)
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007794:	6978      	ldr	r0, [r7, #20]
 8007796:	f001 fd8f 	bl	80092b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800779a:	4b23      	ldr	r3, [pc, #140]	; (8007828 <tcp_listen_input+0x1e4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	89db      	ldrh	r3, [r3, #14]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4618      	mov	r0, r3
 80077be:	f006 fe2f 	bl	800e420 <ip4_route>
 80077c2:	4601      	mov	r1, r0
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	3304      	adds	r3, #4
 80077c8:	461a      	mov	r2, r3
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff fa30 	bl	8006c30 <tcp_eff_send_mss_netif>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80077d8:	2112      	movs	r1, #18
 80077da:	6978      	ldr	r0, [r7, #20]
 80077dc:	f002 f844 	bl	8009868 <tcp_enqueue_flags>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80077e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80077ec:	2100      	movs	r1, #0
 80077ee:	6978      	ldr	r0, [r7, #20]
 80077f0:	f7fe f97e 	bl	8005af0 <tcp_abandon>
      return;
 80077f4:	e006      	b.n	8007804 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80077f6:	6978      	ldr	r0, [r7, #20]
 80077f8:	f002 f924 	bl	8009a44 <tcp_output>
  return;
 80077fc:	e001      	b.n	8007802 <tcp_listen_input+0x1be>
    return;
 80077fe:	bf00      	nop
 8007800:	e000      	b.n	8007804 <tcp_listen_input+0x1c0>
  return;
 8007802:	bf00      	nop
}
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	bd90      	pop	{r4, r7, pc}
 800780a:	bf00      	nop
 800780c:	2000a45c 	.word	0x2000a45c
 8007810:	08011aa4 	.word	0x08011aa4
 8007814:	08011c9c 	.word	0x08011c9c
 8007818:	08011af0 	.word	0x08011af0
 800781c:	2000a454 	.word	0x2000a454
 8007820:	2000a45a 	.word	0x2000a45a
 8007824:	2000a450 	.word	0x2000a450
 8007828:	2000a440 	.word	0x2000a440
 800782c:	20004cd8 	.word	0x20004cd8
 8007830:	20004cdc 	.word	0x20004cdc
 8007834:	20004cc8 	.word	0x20004cc8
 8007838:	2000a424 	.word	0x2000a424
 800783c:	2000a42c 	.word	0x2000a42c

08007840 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af04      	add	r7, sp, #16
 8007846:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007848:	4b2f      	ldr	r3, [pc, #188]	; (8007908 <tcp_timewait_input+0xc8>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d153      	bne.n	80078fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <tcp_timewait_input+0x28>
 800785a:	4b2c      	ldr	r3, [pc, #176]	; (800790c <tcp_timewait_input+0xcc>)
 800785c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007860:	492b      	ldr	r1, [pc, #172]	; (8007910 <tcp_timewait_input+0xd0>)
 8007862:	482c      	ldr	r0, [pc, #176]	; (8007914 <tcp_timewait_input+0xd4>)
 8007864:	f008 f8e6 	bl	800fa34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007868:	4b27      	ldr	r3, [pc, #156]	; (8007908 <tcp_timewait_input+0xc8>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d02a      	beq.n	80078ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007874:	4b28      	ldr	r3, [pc, #160]	; (8007918 <tcp_timewait_input+0xd8>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	db2d      	blt.n	80078de <tcp_timewait_input+0x9e>
 8007882:	4b25      	ldr	r3, [pc, #148]	; (8007918 <tcp_timewait_input+0xd8>)
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800788e:	440b      	add	r3, r1
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	dc23      	bgt.n	80078de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007896:	4b21      	ldr	r3, [pc, #132]	; (800791c <tcp_timewait_input+0xdc>)
 8007898:	6819      	ldr	r1, [r3, #0]
 800789a:	4b21      	ldr	r3, [pc, #132]	; (8007920 <tcp_timewait_input+0xe0>)
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	4b1d      	ldr	r3, [pc, #116]	; (8007918 <tcp_timewait_input+0xd8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078a6:	4b1f      	ldr	r3, [pc, #124]	; (8007924 <tcp_timewait_input+0xe4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <tcp_timewait_input+0xe4>)
 80078b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078b2:	8812      	ldrh	r2, [r2, #0]
 80078b4:	b292      	uxth	r2, r2
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <tcp_timewait_input+0xe8>)
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4b1b      	ldr	r3, [pc, #108]	; (800792c <tcp_timewait_input+0xec>)
 80078c0:	4602      	mov	r2, r0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f002 fe72 	bl	800a5ac <tcp_rst>
      return;
 80078c8:	e01b      	b.n	8007902 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <tcp_timewait_input+0xc8>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80078d6:	4b16      	ldr	r3, [pc, #88]	; (8007930 <tcp_timewait_input+0xf0>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80078de:	4b10      	ldr	r3, [pc, #64]	; (8007920 <tcp_timewait_input+0xe0>)
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00c      	beq.n	8007900 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	8b5b      	ldrh	r3, [r3, #26]
 80078ea:	f043 0302 	orr.w	r3, r3, #2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f002 f8a5 	bl	8009a44 <tcp_output>
  }
  return;
 80078fa:	e001      	b.n	8007900 <tcp_timewait_input+0xc0>
    return;
 80078fc:	bf00      	nop
 80078fe:	e000      	b.n	8007902 <tcp_timewait_input+0xc2>
  return;
 8007900:	bf00      	nop
}
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	2000a45c 	.word	0x2000a45c
 800790c:	08011aa4 	.word	0x08011aa4
 8007910:	08011cbc 	.word	0x08011cbc
 8007914:	08011af0 	.word	0x08011af0
 8007918:	2000a450 	.word	0x2000a450
 800791c:	2000a454 	.word	0x2000a454
 8007920:	2000a45a 	.word	0x2000a45a
 8007924:	2000a440 	.word	0x2000a440
 8007928:	20004cd8 	.word	0x20004cd8
 800792c:	20004cdc 	.word	0x20004cdc
 8007930:	2000a418 	.word	0x2000a418

08007934 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007934:	b590      	push	{r4, r7, lr}
 8007936:	b08d      	sub	sp, #52	; 0x34
 8007938:	af04      	add	r7, sp, #16
 800793a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <tcp_process+0x24>
 800794a:	4b9d      	ldr	r3, [pc, #628]	; (8007bc0 <tcp_process+0x28c>)
 800794c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007950:	499c      	ldr	r1, [pc, #624]	; (8007bc4 <tcp_process+0x290>)
 8007952:	489d      	ldr	r0, [pc, #628]	; (8007bc8 <tcp_process+0x294>)
 8007954:	f008 f86e 	bl	800fa34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007958:	4b9c      	ldr	r3, [pc, #624]	; (8007bcc <tcp_process+0x298>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d04e      	beq.n	8007a02 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7d1b      	ldrb	r3, [r3, #20]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d108      	bne.n	800797e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007970:	4b97      	ldr	r3, [pc, #604]	; (8007bd0 <tcp_process+0x29c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d123      	bne.n	80079c0 <tcp_process+0x8c>
        acceptable = 1;
 8007978:	2301      	movs	r3, #1
 800797a:	76fb      	strb	r3, [r7, #27]
 800797c:	e020      	b.n	80079c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007982:	4b94      	ldr	r3, [pc, #592]	; (8007bd4 <tcp_process+0x2a0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d102      	bne.n	8007990 <tcp_process+0x5c>
        acceptable = 1;
 800798a:	2301      	movs	r3, #1
 800798c:	76fb      	strb	r3, [r7, #27]
 800798e:	e017      	b.n	80079c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007990:	4b90      	ldr	r3, [pc, #576]	; (8007bd4 <tcp_process+0x2a0>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	db10      	blt.n	80079c0 <tcp_process+0x8c>
 800799e:	4b8d      	ldr	r3, [pc, #564]	; (8007bd4 <tcp_process+0x2a0>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80079aa:	440b      	add	r3, r1
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dc06      	bgt.n	80079c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	8b5b      	ldrh	r3, [r3, #26]
 80079b6:	f043 0302 	orr.w	r3, r3, #2
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80079c0:	7efb      	ldrb	r3, [r7, #27]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01b      	beq.n	80079fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7d1b      	ldrb	r3, [r3, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <tcp_process+0xa8>
 80079ce:	4b7c      	ldr	r3, [pc, #496]	; (8007bc0 <tcp_process+0x28c>)
 80079d0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80079d4:	4980      	ldr	r1, [pc, #512]	; (8007bd8 <tcp_process+0x2a4>)
 80079d6:	487c      	ldr	r0, [pc, #496]	; (8007bc8 <tcp_process+0x294>)
 80079d8:	f008 f82c 	bl	800fa34 <iprintf>
      recv_flags |= TF_RESET;
 80079dc:	4b7f      	ldr	r3, [pc, #508]	; (8007bdc <tcp_process+0x2a8>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f043 0308 	orr.w	r3, r3, #8
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	4b7d      	ldr	r3, [pc, #500]	; (8007bdc <tcp_process+0x2a8>)
 80079e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	8b5b      	ldrh	r3, [r3, #26]
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80079f8:	f06f 030d 	mvn.w	r3, #13
 80079fc:	e37a      	b.n	80080f4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e378      	b.n	80080f4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007a02:	4b72      	ldr	r3, [pc, #456]	; (8007bcc <tcp_process+0x298>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d010      	beq.n	8007a30 <tcp_process+0xfc>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7d1b      	ldrb	r3, [r3, #20]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d00c      	beq.n	8007a30 <tcp_process+0xfc>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7d1b      	ldrb	r3, [r3, #20]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d008      	beq.n	8007a30 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8b5b      	ldrh	r3, [r3, #26]
 8007a22:	f043 0302 	orr.w	r3, r3, #2
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e361      	b.n	80080f4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	8b5b      	ldrh	r3, [r3, #26]
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007a3c:	4b68      	ldr	r3, [pc, #416]	; (8007be0 <tcp_process+0x2ac>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fc2f 	bl	80092b8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7d1b      	ldrb	r3, [r3, #20]
 8007a5e:	3b02      	subs	r3, #2
 8007a60:	2b07      	cmp	r3, #7
 8007a62:	f200 8337 	bhi.w	80080d4 <tcp_process+0x7a0>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <tcp_process+0x138>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a8d 	.word	0x08007a8d
 8007a70:	08007cbd 	.word	0x08007cbd
 8007a74:	08007e35 	.word	0x08007e35
 8007a78:	08007e5f 	.word	0x08007e5f
 8007a7c:	08007f83 	.word	0x08007f83
 8007a80:	08007e35 	.word	0x08007e35
 8007a84:	0800800f 	.word	0x0800800f
 8007a88:	0800809f 	.word	0x0800809f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007a8c:	4b4f      	ldr	r3, [pc, #316]	; (8007bcc <tcp_process+0x298>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80e4 	beq.w	8007c62 <tcp_process+0x32e>
 8007a9a:	4b4c      	ldr	r3, [pc, #304]	; (8007bcc <tcp_process+0x298>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 80dd 	beq.w	8007c62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	4b48      	ldr	r3, [pc, #288]	; (8007bd0 <tcp_process+0x29c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	f040 80d5 	bne.w	8007c62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007ab8:	4b46      	ldr	r3, [pc, #280]	; (8007bd4 <tcp_process+0x2a0>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007aca:	4b41      	ldr	r3, [pc, #260]	; (8007bd0 <tcp_process+0x29c>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007ad2:	4b44      	ldr	r3, [pc, #272]	; (8007be4 <tcp_process+0x2b0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	89db      	ldrh	r3, [r3, #14]
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007aec:	4b39      	ldr	r3, [pc, #228]	; (8007bd4 <tcp_process+0x2a0>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	1e5a      	subs	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2204      	movs	r2, #4
 8007afa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4618      	mov	r0, r3
 8007b06:	f006 fc8b 	bl	800e420 <ip4_route>
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	461a      	mov	r2, r3
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff f88c 	bl	8006c30 <tcp_eff_send_mss_netif>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b24:	009a      	lsls	r2, r3, #2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007b30:	428b      	cmp	r3, r1
 8007b32:	bf38      	it	cc
 8007b34:	460b      	movcc	r3, r1
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d204      	bcs.n	8007b44 <tcp_process+0x210>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	e00d      	b.n	8007b60 <tcp_process+0x22c>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	f241 121c 	movw	r2, #4380	; 0x111c
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d904      	bls.n	8007b5c <tcp_process+0x228>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	e001      	b.n	8007b60 <tcp_process+0x22c>
 8007b5c:	f241 131c 	movw	r3, #4380	; 0x111c
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <tcp_process+0x24a>
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <tcp_process+0x28c>)
 8007b72:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007b76:	491c      	ldr	r1, [pc, #112]	; (8007be8 <tcp_process+0x2b4>)
 8007b78:	4813      	ldr	r0, [pc, #76]	; (8007bc8 <tcp_process+0x294>)
 8007b7a:	f007 ff5b 	bl	800fa34 <iprintf>
        --pcb->snd_queuelen;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d12a      	bne.n	8007bf0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b9e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <tcp_process+0x280>
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <tcp_process+0x28c>)
 8007ba8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007bac:	490f      	ldr	r1, [pc, #60]	; (8007bec <tcp_process+0x2b8>)
 8007bae:	4806      	ldr	r0, [pc, #24]	; (8007bc8 <tcp_process+0x294>)
 8007bb0:	f007 ff40 	bl	800fa34 <iprintf>
          pcb->unsent = rseg->next;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	66da      	str	r2, [r3, #108]	; 0x6c
 8007bbc:	e01c      	b.n	8007bf8 <tcp_process+0x2c4>
 8007bbe:	bf00      	nop
 8007bc0:	08011aa4 	.word	0x08011aa4
 8007bc4:	08011cdc 	.word	0x08011cdc
 8007bc8:	08011af0 	.word	0x08011af0
 8007bcc:	2000a45c 	.word	0x2000a45c
 8007bd0:	2000a454 	.word	0x2000a454
 8007bd4:	2000a450 	.word	0x2000a450
 8007bd8:	08011cf8 	.word	0x08011cf8
 8007bdc:	2000a45d 	.word	0x2000a45d
 8007be0:	2000a418 	.word	0x2000a418
 8007be4:	2000a440 	.word	0x2000a440
 8007be8:	08011d18 	.word	0x08011d18
 8007bec:	08011d30 	.word	0x08011d30
        } else {
          pcb->unacked = rseg->next;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007bf8:	69f8      	ldr	r0, [r7, #28]
 8007bfa:	f7fe fd22 	bl	8006642 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c0c:	861a      	strh	r2, [r3, #48]	; 0x30
 8007c0e:	e006      	b.n	8007c1e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <tcp_process+0x30a>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6910      	ldr	r0, [r2, #16]
 8007c32:	2200      	movs	r2, #0
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4798      	blx	r3
 8007c38:	4603      	mov	r3, r0
 8007c3a:	76bb      	strb	r3, [r7, #26]
 8007c3c:	e001      	b.n	8007c42 <tcp_process+0x30e>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007c42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007c46:	f113 0f0d 	cmn.w	r3, #13
 8007c4a:	d102      	bne.n	8007c52 <tcp_process+0x31e>
          return ERR_ABRT;
 8007c4c:	f06f 030c 	mvn.w	r3, #12
 8007c50:	e250      	b.n	80080f4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8b5b      	ldrh	r3, [r3, #26]
 8007c56:	f043 0302 	orr.w	r3, r3, #2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007c60:	e23a      	b.n	80080d8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007c62:	4b98      	ldr	r3, [pc, #608]	; (8007ec4 <tcp_process+0x590>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 8234 	beq.w	80080d8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c70:	4b95      	ldr	r3, [pc, #596]	; (8007ec8 <tcp_process+0x594>)
 8007c72:	6819      	ldr	r1, [r3, #0]
 8007c74:	4b95      	ldr	r3, [pc, #596]	; (8007ecc <tcp_process+0x598>)
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4b95      	ldr	r3, [pc, #596]	; (8007ed0 <tcp_process+0x59c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c80:	4b94      	ldr	r3, [pc, #592]	; (8007ed4 <tcp_process+0x5a0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c88:	4a92      	ldr	r2, [pc, #584]	; (8007ed4 <tcp_process+0x5a0>)
 8007c8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c8c:	8812      	ldrh	r2, [r2, #0]
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	4b90      	ldr	r3, [pc, #576]	; (8007ed8 <tcp_process+0x5a4>)
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4b90      	ldr	r3, [pc, #576]	; (8007edc <tcp_process+0x5a8>)
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f002 fc85 	bl	800a5ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ca8:	2b05      	cmp	r3, #5
 8007caa:	f200 8215 	bhi.w	80080d8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f002 fa51 	bl	800a15c <tcp_rexmit_rto>
      break;
 8007cba:	e20d      	b.n	80080d8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007cbc:	4b81      	ldr	r3, [pc, #516]	; (8007ec4 <tcp_process+0x590>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80a1 	beq.w	8007e0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007cca:	4b7f      	ldr	r3, [pc, #508]	; (8007ec8 <tcp_process+0x594>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db7e      	blt.n	8007dd8 <tcp_process+0x4a4>
 8007cda:	4b7b      	ldr	r3, [pc, #492]	; (8007ec8 <tcp_process+0x594>)
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dc77      	bgt.n	8007dd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d102      	bne.n	8007cfc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007cf6:	23fa      	movs	r3, #250	; 0xfa
 8007cf8:	76bb      	strb	r3, [r7, #26]
 8007cfa:	e01d      	b.n	8007d38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <tcp_process+0x3e0>
 8007d06:	4b76      	ldr	r3, [pc, #472]	; (8007ee0 <tcp_process+0x5ac>)
 8007d08:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007d0c:	4975      	ldr	r1, [pc, #468]	; (8007ee4 <tcp_process+0x5b0>)
 8007d0e:	4876      	ldr	r0, [pc, #472]	; (8007ee8 <tcp_process+0x5b4>)
 8007d10:	f007 fe90 	bl	800fa34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <tcp_process+0x400>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6910      	ldr	r0, [r2, #16]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	76bb      	strb	r3, [r7, #26]
 8007d32:	e001      	b.n	8007d38 <tcp_process+0x404>
 8007d34:	23f0      	movs	r3, #240	; 0xf0
 8007d36:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007d38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007d40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007d44:	f113 0f0d 	cmn.w	r3, #13
 8007d48:	d002      	beq.n	8007d50 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fd ff8e 	bl	8005c6c <tcp_abort>
            }
            return ERR_ABRT;
 8007d50:	f06f 030c 	mvn.w	r3, #12
 8007d54:	e1ce      	b.n	80080f4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fae0 	bl	800831c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007d5c:	4b63      	ldr	r3, [pc, #396]	; (8007eec <tcp_process+0x5b8>)
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <tcp_process+0x43c>
            recv_acked--;
 8007d64:	4b61      	ldr	r3, [pc, #388]	; (8007eec <tcp_process+0x5b8>)
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	4b5f      	ldr	r3, [pc, #380]	; (8007eec <tcp_process+0x5b8>)
 8007d6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d74:	009a      	lsls	r2, r3, #2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007d80:	428b      	cmp	r3, r1
 8007d82:	bf38      	it	cc
 8007d84:	460b      	movcc	r3, r1
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d204      	bcs.n	8007d94 <tcp_process+0x460>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	e00d      	b.n	8007db0 <tcp_process+0x47c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	f241 121c 	movw	r2, #4380	; 0x111c
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d904      	bls.n	8007dac <tcp_process+0x478>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	e001      	b.n	8007db0 <tcp_process+0x47c>
 8007dac:	f241 131c 	movw	r3, #4380	; 0x111c
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007db6:	4b4e      	ldr	r3, [pc, #312]	; (8007ef0 <tcp_process+0x5bc>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d037      	beq.n	8007e32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8b5b      	ldrh	r3, [r3, #26]
 8007dc6:	f043 0302 	orr.w	r3, r3, #2
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2207      	movs	r2, #7
 8007dd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007dd6:	e02c      	b.n	8007e32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dd8:	4b3b      	ldr	r3, [pc, #236]	; (8007ec8 <tcp_process+0x594>)
 8007dda:	6819      	ldr	r1, [r3, #0]
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	; (8007ecc <tcp_process+0x598>)
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	4b3b      	ldr	r3, [pc, #236]	; (8007ed0 <tcp_process+0x59c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007de8:	4b3a      	ldr	r3, [pc, #232]	; (8007ed4 <tcp_process+0x5a0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007df0:	4a38      	ldr	r2, [pc, #224]	; (8007ed4 <tcp_process+0x5a0>)
 8007df2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007df4:	8812      	ldrh	r2, [r2, #0]
 8007df6:	b292      	uxth	r2, r2
 8007df8:	9202      	str	r2, [sp, #8]
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	4b36      	ldr	r3, [pc, #216]	; (8007ed8 <tcp_process+0x5a4>)
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	4b36      	ldr	r3, [pc, #216]	; (8007edc <tcp_process+0x5a8>)
 8007e02:	4602      	mov	r2, r0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f002 fbd1 	bl	800a5ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007e0a:	e167      	b.n	80080dc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007e0c:	4b2d      	ldr	r3, [pc, #180]	; (8007ec4 <tcp_process+0x590>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8161 	beq.w	80080dc <tcp_process+0x7a8>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	1e5a      	subs	r2, r3, #1
 8007e20:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <tcp_process+0x59c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	f040 8159 	bne.w	80080dc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f002 f9b8 	bl	800a1a0 <tcp_rexmit>
      break;
 8007e30:	e154      	b.n	80080dc <tcp_process+0x7a8>
 8007e32:	e153      	b.n	80080dc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fa71 	bl	800831c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007e3a:	4b2d      	ldr	r3, [pc, #180]	; (8007ef0 <tcp_process+0x5bc>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 814c 	beq.w	80080e0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8b5b      	ldrh	r3, [r3, #26]
 8007e4c:	f043 0302 	orr.w	r3, r3, #2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2207      	movs	r2, #7
 8007e5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007e5c:	e140      	b.n	80080e0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa5c 	bl	800831c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007e64:	4b22      	ldr	r3, [pc, #136]	; (8007ef0 <tcp_process+0x5bc>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d071      	beq.n	8007f54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e70:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <tcp_process+0x590>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d060      	beq.n	8007f3e <tcp_process+0x60a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e80:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <tcp_process+0x594>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d15a      	bne.n	8007f3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d156      	bne.n	8007f3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8b5b      	ldrh	r3, [r3, #26]
 8007e94:	f043 0302 	orr.w	r3, r3, #2
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fe fdbc 	bl	8006a1c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007ea4:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <tcp_process+0x5c0>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d105      	bne.n	8007eba <tcp_process+0x586>
 8007eae:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <tcp_process+0x5c0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4a0f      	ldr	r2, [pc, #60]	; (8007ef4 <tcp_process+0x5c0>)
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	e02e      	b.n	8007f18 <tcp_process+0x5e4>
 8007eba:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <tcp_process+0x5c0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e027      	b.n	8007f12 <tcp_process+0x5de>
 8007ec2:	bf00      	nop
 8007ec4:	2000a45c 	.word	0x2000a45c
 8007ec8:	2000a454 	.word	0x2000a454
 8007ecc:	2000a45a 	.word	0x2000a45a
 8007ed0:	2000a450 	.word	0x2000a450
 8007ed4:	2000a440 	.word	0x2000a440
 8007ed8:	20004cd8 	.word	0x20004cd8
 8007edc:	20004cdc 	.word	0x20004cdc
 8007ee0:	08011aa4 	.word	0x08011aa4
 8007ee4:	08011d44 	.word	0x08011d44
 8007ee8:	08011af0 	.word	0x08011af0
 8007eec:	2000a458 	.word	0x2000a458
 8007ef0:	2000a45d 	.word	0x2000a45d
 8007ef4:	2000a424 	.word	0x2000a424
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d104      	bne.n	8007f0c <tcp_process+0x5d8>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	e005      	b.n	8007f18 <tcp_process+0x5e4>
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1ef      	bne.n	8007ef8 <tcp_process+0x5c4>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	4b77      	ldr	r3, [pc, #476]	; (80080fc <tcp_process+0x7c8>)
 8007f20:	2201      	movs	r2, #1
 8007f22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	220a      	movs	r2, #10
 8007f28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007f2a:	4b75      	ldr	r3, [pc, #468]	; (8008100 <tcp_process+0x7cc>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	4a73      	ldr	r2, [pc, #460]	; (8008100 <tcp_process+0x7cc>)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	f002 fcfa 	bl	800a930 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007f3c:	e0d2      	b.n	80080e4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	8b5b      	ldrh	r3, [r3, #26]
 8007f42:	f043 0302 	orr.w	r3, r3, #2
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2208      	movs	r2, #8
 8007f50:	751a      	strb	r2, [r3, #20]
      break;
 8007f52:	e0c7      	b.n	80080e4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007f54:	4b6b      	ldr	r3, [pc, #428]	; (8008104 <tcp_process+0x7d0>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80c1 	beq.w	80080e4 <tcp_process+0x7b0>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f66:	4b68      	ldr	r3, [pc, #416]	; (8008108 <tcp_process+0x7d4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	f040 80ba 	bne.w	80080e4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 80b5 	bne.w	80080e4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	751a      	strb	r2, [r3, #20]
      break;
 8007f80:	e0b0      	b.n	80080e4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9ca 	bl	800831c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007f88:	4b60      	ldr	r3, [pc, #384]	; (800810c <tcp_process+0x7d8>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 80a9 	beq.w	80080e8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8b5b      	ldrh	r3, [r3, #26]
 8007f9a:	f043 0302 	orr.w	r3, r3, #2
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7fe fd39 	bl	8006a1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007faa:	4b59      	ldr	r3, [pc, #356]	; (8008110 <tcp_process+0x7dc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d105      	bne.n	8007fc0 <tcp_process+0x68c>
 8007fb4:	4b56      	ldr	r3, [pc, #344]	; (8008110 <tcp_process+0x7dc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	4a55      	ldr	r2, [pc, #340]	; (8008110 <tcp_process+0x7dc>)
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e013      	b.n	8007fe8 <tcp_process+0x6b4>
 8007fc0:	4b53      	ldr	r3, [pc, #332]	; (8008110 <tcp_process+0x7dc>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	e00c      	b.n	8007fe2 <tcp_process+0x6ae>
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d104      	bne.n	8007fdc <tcp_process+0x6a8>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	e005      	b.n	8007fe8 <tcp_process+0x6b4>
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1ef      	bne.n	8007fc8 <tcp_process+0x694>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	60da      	str	r2, [r3, #12]
 8007fee:	4b43      	ldr	r3, [pc, #268]	; (80080fc <tcp_process+0x7c8>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007ffa:	4b41      	ldr	r3, [pc, #260]	; (8008100 <tcp_process+0x7cc>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	4a3f      	ldr	r2, [pc, #252]	; (8008100 <tcp_process+0x7cc>)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	f002 fc92 	bl	800a930 <tcp_timer_needed>
      }
      break;
 800800c:	e06c      	b.n	80080e8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f984 	bl	800831c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008014:	4b3b      	ldr	r3, [pc, #236]	; (8008104 <tcp_process+0x7d0>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	d065      	beq.n	80080ec <tcp_process+0x7b8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008024:	4b38      	ldr	r3, [pc, #224]	; (8008108 <tcp_process+0x7d4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d15f      	bne.n	80080ec <tcp_process+0x7b8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d15b      	bne.n	80080ec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fe fcf1 	bl	8006a1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800803a:	4b35      	ldr	r3, [pc, #212]	; (8008110 <tcp_process+0x7dc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d105      	bne.n	8008050 <tcp_process+0x71c>
 8008044:	4b32      	ldr	r3, [pc, #200]	; (8008110 <tcp_process+0x7dc>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	4a31      	ldr	r2, [pc, #196]	; (8008110 <tcp_process+0x7dc>)
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	e013      	b.n	8008078 <tcp_process+0x744>
 8008050:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <tcp_process+0x7dc>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	e00c      	b.n	8008072 <tcp_process+0x73e>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d104      	bne.n	800806c <tcp_process+0x738>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	60da      	str	r2, [r3, #12]
 800806a:	e005      	b.n	8008078 <tcp_process+0x744>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1ef      	bne.n	8008058 <tcp_process+0x724>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	60da      	str	r2, [r3, #12]
 800807e:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <tcp_process+0x7c8>)
 8008080:	2201      	movs	r2, #1
 8008082:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	220a      	movs	r2, #10
 8008088:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800808a:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <tcp_process+0x7cc>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <tcp_process+0x7cc>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	f002 fc4a 	bl	800a930 <tcp_timer_needed>
      }
      break;
 800809c:	e026      	b.n	80080ec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f93c 	bl	800831c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80080a4:	4b17      	ldr	r3, [pc, #92]	; (8008104 <tcp_process+0x7d0>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01f      	beq.n	80080f0 <tcp_process+0x7bc>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080b4:	4b14      	ldr	r3, [pc, #80]	; (8008108 <tcp_process+0x7d4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d119      	bne.n	80080f0 <tcp_process+0x7bc>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d115      	bne.n	80080f0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80080c4:	4b11      	ldr	r3, [pc, #68]	; (800810c <tcp_process+0x7d8>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	f043 0310 	orr.w	r3, r3, #16
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <tcp_process+0x7d8>)
 80080d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80080d2:	e00d      	b.n	80080f0 <tcp_process+0x7bc>
    default:
      break;
 80080d4:	bf00      	nop
 80080d6:	e00c      	b.n	80080f2 <tcp_process+0x7be>
      break;
 80080d8:	bf00      	nop
 80080da:	e00a      	b.n	80080f2 <tcp_process+0x7be>
      break;
 80080dc:	bf00      	nop
 80080de:	e008      	b.n	80080f2 <tcp_process+0x7be>
      break;
 80080e0:	bf00      	nop
 80080e2:	e006      	b.n	80080f2 <tcp_process+0x7be>
      break;
 80080e4:	bf00      	nop
 80080e6:	e004      	b.n	80080f2 <tcp_process+0x7be>
      break;
 80080e8:	bf00      	nop
 80080ea:	e002      	b.n	80080f2 <tcp_process+0x7be>
      break;
 80080ec:	bf00      	nop
 80080ee:	e000      	b.n	80080f2 <tcp_process+0x7be>
      break;
 80080f0:	bf00      	nop
  }
  return ERR_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3724      	adds	r7, #36	; 0x24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd90      	pop	{r4, r7, pc}
 80080fc:	2000a42c 	.word	0x2000a42c
 8008100:	2000a428 	.word	0x2000a428
 8008104:	2000a45c 	.word	0x2000a45c
 8008108:	2000a454 	.word	0x2000a454
 800810c:	2000a45d 	.word	0x2000a45d
 8008110:	2000a424 	.word	0x2000a424

08008114 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <tcp_oos_insert_segment+0x1e>
 8008124:	4b3b      	ldr	r3, [pc, #236]	; (8008214 <tcp_oos_insert_segment+0x100>)
 8008126:	f240 421f 	movw	r2, #1055	; 0x41f
 800812a:	493b      	ldr	r1, [pc, #236]	; (8008218 <tcp_oos_insert_segment+0x104>)
 800812c:	483b      	ldr	r0, [pc, #236]	; (800821c <tcp_oos_insert_segment+0x108>)
 800812e:	f007 fc81 	bl	800fa34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	899b      	ldrh	r3, [r3, #12]
 8008138:	b29b      	uxth	r3, r3
 800813a:	4618      	mov	r0, r3
 800813c:	f7fb fc94 	bl	8003a68 <lwip_htons>
 8008140:	4603      	mov	r3, r0
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b00      	cmp	r3, #0
 800814a:	d028      	beq.n	800819e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800814c:	6838      	ldr	r0, [r7, #0]
 800814e:	f7fe fa63 	bl	8006618 <tcp_segs_free>
    next = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	603b      	str	r3, [r7, #0]
 8008156:	e056      	b.n	8008206 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	899b      	ldrh	r3, [r3, #12]
 800815e:	b29b      	uxth	r3, r3
 8008160:	4618      	mov	r0, r3
 8008162:	f7fb fc81 	bl	8003a68 <lwip_htons>
 8008166:	4603      	mov	r3, r0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00d      	beq.n	800818e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	899b      	ldrh	r3, [r3, #12]
 8008178:	b29c      	uxth	r4, r3
 800817a:	2001      	movs	r0, #1
 800817c:	f7fb fc74 	bl	8003a68 <lwip_htons>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	4322      	orrs	r2, r4
 800818a:	b292      	uxth	r2, r2
 800818c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7fe fa52 	bl	8006642 <tcp_seg_free>
    while (next &&
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	891b      	ldrh	r3, [r3, #8]
 80081a8:	461a      	mov	r2, r3
 80081aa:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <tcp_oos_insert_segment+0x10c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	441a      	add	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	8909      	ldrh	r1, [r1, #8]
 80081ba:	440b      	add	r3, r1
 80081bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80081be:	2b00      	cmp	r3, #0
 80081c0:	daca      	bge.n	8008158 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01e      	beq.n	8008206 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	891b      	ldrh	r3, [r3, #8]
 80081cc:	461a      	mov	r2, r3
 80081ce:	4b14      	ldr	r3, [pc, #80]	; (8008220 <tcp_oos_insert_segment+0x10c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	441a      	add	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	1ad3      	subs	r3, r2, r3
    if (next &&
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dd12      	ble.n	8008206 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <tcp_oos_insert_segment+0x10c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	891b      	ldrh	r3, [r3, #8]
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f7fc fe15 	bl	8004e30 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]
}
 800820c:	bf00      	nop
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bd90      	pop	{r4, r7, pc}
 8008214:	08011aa4 	.word	0x08011aa4
 8008218:	08011d64 	.word	0x08011d64
 800821c:	08011af0 	.word	0x08011af0
 8008220:	2000a450 	.word	0x2000a450

08008224 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008224:	b5b0      	push	{r4, r5, r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008232:	e03e      	b.n	80082b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	4618      	mov	r0, r3
 8008244:	f7fd f802 	bl	800524c <pbuf_clen>
 8008248:	4603      	mov	r3, r0
 800824a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008252:	8a7a      	ldrh	r2, [r7, #18]
 8008254:	429a      	cmp	r2, r3
 8008256:	d906      	bls.n	8008266 <tcp_free_acked_segments+0x42>
 8008258:	4b2a      	ldr	r3, [pc, #168]	; (8008304 <tcp_free_acked_segments+0xe0>)
 800825a:	f240 4257 	movw	r2, #1111	; 0x457
 800825e:	492a      	ldr	r1, [pc, #168]	; (8008308 <tcp_free_acked_segments+0xe4>)
 8008260:	482a      	ldr	r0, [pc, #168]	; (800830c <tcp_free_acked_segments+0xe8>)
 8008262:	f007 fbe7 	bl	800fa34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800826c:	8a7b      	ldrh	r3, [r7, #18]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	b29a      	uxth	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	891a      	ldrh	r2, [r3, #8]
 800827c:	4b24      	ldr	r3, [pc, #144]	; (8008310 <tcp_free_acked_segments+0xec>)
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	4413      	add	r3, r2
 8008282:	b29a      	uxth	r2, r3
 8008284:	4b22      	ldr	r3, [pc, #136]	; (8008310 <tcp_free_acked_segments+0xec>)
 8008286:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008288:	6978      	ldr	r0, [r7, #20]
 800828a:	f7fe f9da 	bl	8006642 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00c      	beq.n	80082b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <tcp_free_acked_segments+0x8e>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d106      	bne.n	80082b2 <tcp_free_acked_segments+0x8e>
 80082a4:	4b17      	ldr	r3, [pc, #92]	; (8008304 <tcp_free_acked_segments+0xe0>)
 80082a6:	f240 4261 	movw	r2, #1121	; 0x461
 80082aa:	491a      	ldr	r1, [pc, #104]	; (8008314 <tcp_free_acked_segments+0xf0>)
 80082ac:	4817      	ldr	r0, [pc, #92]	; (800830c <tcp_free_acked_segments+0xe8>)
 80082ae:	f007 fbc1 	bl	800fa34 <iprintf>
  while (seg_list != NULL &&
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d020      	beq.n	80082fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fb fbe7 	bl	8003a92 <lwip_htonl>
 80082c4:	4604      	mov	r4, r0
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	891b      	ldrh	r3, [r3, #8]
 80082ca:	461d      	mov	r5, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	899b      	ldrh	r3, [r3, #12]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fb fbc7 	bl	8003a68 <lwip_htons>
 80082da:	4603      	mov	r3, r0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <tcp_free_acked_segments+0xc6>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <tcp_free_acked_segments+0xc8>
 80082ea:	2300      	movs	r3, #0
 80082ec:	442b      	add	r3, r5
 80082ee:	18e2      	adds	r2, r4, r3
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <tcp_free_acked_segments+0xf4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	dd9c      	ble.n	8008234 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80082fa:	68bb      	ldr	r3, [r7, #8]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bdb0      	pop	{r4, r5, r7, pc}
 8008304:	08011aa4 	.word	0x08011aa4
 8008308:	08011d8c 	.word	0x08011d8c
 800830c:	08011af0 	.word	0x08011af0
 8008310:	2000a458 	.word	0x2000a458
 8008314:	08011db4 	.word	0x08011db4
 8008318:	2000a454 	.word	0x2000a454

0800831c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800831c:	b5b0      	push	{r4, r5, r7, lr}
 800831e:	b094      	sub	sp, #80	; 0x50
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <tcp_receive+0x20>
 800832e:	4b91      	ldr	r3, [pc, #580]	; (8008574 <tcp_receive+0x258>)
 8008330:	f240 427b 	movw	r2, #1147	; 0x47b
 8008334:	4990      	ldr	r1, [pc, #576]	; (8008578 <tcp_receive+0x25c>)
 8008336:	4891      	ldr	r0, [pc, #580]	; (800857c <tcp_receive+0x260>)
 8008338:	f007 fb7c 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7d1b      	ldrb	r3, [r3, #20]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d806      	bhi.n	8008352 <tcp_receive+0x36>
 8008344:	4b8b      	ldr	r3, [pc, #556]	; (8008574 <tcp_receive+0x258>)
 8008346:	f240 427c 	movw	r2, #1148	; 0x47c
 800834a:	498d      	ldr	r1, [pc, #564]	; (8008580 <tcp_receive+0x264>)
 800834c:	488b      	ldr	r0, [pc, #556]	; (800857c <tcp_receive+0x260>)
 800834e:	f007 fb71 	bl	800fa34 <iprintf>

  if (flags & TCP_ACK) {
 8008352:	4b8c      	ldr	r3, [pc, #560]	; (8008584 <tcp_receive+0x268>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	f003 0310 	and.w	r3, r3, #16
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 8264 	beq.w	8008828 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836c:	4413      	add	r3, r2
 800836e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008374:	4b84      	ldr	r3, [pc, #528]	; (8008588 <tcp_receive+0x26c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	db1b      	blt.n	80083b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008382:	4b81      	ldr	r3, [pc, #516]	; (8008588 <tcp_receive+0x26c>)
 8008384:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008386:	429a      	cmp	r2, r3
 8008388:	d106      	bne.n	8008398 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800838e:	4b7f      	ldr	r3, [pc, #508]	; (800858c <tcp_receive+0x270>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	db0e      	blt.n	80083b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800839c:	4b7b      	ldr	r3, [pc, #492]	; (800858c <tcp_receive+0x270>)
 800839e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d125      	bne.n	80083f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80083a4:	4b7a      	ldr	r3, [pc, #488]	; (8008590 <tcp_receive+0x274>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	89db      	ldrh	r3, [r3, #14]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d91c      	bls.n	80083f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80083b6:	4b76      	ldr	r3, [pc, #472]	; (8008590 <tcp_receive+0x274>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	89db      	ldrh	r3, [r3, #14]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d205      	bcs.n	80083e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80083e0:	4b69      	ldr	r3, [pc, #420]	; (8008588 <tcp_receive+0x26c>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80083e8:	4b68      	ldr	r3, [pc, #416]	; (800858c <tcp_receive+0x270>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80083f0:	4b66      	ldr	r3, [pc, #408]	; (800858c <tcp_receive+0x270>)
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dc58      	bgt.n	80084b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80083fe:	4b65      	ldr	r3, [pc, #404]	; (8008594 <tcp_receive+0x278>)
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d14b      	bne.n	800849e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008410:	4413      	add	r3, r2
 8008412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008414:	429a      	cmp	r2, r3
 8008416:	d142      	bne.n	800849e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800841e:	2b00      	cmp	r3, #0
 8008420:	db3d      	blt.n	800849e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008426:	4b59      	ldr	r3, [pc, #356]	; (800858c <tcp_receive+0x270>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d137      	bne.n	800849e <tcp_receive+0x182>
              found_dupack = 1;
 800842e:	2301      	movs	r3, #1
 8008430:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008438:	2bff      	cmp	r3, #255	; 0xff
 800843a:	d007      	beq.n	800844c <tcp_receive+0x130>
                ++pcb->dupacks;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008442:	3301      	adds	r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008452:	2b03      	cmp	r3, #3
 8008454:	d91b      	bls.n	800848e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008460:	4413      	add	r3, r2
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800846a:	429a      	cmp	r2, r3
 800846c:	d30a      	bcc.n	8008484 <tcp_receive+0x168>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008478:	4413      	add	r3, r2
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008482:	e004      	b.n	800848e <tcp_receive+0x172>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800848a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008494:	2b02      	cmp	r3, #2
 8008496:	d902      	bls.n	800849e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 feed 	bl	800a278 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800849e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 8161 	bne.w	8008768 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084ae:	e15b      	b.n	8008768 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80084b0:	4b36      	ldr	r3, [pc, #216]	; (800858c <tcp_receive+0x270>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f2c0 814e 	blt.w	800875e <tcp_receive+0x442>
 80084c2:	4b32      	ldr	r3, [pc, #200]	; (800858c <tcp_receive+0x270>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f300 8146 	bgt.w	800875e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	8b5b      	ldrh	r3, [r3, #26]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d010      	beq.n	8008500 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	8b5b      	ldrh	r3, [r3, #26]
 80084e2:	f023 0304 	bic.w	r3, r3, #4
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800850e:	10db      	asrs	r3, r3, #3
 8008510:	b21b      	sxth	r3, r3
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800851a:	b29b      	uxth	r3, r3
 800851c:	4413      	add	r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	b21a      	sxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008528:	4b18      	ldr	r3, [pc, #96]	; (800858c <tcp_receive+0x270>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	b29b      	uxth	r3, r3
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008540:	4b12      	ldr	r3, [pc, #72]	; (800858c <tcp_receive+0x270>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7d1b      	ldrb	r3, [r3, #20]
 800854c:	2b03      	cmp	r3, #3
 800854e:	f240 8097 	bls.w	8008680 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800855e:	429a      	cmp	r2, r3
 8008560:	d245      	bcs.n	80085ee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8b5b      	ldrh	r3, [r3, #26]
 8008566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800856a:	2b00      	cmp	r3, #0
 800856c:	d014      	beq.n	8008598 <tcp_receive+0x27c>
 800856e:	2301      	movs	r3, #1
 8008570:	e013      	b.n	800859a <tcp_receive+0x27e>
 8008572:	bf00      	nop
 8008574:	08011aa4 	.word	0x08011aa4
 8008578:	08011dd4 	.word	0x08011dd4
 800857c:	08011af0 	.word	0x08011af0
 8008580:	08011df0 	.word	0x08011df0
 8008584:	2000a45c 	.word	0x2000a45c
 8008588:	2000a450 	.word	0x2000a450
 800858c:	2000a454 	.word	0x2000a454
 8008590:	2000a440 	.word	0x2000a440
 8008594:	2000a45a 	.word	0x2000a45a
 8008598:	2302      	movs	r3, #2
 800859a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800859e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80085a8:	fb12 f303 	smulbb	r3, r2, r3
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085b0:	4293      	cmp	r3, r2
 80085b2:	bf28      	it	cs
 80085b4:	4613      	movcs	r3, r2
 80085b6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80085be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80085c0:	4413      	add	r3, r2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d309      	bcc.n	80085e2 <tcp_receive+0x2c6>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80085d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80085d6:	4413      	add	r3, r2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80085e0:	e04e      	b.n	8008680 <tcp_receive+0x364>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80085ec:	e048      	b.n	8008680 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80085f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085f6:	4413      	add	r3, r2
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008600:	429a      	cmp	r2, r3
 8008602:	d309      	bcc.n	8008618 <tcp_receive+0x2fc>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800860a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800860c:	4413      	add	r3, r2
 800860e:	b29a      	uxth	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008616:	e004      	b.n	8008622 <tcp_receive+0x306>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800861e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800862e:	429a      	cmp	r2, r3
 8008630:	d326      	bcc.n	8008680 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008652:	4413      	add	r3, r2
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800865c:	429a      	cmp	r2, r3
 800865e:	d30a      	bcc.n	8008676 <tcp_receive+0x35a>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800866a:	4413      	add	r3, r2
 800866c:	b29a      	uxth	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008674:	e004      	b.n	8008680 <tcp_receive+0x364>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800867c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008688:	4a98      	ldr	r2, [pc, #608]	; (80088ec <tcp_receive+0x5d0>)
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fdca 	bl	8008224 <tcp_free_acked_segments>
 8008690:	4602      	mov	r2, r0
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	4a94      	ldr	r2, [pc, #592]	; (80088f0 <tcp_receive+0x5d4>)
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fdbf 	bl	8008224 <tcp_free_acked_segments>
 80086a6:	4602      	mov	r2, r0
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d104      	bne.n	80086be <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ba:	861a      	strh	r2, [r3, #48]	; 0x30
 80086bc:	e002      	b.n	80086c4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80086e0:	4b84      	ldr	r3, [pc, #528]	; (80088f4 <tcp_receive+0x5d8>)
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	4413      	add	r3, r2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	8b5b      	ldrh	r3, [r3, #26]
 80086f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d035      	beq.n	8008766 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d118      	bne.n	8008734 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00c      	beq.n	8008724 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	4618      	mov	r0, r3
 8008718:	f7fb f9bb 	bl	8003a92 <lwip_htonl>
 800871c:	4603      	mov	r3, r0
 800871e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008720:	2b00      	cmp	r3, #0
 8008722:	dc20      	bgt.n	8008766 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	8b5b      	ldrh	r3, [r3, #26]
 8008728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800872c:	b29a      	uxth	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008732:	e018      	b.n	8008766 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	4618      	mov	r0, r3
 8008742:	f7fb f9a6 	bl	8003a92 <lwip_htonl>
 8008746:	4603      	mov	r3, r0
 8008748:	1ae3      	subs	r3, r4, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	dc0b      	bgt.n	8008766 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	8b5b      	ldrh	r3, [r3, #26]
 8008752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800875c:	e003      	b.n	8008766 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 ff76 	bl	800a650 <tcp_send_empty_ack>
 8008764:	e000      	b.n	8008768 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008766:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876c:	2b00      	cmp	r3, #0
 800876e:	d05b      	beq.n	8008828 <tcp_receive+0x50c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008774:	4b60      	ldr	r3, [pc, #384]	; (80088f8 <tcp_receive+0x5dc>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	da54      	bge.n	8008828 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800877e:	4b5f      	ldr	r3, [pc, #380]	; (80088fc <tcp_receive+0x5e0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	b29a      	uxth	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008788:	b29b      	uxth	r3, r3
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	b29b      	uxth	r3, r3
 800878e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008792:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800879c:	10db      	asrs	r3, r3, #3
 800879e:	b21b      	sxth	r3, r3
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80087b6:	4413      	add	r3, r2
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	b21a      	sxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80087c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	da05      	bge.n	80087d4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80087c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80087cc:	425b      	negs	r3, r3
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80087d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80087de:	109b      	asrs	r3, r3, #2
 80087e0:	b21b      	sxth	r3, r3
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80087f8:	4413      	add	r3, r2
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	b21a      	sxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008808:	10db      	asrs	r3, r3, #3
 800880a:	b21b      	sxth	r3, r3
 800880c:	b29a      	uxth	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008814:	b29b      	uxth	r3, r3
 8008816:	4413      	add	r3, r2
 8008818:	b29b      	uxth	r3, r3
 800881a:	b21a      	sxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008828:	4b35      	ldr	r3, [pc, #212]	; (8008900 <tcp_receive+0x5e4>)
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 84e2 	beq.w	80091f6 <tcp_receive+0xeda>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7d1b      	ldrb	r3, [r3, #20]
 8008836:	2b06      	cmp	r3, #6
 8008838:	f200 84dd 	bhi.w	80091f6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008840:	4b30      	ldr	r3, [pc, #192]	; (8008904 <tcp_receive+0x5e8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	f2c0 808f 	blt.w	800896c <tcp_receive+0x650>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008852:	4b2b      	ldr	r3, [pc, #172]	; (8008900 <tcp_receive+0x5e4>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <tcp_receive+0x5e8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	440b      	add	r3, r1
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	3301      	adds	r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	f300 8082 	bgt.w	800896c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008868:	4b27      	ldr	r3, [pc, #156]	; (8008908 <tcp_receive+0x5ec>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008872:	4b24      	ldr	r3, [pc, #144]	; (8008904 <tcp_receive+0x5e8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800887a:	4b23      	ldr	r3, [pc, #140]	; (8008908 <tcp_receive+0x5ec>)
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <tcp_receive+0x574>
 8008882:	4b22      	ldr	r3, [pc, #136]	; (800890c <tcp_receive+0x5f0>)
 8008884:	f240 5294 	movw	r2, #1428	; 0x594
 8008888:	4921      	ldr	r1, [pc, #132]	; (8008910 <tcp_receive+0x5f4>)
 800888a:	4822      	ldr	r0, [pc, #136]	; (8008914 <tcp_receive+0x5f8>)
 800888c:	f007 f8d2 	bl	800fa34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008896:	4293      	cmp	r3, r2
 8008898:	d906      	bls.n	80088a8 <tcp_receive+0x58c>
 800889a:	4b1c      	ldr	r3, [pc, #112]	; (800890c <tcp_receive+0x5f0>)
 800889c:	f240 5295 	movw	r2, #1429	; 0x595
 80088a0:	491d      	ldr	r1, [pc, #116]	; (8008918 <tcp_receive+0x5fc>)
 80088a2:	481c      	ldr	r0, [pc, #112]	; (8008914 <tcp_receive+0x5f8>)
 80088a4:	f007 f8c6 	bl	800fa34 <iprintf>
      off = (u16_t)off32;
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80088ae:	4b16      	ldr	r3, [pc, #88]	; (8008908 <tcp_receive+0x5ec>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	891b      	ldrh	r3, [r3, #8]
 80088b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d906      	bls.n	80088ca <tcp_receive+0x5ae>
 80088bc:	4b13      	ldr	r3, [pc, #76]	; (800890c <tcp_receive+0x5f0>)
 80088be:	f240 5297 	movw	r2, #1431	; 0x597
 80088c2:	4916      	ldr	r1, [pc, #88]	; (800891c <tcp_receive+0x600>)
 80088c4:	4813      	ldr	r0, [pc, #76]	; (8008914 <tcp_receive+0x5f8>)
 80088c6:	f007 f8b5 	bl	800fa34 <iprintf>
      inseg.len -= off;
 80088ca:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <tcp_receive+0x5ec>)
 80088cc:	891a      	ldrh	r2, [r3, #8]
 80088ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <tcp_receive+0x5ec>)
 80088d8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80088da:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <tcp_receive+0x5ec>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	891a      	ldrh	r2, [r3, #8]
 80088e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80088e8:	e02a      	b.n	8008940 <tcp_receive+0x624>
 80088ea:	bf00      	nop
 80088ec:	08011e0c 	.word	0x08011e0c
 80088f0:	08011e14 	.word	0x08011e14
 80088f4:	2000a458 	.word	0x2000a458
 80088f8:	2000a454 	.word	0x2000a454
 80088fc:	2000a418 	.word	0x2000a418
 8008900:	2000a45a 	.word	0x2000a45a
 8008904:	2000a450 	.word	0x2000a450
 8008908:	2000a430 	.word	0x2000a430
 800890c:	08011aa4 	.word	0x08011aa4
 8008910:	08011e1c 	.word	0x08011e1c
 8008914:	08011af0 	.word	0x08011af0
 8008918:	08011e2c 	.word	0x08011e2c
 800891c:	08011e3c 	.word	0x08011e3c
        off -= p->len;
 8008920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008922:	895b      	ldrh	r3, [r3, #10]
 8008924:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800892e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008930:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008932:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008936:	2200      	movs	r2, #0
 8008938:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800893a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008942:	895b      	ldrh	r3, [r3, #10]
 8008944:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008948:	429a      	cmp	r2, r3
 800894a:	d8e9      	bhi.n	8008920 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800894c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008950:	4619      	mov	r1, r3
 8008952:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008954:	f7fc fb6c 	bl	8005030 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	4a91      	ldr	r2, [pc, #580]	; (8008ba4 <tcp_receive+0x888>)
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	4b91      	ldr	r3, [pc, #580]	; (8008ba8 <tcp_receive+0x88c>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	4a8f      	ldr	r2, [pc, #572]	; (8008ba4 <tcp_receive+0x888>)
 8008966:	6812      	ldr	r2, [r2, #0]
 8008968:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800896a:	e00d      	b.n	8008988 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800896c:	4b8d      	ldr	r3, [pc, #564]	; (8008ba4 <tcp_receive+0x888>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	da06      	bge.n	8008988 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	8b5b      	ldrh	r3, [r3, #26]
 800897e:	f043 0302 	orr.w	r3, r3, #2
 8008982:	b29a      	uxth	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008988:	4b86      	ldr	r3, [pc, #536]	; (8008ba4 <tcp_receive+0x888>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	f2c0 842a 	blt.w	80091ec <tcp_receive+0xed0>
 8008998:	4b82      	ldr	r3, [pc, #520]	; (8008ba4 <tcp_receive+0x888>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80089a4:	440b      	add	r3, r1
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	3301      	adds	r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f300 841e 	bgt.w	80091ec <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089b4:	4b7b      	ldr	r3, [pc, #492]	; (8008ba4 <tcp_receive+0x888>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	f040 829a 	bne.w	8008ef2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80089be:	4b7a      	ldr	r3, [pc, #488]	; (8008ba8 <tcp_receive+0x88c>)
 80089c0:	891c      	ldrh	r4, [r3, #8]
 80089c2:	4b79      	ldr	r3, [pc, #484]	; (8008ba8 <tcp_receive+0x88c>)
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	899b      	ldrh	r3, [r3, #12]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fb f84c 	bl	8003a68 <lwip_htons>
 80089d0:	4603      	mov	r3, r0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 0303 	and.w	r3, r3, #3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <tcp_receive+0x6c4>
 80089dc:	2301      	movs	r3, #1
 80089de:	e000      	b.n	80089e2 <tcp_receive+0x6c6>
 80089e0:	2300      	movs	r3, #0
 80089e2:	4423      	add	r3, r4
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	4b71      	ldr	r3, [pc, #452]	; (8008bac <tcp_receive+0x890>)
 80089e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089ee:	4b6f      	ldr	r3, [pc, #444]	; (8008bac <tcp_receive+0x890>)
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d275      	bcs.n	8008ae2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80089f6:	4b6c      	ldr	r3, [pc, #432]	; (8008ba8 <tcp_receive+0x88c>)
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	899b      	ldrh	r3, [r3, #12]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fb f832 	bl	8003a68 <lwip_htons>
 8008a04:	4603      	mov	r3, r0
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01f      	beq.n	8008a50 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008a10:	4b65      	ldr	r3, [pc, #404]	; (8008ba8 <tcp_receive+0x88c>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	899b      	ldrh	r3, [r3, #12]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	b21b      	sxth	r3, r3
 8008a1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a1e:	b21c      	sxth	r4, r3
 8008a20:	4b61      	ldr	r3, [pc, #388]	; (8008ba8 <tcp_receive+0x88c>)
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	899b      	ldrh	r3, [r3, #12]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fb f81d 	bl	8003a68 <lwip_htons>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fb f814 	bl	8003a68 <lwip_htons>
 8008a40:	4603      	mov	r3, r0
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	4323      	orrs	r3, r4
 8008a46:	b21a      	sxth	r2, r3
 8008a48:	4b57      	ldr	r3, [pc, #348]	; (8008ba8 <tcp_receive+0x88c>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	b292      	uxth	r2, r2
 8008a4e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008a54:	4b54      	ldr	r3, [pc, #336]	; (8008ba8 <tcp_receive+0x88c>)
 8008a56:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008a58:	4b53      	ldr	r3, [pc, #332]	; (8008ba8 <tcp_receive+0x88c>)
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	899b      	ldrh	r3, [r3, #12]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fb f801 	bl	8003a68 <lwip_htons>
 8008a66:	4603      	mov	r3, r0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <tcp_receive+0x762>
            inseg.len -= 1;
 8008a72:	4b4d      	ldr	r3, [pc, #308]	; (8008ba8 <tcp_receive+0x88c>)
 8008a74:	891b      	ldrh	r3, [r3, #8]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	4b4b      	ldr	r3, [pc, #300]	; (8008ba8 <tcp_receive+0x88c>)
 8008a7c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008a7e:	4b4a      	ldr	r3, [pc, #296]	; (8008ba8 <tcp_receive+0x88c>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	4a49      	ldr	r2, [pc, #292]	; (8008ba8 <tcp_receive+0x88c>)
 8008a84:	8912      	ldrh	r2, [r2, #8]
 8008a86:	4611      	mov	r1, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fc f9d1 	bl	8004e30 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008a8e:	4b46      	ldr	r3, [pc, #280]	; (8008ba8 <tcp_receive+0x88c>)
 8008a90:	891c      	ldrh	r4, [r3, #8]
 8008a92:	4b45      	ldr	r3, [pc, #276]	; (8008ba8 <tcp_receive+0x88c>)
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	899b      	ldrh	r3, [r3, #12]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fa ffe4 	bl	8003a68 <lwip_htons>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <tcp_receive+0x794>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e000      	b.n	8008ab2 <tcp_receive+0x796>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4423      	add	r3, r4
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	4b3d      	ldr	r3, [pc, #244]	; (8008bac <tcp_receive+0x890>)
 8008ab8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008aba:	4b3c      	ldr	r3, [pc, #240]	; (8008bac <tcp_receive+0x890>)
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	4b38      	ldr	r3, [pc, #224]	; (8008ba4 <tcp_receive+0x888>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ace:	440b      	add	r3, r1
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d006      	beq.n	8008ae2 <tcp_receive+0x7c6>
 8008ad4:	4b36      	ldr	r3, [pc, #216]	; (8008bb0 <tcp_receive+0x894>)
 8008ad6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008ada:	4936      	ldr	r1, [pc, #216]	; (8008bb4 <tcp_receive+0x898>)
 8008adc:	4836      	ldr	r0, [pc, #216]	; (8008bb8 <tcp_receive+0x89c>)
 8008ade:	f006 ffa9 	bl	800fa34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 80e7 	beq.w	8008cba <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008aec:	4b2e      	ldr	r3, [pc, #184]	; (8008ba8 <tcp_receive+0x88c>)
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	899b      	ldrh	r3, [r3, #12]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fa ffb7 	bl	8003a68 <lwip_htons>
 8008afa:	4603      	mov	r3, r0
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d010      	beq.n	8008b28 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008b06:	e00a      	b.n	8008b1e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b0c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7fd fd92 	bl	8006642 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1f0      	bne.n	8008b08 <tcp_receive+0x7ec>
 8008b26:	e0c8      	b.n	8008cba <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008b2e:	e052      	b.n	8008bd6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	899b      	ldrh	r3, [r3, #12]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fa ff95 	bl	8003a68 <lwip_htons>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d03d      	beq.n	8008bc6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008b4a:	4b17      	ldr	r3, [pc, #92]	; (8008ba8 <tcp_receive+0x88c>)
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	899b      	ldrh	r3, [r3, #12]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fa ff88 	bl	8003a68 <lwip_htons>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d130      	bne.n	8008bc6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008b64:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <tcp_receive+0x88c>)
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	899b      	ldrh	r3, [r3, #12]
 8008b6a:	b29c      	uxth	r4, r3
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	f7fa ff7b 	bl	8003a68 <lwip_htons>
 8008b72:	4603      	mov	r3, r0
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <tcp_receive+0x88c>)
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	4322      	orrs	r2, r4
 8008b7c:	b292      	uxth	r2, r2
 8008b7e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008b80:	4b09      	ldr	r3, [pc, #36]	; (8008ba8 <tcp_receive+0x88c>)
 8008b82:	891c      	ldrh	r4, [r3, #8]
 8008b84:	4b08      	ldr	r3, [pc, #32]	; (8008ba8 <tcp_receive+0x88c>)
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	899b      	ldrh	r3, [r3, #12]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fa ff6b 	bl	8003a68 <lwip_htons>
 8008b92:	4603      	mov	r3, r0
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00e      	beq.n	8008bbc <tcp_receive+0x8a0>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e00d      	b.n	8008bbe <tcp_receive+0x8a2>
 8008ba2:	bf00      	nop
 8008ba4:	2000a450 	.word	0x2000a450
 8008ba8:	2000a430 	.word	0x2000a430
 8008bac:	2000a45a 	.word	0x2000a45a
 8008bb0:	08011aa4 	.word	0x08011aa4
 8008bb4:	08011e4c 	.word	0x08011e4c
 8008bb8:	08011af0 	.word	0x08011af0
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4423      	add	r3, r4
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	4b98      	ldr	r3, [pc, #608]	; (8008e24 <tcp_receive+0xb08>)
 8008bc4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008bd0:	6938      	ldr	r0, [r7, #16]
 8008bd2:	f7fd fd36 	bl	8006642 <tcp_seg_free>
            while (next &&
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00e      	beq.n	8008bfa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008bdc:	4b91      	ldr	r3, [pc, #580]	; (8008e24 <tcp_receive+0xb08>)
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	4b91      	ldr	r3, [pc, #580]	; (8008e28 <tcp_receive+0xb0c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	441a      	add	r2, r3
 8008be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bf0:	8909      	ldrh	r1, [r1, #8]
 8008bf2:	440b      	add	r3, r1
 8008bf4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	da9a      	bge.n	8008b30 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d059      	beq.n	8008cb4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8008c00:	4b88      	ldr	r3, [pc, #544]	; (8008e24 <tcp_receive+0xb08>)
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	4b88      	ldr	r3, [pc, #544]	; (8008e28 <tcp_receive+0xb0c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	441a      	add	r2, r3
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dd4d      	ble.n	8008cb4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	4b81      	ldr	r3, [pc, #516]	; (8008e28 <tcp_receive+0xb0c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	4b80      	ldr	r3, [pc, #512]	; (8008e2c <tcp_receive+0xb10>)
 8008c2c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008c2e:	4b7f      	ldr	r3, [pc, #508]	; (8008e2c <tcp_receive+0xb10>)
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	899b      	ldrh	r3, [r3, #12]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fa ff16 	bl	8003a68 <lwip_htons>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d005      	beq.n	8008c54 <tcp_receive+0x938>
                inseg.len -= 1;
 8008c48:	4b78      	ldr	r3, [pc, #480]	; (8008e2c <tcp_receive+0xb10>)
 8008c4a:	891b      	ldrh	r3, [r3, #8]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	4b76      	ldr	r3, [pc, #472]	; (8008e2c <tcp_receive+0xb10>)
 8008c52:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008c54:	4b75      	ldr	r3, [pc, #468]	; (8008e2c <tcp_receive+0xb10>)
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	4a74      	ldr	r2, [pc, #464]	; (8008e2c <tcp_receive+0xb10>)
 8008c5a:	8912      	ldrh	r2, [r2, #8]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fc f8e6 	bl	8004e30 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008c64:	4b71      	ldr	r3, [pc, #452]	; (8008e2c <tcp_receive+0xb10>)
 8008c66:	891c      	ldrh	r4, [r3, #8]
 8008c68:	4b70      	ldr	r3, [pc, #448]	; (8008e2c <tcp_receive+0xb10>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	899b      	ldrh	r3, [r3, #12]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fa fef9 	bl	8003a68 <lwip_htons>
 8008c76:	4603      	mov	r3, r0
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <tcp_receive+0x96a>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <tcp_receive+0x96c>
 8008c86:	2300      	movs	r3, #0
 8008c88:	4423      	add	r3, r4
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	4b65      	ldr	r3, [pc, #404]	; (8008e24 <tcp_receive+0xb08>)
 8008c8e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008c90:	4b64      	ldr	r3, [pc, #400]	; (8008e24 <tcp_receive+0xb08>)
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	4b64      	ldr	r3, [pc, #400]	; (8008e28 <tcp_receive+0xb0c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	441a      	add	r2, r3
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d006      	beq.n	8008cb4 <tcp_receive+0x998>
 8008ca6:	4b62      	ldr	r3, [pc, #392]	; (8008e30 <tcp_receive+0xb14>)
 8008ca8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008cac:	4961      	ldr	r1, [pc, #388]	; (8008e34 <tcp_receive+0xb18>)
 8008cae:	4862      	ldr	r0, [pc, #392]	; (8008e38 <tcp_receive+0xb1c>)
 8008cb0:	f006 fec0 	bl	800fa34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cb8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008cba:	4b5a      	ldr	r3, [pc, #360]	; (8008e24 <tcp_receive+0xb08>)
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	4b59      	ldr	r3, [pc, #356]	; (8008e28 <tcp_receive+0xb0c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008cce:	4b55      	ldr	r3, [pc, #340]	; (8008e24 <tcp_receive+0xb08>)
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d206      	bcs.n	8008ce4 <tcp_receive+0x9c8>
 8008cd6:	4b56      	ldr	r3, [pc, #344]	; (8008e30 <tcp_receive+0xb14>)
 8008cd8:	f240 6207 	movw	r2, #1543	; 0x607
 8008cdc:	4957      	ldr	r1, [pc, #348]	; (8008e3c <tcp_receive+0xb20>)
 8008cde:	4856      	ldr	r0, [pc, #344]	; (8008e38 <tcp_receive+0xb1c>)
 8008ce0:	f006 fea8 	bl	800fa34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ce8:	4b4e      	ldr	r3, [pc, #312]	; (8008e24 <tcp_receive+0xb08>)
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fc ffc5 	bl	8005c84 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008cfa:	4b4c      	ldr	r3, [pc, #304]	; (8008e2c <tcp_receive+0xb10>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	891b      	ldrh	r3, [r3, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d006      	beq.n	8008d12 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008d04:	4b49      	ldr	r3, [pc, #292]	; (8008e2c <tcp_receive+0xb10>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	4a4d      	ldr	r2, [pc, #308]	; (8008e40 <tcp_receive+0xb24>)
 8008d0a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008d0c:	4b47      	ldr	r3, [pc, #284]	; (8008e2c <tcp_receive+0xb10>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d12:	4b46      	ldr	r3, [pc, #280]	; (8008e2c <tcp_receive+0xb10>)
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	899b      	ldrh	r3, [r3, #12]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fa fea4 	bl	8003a68 <lwip_htons>
 8008d20:	4603      	mov	r3, r0
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80b8 	beq.w	8008e9e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008d2e:	4b45      	ldr	r3, [pc, #276]	; (8008e44 <tcp_receive+0xb28>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	f043 0320 	orr.w	r3, r3, #32
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	4b42      	ldr	r3, [pc, #264]	; (8008e44 <tcp_receive+0xb28>)
 8008d3a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008d3c:	e0af      	b.n	8008e9e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d42:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	4a36      	ldr	r2, [pc, #216]	; (8008e28 <tcp_receive+0xb0c>)
 8008d4e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	891b      	ldrh	r3, [r3, #8]
 8008d54:	461c      	mov	r4, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	899b      	ldrh	r3, [r3, #12]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fa fe82 	bl	8003a68 <lwip_htons>
 8008d64:	4603      	mov	r3, r0
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <tcp_receive+0xa58>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <tcp_receive+0xa5a>
 8008d74:	2300      	movs	r3, #0
 8008d76:	191a      	adds	r2, r3, r4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	441a      	add	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d86:	461c      	mov	r4, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	891b      	ldrh	r3, [r3, #8]
 8008d8c:	461d      	mov	r5, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	899b      	ldrh	r3, [r3, #12]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fa fe66 	bl	8003a68 <lwip_htons>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	f003 0303 	and.w	r3, r3, #3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <tcp_receive+0xa90>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <tcp_receive+0xa92>
 8008dac:	2300      	movs	r3, #0
 8008dae:	442b      	add	r3, r5
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d206      	bcs.n	8008dc2 <tcp_receive+0xaa6>
 8008db4:	4b1e      	ldr	r3, [pc, #120]	; (8008e30 <tcp_receive+0xb14>)
 8008db6:	f240 622b 	movw	r2, #1579	; 0x62b
 8008dba:	4923      	ldr	r1, [pc, #140]	; (8008e48 <tcp_receive+0xb2c>)
 8008dbc:	481e      	ldr	r0, [pc, #120]	; (8008e38 <tcp_receive+0xb1c>)
 8008dbe:	f006 fe39 	bl	800fa34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	891b      	ldrh	r3, [r3, #8]
 8008dc6:	461c      	mov	r4, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	899b      	ldrh	r3, [r3, #12]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fa fe49 	bl	8003a68 <lwip_htons>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <tcp_receive+0xaca>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <tcp_receive+0xacc>
 8008de6:	2300      	movs	r3, #0
 8008de8:	1919      	adds	r1, r3, r4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008dee:	b28b      	uxth	r3, r1
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7fc ff43 	bl	8005c84 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	891b      	ldrh	r3, [r3, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d028      	beq.n	8008e5a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008e08:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <tcp_receive+0xb24>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01d      	beq.n	8008e4c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8008e10:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <tcp_receive+0xb24>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f7fc fa50 	bl	80052c0 <pbuf_cat>
 8008e20:	e018      	b.n	8008e54 <tcp_receive+0xb38>
 8008e22:	bf00      	nop
 8008e24:	2000a45a 	.word	0x2000a45a
 8008e28:	2000a450 	.word	0x2000a450
 8008e2c:	2000a430 	.word	0x2000a430
 8008e30:	08011aa4 	.word	0x08011aa4
 8008e34:	08011e84 	.word	0x08011e84
 8008e38:	08011af0 	.word	0x08011af0
 8008e3c:	08011ec0 	.word	0x08011ec0
 8008e40:	2000a460 	.word	0x2000a460
 8008e44:	2000a45d 	.word	0x2000a45d
 8008e48:	08011ee0 	.word	0x08011ee0
            } else {
              recv_data = cseg->p;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	4a70      	ldr	r2, [pc, #448]	; (8009014 <tcp_receive+0xcf8>)
 8008e52:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2200      	movs	r2, #0
 8008e58:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	899b      	ldrh	r3, [r3, #12]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fa fe00 	bl	8003a68 <lwip_htons>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00d      	beq.n	8008e90 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008e74:	4b68      	ldr	r3, [pc, #416]	; (8009018 <tcp_receive+0xcfc>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f043 0320 	orr.w	r3, r3, #32
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	4b66      	ldr	r3, [pc, #408]	; (8009018 <tcp_receive+0xcfc>)
 8008e80:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	7d1b      	ldrb	r3, [r3, #20]
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d102      	bne.n	8008e90 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2207      	movs	r2, #7
 8008e8e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008e98:	68b8      	ldr	r0, [r7, #8]
 8008e9a:	f7fd fbd2 	bl	8006642 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d008      	beq.n	8008eb8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	f43f af43 	beq.w	8008d3e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	8b5b      	ldrh	r3, [r3, #26]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00e      	beq.n	8008ee2 <tcp_receive+0xbc6>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	8b5b      	ldrh	r3, [r3, #26]
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	835a      	strh	r2, [r3, #26]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	8b5b      	ldrh	r3, [r3, #26]
 8008ed6:	f043 0302 	orr.w	r3, r3, #2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008ee0:	e188      	b.n	80091f4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8b5b      	ldrh	r3, [r3, #26]
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008ef0:	e180      	b.n	80091f4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008efa:	4848      	ldr	r0, [pc, #288]	; (800901c <tcp_receive+0xd00>)
 8008efc:	f7fd fbba 	bl	8006674 <tcp_seg_copy>
 8008f00:	4602      	mov	r2, r0
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	675a      	str	r2, [r3, #116]	; 0x74
 8008f06:	e16d      	b.n	80091e4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f12:	e157      	b.n	80091c4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	4b41      	ldr	r3, [pc, #260]	; (8009020 <tcp_receive+0xd04>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d11d      	bne.n	8008f5e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008f22:	4b3e      	ldr	r3, [pc, #248]	; (800901c <tcp_receive+0xd00>)
 8008f24:	891a      	ldrh	r2, [r3, #8]
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	891b      	ldrh	r3, [r3, #8]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	f240 814f 	bls.w	80091ce <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008f30:	483a      	ldr	r0, [pc, #232]	; (800901c <tcp_receive+0xd00>)
 8008f32:	f7fd fb9f 	bl	8006674 <tcp_seg_copy>
 8008f36:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 8149 	beq.w	80091d2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8008f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <tcp_receive+0xc32>
                    prev->next = cseg;
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	e002      	b.n	8008f54 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008f54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f56:	6978      	ldr	r0, [r7, #20]
 8008f58:	f7ff f8dc 	bl	8008114 <tcp_oos_insert_segment>
                }
                break;
 8008f5c:	e139      	b.n	80091d2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d117      	bne.n	8008f94 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008f64:	4b2e      	ldr	r3, [pc, #184]	; (8009020 <tcp_receive+0xd04>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	da57      	bge.n	8009024 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008f74:	4829      	ldr	r0, [pc, #164]	; (800901c <tcp_receive+0xd00>)
 8008f76:	f7fd fb7d 	bl	8006674 <tcp_seg_copy>
 8008f7a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 8129 	beq.w	80091d6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008f8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f8c:	69b8      	ldr	r0, [r7, #24]
 8008f8e:	f7ff f8c1 	bl	8008114 <tcp_oos_insert_segment>
                  }
                  break;
 8008f92:	e120      	b.n	80091d6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008f94:	4b22      	ldr	r3, [pc, #136]	; (8009020 <tcp_receive+0xd04>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	db3e      	blt.n	8009024 <tcp_receive+0xd08>
 8008fa6:	4b1e      	ldr	r3, [pc, #120]	; (8009020 <tcp_receive+0xd04>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dc35      	bgt.n	8009024 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008fb8:	4818      	ldr	r0, [pc, #96]	; (800901c <tcp_receive+0xd00>)
 8008fba:	f7fd fb5b 	bl	8006674 <tcp_seg_copy>
 8008fbe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 8109 	beq.w	80091da <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fd0:	8912      	ldrh	r2, [r2, #8]
 8008fd2:	441a      	add	r2, r3
 8008fd4:	4b12      	ldr	r3, [pc, #72]	; (8009020 <tcp_receive+0xd04>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dd12      	ble.n	8009004 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008fde:	4b10      	ldr	r3, [pc, #64]	; (8009020 <tcp_receive+0xd04>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	891b      	ldrh	r3, [r3, #8]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f7fb ff16 	bl	8004e30 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800900a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800900c:	69f8      	ldr	r0, [r7, #28]
 800900e:	f7ff f881 	bl	8008114 <tcp_oos_insert_segment>
                  }
                  break;
 8009012:	e0e2      	b.n	80091da <tcp_receive+0xebe>
 8009014:	2000a460 	.word	0x2000a460
 8009018:	2000a45d 	.word	0x2000a45d
 800901c:	2000a430 	.word	0x2000a430
 8009020:	2000a450 	.word	0x2000a450
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	f040 80c6 	bne.w	80091be <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009032:	4b80      	ldr	r3, [pc, #512]	; (8009234 <tcp_receive+0xf18>)
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800903e:	2b00      	cmp	r3, #0
 8009040:	f340 80bd 	ble.w	80091be <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	899b      	ldrh	r3, [r3, #12]
 800904a:	b29b      	uxth	r3, r3
 800904c:	4618      	mov	r0, r3
 800904e:	f7fa fd0b 	bl	8003a68 <lwip_htons>
 8009052:	4603      	mov	r3, r0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	f040 80bf 	bne.w	80091de <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009060:	4875      	ldr	r0, [pc, #468]	; (8009238 <tcp_receive+0xf1c>)
 8009062:	f7fd fb07 	bl	8006674 <tcp_seg_copy>
 8009066:	4602      	mov	r2, r0
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80b6 	beq.w	80091e2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800907e:	8912      	ldrh	r2, [r2, #8]
 8009080:	441a      	add	r2, r3
 8009082:	4b6c      	ldr	r3, [pc, #432]	; (8009234 <tcp_receive+0xf18>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	dd12      	ble.n	80090b2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800908c:	4b69      	ldr	r3, [pc, #420]	; (8009234 <tcp_receive+0xf18>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	b29a      	uxth	r2, r3
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	b29b      	uxth	r3, r3
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	b29a      	uxth	r2, r3
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a8:	891b      	ldrh	r3, [r3, #8]
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f7fb febf 	bl	8004e30 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80090b2:	4b62      	ldr	r3, [pc, #392]	; (800923c <tcp_receive+0xf20>)
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	4b5e      	ldr	r3, [pc, #376]	; (8009234 <tcp_receive+0xf18>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	441a      	add	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80090c6:	440b      	add	r3, r1
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f340 8089 	ble.w	80091e2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	899b      	ldrh	r3, [r3, #12]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fa fcc4 	bl	8003a68 <lwip_htons>
 80090e0:	4603      	mov	r3, r0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d022      	beq.n	8009132 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80090ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	899b      	ldrh	r3, [r3, #12]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	b21b      	sxth	r3, r3
 80090f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80090fc:	b21c      	sxth	r4, r3
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	899b      	ldrh	r3, [r3, #12]
 8009106:	b29b      	uxth	r3, r3
 8009108:	4618      	mov	r0, r3
 800910a:	f7fa fcad 	bl	8003a68 <lwip_htons>
 800910e:	4603      	mov	r3, r0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	b29b      	uxth	r3, r3
 8009114:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009118:	b29b      	uxth	r3, r3
 800911a:	4618      	mov	r0, r3
 800911c:	f7fa fca4 	bl	8003a68 <lwip_htons>
 8009120:	4603      	mov	r3, r0
 8009122:	b21b      	sxth	r3, r3
 8009124:	4323      	orrs	r3, r4
 8009126:	b21a      	sxth	r2, r3
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	b292      	uxth	r2, r2
 8009130:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	b29a      	uxth	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913c:	4413      	add	r3, r2
 800913e:	b299      	uxth	r1, r3
 8009140:	4b3c      	ldr	r3, [pc, #240]	; (8009234 <tcp_receive+0xf18>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	b29a      	uxth	r2, r3
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	1a8a      	subs	r2, r1, r2
 800914c:	b292      	uxth	r2, r2
 800914e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7fb fe66 	bl	8004e30 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	891c      	ldrh	r4, [r3, #8]
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	899b      	ldrh	r3, [r3, #12]
 8009172:	b29b      	uxth	r3, r3
 8009174:	4618      	mov	r0, r3
 8009176:	f7fa fc77 	bl	8003a68 <lwip_htons>
 800917a:	4603      	mov	r3, r0
 800917c:	b2db      	uxtb	r3, r3
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <tcp_receive+0xe6e>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <tcp_receive+0xe70>
 800918a:	2300      	movs	r3, #0
 800918c:	4423      	add	r3, r4
 800918e:	b29a      	uxth	r2, r3
 8009190:	4b2a      	ldr	r3, [pc, #168]	; (800923c <tcp_receive+0xf20>)
 8009192:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009194:	4b29      	ldr	r3, [pc, #164]	; (800923c <tcp_receive+0xf20>)
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	4b26      	ldr	r3, [pc, #152]	; (8009234 <tcp_receive+0xf18>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	441a      	add	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80091a8:	440b      	add	r3, r1
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d019      	beq.n	80091e2 <tcp_receive+0xec6>
 80091ae:	4b24      	ldr	r3, [pc, #144]	; (8009240 <tcp_receive+0xf24>)
 80091b0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80091b4:	4923      	ldr	r1, [pc, #140]	; (8009244 <tcp_receive+0xf28>)
 80091b6:	4824      	ldr	r0, [pc, #144]	; (8009248 <tcp_receive+0xf2c>)
 80091b8:	f006 fc3c 	bl	800fa34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80091bc:	e011      	b.n	80091e2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f47f aea4 	bne.w	8008f14 <tcp_receive+0xbf8>
 80091cc:	e00a      	b.n	80091e4 <tcp_receive+0xec8>
                break;
 80091ce:	bf00      	nop
 80091d0:	e008      	b.n	80091e4 <tcp_receive+0xec8>
                break;
 80091d2:	bf00      	nop
 80091d4:	e006      	b.n	80091e4 <tcp_receive+0xec8>
                  break;
 80091d6:	bf00      	nop
 80091d8:	e004      	b.n	80091e4 <tcp_receive+0xec8>
                  break;
 80091da:	bf00      	nop
 80091dc:	e002      	b.n	80091e4 <tcp_receive+0xec8>
                  break;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <tcp_receive+0xec8>
                break;
 80091e2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 fa33 	bl	800a650 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80091ea:	e003      	b.n	80091f4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 fa2f 	bl	800a650 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80091f2:	e01a      	b.n	800922a <tcp_receive+0xf0e>
 80091f4:	e019      	b.n	800922a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80091f6:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <tcp_receive+0xf18>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	db0a      	blt.n	800921a <tcp_receive+0xefe>
 8009204:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <tcp_receive+0xf18>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009210:	440b      	add	r3, r1
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	3301      	adds	r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	dd07      	ble.n	800922a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	8b5b      	ldrh	r3, [r3, #26]
 800921e:	f043 0302 	orr.w	r3, r3, #2
 8009222:	b29a      	uxth	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009228:	e7ff      	b.n	800922a <tcp_receive+0xf0e>
 800922a:	bf00      	nop
 800922c:	3750      	adds	r7, #80	; 0x50
 800922e:	46bd      	mov	sp, r7
 8009230:	bdb0      	pop	{r4, r5, r7, pc}
 8009232:	bf00      	nop
 8009234:	2000a450 	.word	0x2000a450
 8009238:	2000a430 	.word	0x2000a430
 800923c:	2000a45a 	.word	0x2000a45a
 8009240:	08011aa4 	.word	0x08011aa4
 8009244:	08011e4c 	.word	0x08011e4c
 8009248:	08011af0 	.word	0x08011af0

0800924c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009252:	4b15      	ldr	r3, [pc, #84]	; (80092a8 <tcp_get_next_optbyte+0x5c>)
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	b291      	uxth	r1, r2
 800925a:	4a13      	ldr	r2, [pc, #76]	; (80092a8 <tcp_get_next_optbyte+0x5c>)
 800925c:	8011      	strh	r1, [r2, #0]
 800925e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009260:	4b12      	ldr	r3, [pc, #72]	; (80092ac <tcp_get_next_optbyte+0x60>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d004      	beq.n	8009272 <tcp_get_next_optbyte+0x26>
 8009268:	4b11      	ldr	r3, [pc, #68]	; (80092b0 <tcp_get_next_optbyte+0x64>)
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	88fa      	ldrh	r2, [r7, #6]
 800926e:	429a      	cmp	r2, r3
 8009270:	d208      	bcs.n	8009284 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009272:	4b10      	ldr	r3, [pc, #64]	; (80092b4 <tcp_get_next_optbyte+0x68>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3314      	adds	r3, #20
 8009278:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800927a:	88fb      	ldrh	r3, [r7, #6]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	4413      	add	r3, r2
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	e00b      	b.n	800929c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <tcp_get_next_optbyte+0x64>)
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009292:	4b06      	ldr	r3, [pc, #24]	; (80092ac <tcp_get_next_optbyte+0x60>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	797b      	ldrb	r3, [r7, #5]
 8009298:	4413      	add	r3, r2
 800929a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800929c:	4618      	mov	r0, r3
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	2000a44c 	.word	0x2000a44c
 80092ac:	2000a448 	.word	0x2000a448
 80092b0:	2000a446 	.word	0x2000a446
 80092b4:	2000a440 	.word	0x2000a440

080092b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <tcp_parseopt+0x1c>
 80092c6:	4b32      	ldr	r3, [pc, #200]	; (8009390 <tcp_parseopt+0xd8>)
 80092c8:	f240 727d 	movw	r2, #1917	; 0x77d
 80092cc:	4931      	ldr	r1, [pc, #196]	; (8009394 <tcp_parseopt+0xdc>)
 80092ce:	4832      	ldr	r0, [pc, #200]	; (8009398 <tcp_parseopt+0xe0>)
 80092d0:	f006 fbb0 	bl	800fa34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80092d4:	4b31      	ldr	r3, [pc, #196]	; (800939c <tcp_parseopt+0xe4>)
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d055      	beq.n	8009388 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80092dc:	4b30      	ldr	r3, [pc, #192]	; (80093a0 <tcp_parseopt+0xe8>)
 80092de:	2200      	movs	r2, #0
 80092e0:	801a      	strh	r2, [r3, #0]
 80092e2:	e045      	b.n	8009370 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80092e4:	f7ff ffb2 	bl	800924c <tcp_get_next_optbyte>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d006      	beq.n	8009300 <tcp_parseopt+0x48>
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	dc2b      	bgt.n	800934e <tcp_parseopt+0x96>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d041      	beq.n	800937e <tcp_parseopt+0xc6>
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d127      	bne.n	800934e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80092fe:	e037      	b.n	8009370 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009300:	f7ff ffa4 	bl	800924c <tcp_get_next_optbyte>
 8009304:	4603      	mov	r3, r0
 8009306:	2b04      	cmp	r3, #4
 8009308:	d13b      	bne.n	8009382 <tcp_parseopt+0xca>
 800930a:	4b25      	ldr	r3, [pc, #148]	; (80093a0 <tcp_parseopt+0xe8>)
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	4a22      	ldr	r2, [pc, #136]	; (800939c <tcp_parseopt+0xe4>)
 8009312:	8812      	ldrh	r2, [r2, #0]
 8009314:	4293      	cmp	r3, r2
 8009316:	da34      	bge.n	8009382 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009318:	f7ff ff98 	bl	800924c <tcp_get_next_optbyte>
 800931c:	4603      	mov	r3, r0
 800931e:	b29b      	uxth	r3, r3
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009324:	f7ff ff92 	bl	800924c <tcp_get_next_optbyte>
 8009328:	4603      	mov	r3, r0
 800932a:	b29a      	uxth	r2, r3
 800932c:	89bb      	ldrh	r3, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009332:	89bb      	ldrh	r3, [r7, #12]
 8009334:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009338:	d804      	bhi.n	8009344 <tcp_parseopt+0x8c>
 800933a:	89bb      	ldrh	r3, [r7, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <tcp_parseopt+0x8c>
 8009340:	89ba      	ldrh	r2, [r7, #12]
 8009342:	e001      	b.n	8009348 <tcp_parseopt+0x90>
 8009344:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800934c:	e010      	b.n	8009370 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800934e:	f7ff ff7d 	bl	800924c <tcp_get_next_optbyte>
 8009352:	4603      	mov	r3, r0
 8009354:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d914      	bls.n	8009386 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	b29a      	uxth	r2, r3
 8009360:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <tcp_parseopt+0xe8>)
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	4413      	add	r3, r2
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b02      	subs	r3, #2
 800936a:	b29a      	uxth	r2, r3
 800936c:	4b0c      	ldr	r3, [pc, #48]	; (80093a0 <tcp_parseopt+0xe8>)
 800936e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <tcp_parseopt+0xe8>)
 8009372:	881a      	ldrh	r2, [r3, #0]
 8009374:	4b09      	ldr	r3, [pc, #36]	; (800939c <tcp_parseopt+0xe4>)
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d3b3      	bcc.n	80092e4 <tcp_parseopt+0x2c>
 800937c:	e004      	b.n	8009388 <tcp_parseopt+0xd0>
          return;
 800937e:	bf00      	nop
 8009380:	e002      	b.n	8009388 <tcp_parseopt+0xd0>
            return;
 8009382:	bf00      	nop
 8009384:	e000      	b.n	8009388 <tcp_parseopt+0xd0>
            return;
 8009386:	bf00      	nop
      }
    }
  }
}
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	08011aa4 	.word	0x08011aa4
 8009394:	08011f08 	.word	0x08011f08
 8009398:	08011af0 	.word	0x08011af0
 800939c:	2000a444 	.word	0x2000a444
 80093a0:	2000a44c 	.word	0x2000a44c

080093a4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80093a8:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <tcp_trigger_input_pcb_close+0x1c>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f043 0310 	orr.w	r3, r3, #16
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	4b03      	ldr	r3, [pc, #12]	; (80093c0 <tcp_trigger_input_pcb_close+0x1c>)
 80093b4:	701a      	strb	r2, [r3, #0]
}
 80093b6:	bf00      	nop
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	2000a45d 	.word	0x2000a45d

080093c4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <tcp_route+0x28>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	7a1b      	ldrb	r3, [r3, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d006      	beq.n	80093ec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	7a1b      	ldrb	r3, [r3, #8]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fb fb4a 	bl	8004a7c <netif_get_by_index>
 80093e8:	4603      	mov	r3, r0
 80093ea:	e003      	b.n	80093f4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f005 f817 	bl	800e420 <ip4_route>
 80093f2:	4603      	mov	r3, r0
  }
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	4613      	mov	r3, r2
 800940a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d105      	bne.n	800941e <tcp_create_segment+0x22>
 8009412:	4b44      	ldr	r3, [pc, #272]	; (8009524 <tcp_create_segment+0x128>)
 8009414:	22a3      	movs	r2, #163	; 0xa3
 8009416:	4944      	ldr	r1, [pc, #272]	; (8009528 <tcp_create_segment+0x12c>)
 8009418:	4844      	ldr	r0, [pc, #272]	; (800952c <tcp_create_segment+0x130>)
 800941a:	f006 fb0b 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <tcp_create_segment+0x34>
 8009424:	4b3f      	ldr	r3, [pc, #252]	; (8009524 <tcp_create_segment+0x128>)
 8009426:	22a4      	movs	r2, #164	; 0xa4
 8009428:	4941      	ldr	r1, [pc, #260]	; (8009530 <tcp_create_segment+0x134>)
 800942a:	4840      	ldr	r0, [pc, #256]	; (800952c <tcp_create_segment+0x130>)
 800942c:	f006 fb02 	bl	800fa34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009430:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 0304 	and.w	r3, r3, #4
 800943c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800943e:	2003      	movs	r0, #3
 8009440:	f7fa ff8a 	bl	8004358 <memp_malloc>
 8009444:	6138      	str	r0, [r7, #16]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d104      	bne.n	8009456 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800944c:	68b8      	ldr	r0, [r7, #8]
 800944e:	f7fb fe75 	bl	800513c <pbuf_free>
    return NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	e061      	b.n	800951a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800945c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2200      	movs	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	891a      	ldrh	r2, [r3, #8]
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	b29b      	uxth	r3, r3
 8009472:	429a      	cmp	r2, r3
 8009474:	d205      	bcs.n	8009482 <tcp_create_segment+0x86>
 8009476:	4b2b      	ldr	r3, [pc, #172]	; (8009524 <tcp_create_segment+0x128>)
 8009478:	22b0      	movs	r2, #176	; 0xb0
 800947a:	492e      	ldr	r1, [pc, #184]	; (8009534 <tcp_create_segment+0x138>)
 800947c:	482b      	ldr	r0, [pc, #172]	; (800952c <tcp_create_segment+0x130>)
 800947e:	f006 fad9 	bl	800fa34 <iprintf>
  seg->len = p->tot_len - optlen;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	891a      	ldrh	r2, [r3, #8]
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	b29b      	uxth	r3, r3
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	b29a      	uxth	r2, r3
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009492:	2114      	movs	r1, #20
 8009494:	68b8      	ldr	r0, [r7, #8]
 8009496:	f7fb fdbb 	bl	8005010 <pbuf_add_header>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80094a0:	6938      	ldr	r0, [r7, #16]
 80094a2:	f7fd f8ce 	bl	8006642 <tcp_seg_free>
    return NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	e037      	b.n	800951a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8ada      	ldrh	r2, [r3, #22]
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	68dc      	ldr	r4, [r3, #12]
 80094bc:	4610      	mov	r0, r2
 80094be:	f7fa fad3 	bl	8003a68 <lwip_htons>
 80094c2:	4603      	mov	r3, r0
 80094c4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8b1a      	ldrh	r2, [r3, #24]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	68dc      	ldr	r4, [r3, #12]
 80094ce:	4610      	mov	r0, r2
 80094d0:	f7fa faca 	bl	8003a68 <lwip_htons>
 80094d4:	4603      	mov	r3, r0
 80094d6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	68dc      	ldr	r4, [r3, #12]
 80094dc:	6838      	ldr	r0, [r7, #0]
 80094de:	f7fa fad8 	bl	8003a92 <lwip_htonl>
 80094e2:	4603      	mov	r3, r0
 80094e4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	089b      	lsrs	r3, r3, #2
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3305      	adds	r3, #5
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	031b      	lsls	r3, r3, #12
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	4313      	orrs	r3, r2
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	68dc      	ldr	r4, [r3, #12]
 8009502:	4610      	mov	r0, r2
 8009504:	f7fa fab0 	bl	8003a68 <lwip_htons>
 8009508:	4603      	mov	r3, r0
 800950a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	749a      	strb	r2, [r3, #18]
 8009514:	2200      	movs	r2, #0
 8009516:	74da      	strb	r2, [r3, #19]
  return seg;
 8009518:	693b      	ldr	r3, [r7, #16]
}
 800951a:	4618      	mov	r0, r3
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	bd90      	pop	{r4, r7, pc}
 8009522:	bf00      	nop
 8009524:	08011f24 	.word	0x08011f24
 8009528:	08011f58 	.word	0x08011f58
 800952c:	08011f78 	.word	0x08011f78
 8009530:	08011fa0 	.word	0x08011fa0
 8009534:	08011fc4 	.word	0x08011fc4

08009538 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b08b      	sub	sp, #44	; 0x2c
 800953c:	af02      	add	r7, sp, #8
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]
 8009548:	2300      	movs	r3, #0
 800954a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800954c:	2300      	movs	r3, #0
 800954e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <tcp_split_unsent_seg+0x2c>
 8009556:	4b95      	ldr	r3, [pc, #596]	; (80097ac <tcp_split_unsent_seg+0x274>)
 8009558:	f240 324b 	movw	r2, #843	; 0x34b
 800955c:	4994      	ldr	r1, [pc, #592]	; (80097b0 <tcp_split_unsent_seg+0x278>)
 800955e:	4895      	ldr	r0, [pc, #596]	; (80097b4 <tcp_split_unsent_seg+0x27c>)
 8009560:	f006 fa68 	bl	800fa34 <iprintf>

  useg = pcb->unsent;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009568:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d102      	bne.n	8009576 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009574:	e116      	b.n	80097a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009576:	887b      	ldrh	r3, [r7, #2]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d109      	bne.n	8009590 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800957c:	4b8b      	ldr	r3, [pc, #556]	; (80097ac <tcp_split_unsent_seg+0x274>)
 800957e:	f240 3253 	movw	r2, #851	; 0x353
 8009582:	498d      	ldr	r1, [pc, #564]	; (80097b8 <tcp_split_unsent_seg+0x280>)
 8009584:	488b      	ldr	r0, [pc, #556]	; (80097b4 <tcp_split_unsent_seg+0x27c>)
 8009586:	f006 fa55 	bl	800fa34 <iprintf>
    return ERR_VAL;
 800958a:	f06f 0305 	mvn.w	r3, #5
 800958e:	e109      	b.n	80097a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	891b      	ldrh	r3, [r3, #8]
 8009594:	887a      	ldrh	r2, [r7, #2]
 8009596:	429a      	cmp	r2, r3
 8009598:	d301      	bcc.n	800959e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	e102      	b.n	80097a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095a2:	887a      	ldrh	r2, [r7, #2]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d906      	bls.n	80095b6 <tcp_split_unsent_seg+0x7e>
 80095a8:	4b80      	ldr	r3, [pc, #512]	; (80097ac <tcp_split_unsent_seg+0x274>)
 80095aa:	f240 325b 	movw	r2, #859	; 0x35b
 80095ae:	4983      	ldr	r1, [pc, #524]	; (80097bc <tcp_split_unsent_seg+0x284>)
 80095b0:	4880      	ldr	r0, [pc, #512]	; (80097b4 <tcp_split_unsent_seg+0x27c>)
 80095b2:	f006 fa3f 	bl	800fa34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	891b      	ldrh	r3, [r3, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <tcp_split_unsent_seg+0x94>
 80095be:	4b7b      	ldr	r3, [pc, #492]	; (80097ac <tcp_split_unsent_seg+0x274>)
 80095c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80095c4:	497e      	ldr	r1, [pc, #504]	; (80097c0 <tcp_split_unsent_seg+0x288>)
 80095c6:	487b      	ldr	r0, [pc, #492]	; (80097b4 <tcp_split_unsent_seg+0x27c>)
 80095c8:	f006 fa34 	bl	800fa34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	7a9b      	ldrb	r3, [r3, #10]
 80095d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	891a      	ldrh	r2, [r3, #8]
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	89bb      	ldrh	r3, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80095f6:	4619      	mov	r1, r3
 80095f8:	2036      	movs	r0, #54	; 0x36
 80095fa:	f7fb fabb 	bl	8004b74 <pbuf_alloc>
 80095fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80b7 	beq.w	8009776 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	891a      	ldrh	r2, [r3, #8]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	891b      	ldrh	r3, [r3, #8]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	b29a      	uxth	r2, r3
 8009616:	887b      	ldrh	r3, [r7, #2]
 8009618:	4413      	add	r3, r2
 800961a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	6858      	ldr	r0, [r3, #4]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	18d1      	adds	r1, r2, r3
 8009628:	897b      	ldrh	r3, [r7, #10]
 800962a:	89ba      	ldrh	r2, [r7, #12]
 800962c:	f7fb ff80 	bl	8005530 <pbuf_copy_partial>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	89bb      	ldrh	r3, [r7, #12]
 8009636:	4293      	cmp	r3, r2
 8009638:	f040 809f 	bne.w	800977a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	899b      	ldrh	r3, [r3, #12]
 8009642:	b29b      	uxth	r3, r3
 8009644:	4618      	mov	r0, r3
 8009646:	f7fa fa0f 	bl	8003a68 <lwip_htons>
 800964a:	4603      	mov	r3, r0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009652:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009654:	2300      	movs	r3, #0
 8009656:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009658:	7efb      	ldrb	r3, [r7, #27]
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009662:	7efb      	ldrb	r3, [r7, #27]
 8009664:	f023 0308 	bic.w	r3, r3, #8
 8009668:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800966a:	7ebb      	ldrb	r3, [r7, #26]
 800966c:	f043 0308 	orr.w	r3, r3, #8
 8009670:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009672:	7efb      	ldrb	r3, [r7, #27]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d007      	beq.n	800968c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800967c:	7efb      	ldrb	r3, [r7, #27]
 800967e:	f023 0301 	bic.w	r3, r3, #1
 8009682:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009684:	7ebb      	ldrb	r3, [r7, #26]
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	4618      	mov	r0, r3
 8009694:	f7fa f9fd 	bl	8003a92 <lwip_htonl>
 8009698:	4602      	mov	r2, r0
 800969a:	887b      	ldrh	r3, [r7, #2]
 800969c:	18d1      	adds	r1, r2, r3
 800969e:	7eba      	ldrb	r2, [r7, #26]
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	460b      	mov	r3, r1
 80096a6:	6939      	ldr	r1, [r7, #16]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff fea7 	bl	80093fc <tcp_create_segment>
 80096ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d063      	beq.n	800977e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fb fdc6 	bl	800524c <pbuf_clen>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	6858      	ldr	r0, [r3, #4]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	891a      	ldrh	r2, [r3, #8]
 80096de:	89bb      	ldrh	r3, [r7, #12]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4619      	mov	r1, r3
 80096e6:	f7fb fba3 	bl	8004e30 <pbuf_realloc>
  useg->len -= remainder;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	891a      	ldrh	r2, [r3, #8]
 80096ee:	89bb      	ldrh	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	899b      	ldrh	r3, [r3, #12]
 80096fe:	b29c      	uxth	r4, r3
 8009700:	7efb      	ldrb	r3, [r7, #27]
 8009702:	b29b      	uxth	r3, r3
 8009704:	4618      	mov	r0, r3
 8009706:	f7fa f9af 	bl	8003a68 <lwip_htons>
 800970a:	4603      	mov	r3, r0
 800970c:	461a      	mov	r2, r3
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	4322      	orrs	r2, r4
 8009714:	b292      	uxth	r2, r2
 8009716:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	4618      	mov	r0, r3
 800971e:	f7fb fd95 	bl	800524c <pbuf_clen>
 8009722:	4603      	mov	r3, r0
 8009724:	461a      	mov	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800972c:	4413      	add	r3, r2
 800972e:	b29a      	uxth	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	4618      	mov	r0, r3
 800973c:	f7fb fd86 	bl	800524c <pbuf_clen>
 8009740:	4603      	mov	r3, r0
 8009742:	461a      	mov	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800974a:	4413      	add	r3, r2
 800974c:	b29a      	uxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d103      	bne.n	8009772 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	e016      	b.n	80097a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009776:	bf00      	nop
 8009778:	e002      	b.n	8009780 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800977a:	bf00      	nop
 800977c:	e000      	b.n	8009780 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800977e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d006      	beq.n	8009794 <tcp_split_unsent_seg+0x25c>
 8009786:	4b09      	ldr	r3, [pc, #36]	; (80097ac <tcp_split_unsent_seg+0x274>)
 8009788:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800978c:	490d      	ldr	r1, [pc, #52]	; (80097c4 <tcp_split_unsent_seg+0x28c>)
 800978e:	4809      	ldr	r0, [pc, #36]	; (80097b4 <tcp_split_unsent_seg+0x27c>)
 8009790:	f006 f950 	bl	800fa34 <iprintf>
  if (p != NULL) {
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800979a:	6938      	ldr	r0, [r7, #16]
 800979c:	f7fb fcce 	bl	800513c <pbuf_free>
  }

  return ERR_MEM;
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3724      	adds	r7, #36	; 0x24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd90      	pop	{r4, r7, pc}
 80097ac:	08011f24 	.word	0x08011f24
 80097b0:	080122b8 	.word	0x080122b8
 80097b4:	08011f78 	.word	0x08011f78
 80097b8:	080122dc 	.word	0x080122dc
 80097bc:	08012300 	.word	0x08012300
 80097c0:	08012310 	.word	0x08012310
 80097c4:	08012320 	.word	0x08012320

080097c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d106      	bne.n	80097e4 <tcp_send_fin+0x1c>
 80097d6:	4b21      	ldr	r3, [pc, #132]	; (800985c <tcp_send_fin+0x94>)
 80097d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80097dc:	4920      	ldr	r1, [pc, #128]	; (8009860 <tcp_send_fin+0x98>)
 80097de:	4821      	ldr	r0, [pc, #132]	; (8009864 <tcp_send_fin+0x9c>)
 80097e0:	f006 f928 	bl	800fa34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d02e      	beq.n	800984a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	e002      	b.n	80097fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f8      	bne.n	80097f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	899b      	ldrh	r3, [r3, #12]
 8009808:	b29b      	uxth	r3, r3
 800980a:	4618      	mov	r0, r3
 800980c:	f7fa f92c 	bl	8003a68 <lwip_htons>
 8009810:	4603      	mov	r3, r0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	2b00      	cmp	r3, #0
 800981a:	d116      	bne.n	800984a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	899b      	ldrh	r3, [r3, #12]
 8009822:	b29c      	uxth	r4, r3
 8009824:	2001      	movs	r0, #1
 8009826:	f7fa f91f 	bl	8003a68 <lwip_htons>
 800982a:	4603      	mov	r3, r0
 800982c:	461a      	mov	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	4322      	orrs	r2, r4
 8009834:	b292      	uxth	r2, r2
 8009836:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8b5b      	ldrh	r3, [r3, #26]
 800983c:	f043 0320 	orr.w	r3, r3, #32
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	e004      	b.n	8009854 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800984a:	2101      	movs	r1, #1
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f80b 	bl	8009868 <tcp_enqueue_flags>
 8009852:	4603      	mov	r3, r0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	bd90      	pop	{r4, r7, pc}
 800985c:	08011f24 	.word	0x08011f24
 8009860:	0801232c 	.word	0x0801232c
 8009864:	08011f78 	.word	0x08011f78

08009868 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08a      	sub	sp, #40	; 0x28
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <tcp_enqueue_flags+0x2c>
 8009886:	4b67      	ldr	r3, [pc, #412]	; (8009a24 <tcp_enqueue_flags+0x1bc>)
 8009888:	f240 4211 	movw	r2, #1041	; 0x411
 800988c:	4966      	ldr	r1, [pc, #408]	; (8009a28 <tcp_enqueue_flags+0x1c0>)
 800988e:	4867      	ldr	r0, [pc, #412]	; (8009a2c <tcp_enqueue_flags+0x1c4>)
 8009890:	f006 f8d0 	bl	800fa34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <tcp_enqueue_flags+0x40>
 800989a:	4b62      	ldr	r3, [pc, #392]	; (8009a24 <tcp_enqueue_flags+0x1bc>)
 800989c:	f240 4213 	movw	r2, #1043	; 0x413
 80098a0:	4963      	ldr	r1, [pc, #396]	; (8009a30 <tcp_enqueue_flags+0x1c8>)
 80098a2:	4862      	ldr	r0, [pc, #392]	; (8009a2c <tcp_enqueue_flags+0x1c4>)
 80098a4:	f006 f8c6 	bl	800fa34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80098b2:	2301      	movs	r3, #1
 80098b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80098b6:	7ffb      	ldrb	r3, [r7, #31]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80098ca:	4619      	mov	r1, r3
 80098cc:	2036      	movs	r0, #54	; 0x36
 80098ce:	f7fb f951 	bl	8004b74 <pbuf_alloc>
 80098d2:	6138      	str	r0, [r7, #16]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d109      	bne.n	80098ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	8b5b      	ldrh	r3, [r3, #26]
 80098de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80098e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ec:	e095      	b.n	8009a1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	895a      	ldrh	r2, [r3, #10]
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d206      	bcs.n	8009908 <tcp_enqueue_flags+0xa0>
 80098fa:	4b4a      	ldr	r3, [pc, #296]	; (8009a24 <tcp_enqueue_flags+0x1bc>)
 80098fc:	f240 4239 	movw	r2, #1081	; 0x439
 8009900:	494c      	ldr	r1, [pc, #304]	; (8009a34 <tcp_enqueue_flags+0x1cc>)
 8009902:	484a      	ldr	r0, [pc, #296]	; (8009a2c <tcp_enqueue_flags+0x1c4>)
 8009904:	f006 f896 	bl	800fa34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	7ffb      	ldrb	r3, [r7, #31]
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	460b      	mov	r3, r1
 8009914:	6939      	ldr	r1, [r7, #16]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7ff fd70 	bl	80093fc <tcp_create_segment>
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	8b5b      	ldrh	r3, [r3, #26]
 8009928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009936:	e070      	b.n	8009a1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d006      	beq.n	8009952 <tcp_enqueue_flags+0xea>
 8009944:	4b37      	ldr	r3, [pc, #220]	; (8009a24 <tcp_enqueue_flags+0x1bc>)
 8009946:	f240 4242 	movw	r2, #1090	; 0x442
 800994a:	493b      	ldr	r1, [pc, #236]	; (8009a38 <tcp_enqueue_flags+0x1d0>)
 800994c:	4837      	ldr	r0, [pc, #220]	; (8009a2c <tcp_enqueue_flags+0x1c4>)
 800994e:	f006 f871 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	891b      	ldrh	r3, [r3, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d006      	beq.n	8009968 <tcp_enqueue_flags+0x100>
 800995a:	4b32      	ldr	r3, [pc, #200]	; (8009a24 <tcp_enqueue_flags+0x1bc>)
 800995c:	f240 4243 	movw	r2, #1091	; 0x443
 8009960:	4936      	ldr	r1, [pc, #216]	; (8009a3c <tcp_enqueue_flags+0x1d4>)
 8009962:	4832      	ldr	r0, [pc, #200]	; (8009a2c <tcp_enqueue_flags+0x1c4>)
 8009964:	f006 f866 	bl	800fa34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d103      	bne.n	8009978 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	66da      	str	r2, [r3, #108]	; 0x6c
 8009976:	e00d      	b.n	8009994 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	e002      	b.n	8009986 <tcp_enqueue_flags+0x11e>
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1f8      	bne.n	8009980 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d104      	bne.n	80099b0 <tcp_enqueue_flags+0x148>
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d006      	beq.n	80099d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	8b5b      	ldrh	r3, [r3, #26]
 80099c8:	f043 0320 	orr.w	r3, r3, #32
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fb fc38 	bl	800524c <pbuf_clen>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099e6:	4413      	add	r3, r2
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00e      	beq.n	8009a18 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <tcp_enqueue_flags+0x1b0>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d106      	bne.n	8009a18 <tcp_enqueue_flags+0x1b0>
 8009a0a:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <tcp_enqueue_flags+0x1bc>)
 8009a0c:	f240 4265 	movw	r2, #1125	; 0x465
 8009a10:	490b      	ldr	r1, [pc, #44]	; (8009a40 <tcp_enqueue_flags+0x1d8>)
 8009a12:	4806      	ldr	r0, [pc, #24]	; (8009a2c <tcp_enqueue_flags+0x1c4>)
 8009a14:	f006 f80e 	bl	800fa34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3720      	adds	r7, #32
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	08011f24 	.word	0x08011f24
 8009a28:	08012348 	.word	0x08012348
 8009a2c:	08011f78 	.word	0x08011f78
 8009a30:	080123a0 	.word	0x080123a0
 8009a34:	080123c0 	.word	0x080123c0
 8009a38:	080123fc 	.word	0x080123fc
 8009a3c:	08012414 	.word	0x08012414
 8009a40:	08012440 	.word	0x08012440

08009a44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009a44:	b5b0      	push	{r4, r5, r7, lr}
 8009a46:	b08a      	sub	sp, #40	; 0x28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <tcp_output+0x1c>
 8009a52:	4b8a      	ldr	r3, [pc, #552]	; (8009c7c <tcp_output+0x238>)
 8009a54:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009a58:	4989      	ldr	r1, [pc, #548]	; (8009c80 <tcp_output+0x23c>)
 8009a5a:	488a      	ldr	r0, [pc, #552]	; (8009c84 <tcp_output+0x240>)
 8009a5c:	f005 ffea 	bl	800fa34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7d1b      	ldrb	r3, [r3, #20]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d106      	bne.n	8009a76 <tcp_output+0x32>
 8009a68:	4b84      	ldr	r3, [pc, #528]	; (8009c7c <tcp_output+0x238>)
 8009a6a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009a6e:	4986      	ldr	r1, [pc, #536]	; (8009c88 <tcp_output+0x244>)
 8009a70:	4884      	ldr	r0, [pc, #528]	; (8009c84 <tcp_output+0x240>)
 8009a72:	f005 ffdf 	bl	800fa34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009a76:	4b85      	ldr	r3, [pc, #532]	; (8009c8c <tcp_output+0x248>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d101      	bne.n	8009a84 <tcp_output+0x40>
    return ERR_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e1ce      	b.n	8009e22 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a90:	4293      	cmp	r3, r2
 8009a92:	bf28      	it	cs
 8009a94:	4613      	movcs	r3, r2
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	8b5b      	ldrh	r3, [r3, #26]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 81aa 	beq.w	8009e08 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fdcb 	bl	800a650 <tcp_send_empty_ack>
 8009aba:	4603      	mov	r3, r0
 8009abc:	e1b1      	b.n	8009e22 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff fc7c 	bl	80093c4 <tcp_route>
 8009acc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <tcp_output+0x96>
    return ERR_RTE;
 8009ad4:	f06f 0303 	mvn.w	r3, #3
 8009ad8:	e1a3      	b.n	8009e22 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <tcp_output+0xa4>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d111      	bne.n	8009b0c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <tcp_output+0xb0>
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	3304      	adds	r3, #4
 8009af2:	e000      	b.n	8009af6 <tcp_output+0xb2>
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d102      	bne.n	8009b04 <tcp_output+0xc0>
      return ERR_RTE;
 8009afe:	f06f 0303 	mvn.w	r3, #3
 8009b02:	e18e      	b.n	8009e22 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7f9 ffbd 	bl	8003a92 <lwip_htonl>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b22:	8912      	ldrh	r2, [r2, #8]
 8009b24:	4413      	add	r3, r2
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d227      	bcs.n	8009b7c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b32:	461a      	mov	r2, r3
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d114      	bne.n	8009b64 <tcp_output+0x120>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d110      	bne.n	8009b64 <tcp_output+0x120>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10b      	bne.n	8009b64 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	8b5b      	ldrh	r3, [r3, #26]
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 814d 	beq.w	8009e0c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fd6c 	bl	800a650 <tcp_send_empty_ack>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	e152      	b.n	8009e22 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b88:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 811c 	beq.w	8009dca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009b92:	e002      	b.n	8009b9a <tcp_output+0x156>
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	623b      	str	r3, [r7, #32]
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f8      	bne.n	8009b94 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009ba2:	e112      	b.n	8009dca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	899b      	ldrh	r3, [r3, #12]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7f9 ff5b 	bl	8003a68 <lwip_htons>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	f003 0304 	and.w	r3, r3, #4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d006      	beq.n	8009bcc <tcp_output+0x188>
 8009bbe:	4b2f      	ldr	r3, [pc, #188]	; (8009c7c <tcp_output+0x238>)
 8009bc0:	f240 5236 	movw	r2, #1334	; 0x536
 8009bc4:	4932      	ldr	r1, [pc, #200]	; (8009c90 <tcp_output+0x24c>)
 8009bc6:	482f      	ldr	r0, [pc, #188]	; (8009c84 <tcp_output+0x240>)
 8009bc8:	f005 ff34 	bl	800fa34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01f      	beq.n	8009c14 <tcp_output+0x1d0>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	8b5b      	ldrh	r3, [r3, #26]
 8009bd8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d119      	bne.n	8009c14 <tcp_output+0x1d0>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <tcp_output+0x1bc>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d110      	bne.n	8009c14 <tcp_output+0x1d0>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf6:	891a      	ldrh	r2, [r3, #8]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d209      	bcs.n	8009c14 <tcp_output+0x1d0>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <tcp_output+0x1d0>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	d901      	bls.n	8009c18 <tcp_output+0x1d4>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <tcp_output+0x1d6>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	8b5b      	ldrh	r3, [r3, #26]
 8009c22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 80e4 	beq.w	8009df4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7d1b      	ldrb	r3, [r3, #20]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d00d      	beq.n	8009c50 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	899b      	ldrh	r3, [r3, #12]
 8009c3a:	b29c      	uxth	r4, r3
 8009c3c:	2010      	movs	r0, #16
 8009c3e:	f7f9 ff13 	bl	8003a68 <lwip_htons>
 8009c42:	4603      	mov	r3, r0
 8009c44:	461a      	mov	r2, r3
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	4322      	orrs	r2, r4
 8009c4c:	b292      	uxth	r2, r2
 8009c4e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	6879      	ldr	r1, [r7, #4]
 8009c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c56:	f000 f909 	bl	8009e6c <tcp_output_segment>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d016      	beq.n	8009c94 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8b5b      	ldrh	r3, [r3, #26]
 8009c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	835a      	strh	r2, [r3, #26]
      return err;
 8009c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c78:	e0d3      	b.n	8009e22 <tcp_output+0x3de>
 8009c7a:	bf00      	nop
 8009c7c:	08011f24 	.word	0x08011f24
 8009c80:	08012468 	.word	0x08012468
 8009c84:	08011f78 	.word	0x08011f78
 8009c88:	08012480 	.word	0x08012480
 8009c8c:	2000a464 	.word	0x2000a464
 8009c90:	080124a8 	.word	0x080124a8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	7d1b      	ldrb	r3, [r3, #20]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d006      	beq.n	8009cb2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	8b5b      	ldrh	r3, [r3, #26]
 8009ca8:	f023 0303 	bic.w	r3, r3, #3
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f9 feea 	bl	8003a92 <lwip_htonl>
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	891b      	ldrh	r3, [r3, #8]
 8009cc4:	461d      	mov	r5, r3
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	899b      	ldrh	r3, [r3, #12]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7f9 feca 	bl	8003a68 <lwip_htons>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <tcp_output+0x2a0>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e000      	b.n	8009ce6 <tcp_output+0x2a2>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	442b      	add	r3, r5
 8009ce8:	4423      	add	r3, r4
 8009cea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	da02      	bge.n	8009cfe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	891b      	ldrh	r3, [r3, #8]
 8009d02:	461c      	mov	r4, r3
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	899b      	ldrh	r3, [r3, #12]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7f9 feab 	bl	8003a68 <lwip_htons>
 8009d12:	4603      	mov	r3, r0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <tcp_output+0x2de>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <tcp_output+0x2e0>
 8009d22:	2300      	movs	r3, #0
 8009d24:	4423      	add	r3, r4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d049      	beq.n	8009dbe <tcp_output+0x37a>
      seg->next = NULL;
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d105      	bne.n	8009d44 <tcp_output+0x300>
        pcb->unacked = seg;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	623b      	str	r3, [r7, #32]
 8009d42:	e03f      	b.n	8009dc4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7f9 fea1 	bl	8003a92 <lwip_htonl>
 8009d50:	4604      	mov	r4, r0
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f9 fe9a 	bl	8003a92 <lwip_htonl>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	1ae3      	subs	r3, r4, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da24      	bge.n	8009db0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3370      	adds	r3, #112	; 0x70
 8009d6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d6c:	e002      	b.n	8009d74 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d011      	beq.n	8009da0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7f9 fe84 	bl	8003a92 <lwip_htonl>
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f9 fe7d 	bl	8003a92 <lwip_htonl>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dbe6      	blt.n	8009d6e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e009      	b.n	8009dc4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	623b      	str	r3, [r7, #32]
 8009dbc:	e002      	b.n	8009dc4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dc0:	f7fc fc3f 	bl	8006642 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d012      	beq.n	8009df6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f9 fe5b 	bl	8003a92 <lwip_htonl>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de6:	8912      	ldrh	r2, [r2, #8]
 8009de8:	4413      	add	r3, r2
  while (seg != NULL &&
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	f4bf aed9 	bcs.w	8009ba4 <tcp_output+0x160>
 8009df2:	e000      	b.n	8009df6 <tcp_output+0x3b2>
      break;
 8009df4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d108      	bne.n	8009e10 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009e06:	e004      	b.n	8009e12 <tcp_output+0x3ce>
    goto output_done;
 8009e08:	bf00      	nop
 8009e0a:	e002      	b.n	8009e12 <tcp_output+0x3ce>
    goto output_done;
 8009e0c:	bf00      	nop
 8009e0e:	e000      	b.n	8009e12 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009e10:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8b5b      	ldrh	r3, [r3, #26]
 8009e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3728      	adds	r7, #40	; 0x28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bdb0      	pop	{r4, r5, r7, pc}
 8009e2a:	bf00      	nop

08009e2c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d106      	bne.n	8009e48 <tcp_output_segment_busy+0x1c>
 8009e3a:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <tcp_output_segment_busy+0x34>)
 8009e3c:	f240 529a 	movw	r2, #1434	; 0x59a
 8009e40:	4908      	ldr	r1, [pc, #32]	; (8009e64 <tcp_output_segment_busy+0x38>)
 8009e42:	4809      	ldr	r0, [pc, #36]	; (8009e68 <tcp_output_segment_busy+0x3c>)
 8009e44:	f005 fdf6 	bl	800fa34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	7b9b      	ldrb	r3, [r3, #14]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d001      	beq.n	8009e56 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	08011f24 	.word	0x08011f24
 8009e64:	080124c0 	.word	0x080124c0
 8009e68:	08011f78 	.word	0x08011f78

08009e6c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009e6c:	b5b0      	push	{r4, r5, r7, lr}
 8009e6e:	b08c      	sub	sp, #48	; 0x30
 8009e70:	af04      	add	r7, sp, #16
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <tcp_output_segment+0x20>
 8009e7e:	4b64      	ldr	r3, [pc, #400]	; (800a010 <tcp_output_segment+0x1a4>)
 8009e80:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009e84:	4963      	ldr	r1, [pc, #396]	; (800a014 <tcp_output_segment+0x1a8>)
 8009e86:	4864      	ldr	r0, [pc, #400]	; (800a018 <tcp_output_segment+0x1ac>)
 8009e88:	f005 fdd4 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d106      	bne.n	8009ea0 <tcp_output_segment+0x34>
 8009e92:	4b5f      	ldr	r3, [pc, #380]	; (800a010 <tcp_output_segment+0x1a4>)
 8009e94:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009e98:	4960      	ldr	r1, [pc, #384]	; (800a01c <tcp_output_segment+0x1b0>)
 8009e9a:	485f      	ldr	r0, [pc, #380]	; (800a018 <tcp_output_segment+0x1ac>)
 8009e9c:	f005 fdca 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <tcp_output_segment+0x48>
 8009ea6:	4b5a      	ldr	r3, [pc, #360]	; (800a010 <tcp_output_segment+0x1a4>)
 8009ea8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009eac:	495c      	ldr	r1, [pc, #368]	; (800a020 <tcp_output_segment+0x1b4>)
 8009eae:	485a      	ldr	r0, [pc, #360]	; (800a018 <tcp_output_segment+0x1ac>)
 8009eb0:	f005 fdc0 	bl	800fa34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff ffb9 	bl	8009e2c <tcp_output_segment_busy>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e0a1      	b.n	800a008 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68dc      	ldr	r4, [r3, #12]
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f7f9 fde0 	bl	8003a92 <lwip_htonl>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	68dc      	ldr	r4, [r3, #12]
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f7f9 fdc2 	bl	8003a68 <lwip_htons>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009ef0:	441a      	add	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	3314      	adds	r3, #20
 8009efc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	7a9b      	ldrb	r3, [r3, #10]
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d015      	beq.n	8009f36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009f16:	f7fc fe8b 	bl	8006c30 <tcp_eff_send_mss_netif>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009f1e:	8b7b      	ldrh	r3, [r7, #26]
 8009f20:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f9 fdb4 	bl	8003a92 <lwip_htonl>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	3304      	adds	r3, #4
 8009f34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da02      	bge.n	8009f46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2200      	movs	r2, #0
 8009f44:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10c      	bne.n	8009f68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009f4e:	4b35      	ldr	r3, [pc, #212]	; (800a024 <tcp_output_segment+0x1b8>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7f9 fd98 	bl	8003a92 <lwip_htonl>
 8009f62:	4602      	mov	r2, r0
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	8959      	ldrh	r1, [r3, #10]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	8b3a      	ldrh	r2, [r7, #24]
 8009f82:	1a8a      	subs	r2, r1, r2
 8009f84:	b292      	uxth	r2, r2
 8009f86:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	8919      	ldrh	r1, [r3, #8]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	8b3a      	ldrh	r2, [r7, #24]
 8009f94:	1a8a      	subs	r2, r1, r2
 8009f96:	b292      	uxth	r2, r2
 8009f98:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	68d2      	ldr	r2, [r2, #12]
 8009fa2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	741a      	strb	r2, [r3, #16]
 8009fac:	2200      	movs	r2, #0
 8009fae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	68da      	ldr	r2, [r3, #12]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7a9b      	ldrb	r3, [r3, #10]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <tcp_output_segment+0x158>
 8009fc0:	2318      	movs	r3, #24
 8009fc2:	e000      	b.n	8009fc6 <tcp_output_segment+0x15a>
 8009fc4:	2314      	movs	r3, #20
 8009fc6:	4413      	add	r3, r2
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d006      	beq.n	8009fdc <tcp_output_segment+0x170>
 8009fce:	4b10      	ldr	r3, [pc, #64]	; (800a010 <tcp_output_segment+0x1a4>)
 8009fd0:	f240 621c 	movw	r2, #1564	; 0x61c
 8009fd4:	4914      	ldr	r1, [pc, #80]	; (800a028 <tcp_output_segment+0x1bc>)
 8009fd6:	4810      	ldr	r0, [pc, #64]	; (800a018 <tcp_output_segment+0x1ac>)
 8009fd8:	f005 fd2c 	bl	800fa34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6858      	ldr	r0, [r3, #4]
 8009fe0:	68b9      	ldr	r1, [r7, #8]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	1d1c      	adds	r4, r3, #4
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	7add      	ldrb	r5, [r3, #11]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	7a9b      	ldrb	r3, [r3, #10]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	9202      	str	r2, [sp, #8]
 8009ff2:	2206      	movs	r2, #6
 8009ff4:	9201      	str	r2, [sp, #4]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	f004 fbec 	bl	800e7d8 <ip4_output_if>
 800a000:	4603      	mov	r3, r0
 800a002:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3720      	adds	r7, #32
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bdb0      	pop	{r4, r5, r7, pc}
 800a010:	08011f24 	.word	0x08011f24
 800a014:	080124e8 	.word	0x080124e8
 800a018:	08011f78 	.word	0x08011f78
 800a01c:	08012508 	.word	0x08012508
 800a020:	08012528 	.word	0x08012528
 800a024:	2000a418 	.word	0x2000a418
 800a028:	0801254c 	.word	0x0801254c

0800a02c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a02c:	b5b0      	push	{r4, r5, r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <tcp_rexmit_rto_prepare+0x1c>
 800a03a:	4b31      	ldr	r3, [pc, #196]	; (800a100 <tcp_rexmit_rto_prepare+0xd4>)
 800a03c:	f240 6263 	movw	r2, #1635	; 0x663
 800a040:	4930      	ldr	r1, [pc, #192]	; (800a104 <tcp_rexmit_rto_prepare+0xd8>)
 800a042:	4831      	ldr	r0, [pc, #196]	; (800a108 <tcp_rexmit_rto_prepare+0xdc>)
 800a044:	f005 fcf6 	bl	800fa34 <iprintf>

  if (pcb->unacked == NULL) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d102      	bne.n	800a056 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a050:	f06f 0305 	mvn.w	r3, #5
 800a054:	e050      	b.n	800a0f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	e00b      	b.n	800a076 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7ff fee4 	bl	8009e2c <tcp_output_segment_busy>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a06a:	f06f 0305 	mvn.w	r3, #5
 800a06e:	e043      	b.n	800a0f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1ef      	bne.n	800a05e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7ff fed4 	bl	8009e2c <tcp_output_segment_busy>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a08a:	f06f 0305 	mvn.w	r3, #5
 800a08e:	e033      	b.n	800a0f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8b5b      	ldrh	r3, [r3, #26]
 800a0aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f9 fce9 	bl	8003a92 <lwip_htonl>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	891b      	ldrh	r3, [r3, #8]
 800a0c6:	461d      	mov	r5, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	899b      	ldrh	r3, [r3, #12]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f9 fcc9 	bl	8003a68 <lwip_htons>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <tcp_rexmit_rto_prepare+0xba>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <tcp_rexmit_rto_prepare+0xbc>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	442b      	add	r3, r5
 800a0ea:	18e2      	adds	r2, r4, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a100:	08011f24 	.word	0x08011f24
 800a104:	08012560 	.word	0x08012560
 800a108:	08011f78 	.word	0x08011f78

0800a10c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <tcp_rexmit_rto_commit+0x1c>
 800a11a:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <tcp_rexmit_rto_commit+0x44>)
 800a11c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a120:	490c      	ldr	r1, [pc, #48]	; (800a154 <tcp_rexmit_rto_commit+0x48>)
 800a122:	480d      	ldr	r0, [pc, #52]	; (800a158 <tcp_rexmit_rto_commit+0x4c>)
 800a124:	f005 fc86 	bl	800fa34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a12e:	2bff      	cmp	r3, #255	; 0xff
 800a130:	d007      	beq.n	800a142 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a138:	3301      	adds	r3, #1
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff fc7e 	bl	8009a44 <tcp_output>
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	08011f24 	.word	0x08011f24
 800a154:	08012584 	.word	0x08012584
 800a158:	08011f78 	.word	0x08011f78

0800a15c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d106      	bne.n	800a178 <tcp_rexmit_rto+0x1c>
 800a16a:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <tcp_rexmit_rto+0x38>)
 800a16c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a170:	4909      	ldr	r1, [pc, #36]	; (800a198 <tcp_rexmit_rto+0x3c>)
 800a172:	480a      	ldr	r0, [pc, #40]	; (800a19c <tcp_rexmit_rto+0x40>)
 800a174:	f005 fc5e 	bl	800fa34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff ff57 	bl	800a02c <tcp_rexmit_rto_prepare>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff ffc1 	bl	800a10c <tcp_rexmit_rto_commit>
  }
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	08011f24 	.word	0x08011f24
 800a198:	080125a8 	.word	0x080125a8
 800a19c:	08011f78 	.word	0x08011f78

0800a1a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <tcp_rexmit+0x1c>
 800a1ae:	4b2f      	ldr	r3, [pc, #188]	; (800a26c <tcp_rexmit+0xcc>)
 800a1b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a1b4:	492e      	ldr	r1, [pc, #184]	; (800a270 <tcp_rexmit+0xd0>)
 800a1b6:	482f      	ldr	r0, [pc, #188]	; (800a274 <tcp_rexmit+0xd4>)
 800a1b8:	f005 fc3c 	bl	800fa34 <iprintf>

  if (pcb->unacked == NULL) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d102      	bne.n	800a1ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a1c4:	f06f 0305 	mvn.w	r3, #5
 800a1c8:	e04c      	b.n	800a264 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a1d0:	68b8      	ldr	r0, [r7, #8]
 800a1d2:	f7ff fe2b 	bl	8009e2c <tcp_output_segment_busy>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a1dc:	f06f 0305 	mvn.w	r3, #5
 800a1e0:	e040      	b.n	800a264 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	336c      	adds	r3, #108	; 0x6c
 800a1ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a1f0:	e002      	b.n	800a1f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d011      	beq.n	800a224 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7f9 fc42 	bl	8003a92 <lwip_htonl>
 800a20e:	4604      	mov	r4, r0
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f7f9 fc3b 	bl	8003a92 <lwip_htonl>
 800a21c:	4603      	mov	r3, r0
 800a21e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a220:	2b00      	cmp	r3, #0
 800a222:	dbe6      	blt.n	800a1f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d103      	bne.n	800a242 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a248:	2bff      	cmp	r3, #255	; 0xff
 800a24a:	d007      	beq.n	800a25c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a252:	3301      	adds	r3, #1
 800a254:	b2da      	uxtb	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}
 800a26c:	08011f24 	.word	0x08011f24
 800a270:	080125c4 	.word	0x080125c4
 800a274:	08011f78 	.word	0x08011f78

0800a278 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <tcp_rexmit_fast+0x1c>
 800a286:	4b2a      	ldr	r3, [pc, #168]	; (800a330 <tcp_rexmit_fast+0xb8>)
 800a288:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a28c:	4929      	ldr	r1, [pc, #164]	; (800a334 <tcp_rexmit_fast+0xbc>)
 800a28e:	482a      	ldr	r0, [pc, #168]	; (800a338 <tcp_rexmit_fast+0xc0>)
 800a290:	f005 fbd0 	bl	800fa34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d045      	beq.n	800a328 <tcp_rexmit_fast+0xb0>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	8b5b      	ldrh	r3, [r3, #26]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d13f      	bne.n	800a328 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff ff79 	bl	800a1a0 <tcp_rexmit>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d139      	bne.n	800a328 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	bf28      	it	cs
 800a2c4:	4613      	movcs	r3, r2
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da00      	bge.n	800a2ce <tcp_rexmit_fast+0x56>
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	105b      	asrs	r3, r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d206      	bcs.n	800a2f8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a302:	4619      	mov	r1, r3
 800a304:	0049      	lsls	r1, r1, #1
 800a306:	440b      	add	r3, r1
 800a308:	b29b      	uxth	r3, r3
 800a30a:	4413      	add	r3, r2
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8b5b      	ldrh	r3, [r3, #26]
 800a318:	f043 0304 	orr.w	r3, r3, #4
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	08011f24 	.word	0x08011f24
 800a334:	080125dc 	.word	0x080125dc
 800a338:	08011f78 	.word	0x08011f78

0800a33c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	460b      	mov	r3, r1
 800a348:	817b      	strh	r3, [r7, #10]
 800a34a:	4613      	mov	r3, r2
 800a34c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a34e:	897a      	ldrh	r2, [r7, #10]
 800a350:	893b      	ldrh	r3, [r7, #8]
 800a352:	4413      	add	r3, r2
 800a354:	b29b      	uxth	r3, r3
 800a356:	3314      	adds	r3, #20
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a35e:	4619      	mov	r1, r3
 800a360:	2022      	movs	r0, #34	; 0x22
 800a362:	f7fa fc07 	bl	8004b74 <pbuf_alloc>
 800a366:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d04d      	beq.n	800a40a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a36e:	897b      	ldrh	r3, [r7, #10]
 800a370:	3313      	adds	r3, #19
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	8952      	ldrh	r2, [r2, #10]
 800a376:	4293      	cmp	r3, r2
 800a378:	db06      	blt.n	800a388 <tcp_output_alloc_header_common+0x4c>
 800a37a:	4b26      	ldr	r3, [pc, #152]	; (800a414 <tcp_output_alloc_header_common+0xd8>)
 800a37c:	f240 7223 	movw	r2, #1827	; 0x723
 800a380:	4925      	ldr	r1, [pc, #148]	; (800a418 <tcp_output_alloc_header_common+0xdc>)
 800a382:	4826      	ldr	r0, [pc, #152]	; (800a41c <tcp_output_alloc_header_common+0xe0>)
 800a384:	f005 fb56 	bl	800fa34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a38e:	8c3b      	ldrh	r3, [r7, #32]
 800a390:	4618      	mov	r0, r3
 800a392:	f7f9 fb69 	bl	8003a68 <lwip_htons>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a39e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7f9 fb61 	bl	8003a68 <lwip_htons>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7f9 fb6c 	bl	8003a92 <lwip_htonl>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a3c0:	897b      	ldrh	r3, [r7, #10]
 800a3c2:	089b      	lsrs	r3, r3, #2
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	3305      	adds	r3, #5
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	031b      	lsls	r3, r3, #12
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7f9 fb45 	bl	8003a68 <lwip_htons>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a3e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7f9 fb3d 	bl	8003a68 <lwip_htons>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	741a      	strb	r2, [r3, #16]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	2200      	movs	r2, #0
 800a404:	749a      	strb	r2, [r3, #18]
 800a406:	2200      	movs	r2, #0
 800a408:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a40a:	697b      	ldr	r3, [r7, #20]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	08011f24 	.word	0x08011f24
 800a418:	080125fc 	.word	0x080125fc
 800a41c:	08011f78 	.word	0x08011f78

0800a420 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a420:	b5b0      	push	{r4, r5, r7, lr}
 800a422:	b08a      	sub	sp, #40	; 0x28
 800a424:	af04      	add	r7, sp, #16
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	607b      	str	r3, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	817b      	strh	r3, [r7, #10]
 800a42e:	4613      	mov	r3, r2
 800a430:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <tcp_output_alloc_header+0x26>
 800a438:	4b15      	ldr	r3, [pc, #84]	; (800a490 <tcp_output_alloc_header+0x70>)
 800a43a:	f240 7242 	movw	r2, #1858	; 0x742
 800a43e:	4915      	ldr	r1, [pc, #84]	; (800a494 <tcp_output_alloc_header+0x74>)
 800a440:	4815      	ldr	r0, [pc, #84]	; (800a498 <tcp_output_alloc_header+0x78>)
 800a442:	f005 faf7 	bl	800fa34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8adb      	ldrh	r3, [r3, #22]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	8b12      	ldrh	r2, [r2, #24]
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a456:	893d      	ldrh	r5, [r7, #8]
 800a458:	897c      	ldrh	r4, [r7, #10]
 800a45a:	9103      	str	r1, [sp, #12]
 800a45c:	2110      	movs	r1, #16
 800a45e:	9102      	str	r1, [sp, #8]
 800a460:	9201      	str	r2, [sp, #4]
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	462a      	mov	r2, r5
 800a468:	4621      	mov	r1, r4
 800a46a:	f7ff ff67 	bl	800a33c <tcp_output_alloc_header_common>
 800a46e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d006      	beq.n	800a484 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a47e:	441a      	add	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a484:	697b      	ldr	r3, [r7, #20]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bdb0      	pop	{r4, r5, r7, pc}
 800a48e:	bf00      	nop
 800a490:	08011f24 	.word	0x08011f24
 800a494:	0801262c 	.word	0x0801262c
 800a498:	08011f78 	.word	0x08011f78

0800a49c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	71fb      	strb	r3, [r7, #7]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d106      	bne.n	800a4ca <tcp_output_fill_options+0x2e>
 800a4bc:	4b12      	ldr	r3, [pc, #72]	; (800a508 <tcp_output_fill_options+0x6c>)
 800a4be:	f240 7256 	movw	r2, #1878	; 0x756
 800a4c2:	4912      	ldr	r1, [pc, #72]	; (800a50c <tcp_output_fill_options+0x70>)
 800a4c4:	4812      	ldr	r0, [pc, #72]	; (800a510 <tcp_output_fill_options+0x74>)
 800a4c6:	f005 fab5 	bl	800fa34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	3314      	adds	r3, #20
 800a4d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a4d6:	8bfb      	ldrh	r3, [r7, #30]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	461a      	mov	r2, r3
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	4413      	add	r3, r2
 800a4e6:	3314      	adds	r3, #20
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d006      	beq.n	800a500 <tcp_output_fill_options+0x64>
 800a4f2:	4b05      	ldr	r3, [pc, #20]	; (800a508 <tcp_output_fill_options+0x6c>)
 800a4f4:	f240 7275 	movw	r2, #1909	; 0x775
 800a4f8:	4906      	ldr	r1, [pc, #24]	; (800a514 <tcp_output_fill_options+0x78>)
 800a4fa:	4805      	ldr	r0, [pc, #20]	; (800a510 <tcp_output_fill_options+0x74>)
 800a4fc:	f005 fa9a 	bl	800fa34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a500:	bf00      	nop
 800a502:	3720      	adds	r7, #32
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	08011f24 	.word	0x08011f24
 800a50c:	08012654 	.word	0x08012654
 800a510:	08011f78 	.word	0x08011f78
 800a514:	0801254c 	.word	0x0801254c

0800a518 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	; 0x28
 800a51c:	af04      	add	r7, sp, #16
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d106      	bne.n	800a53a <tcp_output_control_segment+0x22>
 800a52c:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <tcp_output_control_segment+0x88>)
 800a52e:	f240 7287 	movw	r2, #1927	; 0x787
 800a532:	491c      	ldr	r1, [pc, #112]	; (800a5a4 <tcp_output_control_segment+0x8c>)
 800a534:	481c      	ldr	r0, [pc, #112]	; (800a5a8 <tcp_output_control_segment+0x90>)
 800a536:	f005 fa7d 	bl	800fa34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7fe ff40 	bl	80093c4 <tcp_route>
 800a544:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a54c:	23fc      	movs	r3, #252	; 0xfc
 800a54e:	75fb      	strb	r3, [r7, #23]
 800a550:	e01c      	b.n	800a58c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d006      	beq.n	800a566 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	7adb      	ldrb	r3, [r3, #11]
 800a55c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	7a9b      	ldrb	r3, [r3, #10]
 800a562:	757b      	strb	r3, [r7, #21]
 800a564:	e003      	b.n	800a56e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a566:	23ff      	movs	r3, #255	; 0xff
 800a568:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a56e:	7dba      	ldrb	r2, [r7, #22]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	9302      	str	r3, [sp, #8]
 800a574:	2306      	movs	r3, #6
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	7d7b      	ldrb	r3, [r7, #21]
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	68b8      	ldr	r0, [r7, #8]
 800a584:	f004 f928 	bl	800e7d8 <ip4_output_if>
 800a588:	4603      	mov	r3, r0
 800a58a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a58c:	68b8      	ldr	r0, [r7, #8]
 800a58e:	f7fa fdd5 	bl	800513c <pbuf_free>
  return err;
 800a592:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	08011f24 	.word	0x08011f24
 800a5a4:	0801267c 	.word	0x0801267c
 800a5a8:	08011f78 	.word	0x08011f78

0800a5ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a5ac:	b590      	push	{r4, r7, lr}
 800a5ae:	b08b      	sub	sp, #44	; 0x2c
 800a5b0:	af04      	add	r7, sp, #16
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d106      	bne.n	800a5ce <tcp_rst+0x22>
 800a5c0:	4b1f      	ldr	r3, [pc, #124]	; (800a640 <tcp_rst+0x94>)
 800a5c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a5c6:	491f      	ldr	r1, [pc, #124]	; (800a644 <tcp_rst+0x98>)
 800a5c8:	481f      	ldr	r0, [pc, #124]	; (800a648 <tcp_rst+0x9c>)
 800a5ca:	f005 fa33 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d106      	bne.n	800a5e2 <tcp_rst+0x36>
 800a5d4:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <tcp_rst+0x94>)
 800a5d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a5da:	491c      	ldr	r1, [pc, #112]	; (800a64c <tcp_rst+0xa0>)
 800a5dc:	481a      	ldr	r0, [pc, #104]	; (800a648 <tcp_rst+0x9c>)
 800a5de:	f005 fa29 	bl	800fa34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a5e6:	f246 0308 	movw	r3, #24584	; 0x6008
 800a5ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	b29c      	uxth	r4, r3
 800a5f0:	68b8      	ldr	r0, [r7, #8]
 800a5f2:	f7f9 fa4e 	bl	8003a92 <lwip_htonl>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	8abb      	ldrh	r3, [r7, #20]
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	2314      	movs	r3, #20
 800a5fe:	9302      	str	r3, [sp, #8]
 800a600:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	4613      	mov	r3, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	4621      	mov	r1, r4
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff fe94 	bl	800a33c <tcp_output_alloc_header_common>
 800a614:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00c      	beq.n	800a636 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	2200      	movs	r2, #0
 800a620:	6939      	ldr	r1, [r7, #16]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7ff ff3a 	bl	800a49c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	6939      	ldr	r1, [r7, #16]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7ff ff72 	bl	800a518 <tcp_output_control_segment>
 800a634:	e000      	b.n	800a638 <tcp_rst+0x8c>
    return;
 800a636:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a638:	371c      	adds	r7, #28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd90      	pop	{r4, r7, pc}
 800a63e:	bf00      	nop
 800a640:	08011f24 	.word	0x08011f24
 800a644:	080126a8 	.word	0x080126a8
 800a648:	08011f78 	.word	0x08011f78
 800a64c:	080126c4 	.word	0x080126c4

0800a650 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <tcp_send_empty_ack+0x24>
 800a666:	4b28      	ldr	r3, [pc, #160]	; (800a708 <tcp_send_empty_ack+0xb8>)
 800a668:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a66c:	4927      	ldr	r1, [pc, #156]	; (800a70c <tcp_send_empty_ack+0xbc>)
 800a66e:	4828      	ldr	r0, [pc, #160]	; (800a710 <tcp_send_empty_ack+0xc0>)
 800a670:	f005 f9e0 	bl	800fa34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	f003 0304 	and.w	r3, r3, #4
 800a67e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a680:	7d7b      	ldrb	r3, [r7, #21]
 800a682:	b29c      	uxth	r4, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a688:	4618      	mov	r0, r3
 800a68a:	f7f9 fa02 	bl	8003a92 <lwip_htonl>
 800a68e:	4603      	mov	r3, r0
 800a690:	2200      	movs	r2, #0
 800a692:	4621      	mov	r1, r4
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff fec3 	bl	800a420 <tcp_output_alloc_header>
 800a69a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d109      	bne.n	800a6b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	8b5b      	ldrh	r3, [r3, #26]
 800a6a6:	f043 0303 	orr.w	r3, r3, #3
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a6b0:	f06f 0301 	mvn.w	r3, #1
 800a6b4:	e023      	b.n	800a6fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a6b6:	7dbb      	ldrb	r3, [r7, #22]
 800a6b8:	7dfa      	ldrb	r2, [r7, #23]
 800a6ba:	6939      	ldr	r1, [r7, #16]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff feed 	bl	800a49c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	6939      	ldr	r1, [r7, #16]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff ff24 	bl	800a518 <tcp_output_control_segment>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a6d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	8b5b      	ldrh	r3, [r3, #26]
 800a6e0:	f043 0303 	orr.w	r3, r3, #3
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	835a      	strh	r2, [r3, #26]
 800a6ea:	e006      	b.n	800a6fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	8b5b      	ldrh	r3, [r3, #26]
 800a6f0:	f023 0303 	bic.w	r3, r3, #3
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	371c      	adds	r7, #28
 800a702:	46bd      	mov	sp, r7
 800a704:	bd90      	pop	{r4, r7, pc}
 800a706:	bf00      	nop
 800a708:	08011f24 	.word	0x08011f24
 800a70c:	080126e0 	.word	0x080126e0
 800a710:	08011f78 	.word	0x08011f78

0800a714 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a714:	b590      	push	{r4, r7, lr}
 800a716:	b087      	sub	sp, #28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a71c:	2300      	movs	r3, #0
 800a71e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d106      	bne.n	800a734 <tcp_keepalive+0x20>
 800a726:	4b18      	ldr	r3, [pc, #96]	; (800a788 <tcp_keepalive+0x74>)
 800a728:	f640 0224 	movw	r2, #2084	; 0x824
 800a72c:	4917      	ldr	r1, [pc, #92]	; (800a78c <tcp_keepalive+0x78>)
 800a72e:	4818      	ldr	r0, [pc, #96]	; (800a790 <tcp_keepalive+0x7c>)
 800a730:	f005 f980 	bl	800fa34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a734:	7dfb      	ldrb	r3, [r7, #23]
 800a736:	b29c      	uxth	r4, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73c:	3b01      	subs	r3, #1
 800a73e:	4618      	mov	r0, r3
 800a740:	f7f9 f9a7 	bl	8003a92 <lwip_htonl>
 800a744:	4603      	mov	r3, r0
 800a746:	2200      	movs	r2, #0
 800a748:	4621      	mov	r1, r4
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff fe68 	bl	800a420 <tcp_output_alloc_header>
 800a750:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a75c:	e010      	b.n	800a780 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	2200      	movs	r2, #0
 800a762:	6939      	ldr	r1, [r7, #16]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fe99 	bl	800a49c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	6939      	ldr	r1, [r7, #16]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fed0 	bl	800a518 <tcp_output_control_segment>
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a780:	4618      	mov	r0, r3
 800a782:	371c      	adds	r7, #28
 800a784:	46bd      	mov	sp, r7
 800a786:	bd90      	pop	{r4, r7, pc}
 800a788:	08011f24 	.word	0x08011f24
 800a78c:	08012700 	.word	0x08012700
 800a790:	08011f78 	.word	0x08011f78

0800a794 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b08b      	sub	sp, #44	; 0x2c
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a79c:	2300      	movs	r3, #0
 800a79e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d106      	bne.n	800a7b6 <tcp_zero_window_probe+0x22>
 800a7a8:	4b4c      	ldr	r3, [pc, #304]	; (800a8dc <tcp_zero_window_probe+0x148>)
 800a7aa:	f640 024f 	movw	r2, #2127	; 0x84f
 800a7ae:	494c      	ldr	r1, [pc, #304]	; (800a8e0 <tcp_zero_window_probe+0x14c>)
 800a7b0:	484c      	ldr	r0, [pc, #304]	; (800a8e4 <tcp_zero_window_probe+0x150>)
 800a7b2:	f005 f93f 	bl	800fa34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e086      	b.n	800a8d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a7cc:	2bff      	cmp	r3, #255	; 0xff
 800a7ce:	d007      	beq.n	800a7e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	899b      	ldrh	r3, [r3, #12]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7f9 f93d 	bl	8003a68 <lwip_htons>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d005      	beq.n	800a806 <tcp_zero_window_probe+0x72>
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	891b      	ldrh	r3, [r3, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <tcp_zero_window_probe+0x72>
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <tcp_zero_window_probe+0x74>
 800a806:	2300      	movs	r3, #0
 800a808:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a80a:	7ffb      	ldrb	r3, [r7, #31]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	bf0c      	ite	eq
 800a810:	2301      	moveq	r3, #1
 800a812:	2300      	movne	r3, #0
 800a814:	b2db      	uxtb	r3, r3
 800a816:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a81c:	b299      	uxth	r1, r3
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	8bba      	ldrh	r2, [r7, #28]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff fdfa 	bl	800a420 <tcp_output_alloc_header>
 800a82c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a838:	e04c      	b.n	800a8d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a840:	7ffb      	ldrb	r3, [r7, #31]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d011      	beq.n	800a86a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	899b      	ldrh	r3, [r3, #12]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	b21b      	sxth	r3, r3
 800a84e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a852:	b21c      	sxth	r4, r3
 800a854:	2011      	movs	r0, #17
 800a856:	f7f9 f907 	bl	8003a68 <lwip_htons>
 800a85a:	4603      	mov	r3, r0
 800a85c:	b21b      	sxth	r3, r3
 800a85e:	4323      	orrs	r3, r4
 800a860:	b21b      	sxth	r3, r3
 800a862:	b29a      	uxth	r2, r3
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	819a      	strh	r2, [r3, #12]
 800a868:	e010      	b.n	800a88c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	3314      	adds	r3, #20
 800a870:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	6858      	ldr	r0, [r3, #4]
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	891a      	ldrh	r2, [r3, #8]
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	891b      	ldrh	r3, [r3, #8]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	b29b      	uxth	r3, r3
 800a884:	2201      	movs	r2, #1
 800a886:	6939      	ldr	r1, [r7, #16]
 800a888:	f7fa fe52 	bl	8005530 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	4618      	mov	r0, r3
 800a894:	f7f9 f8fd 	bl	8003a92 <lwip_htonl>
 800a898:	4603      	mov	r3, r0
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da02      	bge.n	800a8b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	69b9      	ldr	r1, [r7, #24]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7ff fdef 	bl	800a49c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	69b9      	ldr	r1, [r7, #24]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fe26 	bl	800a518 <tcp_output_control_segment>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a8d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	372c      	adds	r7, #44	; 0x2c
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd90      	pop	{r4, r7, pc}
 800a8dc:	08011f24 	.word	0x08011f24
 800a8e0:	0801271c 	.word	0x0801271c
 800a8e4:	08011f78 	.word	0x08011f78

0800a8e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a8f0:	f7fa ff0c 	bl	800570c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a8f4:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <tcpip_tcp_timer+0x38>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <tcpip_tcp_timer+0x1c>
 800a8fc:	4b09      	ldr	r3, [pc, #36]	; (800a924 <tcpip_tcp_timer+0x3c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d005      	beq.n	800a910 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a904:	2200      	movs	r2, #0
 800a906:	4908      	ldr	r1, [pc, #32]	; (800a928 <tcpip_tcp_timer+0x40>)
 800a908:	20fa      	movs	r0, #250	; 0xfa
 800a90a:	f000 f8f3 	bl	800aaf4 <sys_timeout>
 800a90e:	e003      	b.n	800a918 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <tcpip_tcp_timer+0x44>)
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
  }
}
 800a916:	bf00      	nop
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	2000a424 	.word	0x2000a424
 800a924:	2000a428 	.word	0x2000a428
 800a928:	0800a8e9 	.word	0x0800a8e9
 800a92c:	2000a470 	.word	0x2000a470

0800a930 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a934:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <tcp_timer_needed+0x30>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10f      	bne.n	800a95c <tcp_timer_needed+0x2c>
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <tcp_timer_needed+0x34>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d103      	bne.n	800a94c <tcp_timer_needed+0x1c>
 800a944:	4b08      	ldr	r3, [pc, #32]	; (800a968 <tcp_timer_needed+0x38>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a94c:	4b04      	ldr	r3, [pc, #16]	; (800a960 <tcp_timer_needed+0x30>)
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a952:	2200      	movs	r2, #0
 800a954:	4905      	ldr	r1, [pc, #20]	; (800a96c <tcp_timer_needed+0x3c>)
 800a956:	20fa      	movs	r0, #250	; 0xfa
 800a958:	f000 f8cc 	bl	800aaf4 <sys_timeout>
  }
}
 800a95c:	bf00      	nop
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	2000a470 	.word	0x2000a470
 800a964:	2000a424 	.word	0x2000a424
 800a968:	2000a428 	.word	0x2000a428
 800a96c:	0800a8e9 	.word	0x0800a8e9

0800a970 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a97c:	2006      	movs	r0, #6
 800a97e:	f7f9 fceb 	bl	8004358 <memp_malloc>
 800a982:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d109      	bne.n	800a99e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d151      	bne.n	800aa34 <sys_timeout_abs+0xc4>
 800a990:	4b2a      	ldr	r3, [pc, #168]	; (800aa3c <sys_timeout_abs+0xcc>)
 800a992:	22be      	movs	r2, #190	; 0xbe
 800a994:	492a      	ldr	r1, [pc, #168]	; (800aa40 <sys_timeout_abs+0xd0>)
 800a996:	482b      	ldr	r0, [pc, #172]	; (800aa44 <sys_timeout_abs+0xd4>)
 800a998:	f005 f84c 	bl	800fa34 <iprintf>
    return;
 800a99c:	e04a      	b.n	800aa34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a9b6:	4b24      	ldr	r3, [pc, #144]	; (800aa48 <sys_timeout_abs+0xd8>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d103      	bne.n	800a9c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a9be:	4a22      	ldr	r2, [pc, #136]	; (800aa48 <sys_timeout_abs+0xd8>)
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	6013      	str	r3, [r2, #0]
    return;
 800a9c4:	e037      	b.n	800aa36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	4b1f      	ldr	r3, [pc, #124]	; (800aa48 <sys_timeout_abs+0xd8>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	0fdb      	lsrs	r3, r3, #31
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a9de:	4b1a      	ldr	r3, [pc, #104]	; (800aa48 <sys_timeout_abs+0xd8>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a9e6:	4a18      	ldr	r2, [pc, #96]	; (800aa48 <sys_timeout_abs+0xd8>)
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	e023      	b.n	800aa36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a9ee:	4b16      	ldr	r3, [pc, #88]	; (800aa48 <sys_timeout_abs+0xd8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	e01a      	b.n	800aa2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00b      	beq.n	800aa16 <sys_timeout_abs+0xa6>
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	0fdb      	lsrs	r3, r3, #31
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d007      	beq.n	800aa26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	601a      	str	r2, [r3, #0]
        break;
 800aa24:	e007      	b.n	800aa36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	617b      	str	r3, [r7, #20]
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e1      	bne.n	800a9f6 <sys_timeout_abs+0x86>
 800aa32:	e000      	b.n	800aa36 <sys_timeout_abs+0xc6>
    return;
 800aa34:	bf00      	nop
      }
    }
  }
}
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	08012740 	.word	0x08012740
 800aa40:	08012774 	.word	0x08012774
 800aa44:	080127b4 	.word	0x080127b4
 800aa48:	2000a468 	.word	0x2000a468

0800aa4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4798      	blx	r3

  now = sys_now();
 800aa5e:	f7f8 fdf7 	bl	8003650 <sys_now>
 800aa62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <lwip_cyclic_timer+0x5c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	0fdb      	lsrs	r3, r3, #31
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d009      	beq.n	800aa96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	4413      	add	r3, r2
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	4907      	ldr	r1, [pc, #28]	; (800aaac <lwip_cyclic_timer+0x60>)
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff ff6e 	bl	800a970 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800aa94:	e004      	b.n	800aaa0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	4904      	ldr	r1, [pc, #16]	; (800aaac <lwip_cyclic_timer+0x60>)
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff ff68 	bl	800a970 <sys_timeout_abs>
}
 800aaa0:	bf00      	nop
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	2000a46c 	.word	0x2000a46c
 800aaac:	0800aa4d 	.word	0x0800aa4d

0800aab0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aab6:	2301      	movs	r3, #1
 800aab8:	607b      	str	r3, [r7, #4]
 800aaba:	e00e      	b.n	800aada <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aabc:	4a0b      	ldr	r2, [pc, #44]	; (800aaec <sys_timeouts_init+0x3c>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	4a08      	ldr	r2, [pc, #32]	; (800aaec <sys_timeouts_init+0x3c>)
 800aaca:	4413      	add	r3, r2
 800aacc:	461a      	mov	r2, r3
 800aace:	4908      	ldr	r1, [pc, #32]	; (800aaf0 <sys_timeouts_init+0x40>)
 800aad0:	f000 f810 	bl	800aaf4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3301      	adds	r3, #1
 800aad8:	607b      	str	r3, [r7, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d9ed      	bls.n	800aabc <sys_timeouts_init+0xc>
  }
}
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	080136c4 	.word	0x080136c4
 800aaf0:	0800aa4d 	.word	0x0800aa4d

0800aaf4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab06:	d306      	bcc.n	800ab16 <sys_timeout+0x22>
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <sys_timeout+0x40>)
 800ab0a:	f240 1229 	movw	r2, #297	; 0x129
 800ab0e:	490a      	ldr	r1, [pc, #40]	; (800ab38 <sys_timeout+0x44>)
 800ab10:	480a      	ldr	r0, [pc, #40]	; (800ab3c <sys_timeout+0x48>)
 800ab12:	f004 ff8f 	bl	800fa34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ab16:	f7f8 fd9b 	bl	8003650 <sys_now>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	68b9      	ldr	r1, [r7, #8]
 800ab26:	6978      	ldr	r0, [r7, #20]
 800ab28:	f7ff ff22 	bl	800a970 <sys_timeout_abs>
#endif
}
 800ab2c:	bf00      	nop
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	08012740 	.word	0x08012740
 800ab38:	080127dc 	.word	0x080127dc
 800ab3c:	080127b4 	.word	0x080127b4

0800ab40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ab46:	f7f8 fd83 	bl	8003650 <sys_now>
 800ab4a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ab4c:	4b1a      	ldr	r3, [pc, #104]	; (800abb8 <sys_check_timeouts+0x78>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d001      	beq.n	800ab5a <sys_check_timeouts+0x1a>
 800ab56:	f7f9 ffb7 	bl	8004ac8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ab5a:	4b18      	ldr	r3, [pc, #96]	; (800abbc <sys_check_timeouts+0x7c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d022      	beq.n	800abac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	0fdb      	lsrs	r3, r3, #31
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d11a      	bne.n	800abb0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a0f      	ldr	r2, [pc, #60]	; (800abbc <sys_check_timeouts+0x7c>)
 800ab80:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4a0b      	ldr	r2, [pc, #44]	; (800abc0 <sys_check_timeouts+0x80>)
 800ab94:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	2006      	movs	r0, #6
 800ab9a:	f7f9 fc4d 	bl	8004438 <memp_free>
    if (handler != NULL) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0d3      	beq.n	800ab4c <sys_check_timeouts+0xc>
      handler(arg);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6838      	ldr	r0, [r7, #0]
 800aba8:	4798      	blx	r3
  do {
 800abaa:	e7cf      	b.n	800ab4c <sys_check_timeouts+0xc>
      return;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <sys_check_timeouts+0x72>
      return;
 800abb0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	2000a415 	.word	0x2000a415
 800abbc:	2000a468 	.word	0x2000a468
 800abc0:	2000a46c 	.word	0x2000a46c

0800abc4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800abc8:	f004 fe34 	bl	800f834 <rand>
 800abcc:	4603      	mov	r3, r0
 800abce:	b29b      	uxth	r3, r3
 800abd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800abda:	b29a      	uxth	r2, r3
 800abdc:	4b01      	ldr	r3, [pc, #4]	; (800abe4 <udp_init+0x20>)
 800abde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800abe0:	bf00      	nop
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20000028 	.word	0x20000028

0800abe8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800abf2:	4b17      	ldr	r3, [pc, #92]	; (800ac50 <udp_new_port+0x68>)
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	1c5a      	adds	r2, r3, #1
 800abf8:	b291      	uxth	r1, r2
 800abfa:	4a15      	ldr	r2, [pc, #84]	; (800ac50 <udp_new_port+0x68>)
 800abfc:	8011      	strh	r1, [r2, #0]
 800abfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d103      	bne.n	800ac0e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ac06:	4b12      	ldr	r3, [pc, #72]	; (800ac50 <udp_new_port+0x68>)
 800ac08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ac0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac0e:	4b11      	ldr	r3, [pc, #68]	; (800ac54 <udp_new_port+0x6c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	e011      	b.n	800ac3a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	8a5a      	ldrh	r2, [r3, #18]
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <udp_new_port+0x68>)
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d108      	bne.n	800ac34 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ac22:	88fb      	ldrh	r3, [r7, #6]
 800ac24:	3301      	adds	r3, #1
 800ac26:	80fb      	strh	r3, [r7, #6]
 800ac28:	88fb      	ldrh	r3, [r7, #6]
 800ac2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac2e:	d3e0      	bcc.n	800abf2 <udp_new_port+0xa>
        return 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	e007      	b.n	800ac44 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	603b      	str	r3, [r7, #0]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1ea      	bne.n	800ac16 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ac40:	4b03      	ldr	r3, [pc, #12]	; (800ac50 <udp_new_port+0x68>)
 800ac42:	881b      	ldrh	r3, [r3, #0]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	20000028 	.word	0x20000028
 800ac54:	2000a474 	.word	0x2000a474

0800ac58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	4613      	mov	r3, r2
 800ac64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d105      	bne.n	800ac78 <udp_input_local_match+0x20>
 800ac6c:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <udp_input_local_match+0xb4>)
 800ac6e:	2287      	movs	r2, #135	; 0x87
 800ac70:	4927      	ldr	r1, [pc, #156]	; (800ad10 <udp_input_local_match+0xb8>)
 800ac72:	4828      	ldr	r0, [pc, #160]	; (800ad14 <udp_input_local_match+0xbc>)
 800ac74:	f004 fede 	bl	800fa34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d105      	bne.n	800ac8a <udp_input_local_match+0x32>
 800ac7e:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <udp_input_local_match+0xb4>)
 800ac80:	2288      	movs	r2, #136	; 0x88
 800ac82:	4925      	ldr	r1, [pc, #148]	; (800ad18 <udp_input_local_match+0xc0>)
 800ac84:	4823      	ldr	r0, [pc, #140]	; (800ad14 <udp_input_local_match+0xbc>)
 800ac86:	f004 fed5 	bl	800fa34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	7a1b      	ldrb	r3, [r3, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00b      	beq.n	800acaa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	7a1a      	ldrb	r2, [r3, #8]
 800ac96:	4b21      	ldr	r3, [pc, #132]	; (800ad1c <udp_input_local_match+0xc4>)
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac9e:	3301      	adds	r3, #1
 800aca0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d001      	beq.n	800acaa <udp_input_local_match+0x52>
    return 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	e02b      	b.n	800ad02 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d018      	beq.n	800ace2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d013      	beq.n	800acde <udp_input_local_match+0x86>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00f      	beq.n	800acde <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800acbe:	4b17      	ldr	r3, [pc, #92]	; (800ad1c <udp_input_local_match+0xc4>)
 800acc0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800acc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc6:	d00a      	beq.n	800acde <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <udp_input_local_match+0xc4>)
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	405a      	eors	r2, r3
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	3308      	adds	r3, #8
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d110      	bne.n	800ad00 <udp_input_local_match+0xa8>
          return 1;
 800acde:	2301      	movs	r3, #1
 800ace0:	e00f      	b.n	800ad02 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d009      	beq.n	800acfc <udp_input_local_match+0xa4>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d005      	beq.n	800acfc <udp_input_local_match+0xa4>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <udp_input_local_match+0xc4>)
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d101      	bne.n	800ad00 <udp_input_local_match+0xa8>
        return 1;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e000      	b.n	800ad02 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	08012828 	.word	0x08012828
 800ad10:	08012858 	.word	0x08012858
 800ad14:	0801287c 	.word	0x0801287c
 800ad18:	080128a4 	.word	0x080128a4
 800ad1c:	20004cc8 	.word	0x20004cc8

0800ad20 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b08d      	sub	sp, #52	; 0x34
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d105      	bne.n	800ad40 <udp_input+0x20>
 800ad34:	4b7c      	ldr	r3, [pc, #496]	; (800af28 <udp_input+0x208>)
 800ad36:	22cf      	movs	r2, #207	; 0xcf
 800ad38:	497c      	ldr	r1, [pc, #496]	; (800af2c <udp_input+0x20c>)
 800ad3a:	487d      	ldr	r0, [pc, #500]	; (800af30 <udp_input+0x210>)
 800ad3c:	f004 fe7a 	bl	800fa34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <udp_input+0x32>
 800ad46:	4b78      	ldr	r3, [pc, #480]	; (800af28 <udp_input+0x208>)
 800ad48:	22d0      	movs	r2, #208	; 0xd0
 800ad4a:	497a      	ldr	r1, [pc, #488]	; (800af34 <udp_input+0x214>)
 800ad4c:	4878      	ldr	r0, [pc, #480]	; (800af30 <udp_input+0x210>)
 800ad4e:	f004 fe71 	bl	800fa34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	895b      	ldrh	r3, [r3, #10]
 800ad56:	2b07      	cmp	r3, #7
 800ad58:	d803      	bhi.n	800ad62 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7fa f9ee 	bl	800513c <pbuf_free>
    goto end;
 800ad60:	e0de      	b.n	800af20 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ad68:	4b73      	ldr	r3, [pc, #460]	; (800af38 <udp_input+0x218>)
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	4a72      	ldr	r2, [pc, #456]	; (800af38 <udp_input+0x218>)
 800ad6e:	6812      	ldr	r2, [r2, #0]
 800ad70:	4611      	mov	r1, r2
 800ad72:	4618      	mov	r0, r3
 800ad74:	f003 fe08 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f8 fe70 	bl	8003a68 <lwip_htons>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	885b      	ldrh	r3, [r3, #2]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7f8 fe68 	bl	8003a68 <lwip_htons>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ada8:	4b64      	ldr	r3, [pc, #400]	; (800af3c <udp_input+0x21c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
 800adae:	e054      	b.n	800ae5a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	8a5b      	ldrh	r3, [r3, #18]
 800adb4:	89fa      	ldrh	r2, [r7, #14]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d14a      	bne.n	800ae50 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800adba:	7cfb      	ldrb	r3, [r7, #19]
 800adbc:	461a      	mov	r2, r3
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adc2:	f7ff ff49 	bl	800ac58 <udp_input_local_match>
 800adc6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d041      	beq.n	800ae50 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	7c1b      	ldrb	r3, [r3, #16]
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11d      	bne.n	800ae14 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	61fb      	str	r3, [r7, #28]
 800ade2:	e017      	b.n	800ae14 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ade4:	7cfb      	ldrb	r3, [r7, #19]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d014      	beq.n	800ae14 <udp_input+0xf4>
 800adea:	4b53      	ldr	r3, [pc, #332]	; (800af38 <udp_input+0x218>)
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adf2:	d10f      	bne.n	800ae14 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	3304      	adds	r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d008      	beq.n	800ae14 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d101      	bne.n	800ae14 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	8a9b      	ldrh	r3, [r3, #20]
 800ae18:	8a3a      	ldrh	r2, [r7, #16]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d118      	bne.n	800ae50 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d005      	beq.n	800ae32 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	4b43      	ldr	r3, [pc, #268]	; (800af38 <udp_input+0x218>)
 800ae2c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d10e      	bne.n	800ae50 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d014      	beq.n	800ae62 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ae40:	4b3e      	ldr	r3, [pc, #248]	; (800af3c <udp_input+0x21c>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ae48:	4a3c      	ldr	r2, [pc, #240]	; (800af3c <udp_input+0x21c>)
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ae4e:	e008      	b.n	800ae62 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1a7      	bne.n	800adb0 <udp_input+0x90>
 800ae60:	e000      	b.n	800ae64 <udp_input+0x144>
        break;
 800ae62:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <udp_input+0x14e>
    pcb = uncon_pcb;
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <udp_input+0x15a>
    for_us = 1;
 800ae74:	2301      	movs	r3, #1
 800ae76:	76fb      	strb	r3, [r7, #27]
 800ae78:	e00a      	b.n	800ae90 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	4b2d      	ldr	r3, [pc, #180]	; (800af38 <udp_input+0x218>)
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	bf0c      	ite	eq
 800ae88:	2301      	moveq	r3, #1
 800ae8a:	2300      	movne	r3, #0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ae90:	7efb      	ldrb	r3, [r7, #27]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d041      	beq.n	800af1a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ae96:	2108      	movs	r1, #8
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7fa f8c9 	bl	8005030 <pbuf_remove_header>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00a      	beq.n	800aeba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800aea4:	4b20      	ldr	r3, [pc, #128]	; (800af28 <udp_input+0x208>)
 800aea6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800aeaa:	4925      	ldr	r1, [pc, #148]	; (800af40 <udp_input+0x220>)
 800aeac:	4820      	ldr	r0, [pc, #128]	; (800af30 <udp_input+0x210>)
 800aeae:	f004 fdc1 	bl	800fa34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7fa f942 	bl	800513c <pbuf_free>
      goto end;
 800aeb8:	e032      	b.n	800af20 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d012      	beq.n	800aee6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00a      	beq.n	800aede <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	699c      	ldr	r4, [r3, #24]
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	69d8      	ldr	r0, [r3, #28]
 800aed0:	8a3b      	ldrh	r3, [r7, #16]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	4b1b      	ldr	r3, [pc, #108]	; (800af44 <udp_input+0x224>)
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeda:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800aedc:	e021      	b.n	800af22 <udp_input+0x202>
        pbuf_free(p);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7fa f92c 	bl	800513c <pbuf_free>
        goto end;
 800aee4:	e01c      	b.n	800af20 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800aee6:	7cfb      	ldrb	r3, [r7, #19]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d112      	bne.n	800af12 <udp_input+0x1f2>
 800aeec:	4b12      	ldr	r3, [pc, #72]	; (800af38 <udp_input+0x218>)
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aef4:	2be0      	cmp	r3, #224	; 0xe0
 800aef6:	d00c      	beq.n	800af12 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800aef8:	4b0f      	ldr	r3, [pc, #60]	; (800af38 <udp_input+0x218>)
 800aefa:	899b      	ldrh	r3, [r3, #12]
 800aefc:	3308      	adds	r3, #8
 800aefe:	b29b      	uxth	r3, r3
 800af00:	b21b      	sxth	r3, r3
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7fa f906 	bl	8005116 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800af0a:	2103      	movs	r1, #3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f003 f9fd 	bl	800e30c <icmp_dest_unreach>
      pbuf_free(p);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7fa f912 	bl	800513c <pbuf_free>
  return;
 800af18:	e003      	b.n	800af22 <udp_input+0x202>
    pbuf_free(p);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7fa f90e 	bl	800513c <pbuf_free>
  return;
 800af20:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800af22:	372c      	adds	r7, #44	; 0x2c
 800af24:	46bd      	mov	sp, r7
 800af26:	bd90      	pop	{r4, r7, pc}
 800af28:	08012828 	.word	0x08012828
 800af2c:	080128cc 	.word	0x080128cc
 800af30:	0801287c 	.word	0x0801287c
 800af34:	080128e4 	.word	0x080128e4
 800af38:	20004cc8 	.word	0x20004cc8
 800af3c:	2000a474 	.word	0x2000a474
 800af40:	08012900 	.word	0x08012900
 800af44:	20004cd8 	.word	0x20004cd8

0800af48 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af02      	add	r7, sp, #8
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <udp_sendto_if+0x28>
 800af5c:	4b2e      	ldr	r3, [pc, #184]	; (800b018 <udp_sendto_if+0xd0>)
 800af5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af62:	492e      	ldr	r1, [pc, #184]	; (800b01c <udp_sendto_if+0xd4>)
 800af64:	482e      	ldr	r0, [pc, #184]	; (800b020 <udp_sendto_if+0xd8>)
 800af66:	f004 fd65 	bl	800fa34 <iprintf>
 800af6a:	f06f 030f 	mvn.w	r3, #15
 800af6e:	e04f      	b.n	800b010 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <udp_sendto_if+0x42>
 800af76:	4b28      	ldr	r3, [pc, #160]	; (800b018 <udp_sendto_if+0xd0>)
 800af78:	f240 2281 	movw	r2, #641	; 0x281
 800af7c:	4929      	ldr	r1, [pc, #164]	; (800b024 <udp_sendto_if+0xdc>)
 800af7e:	4828      	ldr	r0, [pc, #160]	; (800b020 <udp_sendto_if+0xd8>)
 800af80:	f004 fd58 	bl	800fa34 <iprintf>
 800af84:	f06f 030f 	mvn.w	r3, #15
 800af88:	e042      	b.n	800b010 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d109      	bne.n	800afa4 <udp_sendto_if+0x5c>
 800af90:	4b21      	ldr	r3, [pc, #132]	; (800b018 <udp_sendto_if+0xd0>)
 800af92:	f240 2282 	movw	r2, #642	; 0x282
 800af96:	4924      	ldr	r1, [pc, #144]	; (800b028 <udp_sendto_if+0xe0>)
 800af98:	4821      	ldr	r0, [pc, #132]	; (800b020 <udp_sendto_if+0xd8>)
 800af9a:	f004 fd4b 	bl	800fa34 <iprintf>
 800af9e:	f06f 030f 	mvn.w	r3, #15
 800afa2:	e035      	b.n	800b010 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d109      	bne.n	800afbe <udp_sendto_if+0x76>
 800afaa:	4b1b      	ldr	r3, [pc, #108]	; (800b018 <udp_sendto_if+0xd0>)
 800afac:	f240 2283 	movw	r2, #643	; 0x283
 800afb0:	491e      	ldr	r1, [pc, #120]	; (800b02c <udp_sendto_if+0xe4>)
 800afb2:	481b      	ldr	r0, [pc, #108]	; (800b020 <udp_sendto_if+0xd8>)
 800afb4:	f004 fd3e 	bl	800fa34 <iprintf>
 800afb8:	f06f 030f 	mvn.w	r3, #15
 800afbc:	e028      	b.n	800b010 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d009      	beq.n	800afd8 <udp_sendto_if+0x90>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800afd4:	2be0      	cmp	r3, #224	; 0xe0
 800afd6:	d103      	bne.n	800afe0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	3304      	adds	r3, #4
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e00b      	b.n	800aff8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	3304      	adds	r3, #4
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	d002      	beq.n	800aff4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800afee:	f06f 0303 	mvn.w	r3, #3
 800aff2:	e00d      	b.n	800b010 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800aff8:	887a      	ldrh	r2, [r7, #2]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	9301      	str	r3, [sp, #4]
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	4613      	mov	r3, r2
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 f811 	bl	800b030 <udp_sendto_if_src>
 800b00e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b010:	4618      	mov	r0, r3
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	08012828 	.word	0x08012828
 800b01c:	0801299c 	.word	0x0801299c
 800b020:	0801287c 	.word	0x0801287c
 800b024:	080129b8 	.word	0x080129b8
 800b028:	080129d4 	.word	0x080129d4
 800b02c:	080129f4 	.word	0x080129f4

0800b030 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b08c      	sub	sp, #48	; 0x30
 800b034:	af04      	add	r7, sp, #16
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d109      	bne.n	800b058 <udp_sendto_if_src+0x28>
 800b044:	4b65      	ldr	r3, [pc, #404]	; (800b1dc <udp_sendto_if_src+0x1ac>)
 800b046:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b04a:	4965      	ldr	r1, [pc, #404]	; (800b1e0 <udp_sendto_if_src+0x1b0>)
 800b04c:	4865      	ldr	r0, [pc, #404]	; (800b1e4 <udp_sendto_if_src+0x1b4>)
 800b04e:	f004 fcf1 	bl	800fa34 <iprintf>
 800b052:	f06f 030f 	mvn.w	r3, #15
 800b056:	e0bc      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d109      	bne.n	800b072 <udp_sendto_if_src+0x42>
 800b05e:	4b5f      	ldr	r3, [pc, #380]	; (800b1dc <udp_sendto_if_src+0x1ac>)
 800b060:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b064:	4960      	ldr	r1, [pc, #384]	; (800b1e8 <udp_sendto_if_src+0x1b8>)
 800b066:	485f      	ldr	r0, [pc, #380]	; (800b1e4 <udp_sendto_if_src+0x1b4>)
 800b068:	f004 fce4 	bl	800fa34 <iprintf>
 800b06c:	f06f 030f 	mvn.w	r3, #15
 800b070:	e0af      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d109      	bne.n	800b08c <udp_sendto_if_src+0x5c>
 800b078:	4b58      	ldr	r3, [pc, #352]	; (800b1dc <udp_sendto_if_src+0x1ac>)
 800b07a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b07e:	495b      	ldr	r1, [pc, #364]	; (800b1ec <udp_sendto_if_src+0x1bc>)
 800b080:	4858      	ldr	r0, [pc, #352]	; (800b1e4 <udp_sendto_if_src+0x1b4>)
 800b082:	f004 fcd7 	bl	800fa34 <iprintf>
 800b086:	f06f 030f 	mvn.w	r3, #15
 800b08a:	e0a2      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <udp_sendto_if_src+0x76>
 800b092:	4b52      	ldr	r3, [pc, #328]	; (800b1dc <udp_sendto_if_src+0x1ac>)
 800b094:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b098:	4955      	ldr	r1, [pc, #340]	; (800b1f0 <udp_sendto_if_src+0x1c0>)
 800b09a:	4852      	ldr	r0, [pc, #328]	; (800b1e4 <udp_sendto_if_src+0x1b4>)
 800b09c:	f004 fcca 	bl	800fa34 <iprintf>
 800b0a0:	f06f 030f 	mvn.w	r3, #15
 800b0a4:	e095      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d109      	bne.n	800b0c0 <udp_sendto_if_src+0x90>
 800b0ac:	4b4b      	ldr	r3, [pc, #300]	; (800b1dc <udp_sendto_if_src+0x1ac>)
 800b0ae:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b0b2:	4950      	ldr	r1, [pc, #320]	; (800b1f4 <udp_sendto_if_src+0x1c4>)
 800b0b4:	484b      	ldr	r0, [pc, #300]	; (800b1e4 <udp_sendto_if_src+0x1b4>)
 800b0b6:	f004 fcbd 	bl	800fa34 <iprintf>
 800b0ba:	f06f 030f 	mvn.w	r3, #15
 800b0be:	e088      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	8a5b      	ldrh	r3, [r3, #18]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10f      	bne.n	800b0e8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b0c8:	68f9      	ldr	r1, [r7, #12]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	8a5b      	ldrh	r3, [r3, #18]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 f893 	bl	800b1fc <udp_bind>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b0da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b0e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b0e6:	e074      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	891b      	ldrh	r3, [r3, #8]
 800b0ec:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d902      	bls.n	800b0fa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0f8:	e06b      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b0fa:	2108      	movs	r1, #8
 800b0fc:	68b8      	ldr	r0, [r7, #8]
 800b0fe:	f7f9 ff87 	bl	8005010 <pbuf_add_header>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d015      	beq.n	800b134 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b108:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b10c:	2108      	movs	r1, #8
 800b10e:	2022      	movs	r0, #34	; 0x22
 800b110:	f7f9 fd30 	bl	8004b74 <pbuf_alloc>
 800b114:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b120:	e057      	b.n	800b1d2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	891b      	ldrh	r3, [r3, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d006      	beq.n	800b138 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	69f8      	ldr	r0, [r7, #28]
 800b12e:	f7fa f91d 	bl	800536c <pbuf_chain>
 800b132:	e001      	b.n	800b138 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	895b      	ldrh	r3, [r3, #10]
 800b13c:	2b07      	cmp	r3, #7
 800b13e:	d806      	bhi.n	800b14e <udp_sendto_if_src+0x11e>
 800b140:	4b26      	ldr	r3, [pc, #152]	; (800b1dc <udp_sendto_if_src+0x1ac>)
 800b142:	f240 320d 	movw	r2, #781	; 0x30d
 800b146:	492c      	ldr	r1, [pc, #176]	; (800b1f8 <udp_sendto_if_src+0x1c8>)
 800b148:	4826      	ldr	r0, [pc, #152]	; (800b1e4 <udp_sendto_if_src+0x1b4>)
 800b14a:	f004 fc73 	bl	800fa34 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8a5b      	ldrh	r3, [r3, #18]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7f8 fc85 	bl	8003a68 <lwip_htons>
 800b15e:	4603      	mov	r3, r0
 800b160:	461a      	mov	r2, r3
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b166:	887b      	ldrh	r3, [r7, #2]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7f8 fc7d 	bl	8003a68 <lwip_htons>
 800b16e:	4603      	mov	r3, r0
 800b170:	461a      	mov	r2, r3
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2200      	movs	r2, #0
 800b17a:	719a      	strb	r2, [r3, #6]
 800b17c:	2200      	movs	r2, #0
 800b17e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	891b      	ldrh	r3, [r3, #8]
 800b184:	4618      	mov	r0, r3
 800b186:	f7f8 fc6f 	bl	8003a68 <lwip_htons>
 800b18a:	4603      	mov	r3, r0
 800b18c:	461a      	mov	r2, r3
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b192:	2311      	movs	r3, #17
 800b194:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	7adb      	ldrb	r3, [r3, #11]
 800b19a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	7a9b      	ldrb	r3, [r3, #10]
 800b1a0:	7cb9      	ldrb	r1, [r7, #18]
 800b1a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1a4:	9202      	str	r2, [sp, #8]
 800b1a6:	7cfa      	ldrb	r2, [r7, #19]
 800b1a8:	9201      	str	r2, [sp, #4]
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1b2:	69f8      	ldr	r0, [r7, #28]
 800b1b4:	f003 fb3a 	bl	800e82c <ip4_output_if_src>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b1bc:	69fa      	ldr	r2, [r7, #28]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d004      	beq.n	800b1ce <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b1c4:	69f8      	ldr	r0, [r7, #28]
 800b1c6:	f7f9 ffb9 	bl	800513c <pbuf_free>
    q = NULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b1ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3720      	adds	r7, #32
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	08012828 	.word	0x08012828
 800b1e0:	08012a14 	.word	0x08012a14
 800b1e4:	0801287c 	.word	0x0801287c
 800b1e8:	08012a34 	.word	0x08012a34
 800b1ec:	08012a54 	.word	0x08012a54
 800b1f0:	08012a78 	.word	0x08012a78
 800b1f4:	08012a9c 	.word	0x08012a9c
 800b1f8:	08012ac0 	.word	0x08012ac0

0800b1fc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b210:	4b39      	ldr	r3, [pc, #228]	; (800b2f8 <udp_bind+0xfc>)
 800b212:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d109      	bne.n	800b22e <udp_bind+0x32>
 800b21a:	4b38      	ldr	r3, [pc, #224]	; (800b2fc <udp_bind+0x100>)
 800b21c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b220:	4937      	ldr	r1, [pc, #220]	; (800b300 <udp_bind+0x104>)
 800b222:	4838      	ldr	r0, [pc, #224]	; (800b304 <udp_bind+0x108>)
 800b224:	f004 fc06 	bl	800fa34 <iprintf>
 800b228:	f06f 030f 	mvn.w	r3, #15
 800b22c:	e060      	b.n	800b2f0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b232:	4b35      	ldr	r3, [pc, #212]	; (800b308 <udp_bind+0x10c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	617b      	str	r3, [r7, #20]
 800b238:	e009      	b.n	800b24e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d102      	bne.n	800b248 <udp_bind+0x4c>
      rebind = 1;
 800b242:	2301      	movs	r3, #1
 800b244:	74fb      	strb	r3, [r7, #19]
      break;
 800b246:	e005      	b.n	800b254 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1f2      	bne.n	800b23a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b254:	88fb      	ldrh	r3, [r7, #6]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d109      	bne.n	800b26e <udp_bind+0x72>
    port = udp_new_port();
 800b25a:	f7ff fcc5 	bl	800abe8 <udp_new_port>
 800b25e:	4603      	mov	r3, r0
 800b260:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b262:	88fb      	ldrh	r3, [r7, #6]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d12c      	bne.n	800b2c2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b268:	f06f 0307 	mvn.w	r3, #7
 800b26c:	e040      	b.n	800b2f0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b26e:	4b26      	ldr	r3, [pc, #152]	; (800b308 <udp_bind+0x10c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	617b      	str	r3, [r7, #20]
 800b274:	e022      	b.n	800b2bc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d01b      	beq.n	800b2b6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	8a5b      	ldrh	r3, [r3, #18]
 800b282:	88fa      	ldrh	r2, [r7, #6]
 800b284:	429a      	cmp	r2, r3
 800b286:	d116      	bne.n	800b2b6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b290:	429a      	cmp	r2, r3
 800b292:	d00d      	beq.n	800b2b0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <udp_bind+0xb4>
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d006      	beq.n	800b2b0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b2a2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d003      	beq.n	800b2b0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b2b0:	f06f 0307 	mvn.w	r3, #7
 800b2b4:	e01c      	b.n	800b2f0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1d9      	bne.n	800b276 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <udp_bind+0xd2>
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	e000      	b.n	800b2d0 <udp_bind+0xd4>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	88fa      	ldrh	r2, [r7, #6]
 800b2d8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b2da:	7cfb      	ldrb	r3, [r7, #19]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d106      	bne.n	800b2ee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b2e0:	4b09      	ldr	r3, [pc, #36]	; (800b308 <udp_bind+0x10c>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b2e8:	4a07      	ldr	r2, [pc, #28]	; (800b308 <udp_bind+0x10c>)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	080136ec 	.word	0x080136ec
 800b2fc:	08012828 	.word	0x08012828
 800b300:	08012af0 	.word	0x08012af0
 800b304:	0801287c 	.word	0x0801287c
 800b308:	2000a474 	.word	0x2000a474

0800b30c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	4613      	mov	r3, r2
 800b318:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d109      	bne.n	800b334 <udp_connect+0x28>
 800b320:	4b2c      	ldr	r3, [pc, #176]	; (800b3d4 <udp_connect+0xc8>)
 800b322:	f240 4235 	movw	r2, #1077	; 0x435
 800b326:	492c      	ldr	r1, [pc, #176]	; (800b3d8 <udp_connect+0xcc>)
 800b328:	482c      	ldr	r0, [pc, #176]	; (800b3dc <udp_connect+0xd0>)
 800b32a:	f004 fb83 	bl	800fa34 <iprintf>
 800b32e:	f06f 030f 	mvn.w	r3, #15
 800b332:	e04b      	b.n	800b3cc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d109      	bne.n	800b34e <udp_connect+0x42>
 800b33a:	4b26      	ldr	r3, [pc, #152]	; (800b3d4 <udp_connect+0xc8>)
 800b33c:	f240 4236 	movw	r2, #1078	; 0x436
 800b340:	4927      	ldr	r1, [pc, #156]	; (800b3e0 <udp_connect+0xd4>)
 800b342:	4826      	ldr	r0, [pc, #152]	; (800b3dc <udp_connect+0xd0>)
 800b344:	f004 fb76 	bl	800fa34 <iprintf>
 800b348:	f06f 030f 	mvn.w	r3, #15
 800b34c:	e03e      	b.n	800b3cc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	8a5b      	ldrh	r3, [r3, #18]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10f      	bne.n	800b376 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b356:	68f9      	ldr	r1, [r7, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	8a5b      	ldrh	r3, [r3, #18]
 800b35c:	461a      	mov	r2, r3
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7ff ff4c 	bl	800b1fc <udp_bind>
 800b364:	4603      	mov	r3, r0
 800b366:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b368:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <udp_connect+0x6a>
      return err;
 800b370:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b374:	e02a      	b.n	800b3cc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <udp_connect+0x76>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	e000      	b.n	800b384 <udp_connect+0x78>
 800b382:	2300      	movs	r3, #0
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	88fa      	ldrh	r2, [r7, #6]
 800b38c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	7c1b      	ldrb	r3, [r3, #16]
 800b392:	f043 0304 	orr.w	r3, r3, #4
 800b396:	b2da      	uxtb	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b39c:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <udp_connect+0xd8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	e008      	b.n	800b3b6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d101      	bne.n	800b3b0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e00d      	b.n	800b3cc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	617b      	str	r3, [r7, #20]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1f3      	bne.n	800b3a4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b3bc:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <udp_connect+0xd8>)
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b3c4:	4a07      	ldr	r2, [pc, #28]	; (800b3e4 <udp_connect+0xd8>)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	08012828 	.word	0x08012828
 800b3d8:	08012b08 	.word	0x08012b08
 800b3dc:	0801287c 	.word	0x0801287c
 800b3e0:	08012b24 	.word	0x08012b24
 800b3e4:	2000a474 	.word	0x2000a474

0800b3e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d107      	bne.n	800b40a <udp_recv+0x22>
 800b3fa:	4b08      	ldr	r3, [pc, #32]	; (800b41c <udp_recv+0x34>)
 800b3fc:	f240 428a 	movw	r2, #1162	; 0x48a
 800b400:	4907      	ldr	r1, [pc, #28]	; (800b420 <udp_recv+0x38>)
 800b402:	4808      	ldr	r0, [pc, #32]	; (800b424 <udp_recv+0x3c>)
 800b404:	f004 fb16 	bl	800fa34 <iprintf>
 800b408:	e005      	b.n	800b416 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	61da      	str	r2, [r3, #28]
}
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	08012828 	.word	0x08012828
 800b420:	08012b5c 	.word	0x08012b5c
 800b424:	0801287c 	.word	0x0801287c

0800b428 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d107      	bne.n	800b446 <udp_remove+0x1e>
 800b436:	4b19      	ldr	r3, [pc, #100]	; (800b49c <udp_remove+0x74>)
 800b438:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b43c:	4918      	ldr	r1, [pc, #96]	; (800b4a0 <udp_remove+0x78>)
 800b43e:	4819      	ldr	r0, [pc, #100]	; (800b4a4 <udp_remove+0x7c>)
 800b440:	f004 faf8 	bl	800fa34 <iprintf>
 800b444:	e026      	b.n	800b494 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <udp_remove+0x80>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d105      	bne.n	800b45c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b450:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <udp_remove+0x80>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	4a14      	ldr	r2, [pc, #80]	; (800b4a8 <udp_remove+0x80>)
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	e017      	b.n	800b48c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b45c:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <udp_remove+0x80>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	60fb      	str	r3, [r7, #12]
 800b462:	e010      	b.n	800b486 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d009      	beq.n	800b480 <udp_remove+0x58>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	429a      	cmp	r2, r3
 800b474:	d104      	bne.n	800b480 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	60da      	str	r2, [r3, #12]
        break;
 800b47e:	e005      	b.n	800b48c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1eb      	bne.n	800b464 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	2000      	movs	r0, #0
 800b490:	f7f8 ffd2 	bl	8004438 <memp_free>
}
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	08012828 	.word	0x08012828
 800b4a0:	08012b74 	.word	0x08012b74
 800b4a4:	0801287c 	.word	0x0801287c
 800b4a8:	2000a474 	.word	0x2000a474

0800b4ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	f7f8 ff50 	bl	8004358 <memp_malloc>
 800b4b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b4c0:	2220      	movs	r2, #32
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f004 fb1a 	bl	800fafe <memset>
    pcb->ttl = UDP_TTL;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	22ff      	movs	r2, #255	; 0xff
 800b4ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b4d0:	687b      	ldr	r3, [r7, #4]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d01e      	beq.n	800b52a <udp_netif_ip_addr_changed+0x4e>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d01a      	beq.n	800b52a <udp_netif_ip_addr_changed+0x4e>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d017      	beq.n	800b52a <udp_netif_ip_addr_changed+0x4e>
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d013      	beq.n	800b52a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b502:	4b0d      	ldr	r3, [pc, #52]	; (800b538 <udp_netif_ip_addr_changed+0x5c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	e00c      	b.n	800b524 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d103      	bne.n	800b51e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1ef      	bne.n	800b50a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b52a:	bf00      	nop
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	2000a474 	.word	0x2000a474

0800b53c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800b540:	4b20      	ldr	r3, [pc, #128]	; (800b5c4 <dhcp_inc_pcb_refcount+0x88>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d133      	bne.n	800b5b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b548:	4b1f      	ldr	r3, [pc, #124]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <dhcp_inc_pcb_refcount+0x20>
 800b550:	4b1e      	ldr	r3, [pc, #120]	; (800b5cc <dhcp_inc_pcb_refcount+0x90>)
 800b552:	22e5      	movs	r2, #229	; 0xe5
 800b554:	491e      	ldr	r1, [pc, #120]	; (800b5d0 <dhcp_inc_pcb_refcount+0x94>)
 800b556:	481f      	ldr	r0, [pc, #124]	; (800b5d4 <dhcp_inc_pcb_refcount+0x98>)
 800b558:	f004 fa6c 	bl	800fa34 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800b55c:	f7ff ffa6 	bl	800b4ac <udp_new>
 800b560:	4603      	mov	r3, r0
 800b562:	4a19      	ldr	r2, [pc, #100]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b564:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800b566:	4b18      	ldr	r3, [pc, #96]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d102      	bne.n	800b574 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800b56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b572:	e024      	b.n	800b5be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b574:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	7a5a      	ldrb	r2, [r3, #9]
 800b57a:	4b13      	ldr	r3, [pc, #76]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0220 	orr.w	r2, r2, #32
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800b586:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2244      	movs	r2, #68	; 0x44
 800b58c:	4912      	ldr	r1, [pc, #72]	; (800b5d8 <dhcp_inc_pcb_refcount+0x9c>)
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fe34 	bl	800b1fc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800b594:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2243      	movs	r2, #67	; 0x43
 800b59a:	490f      	ldr	r1, [pc, #60]	; (800b5d8 <dhcp_inc_pcb_refcount+0x9c>)
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff feb5 	bl	800b30c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <dhcp_inc_pcb_refcount+0x8c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	490c      	ldr	r1, [pc, #48]	; (800b5dc <dhcp_inc_pcb_refcount+0xa0>)
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff ff1c 	bl	800b3e8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800b5b0:	4b04      	ldr	r3, [pc, #16]	; (800b5c4 <dhcp_inc_pcb_refcount+0x88>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <dhcp_inc_pcb_refcount+0x88>)
 800b5ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	2000a4a4 	.word	0x2000a4a4
 800b5c8:	2000a4a0 	.word	0x2000a4a0
 800b5cc:	08012b8c 	.word	0x08012b8c
 800b5d0:	08012bc4 	.word	0x08012bc4
 800b5d4:	08012bec 	.word	0x08012bec
 800b5d8:	080136ec 	.word	0x080136ec
 800b5dc:	0800ce75 	.word	0x0800ce75

0800b5e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b5e4:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <dhcp_dec_pcb_refcount+0x40>)
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d105      	bne.n	800b5f8 <dhcp_dec_pcb_refcount+0x18>
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <dhcp_dec_pcb_refcount+0x44>)
 800b5ee:	22ff      	movs	r2, #255	; 0xff
 800b5f0:	490d      	ldr	r1, [pc, #52]	; (800b628 <dhcp_dec_pcb_refcount+0x48>)
 800b5f2:	480e      	ldr	r0, [pc, #56]	; (800b62c <dhcp_dec_pcb_refcount+0x4c>)
 800b5f4:	f004 fa1e 	bl	800fa34 <iprintf>
  dhcp_pcb_refcount--;
 800b5f8:	4b09      	ldr	r3, [pc, #36]	; (800b620 <dhcp_dec_pcb_refcount+0x40>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <dhcp_dec_pcb_refcount+0x40>)
 800b602:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800b604:	4b06      	ldr	r3, [pc, #24]	; (800b620 <dhcp_dec_pcb_refcount+0x40>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d107      	bne.n	800b61c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800b60c:	4b08      	ldr	r3, [pc, #32]	; (800b630 <dhcp_dec_pcb_refcount+0x50>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff ff09 	bl	800b428 <udp_remove>
    dhcp_pcb = NULL;
 800b616:	4b06      	ldr	r3, [pc, #24]	; (800b630 <dhcp_dec_pcb_refcount+0x50>)
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
  }
}
 800b61c:	bf00      	nop
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	2000a4a4 	.word	0x2000a4a4
 800b624:	08012b8c 	.word	0x08012b8c
 800b628:	08012c14 	.word	0x08012c14
 800b62c:	08012bec 	.word	0x08012bec
 800b630:	2000a4a0 	.word	0x2000a4a0

0800b634 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b642:	210c      	movs	r1, #12
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f001 f857 	bl	800c6f8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b64a:	4b06      	ldr	r3, [pc, #24]	; (800b664 <dhcp_handle_nak+0x30>)
 800b64c:	4a05      	ldr	r2, [pc, #20]	; (800b664 <dhcp_handle_nak+0x30>)
 800b64e:	4905      	ldr	r1, [pc, #20]	; (800b664 <dhcp_handle_nak+0x30>)
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7f9 f893 	bl	800477c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fc4a 	bl	800bef0 <dhcp_discover>
}
 800b65c:	bf00      	nop
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	080136ec 	.word	0x080136ec

0800b668 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800b676:	2108      	movs	r1, #8
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f001 f83d 	bl	800c6f8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	331c      	adds	r3, #28
 800b682:	2200      	movs	r2, #0
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f002 fb3e 	bl	800dd08 <etharp_query>
 800b68c:	4603      	mov	r3, r0
 800b68e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	799b      	ldrb	r3, [r3, #6]
 800b694:	2bff      	cmp	r3, #255	; 0xff
 800b696:	d005      	beq.n	800b6a4 <dhcp_check+0x3c>
    dhcp->tries++;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	799b      	ldrb	r3, [r3, #6]
 800b69c:	3301      	adds	r3, #1
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800b6a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b6a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b6aa:	893b      	ldrh	r3, [r7, #8]
 800b6ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b6b0:	4a06      	ldr	r2, [pc, #24]	; (800b6cc <dhcp_check+0x64>)
 800b6b2:	fb82 1203 	smull	r1, r2, r2, r3
 800b6b6:	1152      	asrs	r2, r2, #5
 800b6b8:	17db      	asrs	r3, r3, #31
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800b6c2:	bf00      	nop
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	10624dd3 	.word	0x10624dd3

0800b6d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b6e0:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <dhcp_handle_offer+0x44>)
 800b6e2:	789b      	ldrb	r3, [r3, #2]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d011      	beq.n	800b70c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b6ee:	4b0a      	ldr	r3, [pc, #40]	; (800b718 <dhcp_handle_offer+0x48>)
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7f8 f9cd 	bl	8003a92 <lwip_htonl>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	691a      	ldr	r2, [r3, #16]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f808 	bl	800b71c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	2000a498 	.word	0x2000a498
 800b718:	2000a478 	.word	0x2000a478

0800b71c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800b71c:	b5b0      	push	{r4, r5, r7, lr}
 800b71e:	b08a      	sub	sp, #40	; 0x28
 800b720:	af02      	add	r7, sp, #8
 800b722:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d109      	bne.n	800b73e <dhcp_select+0x22>
 800b72a:	4b71      	ldr	r3, [pc, #452]	; (800b8f0 <dhcp_select+0x1d4>)
 800b72c:	f240 1277 	movw	r2, #375	; 0x177
 800b730:	4970      	ldr	r1, [pc, #448]	; (800b8f4 <dhcp_select+0x1d8>)
 800b732:	4871      	ldr	r0, [pc, #452]	; (800b8f8 <dhcp_select+0x1dc>)
 800b734:	f004 f97e 	bl	800fa34 <iprintf>
 800b738:	f06f 030f 	mvn.w	r3, #15
 800b73c:	e0d3      	b.n	800b8e6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b742:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d109      	bne.n	800b75e <dhcp_select+0x42>
 800b74a:	4b69      	ldr	r3, [pc, #420]	; (800b8f0 <dhcp_select+0x1d4>)
 800b74c:	f240 1279 	movw	r2, #377	; 0x179
 800b750:	496a      	ldr	r1, [pc, #424]	; (800b8fc <dhcp_select+0x1e0>)
 800b752:	4869      	ldr	r0, [pc, #420]	; (800b8f8 <dhcp_select+0x1dc>)
 800b754:	f004 f96e 	bl	800fa34 <iprintf>
 800b758:	f06f 0305 	mvn.w	r3, #5
 800b75c:	e0c3      	b.n	800b8e6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b75e:	2101      	movs	r1, #1
 800b760:	69b8      	ldr	r0, [r7, #24]
 800b762:	f000 ffc9 	bl	800c6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b766:	f107 030c 	add.w	r3, r7, #12
 800b76a:	2203      	movs	r2, #3
 800b76c:	69b9      	ldr	r1, [r7, #24]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 fc4e 	bl	800d010 <dhcp_create_msg>
 800b774:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 8085 	beq.w	800b888 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b784:	89b8      	ldrh	r0, [r7, #12]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b78c:	2302      	movs	r3, #2
 800b78e:	2239      	movs	r2, #57	; 0x39
 800b790:	f000 ffcc 	bl	800c72c <dhcp_option>
 800b794:	4603      	mov	r3, r0
 800b796:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b798:	89b8      	ldrh	r0, [r7, #12]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f001 f81b 	bl	800c7e0 <dhcp_option_short>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b7ae:	89b8      	ldrh	r0, [r7, #12]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b7b6:	2304      	movs	r3, #4
 800b7b8:	2232      	movs	r2, #50	; 0x32
 800b7ba:	f000 ffb7 	bl	800c72c <dhcp_option>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b7c2:	89bc      	ldrh	r4, [r7, #12]
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7f8 f95f 	bl	8003a92 <lwip_htonl>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f001 f832 	bl	800c844 <dhcp_option_long>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800b7e4:	89b8      	ldrh	r0, [r7, #12]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b7ec:	2304      	movs	r3, #4
 800b7ee:	2236      	movs	r2, #54	; 0x36
 800b7f0:	f000 ff9c 	bl	800c72c <dhcp_option>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800b7f8:	89bc      	ldrh	r4, [r7, #12]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	4618      	mov	r0, r3
 800b806:	f7f8 f944 	bl	8003a92 <lwip_htonl>
 800b80a:	4603      	mov	r3, r0
 800b80c:	461a      	mov	r2, r3
 800b80e:	4629      	mov	r1, r5
 800b810:	4620      	mov	r0, r4
 800b812:	f001 f817 	bl	800c844 <dhcp_option_long>
 800b816:	4603      	mov	r3, r0
 800b818:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b81a:	89b8      	ldrh	r0, [r7, #12]
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b822:	2303      	movs	r3, #3
 800b824:	2237      	movs	r2, #55	; 0x37
 800b826:	f000 ff81 	bl	800c72c <dhcp_option>
 800b82a:	4603      	mov	r3, r0
 800b82c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b82e:	2300      	movs	r3, #0
 800b830:	77bb      	strb	r3, [r7, #30]
 800b832:	e00e      	b.n	800b852 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b834:	89b8      	ldrh	r0, [r7, #12]
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b83c:	7fbb      	ldrb	r3, [r7, #30]
 800b83e:	4a30      	ldr	r2, [pc, #192]	; (800b900 <dhcp_select+0x1e4>)
 800b840:	5cd3      	ldrb	r3, [r2, r3]
 800b842:	461a      	mov	r2, r3
 800b844:	f000 ffa6 	bl	800c794 <dhcp_option_byte>
 800b848:	4603      	mov	r3, r0
 800b84a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b84c:	7fbb      	ldrb	r3, [r7, #30]
 800b84e:	3301      	adds	r3, #1
 800b850:	77bb      	strb	r3, [r7, #30]
 800b852:	7fbb      	ldrb	r3, [r7, #30]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d9ed      	bls.n	800b834 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b858:	89b8      	ldrh	r0, [r7, #12]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	33f0      	adds	r3, #240	; 0xf0
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	4619      	mov	r1, r3
 800b862:	f001 fcab 	bl	800d1bc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800b866:	4b27      	ldr	r3, [pc, #156]	; (800b904 <dhcp_select+0x1e8>)
 800b868:	6818      	ldr	r0, [r3, #0]
 800b86a:	4b27      	ldr	r3, [pc, #156]	; (800b908 <dhcp_select+0x1ec>)
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	2343      	movs	r3, #67	; 0x43
 800b874:	4a25      	ldr	r2, [pc, #148]	; (800b90c <dhcp_select+0x1f0>)
 800b876:	6979      	ldr	r1, [r7, #20]
 800b878:	f7ff fbda 	bl	800b030 <udp_sendto_if_src>
 800b87c:	4603      	mov	r3, r0
 800b87e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b880:	6978      	ldr	r0, [r7, #20]
 800b882:	f7f9 fc5b 	bl	800513c <pbuf_free>
 800b886:	e001      	b.n	800b88c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800b888:	23ff      	movs	r3, #255	; 0xff
 800b88a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	799b      	ldrb	r3, [r3, #6]
 800b890:	2bff      	cmp	r3, #255	; 0xff
 800b892:	d005      	beq.n	800b8a0 <dhcp_select+0x184>
    dhcp->tries++;
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	799b      	ldrb	r3, [r3, #6]
 800b898:	3301      	adds	r3, #1
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	799b      	ldrb	r3, [r3, #6]
 800b8a4:	2b05      	cmp	r3, #5
 800b8a6:	d80d      	bhi.n	800b8c4 <dhcp_select+0x1a8>
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	799b      	ldrb	r3, [r3, #6]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4093      	lsls	r3, r2
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	0152      	lsls	r2, r2, #5
 800b8b8:	1ad2      	subs	r2, r2, r3
 800b8ba:	0092      	lsls	r2, r2, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	e001      	b.n	800b8c8 <dhcp_select+0x1ac>
 800b8c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b8c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b8ca:	89fb      	ldrh	r3, [r7, #14]
 800b8cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b8d0:	4a0f      	ldr	r2, [pc, #60]	; (800b910 <dhcp_select+0x1f4>)
 800b8d2:	fb82 1203 	smull	r1, r2, r2, r3
 800b8d6:	1152      	asrs	r2, r2, #5
 800b8d8:	17db      	asrs	r3, r3, #31
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b8e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3720      	adds	r7, #32
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	08012b8c 	.word	0x08012b8c
 800b8f4:	08012c38 	.word	0x08012c38
 800b8f8:	08012bec 	.word	0x08012bec
 800b8fc:	08012c54 	.word	0x08012c54
 800b900:	2000002c 	.word	0x2000002c
 800b904:	2000a4a0 	.word	0x2000a4a0
 800b908:	080136ec 	.word	0x080136ec
 800b90c:	080136f0 	.word	0x080136f0
 800b910:	10624dd3 	.word	0x10624dd3

0800b914 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800b91a:	4b27      	ldr	r3, [pc, #156]	; (800b9b8 <dhcp_coarse_tmr+0xa4>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	607b      	str	r3, [r7, #4]
 800b920:	e042      	b.n	800b9a8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d039      	beq.n	800b9a2 <dhcp_coarse_tmr+0x8e>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	795b      	ldrb	r3, [r3, #5]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d035      	beq.n	800b9a2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	8a9b      	ldrh	r3, [r3, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d012      	beq.n	800b964 <dhcp_coarse_tmr+0x50>
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	8a5b      	ldrh	r3, [r3, #18]
 800b942:	3301      	adds	r3, #1
 800b944:	b29a      	uxth	r2, r3
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	825a      	strh	r2, [r3, #18]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	8a5a      	ldrh	r2, [r3, #18]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	8a9b      	ldrh	r3, [r3, #20]
 800b952:	429a      	cmp	r2, r3
 800b954:	d106      	bne.n	800b964 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fe34 	bl	800c5c4 <dhcp_release_and_stop>
        dhcp_start(netif);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f96b 	bl	800bc38 <dhcp_start>
 800b962:	e01e      	b.n	800b9a2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	8a1b      	ldrh	r3, [r3, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <dhcp_coarse_tmr+0x70>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	8a1b      	ldrh	r3, [r3, #16]
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	b291      	uxth	r1, r2
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	8211      	strh	r1, [r2, #16]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d103      	bne.n	800b984 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f8c7 	bl	800bb10 <dhcp_t2_timeout>
 800b982:	e00e      	b.n	800b9a2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	89db      	ldrh	r3, [r3, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <dhcp_coarse_tmr+0x8e>
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	89db      	ldrh	r3, [r3, #14]
 800b990:	1e5a      	subs	r2, r3, #1
 800b992:	b291      	uxth	r1, r2
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	81d1      	strh	r1, [r2, #14]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d102      	bne.n	800b9a2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f888 	bl	800bab2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	607b      	str	r3, [r7, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1b9      	bne.n	800b922 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800b9ae:	bf00      	nop
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	2000a40c 	.word	0x2000a40c

0800b9bc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800b9c2:	4b16      	ldr	r3, [pc, #88]	; (800ba1c <dhcp_fine_tmr+0x60>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	607b      	str	r3, [r7, #4]
 800b9c8:	e020      	b.n	800ba0c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d017      	beq.n	800ba06 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	891b      	ldrh	r3, [r3, #8]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d906      	bls.n	800b9ec <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	891b      	ldrh	r3, [r3, #8]
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	811a      	strh	r2, [r3, #8]
 800b9ea:	e00c      	b.n	800ba06 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	891b      	ldrh	r3, [r3, #8]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d108      	bne.n	800ba06 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	891b      	ldrh	r3, [r3, #8]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f80d 	bl	800ba20 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1db      	bne.n	800b9ca <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ba12:	bf00      	nop
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	2000a40c 	.word	0x2000a40c

0800ba20 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	795b      	ldrb	r3, [r3, #5]
 800ba32:	2b0c      	cmp	r3, #12
 800ba34:	d003      	beq.n	800ba3e <dhcp_timeout+0x1e>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	795b      	ldrb	r3, [r3, #5]
 800ba3a:	2b06      	cmp	r3, #6
 800ba3c:	d103      	bne.n	800ba46 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fa56 	bl	800bef0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ba44:	e031      	b.n	800baaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	795b      	ldrb	r3, [r3, #5]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d10e      	bne.n	800ba6c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	799b      	ldrb	r3, [r3, #6]
 800ba52:	2b05      	cmp	r3, #5
 800ba54:	d803      	bhi.n	800ba5e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fe60 	bl	800b71c <dhcp_select>
}
 800ba5c:	e025      	b.n	800baaa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fdb0 	bl	800c5c4 <dhcp_release_and_stop>
      dhcp_start(netif);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f8e7 	bl	800bc38 <dhcp_start>
}
 800ba6a:	e01e      	b.n	800baaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	795b      	ldrb	r3, [r3, #5]
 800ba70:	2b08      	cmp	r3, #8
 800ba72:	d10b      	bne.n	800ba8c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	799b      	ldrb	r3, [r3, #6]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d803      	bhi.n	800ba84 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff fdf3 	bl	800b668 <dhcp_check>
}
 800ba82:	e012      	b.n	800baaa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fad5 	bl	800c034 <dhcp_bind>
}
 800ba8a:	e00e      	b.n	800baaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	795b      	ldrb	r3, [r3, #5]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d10a      	bne.n	800baaa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	799b      	ldrb	r3, [r3, #6]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d803      	bhi.n	800baa4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fcdb 	bl	800c458 <dhcp_reboot>
}
 800baa2:	e002      	b.n	800baaa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa23 	bl	800bef0 <dhcp_discover>
}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	795b      	ldrb	r3, [r3, #5]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d007      	beq.n	800bad8 <dhcp_t1_timeout+0x26>
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	795b      	ldrb	r3, [r3, #5]
 800bacc:	2b0a      	cmp	r3, #10
 800bace:	d003      	beq.n	800bad8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bad4:	2b05      	cmp	r3, #5
 800bad6:	d117      	bne.n	800bb08 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fb85 	bl	800c1e8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	899b      	ldrh	r3, [r3, #12]
 800bae2:	461a      	mov	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8a5b      	ldrh	r3, [r3, #18]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b01      	cmp	r3, #1
 800baec:	dd0c      	ble.n	800bb08 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	899b      	ldrh	r3, [r3, #12]
 800baf2:	461a      	mov	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	8a5b      	ldrh	r3, [r3, #18]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	da00      	bge.n	800bb00 <dhcp_t1_timeout+0x4e>
 800bafe:	3301      	adds	r3, #1
 800bb00:	105b      	asrs	r3, r3, #1
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	795b      	ldrb	r3, [r3, #5]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d00b      	beq.n	800bb3e <dhcp_t2_timeout+0x2e>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	795b      	ldrb	r3, [r3, #5]
 800bb2a:	2b0a      	cmp	r3, #10
 800bb2c:	d007      	beq.n	800bb3e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bb32:	2b05      	cmp	r3, #5
 800bb34:	d003      	beq.n	800bb3e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	795b      	ldrb	r3, [r3, #5]
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d117      	bne.n	800bb6e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fbee 	bl	800c320 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8a9b      	ldrh	r3, [r3, #20]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	8a5b      	ldrh	r3, [r3, #18]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	dd0c      	ble.n	800bb6e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	8a9b      	ldrh	r3, [r3, #20]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	8a5b      	ldrh	r3, [r3, #18]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da00      	bge.n	800bb66 <dhcp_t2_timeout+0x56>
 800bb64:	3301      	adds	r3, #1
 800bb66:	105b      	asrs	r3, r3, #1
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800bb6e:	bf00      	nop
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800bb94:	4b26      	ldr	r3, [pc, #152]	; (800bc30 <dhcp_handle_ack+0xb8>)
 800bb96:	78db      	ldrb	r3, [r3, #3]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d003      	beq.n	800bba4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800bb9c:	4b25      	ldr	r3, [pc, #148]	; (800bc34 <dhcp_handle_ack+0xbc>)
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800bba4:	4b22      	ldr	r3, [pc, #136]	; (800bc30 <dhcp_handle_ack+0xb8>)
 800bba6:	791b      	ldrb	r3, [r3, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d004      	beq.n	800bbb6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800bbac:	4b21      	ldr	r3, [pc, #132]	; (800bc34 <dhcp_handle_ack+0xbc>)
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	62da      	str	r2, [r3, #44]	; 0x2c
 800bbb4:	e004      	b.n	800bbc0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbba:	085a      	lsrs	r2, r3, #1
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800bbc0:	4b1b      	ldr	r3, [pc, #108]	; (800bc30 <dhcp_handle_ack+0xb8>)
 800bbc2:	795b      	ldrb	r3, [r3, #5]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d004      	beq.n	800bbd2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800bbc8:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <dhcp_handle_ack+0xbc>)
 800bbca:	695a      	ldr	r2, [r3, #20]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	631a      	str	r2, [r3, #48]	; 0x30
 800bbd0:	e007      	b.n	800bbe2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	00db      	lsls	r3, r3, #3
 800bbda:	1a9b      	subs	r3, r3, r2
 800bbdc:	08da      	lsrs	r2, r3, #3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	691a      	ldr	r2, [r3, #16]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800bbea:	4b11      	ldr	r3, [pc, #68]	; (800bc30 <dhcp_handle_ack+0xb8>)
 800bbec:	799b      	ldrb	r3, [r3, #6]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00b      	beq.n	800bc0a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800bbf2:	4b10      	ldr	r3, [pc, #64]	; (800bc34 <dhcp_handle_ack+0xbc>)
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f7 ff4b 	bl	8003a92 <lwip_htonl>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2201      	movs	r2, #1
 800bc06:	71da      	strb	r2, [r3, #7]
 800bc08:	e002      	b.n	800bc10 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800bc10:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <dhcp_handle_ack+0xb8>)
 800bc12:	79db      	ldrb	r3, [r3, #7]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d007      	beq.n	800bc28 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800bc18:	4b06      	ldr	r3, [pc, #24]	; (800bc34 <dhcp_handle_ack+0xbc>)
 800bc1a:	69db      	ldr	r3, [r3, #28]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7f7 ff38 	bl	8003a92 <lwip_htonl>
 800bc22:	4602      	mov	r2, r0
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	2000a498 	.word	0x2000a498
 800bc34:	2000a478 	.word	0x2000a478

0800bc38 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d109      	bne.n	800bc5a <dhcp_start+0x22>
 800bc46:	4b37      	ldr	r3, [pc, #220]	; (800bd24 <dhcp_start+0xec>)
 800bc48:	f240 22e7 	movw	r2, #743	; 0x2e7
 800bc4c:	4936      	ldr	r1, [pc, #216]	; (800bd28 <dhcp_start+0xf0>)
 800bc4e:	4837      	ldr	r0, [pc, #220]	; (800bd2c <dhcp_start+0xf4>)
 800bc50:	f003 fef0 	bl	800fa34 <iprintf>
 800bc54:	f06f 030f 	mvn.w	r3, #15
 800bc58:	e060      	b.n	800bd1c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <dhcp_start+0x44>
 800bc68:	4b2e      	ldr	r3, [pc, #184]	; (800bd24 <dhcp_start+0xec>)
 800bc6a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800bc6e:	4930      	ldr	r1, [pc, #192]	; (800bd30 <dhcp_start+0xf8>)
 800bc70:	482e      	ldr	r0, [pc, #184]	; (800bd2c <dhcp_start+0xf4>)
 800bc72:	f003 fedf 	bl	800fa34 <iprintf>
 800bc76:	f06f 030f 	mvn.w	r3, #15
 800bc7a:	e04f      	b.n	800bd1c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc86:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800bc8a:	d202      	bcs.n	800bc92 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800bc8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc90:	e044      	b.n	800bd1c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10d      	bne.n	800bcb4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800bc98:	2034      	movs	r0, #52	; 0x34
 800bc9a:	f7f8 f9cd 	bl	8004038 <mem_malloc>
 800bc9e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800bca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcaa:	e037      	b.n	800bd1c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	625a      	str	r2, [r3, #36]	; 0x24
 800bcb2:	e005      	b.n	800bcc0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	791b      	ldrb	r3, [r3, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800bcbc:	f7ff fc90 	bl	800b5e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800bcc0:	2234      	movs	r2, #52	; 0x34
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f003 ff1a 	bl	800fafe <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800bcca:	f7ff fc37 	bl	800b53c <dhcp_inc_pcb_refcount>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <dhcp_start+0xa2>
    return ERR_MEM;
 800bcd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcd8:	e020      	b.n	800bd1c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bce6:	f003 0304 	and.w	r3, r3, #4
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d105      	bne.n	800bcfa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800bcee:	2102      	movs	r1, #2
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 fd01 	bl	800c6f8 <dhcp_set_state>
    return ERR_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e010      	b.n	800bd1c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f8f8 	bl	800bef0 <dhcp_discover>
 800bd00:	4603      	mov	r3, r0
 800bd02:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800bd04:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fc59 	bl	800c5c4 <dhcp_release_and_stop>
    return ERR_MEM;
 800bd12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd16:	e001      	b.n	800bd1c <dhcp_start+0xe4>
  }
  return result;
 800bd18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	08012b8c 	.word	0x08012b8c
 800bd28:	08012c70 	.word	0x08012c70
 800bd2c:	08012bec 	.word	0x08012bec
 800bd30:	08012cb4 	.word	0x08012cb4

0800bd34 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d025      	beq.n	800bd94 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	795b      	ldrb	r3, [r3, #5]
 800bd4c:	2b0a      	cmp	r3, #10
 800bd4e:	d008      	beq.n	800bd62 <dhcp_network_changed+0x2e>
 800bd50:	2b0a      	cmp	r3, #10
 800bd52:	dc0d      	bgt.n	800bd70 <dhcp_network_changed+0x3c>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d01f      	beq.n	800bd98 <dhcp_network_changed+0x64>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	db09      	blt.n	800bd70 <dhcp_network_changed+0x3c>
 800bd5c:	3b03      	subs	r3, #3
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d806      	bhi.n	800bd70 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fb75 	bl	800c458 <dhcp_reboot>
      break;
 800bd6e:	e014      	b.n	800bd9a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	795b      	ldrb	r3, [r3, #5]
 800bd74:	2b0c      	cmp	r3, #12
 800bd76:	d906      	bls.n	800bd86 <dhcp_network_changed+0x52>
 800bd78:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <dhcp_network_changed+0x6c>)
 800bd7a:	f240 326d 	movw	r2, #877	; 0x36d
 800bd7e:	4909      	ldr	r1, [pc, #36]	; (800bda4 <dhcp_network_changed+0x70>)
 800bd80:	4809      	ldr	r0, [pc, #36]	; (800bda8 <dhcp_network_changed+0x74>)
 800bd82:	f003 fe57 	bl	800fa34 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f8af 	bl	800bef0 <dhcp_discover>
      break;
 800bd92:	e002      	b.n	800bd9a <dhcp_network_changed+0x66>
    return;
 800bd94:	bf00      	nop
 800bd96:	e000      	b.n	800bd9a <dhcp_network_changed+0x66>
      break;
 800bd98:	bf00      	nop
  }
}
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	08012b8c 	.word	0x08012b8c
 800bda4:	08012cd8 	.word	0x08012cd8
 800bda8:	08012bec 	.word	0x08012bec

0800bdac <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d107      	bne.n	800bdcc <dhcp_arp_reply+0x20>
 800bdbc:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <dhcp_arp_reply+0x4c>)
 800bdbe:	f240 328b 	movw	r2, #907	; 0x38b
 800bdc2:	490e      	ldr	r1, [pc, #56]	; (800bdfc <dhcp_arp_reply+0x50>)
 800bdc4:	480e      	ldr	r0, [pc, #56]	; (800be00 <dhcp_arp_reply+0x54>)
 800bdc6:	f003 fe35 	bl	800fa34 <iprintf>
 800bdca:	e012      	b.n	800bdf2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00c      	beq.n	800bdf2 <dhcp_arp_reply+0x46>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	795b      	ldrb	r3, [r3, #5]
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d108      	bne.n	800bdf2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d102      	bne.n	800bdf2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f809 	bl	800be04 <dhcp_decline>
    }
  }
}
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	08012b8c 	.word	0x08012b8c
 800bdfc:	08012c70 	.word	0x08012c70
 800be00:	08012bec 	.word	0x08012bec

0800be04 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800be04:	b5b0      	push	{r4, r5, r7, lr}
 800be06:	b08a      	sub	sp, #40	; 0x28
 800be08:	af02      	add	r7, sp, #8
 800be0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800be12:	210c      	movs	r1, #12
 800be14:	69b8      	ldr	r0, [r7, #24]
 800be16:	f000 fc6f 	bl	800c6f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800be1a:	f107 030c 	add.w	r3, r7, #12
 800be1e:	2204      	movs	r2, #4
 800be20:	69b9      	ldr	r1, [r7, #24]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f001 f8f4 	bl	800d010 <dhcp_create_msg>
 800be28:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d035      	beq.n	800be9c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800be36:	89b8      	ldrh	r0, [r7, #12]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be3e:	2304      	movs	r3, #4
 800be40:	2232      	movs	r2, #50	; 0x32
 800be42:	f000 fc73 	bl	800c72c <dhcp_option>
 800be46:	4603      	mov	r3, r0
 800be48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800be4a:	89bc      	ldrh	r4, [r7, #12]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	4618      	mov	r0, r3
 800be58:	f7f7 fe1b 	bl	8003a92 <lwip_htonl>
 800be5c:	4603      	mov	r3, r0
 800be5e:	461a      	mov	r2, r3
 800be60:	4629      	mov	r1, r5
 800be62:	4620      	mov	r0, r4
 800be64:	f000 fcee 	bl	800c844 <dhcp_option_long>
 800be68:	4603      	mov	r3, r0
 800be6a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800be6c:	89b8      	ldrh	r0, [r7, #12]
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	33f0      	adds	r3, #240	; 0xf0
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	4619      	mov	r1, r3
 800be76:	f001 f9a1 	bl	800d1bc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800be7a:	4b19      	ldr	r3, [pc, #100]	; (800bee0 <dhcp_decline+0xdc>)
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	4b19      	ldr	r3, [pc, #100]	; (800bee4 <dhcp_decline+0xe0>)
 800be80:	9301      	str	r3, [sp, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	2343      	movs	r3, #67	; 0x43
 800be88:	4a17      	ldr	r2, [pc, #92]	; (800bee8 <dhcp_decline+0xe4>)
 800be8a:	6979      	ldr	r1, [r7, #20]
 800be8c:	f7ff f8d0 	bl	800b030 <udp_sendto_if_src>
 800be90:	4603      	mov	r3, r0
 800be92:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800be94:	6978      	ldr	r0, [r7, #20]
 800be96:	f7f9 f951 	bl	800513c <pbuf_free>
 800be9a:	e001      	b.n	800bea0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800be9c:	23ff      	movs	r3, #255	; 0xff
 800be9e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	799b      	ldrb	r3, [r3, #6]
 800bea4:	2bff      	cmp	r3, #255	; 0xff
 800bea6:	d005      	beq.n	800beb4 <dhcp_decline+0xb0>
    dhcp->tries++;
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	799b      	ldrb	r3, [r3, #6]
 800beac:	3301      	adds	r3, #1
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800beb4:	f242 7310 	movw	r3, #10000	; 0x2710
 800beb8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800beba:	89fb      	ldrh	r3, [r7, #14]
 800bebc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bec0:	4a0a      	ldr	r2, [pc, #40]	; (800beec <dhcp_decline+0xe8>)
 800bec2:	fb82 1203 	smull	r1, r2, r2, r3
 800bec6:	1152      	asrs	r2, r2, #5
 800bec8:	17db      	asrs	r3, r3, #31
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	b29a      	uxth	r2, r3
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3720      	adds	r7, #32
 800beda:	46bd      	mov	sp, r7
 800bedc:	bdb0      	pop	{r4, r5, r7, pc}
 800bede:	bf00      	nop
 800bee0:	2000a4a0 	.word	0x2000a4a0
 800bee4:	080136ec 	.word	0x080136ec
 800bee8:	080136f0 	.word	0x080136f0
 800beec:	10624dd3 	.word	0x10624dd3

0800bef0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08a      	sub	sp, #40	; 0x28
 800bef4:	af02      	add	r7, sp, #8
 800bef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	2200      	movs	r2, #0
 800bf06:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800bf08:	2106      	movs	r1, #6
 800bf0a:	69b8      	ldr	r0, [r7, #24]
 800bf0c:	f000 fbf4 	bl	800c6f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800bf10:	f107 0308 	add.w	r3, r7, #8
 800bf14:	2201      	movs	r2, #1
 800bf16:	69b9      	ldr	r1, [r7, #24]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f001 f879 	bl	800d010 <dhcp_create_msg>
 800bf1e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d04b      	beq.n	800bfbe <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bf2c:	8938      	ldrh	r0, [r7, #8]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bf34:	2302      	movs	r3, #2
 800bf36:	2239      	movs	r2, #57	; 0x39
 800bf38:	f000 fbf8 	bl	800c72c <dhcp_option>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800bf40:	8938      	ldrh	r0, [r7, #8]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	f000 fc47 	bl	800c7e0 <dhcp_option_short>
 800bf52:	4603      	mov	r3, r0
 800bf54:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800bf56:	8938      	ldrh	r0, [r7, #8]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bf5e:	2303      	movs	r3, #3
 800bf60:	2237      	movs	r2, #55	; 0x37
 800bf62:	f000 fbe3 	bl	800c72c <dhcp_option>
 800bf66:	4603      	mov	r3, r0
 800bf68:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	77fb      	strb	r3, [r7, #31]
 800bf6e:	e00e      	b.n	800bf8e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800bf70:	8938      	ldrh	r0, [r7, #8]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bf78:	7ffb      	ldrb	r3, [r7, #31]
 800bf7a:	4a29      	ldr	r2, [pc, #164]	; (800c020 <dhcp_discover+0x130>)
 800bf7c:	5cd3      	ldrb	r3, [r2, r3]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f000 fc08 	bl	800c794 <dhcp_option_byte>
 800bf84:	4603      	mov	r3, r0
 800bf86:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bf88:	7ffb      	ldrb	r3, [r7, #31]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	77fb      	strb	r3, [r7, #31]
 800bf8e:	7ffb      	ldrb	r3, [r7, #31]
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d9ed      	bls.n	800bf70 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bf94:	8938      	ldrh	r0, [r7, #8]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	33f0      	adds	r3, #240	; 0xf0
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f001 f90d 	bl	800d1bc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800bfa2:	4b20      	ldr	r3, [pc, #128]	; (800c024 <dhcp_discover+0x134>)
 800bfa4:	6818      	ldr	r0, [r3, #0]
 800bfa6:	4b20      	ldr	r3, [pc, #128]	; (800c028 <dhcp_discover+0x138>)
 800bfa8:	9301      	str	r3, [sp, #4]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	2343      	movs	r3, #67	; 0x43
 800bfb0:	4a1e      	ldr	r2, [pc, #120]	; (800c02c <dhcp_discover+0x13c>)
 800bfb2:	6939      	ldr	r1, [r7, #16]
 800bfb4:	f7ff f83c 	bl	800b030 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800bfb8:	6938      	ldr	r0, [r7, #16]
 800bfba:	f7f9 f8bf 	bl	800513c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	799b      	ldrb	r3, [r3, #6]
 800bfc2:	2bff      	cmp	r3, #255	; 0xff
 800bfc4:	d005      	beq.n	800bfd2 <dhcp_discover+0xe2>
    dhcp->tries++;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	799b      	ldrb	r3, [r3, #6]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	799b      	ldrb	r3, [r3, #6]
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	d80d      	bhi.n	800bff6 <dhcp_discover+0x106>
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	799b      	ldrb	r3, [r3, #6]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	4093      	lsls	r3, r2
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	0152      	lsls	r2, r2, #5
 800bfea:	1ad2      	subs	r2, r2, r3
 800bfec:	0092      	lsls	r2, r2, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	e001      	b.n	800bffa <dhcp_discover+0x10a>
 800bff6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800bffa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bffc:	897b      	ldrh	r3, [r7, #10]
 800bffe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c002:	4a0b      	ldr	r2, [pc, #44]	; (800c030 <dhcp_discover+0x140>)
 800c004:	fb82 1203 	smull	r1, r2, r2, r3
 800c008:	1152      	asrs	r2, r2, #5
 800c00a:	17db      	asrs	r3, r3, #31
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	b29a      	uxth	r2, r3
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3720      	adds	r7, #32
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	2000002c 	.word	0x2000002c
 800c024:	2000a4a0 	.word	0x2000a4a0
 800c028:	080136ec 	.word	0x080136ec
 800c02c:	080136f0 	.word	0x080136f0
 800c030:	10624dd3 	.word	0x10624dd3

0800c034 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d107      	bne.n	800c052 <dhcp_bind+0x1e>
 800c042:	4b64      	ldr	r3, [pc, #400]	; (800c1d4 <dhcp_bind+0x1a0>)
 800c044:	f240 4215 	movw	r2, #1045	; 0x415
 800c048:	4963      	ldr	r1, [pc, #396]	; (800c1d8 <dhcp_bind+0x1a4>)
 800c04a:	4864      	ldr	r0, [pc, #400]	; (800c1dc <dhcp_bind+0x1a8>)
 800c04c:	f003 fcf2 	bl	800fa34 <iprintf>
 800c050:	e0bc      	b.n	800c1cc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d107      	bne.n	800c06e <dhcp_bind+0x3a>
 800c05e:	4b5d      	ldr	r3, [pc, #372]	; (800c1d4 <dhcp_bind+0x1a0>)
 800c060:	f240 4217 	movw	r2, #1047	; 0x417
 800c064:	495e      	ldr	r1, [pc, #376]	; (800c1e0 <dhcp_bind+0x1ac>)
 800c066:	485d      	ldr	r0, [pc, #372]	; (800c1dc <dhcp_bind+0x1a8>)
 800c068:	f003 fce4 	bl	800fa34 <iprintf>
 800c06c:	e0ae      	b.n	800c1cc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	2200      	movs	r2, #0
 800c072:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c07c:	d019      	beq.n	800c0b2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c082:	331e      	adds	r3, #30
 800c084:	4a57      	ldr	r2, [pc, #348]	; (800c1e4 <dhcp_bind+0x1b0>)
 800c086:	fba2 2303 	umull	r2, r3, r2, r3
 800c08a:	095b      	lsrs	r3, r3, #5
 800c08c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c094:	d302      	bcc.n	800c09c <dhcp_bind+0x68>
      timeout = 0xffff;
 800c096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c09a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	8a9b      	ldrh	r3, [r3, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d102      	bne.n	800c0b2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ba:	d01d      	beq.n	800c0f8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c0:	331e      	adds	r3, #30
 800c0c2:	4a48      	ldr	r2, [pc, #288]	; (800c1e4 <dhcp_bind+0x1b0>)
 800c0c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c8:	095b      	lsrs	r3, r3, #5
 800c0ca:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0d2:	d302      	bcc.n	800c0da <dhcp_bind+0xa6>
      timeout = 0xffff;
 800c0d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0d8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	895b      	ldrh	r3, [r3, #10]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d102      	bne.n	800c0f0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	895a      	ldrh	r2, [r3, #10]
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c100:	d01d      	beq.n	800c13e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c106:	331e      	adds	r3, #30
 800c108:	4a36      	ldr	r2, [pc, #216]	; (800c1e4 <dhcp_bind+0x1b0>)
 800c10a:	fba2 2303 	umull	r2, r3, r2, r3
 800c10e:	095b      	lsrs	r3, r3, #5
 800c110:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c118:	d302      	bcc.n	800c120 <dhcp_bind+0xec>
      timeout = 0xffff;
 800c11a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c11e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	b29a      	uxth	r2, r3
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	899b      	ldrh	r3, [r3, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	2201      	movs	r2, #1
 800c134:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	899a      	ldrh	r2, [r3, #12]
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	895a      	ldrh	r2, [r3, #10]
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	899b      	ldrh	r3, [r3, #12]
 800c146:	429a      	cmp	r2, r3
 800c148:	d306      	bcc.n	800c158 <dhcp_bind+0x124>
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	899b      	ldrh	r3, [r3, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	2200      	movs	r2, #0
 800c156:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	79db      	ldrb	r3, [r3, #7]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	6a1b      	ldr	r3, [r3, #32]
 800c164:	613b      	str	r3, [r7, #16]
 800c166:	e014      	b.n	800c192 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	331c      	adds	r3, #28
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800c170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c174:	2b00      	cmp	r3, #0
 800c176:	db02      	blt.n	800c17e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800c178:	23ff      	movs	r3, #255	; 0xff
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	e009      	b.n	800c192 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800c17e:	7dfb      	ldrb	r3, [r7, #23]
 800c180:	2bbf      	cmp	r3, #191	; 0xbf
 800c182:	d903      	bls.n	800c18c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800c184:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800c188:	613b      	str	r3, [r7, #16]
 800c18a:	e002      	b.n	800c192 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800c18c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c190:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c196:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d108      	bne.n	800c1b0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	69da      	ldr	r2, [r3, #28]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800c1b0:	210a      	movs	r1, #10
 800c1b2:	69b8      	ldr	r0, [r7, #24]
 800c1b4:	f000 faa0 	bl	800c6f8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	f103 011c 	add.w	r1, r3, #28
 800c1be:	f107 030c 	add.w	r3, r7, #12
 800c1c2:	f107 0210 	add.w	r2, r7, #16
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7f8 fad8 	bl	800477c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800c1cc:	3720      	adds	r7, #32
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	08012b8c 	.word	0x08012b8c
 800c1d8:	08012cec 	.word	0x08012cec
 800c1dc:	08012bec 	.word	0x08012bec
 800c1e0:	08012d08 	.word	0x08012d08
 800c1e4:	88888889 	.word	0x88888889

0800c1e8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b08a      	sub	sp, #40	; 0x28
 800c1ec:	af02      	add	r7, sp, #8
 800c1ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800c1f6:	2105      	movs	r1, #5
 800c1f8:	69b8      	ldr	r0, [r7, #24]
 800c1fa:	f000 fa7d 	bl	800c6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c1fe:	f107 030c 	add.w	r3, r7, #12
 800c202:	2203      	movs	r2, #3
 800c204:	69b9      	ldr	r1, [r7, #24]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 ff02 	bl	800d010 <dhcp_create_msg>
 800c20c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d04e      	beq.n	800c2b2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c21a:	89b8      	ldrh	r0, [r7, #12]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c222:	2302      	movs	r3, #2
 800c224:	2239      	movs	r2, #57	; 0x39
 800c226:	f000 fa81 	bl	800c72c <dhcp_option>
 800c22a:	4603      	mov	r3, r0
 800c22c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c22e:	89b8      	ldrh	r0, [r7, #12]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c23a:	461a      	mov	r2, r3
 800c23c:	f000 fad0 	bl	800c7e0 <dhcp_option_short>
 800c240:	4603      	mov	r3, r0
 800c242:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c244:	89b8      	ldrh	r0, [r7, #12]
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c24c:	2303      	movs	r3, #3
 800c24e:	2237      	movs	r2, #55	; 0x37
 800c250:	f000 fa6c 	bl	800c72c <dhcp_option>
 800c254:	4603      	mov	r3, r0
 800c256:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c258:	2300      	movs	r3, #0
 800c25a:	77bb      	strb	r3, [r7, #30]
 800c25c:	e00e      	b.n	800c27c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c25e:	89b8      	ldrh	r0, [r7, #12]
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c266:	7fbb      	ldrb	r3, [r7, #30]
 800c268:	4a2a      	ldr	r2, [pc, #168]	; (800c314 <dhcp_renew+0x12c>)
 800c26a:	5cd3      	ldrb	r3, [r2, r3]
 800c26c:	461a      	mov	r2, r3
 800c26e:	f000 fa91 	bl	800c794 <dhcp_option_byte>
 800c272:	4603      	mov	r3, r0
 800c274:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c276:	7fbb      	ldrb	r3, [r7, #30]
 800c278:	3301      	adds	r3, #1
 800c27a:	77bb      	strb	r3, [r7, #30]
 800c27c:	7fbb      	ldrb	r3, [r7, #30]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d9ed      	bls.n	800c25e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c282:	89b8      	ldrh	r0, [r7, #12]
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	33f0      	adds	r3, #240	; 0xf0
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	4619      	mov	r1, r3
 800c28c:	f000 ff96 	bl	800d1bc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c290:	4b21      	ldr	r3, [pc, #132]	; (800c318 <dhcp_renew+0x130>)
 800c292:	6818      	ldr	r0, [r3, #0]
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	f103 0218 	add.w	r2, r3, #24
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	2343      	movs	r3, #67	; 0x43
 800c2a0:	6979      	ldr	r1, [r7, #20]
 800c2a2:	f7fe fe51 	bl	800af48 <udp_sendto_if>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c2aa:	6978      	ldr	r0, [r7, #20]
 800c2ac:	f7f8 ff46 	bl	800513c <pbuf_free>
 800c2b0:	e001      	b.n	800c2b6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c2b2:	23ff      	movs	r3, #255	; 0xff
 800c2b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	799b      	ldrb	r3, [r3, #6]
 800c2ba:	2bff      	cmp	r3, #255	; 0xff
 800c2bc:	d005      	beq.n	800c2ca <dhcp_renew+0xe2>
    dhcp->tries++;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	799b      	ldrb	r3, [r3, #6]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	799b      	ldrb	r3, [r3, #6]
 800c2ce:	2b09      	cmp	r3, #9
 800c2d0:	d80a      	bhi.n	800c2e8 <dhcp_renew+0x100>
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	799b      	ldrb	r3, [r3, #6]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	461a      	mov	r2, r3
 800c2da:	0152      	lsls	r2, r2, #5
 800c2dc:	1ad2      	subs	r2, r2, r3
 800c2de:	0092      	lsls	r2, r2, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	011b      	lsls	r3, r3, #4
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	e001      	b.n	800c2ec <dhcp_renew+0x104>
 800c2e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c2ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c2ee:	89fb      	ldrh	r3, [r7, #14]
 800c2f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c2f4:	4a09      	ldr	r2, [pc, #36]	; (800c31c <dhcp_renew+0x134>)
 800c2f6:	fb82 1203 	smull	r1, r2, r2, r3
 800c2fa:	1152      	asrs	r2, r2, #5
 800c2fc:	17db      	asrs	r3, r3, #31
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	b29a      	uxth	r2, r3
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c306:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	2000002c 	.word	0x2000002c
 800c318:	2000a4a0 	.word	0x2000a4a0
 800c31c:	10624dd3 	.word	0x10624dd3

0800c320 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08a      	sub	sp, #40	; 0x28
 800c324:	af02      	add	r7, sp, #8
 800c326:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c32e:	2104      	movs	r1, #4
 800c330:	69b8      	ldr	r0, [r7, #24]
 800c332:	f000 f9e1 	bl	800c6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c336:	f107 030c 	add.w	r3, r7, #12
 800c33a:	2203      	movs	r2, #3
 800c33c:	69b9      	ldr	r1, [r7, #24]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fe66 	bl	800d010 <dhcp_create_msg>
 800c344:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d04c      	beq.n	800c3e6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c352:	89b8      	ldrh	r0, [r7, #12]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c35a:	2302      	movs	r3, #2
 800c35c:	2239      	movs	r2, #57	; 0x39
 800c35e:	f000 f9e5 	bl	800c72c <dhcp_option>
 800c362:	4603      	mov	r3, r0
 800c364:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c366:	89b8      	ldrh	r0, [r7, #12]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c372:	461a      	mov	r2, r3
 800c374:	f000 fa34 	bl	800c7e0 <dhcp_option_short>
 800c378:	4603      	mov	r3, r0
 800c37a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c37c:	89b8      	ldrh	r0, [r7, #12]
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c384:	2303      	movs	r3, #3
 800c386:	2237      	movs	r2, #55	; 0x37
 800c388:	f000 f9d0 	bl	800c72c <dhcp_option>
 800c38c:	4603      	mov	r3, r0
 800c38e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c390:	2300      	movs	r3, #0
 800c392:	77bb      	strb	r3, [r7, #30]
 800c394:	e00e      	b.n	800c3b4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c396:	89b8      	ldrh	r0, [r7, #12]
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c39e:	7fbb      	ldrb	r3, [r7, #30]
 800c3a0:	4a29      	ldr	r2, [pc, #164]	; (800c448 <dhcp_rebind+0x128>)
 800c3a2:	5cd3      	ldrb	r3, [r2, r3]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	f000 f9f5 	bl	800c794 <dhcp_option_byte>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c3ae:	7fbb      	ldrb	r3, [r7, #30]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	77bb      	strb	r3, [r7, #30]
 800c3b4:	7fbb      	ldrb	r3, [r7, #30]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d9ed      	bls.n	800c396 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c3ba:	89b8      	ldrh	r0, [r7, #12]
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	33f0      	adds	r3, #240	; 0xf0
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	f000 fefa 	bl	800d1bc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c3c8:	4b20      	ldr	r3, [pc, #128]	; (800c44c <dhcp_rebind+0x12c>)
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	2343      	movs	r3, #67	; 0x43
 800c3d2:	4a1f      	ldr	r2, [pc, #124]	; (800c450 <dhcp_rebind+0x130>)
 800c3d4:	6979      	ldr	r1, [r7, #20]
 800c3d6:	f7fe fdb7 	bl	800af48 <udp_sendto_if>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c3de:	6978      	ldr	r0, [r7, #20]
 800c3e0:	f7f8 feac 	bl	800513c <pbuf_free>
 800c3e4:	e001      	b.n	800c3ea <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c3e6:	23ff      	movs	r3, #255	; 0xff
 800c3e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	799b      	ldrb	r3, [r3, #6]
 800c3ee:	2bff      	cmp	r3, #255	; 0xff
 800c3f0:	d005      	beq.n	800c3fe <dhcp_rebind+0xde>
    dhcp->tries++;
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	799b      	ldrb	r3, [r3, #6]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	799b      	ldrb	r3, [r3, #6]
 800c402:	2b09      	cmp	r3, #9
 800c404:	d80a      	bhi.n	800c41c <dhcp_rebind+0xfc>
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	799b      	ldrb	r3, [r3, #6]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	461a      	mov	r2, r3
 800c40e:	0152      	lsls	r2, r2, #5
 800c410:	1ad2      	subs	r2, r2, r3
 800c412:	0092      	lsls	r2, r2, #2
 800c414:	4413      	add	r3, r2
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	b29b      	uxth	r3, r3
 800c41a:	e001      	b.n	800c420 <dhcp_rebind+0x100>
 800c41c:	f242 7310 	movw	r3, #10000	; 0x2710
 800c420:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c422:	89fb      	ldrh	r3, [r7, #14]
 800c424:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c428:	4a0a      	ldr	r2, [pc, #40]	; (800c454 <dhcp_rebind+0x134>)
 800c42a:	fb82 1203 	smull	r1, r2, r2, r3
 800c42e:	1152      	asrs	r2, r2, #5
 800c430:	17db      	asrs	r3, r3, #31
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	b29a      	uxth	r2, r3
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c43a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3720      	adds	r7, #32
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	2000002c 	.word	0x2000002c
 800c44c:	2000a4a0 	.word	0x2000a4a0
 800c450:	080136f0 	.word	0x080136f0
 800c454:	10624dd3 	.word	0x10624dd3

0800c458 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c458:	b5b0      	push	{r4, r5, r7, lr}
 800c45a:	b08a      	sub	sp, #40	; 0x28
 800c45c:	af02      	add	r7, sp, #8
 800c45e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c464:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c466:	2103      	movs	r1, #3
 800c468:	69b8      	ldr	r0, [r7, #24]
 800c46a:	f000 f945 	bl	800c6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c46e:	f107 030c 	add.w	r3, r7, #12
 800c472:	2203      	movs	r2, #3
 800c474:	69b9      	ldr	r1, [r7, #24]
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fdca 	bl	800d010 <dhcp_create_msg>
 800c47c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d066      	beq.n	800c552 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c48a:	89b8      	ldrh	r0, [r7, #12]
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c492:	2302      	movs	r3, #2
 800c494:	2239      	movs	r2, #57	; 0x39
 800c496:	f000 f949 	bl	800c72c <dhcp_option>
 800c49a:	4603      	mov	r3, r0
 800c49c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c49e:	89b8      	ldrh	r0, [r7, #12]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	33f0      	adds	r3, #240	; 0xf0
 800c4a4:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	f000 f999 	bl	800c7e0 <dhcp_option_short>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c4b2:	89b8      	ldrh	r0, [r7, #12]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4ba:	2304      	movs	r3, #4
 800c4bc:	2232      	movs	r2, #50	; 0x32
 800c4be:	f000 f935 	bl	800c72c <dhcp_option>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c4c6:	89bc      	ldrh	r4, [r7, #12]
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	69db      	ldr	r3, [r3, #28]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7f7 fadd 	bl	8003a92 <lwip_htonl>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	461a      	mov	r2, r3
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 f9b0 	bl	800c844 <dhcp_option_long>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c4e8:	89b8      	ldrh	r0, [r7, #12]
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	2237      	movs	r2, #55	; 0x37
 800c4f4:	f000 f91a 	bl	800c72c <dhcp_option>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	77bb      	strb	r3, [r7, #30]
 800c500:	e00e      	b.n	800c520 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c502:	89b8      	ldrh	r0, [r7, #12]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c50a:	7fbb      	ldrb	r3, [r7, #30]
 800c50c:	4a29      	ldr	r2, [pc, #164]	; (800c5b4 <dhcp_reboot+0x15c>)
 800c50e:	5cd3      	ldrb	r3, [r2, r3]
 800c510:	461a      	mov	r2, r3
 800c512:	f000 f93f 	bl	800c794 <dhcp_option_byte>
 800c516:	4603      	mov	r3, r0
 800c518:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c51a:	7fbb      	ldrb	r3, [r7, #30]
 800c51c:	3301      	adds	r3, #1
 800c51e:	77bb      	strb	r3, [r7, #30]
 800c520:	7fbb      	ldrb	r3, [r7, #30]
 800c522:	2b02      	cmp	r3, #2
 800c524:	d9ed      	bls.n	800c502 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c526:	89b8      	ldrh	r0, [r7, #12]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	33f0      	adds	r3, #240	; 0xf0
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	4619      	mov	r1, r3
 800c530:	f000 fe44 	bl	800d1bc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c534:	4b20      	ldr	r3, [pc, #128]	; (800c5b8 <dhcp_reboot+0x160>)
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	2343      	movs	r3, #67	; 0x43
 800c53e:	4a1f      	ldr	r2, [pc, #124]	; (800c5bc <dhcp_reboot+0x164>)
 800c540:	6979      	ldr	r1, [r7, #20]
 800c542:	f7fe fd01 	bl	800af48 <udp_sendto_if>
 800c546:	4603      	mov	r3, r0
 800c548:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c54a:	6978      	ldr	r0, [r7, #20]
 800c54c:	f7f8 fdf6 	bl	800513c <pbuf_free>
 800c550:	e001      	b.n	800c556 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c552:	23ff      	movs	r3, #255	; 0xff
 800c554:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	799b      	ldrb	r3, [r3, #6]
 800c55a:	2bff      	cmp	r3, #255	; 0xff
 800c55c:	d005      	beq.n	800c56a <dhcp_reboot+0x112>
    dhcp->tries++;
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	799b      	ldrb	r3, [r3, #6]
 800c562:	3301      	adds	r3, #1
 800c564:	b2da      	uxtb	r2, r3
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	799b      	ldrb	r3, [r3, #6]
 800c56e:	2b09      	cmp	r3, #9
 800c570:	d80a      	bhi.n	800c588 <dhcp_reboot+0x130>
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	799b      	ldrb	r3, [r3, #6]
 800c576:	b29b      	uxth	r3, r3
 800c578:	461a      	mov	r2, r3
 800c57a:	0152      	lsls	r2, r2, #5
 800c57c:	1ad2      	subs	r2, r2, r3
 800c57e:	0092      	lsls	r2, r2, #2
 800c580:	4413      	add	r3, r2
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	b29b      	uxth	r3, r3
 800c586:	e001      	b.n	800c58c <dhcp_reboot+0x134>
 800c588:	f242 7310 	movw	r3, #10000	; 0x2710
 800c58c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c58e:	89fb      	ldrh	r3, [r7, #14]
 800c590:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c594:	4a0a      	ldr	r2, [pc, #40]	; (800c5c0 <dhcp_reboot+0x168>)
 800c596:	fb82 1203 	smull	r1, r2, r2, r3
 800c59a:	1152      	asrs	r2, r2, #5
 800c59c:	17db      	asrs	r3, r3, #31
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c5a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3720      	adds	r7, #32
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	2000002c 	.word	0x2000002c
 800c5b8:	2000a4a0 	.word	0x2000a4a0
 800c5bc:	080136f0 	.word	0x080136f0
 800c5c0:	10624dd3 	.word	0x10624dd3

0800c5c4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800c5c4:	b5b0      	push	{r4, r5, r7, lr}
 800c5c6:	b08a      	sub	sp, #40	; 0x28
 800c5c8:	af02      	add	r7, sp, #8
 800c5ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f000 8084 	beq.w	800c6e2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	795b      	ldrb	r3, [r3, #5]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f000 8081 	beq.w	800c6e6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	2200      	movs	r2, #0
 800c600:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	2200      	movs	r2, #0
 800c606:	631a      	str	r2, [r3, #48]	; 0x30
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	2200      	movs	r2, #0
 800c61c:	829a      	strh	r2, [r3, #20]
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	8a9a      	ldrh	r2, [r3, #20]
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	825a      	strh	r2, [r3, #18]
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	8a5a      	ldrh	r2, [r3, #18]
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	821a      	strh	r2, [r3, #16]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	8a1a      	ldrh	r2, [r3, #16]
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fdee 	bl	800d218 <dhcp_supplied_address>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d03b      	beq.n	800c6ba <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800c642:	f107 030e 	add.w	r3, r7, #14
 800c646:	2207      	movs	r2, #7
 800c648:	69f9      	ldr	r1, [r7, #28]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fce0 	bl	800d010 <dhcp_create_msg>
 800c650:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d030      	beq.n	800c6ba <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c65e:	89f8      	ldrh	r0, [r7, #14]
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c666:	2304      	movs	r3, #4
 800c668:	2236      	movs	r2, #54	; 0x36
 800c66a:	f000 f85f 	bl	800c72c <dhcp_option>
 800c66e:	4603      	mov	r3, r0
 800c670:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800c672:	89fc      	ldrh	r4, [r7, #14]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7f7 fa08 	bl	8003a92 <lwip_htonl>
 800c682:	4603      	mov	r3, r0
 800c684:	461a      	mov	r2, r3
 800c686:	4629      	mov	r1, r5
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 f8db 	bl	800c844 <dhcp_option_long>
 800c68e:	4603      	mov	r3, r0
 800c690:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c692:	89f8      	ldrh	r0, [r7, #14]
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	33f0      	adds	r3, #240	; 0xf0
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	4619      	mov	r1, r3
 800c69c:	f000 fd8e 	bl	800d1bc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c6a0:	4b13      	ldr	r3, [pc, #76]	; (800c6f0 <dhcp_release_and_stop+0x12c>)
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	f107 0210 	add.w	r2, r7, #16
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	2343      	movs	r3, #67	; 0x43
 800c6ae:	69b9      	ldr	r1, [r7, #24]
 800c6b0:	f7fe fc4a 	bl	800af48 <udp_sendto_if>
      pbuf_free(p_out);
 800c6b4:	69b8      	ldr	r0, [r7, #24]
 800c6b6:	f7f8 fd41 	bl	800513c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c6ba:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <dhcp_release_and_stop+0x130>)
 800c6bc:	4a0d      	ldr	r2, [pc, #52]	; (800c6f4 <dhcp_release_and_stop+0x130>)
 800c6be:	490d      	ldr	r1, [pc, #52]	; (800c6f4 <dhcp_release_and_stop+0x130>)
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7f8 f85b 	bl	800477c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	69f8      	ldr	r0, [r7, #28]
 800c6ca:	f000 f815 	bl	800c6f8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	791b      	ldrb	r3, [r3, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d008      	beq.n	800c6e8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c6d6:	f7fe ff83 	bl	800b5e0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	711a      	strb	r2, [r3, #4]
 800c6e0:	e002      	b.n	800c6e8 <dhcp_release_and_stop+0x124>
    return;
 800c6e2:	bf00      	nop
 800c6e4:	e000      	b.n	800c6e8 <dhcp_release_and_stop+0x124>
    return;
 800c6e6:	bf00      	nop
  }
}
 800c6e8:	3720      	adds	r7, #32
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	2000a4a0 	.word	0x2000a4a0
 800c6f4:	080136ec 	.word	0x080136ec

0800c6f8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	460b      	mov	r3, r1
 800c702:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	795b      	ldrb	r3, [r3, #5]
 800c708:	78fa      	ldrb	r2, [r7, #3]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d008      	beq.n	800c720 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	78fa      	ldrb	r2, [r7, #3]
 800c712:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	811a      	strh	r2, [r3, #8]
  }
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6039      	str	r1, [r7, #0]
 800c734:	4611      	mov	r1, r2
 800c736:	461a      	mov	r2, r3
 800c738:	4603      	mov	r3, r0
 800c73a:	80fb      	strh	r3, [r7, #6]
 800c73c:	460b      	mov	r3, r1
 800c73e:	717b      	strb	r3, [r7, #5]
 800c740:	4613      	mov	r3, r2
 800c742:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c744:	88fa      	ldrh	r2, [r7, #6]
 800c746:	793b      	ldrb	r3, [r7, #4]
 800c748:	4413      	add	r3, r2
 800c74a:	3302      	adds	r3, #2
 800c74c:	2b44      	cmp	r3, #68	; 0x44
 800c74e:	d906      	bls.n	800c75e <dhcp_option+0x32>
 800c750:	4b0d      	ldr	r3, [pc, #52]	; (800c788 <dhcp_option+0x5c>)
 800c752:	f240 529a 	movw	r2, #1434	; 0x59a
 800c756:	490d      	ldr	r1, [pc, #52]	; (800c78c <dhcp_option+0x60>)
 800c758:	480d      	ldr	r0, [pc, #52]	; (800c790 <dhcp_option+0x64>)
 800c75a:	f003 f96b 	bl	800fa34 <iprintf>
  options[options_out_len++] = option_type;
 800c75e:	88fb      	ldrh	r3, [r7, #6]
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	80fa      	strh	r2, [r7, #6]
 800c764:	461a      	mov	r2, r3
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	4413      	add	r3, r2
 800c76a:	797a      	ldrb	r2, [r7, #5]
 800c76c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800c76e:	88fb      	ldrh	r3, [r7, #6]
 800c770:	1c5a      	adds	r2, r3, #1
 800c772:	80fa      	strh	r2, [r7, #6]
 800c774:	461a      	mov	r2, r3
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	4413      	add	r3, r2
 800c77a:	793a      	ldrb	r2, [r7, #4]
 800c77c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c77e:	88fb      	ldrh	r3, [r7, #6]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	08012b8c 	.word	0x08012b8c
 800c78c:	08012d20 	.word	0x08012d20
 800c790:	08012bec 	.word	0x08012bec

0800c794 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	6039      	str	r1, [r7, #0]
 800c79e:	80fb      	strh	r3, [r7, #6]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c7a4:	88fb      	ldrh	r3, [r7, #6]
 800c7a6:	2b43      	cmp	r3, #67	; 0x43
 800c7a8:	d906      	bls.n	800c7b8 <dhcp_option_byte+0x24>
 800c7aa:	4b0a      	ldr	r3, [pc, #40]	; (800c7d4 <dhcp_option_byte+0x40>)
 800c7ac:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800c7b0:	4909      	ldr	r1, [pc, #36]	; (800c7d8 <dhcp_option_byte+0x44>)
 800c7b2:	480a      	ldr	r0, [pc, #40]	; (800c7dc <dhcp_option_byte+0x48>)
 800c7b4:	f003 f93e 	bl	800fa34 <iprintf>
  options[options_out_len++] = value;
 800c7b8:	88fb      	ldrh	r3, [r7, #6]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	80fa      	strh	r2, [r7, #6]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	797a      	ldrb	r2, [r7, #5]
 800c7c6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c7c8:	88fb      	ldrh	r3, [r7, #6]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08012b8c 	.word	0x08012b8c
 800c7d8:	08012d64 	.word	0x08012d64
 800c7dc:	08012bec 	.word	0x08012bec

0800c7e0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	6039      	str	r1, [r7, #0]
 800c7ea:	80fb      	strh	r3, [r7, #6]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c7f0:	88fb      	ldrh	r3, [r7, #6]
 800c7f2:	3302      	adds	r3, #2
 800c7f4:	2b44      	cmp	r3, #68	; 0x44
 800c7f6:	d906      	bls.n	800c806 <dhcp_option_short+0x26>
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	; (800c838 <dhcp_option_short+0x58>)
 800c7fa:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800c7fe:	490f      	ldr	r1, [pc, #60]	; (800c83c <dhcp_option_short+0x5c>)
 800c800:	480f      	ldr	r0, [pc, #60]	; (800c840 <dhcp_option_short+0x60>)
 800c802:	f003 f917 	bl	800fa34 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c806:	88bb      	ldrh	r3, [r7, #4]
 800c808:	0a1b      	lsrs	r3, r3, #8
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	88fb      	ldrh	r3, [r7, #6]
 800c80e:	1c59      	adds	r1, r3, #1
 800c810:	80f9      	strh	r1, [r7, #6]
 800c812:	4619      	mov	r1, r3
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	440b      	add	r3, r1
 800c818:	b2d2      	uxtb	r2, r2
 800c81a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c81c:	88fb      	ldrh	r3, [r7, #6]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	80fa      	strh	r2, [r7, #6]
 800c822:	461a      	mov	r2, r3
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	4413      	add	r3, r2
 800c828:	88ba      	ldrh	r2, [r7, #4]
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c82e:	88fb      	ldrh	r3, [r7, #6]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	08012b8c 	.word	0x08012b8c
 800c83c:	08012d9c 	.word	0x08012d9c
 800c840:	08012bec 	.word	0x08012bec

0800c844 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c852:	89fb      	ldrh	r3, [r7, #14]
 800c854:	3304      	adds	r3, #4
 800c856:	2b44      	cmp	r3, #68	; 0x44
 800c858:	d906      	bls.n	800c868 <dhcp_option_long+0x24>
 800c85a:	4b19      	ldr	r3, [pc, #100]	; (800c8c0 <dhcp_option_long+0x7c>)
 800c85c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800c860:	4918      	ldr	r1, [pc, #96]	; (800c8c4 <dhcp_option_long+0x80>)
 800c862:	4819      	ldr	r0, [pc, #100]	; (800c8c8 <dhcp_option_long+0x84>)
 800c864:	f003 f8e6 	bl	800fa34 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	0e1a      	lsrs	r2, r3, #24
 800c86c:	89fb      	ldrh	r3, [r7, #14]
 800c86e:	1c59      	adds	r1, r3, #1
 800c870:	81f9      	strh	r1, [r7, #14]
 800c872:	4619      	mov	r1, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	440b      	add	r3, r1
 800c878:	b2d2      	uxtb	r2, r2
 800c87a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	0c1a      	lsrs	r2, r3, #16
 800c880:	89fb      	ldrh	r3, [r7, #14]
 800c882:	1c59      	adds	r1, r3, #1
 800c884:	81f9      	strh	r1, [r7, #14]
 800c886:	4619      	mov	r1, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	440b      	add	r3, r1
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	0a1a      	lsrs	r2, r3, #8
 800c894:	89fb      	ldrh	r3, [r7, #14]
 800c896:	1c59      	adds	r1, r3, #1
 800c898:	81f9      	strh	r1, [r7, #14]
 800c89a:	4619      	mov	r1, r3
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	440b      	add	r3, r1
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c8a4:	89fb      	ldrh	r3, [r7, #14]
 800c8a6:	1c5a      	adds	r2, r3, #1
 800c8a8:	81fa      	strh	r2, [r7, #14]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	b2d2      	uxtb	r2, r2
 800c8b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c8b6:	89fb      	ldrh	r3, [r7, #14]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	08012b8c 	.word	0x08012b8c
 800c8c4:	08012dd8 	.word	0x08012dd8
 800c8c8:	08012bec 	.word	0x08012bec

0800c8cc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b090      	sub	sp, #64	; 0x40
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800c8de:	2208      	movs	r2, #8
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	48b5      	ldr	r0, [pc, #724]	; (800cbb8 <dhcp_parse_reply+0x2ec>)
 800c8e4:	f003 f90b 	bl	800fafe <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	895b      	ldrh	r3, [r3, #10]
 800c8ec:	2b2b      	cmp	r3, #43	; 0x2b
 800c8ee:	d802      	bhi.n	800c8f6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800c8f0:	f06f 0301 	mvn.w	r3, #1
 800c8f4:	e2a7      	b.n	800ce46 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800c8fc:	23f0      	movs	r3, #240	; 0xf0
 800c8fe:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	891b      	ldrh	r3, [r3, #8]
 800c904:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c90a:	e00c      	b.n	800c926 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800c90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90e:	895b      	ldrh	r3, [r3, #10]
 800c910:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	895b      	ldrh	r3, [r3, #10]
 800c91a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800c920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d004      	beq.n	800c936 <dhcp_parse_reply+0x6a>
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	895b      	ldrh	r3, [r3, #10]
 800c930:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c932:	429a      	cmp	r2, r3
 800c934:	d2ea      	bcs.n	800c90c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d102      	bne.n	800c942 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800c93c:	f06f 0301 	mvn.w	r3, #1
 800c940:	e281      	b.n	800ce46 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800c942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c944:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800c946:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c948:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800c950:	e239      	b.n	800cdc6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800c952:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c956:	4413      	add	r3, r2
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800c962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c966:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800c968:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c96a:	3302      	adds	r3, #2
 800c96c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800c96e:	8bfa      	ldrh	r2, [r7, #30]
 800c970:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c972:	429a      	cmp	r2, r3
 800c974:	d202      	bcs.n	800c97c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800c976:	f06f 0301 	mvn.w	r3, #1
 800c97a:	e264      	b.n	800ce46 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800c97c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c97e:	3301      	adds	r3, #1
 800c980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c982:	8952      	ldrh	r2, [r2, #10]
 800c984:	4293      	cmp	r3, r2
 800c986:	da07      	bge.n	800c998 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800c988:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c98a:	3301      	adds	r3, #1
 800c98c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c98e:	4413      	add	r3, r2
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c996:	e00b      	b.n	800c9b0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d004      	beq.n	800c9aa <dhcp_parse_reply+0xde>
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	e000      	b.n	800c9ac <dhcp_parse_reply+0xe0>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800c9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800c9b8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ba:	2b3b      	cmp	r3, #59	; 0x3b
 800c9bc:	f200 812c 	bhi.w	800cc18 <dhcp_parse_reply+0x34c>
 800c9c0:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <dhcp_parse_reply+0xfc>)
 800c9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c6:	bf00      	nop
 800c9c8:	0800cab9 	.word	0x0800cab9
 800c9cc:	0800cac9 	.word	0x0800cac9
 800c9d0:	0800cc19 	.word	0x0800cc19
 800c9d4:	0800caeb 	.word	0x0800caeb
 800c9d8:	0800cc19 	.word	0x0800cc19
 800c9dc:	0800cc19 	.word	0x0800cc19
 800c9e0:	0800cc19 	.word	0x0800cc19
 800c9e4:	0800cc19 	.word	0x0800cc19
 800c9e8:	0800cc19 	.word	0x0800cc19
 800c9ec:	0800cc19 	.word	0x0800cc19
 800c9f0:	0800cc19 	.word	0x0800cc19
 800c9f4:	0800cc19 	.word	0x0800cc19
 800c9f8:	0800cc19 	.word	0x0800cc19
 800c9fc:	0800cc19 	.word	0x0800cc19
 800ca00:	0800cc19 	.word	0x0800cc19
 800ca04:	0800cc19 	.word	0x0800cc19
 800ca08:	0800cc19 	.word	0x0800cc19
 800ca0c:	0800cc19 	.word	0x0800cc19
 800ca10:	0800cc19 	.word	0x0800cc19
 800ca14:	0800cc19 	.word	0x0800cc19
 800ca18:	0800cc19 	.word	0x0800cc19
 800ca1c:	0800cc19 	.word	0x0800cc19
 800ca20:	0800cc19 	.word	0x0800cc19
 800ca24:	0800cc19 	.word	0x0800cc19
 800ca28:	0800cc19 	.word	0x0800cc19
 800ca2c:	0800cc19 	.word	0x0800cc19
 800ca30:	0800cc19 	.word	0x0800cc19
 800ca34:	0800cc19 	.word	0x0800cc19
 800ca38:	0800cc19 	.word	0x0800cc19
 800ca3c:	0800cc19 	.word	0x0800cc19
 800ca40:	0800cc19 	.word	0x0800cc19
 800ca44:	0800cc19 	.word	0x0800cc19
 800ca48:	0800cc19 	.word	0x0800cc19
 800ca4c:	0800cc19 	.word	0x0800cc19
 800ca50:	0800cc19 	.word	0x0800cc19
 800ca54:	0800cc19 	.word	0x0800cc19
 800ca58:	0800cc19 	.word	0x0800cc19
 800ca5c:	0800cc19 	.word	0x0800cc19
 800ca60:	0800cc19 	.word	0x0800cc19
 800ca64:	0800cc19 	.word	0x0800cc19
 800ca68:	0800cc19 	.word	0x0800cc19
 800ca6c:	0800cc19 	.word	0x0800cc19
 800ca70:	0800cc19 	.word	0x0800cc19
 800ca74:	0800cc19 	.word	0x0800cc19
 800ca78:	0800cc19 	.word	0x0800cc19
 800ca7c:	0800cc19 	.word	0x0800cc19
 800ca80:	0800cc19 	.word	0x0800cc19
 800ca84:	0800cc19 	.word	0x0800cc19
 800ca88:	0800cc19 	.word	0x0800cc19
 800ca8c:	0800cc19 	.word	0x0800cc19
 800ca90:	0800cc19 	.word	0x0800cc19
 800ca94:	0800cb17 	.word	0x0800cb17
 800ca98:	0800cb39 	.word	0x0800cb39
 800ca9c:	0800cb75 	.word	0x0800cb75
 800caa0:	0800cb97 	.word	0x0800cb97
 800caa4:	0800cc19 	.word	0x0800cc19
 800caa8:	0800cc19 	.word	0x0800cc19
 800caac:	0800cc19 	.word	0x0800cc19
 800cab0:	0800cbd5 	.word	0x0800cbd5
 800cab4:	0800cbf7 	.word	0x0800cbf7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cabe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800cac6:	e0ab      	b.n	800cc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d009      	beq.n	800cae4 <dhcp_parse_reply+0x218>
 800cad0:	4b3a      	ldr	r3, [pc, #232]	; (800cbbc <dhcp_parse_reply+0x2f0>)
 800cad2:	f240 622e 	movw	r2, #1582	; 0x62e
 800cad6:	493a      	ldr	r1, [pc, #232]	; (800cbc0 <dhcp_parse_reply+0x2f4>)
 800cad8:	483a      	ldr	r0, [pc, #232]	; (800cbc4 <dhcp_parse_reply+0x2f8>)
 800cada:	f002 ffab 	bl	800fa34 <iprintf>
 800cade:	f06f 0305 	mvn.w	r3, #5
 800cae2:	e1b0      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800cae4:	2306      	movs	r3, #6
 800cae6:	623b      	str	r3, [r7, #32]
        break;
 800cae8:	e09a      	b.n	800cc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800caea:	2304      	movs	r3, #4
 800caec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800caf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800caf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d209      	bcs.n	800cb10 <dhcp_parse_reply+0x244>
 800cafc:	4b2f      	ldr	r3, [pc, #188]	; (800cbbc <dhcp_parse_reply+0x2f0>)
 800cafe:	f240 6233 	movw	r2, #1587	; 0x633
 800cb02:	4931      	ldr	r1, [pc, #196]	; (800cbc8 <dhcp_parse_reply+0x2fc>)
 800cb04:	482f      	ldr	r0, [pc, #188]	; (800cbc4 <dhcp_parse_reply+0x2f8>)
 800cb06:	f002 ff95 	bl	800fa34 <iprintf>
 800cb0a:	f06f 0305 	mvn.w	r3, #5
 800cb0e:	e19a      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800cb10:	2307      	movs	r3, #7
 800cb12:	623b      	str	r3, [r7, #32]
        break;
 800cb14:	e084      	b.n	800cc20 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cb16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb1a:	2b04      	cmp	r3, #4
 800cb1c:	d009      	beq.n	800cb32 <dhcp_parse_reply+0x266>
 800cb1e:	4b27      	ldr	r3, [pc, #156]	; (800cbbc <dhcp_parse_reply+0x2f0>)
 800cb20:	f240 6241 	movw	r2, #1601	; 0x641
 800cb24:	4926      	ldr	r1, [pc, #152]	; (800cbc0 <dhcp_parse_reply+0x2f4>)
 800cb26:	4827      	ldr	r0, [pc, #156]	; (800cbc4 <dhcp_parse_reply+0x2f8>)
 800cb28:	f002 ff84 	bl	800fa34 <iprintf>
 800cb2c:	f06f 0305 	mvn.w	r3, #5
 800cb30:	e189      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800cb32:	2303      	movs	r3, #3
 800cb34:	623b      	str	r3, [r7, #32]
        break;
 800cb36:	e073      	b.n	800cc20 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800cb38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d009      	beq.n	800cb54 <dhcp_parse_reply+0x288>
 800cb40:	4b1e      	ldr	r3, [pc, #120]	; (800cbbc <dhcp_parse_reply+0x2f0>)
 800cb42:	f240 624f 	movw	r2, #1615	; 0x64f
 800cb46:	4921      	ldr	r1, [pc, #132]	; (800cbcc <dhcp_parse_reply+0x300>)
 800cb48:	481e      	ldr	r0, [pc, #120]	; (800cbc4 <dhcp_parse_reply+0x2f8>)
 800cb4a:	f002 ff73 	bl	800fa34 <iprintf>
 800cb4e:	f06f 0305 	mvn.w	r3, #5
 800cb52:	e178      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800cb54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb56:	2bf0      	cmp	r3, #240	; 0xf0
 800cb58:	d009      	beq.n	800cb6e <dhcp_parse_reply+0x2a2>
 800cb5a:	4b18      	ldr	r3, [pc, #96]	; (800cbbc <dhcp_parse_reply+0x2f0>)
 800cb5c:	f240 6251 	movw	r2, #1617	; 0x651
 800cb60:	491b      	ldr	r1, [pc, #108]	; (800cbd0 <dhcp_parse_reply+0x304>)
 800cb62:	4818      	ldr	r0, [pc, #96]	; (800cbc4 <dhcp_parse_reply+0x2f8>)
 800cb64:	f002 ff66 	bl	800fa34 <iprintf>
 800cb68:	f06f 0305 	mvn.w	r3, #5
 800cb6c:	e16b      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	623b      	str	r3, [r7, #32]
        break;
 800cb72:	e055      	b.n	800cc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800cb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d009      	beq.n	800cb90 <dhcp_parse_reply+0x2c4>
 800cb7c:	4b0f      	ldr	r3, [pc, #60]	; (800cbbc <dhcp_parse_reply+0x2f0>)
 800cb7e:	f240 6255 	movw	r2, #1621	; 0x655
 800cb82:	4912      	ldr	r1, [pc, #72]	; (800cbcc <dhcp_parse_reply+0x300>)
 800cb84:	480f      	ldr	r0, [pc, #60]	; (800cbc4 <dhcp_parse_reply+0x2f8>)
 800cb86:	f002 ff55 	bl	800fa34 <iprintf>
 800cb8a:	f06f 0305 	mvn.w	r3, #5
 800cb8e:	e15a      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800cb90:	2301      	movs	r3, #1
 800cb92:	623b      	str	r3, [r7, #32]
        break;
 800cb94:	e044      	b.n	800cc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cb96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb9a:	2b04      	cmp	r3, #4
 800cb9c:	d009      	beq.n	800cbb2 <dhcp_parse_reply+0x2e6>
 800cb9e:	4b07      	ldr	r3, [pc, #28]	; (800cbbc <dhcp_parse_reply+0x2f0>)
 800cba0:	f240 6259 	movw	r2, #1625	; 0x659
 800cba4:	4906      	ldr	r1, [pc, #24]	; (800cbc0 <dhcp_parse_reply+0x2f4>)
 800cba6:	4807      	ldr	r0, [pc, #28]	; (800cbc4 <dhcp_parse_reply+0x2f8>)
 800cba8:	f002 ff44 	bl	800fa34 <iprintf>
 800cbac:	f06f 0305 	mvn.w	r3, #5
 800cbb0:	e149      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	623b      	str	r3, [r7, #32]
        break;
 800cbb6:	e033      	b.n	800cc20 <dhcp_parse_reply+0x354>
 800cbb8:	2000a498 	.word	0x2000a498
 800cbbc:	08012b8c 	.word	0x08012b8c
 800cbc0:	08012e14 	.word	0x08012e14
 800cbc4:	08012bec 	.word	0x08012bec
 800cbc8:	08012e20 	.word	0x08012e20
 800cbcc:	08012e34 	.word	0x08012e34
 800cbd0:	08012e40 	.word	0x08012e40
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd8:	2b04      	cmp	r3, #4
 800cbda:	d009      	beq.n	800cbf0 <dhcp_parse_reply+0x324>
 800cbdc:	4b9c      	ldr	r3, [pc, #624]	; (800ce50 <dhcp_parse_reply+0x584>)
 800cbde:	f240 625d 	movw	r2, #1629	; 0x65d
 800cbe2:	499c      	ldr	r1, [pc, #624]	; (800ce54 <dhcp_parse_reply+0x588>)
 800cbe4:	489c      	ldr	r0, [pc, #624]	; (800ce58 <dhcp_parse_reply+0x58c>)
 800cbe6:	f002 ff25 	bl	800fa34 <iprintf>
 800cbea:	f06f 0305 	mvn.w	r3, #5
 800cbee:	e12a      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800cbf0:	2304      	movs	r3, #4
 800cbf2:	623b      	str	r3, [r7, #32]
        break;
 800cbf4:	e014      	b.n	800cc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	d009      	beq.n	800cc12 <dhcp_parse_reply+0x346>
 800cbfe:	4b94      	ldr	r3, [pc, #592]	; (800ce50 <dhcp_parse_reply+0x584>)
 800cc00:	f240 6261 	movw	r2, #1633	; 0x661
 800cc04:	4993      	ldr	r1, [pc, #588]	; (800ce54 <dhcp_parse_reply+0x588>)
 800cc06:	4894      	ldr	r0, [pc, #592]	; (800ce58 <dhcp_parse_reply+0x58c>)
 800cc08:	f002 ff14 	bl	800fa34 <iprintf>
 800cc0c:	f06f 0305 	mvn.w	r3, #5
 800cc10:	e119      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800cc12:	2305      	movs	r3, #5
 800cc14:	623b      	str	r3, [r7, #32]
        break;
 800cc16:	e003      	b.n	800cc20 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800cc1e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800cc20:	7dfb      	ldrb	r3, [r7, #23]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d103      	bne.n	800cc2e <dhcp_parse_reply+0x362>
      offset++;
 800cc26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc28:	3301      	adds	r3, #1
 800cc2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800cc2c:	e0a1      	b.n	800cd72 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800cc2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cc30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc34:	4413      	add	r3, r2
 800cc36:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	dd02      	ble.n	800cc44 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800cc3e:	f06f 0301 	mvn.w	r3, #1
 800cc42:	e100      	b.n	800ce46 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800cc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc4c:	4413      	add	r3, r2
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	3302      	adds	r3, #2
 800cc52:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800cc54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f000 808a 	beq.w	800cd72 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	db02      	blt.n	800cc6e <dhcp_parse_reply+0x3a2>
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	2b07      	cmp	r3, #7
 800cc6c:	dd06      	ble.n	800cc7c <dhcp_parse_reply+0x3b0>
 800cc6e:	4b78      	ldr	r3, [pc, #480]	; (800ce50 <dhcp_parse_reply+0x584>)
 800cc70:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800cc74:	4979      	ldr	r1, [pc, #484]	; (800ce5c <dhcp_parse_reply+0x590>)
 800cc76:	4878      	ldr	r0, [pc, #480]	; (800ce58 <dhcp_parse_reply+0x58c>)
 800cc78:	f002 fedc 	bl	800fa34 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800cc7c:	4a78      	ldr	r2, [pc, #480]	; (800ce60 <dhcp_parse_reply+0x594>)
 800cc7e:	6a3b      	ldr	r3, [r7, #32]
 800cc80:	4413      	add	r3, r2
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d174      	bne.n	800cd72 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800cc88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	bf28      	it	cs
 800cc90:	2304      	movcs	r3, #4
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800cc96:	8bfb      	ldrh	r3, [r7, #30]
 800cc98:	8aba      	ldrh	r2, [r7, #20]
 800cc9a:	f107 0108 	add.w	r1, r7, #8
 800cc9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cca0:	f7f8 fc46 	bl	8005530 <pbuf_copy_partial>
 800cca4:	4603      	mov	r3, r0
 800cca6:	461a      	mov	r2, r3
 800cca8:	8abb      	ldrh	r3, [r7, #20]
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d002      	beq.n	800ccb4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800ccae:	f06f 0301 	mvn.w	r3, #1
 800ccb2:	e0c8      	b.n	800ce46 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800ccb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d933      	bls.n	800cd24 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800ccbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccc0:	f003 0303 	and.w	r3, r3, #3
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d009      	beq.n	800ccde <dhcp_parse_reply+0x412>
 800ccca:	4b61      	ldr	r3, [pc, #388]	; (800ce50 <dhcp_parse_reply+0x584>)
 800cccc:	f240 6281 	movw	r2, #1665	; 0x681
 800ccd0:	4964      	ldr	r1, [pc, #400]	; (800ce64 <dhcp_parse_reply+0x598>)
 800ccd2:	4861      	ldr	r0, [pc, #388]	; (800ce58 <dhcp_parse_reply+0x58c>)
 800ccd4:	f002 feae 	bl	800fa34 <iprintf>
 800ccd8:	f06f 0305 	mvn.w	r3, #5
 800ccdc:	e0b3      	b.n	800ce46 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800ccde:	4a60      	ldr	r2, [pc, #384]	; (800ce60 <dhcp_parse_reply+0x594>)
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	4413      	add	r3, r2
 800cce4:	2201      	movs	r2, #1
 800cce6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7f6 fed1 	bl	8003a92 <lwip_htonl>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	495d      	ldr	r1, [pc, #372]	; (800ce68 <dhcp_parse_reply+0x59c>)
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800ccfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccfe:	3b04      	subs	r3, #4
 800cd00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800cd04:	8bfb      	ldrh	r3, [r7, #30]
 800cd06:	3304      	adds	r3, #4
 800cd08:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800cd0a:	8a7a      	ldrh	r2, [r7, #18]
 800cd0c:	8bfb      	ldrh	r3, [r7, #30]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d202      	bcs.n	800cd18 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800cd12:	f06f 0301 	mvn.w	r3, #1
 800cd16:	e096      	b.n	800ce46 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800cd18:	8a7b      	ldrh	r3, [r7, #18]
 800cd1a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800cd22:	e79e      	b.n	800cc62 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800cd24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd28:	2b04      	cmp	r3, #4
 800cd2a:	d106      	bne.n	800cd3a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f6 feaf 	bl	8003a92 <lwip_htonl>
 800cd34:	4603      	mov	r3, r0
 800cd36:	60bb      	str	r3, [r7, #8]
 800cd38:	e011      	b.n	800cd5e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800cd3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d009      	beq.n	800cd56 <dhcp_parse_reply+0x48a>
 800cd42:	4b43      	ldr	r3, [pc, #268]	; (800ce50 <dhcp_parse_reply+0x584>)
 800cd44:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800cd48:	4948      	ldr	r1, [pc, #288]	; (800ce6c <dhcp_parse_reply+0x5a0>)
 800cd4a:	4843      	ldr	r0, [pc, #268]	; (800ce58 <dhcp_parse_reply+0x58c>)
 800cd4c:	f002 fe72 	bl	800fa34 <iprintf>
 800cd50:	f06f 0305 	mvn.w	r3, #5
 800cd54:	e077      	b.n	800ce46 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800cd56:	f107 0308 	add.w	r3, r7, #8
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800cd5e:	4a40      	ldr	r2, [pc, #256]	; (800ce60 <dhcp_parse_reply+0x594>)
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	4413      	add	r3, r2
 800cd64:	2201      	movs	r2, #1
 800cd66:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	493f      	ldr	r1, [pc, #252]	; (800ce68 <dhcp_parse_reply+0x59c>)
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	895b      	ldrh	r3, [r3, #10]
 800cd76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d324      	bcc.n	800cdc6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	895b      	ldrh	r3, [r3, #10]
 800cd80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	895b      	ldrh	r3, [r3, #10]
 800cd8a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800cd90:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d213      	bcs.n	800cdc0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800cd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d109      	bne.n	800cdb8 <dhcp_parse_reply+0x4ec>
 800cda4:	4b2a      	ldr	r3, [pc, #168]	; (800ce50 <dhcp_parse_reply+0x584>)
 800cda6:	f240 629d 	movw	r2, #1693	; 0x69d
 800cdaa:	4931      	ldr	r1, [pc, #196]	; (800ce70 <dhcp_parse_reply+0x5a4>)
 800cdac:	482a      	ldr	r0, [pc, #168]	; (800ce58 <dhcp_parse_reply+0x58c>)
 800cdae:	f002 fe41 	bl	800fa34 <iprintf>
 800cdb2:	f06f 0305 	mvn.w	r3, #5
 800cdb6:	e046      	b.n	800ce46 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdbe:	e002      	b.n	800cdc6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800cdc0:	f06f 0301 	mvn.w	r3, #1
 800cdc4:	e03f      	b.n	800ce46 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00a      	beq.n	800cde2 <dhcp_parse_reply+0x516>
 800cdcc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cdce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d206      	bcs.n	800cde2 <dhcp_parse_reply+0x516>
 800cdd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cdd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdd8:	4413      	add	r3, r2
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2bff      	cmp	r3, #255	; 0xff
 800cdde:	f47f adb8 	bne.w	800c952 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800cde2:	4b1f      	ldr	r3, [pc, #124]	; (800ce60 <dhcp_parse_reply+0x594>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d018      	beq.n	800ce1c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cdea:	4b1f      	ldr	r3, [pc, #124]	; (800ce68 <dhcp_parse_reply+0x59c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cdf0:	4b1b      	ldr	r3, [pc, #108]	; (800ce60 <dhcp_parse_reply+0x594>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d102      	bne.n	800ce02 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce00:	e00c      	b.n	800ce1c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d102      	bne.n	800ce0e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce0c:	e006      	b.n	800ce1c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2b03      	cmp	r3, #3
 800ce12:	d103      	bne.n	800ce1c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800ce14:	2301      	movs	r3, #1
 800ce16:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d006      	beq.n	800ce30 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800ce26:	236c      	movs	r3, #108	; 0x6c
 800ce28:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ce2a:	23ec      	movs	r3, #236	; 0xec
 800ce2c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800ce2e:	e56a      	b.n	800c906 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800ce3a:	232c      	movs	r3, #44	; 0x2c
 800ce3c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800ce3e:	236c      	movs	r3, #108	; 0x6c
 800ce40:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800ce42:	e560      	b.n	800c906 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3740      	adds	r7, #64	; 0x40
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	08012b8c 	.word	0x08012b8c
 800ce54:	08012e14 	.word	0x08012e14
 800ce58:	08012bec 	.word	0x08012bec
 800ce5c:	08012e58 	.word	0x08012e58
 800ce60:	2000a498 	.word	0x2000a498
 800ce64:	08012e6c 	.word	0x08012e6c
 800ce68:	2000a478 	.word	0x2000a478
 800ce6c:	08012e84 	.word	0x08012e84
 800ce70:	08012e98 	.word	0x08012e98

0800ce74 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08a      	sub	sp, #40	; 0x28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800ce82:	4b60      	ldr	r3, [pc, #384]	; (800d004 <dhcp_recv+0x190>)
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 809d 	beq.w	800cfd6 <dhcp_recv+0x162>
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	791b      	ldrb	r3, [r3, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 8098 	beq.w	800cfd6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	895b      	ldrh	r3, [r3, #10]
 800ceaa:	2b2b      	cmp	r3, #43	; 0x2b
 800ceac:	f240 8095 	bls.w	800cfda <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	f040 8092 	bne.w	800cfde <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ceba:	2300      	movs	r3, #0
 800cebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cec0:	e012      	b.n	800cee8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	4413      	add	r3, r2
 800ceca:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800cece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ced2:	69b9      	ldr	r1, [r7, #24]
 800ced4:	440b      	add	r3, r1
 800ced6:	7f1b      	ldrb	r3, [r3, #28]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	f040 8082 	bne.w	800cfe2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cee2:	3301      	adds	r3, #1
 800cee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d203      	bcs.n	800cefe <dhcp_recv+0x8a>
 800cef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cefa:	2b05      	cmp	r3, #5
 800cefc:	d9e1      	bls.n	800cec2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7f6 fdc5 	bl	8003a92 <lwip_htonl>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d169      	bne.n	800cfe6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800cf12:	69f9      	ldr	r1, [r7, #28]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff fcd9 	bl	800c8cc <dhcp_parse_reply>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d164      	bne.n	800cfea <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800cf20:	4b39      	ldr	r3, [pc, #228]	; (800d008 <dhcp_recv+0x194>)
 800cf22:	785b      	ldrb	r3, [r3, #1]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d062      	beq.n	800cfee <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800cf2e:	4b37      	ldr	r3, [pc, #220]	; (800d00c <dhcp_recv+0x198>)
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800cf34:	7cfb      	ldrb	r3, [r7, #19]
 800cf36:	2b05      	cmp	r3, #5
 800cf38:	d12a      	bne.n	800cf90 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	795b      	ldrb	r3, [r3, #5]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d112      	bne.n	800cf68 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800cf42:	6979      	ldr	r1, [r7, #20]
 800cf44:	6a38      	ldr	r0, [r7, #32]
 800cf46:	f7fe fe17 	bl	800bb78 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf50:	f003 0308 	and.w	r3, r3, #8
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d003      	beq.n	800cf60 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800cf58:	6a38      	ldr	r0, [r7, #32]
 800cf5a:	f7fe fb85 	bl	800b668 <dhcp_check>
 800cf5e:	e049      	b.n	800cff4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800cf60:	6a38      	ldr	r0, [r7, #32]
 800cf62:	f7ff f867 	bl	800c034 <dhcp_bind>
 800cf66:	e045      	b.n	800cff4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	795b      	ldrb	r3, [r3, #5]
 800cf6c:	2b03      	cmp	r3, #3
 800cf6e:	d007      	beq.n	800cf80 <dhcp_recv+0x10c>
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	795b      	ldrb	r3, [r3, #5]
 800cf74:	2b04      	cmp	r3, #4
 800cf76:	d003      	beq.n	800cf80 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800cf7c:	2b05      	cmp	r3, #5
 800cf7e:	d139      	bne.n	800cff4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800cf80:	6979      	ldr	r1, [r7, #20]
 800cf82:	6a38      	ldr	r0, [r7, #32]
 800cf84:	f7fe fdf8 	bl	800bb78 <dhcp_handle_ack>
      dhcp_bind(netif);
 800cf88:	6a38      	ldr	r0, [r7, #32]
 800cf8a:	f7ff f853 	bl	800c034 <dhcp_bind>
 800cf8e:	e031      	b.n	800cff4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800cf90:	7cfb      	ldrb	r3, [r7, #19]
 800cf92:	2b06      	cmp	r3, #6
 800cf94:	d113      	bne.n	800cfbe <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d00b      	beq.n	800cfb6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	795b      	ldrb	r3, [r3, #5]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d007      	beq.n	800cfb6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800cfaa:	2b04      	cmp	r3, #4
 800cfac:	d003      	beq.n	800cfb6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	795b      	ldrb	r3, [r3, #5]
 800cfb2:	2b05      	cmp	r3, #5
 800cfb4:	d103      	bne.n	800cfbe <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800cfb6:	6a38      	ldr	r0, [r7, #32]
 800cfb8:	f7fe fb3c 	bl	800b634 <dhcp_handle_nak>
 800cfbc:	e01a      	b.n	800cff4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800cfbe:	7cfb      	ldrb	r3, [r7, #19]
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d116      	bne.n	800cff2 <dhcp_recv+0x17e>
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	795b      	ldrb	r3, [r3, #5]
 800cfc8:	2b06      	cmp	r3, #6
 800cfca:	d112      	bne.n	800cff2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800cfcc:	6979      	ldr	r1, [r7, #20]
 800cfce:	6a38      	ldr	r0, [r7, #32]
 800cfd0:	f7fe fb7e 	bl	800b6d0 <dhcp_handle_offer>
 800cfd4:	e00e      	b.n	800cff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800cfd6:	bf00      	nop
 800cfd8:	e00c      	b.n	800cff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800cfda:	bf00      	nop
 800cfdc:	e00a      	b.n	800cff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800cfde:	bf00      	nop
 800cfe0:	e008      	b.n	800cff4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800cfe2:	bf00      	nop
 800cfe4:	e006      	b.n	800cff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800cfe6:	bf00      	nop
 800cfe8:	e004      	b.n	800cff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800cfea:	bf00      	nop
 800cfec:	e002      	b.n	800cff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800cfee:	bf00      	nop
 800cff0:	e000      	b.n	800cff4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800cff2:	bf00      	nop
  pbuf_free(p);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7f8 f8a1 	bl	800513c <pbuf_free>
}
 800cffa:	bf00      	nop
 800cffc:	3728      	adds	r7, #40	; 0x28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	20004cc8 	.word	0x20004cc8
 800d008:	2000a498 	.word	0x2000a498
 800d00c:	2000a478 	.word	0x2000a478

0800d010 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	4613      	mov	r3, r2
 800d01e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d108      	bne.n	800d038 <dhcp_create_msg+0x28>
 800d026:	4b5f      	ldr	r3, [pc, #380]	; (800d1a4 <dhcp_create_msg+0x194>)
 800d028:	f240 7269 	movw	r2, #1897	; 0x769
 800d02c:	495e      	ldr	r1, [pc, #376]	; (800d1a8 <dhcp_create_msg+0x198>)
 800d02e:	485f      	ldr	r0, [pc, #380]	; (800d1ac <dhcp_create_msg+0x19c>)
 800d030:	f002 fd00 	bl	800fa34 <iprintf>
 800d034:	2300      	movs	r3, #0
 800d036:	e0b1      	b.n	800d19c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d108      	bne.n	800d050 <dhcp_create_msg+0x40>
 800d03e:	4b59      	ldr	r3, [pc, #356]	; (800d1a4 <dhcp_create_msg+0x194>)
 800d040:	f240 726a 	movw	r2, #1898	; 0x76a
 800d044:	495a      	ldr	r1, [pc, #360]	; (800d1b0 <dhcp_create_msg+0x1a0>)
 800d046:	4859      	ldr	r0, [pc, #356]	; (800d1ac <dhcp_create_msg+0x19c>)
 800d048:	f002 fcf4 	bl	800fa34 <iprintf>
 800d04c:	2300      	movs	r3, #0
 800d04e:	e0a5      	b.n	800d19c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800d050:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d054:	f44f 719a 	mov.w	r1, #308	; 0x134
 800d058:	2036      	movs	r0, #54	; 0x36
 800d05a:	f7f7 fd8b 	bl	8004b74 <pbuf_alloc>
 800d05e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800d066:	2300      	movs	r3, #0
 800d068:	e098      	b.n	800d19c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	895b      	ldrh	r3, [r3, #10]
 800d06e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800d072:	d206      	bcs.n	800d082 <dhcp_create_msg+0x72>
 800d074:	4b4b      	ldr	r3, [pc, #300]	; (800d1a4 <dhcp_create_msg+0x194>)
 800d076:	f240 7271 	movw	r2, #1905	; 0x771
 800d07a:	494e      	ldr	r1, [pc, #312]	; (800d1b4 <dhcp_create_msg+0x1a4>)
 800d07c:	484b      	ldr	r0, [pc, #300]	; (800d1ac <dhcp_create_msg+0x19c>)
 800d07e:	f002 fcd9 	bl	800fa34 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	2b03      	cmp	r3, #3
 800d086:	d103      	bne.n	800d090 <dhcp_create_msg+0x80>
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	795b      	ldrb	r3, [r3, #5]
 800d08c:	2b03      	cmp	r3, #3
 800d08e:	d10d      	bne.n	800d0ac <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	799b      	ldrb	r3, [r3, #6]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d105      	bne.n	800d0a4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800d098:	f002 fbcc 	bl	800f834 <rand>
 800d09c:	4603      	mov	r3, r0
 800d09e:	461a      	mov	r2, r3
 800d0a0:	4b45      	ldr	r3, [pc, #276]	; (800d1b8 <dhcp_create_msg+0x1a8>)
 800d0a2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800d0a4:	4b44      	ldr	r3, [pc, #272]	; (800d1b8 <dhcp_create_msg+0x1a8>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800d0b2:	f44f 729a 	mov.w	r2, #308	; 0x134
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	6978      	ldr	r0, [r7, #20]
 800d0ba:	f002 fd20 	bl	800fafe <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7f6 fcda 	bl	8003a92 <lwip_htonl>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d0e4:	79fb      	ldrb	r3, [r7, #7]
 800d0e6:	2b08      	cmp	r3, #8
 800d0e8:	d010      	beq.n	800d10c <dhcp_create_msg+0xfc>
 800d0ea:	79fb      	ldrb	r3, [r7, #7]
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d00d      	beq.n	800d10c <dhcp_create_msg+0xfc>
 800d0f0:	79fb      	ldrb	r3, [r7, #7]
 800d0f2:	2b07      	cmp	r3, #7
 800d0f4:	d00a      	beq.n	800d10c <dhcp_create_msg+0xfc>
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	d10c      	bne.n	800d116 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d100:	2b05      	cmp	r3, #5
 800d102:	d003      	beq.n	800d10c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	795b      	ldrb	r3, [r3, #5]
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d104      	bne.n	800d116 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	3304      	adds	r3, #4
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d116:	2300      	movs	r3, #0
 800d118:	83fb      	strh	r3, [r7, #30]
 800d11a:	e00c      	b.n	800d136 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800d11c:	8bfa      	ldrh	r2, [r7, #30]
 800d11e:	8bfb      	ldrh	r3, [r7, #30]
 800d120:	68f9      	ldr	r1, [r7, #12]
 800d122:	440a      	add	r2, r1
 800d124:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800d128:	697a      	ldr	r2, [r7, #20]
 800d12a:	4413      	add	r3, r2
 800d12c:	460a      	mov	r2, r1
 800d12e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d130:	8bfb      	ldrh	r3, [r7, #30]
 800d132:	3301      	adds	r3, #1
 800d134:	83fb      	strh	r3, [r7, #30]
 800d136:	8bfb      	ldrh	r3, [r7, #30]
 800d138:	2b05      	cmp	r3, #5
 800d13a:	d9ef      	bls.n	800d11c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	2200      	movs	r2, #0
 800d140:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d144:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800d148:	2200      	movs	r2, #0
 800d14a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800d14e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800d152:	2200      	movs	r2, #0
 800d154:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800d158:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800d15c:	2200      	movs	r2, #0
 800d15e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d162:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d16c:	2301      	movs	r3, #1
 800d16e:	2235      	movs	r2, #53	; 0x35
 800d170:	2000      	movs	r0, #0
 800d172:	f7ff fadb 	bl	800c72c <dhcp_option>
 800d176:	4603      	mov	r3, r0
 800d178:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d180:	79fa      	ldrb	r2, [r7, #7]
 800d182:	8a7b      	ldrh	r3, [r7, #18]
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff fb05 	bl	800c794 <dhcp_option_byte>
 800d18a:	4603      	mov	r3, r0
 800d18c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	8a7a      	ldrh	r2, [r7, #18]
 800d198:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800d19a:	69bb      	ldr	r3, [r7, #24]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3720      	adds	r7, #32
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	08012b8c 	.word	0x08012b8c
 800d1a8:	08012eac 	.word	0x08012eac
 800d1ac:	08012bec 	.word	0x08012bec
 800d1b0:	08012ecc 	.word	0x08012ecc
 800d1b4:	08012eec 	.word	0x08012eec
 800d1b8:	2000a4a8 	.word	0x2000a4a8

0800d1bc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800d1ca:	89fb      	ldrh	r3, [r7, #14]
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	81fa      	strh	r2, [r7, #14]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	22ff      	movs	r2, #255	; 0xff
 800d1d8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d1da:	e007      	b.n	800d1ec <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d1dc:	89fb      	ldrh	r3, [r7, #14]
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	81fa      	strh	r2, [r7, #14]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d1ec:	89fb      	ldrh	r3, [r7, #14]
 800d1ee:	2b43      	cmp	r3, #67	; 0x43
 800d1f0:	d904      	bls.n	800d1fc <dhcp_option_trailer+0x40>
 800d1f2:	89fb      	ldrh	r3, [r7, #14]
 800d1f4:	f003 0303 	and.w	r3, r3, #3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <dhcp_option_trailer+0x46>
 800d1fc:	89fb      	ldrh	r3, [r7, #14]
 800d1fe:	2b43      	cmp	r3, #67	; 0x43
 800d200:	d9ec      	bls.n	800d1dc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d202:	89fb      	ldrh	r3, [r7, #14]
 800d204:	33f0      	adds	r3, #240	; 0xf0
 800d206:	b29b      	uxth	r3, r3
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7f7 fe10 	bl	8004e30 <pbuf_realloc>
}
 800d210:	bf00      	nop
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d017      	beq.n	800d256 <dhcp_supplied_address+0x3e>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d013      	beq.n	800d256 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d232:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	795b      	ldrb	r3, [r3, #5]
 800d238:	2b0a      	cmp	r3, #10
 800d23a:	d007      	beq.n	800d24c <dhcp_supplied_address+0x34>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	795b      	ldrb	r3, [r3, #5]
 800d240:	2b05      	cmp	r3, #5
 800d242:	d003      	beq.n	800d24c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d248:	2b04      	cmp	r3, #4
 800d24a:	d101      	bne.n	800d250 <dhcp_supplied_address+0x38>
 800d24c:	2301      	movs	r3, #1
 800d24e:	e000      	b.n	800d252 <dhcp_supplied_address+0x3a>
 800d250:	2300      	movs	r3, #0
 800d252:	b2db      	uxtb	r3, r3
 800d254:	e000      	b.n	800d258 <dhcp_supplied_address+0x40>
  }
  return 0;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3714      	adds	r7, #20
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d26c:	4915      	ldr	r1, [pc, #84]	; (800d2c4 <etharp_free_entry+0x60>)
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	4613      	mov	r3, r2
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	4413      	add	r3, r2
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	440b      	add	r3, r1
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d013      	beq.n	800d2a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d280:	4910      	ldr	r1, [pc, #64]	; (800d2c4 <etharp_free_entry+0x60>)
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	4613      	mov	r3, r2
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	4413      	add	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	440b      	add	r3, r1
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4618      	mov	r0, r3
 800d292:	f7f7 ff53 	bl	800513c <pbuf_free>
    arp_table[i].q = NULL;
 800d296:	490b      	ldr	r1, [pc, #44]	; (800d2c4 <etharp_free_entry+0x60>)
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	4613      	mov	r3, r2
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	4413      	add	r3, r2
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	440b      	add	r3, r1
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d2a8:	4906      	ldr	r1, [pc, #24]	; (800d2c4 <etharp_free_entry+0x60>)
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	4413      	add	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	2000a4ac 	.word	0x2000a4ac

0800d2c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	607b      	str	r3, [r7, #4]
 800d2d2:	e096      	b.n	800d402 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d2d4:	494f      	ldr	r1, [pc, #316]	; (800d414 <etharp_tmr+0x14c>)
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	4413      	add	r3, r2
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	440b      	add	r3, r1
 800d2e2:	3314      	adds	r3, #20
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d2e8:	78fb      	ldrb	r3, [r7, #3]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f000 8086 	beq.w	800d3fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d2f0:	4948      	ldr	r1, [pc, #288]	; (800d414 <etharp_tmr+0x14c>)
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	4413      	add	r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	440b      	add	r3, r1
 800d2fe:	3312      	adds	r3, #18
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	3301      	adds	r3, #1
 800d304:	b298      	uxth	r0, r3
 800d306:	4943      	ldr	r1, [pc, #268]	; (800d414 <etharp_tmr+0x14c>)
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	4613      	mov	r3, r2
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	4413      	add	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	440b      	add	r3, r1
 800d314:	3312      	adds	r3, #18
 800d316:	4602      	mov	r2, r0
 800d318:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d31a:	493e      	ldr	r1, [pc, #248]	; (800d414 <etharp_tmr+0x14c>)
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	4613      	mov	r3, r2
 800d320:	005b      	lsls	r3, r3, #1
 800d322:	4413      	add	r3, r2
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	440b      	add	r3, r1
 800d328:	3312      	adds	r3, #18
 800d32a:	881b      	ldrh	r3, [r3, #0]
 800d32c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d330:	d215      	bcs.n	800d35e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d332:	4938      	ldr	r1, [pc, #224]	; (800d414 <etharp_tmr+0x14c>)
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4613      	mov	r3, r2
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	4413      	add	r3, r2
 800d33c:	00db      	lsls	r3, r3, #3
 800d33e:	440b      	add	r3, r1
 800d340:	3314      	adds	r3, #20
 800d342:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d344:	2b01      	cmp	r3, #1
 800d346:	d10e      	bne.n	800d366 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d348:	4932      	ldr	r1, [pc, #200]	; (800d414 <etharp_tmr+0x14c>)
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	4613      	mov	r3, r2
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	4413      	add	r3, r2
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	440b      	add	r3, r1
 800d356:	3312      	adds	r3, #18
 800d358:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d35a:	2b04      	cmp	r3, #4
 800d35c:	d903      	bls.n	800d366 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff ff80 	bl	800d264 <etharp_free_entry>
 800d364:	e04a      	b.n	800d3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d366:	492b      	ldr	r1, [pc, #172]	; (800d414 <etharp_tmr+0x14c>)
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	4613      	mov	r3, r2
 800d36c:	005b      	lsls	r3, r3, #1
 800d36e:	4413      	add	r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	440b      	add	r3, r1
 800d374:	3314      	adds	r3, #20
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d10a      	bne.n	800d392 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d37c:	4925      	ldr	r1, [pc, #148]	; (800d414 <etharp_tmr+0x14c>)
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	4613      	mov	r3, r2
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	440b      	add	r3, r1
 800d38a:	3314      	adds	r3, #20
 800d38c:	2204      	movs	r2, #4
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	e034      	b.n	800d3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d392:	4920      	ldr	r1, [pc, #128]	; (800d414 <etharp_tmr+0x14c>)
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	4413      	add	r3, r2
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	440b      	add	r3, r1
 800d3a0:	3314      	adds	r3, #20
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b04      	cmp	r3, #4
 800d3a6:	d10a      	bne.n	800d3be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d3a8:	491a      	ldr	r1, [pc, #104]	; (800d414 <etharp_tmr+0x14c>)
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	4413      	add	r3, r2
 800d3b2:	00db      	lsls	r3, r3, #3
 800d3b4:	440b      	add	r3, r1
 800d3b6:	3314      	adds	r3, #20
 800d3b8:	2202      	movs	r2, #2
 800d3ba:	701a      	strb	r2, [r3, #0]
 800d3bc:	e01e      	b.n	800d3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d3be:	4915      	ldr	r1, [pc, #84]	; (800d414 <etharp_tmr+0x14c>)
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	4413      	add	r3, r2
 800d3c8:	00db      	lsls	r3, r3, #3
 800d3ca:	440b      	add	r3, r1
 800d3cc:	3314      	adds	r3, #20
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d113      	bne.n	800d3fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d3d4:	490f      	ldr	r1, [pc, #60]	; (800d414 <etharp_tmr+0x14c>)
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	4413      	add	r3, r2
 800d3de:	00db      	lsls	r3, r3, #3
 800d3e0:	440b      	add	r3, r1
 800d3e2:	3308      	adds	r3, #8
 800d3e4:	6818      	ldr	r0, [r3, #0]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	4a08      	ldr	r2, [pc, #32]	; (800d414 <etharp_tmr+0x14c>)
 800d3f2:	4413      	add	r3, r2
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	f000 fe72 	bl	800e0e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3301      	adds	r3, #1
 800d400:	607b      	str	r3, [r7, #4]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b09      	cmp	r3, #9
 800d406:	f77f af65 	ble.w	800d2d4 <etharp_tmr+0xc>
      }
    }
  }
}
 800d40a:	bf00      	nop
 800d40c:	bf00      	nop
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	2000a4ac 	.word	0x2000a4ac

0800d418 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b08a      	sub	sp, #40	; 0x28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	460b      	mov	r3, r1
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d426:	230a      	movs	r3, #10
 800d428:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d42a:	230a      	movs	r3, #10
 800d42c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d42e:	230a      	movs	r3, #10
 800d430:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d436:	230a      	movs	r3, #10
 800d438:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	83bb      	strh	r3, [r7, #28]
 800d43e:	2300      	movs	r3, #0
 800d440:	837b      	strh	r3, [r7, #26]
 800d442:	2300      	movs	r3, #0
 800d444:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d446:	2300      	movs	r3, #0
 800d448:	843b      	strh	r3, [r7, #32]
 800d44a:	e0ae      	b.n	800d5aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d44c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d450:	49a6      	ldr	r1, [pc, #664]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d452:	4613      	mov	r3, r2
 800d454:	005b      	lsls	r3, r3, #1
 800d456:	4413      	add	r3, r2
 800d458:	00db      	lsls	r3, r3, #3
 800d45a:	440b      	add	r3, r1
 800d45c:	3314      	adds	r3, #20
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d462:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d466:	2b0a      	cmp	r3, #10
 800d468:	d105      	bne.n	800d476 <etharp_find_entry+0x5e>
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d102      	bne.n	800d476 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d470:	8c3b      	ldrh	r3, [r7, #32]
 800d472:	847b      	strh	r3, [r7, #34]	; 0x22
 800d474:	e095      	b.n	800d5a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 8092 	beq.w	800d5a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d009      	beq.n	800d498 <etharp_find_entry+0x80>
 800d484:	7dfb      	ldrb	r3, [r7, #23]
 800d486:	2b01      	cmp	r3, #1
 800d488:	d806      	bhi.n	800d498 <etharp_find_entry+0x80>
 800d48a:	4b99      	ldr	r3, [pc, #612]	; (800d6f0 <etharp_find_entry+0x2d8>)
 800d48c:	f240 1223 	movw	r2, #291	; 0x123
 800d490:	4998      	ldr	r1, [pc, #608]	; (800d6f4 <etharp_find_entry+0x2dc>)
 800d492:	4899      	ldr	r0, [pc, #612]	; (800d6f8 <etharp_find_entry+0x2e0>)
 800d494:	f002 face 	bl	800fa34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d020      	beq.n	800d4e0 <etharp_find_entry+0xc8>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6819      	ldr	r1, [r3, #0]
 800d4a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4a6:	4891      	ldr	r0, [pc, #580]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	4413      	add	r3, r2
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	4403      	add	r3, r0
 800d4b2:	3304      	adds	r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4299      	cmp	r1, r3
 800d4b8:	d112      	bne.n	800d4e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00c      	beq.n	800d4da <etharp_find_entry+0xc2>
 800d4c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4c4:	4989      	ldr	r1, [pc, #548]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	005b      	lsls	r3, r3, #1
 800d4ca:	4413      	add	r3, r2
 800d4cc:	00db      	lsls	r3, r3, #3
 800d4ce:	440b      	add	r3, r1
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d102      	bne.n	800d4e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d4da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d4de:	e100      	b.n	800d6e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d140      	bne.n	800d568 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d4e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4ea:	4980      	ldr	r1, [pc, #512]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	440b      	add	r3, r1
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d01a      	beq.n	800d532 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d4fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d500:	497a      	ldr	r1, [pc, #488]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d502:	4613      	mov	r3, r2
 800d504:	005b      	lsls	r3, r3, #1
 800d506:	4413      	add	r3, r2
 800d508:	00db      	lsls	r3, r3, #3
 800d50a:	440b      	add	r3, r1
 800d50c:	3312      	adds	r3, #18
 800d50e:	881b      	ldrh	r3, [r3, #0]
 800d510:	8bba      	ldrh	r2, [r7, #28]
 800d512:	429a      	cmp	r2, r3
 800d514:	d845      	bhi.n	800d5a2 <etharp_find_entry+0x18a>
            old_queue = i;
 800d516:	8c3b      	ldrh	r3, [r7, #32]
 800d518:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d51a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d51e:	4973      	ldr	r1, [pc, #460]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d520:	4613      	mov	r3, r2
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	4413      	add	r3, r2
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	440b      	add	r3, r1
 800d52a:	3312      	adds	r3, #18
 800d52c:	881b      	ldrh	r3, [r3, #0]
 800d52e:	83bb      	strh	r3, [r7, #28]
 800d530:	e037      	b.n	800d5a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d536:	496d      	ldr	r1, [pc, #436]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d538:	4613      	mov	r3, r2
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	4413      	add	r3, r2
 800d53e:	00db      	lsls	r3, r3, #3
 800d540:	440b      	add	r3, r1
 800d542:	3312      	adds	r3, #18
 800d544:	881b      	ldrh	r3, [r3, #0]
 800d546:	8b7a      	ldrh	r2, [r7, #26]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d82a      	bhi.n	800d5a2 <etharp_find_entry+0x18a>
            old_pending = i;
 800d54c:	8c3b      	ldrh	r3, [r7, #32]
 800d54e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d554:	4965      	ldr	r1, [pc, #404]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d556:	4613      	mov	r3, r2
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	4413      	add	r3, r2
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	440b      	add	r3, r1
 800d560:	3312      	adds	r3, #18
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	837b      	strh	r3, [r7, #26]
 800d566:	e01c      	b.n	800d5a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d919      	bls.n	800d5a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d56e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d572:	495e      	ldr	r1, [pc, #376]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d574:	4613      	mov	r3, r2
 800d576:	005b      	lsls	r3, r3, #1
 800d578:	4413      	add	r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	440b      	add	r3, r1
 800d57e:	3312      	adds	r3, #18
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	8b3a      	ldrh	r2, [r7, #24]
 800d584:	429a      	cmp	r2, r3
 800d586:	d80c      	bhi.n	800d5a2 <etharp_find_entry+0x18a>
            old_stable = i;
 800d588:	8c3b      	ldrh	r3, [r7, #32]
 800d58a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d590:	4956      	ldr	r1, [pc, #344]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d592:	4613      	mov	r3, r2
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	4413      	add	r3, r2
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	440b      	add	r3, r1
 800d59c:	3312      	adds	r3, #18
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5a2:	8c3b      	ldrh	r3, [r7, #32]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	843b      	strh	r3, [r7, #32]
 800d5aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d5ae:	2b09      	cmp	r3, #9
 800d5b0:	f77f af4c 	ble.w	800d44c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d5b4:	7afb      	ldrb	r3, [r7, #11]
 800d5b6:	f003 0302 	and.w	r3, r3, #2
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d108      	bne.n	800d5d0 <etharp_find_entry+0x1b8>
 800d5be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d5c2:	2b0a      	cmp	r3, #10
 800d5c4:	d107      	bne.n	800d5d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d5c6:	7afb      	ldrb	r3, [r7, #11]
 800d5c8:	f003 0301 	and.w	r3, r3, #1
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d102      	bne.n	800d5d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d5d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5d4:	e085      	b.n	800d6e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d5d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d5da:	2b09      	cmp	r3, #9
 800d5dc:	dc02      	bgt.n	800d5e4 <etharp_find_entry+0x1cc>
    i = empty;
 800d5de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5e0:	843b      	strh	r3, [r7, #32]
 800d5e2:	e039      	b.n	800d658 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d5e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d5e8:	2b09      	cmp	r3, #9
 800d5ea:	dc14      	bgt.n	800d616 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d5ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d5f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5f4:	493d      	ldr	r1, [pc, #244]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	4413      	add	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	440b      	add	r3, r1
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d018      	beq.n	800d638 <etharp_find_entry+0x220>
 800d606:	4b3a      	ldr	r3, [pc, #232]	; (800d6f0 <etharp_find_entry+0x2d8>)
 800d608:	f240 126d 	movw	r2, #365	; 0x16d
 800d60c:	493b      	ldr	r1, [pc, #236]	; (800d6fc <etharp_find_entry+0x2e4>)
 800d60e:	483a      	ldr	r0, [pc, #232]	; (800d6f8 <etharp_find_entry+0x2e0>)
 800d610:	f002 fa10 	bl	800fa34 <iprintf>
 800d614:	e010      	b.n	800d638 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d616:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d61a:	2b09      	cmp	r3, #9
 800d61c:	dc02      	bgt.n	800d624 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d61e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d620:	843b      	strh	r3, [r7, #32]
 800d622:	e009      	b.n	800d638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d624:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d628:	2b09      	cmp	r3, #9
 800d62a:	dc02      	bgt.n	800d632 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d62c:	8bfb      	ldrh	r3, [r7, #30]
 800d62e:	843b      	strh	r3, [r7, #32]
 800d630:	e002      	b.n	800d638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d636:	e054      	b.n	800d6e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d638:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d63c:	2b09      	cmp	r3, #9
 800d63e:	dd06      	ble.n	800d64e <etharp_find_entry+0x236>
 800d640:	4b2b      	ldr	r3, [pc, #172]	; (800d6f0 <etharp_find_entry+0x2d8>)
 800d642:	f240 127f 	movw	r2, #383	; 0x17f
 800d646:	492e      	ldr	r1, [pc, #184]	; (800d700 <etharp_find_entry+0x2e8>)
 800d648:	482b      	ldr	r0, [pc, #172]	; (800d6f8 <etharp_find_entry+0x2e0>)
 800d64a:	f002 f9f3 	bl	800fa34 <iprintf>
    etharp_free_entry(i);
 800d64e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff fe06 	bl	800d264 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d658:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d65c:	2b09      	cmp	r3, #9
 800d65e:	dd06      	ble.n	800d66e <etharp_find_entry+0x256>
 800d660:	4b23      	ldr	r3, [pc, #140]	; (800d6f0 <etharp_find_entry+0x2d8>)
 800d662:	f240 1283 	movw	r2, #387	; 0x183
 800d666:	4926      	ldr	r1, [pc, #152]	; (800d700 <etharp_find_entry+0x2e8>)
 800d668:	4823      	ldr	r0, [pc, #140]	; (800d6f8 <etharp_find_entry+0x2e0>)
 800d66a:	f002 f9e3 	bl	800fa34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d66e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d672:	491e      	ldr	r1, [pc, #120]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d674:	4613      	mov	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	4413      	add	r3, r2
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	440b      	add	r3, r1
 800d67e:	3314      	adds	r3, #20
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d006      	beq.n	800d694 <etharp_find_entry+0x27c>
 800d686:	4b1a      	ldr	r3, [pc, #104]	; (800d6f0 <etharp_find_entry+0x2d8>)
 800d688:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d68c:	491d      	ldr	r1, [pc, #116]	; (800d704 <etharp_find_entry+0x2ec>)
 800d68e:	481a      	ldr	r0, [pc, #104]	; (800d6f8 <etharp_find_entry+0x2e0>)
 800d690:	f002 f9d0 	bl	800fa34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00b      	beq.n	800d6b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d69a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6819      	ldr	r1, [r3, #0]
 800d6a2:	4812      	ldr	r0, [pc, #72]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	4413      	add	r3, r2
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	4403      	add	r3, r0
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d6b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6b6:	490d      	ldr	r1, [pc, #52]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	440b      	add	r3, r1
 800d6c2:	3312      	adds	r3, #18
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6cc:	4907      	ldr	r1, [pc, #28]	; (800d6ec <etharp_find_entry+0x2d4>)
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	00db      	lsls	r3, r3, #3
 800d6d6:	440b      	add	r3, r1
 800d6d8:	3308      	adds	r3, #8
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d6de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3728      	adds	r7, #40	; 0x28
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	2000a4ac 	.word	0x2000a4ac
 800d6f0:	08012f2c 	.word	0x08012f2c
 800d6f4:	08012f64 	.word	0x08012f64
 800d6f8:	08012fa4 	.word	0x08012fa4
 800d6fc:	08012fcc 	.word	0x08012fcc
 800d700:	08012fe4 	.word	0x08012fe4
 800d704:	08012ff8 	.word	0x08012ff8

0800d708 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af02      	add	r7, sp, #8
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
 800d714:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d71c:	2b06      	cmp	r3, #6
 800d71e:	d006      	beq.n	800d72e <etharp_update_arp_entry+0x26>
 800d720:	4b48      	ldr	r3, [pc, #288]	; (800d844 <etharp_update_arp_entry+0x13c>)
 800d722:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d726:	4948      	ldr	r1, [pc, #288]	; (800d848 <etharp_update_arp_entry+0x140>)
 800d728:	4848      	ldr	r0, [pc, #288]	; (800d84c <etharp_update_arp_entry+0x144>)
 800d72a:	f002 f983 	bl	800fa34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d012      	beq.n	800d75a <etharp_update_arp_entry+0x52>
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00e      	beq.n	800d75a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68f9      	ldr	r1, [r7, #12]
 800d742:	4618      	mov	r0, r3
 800d744:	f001 f920 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800d748:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d105      	bne.n	800d75a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d756:	2be0      	cmp	r3, #224	; 0xe0
 800d758:	d102      	bne.n	800d760 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d75a:	f06f 030f 	mvn.w	r3, #15
 800d75e:	e06c      	b.n	800d83a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d760:	78fb      	ldrb	r3, [r7, #3]
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	4619      	mov	r1, r3
 800d766:	68b8      	ldr	r0, [r7, #8]
 800d768:	f7ff fe56 	bl	800d418 <etharp_find_entry>
 800d76c:	4603      	mov	r3, r0
 800d76e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d770:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d774:	2b00      	cmp	r3, #0
 800d776:	da02      	bge.n	800d77e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d778:	8afb      	ldrh	r3, [r7, #22]
 800d77a:	b25b      	sxtb	r3, r3
 800d77c:	e05d      	b.n	800d83a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d77e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d782:	4933      	ldr	r1, [pc, #204]	; (800d850 <etharp_update_arp_entry+0x148>)
 800d784:	4613      	mov	r3, r2
 800d786:	005b      	lsls	r3, r3, #1
 800d788:	4413      	add	r3, r2
 800d78a:	00db      	lsls	r3, r3, #3
 800d78c:	440b      	add	r3, r1
 800d78e:	3314      	adds	r3, #20
 800d790:	2202      	movs	r2, #2
 800d792:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d798:	492d      	ldr	r1, [pc, #180]	; (800d850 <etharp_update_arp_entry+0x148>)
 800d79a:	4613      	mov	r3, r2
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	4413      	add	r3, r2
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	440b      	add	r3, r1
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d7aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	4413      	add	r3, r2
 800d7b4:	00db      	lsls	r3, r3, #3
 800d7b6:	3308      	adds	r3, #8
 800d7b8:	4a25      	ldr	r2, [pc, #148]	; (800d850 <etharp_update_arp_entry+0x148>)
 800d7ba:	4413      	add	r3, r2
 800d7bc:	3304      	adds	r3, #4
 800d7be:	2206      	movs	r2, #6
 800d7c0:	6879      	ldr	r1, [r7, #4]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f002 fa11 	bl	800fbea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d7c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d7cc:	4920      	ldr	r1, [pc, #128]	; (800d850 <etharp_update_arp_entry+0x148>)
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	440b      	add	r3, r1
 800d7d8:	3312      	adds	r3, #18
 800d7da:	2200      	movs	r2, #0
 800d7dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d7de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d7e2:	491b      	ldr	r1, [pc, #108]	; (800d850 <etharp_update_arp_entry+0x148>)
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	4413      	add	r3, r2
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	440b      	add	r3, r1
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d021      	beq.n	800d838 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d7f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d7f8:	4915      	ldr	r1, [pc, #84]	; (800d850 <etharp_update_arp_entry+0x148>)
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	005b      	lsls	r3, r3, #1
 800d7fe:	4413      	add	r3, r2
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	440b      	add	r3, r1
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d808:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d80c:	4910      	ldr	r1, [pc, #64]	; (800d850 <etharp_update_arp_entry+0x148>)
 800d80e:	4613      	mov	r3, r2
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	4413      	add	r3, r2
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	440b      	add	r3, r1
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800d822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6939      	ldr	r1, [r7, #16]
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f001 ffb9 	bl	800f7a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d832:	6938      	ldr	r0, [r7, #16]
 800d834:	f7f7 fc82 	bl	800513c <pbuf_free>
  }
  return ERR_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3718      	adds	r7, #24
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	08012f2c 	.word	0x08012f2c
 800d848:	08013024 	.word	0x08013024
 800d84c:	08012fa4 	.word	0x08012fa4
 800d850:	2000a4ac 	.word	0x2000a4ac

0800d854 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]
 800d860:	e01e      	b.n	800d8a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d862:	4913      	ldr	r1, [pc, #76]	; (800d8b0 <etharp_cleanup_netif+0x5c>)
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	4613      	mov	r3, r2
 800d868:	005b      	lsls	r3, r3, #1
 800d86a:	4413      	add	r3, r2
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	440b      	add	r3, r1
 800d870:	3314      	adds	r3, #20
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d876:	7afb      	ldrb	r3, [r7, #11]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00e      	beq.n	800d89a <etharp_cleanup_netif+0x46>
 800d87c:	490c      	ldr	r1, [pc, #48]	; (800d8b0 <etharp_cleanup_netif+0x5c>)
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	4613      	mov	r3, r2
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	4413      	add	r3, r2
 800d886:	00db      	lsls	r3, r3, #3
 800d888:	440b      	add	r3, r1
 800d88a:	3308      	adds	r3, #8
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	429a      	cmp	r2, r3
 800d892:	d102      	bne.n	800d89a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff fce5 	bl	800d264 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3301      	adds	r3, #1
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b09      	cmp	r3, #9
 800d8a4:	dddd      	ble.n	800d862 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	2000a4ac 	.word	0x2000a4ac

0800d8b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d8b4:	b5b0      	push	{r4, r5, r7, lr}
 800d8b6:	b08a      	sub	sp, #40	; 0x28
 800d8b8:	af04      	add	r7, sp, #16
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d107      	bne.n	800d8d4 <etharp_input+0x20>
 800d8c4:	4b3f      	ldr	r3, [pc, #252]	; (800d9c4 <etharp_input+0x110>)
 800d8c6:	f240 228a 	movw	r2, #650	; 0x28a
 800d8ca:	493f      	ldr	r1, [pc, #252]	; (800d9c8 <etharp_input+0x114>)
 800d8cc:	483f      	ldr	r0, [pc, #252]	; (800d9cc <etharp_input+0x118>)
 800d8ce:	f002 f8b1 	bl	800fa34 <iprintf>
 800d8d2:	e074      	b.n	800d9be <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e4:	d10c      	bne.n	800d900 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d8ea:	2b06      	cmp	r3, #6
 800d8ec:	d108      	bne.n	800d900 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d8f2:	2b04      	cmp	r3, #4
 800d8f4:	d104      	bne.n	800d900 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	885b      	ldrh	r3, [r3, #2]
 800d8fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d8fc:	2b08      	cmp	r3, #8
 800d8fe:	d003      	beq.n	800d908 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7f7 fc1b 	bl	800513c <pbuf_free>
    return;
 800d906:	e05a      	b.n	800d9be <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	330e      	adds	r3, #14
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	3318      	adds	r3, #24
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	3304      	adds	r3, #4
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d102      	bne.n	800d928 <etharp_input+0x74>
    for_us = 0;
 800d922:	2300      	movs	r3, #0
 800d924:	75fb      	strb	r3, [r7, #23]
 800d926:	e009      	b.n	800d93c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	3304      	adds	r3, #4
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	429a      	cmp	r2, r3
 800d932:	bf0c      	ite	eq
 800d934:	2301      	moveq	r3, #1
 800d936:	2300      	movne	r3, #0
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	f103 0208 	add.w	r2, r3, #8
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <etharp_input+0x98>
 800d948:	2301      	movs	r3, #1
 800d94a:	e000      	b.n	800d94e <etharp_input+0x9a>
 800d94c:	2302      	movs	r3, #2
 800d94e:	f107 010c 	add.w	r1, r7, #12
 800d952:	6838      	ldr	r0, [r7, #0]
 800d954:	f7ff fed8 	bl	800d708 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	88db      	ldrh	r3, [r3, #6]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d962:	d003      	beq.n	800d96c <etharp_input+0xb8>
 800d964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d968:	d01e      	beq.n	800d9a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d96a:	e025      	b.n	800d9b8 <etharp_input+0x104>
      if (for_us) {
 800d96c:	7dfb      	ldrb	r3, [r7, #23]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d021      	beq.n	800d9b6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d98c:	2102      	movs	r1, #2
 800d98e:	9103      	str	r1, [sp, #12]
 800d990:	f107 010c 	add.w	r1, r7, #12
 800d994:	9102      	str	r1, [sp, #8]
 800d996:	9201      	str	r2, [sp, #4]
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	462b      	mov	r3, r5
 800d99c:	4622      	mov	r2, r4
 800d99e:	4601      	mov	r1, r0
 800d9a0:	6838      	ldr	r0, [r7, #0]
 800d9a2:	f000 faef 	bl	800df84 <etharp_raw>
      break;
 800d9a6:	e006      	b.n	800d9b6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800d9a8:	f107 030c 	add.w	r3, r7, #12
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	6838      	ldr	r0, [r7, #0]
 800d9b0:	f7fe f9fc 	bl	800bdac <dhcp_arp_reply>
      break;
 800d9b4:	e000      	b.n	800d9b8 <etharp_input+0x104>
      break;
 800d9b6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7f7 fbbf 	bl	800513c <pbuf_free>
}
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bdb0      	pop	{r4, r5, r7, pc}
 800d9c4:	08012f2c 	.word	0x08012f2c
 800d9c8:	0801307c 	.word	0x0801307c
 800d9cc:	08012fa4 	.word	0x08012fa4

0800d9d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af02      	add	r7, sp, #8
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d9de:	79fa      	ldrb	r2, [r7, #7]
 800d9e0:	4944      	ldr	r1, [pc, #272]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	440b      	add	r3, r1
 800d9ec:	3314      	adds	r3, #20
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d806      	bhi.n	800da02 <etharp_output_to_arp_index+0x32>
 800d9f4:	4b40      	ldr	r3, [pc, #256]	; (800daf8 <etharp_output_to_arp_index+0x128>)
 800d9f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d9fa:	4940      	ldr	r1, [pc, #256]	; (800dafc <etharp_output_to_arp_index+0x12c>)
 800d9fc:	4840      	ldr	r0, [pc, #256]	; (800db00 <etharp_output_to_arp_index+0x130>)
 800d9fe:	f002 f819 	bl	800fa34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800da02:	79fa      	ldrb	r2, [r7, #7]
 800da04:	493b      	ldr	r1, [pc, #236]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800da06:	4613      	mov	r3, r2
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	4413      	add	r3, r2
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	440b      	add	r3, r1
 800da10:	3314      	adds	r3, #20
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b02      	cmp	r3, #2
 800da16:	d153      	bne.n	800dac0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800da18:	79fa      	ldrb	r2, [r7, #7]
 800da1a:	4936      	ldr	r1, [pc, #216]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800da1c:	4613      	mov	r3, r2
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	4413      	add	r3, r2
 800da22:	00db      	lsls	r3, r3, #3
 800da24:	440b      	add	r3, r1
 800da26:	3312      	adds	r3, #18
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800da2e:	d919      	bls.n	800da64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800da30:	79fa      	ldrb	r2, [r7, #7]
 800da32:	4613      	mov	r3, r2
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	4413      	add	r3, r2
 800da38:	00db      	lsls	r3, r3, #3
 800da3a:	4a2e      	ldr	r2, [pc, #184]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800da3c:	4413      	add	r3, r2
 800da3e:	3304      	adds	r3, #4
 800da40:	4619      	mov	r1, r3
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f000 fb4c 	bl	800e0e0 <etharp_request>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d138      	bne.n	800dac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800da4e:	79fa      	ldrb	r2, [r7, #7]
 800da50:	4928      	ldr	r1, [pc, #160]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800da52:	4613      	mov	r3, r2
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	4413      	add	r3, r2
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	440b      	add	r3, r1
 800da5c:	3314      	adds	r3, #20
 800da5e:	2203      	movs	r2, #3
 800da60:	701a      	strb	r2, [r3, #0]
 800da62:	e02d      	b.n	800dac0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800da64:	79fa      	ldrb	r2, [r7, #7]
 800da66:	4923      	ldr	r1, [pc, #140]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800da68:	4613      	mov	r3, r2
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	4413      	add	r3, r2
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	440b      	add	r3, r1
 800da72:	3312      	adds	r3, #18
 800da74:	881b      	ldrh	r3, [r3, #0]
 800da76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800da7a:	d321      	bcc.n	800dac0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800da7c:	79fa      	ldrb	r2, [r7, #7]
 800da7e:	4613      	mov	r3, r2
 800da80:	005b      	lsls	r3, r3, #1
 800da82:	4413      	add	r3, r2
 800da84:	00db      	lsls	r3, r3, #3
 800da86:	4a1b      	ldr	r2, [pc, #108]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800da88:	4413      	add	r3, r2
 800da8a:	1d19      	adds	r1, r3, #4
 800da8c:	79fa      	ldrb	r2, [r7, #7]
 800da8e:	4613      	mov	r3, r2
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	4413      	add	r3, r2
 800da94:	00db      	lsls	r3, r3, #3
 800da96:	3308      	adds	r3, #8
 800da98:	4a16      	ldr	r2, [pc, #88]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800da9a:	4413      	add	r3, r2
 800da9c:	3304      	adds	r3, #4
 800da9e:	461a      	mov	r2, r3
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 fafb 	bl	800e09c <etharp_request_dst>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d109      	bne.n	800dac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800daac:	79fa      	ldrb	r2, [r7, #7]
 800daae:	4911      	ldr	r1, [pc, #68]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800dab0:	4613      	mov	r3, r2
 800dab2:	005b      	lsls	r3, r3, #1
 800dab4:	4413      	add	r3, r2
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	440b      	add	r3, r1
 800daba:	3314      	adds	r3, #20
 800dabc:	2203      	movs	r2, #3
 800dabe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800dac6:	79fa      	ldrb	r2, [r7, #7]
 800dac8:	4613      	mov	r3, r2
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	4413      	add	r3, r2
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	3308      	adds	r3, #8
 800dad2:	4a08      	ldr	r2, [pc, #32]	; (800daf4 <etharp_output_to_arp_index+0x124>)
 800dad4:	4413      	add	r3, r2
 800dad6:	3304      	adds	r3, #4
 800dad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dadc:	9200      	str	r2, [sp, #0]
 800dade:	460a      	mov	r2, r1
 800dae0:	68b9      	ldr	r1, [r7, #8]
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f001 fe5e 	bl	800f7a4 <ethernet_output>
 800dae8:	4603      	mov	r3, r0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	2000a4ac 	.word	0x2000a4ac
 800daf8:	08012f2c 	.word	0x08012f2c
 800dafc:	0801309c 	.word	0x0801309c
 800db00:	08012fa4 	.word	0x08012fa4

0800db04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b08a      	sub	sp, #40	; 0x28
 800db08:	af02      	add	r7, sp, #8
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <etharp_output+0x24>
 800db1a:	4b73      	ldr	r3, [pc, #460]	; (800dce8 <etharp_output+0x1e4>)
 800db1c:	f240 321e 	movw	r2, #798	; 0x31e
 800db20:	4972      	ldr	r1, [pc, #456]	; (800dcec <etharp_output+0x1e8>)
 800db22:	4873      	ldr	r0, [pc, #460]	; (800dcf0 <etharp_output+0x1ec>)
 800db24:	f001 ff86 	bl	800fa34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d106      	bne.n	800db3c <etharp_output+0x38>
 800db2e:	4b6e      	ldr	r3, [pc, #440]	; (800dce8 <etharp_output+0x1e4>)
 800db30:	f240 321f 	movw	r2, #799	; 0x31f
 800db34:	496f      	ldr	r1, [pc, #444]	; (800dcf4 <etharp_output+0x1f0>)
 800db36:	486e      	ldr	r0, [pc, #440]	; (800dcf0 <etharp_output+0x1ec>)
 800db38:	f001 ff7c 	bl	800fa34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d106      	bne.n	800db50 <etharp_output+0x4c>
 800db42:	4b69      	ldr	r3, [pc, #420]	; (800dce8 <etharp_output+0x1e4>)
 800db44:	f44f 7248 	mov.w	r2, #800	; 0x320
 800db48:	496b      	ldr	r1, [pc, #428]	; (800dcf8 <etharp_output+0x1f4>)
 800db4a:	4869      	ldr	r0, [pc, #420]	; (800dcf0 <etharp_output+0x1ec>)
 800db4c:	f001 ff72 	bl	800fa34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68f9      	ldr	r1, [r7, #12]
 800db56:	4618      	mov	r0, r3
 800db58:	f000 ff16 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800db62:	4b66      	ldr	r3, [pc, #408]	; (800dcfc <etharp_output+0x1f8>)
 800db64:	61fb      	str	r3, [r7, #28]
 800db66:	e0af      	b.n	800dcc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db70:	2be0      	cmp	r3, #224	; 0xe0
 800db72:	d118      	bne.n	800dba6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800db74:	2301      	movs	r3, #1
 800db76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800db78:	2300      	movs	r3, #0
 800db7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800db7c:	235e      	movs	r3, #94	; 0x5e
 800db7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3301      	adds	r3, #1
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	3302      	adds	r3, #2
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	3303      	adds	r3, #3
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800db9e:	f107 0310 	add.w	r3, r7, #16
 800dba2:	61fb      	str	r3, [r7, #28]
 800dba4:	e090      	b.n	800dcc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3304      	adds	r3, #4
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	405a      	eors	r2, r3
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4013      	ands	r3, r2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d012      	beq.n	800dbe4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dbc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d00b      	beq.n	800dbe4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	330c      	adds	r3, #12
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d003      	beq.n	800dbde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	330c      	adds	r3, #12
 800dbda:	61bb      	str	r3, [r7, #24]
 800dbdc:	e002      	b.n	800dbe4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dbde:	f06f 0303 	mvn.w	r3, #3
 800dbe2:	e07d      	b.n	800dce0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dbe4:	4b46      	ldr	r3, [pc, #280]	; (800dd00 <etharp_output+0x1fc>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4a46      	ldr	r2, [pc, #280]	; (800dd04 <etharp_output+0x200>)
 800dbec:	460b      	mov	r3, r1
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	440b      	add	r3, r1
 800dbf2:	00db      	lsls	r3, r3, #3
 800dbf4:	4413      	add	r3, r2
 800dbf6:	3314      	adds	r3, #20
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d925      	bls.n	800dc4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dbfe:	4b40      	ldr	r3, [pc, #256]	; (800dd00 <etharp_output+0x1fc>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	4619      	mov	r1, r3
 800dc04:	4a3f      	ldr	r2, [pc, #252]	; (800dd04 <etharp_output+0x200>)
 800dc06:	460b      	mov	r3, r1
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	440b      	add	r3, r1
 800dc0c:	00db      	lsls	r3, r3, #3
 800dc0e:	4413      	add	r3, r2
 800dc10:	3308      	adds	r3, #8
 800dc12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d117      	bne.n	800dc4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	4b38      	ldr	r3, [pc, #224]	; (800dd00 <etharp_output+0x1fc>)
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	4618      	mov	r0, r3
 800dc24:	4937      	ldr	r1, [pc, #220]	; (800dd04 <etharp_output+0x200>)
 800dc26:	4603      	mov	r3, r0
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	4403      	add	r3, r0
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	440b      	add	r3, r1
 800dc30:	3304      	adds	r3, #4
 800dc32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d108      	bne.n	800dc4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800dc38:	4b31      	ldr	r3, [pc, #196]	; (800dd00 <etharp_output+0x1fc>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7ff fec5 	bl	800d9d0 <etharp_output_to_arp_index>
 800dc46:	4603      	mov	r3, r0
 800dc48:	e04a      	b.n	800dce0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	75fb      	strb	r3, [r7, #23]
 800dc4e:	e031      	b.n	800dcb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dc50:	7dfa      	ldrb	r2, [r7, #23]
 800dc52:	492c      	ldr	r1, [pc, #176]	; (800dd04 <etharp_output+0x200>)
 800dc54:	4613      	mov	r3, r2
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	4413      	add	r3, r2
 800dc5a:	00db      	lsls	r3, r3, #3
 800dc5c:	440b      	add	r3, r1
 800dc5e:	3314      	adds	r3, #20
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d923      	bls.n	800dcae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800dc66:	7dfa      	ldrb	r2, [r7, #23]
 800dc68:	4926      	ldr	r1, [pc, #152]	; (800dd04 <etharp_output+0x200>)
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	005b      	lsls	r3, r3, #1
 800dc6e:	4413      	add	r3, r2
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	440b      	add	r3, r1
 800dc74:	3308      	adds	r3, #8
 800dc76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d117      	bne.n	800dcae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	6819      	ldr	r1, [r3, #0]
 800dc82:	7dfa      	ldrb	r2, [r7, #23]
 800dc84:	481f      	ldr	r0, [pc, #124]	; (800dd04 <etharp_output+0x200>)
 800dc86:	4613      	mov	r3, r2
 800dc88:	005b      	lsls	r3, r3, #1
 800dc8a:	4413      	add	r3, r2
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	4403      	add	r3, r0
 800dc90:	3304      	adds	r3, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800dc94:	4299      	cmp	r1, r3
 800dc96:	d10a      	bne.n	800dcae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dc98:	4a19      	ldr	r2, [pc, #100]	; (800dd00 <etharp_output+0x1fc>)
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
 800dc9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	461a      	mov	r2, r3
 800dca2:	68b9      	ldr	r1, [r7, #8]
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f7ff fe93 	bl	800d9d0 <etharp_output_to_arp_index>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	e018      	b.n	800dce0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	2b09      	cmp	r3, #9
 800dcb8:	d9ca      	bls.n	800dc50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	69b9      	ldr	r1, [r7, #24]
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 f822 	bl	800dd08 <etharp_query>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	e00b      	b.n	800dce0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800dcce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	68b9      	ldr	r1, [r7, #8]
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f001 fd63 	bl	800f7a4 <ethernet_output>
 800dcde:	4603      	mov	r3, r0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3720      	adds	r7, #32
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	08012f2c 	.word	0x08012f2c
 800dcec:	0801307c 	.word	0x0801307c
 800dcf0:	08012fa4 	.word	0x08012fa4
 800dcf4:	080130cc 	.word	0x080130cc
 800dcf8:	0801306c 	.word	0x0801306c
 800dcfc:	080136f4 	.word	0x080136f4
 800dd00:	2000a59c 	.word	0x2000a59c
 800dd04:	2000a4ac 	.word	0x2000a4ac

0800dd08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08c      	sub	sp, #48	; 0x30
 800dd0c:	af02      	add	r7, sp, #8
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	332a      	adds	r3, #42	; 0x2a
 800dd18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800dd1a:	23ff      	movs	r3, #255	; 0xff
 800dd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	68f9      	ldr	r1, [r7, #12]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f000 fe2c 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10c      	bne.n	800dd50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd3e:	2be0      	cmp	r3, #224	; 0xe0
 800dd40:	d006      	beq.n	800dd50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d102      	bne.n	800dd56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dd50:	f06f 030f 	mvn.w	r3, #15
 800dd54:	e101      	b.n	800df5a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	2101      	movs	r1, #1
 800dd5a:	68b8      	ldr	r0, [r7, #8]
 800dd5c:	f7ff fb5c 	bl	800d418 <etharp_find_entry>
 800dd60:	4603      	mov	r3, r0
 800dd62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800dd64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	da02      	bge.n	800dd72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800dd6c:	8a7b      	ldrh	r3, [r7, #18]
 800dd6e:	b25b      	sxtb	r3, r3
 800dd70:	e0f3      	b.n	800df5a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dd72:	8a7b      	ldrh	r3, [r7, #18]
 800dd74:	2b7e      	cmp	r3, #126	; 0x7e
 800dd76:	d906      	bls.n	800dd86 <etharp_query+0x7e>
 800dd78:	4b7a      	ldr	r3, [pc, #488]	; (800df64 <etharp_query+0x25c>)
 800dd7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800dd7e:	497a      	ldr	r1, [pc, #488]	; (800df68 <etharp_query+0x260>)
 800dd80:	487a      	ldr	r0, [pc, #488]	; (800df6c <etharp_query+0x264>)
 800dd82:	f001 fe57 	bl	800fa34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800dd86:	8a7b      	ldrh	r3, [r7, #18]
 800dd88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dd8a:	7c7a      	ldrb	r2, [r7, #17]
 800dd8c:	4978      	ldr	r1, [pc, #480]	; (800df70 <etharp_query+0x268>)
 800dd8e:	4613      	mov	r3, r2
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	4413      	add	r3, r2
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	440b      	add	r3, r1
 800dd98:	3314      	adds	r3, #20
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d115      	bne.n	800ddcc <etharp_query+0xc4>
    is_new_entry = 1;
 800dda0:	2301      	movs	r3, #1
 800dda2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dda4:	7c7a      	ldrb	r2, [r7, #17]
 800dda6:	4972      	ldr	r1, [pc, #456]	; (800df70 <etharp_query+0x268>)
 800dda8:	4613      	mov	r3, r2
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	4413      	add	r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	440b      	add	r3, r1
 800ddb2:	3314      	adds	r3, #20
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ddb8:	7c7a      	ldrb	r2, [r7, #17]
 800ddba:	496d      	ldr	r1, [pc, #436]	; (800df70 <etharp_query+0x268>)
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	4413      	add	r3, r2
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	440b      	add	r3, r1
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ddcc:	7c7a      	ldrb	r2, [r7, #17]
 800ddce:	4968      	ldr	r1, [pc, #416]	; (800df70 <etharp_query+0x268>)
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	4413      	add	r3, r2
 800ddd6:	00db      	lsls	r3, r3, #3
 800ddd8:	440b      	add	r3, r1
 800ddda:	3314      	adds	r3, #20
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d011      	beq.n	800de06 <etharp_query+0xfe>
 800dde2:	7c7a      	ldrb	r2, [r7, #17]
 800dde4:	4962      	ldr	r1, [pc, #392]	; (800df70 <etharp_query+0x268>)
 800dde6:	4613      	mov	r3, r2
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	4413      	add	r3, r2
 800ddec:	00db      	lsls	r3, r3, #3
 800ddee:	440b      	add	r3, r1
 800ddf0:	3314      	adds	r3, #20
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d806      	bhi.n	800de06 <etharp_query+0xfe>
 800ddf8:	4b5a      	ldr	r3, [pc, #360]	; (800df64 <etharp_query+0x25c>)
 800ddfa:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ddfe:	495d      	ldr	r1, [pc, #372]	; (800df74 <etharp_query+0x26c>)
 800de00:	485a      	ldr	r0, [pc, #360]	; (800df6c <etharp_query+0x264>)
 800de02:	f001 fe17 	bl	800fa34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d102      	bne.n	800de12 <etharp_query+0x10a>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d10c      	bne.n	800de2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800de12:	68b9      	ldr	r1, [r7, #8]
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	f000 f963 	bl	800e0e0 <etharp_request>
 800de1a:	4603      	mov	r3, r0
 800de1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <etharp_query+0x124>
      return result;
 800de26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800de2a:	e096      	b.n	800df5a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <etharp_query+0x138>
 800de32:	4b4c      	ldr	r3, [pc, #304]	; (800df64 <etharp_query+0x25c>)
 800de34:	f240 32e1 	movw	r2, #993	; 0x3e1
 800de38:	494f      	ldr	r1, [pc, #316]	; (800df78 <etharp_query+0x270>)
 800de3a:	484c      	ldr	r0, [pc, #304]	; (800df6c <etharp_query+0x264>)
 800de3c:	f001 fdfa 	bl	800fa34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800de40:	7c7a      	ldrb	r2, [r7, #17]
 800de42:	494b      	ldr	r1, [pc, #300]	; (800df70 <etharp_query+0x268>)
 800de44:	4613      	mov	r3, r2
 800de46:	005b      	lsls	r3, r3, #1
 800de48:	4413      	add	r3, r2
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	440b      	add	r3, r1
 800de4e:	3314      	adds	r3, #20
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d917      	bls.n	800de86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800de56:	4a49      	ldr	r2, [pc, #292]	; (800df7c <etharp_query+0x274>)
 800de58:	7c7b      	ldrb	r3, [r7, #17]
 800de5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800de5c:	7c7a      	ldrb	r2, [r7, #17]
 800de5e:	4613      	mov	r3, r2
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4413      	add	r3, r2
 800de64:	00db      	lsls	r3, r3, #3
 800de66:	3308      	adds	r3, #8
 800de68:	4a41      	ldr	r2, [pc, #260]	; (800df70 <etharp_query+0x268>)
 800de6a:	4413      	add	r3, r2
 800de6c:	3304      	adds	r3, #4
 800de6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de72:	9200      	str	r2, [sp, #0]
 800de74:	697a      	ldr	r2, [r7, #20]
 800de76:	6879      	ldr	r1, [r7, #4]
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f001 fc93 	bl	800f7a4 <ethernet_output>
 800de7e:	4603      	mov	r3, r0
 800de80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de84:	e067      	b.n	800df56 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800de86:	7c7a      	ldrb	r2, [r7, #17]
 800de88:	4939      	ldr	r1, [pc, #228]	; (800df70 <etharp_query+0x268>)
 800de8a:	4613      	mov	r3, r2
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4413      	add	r3, r2
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	440b      	add	r3, r1
 800de94:	3314      	adds	r3, #20
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d15c      	bne.n	800df56 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800de9c:	2300      	movs	r3, #0
 800de9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dea4:	e01c      	b.n	800dee0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	895a      	ldrh	r2, [r3, #10]
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	891b      	ldrh	r3, [r3, #8]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d10a      	bne.n	800dec8 <etharp_query+0x1c0>
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d006      	beq.n	800dec8 <etharp_query+0x1c0>
 800deba:	4b2a      	ldr	r3, [pc, #168]	; (800df64 <etharp_query+0x25c>)
 800debc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800dec0:	492f      	ldr	r1, [pc, #188]	; (800df80 <etharp_query+0x278>)
 800dec2:	482a      	ldr	r0, [pc, #168]	; (800df6c <etharp_query+0x264>)
 800dec4:	f001 fdb6 	bl	800fa34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	7b1b      	ldrb	r3, [r3, #12]
 800decc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <etharp_query+0x1d2>
        copy_needed = 1;
 800ded4:	2301      	movs	r3, #1
 800ded6:	61bb      	str	r3, [r7, #24]
        break;
 800ded8:	e005      	b.n	800dee6 <etharp_query+0x1de>
      }
      p = p->next;
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1df      	bne.n	800dea6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d007      	beq.n	800defc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	f44f 7120 	mov.w	r1, #640	; 0x280
 800def2:	200e      	movs	r0, #14
 800def4:	f7f7 fb8e 	bl	8005614 <pbuf_clone>
 800def8:	61f8      	str	r0, [r7, #28]
 800defa:	e004      	b.n	800df06 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800df00:	69f8      	ldr	r0, [r7, #28]
 800df02:	f7f7 f9bb 	bl	800527c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d021      	beq.n	800df50 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800df0c:	7c7a      	ldrb	r2, [r7, #17]
 800df0e:	4918      	ldr	r1, [pc, #96]	; (800df70 <etharp_query+0x268>)
 800df10:	4613      	mov	r3, r2
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	4413      	add	r3, r2
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	440b      	add	r3, r1
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00a      	beq.n	800df36 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800df20:	7c7a      	ldrb	r2, [r7, #17]
 800df22:	4913      	ldr	r1, [pc, #76]	; (800df70 <etharp_query+0x268>)
 800df24:	4613      	mov	r3, r2
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	4413      	add	r3, r2
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	440b      	add	r3, r1
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f7f7 f903 	bl	800513c <pbuf_free>
      }
      arp_table[i].q = p;
 800df36:	7c7a      	ldrb	r2, [r7, #17]
 800df38:	490d      	ldr	r1, [pc, #52]	; (800df70 <etharp_query+0x268>)
 800df3a:	4613      	mov	r3, r2
 800df3c:	005b      	lsls	r3, r3, #1
 800df3e:	4413      	add	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	440b      	add	r3, r1
 800df44:	69fa      	ldr	r2, [r7, #28]
 800df46:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df4e:	e002      	b.n	800df56 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800df50:	23ff      	movs	r3, #255	; 0xff
 800df52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800df56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3728      	adds	r7, #40	; 0x28
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	08012f2c 	.word	0x08012f2c
 800df68:	080130d8 	.word	0x080130d8
 800df6c:	08012fa4 	.word	0x08012fa4
 800df70:	2000a4ac 	.word	0x2000a4ac
 800df74:	080130e8 	.word	0x080130e8
 800df78:	080130cc 	.word	0x080130cc
 800df7c:	2000a59c 	.word	0x2000a59c
 800df80:	08013110 	.word	0x08013110

0800df84 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08a      	sub	sp, #40	; 0x28
 800df88:	af02      	add	r7, sp, #8
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800df92:	2300      	movs	r3, #0
 800df94:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d106      	bne.n	800dfaa <etharp_raw+0x26>
 800df9c:	4b3a      	ldr	r3, [pc, #232]	; (800e088 <etharp_raw+0x104>)
 800df9e:	f240 4257 	movw	r2, #1111	; 0x457
 800dfa2:	493a      	ldr	r1, [pc, #232]	; (800e08c <etharp_raw+0x108>)
 800dfa4:	483a      	ldr	r0, [pc, #232]	; (800e090 <etharp_raw+0x10c>)
 800dfa6:	f001 fd45 	bl	800fa34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800dfaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfae:	211c      	movs	r1, #28
 800dfb0:	200e      	movs	r0, #14
 800dfb2:	f7f6 fddf 	bl	8004b74 <pbuf_alloc>
 800dfb6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d102      	bne.n	800dfc4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800dfbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfc2:	e05d      	b.n	800e080 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	895b      	ldrh	r3, [r3, #10]
 800dfc8:	2b1b      	cmp	r3, #27
 800dfca:	d806      	bhi.n	800dfda <etharp_raw+0x56>
 800dfcc:	4b2e      	ldr	r3, [pc, #184]	; (800e088 <etharp_raw+0x104>)
 800dfce:	f240 4262 	movw	r2, #1122	; 0x462
 800dfd2:	4930      	ldr	r1, [pc, #192]	; (800e094 <etharp_raw+0x110>)
 800dfd4:	482e      	ldr	r0, [pc, #184]	; (800e090 <etharp_raw+0x10c>)
 800dfd6:	f001 fd2d 	bl	800fa34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800dfe0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7f5 fd40 	bl	8003a68 <lwip_htons>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	461a      	mov	r2, r3
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dff6:	2b06      	cmp	r3, #6
 800dff8:	d006      	beq.n	800e008 <etharp_raw+0x84>
 800dffa:	4b23      	ldr	r3, [pc, #140]	; (800e088 <etharp_raw+0x104>)
 800dffc:	f240 4269 	movw	r2, #1129	; 0x469
 800e000:	4925      	ldr	r1, [pc, #148]	; (800e098 <etharp_raw+0x114>)
 800e002:	4823      	ldr	r0, [pc, #140]	; (800e090 <etharp_raw+0x10c>)
 800e004:	f001 fd16 	bl	800fa34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	3308      	adds	r3, #8
 800e00c:	2206      	movs	r2, #6
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	4618      	mov	r0, r3
 800e012:	f001 fdea 	bl	800fbea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	3312      	adds	r3, #18
 800e01a:	2206      	movs	r2, #6
 800e01c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e01e:	4618      	mov	r0, r3
 800e020:	f001 fde3 	bl	800fbea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	330e      	adds	r3, #14
 800e028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e02a:	6812      	ldr	r2, [r2, #0]
 800e02c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	3318      	adds	r3, #24
 800e032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e034:	6812      	ldr	r2, [r2, #0]
 800e036:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2200      	movs	r2, #0
 800e03c:	701a      	strb	r2, [r3, #0]
 800e03e:	2200      	movs	r2, #0
 800e040:	f042 0201 	orr.w	r2, r2, #1
 800e044:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2200      	movs	r2, #0
 800e04a:	f042 0208 	orr.w	r2, r2, #8
 800e04e:	709a      	strb	r2, [r3, #2]
 800e050:	2200      	movs	r2, #0
 800e052:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	2206      	movs	r2, #6
 800e058:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2204      	movs	r2, #4
 800e05e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e060:	f640 0306 	movw	r3, #2054	; 0x806
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	69b9      	ldr	r1, [r7, #24]
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f001 fb99 	bl	800f7a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e072:	69b8      	ldr	r0, [r7, #24]
 800e074:	f7f7 f862 	bl	800513c <pbuf_free>
  p = NULL;
 800e078:	2300      	movs	r3, #0
 800e07a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e07c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3720      	adds	r7, #32
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	08012f2c 	.word	0x08012f2c
 800e08c:	0801307c 	.word	0x0801307c
 800e090:	08012fa4 	.word	0x08012fa4
 800e094:	0801312c 	.word	0x0801312c
 800e098:	08013160 	.word	0x08013160

0800e09c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b088      	sub	sp, #32
 800e0a0:	af04      	add	r7, sp, #16
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	9203      	str	r2, [sp, #12]
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	9202      	str	r2, [sp, #8]
 800e0c0:	4a06      	ldr	r2, [pc, #24]	; (800e0dc <etharp_request_dst+0x40>)
 800e0c2:	9201      	str	r2, [sp, #4]
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff ff5a 	bl	800df84 <etharp_raw>
 800e0d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	080136fc 	.word	0x080136fc

0800e0e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e0ea:	4a05      	ldr	r2, [pc, #20]	; (800e100 <etharp_request+0x20>)
 800e0ec:	6839      	ldr	r1, [r7, #0]
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff ffd4 	bl	800e09c <etharp_request_dst>
 800e0f4:	4603      	mov	r3, r0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	080136f4 	.word	0x080136f4

0800e104 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08e      	sub	sp, #56	; 0x38
 800e108:	af04      	add	r7, sp, #16
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e10e:	4b79      	ldr	r3, [pc, #484]	; (800e2f4 <icmp_input+0x1f0>)
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	f003 030f 	and.w	r3, r3, #15
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	b2db      	uxtb	r3, r3
 800e122:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e126:	2b13      	cmp	r3, #19
 800e128:	f240 80cd 	bls.w	800e2c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	895b      	ldrh	r3, [r3, #10]
 800e130:	2b03      	cmp	r3, #3
 800e132:	f240 80ca 	bls.w	800e2ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e140:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 80b7 	beq.w	800e2b8 <icmp_input+0x1b4>
 800e14a:	2b08      	cmp	r3, #8
 800e14c:	f040 80b7 	bne.w	800e2be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e150:	4b69      	ldr	r3, [pc, #420]	; (800e2f8 <icmp_input+0x1f4>)
 800e152:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e154:	4b67      	ldr	r3, [pc, #412]	; (800e2f4 <icmp_input+0x1f0>)
 800e156:	695b      	ldr	r3, [r3, #20]
 800e158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e15c:	2be0      	cmp	r3, #224	; 0xe0
 800e15e:	f000 80bb 	beq.w	800e2d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e162:	4b64      	ldr	r3, [pc, #400]	; (800e2f4 <icmp_input+0x1f0>)
 800e164:	695b      	ldr	r3, [r3, #20]
 800e166:	4a63      	ldr	r2, [pc, #396]	; (800e2f4 <icmp_input+0x1f0>)
 800e168:	6812      	ldr	r2, [r2, #0]
 800e16a:	4611      	mov	r1, r2
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 fc0b 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	f040 80b1 	bne.w	800e2dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	891b      	ldrh	r3, [r3, #8]
 800e17e:	2b07      	cmp	r3, #7
 800e180:	f240 80a5 	bls.w	800e2ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e186:	330e      	adds	r3, #14
 800e188:	4619      	mov	r1, r3
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7f6 ff40 	bl	8005010 <pbuf_add_header>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d04b      	beq.n	800e22e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	891a      	ldrh	r2, [r3, #8]
 800e19a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e19c:	4413      	add	r3, r2
 800e19e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	891b      	ldrh	r3, [r3, #8]
 800e1a4:	8b7a      	ldrh	r2, [r7, #26]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	f0c0 809a 	bcc.w	800e2e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e1ac:	8b7b      	ldrh	r3, [r7, #26]
 800e1ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	200e      	movs	r0, #14
 800e1b6:	f7f6 fcdd 	bl	8004b74 <pbuf_alloc>
 800e1ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f000 8090 	beq.w	800e2e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	895b      	ldrh	r3, [r3, #10]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d203      	bcs.n	800e1da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e1d2:	6978      	ldr	r0, [r7, #20]
 800e1d4:	f7f6 ffb2 	bl	800513c <pbuf_free>
          goto icmperr;
 800e1d8:	e085      	b.n	800e2e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e1e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f001 fd01 	bl	800fbea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e1e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6978      	ldr	r0, [r7, #20]
 800e1ee:	f7f6 ff1f 	bl	8005030 <pbuf_remove_header>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d009      	beq.n	800e20c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e1f8:	4b40      	ldr	r3, [pc, #256]	; (800e2fc <icmp_input+0x1f8>)
 800e1fa:	22b6      	movs	r2, #182	; 0xb6
 800e1fc:	4940      	ldr	r1, [pc, #256]	; (800e300 <icmp_input+0x1fc>)
 800e1fe:	4841      	ldr	r0, [pc, #260]	; (800e304 <icmp_input+0x200>)
 800e200:	f001 fc18 	bl	800fa34 <iprintf>
          pbuf_free(r);
 800e204:	6978      	ldr	r0, [r7, #20]
 800e206:	f7f6 ff99 	bl	800513c <pbuf_free>
          goto icmperr;
 800e20a:	e06c      	b.n	800e2e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e20c:	6879      	ldr	r1, [r7, #4]
 800e20e:	6978      	ldr	r0, [r7, #20]
 800e210:	f7f7 f8bc 	bl	800538c <pbuf_copy>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d003      	beq.n	800e222 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e21a:	6978      	ldr	r0, [r7, #20]
 800e21c:	f7f6 ff8e 	bl	800513c <pbuf_free>
          goto icmperr;
 800e220:	e061      	b.n	800e2e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7f6 ff8a 	bl	800513c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	607b      	str	r3, [r7, #4]
 800e22c:	e00f      	b.n	800e24e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e22e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e230:	330e      	adds	r3, #14
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7f6 fefb 	bl	8005030 <pbuf_remove_header>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d006      	beq.n	800e24e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e240:	4b2e      	ldr	r3, [pc, #184]	; (800e2fc <icmp_input+0x1f8>)
 800e242:	22c7      	movs	r2, #199	; 0xc7
 800e244:	4930      	ldr	r1, [pc, #192]	; (800e308 <icmp_input+0x204>)
 800e246:	482f      	ldr	r0, [pc, #188]	; (800e304 <icmp_input+0x200>)
 800e248:	f001 fbf4 	bl	800fa34 <iprintf>
          goto icmperr;
 800e24c:	e04b      	b.n	800e2e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7f6 fed9 	bl	8005010 <pbuf_add_header>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d12b      	bne.n	800e2bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e272:	4b20      	ldr	r3, [pc, #128]	; (800e2f4 <icmp_input+0x1f0>)
 800e274:	691a      	ldr	r2, [r3, #16]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	2200      	movs	r2, #0
 800e27e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	2200      	movs	r2, #0
 800e284:	709a      	strb	r2, [r3, #2]
 800e286:	2200      	movs	r2, #0
 800e288:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	22ff      	movs	r2, #255	; 0xff
 800e28e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	729a      	strb	r2, [r3, #10]
 800e296:	2200      	movs	r2, #0
 800e298:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	9302      	str	r3, [sp, #8]
 800e29e:	2301      	movs	r3, #1
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	23ff      	movs	r3, #255	; 0xff
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	69f9      	ldr	r1, [r7, #28]
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 fa93 	bl	800e7d8 <ip4_output_if>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e2b6:	e001      	b.n	800e2bc <icmp_input+0x1b8>
      break;
 800e2b8:	bf00      	nop
 800e2ba:	e000      	b.n	800e2be <icmp_input+0x1ba>
      break;
 800e2bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f7f6 ff3c 	bl	800513c <pbuf_free>
  return;
 800e2c4:	e013      	b.n	800e2ee <icmp_input+0x1ea>
    goto lenerr;
 800e2c6:	bf00      	nop
 800e2c8:	e002      	b.n	800e2d0 <icmp_input+0x1cc>
    goto lenerr;
 800e2ca:	bf00      	nop
 800e2cc:	e000      	b.n	800e2d0 <icmp_input+0x1cc>
        goto lenerr;
 800e2ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7f6 ff33 	bl	800513c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e2d6:	e00a      	b.n	800e2ee <icmp_input+0x1ea>
        goto icmperr;
 800e2d8:	bf00      	nop
 800e2da:	e004      	b.n	800e2e6 <icmp_input+0x1e2>
        goto icmperr;
 800e2dc:	bf00      	nop
 800e2de:	e002      	b.n	800e2e6 <icmp_input+0x1e2>
          goto icmperr;
 800e2e0:	bf00      	nop
 800e2e2:	e000      	b.n	800e2e6 <icmp_input+0x1e2>
          goto icmperr;
 800e2e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7f6 ff28 	bl	800513c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e2ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e2ee:	3728      	adds	r7, #40	; 0x28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20004cc8 	.word	0x20004cc8
 800e2f8:	20004cdc 	.word	0x20004cdc
 800e2fc:	080131a4 	.word	0x080131a4
 800e300:	080131dc 	.word	0x080131dc
 800e304:	08013214 	.word	0x08013214
 800e308:	0801323c 	.word	0x0801323c

0800e30c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	460b      	mov	r3, r1
 800e316:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e318:	78fb      	ldrb	r3, [r7, #3]
 800e31a:	461a      	mov	r2, r3
 800e31c:	2103      	movs	r1, #3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f814 	bl	800e34c <icmp_send_response>
}
 800e324:	bf00      	nop
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	460b      	mov	r3, r1
 800e336:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e338:	78fb      	ldrb	r3, [r7, #3]
 800e33a:	461a      	mov	r2, r3
 800e33c:	210b      	movs	r1, #11
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f804 	bl	800e34c <icmp_send_response>
}
 800e344:	bf00      	nop
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08c      	sub	sp, #48	; 0x30
 800e350:	af04      	add	r7, sp, #16
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	70fb      	strb	r3, [r7, #3]
 800e358:	4613      	mov	r3, r2
 800e35a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e35c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e360:	2124      	movs	r1, #36	; 0x24
 800e362:	2022      	movs	r0, #34	; 0x22
 800e364:	f7f6 fc06 	bl	8004b74 <pbuf_alloc>
 800e368:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d04c      	beq.n	800e40a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	895b      	ldrh	r3, [r3, #10]
 800e374:	2b23      	cmp	r3, #35	; 0x23
 800e376:	d806      	bhi.n	800e386 <icmp_send_response+0x3a>
 800e378:	4b26      	ldr	r3, [pc, #152]	; (800e414 <icmp_send_response+0xc8>)
 800e37a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e37e:	4926      	ldr	r1, [pc, #152]	; (800e418 <icmp_send_response+0xcc>)
 800e380:	4826      	ldr	r0, [pc, #152]	; (800e41c <icmp_send_response+0xd0>)
 800e382:	f001 fb57 	bl	800fa34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	78fa      	ldrb	r2, [r7, #3]
 800e396:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	78ba      	ldrb	r2, [r7, #2]
 800e39c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	711a      	strb	r2, [r3, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	719a      	strb	r2, [r3, #6]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	f103 0008 	add.w	r0, r3, #8
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	221c      	movs	r2, #28
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	f001 fc12 	bl	800fbea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e3cc:	f107 030c 	add.w	r3, r7, #12
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 f825 	bl	800e420 <ip4_route>
 800e3d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d011      	beq.n	800e402 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	709a      	strb	r2, [r3, #2]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e3e8:	f107 020c 	add.w	r2, r7, #12
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	9302      	str	r3, [sp, #8]
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	9301      	str	r3, [sp, #4]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	9300      	str	r3, [sp, #0]
 800e3f8:	23ff      	movs	r3, #255	; 0xff
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	69f8      	ldr	r0, [r7, #28]
 800e3fe:	f000 f9eb 	bl	800e7d8 <ip4_output_if>
  }
  pbuf_free(q);
 800e402:	69f8      	ldr	r0, [r7, #28]
 800e404:	f7f6 fe9a 	bl	800513c <pbuf_free>
 800e408:	e000      	b.n	800e40c <icmp_send_response+0xc0>
    return;
 800e40a:	bf00      	nop
}
 800e40c:	3720      	adds	r7, #32
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	080131a4 	.word	0x080131a4
 800e418:	08013270 	.word	0x08013270
 800e41c:	08013214 	.word	0x08013214

0800e420 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e428:	4b33      	ldr	r3, [pc, #204]	; (800e4f8 <ip4_route+0xd8>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60fb      	str	r3, [r7, #12]
 800e42e:	e036      	b.n	800e49e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d02b      	beq.n	800e498 <ip4_route+0x78>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e446:	089b      	lsrs	r3, r3, #2
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d022      	beq.n	800e498 <ip4_route+0x78>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3304      	adds	r3, #4
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d01d      	beq.n	800e498 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	3304      	adds	r3, #4
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	405a      	eors	r2, r3
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3308      	adds	r3, #8
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4013      	ands	r3, r2
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	e038      	b.n	800e4ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e47e:	f003 0302 	and.w	r3, r3, #2
 800e482:	2b00      	cmp	r3, #0
 800e484:	d108      	bne.n	800e498 <ip4_route+0x78>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	330c      	adds	r3, #12
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	429a      	cmp	r2, r3
 800e492:	d101      	bne.n	800e498 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	e028      	b.n	800e4ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	60fb      	str	r3, [r7, #12]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1c5      	bne.n	800e430 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e4a4:	4b15      	ldr	r3, [pc, #84]	; (800e4fc <ip4_route+0xdc>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d01a      	beq.n	800e4e2 <ip4_route+0xc2>
 800e4ac:	4b13      	ldr	r3, [pc, #76]	; (800e4fc <ip4_route+0xdc>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d012      	beq.n	800e4e2 <ip4_route+0xc2>
 800e4bc:	4b0f      	ldr	r3, [pc, #60]	; (800e4fc <ip4_route+0xdc>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e4c4:	f003 0304 	and.w	r3, r3, #4
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00a      	beq.n	800e4e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e4cc:	4b0b      	ldr	r3, [pc, #44]	; (800e4fc <ip4_route+0xdc>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	3304      	adds	r3, #4
 800e4d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d004      	beq.n	800e4e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	2b7f      	cmp	r3, #127	; 0x7f
 800e4e0:	d101      	bne.n	800e4e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e001      	b.n	800e4ea <ip4_route+0xca>
  }

  return netif_default;
 800e4e6:	4b05      	ldr	r3, [pc, #20]	; (800e4fc <ip4_route+0xdc>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	2000a40c 	.word	0x2000a40c
 800e4fc:	2000a410 	.word	0x2000a410

0800e500 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	b2db      	uxtb	r3, r3
 800e514:	2b00      	cmp	r3, #0
 800e516:	d016      	beq.n	800e546 <ip4_input_accept+0x46>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3304      	adds	r3, #4
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d011      	beq.n	800e546 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e522:	4b0b      	ldr	r3, [pc, #44]	; (800e550 <ip4_input_accept+0x50>)
 800e524:	695a      	ldr	r2, [r3, #20]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	3304      	adds	r3, #4
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d008      	beq.n	800e542 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e530:	4b07      	ldr	r3, [pc, #28]	; (800e550 <ip4_input_accept+0x50>)
 800e532:	695b      	ldr	r3, [r3, #20]
 800e534:	6879      	ldr	r1, [r7, #4]
 800e536:	4618      	mov	r0, r3
 800e538:	f000 fa26 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800e53c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e542:	2301      	movs	r3, #1
 800e544:	e000      	b.n	800e548 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20004cc8 	.word	0x20004cc8

0800e554 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800e55e:	2301      	movs	r3, #1
 800e560:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	091b      	lsrs	r3, r3, #4
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	2b04      	cmp	r3, #4
 800e572:	d004      	beq.n	800e57e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7f6 fde1 	bl	800513c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e57a:	2300      	movs	r3, #0
 800e57c:	e123      	b.n	800e7c6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	f003 030f 	and.w	r3, r3, #15
 800e586:	b2db      	uxtb	r3, r3
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	885b      	ldrh	r3, [r3, #2]
 800e592:	b29b      	uxth	r3, r3
 800e594:	4618      	mov	r0, r3
 800e596:	f7f5 fa67 	bl	8003a68 <lwip_htons>
 800e59a:	4603      	mov	r3, r0
 800e59c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	891b      	ldrh	r3, [r3, #8]
 800e5a2:	8a3a      	ldrh	r2, [r7, #16]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d204      	bcs.n	800e5b2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800e5a8:	8a3b      	ldrh	r3, [r7, #16]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7f6 fc3f 	bl	8004e30 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	895b      	ldrh	r3, [r3, #10]
 800e5b6:	8a7a      	ldrh	r2, [r7, #18]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d807      	bhi.n	800e5cc <ip4_input+0x78>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	891b      	ldrh	r3, [r3, #8]
 800e5c0:	8a3a      	ldrh	r2, [r7, #16]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d802      	bhi.n	800e5cc <ip4_input+0x78>
 800e5c6:	8a7b      	ldrh	r3, [r7, #18]
 800e5c8:	2b13      	cmp	r3, #19
 800e5ca:	d804      	bhi.n	800e5d6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7f6 fdb5 	bl	800513c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	e0f7      	b.n	800e7c6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	691b      	ldr	r3, [r3, #16]
 800e5da:	4a7d      	ldr	r2, [pc, #500]	; (800e7d0 <ip4_input+0x27c>)
 800e5dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e5de:	69fb      	ldr	r3, [r7, #28]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	4a7b      	ldr	r2, [pc, #492]	; (800e7d0 <ip4_input+0x27c>)
 800e5e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e5e6:	4b7a      	ldr	r3, [pc, #488]	; (800e7d0 <ip4_input+0x27c>)
 800e5e8:	695b      	ldr	r3, [r3, #20]
 800e5ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5ee:	2be0      	cmp	r3, #224	; 0xe0
 800e5f0:	d112      	bne.n	800e618 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d007      	beq.n	800e612 <ip4_input+0xbe>
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	3304      	adds	r3, #4
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <ip4_input+0xbe>
      netif = inp;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	61bb      	str	r3, [r7, #24]
 800e610:	e02a      	b.n	800e668 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e612:	2300      	movs	r3, #0
 800e614:	61bb      	str	r3, [r7, #24]
 800e616:	e027      	b.n	800e668 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e618:	6838      	ldr	r0, [r7, #0]
 800e61a:	f7ff ff71 	bl	800e500 <ip4_input_accept>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <ip4_input+0xd6>
      netif = inp;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	61bb      	str	r3, [r7, #24]
 800e628:	e01e      	b.n	800e668 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e62a:	2300      	movs	r3, #0
 800e62c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e62e:	4b68      	ldr	r3, [pc, #416]	; (800e7d0 <ip4_input+0x27c>)
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	b2db      	uxtb	r3, r3
 800e634:	2b7f      	cmp	r3, #127	; 0x7f
 800e636:	d017      	beq.n	800e668 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e638:	4b66      	ldr	r3, [pc, #408]	; (800e7d4 <ip4_input+0x280>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	61bb      	str	r3, [r7, #24]
 800e63e:	e00e      	b.n	800e65e <ip4_input+0x10a>
          if (netif == inp) {
 800e640:	69ba      	ldr	r2, [r7, #24]
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	d006      	beq.n	800e656 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e648:	69b8      	ldr	r0, [r7, #24]
 800e64a:	f7ff ff59 	bl	800e500 <ip4_input_accept>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d108      	bne.n	800e666 <ip4_input+0x112>
 800e654:	e000      	b.n	800e658 <ip4_input+0x104>
            continue;
 800e656:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	61bb      	str	r3, [r7, #24]
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1ed      	bne.n	800e640 <ip4_input+0xec>
 800e664:	e000      	b.n	800e668 <ip4_input+0x114>
            break;
 800e666:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d111      	bne.n	800e692 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	7a5b      	ldrb	r3, [r3, #9]
 800e672:	2b11      	cmp	r3, #17
 800e674:	d10d      	bne.n	800e692 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800e676:	8a7b      	ldrh	r3, [r7, #18]
 800e678:	69fa      	ldr	r2, [r7, #28]
 800e67a:	4413      	add	r3, r2
 800e67c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	885b      	ldrh	r3, [r3, #2]
 800e682:	b29b      	uxth	r3, r3
 800e684:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800e688:	d103      	bne.n	800e692 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800e68e:	2300      	movs	r3, #0
 800e690:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d017      	beq.n	800e6c8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800e698:	4b4d      	ldr	r3, [pc, #308]	; (800e7d0 <ip4_input+0x27c>)
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d013      	beq.n	800e6c8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e6a0:	4b4b      	ldr	r3, [pc, #300]	; (800e7d0 <ip4_input+0x27c>)
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f000 f96e 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d105      	bne.n	800e6be <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e6b2:	4b47      	ldr	r3, [pc, #284]	; (800e7d0 <ip4_input+0x27c>)
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e6ba:	2be0      	cmp	r3, #224	; 0xe0
 800e6bc:	d104      	bne.n	800e6c8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7f6 fd3c 	bl	800513c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	e07e      	b.n	800e7c6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d104      	bne.n	800e6d8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f7f6 fd34 	bl	800513c <pbuf_free>
    return ERR_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e076      	b.n	800e7c6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	88db      	ldrh	r3, [r3, #6]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	461a      	mov	r2, r3
 800e6e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00b      	beq.n	800e702 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 fc92 	bl	800f014 <ip4_reass>
 800e6f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d101      	bne.n	800e6fc <ip4_input+0x1a8>
      return ERR_OK;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	e064      	b.n	800e7c6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e702:	4a33      	ldr	r2, [pc, #204]	; (800e7d0 <ip4_input+0x27c>)
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e708:	4a31      	ldr	r2, [pc, #196]	; (800e7d0 <ip4_input+0x27c>)
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e70e:	4a30      	ldr	r2, [pc, #192]	; (800e7d0 <ip4_input+0x27c>)
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	f003 030f 	and.w	r3, r3, #15
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	b2db      	uxtb	r3, r3
 800e722:	b29a      	uxth	r2, r3
 800e724:	4b2a      	ldr	r3, [pc, #168]	; (800e7d0 <ip4_input+0x27c>)
 800e726:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e728:	8a7b      	ldrh	r3, [r7, #18]
 800e72a:	4619      	mov	r1, r3
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7f6 fc7f 	bl	8005030 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	7a5b      	ldrb	r3, [r3, #9]
 800e736:	2b11      	cmp	r3, #17
 800e738:	d006      	beq.n	800e748 <ip4_input+0x1f4>
 800e73a:	2b11      	cmp	r3, #17
 800e73c:	dc13      	bgt.n	800e766 <ip4_input+0x212>
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d00c      	beq.n	800e75c <ip4_input+0x208>
 800e742:	2b06      	cmp	r3, #6
 800e744:	d005      	beq.n	800e752 <ip4_input+0x1fe>
 800e746:	e00e      	b.n	800e766 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e748:	6839      	ldr	r1, [r7, #0]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7fc fae8 	bl	800ad20 <udp_input>
        break;
 800e750:	e026      	b.n	800e7a0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e752:	6839      	ldr	r1, [r7, #0]
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7f8 fb29 	bl	8006dac <tcp_input>
        break;
 800e75a:	e021      	b.n	800e7a0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff fcd0 	bl	800e104 <icmp_input>
        break;
 800e764:	e01c      	b.n	800e7a0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e766:	4b1a      	ldr	r3, [pc, #104]	; (800e7d0 <ip4_input+0x27c>)
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	69b9      	ldr	r1, [r7, #24]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f000 f90b 	bl	800e988 <ip4_addr_isbroadcast_u32>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10f      	bne.n	800e798 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e778:	4b15      	ldr	r3, [pc, #84]	; (800e7d0 <ip4_input+0x27c>)
 800e77a:	695b      	ldr	r3, [r3, #20]
 800e77c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e780:	2be0      	cmp	r3, #224	; 0xe0
 800e782:	d009      	beq.n	800e798 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e788:	4619      	mov	r1, r3
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7f6 fcc3 	bl	8005116 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e790:	2102      	movs	r1, #2
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7ff fdba 	bl	800e30c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7f6 fccf 	bl	800513c <pbuf_free>
        break;
 800e79e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e7a0:	4b0b      	ldr	r3, [pc, #44]	; (800e7d0 <ip4_input+0x27c>)
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e7a6:	4b0a      	ldr	r3, [pc, #40]	; (800e7d0 <ip4_input+0x27c>)
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e7ac:	4b08      	ldr	r3, [pc, #32]	; (800e7d0 <ip4_input+0x27c>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e7b2:	4b07      	ldr	r3, [pc, #28]	; (800e7d0 <ip4_input+0x27c>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e7b8:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <ip4_input+0x27c>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e7be:	4b04      	ldr	r3, [pc, #16]	; (800e7d0 <ip4_input+0x27c>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3720      	adds	r7, #32
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	20004cc8 	.word	0x20004cc8
 800e7d4:	2000a40c 	.word	0x2000a40c

0800e7d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08a      	sub	sp, #40	; 0x28
 800e7dc:	af04      	add	r7, sp, #16
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d009      	beq.n	800e804 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <ip4_output_if+0x26>
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d102      	bne.n	800e804 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e800:	3304      	adds	r3, #4
 800e802:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e804:	78fa      	ldrb	r2, [r7, #3]
 800e806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e808:	9302      	str	r3, [sp, #8]
 800e80a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	4613      	mov	r3, r2
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	6979      	ldr	r1, [r7, #20]
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f000 f805 	bl	800e82c <ip4_output_if_src>
 800e822:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e824:	4618      	mov	r0, r3
 800e826:	3718      	adds	r7, #24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	7b9b      	ldrb	r3, [r3, #14]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d006      	beq.n	800e850 <ip4_output_if_src+0x24>
 800e842:	4b4b      	ldr	r3, [pc, #300]	; (800e970 <ip4_output_if_src+0x144>)
 800e844:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e848:	494a      	ldr	r1, [pc, #296]	; (800e974 <ip4_output_if_src+0x148>)
 800e84a:	484b      	ldr	r0, [pc, #300]	; (800e978 <ip4_output_if_src+0x14c>)
 800e84c:	f001 f8f2 	bl	800fa34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d060      	beq.n	800e918 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e856:	2314      	movs	r3, #20
 800e858:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e85a:	2114      	movs	r1, #20
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f7f6 fbd7 	bl	8005010 <pbuf_add_header>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e868:	f06f 0301 	mvn.w	r3, #1
 800e86c:	e07c      	b.n	800e968 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	895b      	ldrh	r3, [r3, #10]
 800e878:	2b13      	cmp	r3, #19
 800e87a:	d806      	bhi.n	800e88a <ip4_output_if_src+0x5e>
 800e87c:	4b3c      	ldr	r3, [pc, #240]	; (800e970 <ip4_output_if_src+0x144>)
 800e87e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e882:	493e      	ldr	r1, [pc, #248]	; (800e97c <ip4_output_if_src+0x150>)
 800e884:	483c      	ldr	r0, [pc, #240]	; (800e978 <ip4_output_if_src+0x14c>)
 800e886:	f001 f8d5 	bl	800fa34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	78fa      	ldrb	r2, [r7, #3]
 800e88e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e896:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e8a0:	8b7b      	ldrh	r3, [r7, #26]
 800e8a2:	089b      	lsrs	r3, r3, #2
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e8b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	891b      	ldrh	r3, [r3, #8]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7f5 f8d2 	bl	8003a68 <lwip_htons>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	719a      	strb	r2, [r3, #6]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e8d6:	4b2a      	ldr	r3, [pc, #168]	; (800e980 <ip4_output_if_src+0x154>)
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7f5 f8c4 	bl	8003a68 <lwip_htons>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e8e8:	4b25      	ldr	r3, [pc, #148]	; (800e980 <ip4_output_if_src+0x154>)
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	4b23      	ldr	r3, [pc, #140]	; (800e980 <ip4_output_if_src+0x154>)
 800e8f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d104      	bne.n	800e904 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e8fa:	4b22      	ldr	r3, [pc, #136]	; (800e984 <ip4_output_if_src+0x158>)
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	60da      	str	r2, [r3, #12]
 800e902:	e003      	b.n	800e90c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	2200      	movs	r2, #0
 800e910:	729a      	strb	r2, [r3, #10]
 800e912:	2200      	movs	r2, #0
 800e914:	72da      	strb	r2, [r3, #11]
 800e916:	e00f      	b.n	800e938 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	895b      	ldrh	r3, [r3, #10]
 800e91c:	2b13      	cmp	r3, #19
 800e91e:	d802      	bhi.n	800e926 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e920:	f06f 0301 	mvn.w	r3, #1
 800e924:	e020      	b.n	800e968 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e932:	f107 0314 	add.w	r3, r7, #20
 800e936:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00c      	beq.n	800e95a <ip4_output_if_src+0x12e>
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	891a      	ldrh	r2, [r3, #8]
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e948:	429a      	cmp	r2, r3
 800e94a:	d906      	bls.n	800e95a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 fd53 	bl	800f3fc <ip4_frag>
 800e956:	4603      	mov	r3, r0
 800e958:	e006      	b.n	800e968 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	68f9      	ldr	r1, [r7, #12]
 800e962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e964:	4798      	blx	r3
 800e966:	4603      	mov	r3, r0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3720      	adds	r7, #32
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	0801329c 	.word	0x0801329c
 800e974:	080132d0 	.word	0x080132d0
 800e978:	080132dc 	.word	0x080132dc
 800e97c:	08013304 	.word	0x08013304
 800e980:	2000a59e 	.word	0x2000a59e
 800e984:	080136ec 	.word	0x080136ec

0800e988 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e99c:	d002      	beq.n	800e9a4 <ip4_addr_isbroadcast_u32+0x1c>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e02a      	b.n	800e9fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9ae:	f003 0302 	and.w	r3, r3, #2
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e021      	b.n	800e9fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	3304      	adds	r3, #4
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d101      	bne.n	800e9ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e019      	b.n	800e9fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	405a      	eors	r2, r3
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4013      	ands	r3, r2
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10d      	bne.n	800e9fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	3308      	adds	r3, #8
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	43da      	mvns	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d101      	bne.n	800e9fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e000      	b.n	800e9fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e9fc:	2300      	movs	r3, #0
  }
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
	...

0800ea0c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ea12:	2300      	movs	r3, #0
 800ea14:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ea16:	4b12      	ldr	r3, [pc, #72]	; (800ea60 <ip_reass_tmr+0x54>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ea1c:	e018      	b.n	800ea50 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	7fdb      	ldrb	r3, [r3, #31]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00b      	beq.n	800ea3e <ip_reass_tmr+0x32>
      r->timer--;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	7fdb      	ldrb	r3, [r3, #31]
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	b2da      	uxtb	r2, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	60fb      	str	r3, [r7, #12]
 800ea3c:	e008      	b.n	800ea50 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ea48:	68b9      	ldr	r1, [r7, #8]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f80a 	bl	800ea64 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1e3      	bne.n	800ea1e <ip_reass_tmr+0x12>
    }
  }
}
 800ea56:	bf00      	nop
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	2000a5a0 	.word	0x2000a5a0

0800ea64 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b088      	sub	sp, #32
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ea72:	683a      	ldr	r2, [r7, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d105      	bne.n	800ea86 <ip_reass_free_complete_datagram+0x22>
 800ea7a:	4b45      	ldr	r3, [pc, #276]	; (800eb90 <ip_reass_free_complete_datagram+0x12c>)
 800ea7c:	22ab      	movs	r2, #171	; 0xab
 800ea7e:	4945      	ldr	r1, [pc, #276]	; (800eb94 <ip_reass_free_complete_datagram+0x130>)
 800ea80:	4845      	ldr	r0, [pc, #276]	; (800eb98 <ip_reass_free_complete_datagram+0x134>)
 800ea82:	f000 ffd7 	bl	800fa34 <iprintf>
  if (prev != NULL) {
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00a      	beq.n	800eaa2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d005      	beq.n	800eaa2 <ip_reass_free_complete_datagram+0x3e>
 800ea96:	4b3e      	ldr	r3, [pc, #248]	; (800eb90 <ip_reass_free_complete_datagram+0x12c>)
 800ea98:	22ad      	movs	r2, #173	; 0xad
 800ea9a:	4940      	ldr	r1, [pc, #256]	; (800eb9c <ip_reass_free_complete_datagram+0x138>)
 800ea9c:	483e      	ldr	r0, [pc, #248]	; (800eb98 <ip_reass_free_complete_datagram+0x134>)
 800ea9e:	f000 ffc9 	bl	800fa34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	889b      	ldrh	r3, [r3, #4]
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d12a      	bne.n	800eb0a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	6858      	ldr	r0, [r3, #4]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3308      	adds	r3, #8
 800eaca:	2214      	movs	r2, #20
 800eacc:	4619      	mov	r1, r3
 800eace:	f001 f88c 	bl	800fbea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ead2:	2101      	movs	r1, #1
 800ead4:	69b8      	ldr	r0, [r7, #24]
 800ead6:	f7ff fc29 	bl	800e32c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800eada:	69b8      	ldr	r0, [r7, #24]
 800eadc:	f7f6 fbb6 	bl	800524c <pbuf_clen>
 800eae0:	4603      	mov	r3, r0
 800eae2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eae4:	8bfa      	ldrh	r2, [r7, #30]
 800eae6:	8a7b      	ldrh	r3, [r7, #18]
 800eae8:	4413      	add	r3, r2
 800eaea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaee:	db05      	blt.n	800eafc <ip_reass_free_complete_datagram+0x98>
 800eaf0:	4b27      	ldr	r3, [pc, #156]	; (800eb90 <ip_reass_free_complete_datagram+0x12c>)
 800eaf2:	22bc      	movs	r2, #188	; 0xbc
 800eaf4:	492a      	ldr	r1, [pc, #168]	; (800eba0 <ip_reass_free_complete_datagram+0x13c>)
 800eaf6:	4828      	ldr	r0, [pc, #160]	; (800eb98 <ip_reass_free_complete_datagram+0x134>)
 800eaf8:	f000 ff9c 	bl	800fa34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800eafc:	8bfa      	ldrh	r2, [r7, #30]
 800eafe:	8a7b      	ldrh	r3, [r7, #18]
 800eb00:	4413      	add	r3, r2
 800eb02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800eb04:	69b8      	ldr	r0, [r7, #24]
 800eb06:	f7f6 fb19 	bl	800513c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800eb10:	e01f      	b.n	800eb52 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	617b      	str	r3, [r7, #20]
    pcur = p;
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f7f6 fb92 	bl	800524c <pbuf_clen>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eb2c:	8bfa      	ldrh	r2, [r7, #30]
 800eb2e:	8a7b      	ldrh	r3, [r7, #18]
 800eb30:	4413      	add	r3, r2
 800eb32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb36:	db05      	blt.n	800eb44 <ip_reass_free_complete_datagram+0xe0>
 800eb38:	4b15      	ldr	r3, [pc, #84]	; (800eb90 <ip_reass_free_complete_datagram+0x12c>)
 800eb3a:	22cc      	movs	r2, #204	; 0xcc
 800eb3c:	4918      	ldr	r1, [pc, #96]	; (800eba0 <ip_reass_free_complete_datagram+0x13c>)
 800eb3e:	4816      	ldr	r0, [pc, #88]	; (800eb98 <ip_reass_free_complete_datagram+0x134>)
 800eb40:	f000 ff78 	bl	800fa34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800eb44:	8bfa      	ldrh	r2, [r7, #30]
 800eb46:	8a7b      	ldrh	r3, [r7, #18]
 800eb48:	4413      	add	r3, r2
 800eb4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f7f6 faf5 	bl	800513c <pbuf_free>
  while (p != NULL) {
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1dc      	bne.n	800eb12 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f8c2 	bl	800ece4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800eb60:	4b10      	ldr	r3, [pc, #64]	; (800eba4 <ip_reass_free_complete_datagram+0x140>)
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	8bfa      	ldrh	r2, [r7, #30]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d905      	bls.n	800eb76 <ip_reass_free_complete_datagram+0x112>
 800eb6a:	4b09      	ldr	r3, [pc, #36]	; (800eb90 <ip_reass_free_complete_datagram+0x12c>)
 800eb6c:	22d2      	movs	r2, #210	; 0xd2
 800eb6e:	490e      	ldr	r1, [pc, #56]	; (800eba8 <ip_reass_free_complete_datagram+0x144>)
 800eb70:	4809      	ldr	r0, [pc, #36]	; (800eb98 <ip_reass_free_complete_datagram+0x134>)
 800eb72:	f000 ff5f 	bl	800fa34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800eb76:	4b0b      	ldr	r3, [pc, #44]	; (800eba4 <ip_reass_free_complete_datagram+0x140>)
 800eb78:	881a      	ldrh	r2, [r3, #0]
 800eb7a:	8bfb      	ldrh	r3, [r7, #30]
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	b29a      	uxth	r2, r3
 800eb80:	4b08      	ldr	r3, [pc, #32]	; (800eba4 <ip_reass_free_complete_datagram+0x140>)
 800eb82:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800eb84:	8bfb      	ldrh	r3, [r7, #30]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3720      	adds	r7, #32
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	08013334 	.word	0x08013334
 800eb94:	08013370 	.word	0x08013370
 800eb98:	0801337c 	.word	0x0801337c
 800eb9c:	080133a4 	.word	0x080133a4
 800eba0:	080133b8 	.word	0x080133b8
 800eba4:	2000a5a4 	.word	0x2000a5a4
 800eba8:	080133d8 	.word	0x080133d8

0800ebac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08a      	sub	sp, #40	; 0x28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ebca:	4b28      	ldr	r3, [pc, #160]	; (800ec6c <ip_reass_remove_oldest_datagram+0xc0>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ebd0:	e030      	b.n	800ec34 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	695a      	ldr	r2, [r3, #20]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d10c      	bne.n	800ebf8 <ip_reass_remove_oldest_datagram+0x4c>
 800ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe0:	699a      	ldr	r2, [r3, #24]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	691b      	ldr	r3, [r3, #16]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d106      	bne.n	800ebf8 <ip_reass_remove_oldest_datagram+0x4c>
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	899a      	ldrh	r2, [r3, #12]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	889b      	ldrh	r3, [r3, #4]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d014      	beq.n	800ec22 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ebfe:	6a3b      	ldr	r3, [r7, #32]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d104      	bne.n	800ec0e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec06:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	61bb      	str	r3, [r7, #24]
 800ec0c:	e009      	b.n	800ec22 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ec0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec10:	7fda      	ldrb	r2, [r3, #31]
 800ec12:	6a3b      	ldr	r3, [r7, #32]
 800ec14:	7fdb      	ldrb	r3, [r3, #31]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d803      	bhi.n	800ec22 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ec34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1cb      	bne.n	800ebd2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ec3a:	6a3b      	ldr	r3, [r7, #32]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d008      	beq.n	800ec52 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ec40:	69b9      	ldr	r1, [r7, #24]
 800ec42:	6a38      	ldr	r0, [r7, #32]
 800ec44:	f7ff ff0e 	bl	800ea64 <ip_reass_free_complete_datagram>
 800ec48:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ec4a:	697a      	ldr	r2, [r7, #20]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4413      	add	r3, r2
 800ec50:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	da02      	bge.n	800ec60 <ip_reass_remove_oldest_datagram+0xb4>
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	dcac      	bgt.n	800ebba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ec60:	697b      	ldr	r3, [r7, #20]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3728      	adds	r7, #40	; 0x28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	2000a5a0 	.word	0x2000a5a0

0800ec70 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ec7a:	2004      	movs	r0, #4
 800ec7c:	f7f5 fb6c 	bl	8004358 <memp_malloc>
 800ec80:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d110      	bne.n	800ecaa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ec88:	6839      	ldr	r1, [r7, #0]
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7ff ff8e 	bl	800ebac <ip_reass_remove_oldest_datagram>
 800ec90:	4602      	mov	r2, r0
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	4293      	cmp	r3, r2
 800ec96:	dc03      	bgt.n	800eca0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ec98:	2004      	movs	r0, #4
 800ec9a:	f7f5 fb5d 	bl	8004358 <memp_malloc>
 800ec9e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800eca6:	2300      	movs	r3, #0
 800eca8:	e016      	b.n	800ecd8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ecaa:	2220      	movs	r2, #32
 800ecac:	2100      	movs	r1, #0
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f000 ff25 	bl	800fafe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	220f      	movs	r2, #15
 800ecb8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ecba:	4b09      	ldr	r3, [pc, #36]	; (800ece0 <ip_reass_enqueue_new_datagram+0x70>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ecc2:	4a07      	ldr	r2, [pc, #28]	; (800ece0 <ip_reass_enqueue_new_datagram+0x70>)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	3308      	adds	r3, #8
 800eccc:	2214      	movs	r2, #20
 800ecce:	6879      	ldr	r1, [r7, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f000 ff8a 	bl	800fbea <memcpy>
  return ipr;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	2000a5a0 	.word	0x2000a5a0

0800ece4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ecee:	4b10      	ldr	r3, [pc, #64]	; (800ed30 <ip_reass_dequeue_datagram+0x4c>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d104      	bne.n	800ed02 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a0c      	ldr	r2, [pc, #48]	; (800ed30 <ip_reass_dequeue_datagram+0x4c>)
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	e00d      	b.n	800ed1e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d106      	bne.n	800ed16 <ip_reass_dequeue_datagram+0x32>
 800ed08:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <ip_reass_dequeue_datagram+0x50>)
 800ed0a:	f240 1245 	movw	r2, #325	; 0x145
 800ed0e:	490a      	ldr	r1, [pc, #40]	; (800ed38 <ip_reass_dequeue_datagram+0x54>)
 800ed10:	480a      	ldr	r0, [pc, #40]	; (800ed3c <ip_reass_dequeue_datagram+0x58>)
 800ed12:	f000 fe8f 	bl	800fa34 <iprintf>
    prev->next = ipr->next;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ed1e:	6879      	ldr	r1, [r7, #4]
 800ed20:	2004      	movs	r0, #4
 800ed22:	f7f5 fb89 	bl	8004438 <memp_free>
}
 800ed26:	bf00      	nop
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	2000a5a0 	.word	0x2000a5a0
 800ed34:	08013334 	.word	0x08013334
 800ed38:	080133fc 	.word	0x080133fc
 800ed3c:	0801337c 	.word	0x0801337c

0800ed40 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08c      	sub	sp, #48	; 0x30
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ed50:	2301      	movs	r3, #1
 800ed52:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	885b      	ldrh	r3, [r3, #2]
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7f4 fe81 	bl	8003a68 <lwip_htons>
 800ed66:	4603      	mov	r3, r0
 800ed68:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	f003 030f 	and.w	r3, r3, #15
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ed78:	7e7b      	ldrb	r3, [r7, #25]
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	8b7a      	ldrh	r2, [r7, #26]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d202      	bcs.n	800ed88 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ed82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed86:	e135      	b.n	800eff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ed88:	7e7b      	ldrb	r3, [r7, #25]
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	8b7a      	ldrh	r2, [r7, #26]
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	88db      	ldrh	r3, [r3, #6]
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7f4 fe65 	bl	8003a68 <lwip_htons>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800edb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb2:	2200      	movs	r2, #0
 800edb4:	701a      	strb	r2, [r3, #0]
 800edb6:	2200      	movs	r2, #0
 800edb8:	705a      	strb	r2, [r3, #1]
 800edba:	2200      	movs	r2, #0
 800edbc:	709a      	strb	r2, [r3, #2]
 800edbe:	2200      	movs	r2, #0
 800edc0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800edc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc4:	8afa      	ldrh	r2, [r7, #22]
 800edc6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800edc8:	8afa      	ldrh	r2, [r7, #22]
 800edca:	8b7b      	ldrh	r3, [r7, #26]
 800edcc:	4413      	add	r3, r2
 800edce:	b29a      	uxth	r2, r3
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800edd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd6:	88db      	ldrh	r3, [r3, #6]
 800edd8:	b29b      	uxth	r3, r3
 800edda:	8afa      	ldrh	r2, [r7, #22]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d902      	bls.n	800ede6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ede0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ede4:	e106      	b.n	800eff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	627b      	str	r3, [r7, #36]	; 0x24
 800edec:	e068      	b.n	800eec0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800edf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf6:	889b      	ldrh	r3, [r3, #4]
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	889b      	ldrh	r3, [r3, #4]
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d235      	bcs.n	800ee70 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ee04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee08:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d020      	beq.n	800ee52 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ee10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee12:	889b      	ldrh	r3, [r3, #4]
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	88db      	ldrh	r3, [r3, #6]
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d307      	bcc.n	800ee30 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ee20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee22:	88db      	ldrh	r3, [r3, #6]
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	889b      	ldrh	r3, [r3, #4]
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d902      	bls.n	800ee36 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee34:	e0de      	b.n	800eff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ee36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ee3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3e:	88db      	ldrh	r3, [r3, #6]
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee44:	889b      	ldrh	r3, [r3, #4]
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d03d      	beq.n	800eec8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ee50:	e03a      	b.n	800eec8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	88db      	ldrh	r3, [r3, #6]
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	889b      	ldrh	r3, [r3, #4]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d902      	bls.n	800ee68 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee66:	e0c5      	b.n	800eff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	68ba      	ldr	r2, [r7, #8]
 800ee6c:	605a      	str	r2, [r3, #4]
      break;
 800ee6e:	e02b      	b.n	800eec8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ee70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee72:	889b      	ldrh	r3, [r3, #4]
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	889b      	ldrh	r3, [r3, #4]
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d102      	bne.n	800ee86 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee84:	e0b6      	b.n	800eff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ee86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee88:	889b      	ldrh	r3, [r3, #4]
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	88db      	ldrh	r3, [r3, #6]
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d202      	bcs.n	800ee9c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee9a:	e0ab      	b.n	800eff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d009      	beq.n	800eeb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	88db      	ldrh	r3, [r3, #6]
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	889b      	ldrh	r3, [r3, #4]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d001      	beq.n	800eeb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d193      	bne.n	800edee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800eec6:	e000      	b.n	800eeca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800eec8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d12d      	bne.n	800ef2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800eed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d01c      	beq.n	800ef10 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800eed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed8:	88db      	ldrh	r3, [r3, #6]
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	889b      	ldrh	r3, [r3, #4]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d906      	bls.n	800eef4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800eee6:	4b45      	ldr	r3, [pc, #276]	; (800effc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eee8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800eeec:	4944      	ldr	r1, [pc, #272]	; (800f000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800eeee:	4845      	ldr	r0, [pc, #276]	; (800f004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eef0:	f000 fda0 	bl	800fa34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	68ba      	ldr	r2, [r7, #8]
 800eef8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800eefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefc:	88db      	ldrh	r3, [r3, #6]
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	889b      	ldrh	r3, [r3, #4]
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d010      	beq.n	800ef2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	623b      	str	r3, [r7, #32]
 800ef0e:	e00d      	b.n	800ef2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d006      	beq.n	800ef26 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ef18:	4b38      	ldr	r3, [pc, #224]	; (800effc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ef1a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ef1e:	493a      	ldr	r1, [pc, #232]	; (800f008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ef20:	4838      	ldr	r0, [pc, #224]	; (800f004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ef22:	f000 fd87 	bl	800fa34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	7f9b      	ldrb	r3, [r3, #30]
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d059      	beq.n	800eff2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d04f      	beq.n	800efe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d006      	beq.n	800ef5a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	889b      	ldrh	r3, [r3, #4]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d002      	beq.n	800ef60 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	623b      	str	r3, [r7, #32]
 800ef5e:	e041      	b.n	800efe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ef60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef62:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ef6a:	e012      	b.n	800ef92 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	88db      	ldrh	r3, [r3, #6]
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7a:	889b      	ldrh	r3, [r3, #4]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d002      	beq.n	800ef88 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ef82:	2300      	movs	r3, #0
 800ef84:	623b      	str	r3, [r7, #32]
            break;
 800ef86:	e007      	b.n	800ef98 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ef92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1e9      	bne.n	800ef6c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d022      	beq.n	800efe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d106      	bne.n	800efb4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800efa6:	4b15      	ldr	r3, [pc, #84]	; (800effc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800efa8:	f240 12df 	movw	r2, #479	; 0x1df
 800efac:	4917      	ldr	r1, [pc, #92]	; (800f00c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800efae:	4815      	ldr	r0, [pc, #84]	; (800f004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800efb0:	f000 fd40 	bl	800fa34 <iprintf>
          LWIP_ASSERT("sanity check",
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d106      	bne.n	800efce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800efc0:	4b0e      	ldr	r3, [pc, #56]	; (800effc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800efc2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800efc6:	4911      	ldr	r1, [pc, #68]	; (800f00c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800efc8:	480e      	ldr	r0, [pc, #56]	; (800f004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800efca:	f000 fd33 	bl	800fa34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800efce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d006      	beq.n	800efe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800efd6:	4b09      	ldr	r3, [pc, #36]	; (800effc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800efd8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800efdc:	490c      	ldr	r1, [pc, #48]	; (800f010 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800efde:	4809      	ldr	r0, [pc, #36]	; (800f004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800efe0:	f000 fd28 	bl	800fa34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800efe4:	6a3b      	ldr	r3, [r7, #32]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	bf14      	ite	ne
 800efea:	2301      	movne	r3, #1
 800efec:	2300      	moveq	r3, #0
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	e000      	b.n	800eff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3730      	adds	r7, #48	; 0x30
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	08013334 	.word	0x08013334
 800f000:	08013418 	.word	0x08013418
 800f004:	0801337c 	.word	0x0801337c
 800f008:	08013438 	.word	0x08013438
 800f00c:	08013470 	.word	0x08013470
 800f010:	08013480 	.word	0x08013480

0800f014 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08e      	sub	sp, #56	; 0x38
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	f003 030f 	and.w	r3, r3, #15
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	2b14      	cmp	r3, #20
 800f032:	f040 8171 	bne.w	800f318 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f038:	88db      	ldrh	r3, [r3, #6]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f4 fd13 	bl	8003a68 <lwip_htons>
 800f042:	4603      	mov	r3, r0
 800f044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f048:	b29b      	uxth	r3, r3
 800f04a:	00db      	lsls	r3, r3, #3
 800f04c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f050:	885b      	ldrh	r3, [r3, #2]
 800f052:	b29b      	uxth	r3, r3
 800f054:	4618      	mov	r0, r3
 800f056:	f7f4 fd07 	bl	8003a68 <lwip_htons>
 800f05a:	4603      	mov	r3, r0
 800f05c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	f003 030f 	and.w	r3, r3, #15
 800f066:	b2db      	uxtb	r3, r3
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f06e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f072:	b29b      	uxth	r3, r3
 800f074:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f076:	429a      	cmp	r2, r3
 800f078:	f0c0 8150 	bcc.w	800f31c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f07c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f080:	b29b      	uxth	r3, r3
 800f082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7f6 f8df 	bl	800524c <pbuf_clen>
 800f08e:	4603      	mov	r3, r0
 800f090:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f092:	4b8c      	ldr	r3, [pc, #560]	; (800f2c4 <ip4_reass+0x2b0>)
 800f094:	881b      	ldrh	r3, [r3, #0]
 800f096:	461a      	mov	r2, r3
 800f098:	8c3b      	ldrh	r3, [r7, #32]
 800f09a:	4413      	add	r3, r2
 800f09c:	2b0a      	cmp	r3, #10
 800f09e:	dd10      	ble.n	800f0c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f0a0:	8c3b      	ldrh	r3, [r7, #32]
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0a6:	f7ff fd81 	bl	800ebac <ip_reass_remove_oldest_datagram>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f000 8137 	beq.w	800f320 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f0b2:	4b84      	ldr	r3, [pc, #528]	; (800f2c4 <ip4_reass+0x2b0>)
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	8c3b      	ldrh	r3, [r7, #32]
 800f0ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f0bc:	2b0a      	cmp	r3, #10
 800f0be:	f300 812f 	bgt.w	800f320 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f0c2:	4b81      	ldr	r3, [pc, #516]	; (800f2c8 <ip4_reass+0x2b4>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	633b      	str	r3, [r7, #48]	; 0x30
 800f0c8:	e015      	b.n	800f0f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0cc:	695a      	ldr	r2, [r3, #20]
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d10c      	bne.n	800f0f0 <ip4_reass+0xdc>
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	699a      	ldr	r2, [r3, #24]
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d106      	bne.n	800f0f0 <ip4_reass+0xdc>
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e4:	899a      	ldrh	r2, [r3, #12]
 800f0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e8:	889b      	ldrh	r3, [r3, #4]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d006      	beq.n	800f0fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	633b      	str	r3, [r7, #48]	; 0x30
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e6      	bne.n	800f0ca <ip4_reass+0xb6>
 800f0fc:	e000      	b.n	800f100 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f0fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f102:	2b00      	cmp	r3, #0
 800f104:	d109      	bne.n	800f11a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f106:	8c3b      	ldrh	r3, [r7, #32]
 800f108:	4619      	mov	r1, r3
 800f10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f10c:	f7ff fdb0 	bl	800ec70 <ip_reass_enqueue_new_datagram>
 800f110:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	2b00      	cmp	r3, #0
 800f116:	d11c      	bne.n	800f152 <ip4_reass+0x13e>
      goto nullreturn;
 800f118:	e105      	b.n	800f326 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	88db      	ldrh	r3, [r3, #6]
 800f11e:	b29b      	uxth	r3, r3
 800f120:	4618      	mov	r0, r3
 800f122:	f7f4 fca1 	bl	8003a68 <lwip_htons>
 800f126:	4603      	mov	r3, r0
 800f128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d110      	bne.n	800f152 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f132:	89db      	ldrh	r3, [r3, #14]
 800f134:	4618      	mov	r0, r3
 800f136:	f7f4 fc97 	bl	8003a68 <lwip_htons>
 800f13a:	4603      	mov	r3, r0
 800f13c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f140:	2b00      	cmp	r3, #0
 800f142:	d006      	beq.n	800f152 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	3308      	adds	r3, #8
 800f148:	2214      	movs	r2, #20
 800f14a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f14c:	4618      	mov	r0, r3
 800f14e:	f000 fd4c 	bl	800fbea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f154:	88db      	ldrh	r3, [r3, #6]
 800f156:	b29b      	uxth	r3, r3
 800f158:	f003 0320 	and.w	r3, r3, #32
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	bf0c      	ite	eq
 800f160:	2301      	moveq	r3, #1
 800f162:	2300      	movne	r3, #0
 800f164:	b2db      	uxtb	r3, r3
 800f166:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00e      	beq.n	800f18c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f16e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f172:	4413      	add	r3, r2
 800f174:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f176:	8b7a      	ldrh	r2, [r7, #26]
 800f178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f17a:	429a      	cmp	r2, r3
 800f17c:	f0c0 80a0 	bcc.w	800f2c0 <ip4_reass+0x2ac>
 800f180:	8b7b      	ldrh	r3, [r7, #26]
 800f182:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f186:	4293      	cmp	r3, r2
 800f188:	f200 809a 	bhi.w	800f2c0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f18c:	69fa      	ldr	r2, [r7, #28]
 800f18e:	6879      	ldr	r1, [r7, #4]
 800f190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f192:	f7ff fdd5 	bl	800ed40 <ip_reass_chain_frag_into_datagram_and_validate>
 800f196:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f19e:	f000 809b 	beq.w	800f2d8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f1a2:	4b48      	ldr	r3, [pc, #288]	; (800f2c4 <ip4_reass+0x2b0>)
 800f1a4:	881a      	ldrh	r2, [r3, #0]
 800f1a6:	8c3b      	ldrh	r3, [r7, #32]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	4b45      	ldr	r3, [pc, #276]	; (800f2c4 <ip4_reass+0x2b0>)
 800f1ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00d      	beq.n	800f1d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f1b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f1b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1ba:	4413      	add	r3, r2
 800f1bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	8a7a      	ldrh	r2, [r7, #18]
 800f1c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c6:	7f9b      	ldrb	r3, [r3, #30]
 800f1c8:	f043 0301 	orr.w	r3, r3, #1
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d171      	bne.n	800f2bc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1da:	8b9b      	ldrh	r3, [r3, #28]
 800f1dc:	3314      	adds	r3, #20
 800f1de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	2214      	movs	r2, #20
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1fc:	f000 fcf5 	bl	800fbea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f200:	8a3b      	ldrh	r3, [r7, #16]
 800f202:	4618      	mov	r0, r3
 800f204:	f7f4 fc30 	bl	8003a68 <lwip_htons>
 800f208:	4603      	mov	r3, r0
 800f20a:	461a      	mov	r2, r3
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	2200      	movs	r2, #0
 800f214:	719a      	strb	r2, [r3, #6]
 800f216:	2200      	movs	r2, #0
 800f218:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21c:	2200      	movs	r2, #0
 800f21e:	729a      	strb	r2, [r3, #10]
 800f220:	2200      	movs	r2, #0
 800f222:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f22a:	e00d      	b.n	800f248 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f232:	2114      	movs	r1, #20
 800f234:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f236:	f7f5 fefb 	bl	8005030 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f23a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7f6 f83f 	bl	80052c0 <pbuf_cat>
      r = iprh->next_pbuf;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1ee      	bne.n	800f22c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f24e:	4b1e      	ldr	r3, [pc, #120]	; (800f2c8 <ip4_reass+0x2b4>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f254:	429a      	cmp	r2, r3
 800f256:	d102      	bne.n	800f25e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f258:	2300      	movs	r3, #0
 800f25a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f25c:	e010      	b.n	800f280 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f25e:	4b1a      	ldr	r3, [pc, #104]	; (800f2c8 <ip4_reass+0x2b4>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f264:	e007      	b.n	800f276 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d006      	beq.n	800f27e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1f4      	bne.n	800f266 <ip4_reass+0x252>
 800f27c:	e000      	b.n	800f280 <ip4_reass+0x26c>
          break;
 800f27e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f284:	f7ff fd2e 	bl	800ece4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7f5 ffdf 	bl	800524c <pbuf_clen>
 800f28e:	4603      	mov	r3, r0
 800f290:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f292:	4b0c      	ldr	r3, [pc, #48]	; (800f2c4 <ip4_reass+0x2b0>)
 800f294:	881b      	ldrh	r3, [r3, #0]
 800f296:	8c3a      	ldrh	r2, [r7, #32]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d906      	bls.n	800f2aa <ip4_reass+0x296>
 800f29c:	4b0b      	ldr	r3, [pc, #44]	; (800f2cc <ip4_reass+0x2b8>)
 800f29e:	f240 229b 	movw	r2, #667	; 0x29b
 800f2a2:	490b      	ldr	r1, [pc, #44]	; (800f2d0 <ip4_reass+0x2bc>)
 800f2a4:	480b      	ldr	r0, [pc, #44]	; (800f2d4 <ip4_reass+0x2c0>)
 800f2a6:	f000 fbc5 	bl	800fa34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f2aa:	4b06      	ldr	r3, [pc, #24]	; (800f2c4 <ip4_reass+0x2b0>)
 800f2ac:	881a      	ldrh	r2, [r3, #0]
 800f2ae:	8c3b      	ldrh	r3, [r7, #32]
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	4b03      	ldr	r3, [pc, #12]	; (800f2c4 <ip4_reass+0x2b0>)
 800f2b6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	e038      	b.n	800f32e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e036      	b.n	800f32e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f2c0:	bf00      	nop
 800f2c2:	e00a      	b.n	800f2da <ip4_reass+0x2c6>
 800f2c4:	2000a5a4 	.word	0x2000a5a4
 800f2c8:	2000a5a0 	.word	0x2000a5a0
 800f2cc:	08013334 	.word	0x08013334
 800f2d0:	080134a4 	.word	0x080134a4
 800f2d4:	0801337c 	.word	0x0801337c
    goto nullreturn_ipr;
 800f2d8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d106      	bne.n	800f2ee <ip4_reass+0x2da>
 800f2e0:	4b15      	ldr	r3, [pc, #84]	; (800f338 <ip4_reass+0x324>)
 800f2e2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f2e6:	4915      	ldr	r1, [pc, #84]	; (800f33c <ip4_reass+0x328>)
 800f2e8:	4815      	ldr	r0, [pc, #84]	; (800f340 <ip4_reass+0x32c>)
 800f2ea:	f000 fba3 	bl	800fa34 <iprintf>
  if (ipr->p == NULL) {
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d116      	bne.n	800f324 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f2f6:	4b13      	ldr	r3, [pc, #76]	; (800f344 <ip4_reass+0x330>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d006      	beq.n	800f30e <ip4_reass+0x2fa>
 800f300:	4b0d      	ldr	r3, [pc, #52]	; (800f338 <ip4_reass+0x324>)
 800f302:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f306:	4910      	ldr	r1, [pc, #64]	; (800f348 <ip4_reass+0x334>)
 800f308:	480d      	ldr	r0, [pc, #52]	; (800f340 <ip4_reass+0x32c>)
 800f30a:	f000 fb93 	bl	800fa34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f30e:	2100      	movs	r1, #0
 800f310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f312:	f7ff fce7 	bl	800ece4 <ip_reass_dequeue_datagram>
 800f316:	e006      	b.n	800f326 <ip4_reass+0x312>
    goto nullreturn;
 800f318:	bf00      	nop
 800f31a:	e004      	b.n	800f326 <ip4_reass+0x312>
    goto nullreturn;
 800f31c:	bf00      	nop
 800f31e:	e002      	b.n	800f326 <ip4_reass+0x312>
      goto nullreturn;
 800f320:	bf00      	nop
 800f322:	e000      	b.n	800f326 <ip4_reass+0x312>
  }

nullreturn:
 800f324:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7f5 ff08 	bl	800513c <pbuf_free>
  return NULL;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3738      	adds	r7, #56	; 0x38
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	08013334 	.word	0x08013334
 800f33c:	080134c0 	.word	0x080134c0
 800f340:	0801337c 	.word	0x0801337c
 800f344:	2000a5a0 	.word	0x2000a5a0
 800f348:	080134cc 	.word	0x080134cc

0800f34c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f350:	2005      	movs	r0, #5
 800f352:	f7f5 f801 	bl	8004358 <memp_malloc>
 800f356:	4603      	mov	r3, r0
}
 800f358:	4618      	mov	r0, r3
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d106      	bne.n	800f378 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f36a:	4b07      	ldr	r3, [pc, #28]	; (800f388 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f36c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f370:	4906      	ldr	r1, [pc, #24]	; (800f38c <ip_frag_free_pbuf_custom_ref+0x30>)
 800f372:	4807      	ldr	r0, [pc, #28]	; (800f390 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f374:	f000 fb5e 	bl	800fa34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f378:	6879      	ldr	r1, [r7, #4]
 800f37a:	2005      	movs	r0, #5
 800f37c:	f7f5 f85c 	bl	8004438 <memp_free>
}
 800f380:	bf00      	nop
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	08013334 	.word	0x08013334
 800f38c:	080134ec 	.word	0x080134ec
 800f390:	0801337c 	.word	0x0801337c

0800f394 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d106      	bne.n	800f3b4 <ipfrag_free_pbuf_custom+0x20>
 800f3a6:	4b11      	ldr	r3, [pc, #68]	; (800f3ec <ipfrag_free_pbuf_custom+0x58>)
 800f3a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f3ac:	4910      	ldr	r1, [pc, #64]	; (800f3f0 <ipfrag_free_pbuf_custom+0x5c>)
 800f3ae:	4811      	ldr	r0, [pc, #68]	; (800f3f4 <ipfrag_free_pbuf_custom+0x60>)
 800f3b0:	f000 fb40 	bl	800fa34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d006      	beq.n	800f3ca <ipfrag_free_pbuf_custom+0x36>
 800f3bc:	4b0b      	ldr	r3, [pc, #44]	; (800f3ec <ipfrag_free_pbuf_custom+0x58>)
 800f3be:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f3c2:	490d      	ldr	r1, [pc, #52]	; (800f3f8 <ipfrag_free_pbuf_custom+0x64>)
 800f3c4:	480b      	ldr	r0, [pc, #44]	; (800f3f4 <ipfrag_free_pbuf_custom+0x60>)
 800f3c6:	f000 fb35 	bl	800fa34 <iprintf>
  if (pcr->original != NULL) {
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	695b      	ldr	r3, [r3, #20]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d004      	beq.n	800f3dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f5 feb0 	bl	800513c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7ff ffbd 	bl	800f35c <ip_frag_free_pbuf_custom_ref>
}
 800f3e2:	bf00      	nop
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	08013334 	.word	0x08013334
 800f3f0:	080134f8 	.word	0x080134f8
 800f3f4:	0801337c 	.word	0x0801337c
 800f3f8:	08013504 	.word	0x08013504

0800f3fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b094      	sub	sp, #80	; 0x50
 800f400:	af02      	add	r7, sp, #8
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f412:	3b14      	subs	r3, #20
 800f414:	2b00      	cmp	r3, #0
 800f416:	da00      	bge.n	800f41a <ip4_frag+0x1e>
 800f418:	3307      	adds	r3, #7
 800f41a:	10db      	asrs	r3, r3, #3
 800f41c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f41e:	2314      	movs	r3, #20
 800f420:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 030f 	and.w	r3, r3, #15
 800f434:	b2db      	uxtb	r3, r3
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b14      	cmp	r3, #20
 800f43c:	d002      	beq.n	800f444 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f43e:	f06f 0305 	mvn.w	r3, #5
 800f442:	e110      	b.n	800f666 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	895b      	ldrh	r3, [r3, #10]
 800f448:	2b13      	cmp	r3, #19
 800f44a:	d809      	bhi.n	800f460 <ip4_frag+0x64>
 800f44c:	4b88      	ldr	r3, [pc, #544]	; (800f670 <ip4_frag+0x274>)
 800f44e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f452:	4988      	ldr	r1, [pc, #544]	; (800f674 <ip4_frag+0x278>)
 800f454:	4888      	ldr	r0, [pc, #544]	; (800f678 <ip4_frag+0x27c>)
 800f456:	f000 faed 	bl	800fa34 <iprintf>
 800f45a:	f06f 0305 	mvn.w	r3, #5
 800f45e:	e102      	b.n	800f666 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f462:	88db      	ldrh	r3, [r3, #6]
 800f464:	b29b      	uxth	r3, r3
 800f466:	4618      	mov	r0, r3
 800f468:	f7f4 fafe 	bl	8003a68 <lwip_htons>
 800f46c:	4603      	mov	r3, r0
 800f46e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f470:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f476:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f47a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f47c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f480:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	891b      	ldrh	r3, [r3, #8]
 800f486:	3b14      	subs	r3, #20
 800f488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f48c:	e0e1      	b.n	800f652 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f48e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f490:	00db      	lsls	r3, r3, #3
 800f492:	b29b      	uxth	r3, r3
 800f494:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f498:	4293      	cmp	r3, r2
 800f49a:	bf28      	it	cs
 800f49c:	4613      	movcs	r3, r2
 800f49e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f4a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f4a4:	2114      	movs	r1, #20
 800f4a6:	200e      	movs	r0, #14
 800f4a8:	f7f5 fb64 	bl	8004b74 <pbuf_alloc>
 800f4ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f000 80d5 	beq.w	800f660 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b8:	895b      	ldrh	r3, [r3, #10]
 800f4ba:	2b13      	cmp	r3, #19
 800f4bc:	d806      	bhi.n	800f4cc <ip4_frag+0xd0>
 800f4be:	4b6c      	ldr	r3, [pc, #432]	; (800f670 <ip4_frag+0x274>)
 800f4c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f4c4:	496d      	ldr	r1, [pc, #436]	; (800f67c <ip4_frag+0x280>)
 800f4c6:	486c      	ldr	r0, [pc, #432]	; (800f678 <ip4_frag+0x27c>)
 800f4c8:	f000 fab4 	bl	800fa34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	2214      	movs	r2, #20
 800f4d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 fb88 	bl	800fbea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f4e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f4e6:	e064      	b.n	800f5b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	895a      	ldrh	r2, [r3, #10]
 800f4ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	895b      	ldrh	r3, [r3, #10]
 800f4f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d906      	bls.n	800f50a <ip4_frag+0x10e>
 800f4fc:	4b5c      	ldr	r3, [pc, #368]	; (800f670 <ip4_frag+0x274>)
 800f4fe:	f240 322d 	movw	r2, #813	; 0x32d
 800f502:	495f      	ldr	r1, [pc, #380]	; (800f680 <ip4_frag+0x284>)
 800f504:	485c      	ldr	r0, [pc, #368]	; (800f678 <ip4_frag+0x27c>)
 800f506:	f000 fa95 	bl	800fa34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f50a:	8bfa      	ldrh	r2, [r7, #30]
 800f50c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f510:	4293      	cmp	r3, r2
 800f512:	bf28      	it	cs
 800f514:	4613      	movcs	r3, r2
 800f516:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f51a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d105      	bne.n	800f52e <ip4_frag+0x132>
        poff = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	60fb      	str	r3, [r7, #12]
        continue;
 800f52c:	e041      	b.n	800f5b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f52e:	f7ff ff0d 	bl	800f34c <ip_frag_alloc_pbuf_custom_ref>
 800f532:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d103      	bne.n	800f542 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f53a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f53c:	f7f5 fdfe 	bl	800513c <pbuf_free>
        goto memerr;
 800f540:	e08f      	b.n	800f662 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f542:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f548:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f54a:	4413      	add	r3, r2
 800f54c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f550:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f554:	9201      	str	r2, [sp, #4]
 800f556:	9300      	str	r3, [sp, #0]
 800f558:	4603      	mov	r3, r0
 800f55a:	2241      	movs	r2, #65	; 0x41
 800f55c:	2000      	movs	r0, #0
 800f55e:	f7f5 fc33 	bl	8004dc8 <pbuf_alloced_custom>
 800f562:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d106      	bne.n	800f578 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f56a:	69b8      	ldr	r0, [r7, #24]
 800f56c:	f7ff fef6 	bl	800f35c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f572:	f7f5 fde3 	bl	800513c <pbuf_free>
        goto memerr;
 800f576:	e074      	b.n	800f662 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f7f5 fe7f 	bl	800527c <pbuf_ref>
      pcr->original = p;
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	4a3f      	ldr	r2, [pc, #252]	; (800f684 <ip4_frag+0x288>)
 800f588:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f58a:	6979      	ldr	r1, [r7, #20]
 800f58c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f58e:	f7f5 fe97 	bl	80052c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f592:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f596:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f5a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d004      	beq.n	800f5b2 <ip4_frag+0x1b6>
        poff = 0;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f5b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d196      	bne.n	800f4e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f5ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f5bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f5c0:	4413      	add	r3, r2
 800f5c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5c8:	f1a3 0213 	sub.w	r2, r3, #19
 800f5cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	bfcc      	ite	gt
 800f5d4:	2301      	movgt	r3, #1
 800f5d6:	2300      	movle	r3, #0
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f5dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f5e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f5e6:	6a3b      	ldr	r3, [r7, #32]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d002      	beq.n	800f5f2 <ip4_frag+0x1f6>
 800f5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d003      	beq.n	800f5fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f5f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f5f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f5f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f5fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7f4 fa33 	bl	8003a68 <lwip_htons>
 800f602:	4603      	mov	r3, r0
 800f604:	461a      	mov	r2, r3
 800f606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f608:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f60a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f60c:	3314      	adds	r3, #20
 800f60e:	b29b      	uxth	r3, r3
 800f610:	4618      	mov	r0, r3
 800f612:	f7f4 fa29 	bl	8003a68 <lwip_htons>
 800f616:	4603      	mov	r3, r0
 800f618:	461a      	mov	r2, r3
 800f61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f620:	2200      	movs	r2, #0
 800f622:	729a      	strb	r2, [r3, #10]
 800f624:	2200      	movs	r2, #0
 800f626:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	695b      	ldr	r3, [r3, #20]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f630:	68b8      	ldr	r0, [r7, #8]
 800f632:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f636:	f7f5 fd81 	bl	800513c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f63a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f63e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f646:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f64a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f64c:	4413      	add	r3, r2
 800f64e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f652:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f656:	2b00      	cmp	r3, #0
 800f658:	f47f af19 	bne.w	800f48e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f65c:	2300      	movs	r3, #0
 800f65e:	e002      	b.n	800f666 <ip4_frag+0x26a>
      goto memerr;
 800f660:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f666:	4618      	mov	r0, r3
 800f668:	3748      	adds	r7, #72	; 0x48
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	08013334 	.word	0x08013334
 800f674:	08013510 	.word	0x08013510
 800f678:	0801337c 	.word	0x0801337c
 800f67c:	0801352c 	.word	0x0801352c
 800f680:	0801354c 	.word	0x0801354c
 800f684:	0800f395 	.word	0x0800f395

0800f688 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f692:	230e      	movs	r3, #14
 800f694:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	895b      	ldrh	r3, [r3, #10]
 800f69a:	2b0e      	cmp	r3, #14
 800f69c:	d96e      	bls.n	800f77c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	7bdb      	ldrb	r3, [r3, #15]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d106      	bne.n	800f6b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	7b1a      	ldrb	r2, [r3, #12]
 800f6be:	7b5b      	ldrb	r3, [r3, #13]
 800f6c0:	021b      	lsls	r3, r3, #8
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	f003 0301 	and.w	r3, r3, #1
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d023      	beq.n	800f71a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d10f      	bne.n	800f6fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	785b      	ldrb	r3, [r3, #1]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d11b      	bne.n	800f71a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f6e6:	2b5e      	cmp	r3, #94	; 0x5e
 800f6e8:	d117      	bne.n	800f71a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	7b5b      	ldrb	r3, [r3, #13]
 800f6ee:	f043 0310 	orr.w	r3, r3, #16
 800f6f2:	b2da      	uxtb	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	735a      	strb	r2, [r3, #13]
 800f6f8:	e00f      	b.n	800f71a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	2206      	movs	r2, #6
 800f6fe:	4928      	ldr	r1, [pc, #160]	; (800f7a0 <ethernet_input+0x118>)
 800f700:	4618      	mov	r0, r3
 800f702:	f000 f9ec 	bl	800fade <memcmp>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d106      	bne.n	800f71a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	7b5b      	ldrb	r3, [r3, #13]
 800f710:	f043 0308 	orr.w	r3, r3, #8
 800f714:	b2da      	uxtb	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f71a:	89fb      	ldrh	r3, [r7, #14]
 800f71c:	2b08      	cmp	r3, #8
 800f71e:	d003      	beq.n	800f728 <ethernet_input+0xa0>
 800f720:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f724:	d014      	beq.n	800f750 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f726:	e032      	b.n	800f78e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f72e:	f003 0308 	and.w	r3, r3, #8
 800f732:	2b00      	cmp	r3, #0
 800f734:	d024      	beq.n	800f780 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f736:	8afb      	ldrh	r3, [r7, #22]
 800f738:	4619      	mov	r1, r3
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7f5 fc78 	bl	8005030 <pbuf_remove_header>
 800f740:	4603      	mov	r3, r0
 800f742:	2b00      	cmp	r3, #0
 800f744:	d11e      	bne.n	800f784 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f7fe ff03 	bl	800e554 <ip4_input>
      break;
 800f74e:	e013      	b.n	800f778 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f756:	f003 0308 	and.w	r3, r3, #8
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d014      	beq.n	800f788 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f75e:	8afb      	ldrh	r3, [r7, #22]
 800f760:	4619      	mov	r1, r3
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7f5 fc64 	bl	8005030 <pbuf_remove_header>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d10e      	bne.n	800f78c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f76e:	6839      	ldr	r1, [r7, #0]
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7fe f89f 	bl	800d8b4 <etharp_input>
      break;
 800f776:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f778:	2300      	movs	r3, #0
 800f77a:	e00c      	b.n	800f796 <ethernet_input+0x10e>
    goto free_and_return;
 800f77c:	bf00      	nop
 800f77e:	e006      	b.n	800f78e <ethernet_input+0x106>
        goto free_and_return;
 800f780:	bf00      	nop
 800f782:	e004      	b.n	800f78e <ethernet_input+0x106>
        goto free_and_return;
 800f784:	bf00      	nop
 800f786:	e002      	b.n	800f78e <ethernet_input+0x106>
        goto free_and_return;
 800f788:	bf00      	nop
 800f78a:	e000      	b.n	800f78e <ethernet_input+0x106>
        goto free_and_return;
 800f78c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7f5 fcd4 	bl	800513c <pbuf_free>
  return ERR_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	080136f4 	.word	0x080136f4

0800f7a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
 800f7b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f7b2:	8c3b      	ldrh	r3, [r7, #32]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7f4 f957 	bl	8003a68 <lwip_htons>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f7be:	210e      	movs	r1, #14
 800f7c0:	68b8      	ldr	r0, [r7, #8]
 800f7c2:	f7f5 fc25 	bl	8005010 <pbuf_add_header>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d125      	bne.n	800f818 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	8afa      	ldrh	r2, [r7, #22]
 800f7d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	2206      	movs	r2, #6
 800f7dc:	6839      	ldr	r1, [r7, #0]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f000 fa03 	bl	800fbea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	3306      	adds	r3, #6
 800f7e8:	2206      	movs	r2, #6
 800f7ea:	6879      	ldr	r1, [r7, #4]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 f9fc 	bl	800fbea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7f8:	2b06      	cmp	r3, #6
 800f7fa:	d006      	beq.n	800f80a <ethernet_output+0x66>
 800f7fc:	4b0a      	ldr	r3, [pc, #40]	; (800f828 <ethernet_output+0x84>)
 800f7fe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f802:	490a      	ldr	r1, [pc, #40]	; (800f82c <ethernet_output+0x88>)
 800f804:	480a      	ldr	r0, [pc, #40]	; (800f830 <ethernet_output+0x8c>)
 800f806:	f000 f915 	bl	800fa34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	699b      	ldr	r3, [r3, #24]
 800f80e:	68b9      	ldr	r1, [r7, #8]
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	4798      	blx	r3
 800f814:	4603      	mov	r3, r0
 800f816:	e002      	b.n	800f81e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f818:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f81a:	f06f 0301 	mvn.w	r3, #1
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	0801355c 	.word	0x0801355c
 800f82c:	08013594 	.word	0x08013594
 800f830:	080135c8 	.word	0x080135c8

0800f834 <rand>:
 800f834:	4b16      	ldr	r3, [pc, #88]	; (800f890 <rand+0x5c>)
 800f836:	b510      	push	{r4, lr}
 800f838:	681c      	ldr	r4, [r3, #0]
 800f83a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f83c:	b9b3      	cbnz	r3, 800f86c <rand+0x38>
 800f83e:	2018      	movs	r0, #24
 800f840:	f000 fa4c 	bl	800fcdc <malloc>
 800f844:	4602      	mov	r2, r0
 800f846:	6320      	str	r0, [r4, #48]	; 0x30
 800f848:	b920      	cbnz	r0, 800f854 <rand+0x20>
 800f84a:	4b12      	ldr	r3, [pc, #72]	; (800f894 <rand+0x60>)
 800f84c:	4812      	ldr	r0, [pc, #72]	; (800f898 <rand+0x64>)
 800f84e:	2152      	movs	r1, #82	; 0x52
 800f850:	f000 f9da 	bl	800fc08 <__assert_func>
 800f854:	4911      	ldr	r1, [pc, #68]	; (800f89c <rand+0x68>)
 800f856:	4b12      	ldr	r3, [pc, #72]	; (800f8a0 <rand+0x6c>)
 800f858:	e9c0 1300 	strd	r1, r3, [r0]
 800f85c:	4b11      	ldr	r3, [pc, #68]	; (800f8a4 <rand+0x70>)
 800f85e:	6083      	str	r3, [r0, #8]
 800f860:	230b      	movs	r3, #11
 800f862:	8183      	strh	r3, [r0, #12]
 800f864:	2100      	movs	r1, #0
 800f866:	2001      	movs	r0, #1
 800f868:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f86c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f86e:	480e      	ldr	r0, [pc, #56]	; (800f8a8 <rand+0x74>)
 800f870:	690b      	ldr	r3, [r1, #16]
 800f872:	694c      	ldr	r4, [r1, #20]
 800f874:	4a0d      	ldr	r2, [pc, #52]	; (800f8ac <rand+0x78>)
 800f876:	4358      	muls	r0, r3
 800f878:	fb02 0004 	mla	r0, r2, r4, r0
 800f87c:	fba3 3202 	umull	r3, r2, r3, r2
 800f880:	3301      	adds	r3, #1
 800f882:	eb40 0002 	adc.w	r0, r0, r2
 800f886:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f88a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f88e:	bd10      	pop	{r4, pc}
 800f890:	20000088 	.word	0x20000088
 800f894:	08013702 	.word	0x08013702
 800f898:	08013719 	.word	0x08013719
 800f89c:	abcd330e 	.word	0xabcd330e
 800f8a0:	e66d1234 	.word	0xe66d1234
 800f8a4:	0005deec 	.word	0x0005deec
 800f8a8:	5851f42d 	.word	0x5851f42d
 800f8ac:	4c957f2d 	.word	0x4c957f2d

0800f8b0 <std>:
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	b510      	push	{r4, lr}
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	e9c0 3300 	strd	r3, r3, [r0]
 800f8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8be:	6083      	str	r3, [r0, #8]
 800f8c0:	8181      	strh	r1, [r0, #12]
 800f8c2:	6643      	str	r3, [r0, #100]	; 0x64
 800f8c4:	81c2      	strh	r2, [r0, #14]
 800f8c6:	6183      	str	r3, [r0, #24]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	2208      	movs	r2, #8
 800f8cc:	305c      	adds	r0, #92	; 0x5c
 800f8ce:	f000 f916 	bl	800fafe <memset>
 800f8d2:	4b0d      	ldr	r3, [pc, #52]	; (800f908 <std+0x58>)
 800f8d4:	6263      	str	r3, [r4, #36]	; 0x24
 800f8d6:	4b0d      	ldr	r3, [pc, #52]	; (800f90c <std+0x5c>)
 800f8d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8da:	4b0d      	ldr	r3, [pc, #52]	; (800f910 <std+0x60>)
 800f8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8de:	4b0d      	ldr	r3, [pc, #52]	; (800f914 <std+0x64>)
 800f8e0:	6323      	str	r3, [r4, #48]	; 0x30
 800f8e2:	4b0d      	ldr	r3, [pc, #52]	; (800f918 <std+0x68>)
 800f8e4:	6224      	str	r4, [r4, #32]
 800f8e6:	429c      	cmp	r4, r3
 800f8e8:	d006      	beq.n	800f8f8 <std+0x48>
 800f8ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f8ee:	4294      	cmp	r4, r2
 800f8f0:	d002      	beq.n	800f8f8 <std+0x48>
 800f8f2:	33d0      	adds	r3, #208	; 0xd0
 800f8f4:	429c      	cmp	r4, r3
 800f8f6:	d105      	bne.n	800f904 <std+0x54>
 800f8f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f900:	f000 b970 	b.w	800fbe4 <__retarget_lock_init_recursive>
 800f904:	bd10      	pop	{r4, pc}
 800f906:	bf00      	nop
 800f908:	0800fa59 	.word	0x0800fa59
 800f90c:	0800fa7b 	.word	0x0800fa7b
 800f910:	0800fab3 	.word	0x0800fab3
 800f914:	0800fad7 	.word	0x0800fad7
 800f918:	2000a5a8 	.word	0x2000a5a8

0800f91c <stdio_exit_handler>:
 800f91c:	4a02      	ldr	r2, [pc, #8]	; (800f928 <stdio_exit_handler+0xc>)
 800f91e:	4903      	ldr	r1, [pc, #12]	; (800f92c <stdio_exit_handler+0x10>)
 800f920:	4803      	ldr	r0, [pc, #12]	; (800f930 <stdio_exit_handler+0x14>)
 800f922:	f000 b869 	b.w	800f9f8 <_fwalk_sglue>
 800f926:	bf00      	nop
 800f928:	20000030 	.word	0x20000030
 800f92c:	080104f9 	.word	0x080104f9
 800f930:	2000003c 	.word	0x2000003c

0800f934 <cleanup_stdio>:
 800f934:	6841      	ldr	r1, [r0, #4]
 800f936:	4b0c      	ldr	r3, [pc, #48]	; (800f968 <cleanup_stdio+0x34>)
 800f938:	4299      	cmp	r1, r3
 800f93a:	b510      	push	{r4, lr}
 800f93c:	4604      	mov	r4, r0
 800f93e:	d001      	beq.n	800f944 <cleanup_stdio+0x10>
 800f940:	f000 fdda 	bl	80104f8 <_fflush_r>
 800f944:	68a1      	ldr	r1, [r4, #8]
 800f946:	4b09      	ldr	r3, [pc, #36]	; (800f96c <cleanup_stdio+0x38>)
 800f948:	4299      	cmp	r1, r3
 800f94a:	d002      	beq.n	800f952 <cleanup_stdio+0x1e>
 800f94c:	4620      	mov	r0, r4
 800f94e:	f000 fdd3 	bl	80104f8 <_fflush_r>
 800f952:	68e1      	ldr	r1, [r4, #12]
 800f954:	4b06      	ldr	r3, [pc, #24]	; (800f970 <cleanup_stdio+0x3c>)
 800f956:	4299      	cmp	r1, r3
 800f958:	d004      	beq.n	800f964 <cleanup_stdio+0x30>
 800f95a:	4620      	mov	r0, r4
 800f95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f960:	f000 bdca 	b.w	80104f8 <_fflush_r>
 800f964:	bd10      	pop	{r4, pc}
 800f966:	bf00      	nop
 800f968:	2000a5a8 	.word	0x2000a5a8
 800f96c:	2000a610 	.word	0x2000a610
 800f970:	2000a678 	.word	0x2000a678

0800f974 <global_stdio_init.part.0>:
 800f974:	b510      	push	{r4, lr}
 800f976:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <global_stdio_init.part.0+0x30>)
 800f978:	4c0b      	ldr	r4, [pc, #44]	; (800f9a8 <global_stdio_init.part.0+0x34>)
 800f97a:	4a0c      	ldr	r2, [pc, #48]	; (800f9ac <global_stdio_init.part.0+0x38>)
 800f97c:	601a      	str	r2, [r3, #0]
 800f97e:	4620      	mov	r0, r4
 800f980:	2200      	movs	r2, #0
 800f982:	2104      	movs	r1, #4
 800f984:	f7ff ff94 	bl	800f8b0 <std>
 800f988:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f98c:	2201      	movs	r2, #1
 800f98e:	2109      	movs	r1, #9
 800f990:	f7ff ff8e 	bl	800f8b0 <std>
 800f994:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f998:	2202      	movs	r2, #2
 800f99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f99e:	2112      	movs	r1, #18
 800f9a0:	f7ff bf86 	b.w	800f8b0 <std>
 800f9a4:	2000a6e0 	.word	0x2000a6e0
 800f9a8:	2000a5a8 	.word	0x2000a5a8
 800f9ac:	0800f91d 	.word	0x0800f91d

0800f9b0 <__sfp_lock_acquire>:
 800f9b0:	4801      	ldr	r0, [pc, #4]	; (800f9b8 <__sfp_lock_acquire+0x8>)
 800f9b2:	f000 b918 	b.w	800fbe6 <__retarget_lock_acquire_recursive>
 800f9b6:	bf00      	nop
 800f9b8:	2000a6e9 	.word	0x2000a6e9

0800f9bc <__sfp_lock_release>:
 800f9bc:	4801      	ldr	r0, [pc, #4]	; (800f9c4 <__sfp_lock_release+0x8>)
 800f9be:	f000 b913 	b.w	800fbe8 <__retarget_lock_release_recursive>
 800f9c2:	bf00      	nop
 800f9c4:	2000a6e9 	.word	0x2000a6e9

0800f9c8 <__sinit>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	f7ff fff0 	bl	800f9b0 <__sfp_lock_acquire>
 800f9d0:	6a23      	ldr	r3, [r4, #32]
 800f9d2:	b11b      	cbz	r3, 800f9dc <__sinit+0x14>
 800f9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9d8:	f7ff bff0 	b.w	800f9bc <__sfp_lock_release>
 800f9dc:	4b04      	ldr	r3, [pc, #16]	; (800f9f0 <__sinit+0x28>)
 800f9de:	6223      	str	r3, [r4, #32]
 800f9e0:	4b04      	ldr	r3, [pc, #16]	; (800f9f4 <__sinit+0x2c>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d1f5      	bne.n	800f9d4 <__sinit+0xc>
 800f9e8:	f7ff ffc4 	bl	800f974 <global_stdio_init.part.0>
 800f9ec:	e7f2      	b.n	800f9d4 <__sinit+0xc>
 800f9ee:	bf00      	nop
 800f9f0:	0800f935 	.word	0x0800f935
 800f9f4:	2000a6e0 	.word	0x2000a6e0

0800f9f8 <_fwalk_sglue>:
 800f9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	4688      	mov	r8, r1
 800fa00:	4614      	mov	r4, r2
 800fa02:	2600      	movs	r6, #0
 800fa04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa08:	f1b9 0901 	subs.w	r9, r9, #1
 800fa0c:	d505      	bpl.n	800fa1a <_fwalk_sglue+0x22>
 800fa0e:	6824      	ldr	r4, [r4, #0]
 800fa10:	2c00      	cmp	r4, #0
 800fa12:	d1f7      	bne.n	800fa04 <_fwalk_sglue+0xc>
 800fa14:	4630      	mov	r0, r6
 800fa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa1a:	89ab      	ldrh	r3, [r5, #12]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d907      	bls.n	800fa30 <_fwalk_sglue+0x38>
 800fa20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa24:	3301      	adds	r3, #1
 800fa26:	d003      	beq.n	800fa30 <_fwalk_sglue+0x38>
 800fa28:	4629      	mov	r1, r5
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	47c0      	blx	r8
 800fa2e:	4306      	orrs	r6, r0
 800fa30:	3568      	adds	r5, #104	; 0x68
 800fa32:	e7e9      	b.n	800fa08 <_fwalk_sglue+0x10>

0800fa34 <iprintf>:
 800fa34:	b40f      	push	{r0, r1, r2, r3}
 800fa36:	b507      	push	{r0, r1, r2, lr}
 800fa38:	4906      	ldr	r1, [pc, #24]	; (800fa54 <iprintf+0x20>)
 800fa3a:	ab04      	add	r3, sp, #16
 800fa3c:	6808      	ldr	r0, [r1, #0]
 800fa3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa42:	6881      	ldr	r1, [r0, #8]
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	f000 fa27 	bl	800fe98 <_vfiprintf_r>
 800fa4a:	b003      	add	sp, #12
 800fa4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa50:	b004      	add	sp, #16
 800fa52:	4770      	bx	lr
 800fa54:	20000088 	.word	0x20000088

0800fa58 <__sread>:
 800fa58:	b510      	push	{r4, lr}
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa60:	f000 f878 	bl	800fb54 <_read_r>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	bfab      	itete	ge
 800fa68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa6a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa6c:	181b      	addge	r3, r3, r0
 800fa6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa72:	bfac      	ite	ge
 800fa74:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa76:	81a3      	strhlt	r3, [r4, #12]
 800fa78:	bd10      	pop	{r4, pc}

0800fa7a <__swrite>:
 800fa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7e:	461f      	mov	r7, r3
 800fa80:	898b      	ldrh	r3, [r1, #12]
 800fa82:	05db      	lsls	r3, r3, #23
 800fa84:	4605      	mov	r5, r0
 800fa86:	460c      	mov	r4, r1
 800fa88:	4616      	mov	r6, r2
 800fa8a:	d505      	bpl.n	800fa98 <__swrite+0x1e>
 800fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa90:	2302      	movs	r3, #2
 800fa92:	2200      	movs	r2, #0
 800fa94:	f000 f84c 	bl	800fb30 <_lseek_r>
 800fa98:	89a3      	ldrh	r3, [r4, #12]
 800fa9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800faa2:	81a3      	strh	r3, [r4, #12]
 800faa4:	4632      	mov	r2, r6
 800faa6:	463b      	mov	r3, r7
 800faa8:	4628      	mov	r0, r5
 800faaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faae:	f000 b863 	b.w	800fb78 <_write_r>

0800fab2 <__sseek>:
 800fab2:	b510      	push	{r4, lr}
 800fab4:	460c      	mov	r4, r1
 800fab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faba:	f000 f839 	bl	800fb30 <_lseek_r>
 800fabe:	1c43      	adds	r3, r0, #1
 800fac0:	89a3      	ldrh	r3, [r4, #12]
 800fac2:	bf15      	itete	ne
 800fac4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800faca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800face:	81a3      	strheq	r3, [r4, #12]
 800fad0:	bf18      	it	ne
 800fad2:	81a3      	strhne	r3, [r4, #12]
 800fad4:	bd10      	pop	{r4, pc}

0800fad6 <__sclose>:
 800fad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fada:	f000 b819 	b.w	800fb10 <_close_r>

0800fade <memcmp>:
 800fade:	b510      	push	{r4, lr}
 800fae0:	3901      	subs	r1, #1
 800fae2:	4402      	add	r2, r0
 800fae4:	4290      	cmp	r0, r2
 800fae6:	d101      	bne.n	800faec <memcmp+0xe>
 800fae8:	2000      	movs	r0, #0
 800faea:	e005      	b.n	800faf8 <memcmp+0x1a>
 800faec:	7803      	ldrb	r3, [r0, #0]
 800faee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800faf2:	42a3      	cmp	r3, r4
 800faf4:	d001      	beq.n	800fafa <memcmp+0x1c>
 800faf6:	1b18      	subs	r0, r3, r4
 800faf8:	bd10      	pop	{r4, pc}
 800fafa:	3001      	adds	r0, #1
 800fafc:	e7f2      	b.n	800fae4 <memcmp+0x6>

0800fafe <memset>:
 800fafe:	4402      	add	r2, r0
 800fb00:	4603      	mov	r3, r0
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d100      	bne.n	800fb08 <memset+0xa>
 800fb06:	4770      	bx	lr
 800fb08:	f803 1b01 	strb.w	r1, [r3], #1
 800fb0c:	e7f9      	b.n	800fb02 <memset+0x4>
	...

0800fb10 <_close_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d06      	ldr	r5, [pc, #24]	; (800fb2c <_close_r+0x1c>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4604      	mov	r4, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	602b      	str	r3, [r5, #0]
 800fb1c:	f7f1 f805 	bl	8000b2a <_close>
 800fb20:	1c43      	adds	r3, r0, #1
 800fb22:	d102      	bne.n	800fb2a <_close_r+0x1a>
 800fb24:	682b      	ldr	r3, [r5, #0]
 800fb26:	b103      	cbz	r3, 800fb2a <_close_r+0x1a>
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}
 800fb2c:	2000a6e4 	.word	0x2000a6e4

0800fb30 <_lseek_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4d07      	ldr	r5, [pc, #28]	; (800fb50 <_lseek_r+0x20>)
 800fb34:	4604      	mov	r4, r0
 800fb36:	4608      	mov	r0, r1
 800fb38:	4611      	mov	r1, r2
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	602a      	str	r2, [r5, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f7f1 f81a 	bl	8000b78 <_lseek>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d102      	bne.n	800fb4e <_lseek_r+0x1e>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	b103      	cbz	r3, 800fb4e <_lseek_r+0x1e>
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	2000a6e4 	.word	0x2000a6e4

0800fb54 <_read_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4d07      	ldr	r5, [pc, #28]	; (800fb74 <_read_r+0x20>)
 800fb58:	4604      	mov	r4, r0
 800fb5a:	4608      	mov	r0, r1
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	2200      	movs	r2, #0
 800fb60:	602a      	str	r2, [r5, #0]
 800fb62:	461a      	mov	r2, r3
 800fb64:	f7f0 ffa8 	bl	8000ab8 <_read>
 800fb68:	1c43      	adds	r3, r0, #1
 800fb6a:	d102      	bne.n	800fb72 <_read_r+0x1e>
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	b103      	cbz	r3, 800fb72 <_read_r+0x1e>
 800fb70:	6023      	str	r3, [r4, #0]
 800fb72:	bd38      	pop	{r3, r4, r5, pc}
 800fb74:	2000a6e4 	.word	0x2000a6e4

0800fb78 <_write_r>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4d07      	ldr	r5, [pc, #28]	; (800fb98 <_write_r+0x20>)
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	4608      	mov	r0, r1
 800fb80:	4611      	mov	r1, r2
 800fb82:	2200      	movs	r2, #0
 800fb84:	602a      	str	r2, [r5, #0]
 800fb86:	461a      	mov	r2, r3
 800fb88:	f7f0 ffb3 	bl	8000af2 <_write>
 800fb8c:	1c43      	adds	r3, r0, #1
 800fb8e:	d102      	bne.n	800fb96 <_write_r+0x1e>
 800fb90:	682b      	ldr	r3, [r5, #0]
 800fb92:	b103      	cbz	r3, 800fb96 <_write_r+0x1e>
 800fb94:	6023      	str	r3, [r4, #0]
 800fb96:	bd38      	pop	{r3, r4, r5, pc}
 800fb98:	2000a6e4 	.word	0x2000a6e4

0800fb9c <__libc_init_array>:
 800fb9c:	b570      	push	{r4, r5, r6, lr}
 800fb9e:	4d0d      	ldr	r5, [pc, #52]	; (800fbd4 <__libc_init_array+0x38>)
 800fba0:	4c0d      	ldr	r4, [pc, #52]	; (800fbd8 <__libc_init_array+0x3c>)
 800fba2:	1b64      	subs	r4, r4, r5
 800fba4:	10a4      	asrs	r4, r4, #2
 800fba6:	2600      	movs	r6, #0
 800fba8:	42a6      	cmp	r6, r4
 800fbaa:	d109      	bne.n	800fbc0 <__libc_init_array+0x24>
 800fbac:	4d0b      	ldr	r5, [pc, #44]	; (800fbdc <__libc_init_array+0x40>)
 800fbae:	4c0c      	ldr	r4, [pc, #48]	; (800fbe0 <__libc_init_array+0x44>)
 800fbb0:	f000 fe52 	bl	8010858 <_init>
 800fbb4:	1b64      	subs	r4, r4, r5
 800fbb6:	10a4      	asrs	r4, r4, #2
 800fbb8:	2600      	movs	r6, #0
 800fbba:	42a6      	cmp	r6, r4
 800fbbc:	d105      	bne.n	800fbca <__libc_init_array+0x2e>
 800fbbe:	bd70      	pop	{r4, r5, r6, pc}
 800fbc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbc4:	4798      	blx	r3
 800fbc6:	3601      	adds	r6, #1
 800fbc8:	e7ee      	b.n	800fba8 <__libc_init_array+0xc>
 800fbca:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbce:	4798      	blx	r3
 800fbd0:	3601      	adds	r6, #1
 800fbd2:	e7f2      	b.n	800fbba <__libc_init_array+0x1e>
 800fbd4:	080137e8 	.word	0x080137e8
 800fbd8:	080137e8 	.word	0x080137e8
 800fbdc:	080137e8 	.word	0x080137e8
 800fbe0:	080137ec 	.word	0x080137ec

0800fbe4 <__retarget_lock_init_recursive>:
 800fbe4:	4770      	bx	lr

0800fbe6 <__retarget_lock_acquire_recursive>:
 800fbe6:	4770      	bx	lr

0800fbe8 <__retarget_lock_release_recursive>:
 800fbe8:	4770      	bx	lr

0800fbea <memcpy>:
 800fbea:	440a      	add	r2, r1
 800fbec:	4291      	cmp	r1, r2
 800fbee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fbf2:	d100      	bne.n	800fbf6 <memcpy+0xc>
 800fbf4:	4770      	bx	lr
 800fbf6:	b510      	push	{r4, lr}
 800fbf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc00:	4291      	cmp	r1, r2
 800fc02:	d1f9      	bne.n	800fbf8 <memcpy+0xe>
 800fc04:	bd10      	pop	{r4, pc}
	...

0800fc08 <__assert_func>:
 800fc08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc0a:	4614      	mov	r4, r2
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <__assert_func+0x2c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4605      	mov	r5, r0
 800fc14:	68d8      	ldr	r0, [r3, #12]
 800fc16:	b14c      	cbz	r4, 800fc2c <__assert_func+0x24>
 800fc18:	4b07      	ldr	r3, [pc, #28]	; (800fc38 <__assert_func+0x30>)
 800fc1a:	9100      	str	r1, [sp, #0]
 800fc1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc20:	4906      	ldr	r1, [pc, #24]	; (800fc3c <__assert_func+0x34>)
 800fc22:	462b      	mov	r3, r5
 800fc24:	f000 fc90 	bl	8010548 <fiprintf>
 800fc28:	f000 fd46 	bl	80106b8 <abort>
 800fc2c:	4b04      	ldr	r3, [pc, #16]	; (800fc40 <__assert_func+0x38>)
 800fc2e:	461c      	mov	r4, r3
 800fc30:	e7f3      	b.n	800fc1a <__assert_func+0x12>
 800fc32:	bf00      	nop
 800fc34:	20000088 	.word	0x20000088
 800fc38:	08013771 	.word	0x08013771
 800fc3c:	0801377e 	.word	0x0801377e
 800fc40:	080137ac 	.word	0x080137ac

0800fc44 <_free_r>:
 800fc44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc46:	2900      	cmp	r1, #0
 800fc48:	d044      	beq.n	800fcd4 <_free_r+0x90>
 800fc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc4e:	9001      	str	r0, [sp, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f1a1 0404 	sub.w	r4, r1, #4
 800fc56:	bfb8      	it	lt
 800fc58:	18e4      	addlt	r4, r4, r3
 800fc5a:	f000 f8e7 	bl	800fe2c <__malloc_lock>
 800fc5e:	4a1e      	ldr	r2, [pc, #120]	; (800fcd8 <_free_r+0x94>)
 800fc60:	9801      	ldr	r0, [sp, #4]
 800fc62:	6813      	ldr	r3, [r2, #0]
 800fc64:	b933      	cbnz	r3, 800fc74 <_free_r+0x30>
 800fc66:	6063      	str	r3, [r4, #4]
 800fc68:	6014      	str	r4, [r2, #0]
 800fc6a:	b003      	add	sp, #12
 800fc6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc70:	f000 b8e2 	b.w	800fe38 <__malloc_unlock>
 800fc74:	42a3      	cmp	r3, r4
 800fc76:	d908      	bls.n	800fc8a <_free_r+0x46>
 800fc78:	6825      	ldr	r5, [r4, #0]
 800fc7a:	1961      	adds	r1, r4, r5
 800fc7c:	428b      	cmp	r3, r1
 800fc7e:	bf01      	itttt	eq
 800fc80:	6819      	ldreq	r1, [r3, #0]
 800fc82:	685b      	ldreq	r3, [r3, #4]
 800fc84:	1949      	addeq	r1, r1, r5
 800fc86:	6021      	streq	r1, [r4, #0]
 800fc88:	e7ed      	b.n	800fc66 <_free_r+0x22>
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	b10b      	cbz	r3, 800fc94 <_free_r+0x50>
 800fc90:	42a3      	cmp	r3, r4
 800fc92:	d9fa      	bls.n	800fc8a <_free_r+0x46>
 800fc94:	6811      	ldr	r1, [r2, #0]
 800fc96:	1855      	adds	r5, r2, r1
 800fc98:	42a5      	cmp	r5, r4
 800fc9a:	d10b      	bne.n	800fcb4 <_free_r+0x70>
 800fc9c:	6824      	ldr	r4, [r4, #0]
 800fc9e:	4421      	add	r1, r4
 800fca0:	1854      	adds	r4, r2, r1
 800fca2:	42a3      	cmp	r3, r4
 800fca4:	6011      	str	r1, [r2, #0]
 800fca6:	d1e0      	bne.n	800fc6a <_free_r+0x26>
 800fca8:	681c      	ldr	r4, [r3, #0]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	6053      	str	r3, [r2, #4]
 800fcae:	440c      	add	r4, r1
 800fcb0:	6014      	str	r4, [r2, #0]
 800fcb2:	e7da      	b.n	800fc6a <_free_r+0x26>
 800fcb4:	d902      	bls.n	800fcbc <_free_r+0x78>
 800fcb6:	230c      	movs	r3, #12
 800fcb8:	6003      	str	r3, [r0, #0]
 800fcba:	e7d6      	b.n	800fc6a <_free_r+0x26>
 800fcbc:	6825      	ldr	r5, [r4, #0]
 800fcbe:	1961      	adds	r1, r4, r5
 800fcc0:	428b      	cmp	r3, r1
 800fcc2:	bf04      	itt	eq
 800fcc4:	6819      	ldreq	r1, [r3, #0]
 800fcc6:	685b      	ldreq	r3, [r3, #4]
 800fcc8:	6063      	str	r3, [r4, #4]
 800fcca:	bf04      	itt	eq
 800fccc:	1949      	addeq	r1, r1, r5
 800fcce:	6021      	streq	r1, [r4, #0]
 800fcd0:	6054      	str	r4, [r2, #4]
 800fcd2:	e7ca      	b.n	800fc6a <_free_r+0x26>
 800fcd4:	b003      	add	sp, #12
 800fcd6:	bd30      	pop	{r4, r5, pc}
 800fcd8:	2000a6ec 	.word	0x2000a6ec

0800fcdc <malloc>:
 800fcdc:	4b02      	ldr	r3, [pc, #8]	; (800fce8 <malloc+0xc>)
 800fcde:	4601      	mov	r1, r0
 800fce0:	6818      	ldr	r0, [r3, #0]
 800fce2:	f000 b823 	b.w	800fd2c <_malloc_r>
 800fce6:	bf00      	nop
 800fce8:	20000088 	.word	0x20000088

0800fcec <sbrk_aligned>:
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	4e0e      	ldr	r6, [pc, #56]	; (800fd28 <sbrk_aligned+0x3c>)
 800fcf0:	460c      	mov	r4, r1
 800fcf2:	6831      	ldr	r1, [r6, #0]
 800fcf4:	4605      	mov	r5, r0
 800fcf6:	b911      	cbnz	r1, 800fcfe <sbrk_aligned+0x12>
 800fcf8:	f000 fcce 	bl	8010698 <_sbrk_r>
 800fcfc:	6030      	str	r0, [r6, #0]
 800fcfe:	4621      	mov	r1, r4
 800fd00:	4628      	mov	r0, r5
 800fd02:	f000 fcc9 	bl	8010698 <_sbrk_r>
 800fd06:	1c43      	adds	r3, r0, #1
 800fd08:	d00a      	beq.n	800fd20 <sbrk_aligned+0x34>
 800fd0a:	1cc4      	adds	r4, r0, #3
 800fd0c:	f024 0403 	bic.w	r4, r4, #3
 800fd10:	42a0      	cmp	r0, r4
 800fd12:	d007      	beq.n	800fd24 <sbrk_aligned+0x38>
 800fd14:	1a21      	subs	r1, r4, r0
 800fd16:	4628      	mov	r0, r5
 800fd18:	f000 fcbe 	bl	8010698 <_sbrk_r>
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	d101      	bne.n	800fd24 <sbrk_aligned+0x38>
 800fd20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd24:	4620      	mov	r0, r4
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
 800fd28:	2000a6f0 	.word	0x2000a6f0

0800fd2c <_malloc_r>:
 800fd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd30:	1ccd      	adds	r5, r1, #3
 800fd32:	f025 0503 	bic.w	r5, r5, #3
 800fd36:	3508      	adds	r5, #8
 800fd38:	2d0c      	cmp	r5, #12
 800fd3a:	bf38      	it	cc
 800fd3c:	250c      	movcc	r5, #12
 800fd3e:	2d00      	cmp	r5, #0
 800fd40:	4607      	mov	r7, r0
 800fd42:	db01      	blt.n	800fd48 <_malloc_r+0x1c>
 800fd44:	42a9      	cmp	r1, r5
 800fd46:	d905      	bls.n	800fd54 <_malloc_r+0x28>
 800fd48:	230c      	movs	r3, #12
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	2600      	movs	r6, #0
 800fd4e:	4630      	mov	r0, r6
 800fd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fe28 <_malloc_r+0xfc>
 800fd58:	f000 f868 	bl	800fe2c <__malloc_lock>
 800fd5c:	f8d8 3000 	ldr.w	r3, [r8]
 800fd60:	461c      	mov	r4, r3
 800fd62:	bb5c      	cbnz	r4, 800fdbc <_malloc_r+0x90>
 800fd64:	4629      	mov	r1, r5
 800fd66:	4638      	mov	r0, r7
 800fd68:	f7ff ffc0 	bl	800fcec <sbrk_aligned>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	4604      	mov	r4, r0
 800fd70:	d155      	bne.n	800fe1e <_malloc_r+0xf2>
 800fd72:	f8d8 4000 	ldr.w	r4, [r8]
 800fd76:	4626      	mov	r6, r4
 800fd78:	2e00      	cmp	r6, #0
 800fd7a:	d145      	bne.n	800fe08 <_malloc_r+0xdc>
 800fd7c:	2c00      	cmp	r4, #0
 800fd7e:	d048      	beq.n	800fe12 <_malloc_r+0xe6>
 800fd80:	6823      	ldr	r3, [r4, #0]
 800fd82:	4631      	mov	r1, r6
 800fd84:	4638      	mov	r0, r7
 800fd86:	eb04 0903 	add.w	r9, r4, r3
 800fd8a:	f000 fc85 	bl	8010698 <_sbrk_r>
 800fd8e:	4581      	cmp	r9, r0
 800fd90:	d13f      	bne.n	800fe12 <_malloc_r+0xe6>
 800fd92:	6821      	ldr	r1, [r4, #0]
 800fd94:	1a6d      	subs	r5, r5, r1
 800fd96:	4629      	mov	r1, r5
 800fd98:	4638      	mov	r0, r7
 800fd9a:	f7ff ffa7 	bl	800fcec <sbrk_aligned>
 800fd9e:	3001      	adds	r0, #1
 800fda0:	d037      	beq.n	800fe12 <_malloc_r+0xe6>
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	442b      	add	r3, r5
 800fda6:	6023      	str	r3, [r4, #0]
 800fda8:	f8d8 3000 	ldr.w	r3, [r8]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d038      	beq.n	800fe22 <_malloc_r+0xf6>
 800fdb0:	685a      	ldr	r2, [r3, #4]
 800fdb2:	42a2      	cmp	r2, r4
 800fdb4:	d12b      	bne.n	800fe0e <_malloc_r+0xe2>
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	605a      	str	r2, [r3, #4]
 800fdba:	e00f      	b.n	800fddc <_malloc_r+0xb0>
 800fdbc:	6822      	ldr	r2, [r4, #0]
 800fdbe:	1b52      	subs	r2, r2, r5
 800fdc0:	d41f      	bmi.n	800fe02 <_malloc_r+0xd6>
 800fdc2:	2a0b      	cmp	r2, #11
 800fdc4:	d917      	bls.n	800fdf6 <_malloc_r+0xca>
 800fdc6:	1961      	adds	r1, r4, r5
 800fdc8:	42a3      	cmp	r3, r4
 800fdca:	6025      	str	r5, [r4, #0]
 800fdcc:	bf18      	it	ne
 800fdce:	6059      	strne	r1, [r3, #4]
 800fdd0:	6863      	ldr	r3, [r4, #4]
 800fdd2:	bf08      	it	eq
 800fdd4:	f8c8 1000 	streq.w	r1, [r8]
 800fdd8:	5162      	str	r2, [r4, r5]
 800fdda:	604b      	str	r3, [r1, #4]
 800fddc:	4638      	mov	r0, r7
 800fdde:	f104 060b 	add.w	r6, r4, #11
 800fde2:	f000 f829 	bl	800fe38 <__malloc_unlock>
 800fde6:	f026 0607 	bic.w	r6, r6, #7
 800fdea:	1d23      	adds	r3, r4, #4
 800fdec:	1af2      	subs	r2, r6, r3
 800fdee:	d0ae      	beq.n	800fd4e <_malloc_r+0x22>
 800fdf0:	1b9b      	subs	r3, r3, r6
 800fdf2:	50a3      	str	r3, [r4, r2]
 800fdf4:	e7ab      	b.n	800fd4e <_malloc_r+0x22>
 800fdf6:	42a3      	cmp	r3, r4
 800fdf8:	6862      	ldr	r2, [r4, #4]
 800fdfa:	d1dd      	bne.n	800fdb8 <_malloc_r+0x8c>
 800fdfc:	f8c8 2000 	str.w	r2, [r8]
 800fe00:	e7ec      	b.n	800fddc <_malloc_r+0xb0>
 800fe02:	4623      	mov	r3, r4
 800fe04:	6864      	ldr	r4, [r4, #4]
 800fe06:	e7ac      	b.n	800fd62 <_malloc_r+0x36>
 800fe08:	4634      	mov	r4, r6
 800fe0a:	6876      	ldr	r6, [r6, #4]
 800fe0c:	e7b4      	b.n	800fd78 <_malloc_r+0x4c>
 800fe0e:	4613      	mov	r3, r2
 800fe10:	e7cc      	b.n	800fdac <_malloc_r+0x80>
 800fe12:	230c      	movs	r3, #12
 800fe14:	603b      	str	r3, [r7, #0]
 800fe16:	4638      	mov	r0, r7
 800fe18:	f000 f80e 	bl	800fe38 <__malloc_unlock>
 800fe1c:	e797      	b.n	800fd4e <_malloc_r+0x22>
 800fe1e:	6025      	str	r5, [r4, #0]
 800fe20:	e7dc      	b.n	800fddc <_malloc_r+0xb0>
 800fe22:	605b      	str	r3, [r3, #4]
 800fe24:	deff      	udf	#255	; 0xff
 800fe26:	bf00      	nop
 800fe28:	2000a6ec 	.word	0x2000a6ec

0800fe2c <__malloc_lock>:
 800fe2c:	4801      	ldr	r0, [pc, #4]	; (800fe34 <__malloc_lock+0x8>)
 800fe2e:	f7ff beda 	b.w	800fbe6 <__retarget_lock_acquire_recursive>
 800fe32:	bf00      	nop
 800fe34:	2000a6e8 	.word	0x2000a6e8

0800fe38 <__malloc_unlock>:
 800fe38:	4801      	ldr	r0, [pc, #4]	; (800fe40 <__malloc_unlock+0x8>)
 800fe3a:	f7ff bed5 	b.w	800fbe8 <__retarget_lock_release_recursive>
 800fe3e:	bf00      	nop
 800fe40:	2000a6e8 	.word	0x2000a6e8

0800fe44 <__sfputc_r>:
 800fe44:	6893      	ldr	r3, [r2, #8]
 800fe46:	3b01      	subs	r3, #1
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	b410      	push	{r4}
 800fe4c:	6093      	str	r3, [r2, #8]
 800fe4e:	da08      	bge.n	800fe62 <__sfputc_r+0x1e>
 800fe50:	6994      	ldr	r4, [r2, #24]
 800fe52:	42a3      	cmp	r3, r4
 800fe54:	db01      	blt.n	800fe5a <__sfputc_r+0x16>
 800fe56:	290a      	cmp	r1, #10
 800fe58:	d103      	bne.n	800fe62 <__sfputc_r+0x1e>
 800fe5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe5e:	f000 bb85 	b.w	801056c <__swbuf_r>
 800fe62:	6813      	ldr	r3, [r2, #0]
 800fe64:	1c58      	adds	r0, r3, #1
 800fe66:	6010      	str	r0, [r2, #0]
 800fe68:	7019      	strb	r1, [r3, #0]
 800fe6a:	4608      	mov	r0, r1
 800fe6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe70:	4770      	bx	lr

0800fe72 <__sfputs_r>:
 800fe72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe74:	4606      	mov	r6, r0
 800fe76:	460f      	mov	r7, r1
 800fe78:	4614      	mov	r4, r2
 800fe7a:	18d5      	adds	r5, r2, r3
 800fe7c:	42ac      	cmp	r4, r5
 800fe7e:	d101      	bne.n	800fe84 <__sfputs_r+0x12>
 800fe80:	2000      	movs	r0, #0
 800fe82:	e007      	b.n	800fe94 <__sfputs_r+0x22>
 800fe84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe88:	463a      	mov	r2, r7
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f7ff ffda 	bl	800fe44 <__sfputc_r>
 800fe90:	1c43      	adds	r3, r0, #1
 800fe92:	d1f3      	bne.n	800fe7c <__sfputs_r+0xa>
 800fe94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe98 <_vfiprintf_r>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	b09d      	sub	sp, #116	; 0x74
 800fea0:	4614      	mov	r4, r2
 800fea2:	4698      	mov	r8, r3
 800fea4:	4606      	mov	r6, r0
 800fea6:	b118      	cbz	r0, 800feb0 <_vfiprintf_r+0x18>
 800fea8:	6a03      	ldr	r3, [r0, #32]
 800feaa:	b90b      	cbnz	r3, 800feb0 <_vfiprintf_r+0x18>
 800feac:	f7ff fd8c 	bl	800f9c8 <__sinit>
 800feb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feb2:	07d9      	lsls	r1, r3, #31
 800feb4:	d405      	bmi.n	800fec2 <_vfiprintf_r+0x2a>
 800feb6:	89ab      	ldrh	r3, [r5, #12]
 800feb8:	059a      	lsls	r2, r3, #22
 800feba:	d402      	bmi.n	800fec2 <_vfiprintf_r+0x2a>
 800febc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800febe:	f7ff fe92 	bl	800fbe6 <__retarget_lock_acquire_recursive>
 800fec2:	89ab      	ldrh	r3, [r5, #12]
 800fec4:	071b      	lsls	r3, r3, #28
 800fec6:	d501      	bpl.n	800fecc <_vfiprintf_r+0x34>
 800fec8:	692b      	ldr	r3, [r5, #16]
 800feca:	b99b      	cbnz	r3, 800fef4 <_vfiprintf_r+0x5c>
 800fecc:	4629      	mov	r1, r5
 800fece:	4630      	mov	r0, r6
 800fed0:	f000 fb8a 	bl	80105e8 <__swsetup_r>
 800fed4:	b170      	cbz	r0, 800fef4 <_vfiprintf_r+0x5c>
 800fed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fed8:	07dc      	lsls	r4, r3, #31
 800feda:	d504      	bpl.n	800fee6 <_vfiprintf_r+0x4e>
 800fedc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fee0:	b01d      	add	sp, #116	; 0x74
 800fee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee6:	89ab      	ldrh	r3, [r5, #12]
 800fee8:	0598      	lsls	r0, r3, #22
 800feea:	d4f7      	bmi.n	800fedc <_vfiprintf_r+0x44>
 800feec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feee:	f7ff fe7b 	bl	800fbe8 <__retarget_lock_release_recursive>
 800fef2:	e7f3      	b.n	800fedc <_vfiprintf_r+0x44>
 800fef4:	2300      	movs	r3, #0
 800fef6:	9309      	str	r3, [sp, #36]	; 0x24
 800fef8:	2320      	movs	r3, #32
 800fefa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fefe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff02:	2330      	movs	r3, #48	; 0x30
 800ff04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80100b8 <_vfiprintf_r+0x220>
 800ff08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff0c:	f04f 0901 	mov.w	r9, #1
 800ff10:	4623      	mov	r3, r4
 800ff12:	469a      	mov	sl, r3
 800ff14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff18:	b10a      	cbz	r2, 800ff1e <_vfiprintf_r+0x86>
 800ff1a:	2a25      	cmp	r2, #37	; 0x25
 800ff1c:	d1f9      	bne.n	800ff12 <_vfiprintf_r+0x7a>
 800ff1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ff22:	d00b      	beq.n	800ff3c <_vfiprintf_r+0xa4>
 800ff24:	465b      	mov	r3, fp
 800ff26:	4622      	mov	r2, r4
 800ff28:	4629      	mov	r1, r5
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	f7ff ffa1 	bl	800fe72 <__sfputs_r>
 800ff30:	3001      	adds	r0, #1
 800ff32:	f000 80a9 	beq.w	8010088 <_vfiprintf_r+0x1f0>
 800ff36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff38:	445a      	add	r2, fp
 800ff3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ff3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f000 80a1 	beq.w	8010088 <_vfiprintf_r+0x1f0>
 800ff46:	2300      	movs	r3, #0
 800ff48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff50:	f10a 0a01 	add.w	sl, sl, #1
 800ff54:	9304      	str	r3, [sp, #16]
 800ff56:	9307      	str	r3, [sp, #28]
 800ff58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ff5e:	4654      	mov	r4, sl
 800ff60:	2205      	movs	r2, #5
 800ff62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff66:	4854      	ldr	r0, [pc, #336]	; (80100b8 <_vfiprintf_r+0x220>)
 800ff68:	f7f0 f96a 	bl	8000240 <memchr>
 800ff6c:	9a04      	ldr	r2, [sp, #16]
 800ff6e:	b9d8      	cbnz	r0, 800ffa8 <_vfiprintf_r+0x110>
 800ff70:	06d1      	lsls	r1, r2, #27
 800ff72:	bf44      	itt	mi
 800ff74:	2320      	movmi	r3, #32
 800ff76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff7a:	0713      	lsls	r3, r2, #28
 800ff7c:	bf44      	itt	mi
 800ff7e:	232b      	movmi	r3, #43	; 0x2b
 800ff80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff84:	f89a 3000 	ldrb.w	r3, [sl]
 800ff88:	2b2a      	cmp	r3, #42	; 0x2a
 800ff8a:	d015      	beq.n	800ffb8 <_vfiprintf_r+0x120>
 800ff8c:	9a07      	ldr	r2, [sp, #28]
 800ff8e:	4654      	mov	r4, sl
 800ff90:	2000      	movs	r0, #0
 800ff92:	f04f 0c0a 	mov.w	ip, #10
 800ff96:	4621      	mov	r1, r4
 800ff98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff9c:	3b30      	subs	r3, #48	; 0x30
 800ff9e:	2b09      	cmp	r3, #9
 800ffa0:	d94d      	bls.n	801003e <_vfiprintf_r+0x1a6>
 800ffa2:	b1b0      	cbz	r0, 800ffd2 <_vfiprintf_r+0x13a>
 800ffa4:	9207      	str	r2, [sp, #28]
 800ffa6:	e014      	b.n	800ffd2 <_vfiprintf_r+0x13a>
 800ffa8:	eba0 0308 	sub.w	r3, r0, r8
 800ffac:	fa09 f303 	lsl.w	r3, r9, r3
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	9304      	str	r3, [sp, #16]
 800ffb4:	46a2      	mov	sl, r4
 800ffb6:	e7d2      	b.n	800ff5e <_vfiprintf_r+0xc6>
 800ffb8:	9b03      	ldr	r3, [sp, #12]
 800ffba:	1d19      	adds	r1, r3, #4
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	9103      	str	r1, [sp, #12]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	bfbb      	ittet	lt
 800ffc4:	425b      	neglt	r3, r3
 800ffc6:	f042 0202 	orrlt.w	r2, r2, #2
 800ffca:	9307      	strge	r3, [sp, #28]
 800ffcc:	9307      	strlt	r3, [sp, #28]
 800ffce:	bfb8      	it	lt
 800ffd0:	9204      	strlt	r2, [sp, #16]
 800ffd2:	7823      	ldrb	r3, [r4, #0]
 800ffd4:	2b2e      	cmp	r3, #46	; 0x2e
 800ffd6:	d10c      	bne.n	800fff2 <_vfiprintf_r+0x15a>
 800ffd8:	7863      	ldrb	r3, [r4, #1]
 800ffda:	2b2a      	cmp	r3, #42	; 0x2a
 800ffdc:	d134      	bne.n	8010048 <_vfiprintf_r+0x1b0>
 800ffde:	9b03      	ldr	r3, [sp, #12]
 800ffe0:	1d1a      	adds	r2, r3, #4
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	9203      	str	r2, [sp, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	bfb8      	it	lt
 800ffea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ffee:	3402      	adds	r4, #2
 800fff0:	9305      	str	r3, [sp, #20]
 800fff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80100c8 <_vfiprintf_r+0x230>
 800fff6:	7821      	ldrb	r1, [r4, #0]
 800fff8:	2203      	movs	r2, #3
 800fffa:	4650      	mov	r0, sl
 800fffc:	f7f0 f920 	bl	8000240 <memchr>
 8010000:	b138      	cbz	r0, 8010012 <_vfiprintf_r+0x17a>
 8010002:	9b04      	ldr	r3, [sp, #16]
 8010004:	eba0 000a 	sub.w	r0, r0, sl
 8010008:	2240      	movs	r2, #64	; 0x40
 801000a:	4082      	lsls	r2, r0
 801000c:	4313      	orrs	r3, r2
 801000e:	3401      	adds	r4, #1
 8010010:	9304      	str	r3, [sp, #16]
 8010012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010016:	4829      	ldr	r0, [pc, #164]	; (80100bc <_vfiprintf_r+0x224>)
 8010018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801001c:	2206      	movs	r2, #6
 801001e:	f7f0 f90f 	bl	8000240 <memchr>
 8010022:	2800      	cmp	r0, #0
 8010024:	d03f      	beq.n	80100a6 <_vfiprintf_r+0x20e>
 8010026:	4b26      	ldr	r3, [pc, #152]	; (80100c0 <_vfiprintf_r+0x228>)
 8010028:	bb1b      	cbnz	r3, 8010072 <_vfiprintf_r+0x1da>
 801002a:	9b03      	ldr	r3, [sp, #12]
 801002c:	3307      	adds	r3, #7
 801002e:	f023 0307 	bic.w	r3, r3, #7
 8010032:	3308      	adds	r3, #8
 8010034:	9303      	str	r3, [sp, #12]
 8010036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010038:	443b      	add	r3, r7
 801003a:	9309      	str	r3, [sp, #36]	; 0x24
 801003c:	e768      	b.n	800ff10 <_vfiprintf_r+0x78>
 801003e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010042:	460c      	mov	r4, r1
 8010044:	2001      	movs	r0, #1
 8010046:	e7a6      	b.n	800ff96 <_vfiprintf_r+0xfe>
 8010048:	2300      	movs	r3, #0
 801004a:	3401      	adds	r4, #1
 801004c:	9305      	str	r3, [sp, #20]
 801004e:	4619      	mov	r1, r3
 8010050:	f04f 0c0a 	mov.w	ip, #10
 8010054:	4620      	mov	r0, r4
 8010056:	f810 2b01 	ldrb.w	r2, [r0], #1
 801005a:	3a30      	subs	r2, #48	; 0x30
 801005c:	2a09      	cmp	r2, #9
 801005e:	d903      	bls.n	8010068 <_vfiprintf_r+0x1d0>
 8010060:	2b00      	cmp	r3, #0
 8010062:	d0c6      	beq.n	800fff2 <_vfiprintf_r+0x15a>
 8010064:	9105      	str	r1, [sp, #20]
 8010066:	e7c4      	b.n	800fff2 <_vfiprintf_r+0x15a>
 8010068:	fb0c 2101 	mla	r1, ip, r1, r2
 801006c:	4604      	mov	r4, r0
 801006e:	2301      	movs	r3, #1
 8010070:	e7f0      	b.n	8010054 <_vfiprintf_r+0x1bc>
 8010072:	ab03      	add	r3, sp, #12
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	462a      	mov	r2, r5
 8010078:	4b12      	ldr	r3, [pc, #72]	; (80100c4 <_vfiprintf_r+0x22c>)
 801007a:	a904      	add	r1, sp, #16
 801007c:	4630      	mov	r0, r6
 801007e:	f3af 8000 	nop.w
 8010082:	4607      	mov	r7, r0
 8010084:	1c78      	adds	r0, r7, #1
 8010086:	d1d6      	bne.n	8010036 <_vfiprintf_r+0x19e>
 8010088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801008a:	07d9      	lsls	r1, r3, #31
 801008c:	d405      	bmi.n	801009a <_vfiprintf_r+0x202>
 801008e:	89ab      	ldrh	r3, [r5, #12]
 8010090:	059a      	lsls	r2, r3, #22
 8010092:	d402      	bmi.n	801009a <_vfiprintf_r+0x202>
 8010094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010096:	f7ff fda7 	bl	800fbe8 <__retarget_lock_release_recursive>
 801009a:	89ab      	ldrh	r3, [r5, #12]
 801009c:	065b      	lsls	r3, r3, #25
 801009e:	f53f af1d 	bmi.w	800fedc <_vfiprintf_r+0x44>
 80100a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100a4:	e71c      	b.n	800fee0 <_vfiprintf_r+0x48>
 80100a6:	ab03      	add	r3, sp, #12
 80100a8:	9300      	str	r3, [sp, #0]
 80100aa:	462a      	mov	r2, r5
 80100ac:	4b05      	ldr	r3, [pc, #20]	; (80100c4 <_vfiprintf_r+0x22c>)
 80100ae:	a904      	add	r1, sp, #16
 80100b0:	4630      	mov	r0, r6
 80100b2:	f000 f879 	bl	80101a8 <_printf_i>
 80100b6:	e7e4      	b.n	8010082 <_vfiprintf_r+0x1ea>
 80100b8:	080137ad 	.word	0x080137ad
 80100bc:	080137b7 	.word	0x080137b7
 80100c0:	00000000 	.word	0x00000000
 80100c4:	0800fe73 	.word	0x0800fe73
 80100c8:	080137b3 	.word	0x080137b3

080100cc <_printf_common>:
 80100cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100d0:	4616      	mov	r6, r2
 80100d2:	4699      	mov	r9, r3
 80100d4:	688a      	ldr	r2, [r1, #8]
 80100d6:	690b      	ldr	r3, [r1, #16]
 80100d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100dc:	4293      	cmp	r3, r2
 80100de:	bfb8      	it	lt
 80100e0:	4613      	movlt	r3, r2
 80100e2:	6033      	str	r3, [r6, #0]
 80100e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100e8:	4607      	mov	r7, r0
 80100ea:	460c      	mov	r4, r1
 80100ec:	b10a      	cbz	r2, 80100f2 <_printf_common+0x26>
 80100ee:	3301      	adds	r3, #1
 80100f0:	6033      	str	r3, [r6, #0]
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	0699      	lsls	r1, r3, #26
 80100f6:	bf42      	ittt	mi
 80100f8:	6833      	ldrmi	r3, [r6, #0]
 80100fa:	3302      	addmi	r3, #2
 80100fc:	6033      	strmi	r3, [r6, #0]
 80100fe:	6825      	ldr	r5, [r4, #0]
 8010100:	f015 0506 	ands.w	r5, r5, #6
 8010104:	d106      	bne.n	8010114 <_printf_common+0x48>
 8010106:	f104 0a19 	add.w	sl, r4, #25
 801010a:	68e3      	ldr	r3, [r4, #12]
 801010c:	6832      	ldr	r2, [r6, #0]
 801010e:	1a9b      	subs	r3, r3, r2
 8010110:	42ab      	cmp	r3, r5
 8010112:	dc26      	bgt.n	8010162 <_printf_common+0x96>
 8010114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010118:	1e13      	subs	r3, r2, #0
 801011a:	6822      	ldr	r2, [r4, #0]
 801011c:	bf18      	it	ne
 801011e:	2301      	movne	r3, #1
 8010120:	0692      	lsls	r2, r2, #26
 8010122:	d42b      	bmi.n	801017c <_printf_common+0xb0>
 8010124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010128:	4649      	mov	r1, r9
 801012a:	4638      	mov	r0, r7
 801012c:	47c0      	blx	r8
 801012e:	3001      	adds	r0, #1
 8010130:	d01e      	beq.n	8010170 <_printf_common+0xa4>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	6922      	ldr	r2, [r4, #16]
 8010136:	f003 0306 	and.w	r3, r3, #6
 801013a:	2b04      	cmp	r3, #4
 801013c:	bf02      	ittt	eq
 801013e:	68e5      	ldreq	r5, [r4, #12]
 8010140:	6833      	ldreq	r3, [r6, #0]
 8010142:	1aed      	subeq	r5, r5, r3
 8010144:	68a3      	ldr	r3, [r4, #8]
 8010146:	bf0c      	ite	eq
 8010148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801014c:	2500      	movne	r5, #0
 801014e:	4293      	cmp	r3, r2
 8010150:	bfc4      	itt	gt
 8010152:	1a9b      	subgt	r3, r3, r2
 8010154:	18ed      	addgt	r5, r5, r3
 8010156:	2600      	movs	r6, #0
 8010158:	341a      	adds	r4, #26
 801015a:	42b5      	cmp	r5, r6
 801015c:	d11a      	bne.n	8010194 <_printf_common+0xc8>
 801015e:	2000      	movs	r0, #0
 8010160:	e008      	b.n	8010174 <_printf_common+0xa8>
 8010162:	2301      	movs	r3, #1
 8010164:	4652      	mov	r2, sl
 8010166:	4649      	mov	r1, r9
 8010168:	4638      	mov	r0, r7
 801016a:	47c0      	blx	r8
 801016c:	3001      	adds	r0, #1
 801016e:	d103      	bne.n	8010178 <_printf_common+0xac>
 8010170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	3501      	adds	r5, #1
 801017a:	e7c6      	b.n	801010a <_printf_common+0x3e>
 801017c:	18e1      	adds	r1, r4, r3
 801017e:	1c5a      	adds	r2, r3, #1
 8010180:	2030      	movs	r0, #48	; 0x30
 8010182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010186:	4422      	add	r2, r4
 8010188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801018c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010190:	3302      	adds	r3, #2
 8010192:	e7c7      	b.n	8010124 <_printf_common+0x58>
 8010194:	2301      	movs	r3, #1
 8010196:	4622      	mov	r2, r4
 8010198:	4649      	mov	r1, r9
 801019a:	4638      	mov	r0, r7
 801019c:	47c0      	blx	r8
 801019e:	3001      	adds	r0, #1
 80101a0:	d0e6      	beq.n	8010170 <_printf_common+0xa4>
 80101a2:	3601      	adds	r6, #1
 80101a4:	e7d9      	b.n	801015a <_printf_common+0x8e>
	...

080101a8 <_printf_i>:
 80101a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101ac:	7e0f      	ldrb	r7, [r1, #24]
 80101ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101b0:	2f78      	cmp	r7, #120	; 0x78
 80101b2:	4691      	mov	r9, r2
 80101b4:	4680      	mov	r8, r0
 80101b6:	460c      	mov	r4, r1
 80101b8:	469a      	mov	sl, r3
 80101ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80101be:	d807      	bhi.n	80101d0 <_printf_i+0x28>
 80101c0:	2f62      	cmp	r7, #98	; 0x62
 80101c2:	d80a      	bhi.n	80101da <_printf_i+0x32>
 80101c4:	2f00      	cmp	r7, #0
 80101c6:	f000 80d4 	beq.w	8010372 <_printf_i+0x1ca>
 80101ca:	2f58      	cmp	r7, #88	; 0x58
 80101cc:	f000 80c0 	beq.w	8010350 <_printf_i+0x1a8>
 80101d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101d8:	e03a      	b.n	8010250 <_printf_i+0xa8>
 80101da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101de:	2b15      	cmp	r3, #21
 80101e0:	d8f6      	bhi.n	80101d0 <_printf_i+0x28>
 80101e2:	a101      	add	r1, pc, #4	; (adr r1, 80101e8 <_printf_i+0x40>)
 80101e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101e8:	08010241 	.word	0x08010241
 80101ec:	08010255 	.word	0x08010255
 80101f0:	080101d1 	.word	0x080101d1
 80101f4:	080101d1 	.word	0x080101d1
 80101f8:	080101d1 	.word	0x080101d1
 80101fc:	080101d1 	.word	0x080101d1
 8010200:	08010255 	.word	0x08010255
 8010204:	080101d1 	.word	0x080101d1
 8010208:	080101d1 	.word	0x080101d1
 801020c:	080101d1 	.word	0x080101d1
 8010210:	080101d1 	.word	0x080101d1
 8010214:	08010359 	.word	0x08010359
 8010218:	08010281 	.word	0x08010281
 801021c:	08010313 	.word	0x08010313
 8010220:	080101d1 	.word	0x080101d1
 8010224:	080101d1 	.word	0x080101d1
 8010228:	0801037b 	.word	0x0801037b
 801022c:	080101d1 	.word	0x080101d1
 8010230:	08010281 	.word	0x08010281
 8010234:	080101d1 	.word	0x080101d1
 8010238:	080101d1 	.word	0x080101d1
 801023c:	0801031b 	.word	0x0801031b
 8010240:	682b      	ldr	r3, [r5, #0]
 8010242:	1d1a      	adds	r2, r3, #4
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	602a      	str	r2, [r5, #0]
 8010248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801024c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010250:	2301      	movs	r3, #1
 8010252:	e09f      	b.n	8010394 <_printf_i+0x1ec>
 8010254:	6820      	ldr	r0, [r4, #0]
 8010256:	682b      	ldr	r3, [r5, #0]
 8010258:	0607      	lsls	r7, r0, #24
 801025a:	f103 0104 	add.w	r1, r3, #4
 801025e:	6029      	str	r1, [r5, #0]
 8010260:	d501      	bpl.n	8010266 <_printf_i+0xbe>
 8010262:	681e      	ldr	r6, [r3, #0]
 8010264:	e003      	b.n	801026e <_printf_i+0xc6>
 8010266:	0646      	lsls	r6, r0, #25
 8010268:	d5fb      	bpl.n	8010262 <_printf_i+0xba>
 801026a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801026e:	2e00      	cmp	r6, #0
 8010270:	da03      	bge.n	801027a <_printf_i+0xd2>
 8010272:	232d      	movs	r3, #45	; 0x2d
 8010274:	4276      	negs	r6, r6
 8010276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801027a:	485a      	ldr	r0, [pc, #360]	; (80103e4 <_printf_i+0x23c>)
 801027c:	230a      	movs	r3, #10
 801027e:	e012      	b.n	80102a6 <_printf_i+0xfe>
 8010280:	682b      	ldr	r3, [r5, #0]
 8010282:	6820      	ldr	r0, [r4, #0]
 8010284:	1d19      	adds	r1, r3, #4
 8010286:	6029      	str	r1, [r5, #0]
 8010288:	0605      	lsls	r5, r0, #24
 801028a:	d501      	bpl.n	8010290 <_printf_i+0xe8>
 801028c:	681e      	ldr	r6, [r3, #0]
 801028e:	e002      	b.n	8010296 <_printf_i+0xee>
 8010290:	0641      	lsls	r1, r0, #25
 8010292:	d5fb      	bpl.n	801028c <_printf_i+0xe4>
 8010294:	881e      	ldrh	r6, [r3, #0]
 8010296:	4853      	ldr	r0, [pc, #332]	; (80103e4 <_printf_i+0x23c>)
 8010298:	2f6f      	cmp	r7, #111	; 0x6f
 801029a:	bf0c      	ite	eq
 801029c:	2308      	moveq	r3, #8
 801029e:	230a      	movne	r3, #10
 80102a0:	2100      	movs	r1, #0
 80102a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102a6:	6865      	ldr	r5, [r4, #4]
 80102a8:	60a5      	str	r5, [r4, #8]
 80102aa:	2d00      	cmp	r5, #0
 80102ac:	bfa2      	ittt	ge
 80102ae:	6821      	ldrge	r1, [r4, #0]
 80102b0:	f021 0104 	bicge.w	r1, r1, #4
 80102b4:	6021      	strge	r1, [r4, #0]
 80102b6:	b90e      	cbnz	r6, 80102bc <_printf_i+0x114>
 80102b8:	2d00      	cmp	r5, #0
 80102ba:	d04b      	beq.n	8010354 <_printf_i+0x1ac>
 80102bc:	4615      	mov	r5, r2
 80102be:	fbb6 f1f3 	udiv	r1, r6, r3
 80102c2:	fb03 6711 	mls	r7, r3, r1, r6
 80102c6:	5dc7      	ldrb	r7, [r0, r7]
 80102c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80102cc:	4637      	mov	r7, r6
 80102ce:	42bb      	cmp	r3, r7
 80102d0:	460e      	mov	r6, r1
 80102d2:	d9f4      	bls.n	80102be <_printf_i+0x116>
 80102d4:	2b08      	cmp	r3, #8
 80102d6:	d10b      	bne.n	80102f0 <_printf_i+0x148>
 80102d8:	6823      	ldr	r3, [r4, #0]
 80102da:	07de      	lsls	r6, r3, #31
 80102dc:	d508      	bpl.n	80102f0 <_printf_i+0x148>
 80102de:	6923      	ldr	r3, [r4, #16]
 80102e0:	6861      	ldr	r1, [r4, #4]
 80102e2:	4299      	cmp	r1, r3
 80102e4:	bfde      	ittt	le
 80102e6:	2330      	movle	r3, #48	; 0x30
 80102e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80102f0:	1b52      	subs	r2, r2, r5
 80102f2:	6122      	str	r2, [r4, #16]
 80102f4:	f8cd a000 	str.w	sl, [sp]
 80102f8:	464b      	mov	r3, r9
 80102fa:	aa03      	add	r2, sp, #12
 80102fc:	4621      	mov	r1, r4
 80102fe:	4640      	mov	r0, r8
 8010300:	f7ff fee4 	bl	80100cc <_printf_common>
 8010304:	3001      	adds	r0, #1
 8010306:	d14a      	bne.n	801039e <_printf_i+0x1f6>
 8010308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801030c:	b004      	add	sp, #16
 801030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	f043 0320 	orr.w	r3, r3, #32
 8010318:	6023      	str	r3, [r4, #0]
 801031a:	4833      	ldr	r0, [pc, #204]	; (80103e8 <_printf_i+0x240>)
 801031c:	2778      	movs	r7, #120	; 0x78
 801031e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	6829      	ldr	r1, [r5, #0]
 8010326:	061f      	lsls	r7, r3, #24
 8010328:	f851 6b04 	ldr.w	r6, [r1], #4
 801032c:	d402      	bmi.n	8010334 <_printf_i+0x18c>
 801032e:	065f      	lsls	r7, r3, #25
 8010330:	bf48      	it	mi
 8010332:	b2b6      	uxthmi	r6, r6
 8010334:	07df      	lsls	r7, r3, #31
 8010336:	bf48      	it	mi
 8010338:	f043 0320 	orrmi.w	r3, r3, #32
 801033c:	6029      	str	r1, [r5, #0]
 801033e:	bf48      	it	mi
 8010340:	6023      	strmi	r3, [r4, #0]
 8010342:	b91e      	cbnz	r6, 801034c <_printf_i+0x1a4>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	f023 0320 	bic.w	r3, r3, #32
 801034a:	6023      	str	r3, [r4, #0]
 801034c:	2310      	movs	r3, #16
 801034e:	e7a7      	b.n	80102a0 <_printf_i+0xf8>
 8010350:	4824      	ldr	r0, [pc, #144]	; (80103e4 <_printf_i+0x23c>)
 8010352:	e7e4      	b.n	801031e <_printf_i+0x176>
 8010354:	4615      	mov	r5, r2
 8010356:	e7bd      	b.n	80102d4 <_printf_i+0x12c>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	6826      	ldr	r6, [r4, #0]
 801035c:	6961      	ldr	r1, [r4, #20]
 801035e:	1d18      	adds	r0, r3, #4
 8010360:	6028      	str	r0, [r5, #0]
 8010362:	0635      	lsls	r5, r6, #24
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	d501      	bpl.n	801036c <_printf_i+0x1c4>
 8010368:	6019      	str	r1, [r3, #0]
 801036a:	e002      	b.n	8010372 <_printf_i+0x1ca>
 801036c:	0670      	lsls	r0, r6, #25
 801036e:	d5fb      	bpl.n	8010368 <_printf_i+0x1c0>
 8010370:	8019      	strh	r1, [r3, #0]
 8010372:	2300      	movs	r3, #0
 8010374:	6123      	str	r3, [r4, #16]
 8010376:	4615      	mov	r5, r2
 8010378:	e7bc      	b.n	80102f4 <_printf_i+0x14c>
 801037a:	682b      	ldr	r3, [r5, #0]
 801037c:	1d1a      	adds	r2, r3, #4
 801037e:	602a      	str	r2, [r5, #0]
 8010380:	681d      	ldr	r5, [r3, #0]
 8010382:	6862      	ldr	r2, [r4, #4]
 8010384:	2100      	movs	r1, #0
 8010386:	4628      	mov	r0, r5
 8010388:	f7ef ff5a 	bl	8000240 <memchr>
 801038c:	b108      	cbz	r0, 8010392 <_printf_i+0x1ea>
 801038e:	1b40      	subs	r0, r0, r5
 8010390:	6060      	str	r0, [r4, #4]
 8010392:	6863      	ldr	r3, [r4, #4]
 8010394:	6123      	str	r3, [r4, #16]
 8010396:	2300      	movs	r3, #0
 8010398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801039c:	e7aa      	b.n	80102f4 <_printf_i+0x14c>
 801039e:	6923      	ldr	r3, [r4, #16]
 80103a0:	462a      	mov	r2, r5
 80103a2:	4649      	mov	r1, r9
 80103a4:	4640      	mov	r0, r8
 80103a6:	47d0      	blx	sl
 80103a8:	3001      	adds	r0, #1
 80103aa:	d0ad      	beq.n	8010308 <_printf_i+0x160>
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	079b      	lsls	r3, r3, #30
 80103b0:	d413      	bmi.n	80103da <_printf_i+0x232>
 80103b2:	68e0      	ldr	r0, [r4, #12]
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	4298      	cmp	r0, r3
 80103b8:	bfb8      	it	lt
 80103ba:	4618      	movlt	r0, r3
 80103bc:	e7a6      	b.n	801030c <_printf_i+0x164>
 80103be:	2301      	movs	r3, #1
 80103c0:	4632      	mov	r2, r6
 80103c2:	4649      	mov	r1, r9
 80103c4:	4640      	mov	r0, r8
 80103c6:	47d0      	blx	sl
 80103c8:	3001      	adds	r0, #1
 80103ca:	d09d      	beq.n	8010308 <_printf_i+0x160>
 80103cc:	3501      	adds	r5, #1
 80103ce:	68e3      	ldr	r3, [r4, #12]
 80103d0:	9903      	ldr	r1, [sp, #12]
 80103d2:	1a5b      	subs	r3, r3, r1
 80103d4:	42ab      	cmp	r3, r5
 80103d6:	dcf2      	bgt.n	80103be <_printf_i+0x216>
 80103d8:	e7eb      	b.n	80103b2 <_printf_i+0x20a>
 80103da:	2500      	movs	r5, #0
 80103dc:	f104 0619 	add.w	r6, r4, #25
 80103e0:	e7f5      	b.n	80103ce <_printf_i+0x226>
 80103e2:	bf00      	nop
 80103e4:	080137be 	.word	0x080137be
 80103e8:	080137cf 	.word	0x080137cf

080103ec <__sflush_r>:
 80103ec:	898a      	ldrh	r2, [r1, #12]
 80103ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f2:	4605      	mov	r5, r0
 80103f4:	0710      	lsls	r0, r2, #28
 80103f6:	460c      	mov	r4, r1
 80103f8:	d458      	bmi.n	80104ac <__sflush_r+0xc0>
 80103fa:	684b      	ldr	r3, [r1, #4]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	dc05      	bgt.n	801040c <__sflush_r+0x20>
 8010400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010402:	2b00      	cmp	r3, #0
 8010404:	dc02      	bgt.n	801040c <__sflush_r+0x20>
 8010406:	2000      	movs	r0, #0
 8010408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801040e:	2e00      	cmp	r6, #0
 8010410:	d0f9      	beq.n	8010406 <__sflush_r+0x1a>
 8010412:	2300      	movs	r3, #0
 8010414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010418:	682f      	ldr	r7, [r5, #0]
 801041a:	6a21      	ldr	r1, [r4, #32]
 801041c:	602b      	str	r3, [r5, #0]
 801041e:	d032      	beq.n	8010486 <__sflush_r+0x9a>
 8010420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010422:	89a3      	ldrh	r3, [r4, #12]
 8010424:	075a      	lsls	r2, r3, #29
 8010426:	d505      	bpl.n	8010434 <__sflush_r+0x48>
 8010428:	6863      	ldr	r3, [r4, #4]
 801042a:	1ac0      	subs	r0, r0, r3
 801042c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801042e:	b10b      	cbz	r3, 8010434 <__sflush_r+0x48>
 8010430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010432:	1ac0      	subs	r0, r0, r3
 8010434:	2300      	movs	r3, #0
 8010436:	4602      	mov	r2, r0
 8010438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801043a:	6a21      	ldr	r1, [r4, #32]
 801043c:	4628      	mov	r0, r5
 801043e:	47b0      	blx	r6
 8010440:	1c43      	adds	r3, r0, #1
 8010442:	89a3      	ldrh	r3, [r4, #12]
 8010444:	d106      	bne.n	8010454 <__sflush_r+0x68>
 8010446:	6829      	ldr	r1, [r5, #0]
 8010448:	291d      	cmp	r1, #29
 801044a:	d82b      	bhi.n	80104a4 <__sflush_r+0xb8>
 801044c:	4a29      	ldr	r2, [pc, #164]	; (80104f4 <__sflush_r+0x108>)
 801044e:	410a      	asrs	r2, r1
 8010450:	07d6      	lsls	r6, r2, #31
 8010452:	d427      	bmi.n	80104a4 <__sflush_r+0xb8>
 8010454:	2200      	movs	r2, #0
 8010456:	6062      	str	r2, [r4, #4]
 8010458:	04d9      	lsls	r1, r3, #19
 801045a:	6922      	ldr	r2, [r4, #16]
 801045c:	6022      	str	r2, [r4, #0]
 801045e:	d504      	bpl.n	801046a <__sflush_r+0x7e>
 8010460:	1c42      	adds	r2, r0, #1
 8010462:	d101      	bne.n	8010468 <__sflush_r+0x7c>
 8010464:	682b      	ldr	r3, [r5, #0]
 8010466:	b903      	cbnz	r3, 801046a <__sflush_r+0x7e>
 8010468:	6560      	str	r0, [r4, #84]	; 0x54
 801046a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801046c:	602f      	str	r7, [r5, #0]
 801046e:	2900      	cmp	r1, #0
 8010470:	d0c9      	beq.n	8010406 <__sflush_r+0x1a>
 8010472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010476:	4299      	cmp	r1, r3
 8010478:	d002      	beq.n	8010480 <__sflush_r+0x94>
 801047a:	4628      	mov	r0, r5
 801047c:	f7ff fbe2 	bl	800fc44 <_free_r>
 8010480:	2000      	movs	r0, #0
 8010482:	6360      	str	r0, [r4, #52]	; 0x34
 8010484:	e7c0      	b.n	8010408 <__sflush_r+0x1c>
 8010486:	2301      	movs	r3, #1
 8010488:	4628      	mov	r0, r5
 801048a:	47b0      	blx	r6
 801048c:	1c41      	adds	r1, r0, #1
 801048e:	d1c8      	bne.n	8010422 <__sflush_r+0x36>
 8010490:	682b      	ldr	r3, [r5, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d0c5      	beq.n	8010422 <__sflush_r+0x36>
 8010496:	2b1d      	cmp	r3, #29
 8010498:	d001      	beq.n	801049e <__sflush_r+0xb2>
 801049a:	2b16      	cmp	r3, #22
 801049c:	d101      	bne.n	80104a2 <__sflush_r+0xb6>
 801049e:	602f      	str	r7, [r5, #0]
 80104a0:	e7b1      	b.n	8010406 <__sflush_r+0x1a>
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104a8:	81a3      	strh	r3, [r4, #12]
 80104aa:	e7ad      	b.n	8010408 <__sflush_r+0x1c>
 80104ac:	690f      	ldr	r7, [r1, #16]
 80104ae:	2f00      	cmp	r7, #0
 80104b0:	d0a9      	beq.n	8010406 <__sflush_r+0x1a>
 80104b2:	0793      	lsls	r3, r2, #30
 80104b4:	680e      	ldr	r6, [r1, #0]
 80104b6:	bf08      	it	eq
 80104b8:	694b      	ldreq	r3, [r1, #20]
 80104ba:	600f      	str	r7, [r1, #0]
 80104bc:	bf18      	it	ne
 80104be:	2300      	movne	r3, #0
 80104c0:	eba6 0807 	sub.w	r8, r6, r7
 80104c4:	608b      	str	r3, [r1, #8]
 80104c6:	f1b8 0f00 	cmp.w	r8, #0
 80104ca:	dd9c      	ble.n	8010406 <__sflush_r+0x1a>
 80104cc:	6a21      	ldr	r1, [r4, #32]
 80104ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80104d0:	4643      	mov	r3, r8
 80104d2:	463a      	mov	r2, r7
 80104d4:	4628      	mov	r0, r5
 80104d6:	47b0      	blx	r6
 80104d8:	2800      	cmp	r0, #0
 80104da:	dc06      	bgt.n	80104ea <__sflush_r+0xfe>
 80104dc:	89a3      	ldrh	r3, [r4, #12]
 80104de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104e2:	81a3      	strh	r3, [r4, #12]
 80104e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104e8:	e78e      	b.n	8010408 <__sflush_r+0x1c>
 80104ea:	4407      	add	r7, r0
 80104ec:	eba8 0800 	sub.w	r8, r8, r0
 80104f0:	e7e9      	b.n	80104c6 <__sflush_r+0xda>
 80104f2:	bf00      	nop
 80104f4:	dfbffffe 	.word	0xdfbffffe

080104f8 <_fflush_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	690b      	ldr	r3, [r1, #16]
 80104fc:	4605      	mov	r5, r0
 80104fe:	460c      	mov	r4, r1
 8010500:	b913      	cbnz	r3, 8010508 <_fflush_r+0x10>
 8010502:	2500      	movs	r5, #0
 8010504:	4628      	mov	r0, r5
 8010506:	bd38      	pop	{r3, r4, r5, pc}
 8010508:	b118      	cbz	r0, 8010512 <_fflush_r+0x1a>
 801050a:	6a03      	ldr	r3, [r0, #32]
 801050c:	b90b      	cbnz	r3, 8010512 <_fflush_r+0x1a>
 801050e:	f7ff fa5b 	bl	800f9c8 <__sinit>
 8010512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d0f3      	beq.n	8010502 <_fflush_r+0xa>
 801051a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801051c:	07d0      	lsls	r0, r2, #31
 801051e:	d404      	bmi.n	801052a <_fflush_r+0x32>
 8010520:	0599      	lsls	r1, r3, #22
 8010522:	d402      	bmi.n	801052a <_fflush_r+0x32>
 8010524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010526:	f7ff fb5e 	bl	800fbe6 <__retarget_lock_acquire_recursive>
 801052a:	4628      	mov	r0, r5
 801052c:	4621      	mov	r1, r4
 801052e:	f7ff ff5d 	bl	80103ec <__sflush_r>
 8010532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010534:	07da      	lsls	r2, r3, #31
 8010536:	4605      	mov	r5, r0
 8010538:	d4e4      	bmi.n	8010504 <_fflush_r+0xc>
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	059b      	lsls	r3, r3, #22
 801053e:	d4e1      	bmi.n	8010504 <_fflush_r+0xc>
 8010540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010542:	f7ff fb51 	bl	800fbe8 <__retarget_lock_release_recursive>
 8010546:	e7dd      	b.n	8010504 <_fflush_r+0xc>

08010548 <fiprintf>:
 8010548:	b40e      	push	{r1, r2, r3}
 801054a:	b503      	push	{r0, r1, lr}
 801054c:	4601      	mov	r1, r0
 801054e:	ab03      	add	r3, sp, #12
 8010550:	4805      	ldr	r0, [pc, #20]	; (8010568 <fiprintf+0x20>)
 8010552:	f853 2b04 	ldr.w	r2, [r3], #4
 8010556:	6800      	ldr	r0, [r0, #0]
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	f7ff fc9d 	bl	800fe98 <_vfiprintf_r>
 801055e:	b002      	add	sp, #8
 8010560:	f85d eb04 	ldr.w	lr, [sp], #4
 8010564:	b003      	add	sp, #12
 8010566:	4770      	bx	lr
 8010568:	20000088 	.word	0x20000088

0801056c <__swbuf_r>:
 801056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801056e:	460e      	mov	r6, r1
 8010570:	4614      	mov	r4, r2
 8010572:	4605      	mov	r5, r0
 8010574:	b118      	cbz	r0, 801057e <__swbuf_r+0x12>
 8010576:	6a03      	ldr	r3, [r0, #32]
 8010578:	b90b      	cbnz	r3, 801057e <__swbuf_r+0x12>
 801057a:	f7ff fa25 	bl	800f9c8 <__sinit>
 801057e:	69a3      	ldr	r3, [r4, #24]
 8010580:	60a3      	str	r3, [r4, #8]
 8010582:	89a3      	ldrh	r3, [r4, #12]
 8010584:	071a      	lsls	r2, r3, #28
 8010586:	d525      	bpl.n	80105d4 <__swbuf_r+0x68>
 8010588:	6923      	ldr	r3, [r4, #16]
 801058a:	b31b      	cbz	r3, 80105d4 <__swbuf_r+0x68>
 801058c:	6823      	ldr	r3, [r4, #0]
 801058e:	6922      	ldr	r2, [r4, #16]
 8010590:	1a98      	subs	r0, r3, r2
 8010592:	6963      	ldr	r3, [r4, #20]
 8010594:	b2f6      	uxtb	r6, r6
 8010596:	4283      	cmp	r3, r0
 8010598:	4637      	mov	r7, r6
 801059a:	dc04      	bgt.n	80105a6 <__swbuf_r+0x3a>
 801059c:	4621      	mov	r1, r4
 801059e:	4628      	mov	r0, r5
 80105a0:	f7ff ffaa 	bl	80104f8 <_fflush_r>
 80105a4:	b9e0      	cbnz	r0, 80105e0 <__swbuf_r+0x74>
 80105a6:	68a3      	ldr	r3, [r4, #8]
 80105a8:	3b01      	subs	r3, #1
 80105aa:	60a3      	str	r3, [r4, #8]
 80105ac:	6823      	ldr	r3, [r4, #0]
 80105ae:	1c5a      	adds	r2, r3, #1
 80105b0:	6022      	str	r2, [r4, #0]
 80105b2:	701e      	strb	r6, [r3, #0]
 80105b4:	6962      	ldr	r2, [r4, #20]
 80105b6:	1c43      	adds	r3, r0, #1
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d004      	beq.n	80105c6 <__swbuf_r+0x5a>
 80105bc:	89a3      	ldrh	r3, [r4, #12]
 80105be:	07db      	lsls	r3, r3, #31
 80105c0:	d506      	bpl.n	80105d0 <__swbuf_r+0x64>
 80105c2:	2e0a      	cmp	r6, #10
 80105c4:	d104      	bne.n	80105d0 <__swbuf_r+0x64>
 80105c6:	4621      	mov	r1, r4
 80105c8:	4628      	mov	r0, r5
 80105ca:	f7ff ff95 	bl	80104f8 <_fflush_r>
 80105ce:	b938      	cbnz	r0, 80105e0 <__swbuf_r+0x74>
 80105d0:	4638      	mov	r0, r7
 80105d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105d4:	4621      	mov	r1, r4
 80105d6:	4628      	mov	r0, r5
 80105d8:	f000 f806 	bl	80105e8 <__swsetup_r>
 80105dc:	2800      	cmp	r0, #0
 80105de:	d0d5      	beq.n	801058c <__swbuf_r+0x20>
 80105e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80105e4:	e7f4      	b.n	80105d0 <__swbuf_r+0x64>
	...

080105e8 <__swsetup_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4b2a      	ldr	r3, [pc, #168]	; (8010694 <__swsetup_r+0xac>)
 80105ec:	4605      	mov	r5, r0
 80105ee:	6818      	ldr	r0, [r3, #0]
 80105f0:	460c      	mov	r4, r1
 80105f2:	b118      	cbz	r0, 80105fc <__swsetup_r+0x14>
 80105f4:	6a03      	ldr	r3, [r0, #32]
 80105f6:	b90b      	cbnz	r3, 80105fc <__swsetup_r+0x14>
 80105f8:	f7ff f9e6 	bl	800f9c8 <__sinit>
 80105fc:	89a3      	ldrh	r3, [r4, #12]
 80105fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010602:	0718      	lsls	r0, r3, #28
 8010604:	d422      	bmi.n	801064c <__swsetup_r+0x64>
 8010606:	06d9      	lsls	r1, r3, #27
 8010608:	d407      	bmi.n	801061a <__swsetup_r+0x32>
 801060a:	2309      	movs	r3, #9
 801060c:	602b      	str	r3, [r5, #0]
 801060e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010612:	81a3      	strh	r3, [r4, #12]
 8010614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010618:	e034      	b.n	8010684 <__swsetup_r+0x9c>
 801061a:	0758      	lsls	r0, r3, #29
 801061c:	d512      	bpl.n	8010644 <__swsetup_r+0x5c>
 801061e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010620:	b141      	cbz	r1, 8010634 <__swsetup_r+0x4c>
 8010622:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010626:	4299      	cmp	r1, r3
 8010628:	d002      	beq.n	8010630 <__swsetup_r+0x48>
 801062a:	4628      	mov	r0, r5
 801062c:	f7ff fb0a 	bl	800fc44 <_free_r>
 8010630:	2300      	movs	r3, #0
 8010632:	6363      	str	r3, [r4, #52]	; 0x34
 8010634:	89a3      	ldrh	r3, [r4, #12]
 8010636:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801063a:	81a3      	strh	r3, [r4, #12]
 801063c:	2300      	movs	r3, #0
 801063e:	6063      	str	r3, [r4, #4]
 8010640:	6923      	ldr	r3, [r4, #16]
 8010642:	6023      	str	r3, [r4, #0]
 8010644:	89a3      	ldrh	r3, [r4, #12]
 8010646:	f043 0308 	orr.w	r3, r3, #8
 801064a:	81a3      	strh	r3, [r4, #12]
 801064c:	6923      	ldr	r3, [r4, #16]
 801064e:	b94b      	cbnz	r3, 8010664 <__swsetup_r+0x7c>
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801065a:	d003      	beq.n	8010664 <__swsetup_r+0x7c>
 801065c:	4621      	mov	r1, r4
 801065e:	4628      	mov	r0, r5
 8010660:	f000 f857 	bl	8010712 <__smakebuf_r>
 8010664:	89a0      	ldrh	r0, [r4, #12]
 8010666:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801066a:	f010 0301 	ands.w	r3, r0, #1
 801066e:	d00a      	beq.n	8010686 <__swsetup_r+0x9e>
 8010670:	2300      	movs	r3, #0
 8010672:	60a3      	str	r3, [r4, #8]
 8010674:	6963      	ldr	r3, [r4, #20]
 8010676:	425b      	negs	r3, r3
 8010678:	61a3      	str	r3, [r4, #24]
 801067a:	6923      	ldr	r3, [r4, #16]
 801067c:	b943      	cbnz	r3, 8010690 <__swsetup_r+0xa8>
 801067e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010682:	d1c4      	bne.n	801060e <__swsetup_r+0x26>
 8010684:	bd38      	pop	{r3, r4, r5, pc}
 8010686:	0781      	lsls	r1, r0, #30
 8010688:	bf58      	it	pl
 801068a:	6963      	ldrpl	r3, [r4, #20]
 801068c:	60a3      	str	r3, [r4, #8]
 801068e:	e7f4      	b.n	801067a <__swsetup_r+0x92>
 8010690:	2000      	movs	r0, #0
 8010692:	e7f7      	b.n	8010684 <__swsetup_r+0x9c>
 8010694:	20000088 	.word	0x20000088

08010698 <_sbrk_r>:
 8010698:	b538      	push	{r3, r4, r5, lr}
 801069a:	4d06      	ldr	r5, [pc, #24]	; (80106b4 <_sbrk_r+0x1c>)
 801069c:	2300      	movs	r3, #0
 801069e:	4604      	mov	r4, r0
 80106a0:	4608      	mov	r0, r1
 80106a2:	602b      	str	r3, [r5, #0]
 80106a4:	f7f0 fa76 	bl	8000b94 <_sbrk>
 80106a8:	1c43      	adds	r3, r0, #1
 80106aa:	d102      	bne.n	80106b2 <_sbrk_r+0x1a>
 80106ac:	682b      	ldr	r3, [r5, #0]
 80106ae:	b103      	cbz	r3, 80106b2 <_sbrk_r+0x1a>
 80106b0:	6023      	str	r3, [r4, #0]
 80106b2:	bd38      	pop	{r3, r4, r5, pc}
 80106b4:	2000a6e4 	.word	0x2000a6e4

080106b8 <abort>:
 80106b8:	b508      	push	{r3, lr}
 80106ba:	2006      	movs	r0, #6
 80106bc:	f000 f88e 	bl	80107dc <raise>
 80106c0:	2001      	movs	r0, #1
 80106c2:	f7f0 f9ef 	bl	8000aa4 <_exit>

080106c6 <__swhatbuf_r>:
 80106c6:	b570      	push	{r4, r5, r6, lr}
 80106c8:	460c      	mov	r4, r1
 80106ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ce:	2900      	cmp	r1, #0
 80106d0:	b096      	sub	sp, #88	; 0x58
 80106d2:	4615      	mov	r5, r2
 80106d4:	461e      	mov	r6, r3
 80106d6:	da0d      	bge.n	80106f4 <__swhatbuf_r+0x2e>
 80106d8:	89a3      	ldrh	r3, [r4, #12]
 80106da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80106de:	f04f 0100 	mov.w	r1, #0
 80106e2:	bf0c      	ite	eq
 80106e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80106e8:	2340      	movne	r3, #64	; 0x40
 80106ea:	2000      	movs	r0, #0
 80106ec:	6031      	str	r1, [r6, #0]
 80106ee:	602b      	str	r3, [r5, #0]
 80106f0:	b016      	add	sp, #88	; 0x58
 80106f2:	bd70      	pop	{r4, r5, r6, pc}
 80106f4:	466a      	mov	r2, sp
 80106f6:	f000 f879 	bl	80107ec <_fstat_r>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	dbec      	blt.n	80106d8 <__swhatbuf_r+0x12>
 80106fe:	9901      	ldr	r1, [sp, #4]
 8010700:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010704:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010708:	4259      	negs	r1, r3
 801070a:	4159      	adcs	r1, r3
 801070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010710:	e7eb      	b.n	80106ea <__swhatbuf_r+0x24>

08010712 <__smakebuf_r>:
 8010712:	898b      	ldrh	r3, [r1, #12]
 8010714:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010716:	079d      	lsls	r5, r3, #30
 8010718:	4606      	mov	r6, r0
 801071a:	460c      	mov	r4, r1
 801071c:	d507      	bpl.n	801072e <__smakebuf_r+0x1c>
 801071e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010722:	6023      	str	r3, [r4, #0]
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	2301      	movs	r3, #1
 8010728:	6163      	str	r3, [r4, #20]
 801072a:	b002      	add	sp, #8
 801072c:	bd70      	pop	{r4, r5, r6, pc}
 801072e:	ab01      	add	r3, sp, #4
 8010730:	466a      	mov	r2, sp
 8010732:	f7ff ffc8 	bl	80106c6 <__swhatbuf_r>
 8010736:	9900      	ldr	r1, [sp, #0]
 8010738:	4605      	mov	r5, r0
 801073a:	4630      	mov	r0, r6
 801073c:	f7ff faf6 	bl	800fd2c <_malloc_r>
 8010740:	b948      	cbnz	r0, 8010756 <__smakebuf_r+0x44>
 8010742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010746:	059a      	lsls	r2, r3, #22
 8010748:	d4ef      	bmi.n	801072a <__smakebuf_r+0x18>
 801074a:	f023 0303 	bic.w	r3, r3, #3
 801074e:	f043 0302 	orr.w	r3, r3, #2
 8010752:	81a3      	strh	r3, [r4, #12]
 8010754:	e7e3      	b.n	801071e <__smakebuf_r+0xc>
 8010756:	89a3      	ldrh	r3, [r4, #12]
 8010758:	6020      	str	r0, [r4, #0]
 801075a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801075e:	81a3      	strh	r3, [r4, #12]
 8010760:	9b00      	ldr	r3, [sp, #0]
 8010762:	6163      	str	r3, [r4, #20]
 8010764:	9b01      	ldr	r3, [sp, #4]
 8010766:	6120      	str	r0, [r4, #16]
 8010768:	b15b      	cbz	r3, 8010782 <__smakebuf_r+0x70>
 801076a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801076e:	4630      	mov	r0, r6
 8010770:	f000 f84e 	bl	8010810 <_isatty_r>
 8010774:	b128      	cbz	r0, 8010782 <__smakebuf_r+0x70>
 8010776:	89a3      	ldrh	r3, [r4, #12]
 8010778:	f023 0303 	bic.w	r3, r3, #3
 801077c:	f043 0301 	orr.w	r3, r3, #1
 8010780:	81a3      	strh	r3, [r4, #12]
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	431d      	orrs	r5, r3
 8010786:	81a5      	strh	r5, [r4, #12]
 8010788:	e7cf      	b.n	801072a <__smakebuf_r+0x18>

0801078a <_raise_r>:
 801078a:	291f      	cmp	r1, #31
 801078c:	b538      	push	{r3, r4, r5, lr}
 801078e:	4604      	mov	r4, r0
 8010790:	460d      	mov	r5, r1
 8010792:	d904      	bls.n	801079e <_raise_r+0x14>
 8010794:	2316      	movs	r3, #22
 8010796:	6003      	str	r3, [r0, #0]
 8010798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801079c:	bd38      	pop	{r3, r4, r5, pc}
 801079e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80107a0:	b112      	cbz	r2, 80107a8 <_raise_r+0x1e>
 80107a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107a6:	b94b      	cbnz	r3, 80107bc <_raise_r+0x32>
 80107a8:	4620      	mov	r0, r4
 80107aa:	f000 f853 	bl	8010854 <_getpid_r>
 80107ae:	462a      	mov	r2, r5
 80107b0:	4601      	mov	r1, r0
 80107b2:	4620      	mov	r0, r4
 80107b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107b8:	f000 b83a 	b.w	8010830 <_kill_r>
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d00a      	beq.n	80107d6 <_raise_r+0x4c>
 80107c0:	1c59      	adds	r1, r3, #1
 80107c2:	d103      	bne.n	80107cc <_raise_r+0x42>
 80107c4:	2316      	movs	r3, #22
 80107c6:	6003      	str	r3, [r0, #0]
 80107c8:	2001      	movs	r0, #1
 80107ca:	e7e7      	b.n	801079c <_raise_r+0x12>
 80107cc:	2400      	movs	r4, #0
 80107ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107d2:	4628      	mov	r0, r5
 80107d4:	4798      	blx	r3
 80107d6:	2000      	movs	r0, #0
 80107d8:	e7e0      	b.n	801079c <_raise_r+0x12>
	...

080107dc <raise>:
 80107dc:	4b02      	ldr	r3, [pc, #8]	; (80107e8 <raise+0xc>)
 80107de:	4601      	mov	r1, r0
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	f7ff bfd2 	b.w	801078a <_raise_r>
 80107e6:	bf00      	nop
 80107e8:	20000088 	.word	0x20000088

080107ec <_fstat_r>:
 80107ec:	b538      	push	{r3, r4, r5, lr}
 80107ee:	4d07      	ldr	r5, [pc, #28]	; (801080c <_fstat_r+0x20>)
 80107f0:	2300      	movs	r3, #0
 80107f2:	4604      	mov	r4, r0
 80107f4:	4608      	mov	r0, r1
 80107f6:	4611      	mov	r1, r2
 80107f8:	602b      	str	r3, [r5, #0]
 80107fa:	f7f0 f9a2 	bl	8000b42 <_fstat>
 80107fe:	1c43      	adds	r3, r0, #1
 8010800:	d102      	bne.n	8010808 <_fstat_r+0x1c>
 8010802:	682b      	ldr	r3, [r5, #0]
 8010804:	b103      	cbz	r3, 8010808 <_fstat_r+0x1c>
 8010806:	6023      	str	r3, [r4, #0]
 8010808:	bd38      	pop	{r3, r4, r5, pc}
 801080a:	bf00      	nop
 801080c:	2000a6e4 	.word	0x2000a6e4

08010810 <_isatty_r>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	4d06      	ldr	r5, [pc, #24]	; (801082c <_isatty_r+0x1c>)
 8010814:	2300      	movs	r3, #0
 8010816:	4604      	mov	r4, r0
 8010818:	4608      	mov	r0, r1
 801081a:	602b      	str	r3, [r5, #0]
 801081c:	f7f0 f9a1 	bl	8000b62 <_isatty>
 8010820:	1c43      	adds	r3, r0, #1
 8010822:	d102      	bne.n	801082a <_isatty_r+0x1a>
 8010824:	682b      	ldr	r3, [r5, #0]
 8010826:	b103      	cbz	r3, 801082a <_isatty_r+0x1a>
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	bd38      	pop	{r3, r4, r5, pc}
 801082c:	2000a6e4 	.word	0x2000a6e4

08010830 <_kill_r>:
 8010830:	b538      	push	{r3, r4, r5, lr}
 8010832:	4d07      	ldr	r5, [pc, #28]	; (8010850 <_kill_r+0x20>)
 8010834:	2300      	movs	r3, #0
 8010836:	4604      	mov	r4, r0
 8010838:	4608      	mov	r0, r1
 801083a:	4611      	mov	r1, r2
 801083c:	602b      	str	r3, [r5, #0]
 801083e:	f7f0 f91f 	bl	8000a80 <_kill>
 8010842:	1c43      	adds	r3, r0, #1
 8010844:	d102      	bne.n	801084c <_kill_r+0x1c>
 8010846:	682b      	ldr	r3, [r5, #0]
 8010848:	b103      	cbz	r3, 801084c <_kill_r+0x1c>
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	bd38      	pop	{r3, r4, r5, pc}
 801084e:	bf00      	nop
 8010850:	2000a6e4 	.word	0x2000a6e4

08010854 <_getpid_r>:
 8010854:	f7f0 b90c 	b.w	8000a70 <_getpid>

08010858 <_init>:
 8010858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801085a:	bf00      	nop
 801085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801085e:	bc08      	pop	{r3}
 8010860:	469e      	mov	lr, r3
 8010862:	4770      	bx	lr

08010864 <_fini>:
 8010864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010866:	bf00      	nop
 8010868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801086a:	bc08      	pop	{r3}
 801086c:	469e      	mov	lr, r3
 801086e:	4770      	bx	lr
