
NGCP_PCB_Pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f78  080133b8  080133b8  000233b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016330  08016330  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08016330  08016330  00026330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016338  08016338  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016338  08016338  00026338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801633c  0801633c  0002633c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08016340  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  080163cc  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801646c  0003012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a8c0  200001cc  0801650c  000301cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000aa8c  0801650c  0003aa8c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002a533  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000063b9  00000000  00000000  0005a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000021b8  00000000  00000000  00060b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b05  00000000  00000000  00062ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000366d5  00000000  00000000  000647ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033c2b  00000000  00000000  0009aec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011b29e  00000000  00000000  000ceaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009718  00000000  00000000  001e9d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  001f34a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	080133a0 	.word	0x080133a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	080133a0 	.word	0x080133a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e6:	f3bf 8f6f 	isb	sy
}
 80005ea:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <SCB_EnableICache+0x48>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <SCB_EnableICache+0x48>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <SCB_EnableICache+0x48>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SCB_EnableDCache+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <SCB_EnableDCache+0x84>)
 800063e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000642:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	0b5b      	lsrs	r3, r3, #13
 8000648:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800064c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	08db      	lsrs	r3, r3, #3
 8000652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000656:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	015a      	lsls	r2, r3, #5
 800065c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000660:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000666:	4911      	ldr	r1, [pc, #68]	; (80006ac <SCB_EnableDCache+0x84>)
 8000668:	4313      	orrs	r3, r2
 800066a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1ef      	bne.n	8000658 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	60fa      	str	r2, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e5      	bne.n	800064e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000682:	f3bf 8f4f 	dsb	sy
}
 8000686:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <SCB_EnableDCache+0x84>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <SCB_EnableDCache+0x84>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000692:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
}
 8000698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069a:	f3bf 8f6f 	isb	sy
}
 800069e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fc2e 	bl	8000f14 <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b8:	f7ff ff90 	bl	80005dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006bc:	f7ff ffb4 	bl	8000628 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f001 f9d6 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f818 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 fb28 	bl	8000d1c <MX_GPIO_Init>
  MX_LWIP_Init();
 80006cc:	f005 fc64 	bl	8005f98 <MX_LWIP_Init>
  MX_CAN1_Init();
 80006d0:	f000 f880 	bl	80007d4 <MX_CAN1_Init>
  MX_I2C1_Init();
 80006d4:	f000 f8b4 	bl	8000840 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006d8:	f000 f8f2 	bl	80008c0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80006dc:	f000 f92e 	bl	800093c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006e0:	f000 f9e0 	bl	8000aa4 <MX_TIM3_Init>
  MX_UART8_Init();
 80006e4:	f000 fa5a 	bl	8000b9c <MX_UART8_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 fa88 	bl	8000bfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006ec:	f000 fab6 	bl	8000c5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006f0:	f000 fae4 	bl	8000cbc <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0x44>
	...

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f011 ff9d 	bl	8012646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <SystemClock_Config+0xd4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <SystemClock_Config+0xd8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000764:	23d8      	movs	r3, #216	; 0xd8
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f003 f819 	bl	80037b0 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000784:	f000 fbf4 	bl	8000f70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000788:	f002 ffc2 	bl	8003710 <HAL_PWREx_EnableOverDrive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000792:	f000 fbed 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2107      	movs	r1, #7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 faa9 	bl	8003d0c <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007c0:	f000 fbd6 	bl	8000f70 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_CAN1_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_CAN1_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_CAN1_Init+0x64>)
 80007e0:	2210      	movs	r2, #16
 80007e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_CAN1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_CAN1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_CAN1_Init+0x64>)
 80007f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_CAN1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_CAN1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_CAN1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_CAN1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_CAN1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_CAN1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_CAN1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_CAN1_Init+0x64>)
 8000824:	f001 f9ae 	bl	8001b84 <HAL_CAN_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800082e:	f000 fb9f 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001e8 	.word	0x200001e8
 800083c:	40006400 	.word	0x40006400

08000840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_I2C1_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_I2C1_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <MX_I2C1_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_I2C1_Init+0x74>)
 800087c:	f002 fe14 	bl	80034a8 <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 fb73 	bl	8000f70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_I2C1_Init+0x74>)
 800088e:	f002 fea7 	bl	80035e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 fb6a 	bl	8000f70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2C1_Init+0x74>)
 80008a0:	f002 fee9 	bl	8003676 <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fb61 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000210 	.word	0x20000210
 80008b8:	40005400 	.word	0x40005400
 80008bc:	20404768 	.word	0x20404768

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_SPI1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_SPI1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_SPI1_Init+0x74>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI1_Init+0x74>)
 80008da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI1_Init+0x74>)
 80008ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI1_Init+0x74>)
 800090e:	2207      	movs	r2, #7
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI1_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_SPI1_Init+0x74>)
 8000920:	f004 f840 	bl	80049a4 <HAL_SPI_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 fb21 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000264 	.word	0x20000264
 8000938:	40013000 	.word	0x40013000

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b096      	sub	sp, #88	; 0x58
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	222c      	movs	r2, #44	; 0x2c
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f011 fe6c 	bl	8012646 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000970:	4a4b      	ldr	r2, [pc, #300]	; (8000aa0 <MX_TIM1_Init+0x164>)
 8000972:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000974:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <MX_TIM1_Init+0x160>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000980:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000986:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_TIM1_Init+0x160>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800099a:	4840      	ldr	r0, [pc, #256]	; (8000a9c <MX_TIM1_Init+0x160>)
 800099c:	f004 f8ad 	bl	8004afa <HAL_TIM_PWM_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 fae3 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4837      	ldr	r0, [pc, #220]	; (8000a9c <MX_TIM1_Init+0x160>)
 80009be:	f004 fd11 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009c8:	f000 fad2 	bl	8000f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009cc:	2360      	movs	r3, #96	; 0x60
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d8:	2300      	movs	r3, #0
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	2200      	movs	r2, #0
 80009ee:	4619      	mov	r1, r3
 80009f0:	482a      	ldr	r0, [pc, #168]	; (8000a9c <MX_TIM1_Init+0x160>)
 80009f2:	f004 f8d9 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009fc:	f000 fab8 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a04:	2204      	movs	r2, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4824      	ldr	r0, [pc, #144]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000a0a:	f004 f8cd 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a14:	f000 faac 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481e      	ldr	r0, [pc, #120]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000a22:	f004 f8c1 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000a2c:	f000 faa0 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a34:	220c      	movs	r2, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000a3a:	f004 f8b5 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a44:	f000 fa94 	bl	8000f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000a7e:	f004 fd3f 	bl	8005500 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000a88:	f000 fa72 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM1_Init+0x160>)
 8000a8e:	f000 fbd3 	bl	8001238 <HAL_TIM_MspPostInit>

}
 8000a92:	bf00      	nop
 8000a94:	3758      	adds	r7, #88	; 0x58
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002c8 	.word	0x200002c8
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000aca:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <MX_TIM3_Init+0xf4>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aee:	4829      	ldr	r0, [pc, #164]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000af0:	f004 f803 	bl	8004afa <HAL_TIM_PWM_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000afa:	f000 fa39 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4821      	ldr	r0, [pc, #132]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000b0e:	f004 fc69 	bl	80053e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b18:	f000 fa2a 	bl	8000f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1c:	2360      	movs	r3, #96	; 0x60
 8000b1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4619      	mov	r1, r3
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000b34:	f004 f838 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000b3e:	f000 fa17 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	2204      	movs	r2, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000b4a:	f004 f82d 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b54:	f000 fa0c 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480d      	ldr	r0, [pc, #52]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000b60:	f004 f822 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000b6a:	f000 fa01 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	220c      	movs	r2, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000b76:	f004 f817 	bl	8004ba8 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000b80:	f000 f9f6 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000b86:	f000 fb57 	bl	8001238 <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000314 	.word	0x20000314
 8000b98:	40000400 	.word	0x40000400

08000b9c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_UART8_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_UART8_Init+0x58>)
 8000be0:	f004 fd0c 	bl	80055fc <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 f9c1 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000360 	.word	0x20000360
 8000bf8:	40007c00 	.word	0x40007c00

08000bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MX_USART1_UART_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c40:	f004 fcdc 	bl	80055fc <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f000 f991 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200003e8 	.word	0x200003e8
 8000c58:	40011000 	.word	0x40011000

08000c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_USART2_UART_Init+0x5c>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x58>)
 8000ca0:	f004 fcac 	bl	80055fc <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 f961 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000470 	.word	0x20000470
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <MX_USART3_UART_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART3_UART_Init+0x58>)
 8000d00:	f004 fc7c 	bl	80055fc <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 f931 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200004f8 	.word	0x200004f8
 8000d18:	40004800 	.word	0x40004800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b72      	ldr	r3, [pc, #456]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a71      	ldr	r2, [pc, #452]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b6f      	ldr	r3, [pc, #444]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a6b      	ldr	r2, [pc, #428]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b69      	ldr	r3, [pc, #420]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b66      	ldr	r3, [pc, #408]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a65      	ldr	r2, [pc, #404]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b63      	ldr	r3, [pc, #396]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b60      	ldr	r3, [pc, #384]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a5f      	ldr	r2, [pc, #380]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a59      	ldr	r2, [pc, #356]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	4b54      	ldr	r3, [pc, #336]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a53      	ldr	r2, [pc, #332]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b51      	ldr	r3, [pc, #324]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b4e      	ldr	r3, [pc, #312]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a4d      	ldr	r2, [pc, #308]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dda:	4b48      	ldr	r3, [pc, #288]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a47      	ldr	r2, [pc, #284]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <MX_GPIO_Init+0x1e0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000df2:	2200      	movs	r2, #0
 8000df4:	213f      	movs	r1, #63	; 0x3f
 8000df6:	4842      	ldr	r0, [pc, #264]	; (8000f00 <MX_GPIO_Init+0x1e4>)
 8000df8:	f002 fb3c 	bl	8003474 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e02:	4840      	ldr	r0, [pc, #256]	; (8000f04 <MX_GPIO_Init+0x1e8>)
 8000e04:	f002 fb36 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x1ec>)
 8000e0e:	f002 fb31 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4838      	ldr	r0, [pc, #224]	; (8000f0c <MX_GPIO_Init+0x1f0>)
 8000e2a:	f002 f977 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e2e:	233f      	movs	r3, #63	; 0x3f
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	482e      	ldr	r0, [pc, #184]	; (8000f00 <MX_GPIO_Init+0x1e4>)
 8000e46:	f002 f969 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e4a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4828      	ldr	r0, [pc, #160]	; (8000f00 <MX_GPIO_Init+0x1e4>)
 8000e60:	f002 f95c 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4821      	ldr	r0, [pc, #132]	; (8000f04 <MX_GPIO_Init+0x1e8>)
 8000e7e:	f002 f94d 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e82:	2340      	movs	r3, #64	; 0x40
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	481b      	ldr	r0, [pc, #108]	; (8000f08 <MX_GPIO_Init+0x1ec>)
 8000e9a:	f002 f93f 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4815      	ldr	r0, [pc, #84]	; (8000f08 <MX_GPIO_Init+0x1ec>)
 8000eb2:	f002 f933 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eb6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ec8:	230a      	movs	r3, #10
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480f      	ldr	r0, [pc, #60]	; (8000f10 <MX_GPIO_Init+0x1f4>)
 8000ed4:	f002 f922 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <MX_GPIO_Init+0x1f4>)
 8000eee:	f002 f915 	bl	800311c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40021400 	.word	0x40021400
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020000 	.word	0x40020000

08000f14 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f26:	f001 f80f 	bl	8001f48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MPU_Config+0x58>)
 8000f34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000f36:	230d      	movs	r3, #13
 8000f38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f42:	2303      	movs	r3, #3
 8000f44:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f56:	463b      	mov	r3, r7
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 f82d 	bl	8001fb8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f5e:	2004      	movs	r0, #4
 8000f60:	f001 f80a 	bl	8001f78 <HAL_MPU_Enable>

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2007c000 	.word	0x2007c000

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_CAN_MspInit+0x7c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d127      	bne.n	8001036 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_CAN_MspInit+0x80>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_CAN_MspInit+0x80>)
 8000fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_CAN_MspInit+0x80>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_CAN_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_CAN_MspInit+0x80>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_CAN_MspInit+0x80>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001016:	2303      	movs	r3, #3
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001026:	2309      	movs	r3, #9
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_CAN_MspInit+0x84>)
 8001032:	f002 f873 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40006400 	.word	0x40006400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020c00 	.word	0x40020c00

0800104c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ae      	sub	sp, #184	; 0xb8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2290      	movs	r2, #144	; 0x90
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f011 faea 	bl	8012646 <memset>
  if(hi2c->Instance==I2C1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_I2C_MspInit+0xb4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d13c      	bne.n	80010f6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800107c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001080:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001082:	2300      	movs	r3, #0
 8001084:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4618      	mov	r0, r3
 800108c:	f003 f862 	bl	8004154 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001096:	f7ff ff6b 	bl	8000f70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_I2C_MspInit+0xb8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_I2C_MspInit+0xb8>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_I2C_MspInit+0xb8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ba:	2312      	movs	r3, #18
 80010bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010cc:	2304      	movs	r3, #4
 80010ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d6:	4619      	mov	r1, r3
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 80010da:	f002 f81f 	bl	800311c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_I2C_MspInit+0xb8>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_I2C_MspInit+0xb8>)
 80010e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_I2C_MspInit+0xb8>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	37b8      	adds	r7, #184	; 0xb8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40005400 	.word	0x40005400
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_SPI_MspInit+0xb4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d143      	bne.n	80011b6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 8001134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_SPI_MspInit+0xb8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001176:	2360      	movs	r3, #96	; 0x60
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001186:	2305      	movs	r3, #5
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <HAL_SPI_MspInit+0xbc>)
 8001192:	f001 ffc3 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a6:	2305      	movs	r3, #5
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_SPI_MspInit+0xc0>)
 80011b2:	f001 ffb3 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40013000 	.word	0x40013000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020c00 	.word	0x40020c00

080011d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_TIM_PWM_MspInit+0x5c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10c      	bne.n	80011fc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_TIM_PWM_MspInit+0x60>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_TIM_PWM_MspInit+0x60>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_TIM_PWM_MspInit+0x60>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011fa:	e010      	b.n	800121e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_TIM_PWM_MspInit+0x64>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10b      	bne.n	800121e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_TIM_PWM_MspInit+0x60>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_TIM_PWM_MspInit+0x60>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_TIM_PWM_MspInit+0x60>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40010000 	.word	0x40010000
 8001230:	40023800 	.word	0x40023800
 8001234:	40000400 	.word	0x40000400

08001238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_TIM_MspPostInit+0xe4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d11d      	bne.n	8001296 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 8001260:	f043 0310 	orr.w	r3, r3, #16
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001272:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001284:	2301      	movs	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <HAL_TIM_MspPostInit+0xec>)
 8001290:	f001 ff44 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001294:	e03d      	b.n	8001312 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a23      	ldr	r2, [pc, #140]	; (8001328 <HAL_TIM_MspPostInit+0xf0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d138      	bne.n	8001312 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_TIM_MspPostInit+0xe8>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012d0:	2302      	movs	r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e0:	2302      	movs	r3, #2
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <HAL_TIM_MspPostInit+0xf4>)
 80012ec:	f001 ff16 	bl	800311c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80012f0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001302:	2302      	movs	r3, #2
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <HAL_TIM_MspPostInit+0xf8>)
 800130e:	f001 ff05 	bl	800311c <HAL_GPIO_Init>
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010000 	.word	0x40010000
 8001320:	40023800 	.word	0x40023800
 8001324:	40021000 	.word	0x40021000
 8001328:	40000400 	.word	0x40000400
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0b4      	sub	sp, #208	; 0xd0
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001350:	2290      	movs	r2, #144	; 0x90
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f011 f976 	bl	8012646 <memset>
  if(huart->Instance==UART8)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4aa0      	ldr	r2, [pc, #640]	; (80015e0 <HAL_UART_MspInit+0x2ac>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d13d      	bne.n	80013e0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4618      	mov	r0, r3
 8001376:	f002 feed 	bl	8004154 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001380:	f7ff fdf6 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001384:	4b97      	ldr	r3, [pc, #604]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a96      	ldr	r2, [pc, #600]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 800138a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800139c:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a90      	ldr	r2, [pc, #576]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80013cc:	2308      	movs	r3, #8
 80013ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013d6:	4619      	mov	r1, r3
 80013d8:	4883      	ldr	r0, [pc, #524]	; (80015e8 <HAL_UART_MspInit+0x2b4>)
 80013da:	f001 fe9f 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013de:	e0fa      	b.n	80015d6 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a81      	ldr	r2, [pc, #516]	; (80015ec <HAL_UART_MspInit+0x2b8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d151      	bne.n	800148e <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ea:	2340      	movs	r3, #64	; 0x40
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013ee:	2300      	movs	r3, #0
 80013f0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 feac 	bl	8004154 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001402:	f7ff fdb5 	bl	8000f70 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001406:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a76      	ldr	r2, [pc, #472]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b71      	ldr	r3, [pc, #452]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a70      	ldr	r2, [pc, #448]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800143a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001450:	2304      	movs	r3, #4
 8001452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800145a:	4619      	mov	r1, r3
 800145c:	4864      	ldr	r0, [pc, #400]	; (80015f0 <HAL_UART_MspInit+0x2bc>)
 800145e:	f001 fe5d 	bl	800311c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001462:	2340      	movs	r3, #64	; 0x40
 8001464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800147a:	2307      	movs	r3, #7
 800147c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001484:	4619      	mov	r1, r3
 8001486:	485a      	ldr	r0, [pc, #360]	; (80015f0 <HAL_UART_MspInit+0x2bc>)
 8001488:	f001 fe48 	bl	800311c <HAL_GPIO_Init>
}
 800148c:	e0a3      	b.n	80015d6 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_UART_MspInit+0x2c0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d15c      	bne.n	8001552 <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800149c:	2300      	movs	r3, #0
 800149e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fe55 	bl	8004154 <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80014b0:	f7ff fd5e 	bl	8000f70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b4:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6313      	str	r3, [r2, #48]	; 0x30
 80014d8:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014fc:	2308      	movs	r3, #8
 80014fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800151e:	4619      	mov	r1, r3
 8001520:	4835      	ldr	r0, [pc, #212]	; (80015f8 <HAL_UART_MspInit+0x2c4>)
 8001522:	f001 fdfb 	bl	800311c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001526:	2320      	movs	r3, #32
 8001528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
 8001540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001548:	4619      	mov	r1, r3
 800154a:	482c      	ldr	r0, [pc, #176]	; (80015fc <HAL_UART_MspInit+0x2c8>)
 800154c:	f001 fde6 	bl	800311c <HAL_GPIO_Init>
}
 8001550:	e041      	b.n	80015d6 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_UART_MspInit+0x2cc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d13c      	bne.n	80015d6 <HAL_UART_MspInit+0x2a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800155c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001562:	2300      	movs	r3, #0
 8001564:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fdf2 	bl	8004154 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_UART_MspInit+0x246>
      Error_Handler();
 8001576:	f7ff fcfb 	bl	8000f70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_UART_MspInit+0x2b0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c4:	2307      	movs	r3, #7
 80015c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015ce:	4619      	mov	r1, r3
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <HAL_UART_MspInit+0x2c8>)
 80015d2:	f001 fda3 	bl	800311c <HAL_GPIO_Init>
}
 80015d6:	bf00      	nop
 80015d8:	37d0      	adds	r7, #208	; 0xd0
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40007c00 	.word	0x40007c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40004400 	.word	0x40004400
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40004800 	.word	0x40004800

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 fa54 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <_kill+0x20>)
 8001674:	2216      	movs	r2, #22
 8001676:	601a      	str	r2, [r3, #0]
  return -1;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	2000aa7c 	.word	0x2000aa7c

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe5 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169e:	e7fe      	b.n	800169e <_exit+0x12>

080016a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e00a      	b.n	80016c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b2:	f3af 8000 	nop.w
 80016b6:	4601      	mov	r1, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf0      	blt.n	80016b2 <_read+0x12>
  }

  return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e009      	b.n	8001700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf1      	blt.n	80016ec <_write+0x12>
  }
  return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	605a      	str	r2, [r3, #4]
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d205      	bcs.n	80017b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <_sbrk+0x6c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b6:	e009      	b.n	80017cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20080000 	.word	0x20080000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	20000580 	.word	0x20000580
 80017e4:	2000aa90 	.word	0x2000aa90
 80017e8:	2000aa7c 	.word	0x2000aa7c

080017ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001814:	f7ff ffea 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	; (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800183e:	f010 ff51 	bl	80126e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7fe ff35 	bl	80006b0 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001854:	08016340 	.word	0x08016340
  ldr r2, =_sbss
 8001858:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800185c:	2000aa8c 	.word	0x2000aa8c

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>

08001862 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <LAN8742_RegisterBusIO+0x28>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <LAN8742_RegisterBusIO+0x28>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <LAN8742_RegisterBusIO+0x28>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188e:	e014      	b.n	80018ba <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d139      	bne.n	8001956 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2220      	movs	r2, #32
 80018f4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e01c      	b.n	8001936 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f107 020c 	add.w	r2, r7, #12
 8001904:	2112      	movs	r1, #18
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	da03      	bge.n	8001918 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001910:	f06f 0304 	mvn.w	r3, #4
 8001914:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001916:	e00b      	b.n	8001930 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d105      	bne.n	8001930 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
         break;
 800192e:	e005      	b.n	800193c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b1f      	cmp	r3, #31
 800193a:	d9df      	bls.n	80018fc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d902      	bls.n	800194a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001944:	f06f 0302 	mvn.w	r3, #2
 8001948:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001956:	693b      	ldr	r3, [r7, #16]
 }
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6810      	ldr	r0, [r2, #0]
 8001974:	f107 020c 	add.w	r2, r7, #12
 8001978:	2101      	movs	r1, #1
 800197a:	4798      	blx	r3
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	da02      	bge.n	8001988 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001982:	f06f 0304 	mvn.w	r3, #4
 8001986:	e06e      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6810      	ldr	r0, [r2, #0]
 8001990:	f107 020c 	add.w	r2, r7, #12
 8001994:	2101      	movs	r1, #1
 8001996:	4798      	blx	r3
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	da02      	bge.n	80019a4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800199e:	f06f 0304 	mvn.w	r3, #4
 80019a2:	e060      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e059      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6810      	ldr	r0, [r2, #0]
 80019ba:	f107 020c 	add.w	r2, r7, #12
 80019be:	2100      	movs	r1, #0
 80019c0:	4798      	blx	r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da02      	bge.n	80019ce <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019c8:	f06f 0304 	mvn.w	r3, #4
 80019cc:	e04b      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11b      	bne.n	8001a10 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <LAN8742_GetLinkState+0x90>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80019ec:	2302      	movs	r3, #2
 80019ee:	e03a      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e033      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e02c      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	e02a      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6810      	ldr	r0, [r2, #0]
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	211f      	movs	r1, #31
 8001a1e:	4798      	blx	r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	da02      	bge.n	8001a2c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001a26:	f06f 0304 	mvn.w	r3, #4
 8001a2a:	e01c      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001a36:	2306      	movs	r3, #6
 8001a38:	e015      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	2b18      	cmp	r3, #24
 8001a42:	d101      	bne.n	8001a48 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a44:	2302      	movs	r3, #2
 8001a46:	e00e      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 031c 	and.w	r3, r3, #28
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d101      	bne.n	8001a56 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e007      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	2b14      	cmp	r3, #20
 8001a5e:	d101      	bne.n	8001a64 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a60:	2304      	movs	r3, #4
 8001a62:	e000      	b.n	8001a66 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a64:	2305      	movs	r3, #5
    }
  }
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_Init+0x28>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_Init+0x28>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 fa2d 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fa76 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fa37 	bl	8001f2e <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad8:	f000 fa0d 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000584 	.word	0x20000584

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000584 	.word	0x20000584

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008

08001b84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0ed      	b.n	8001d72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fa0e 	bl	8000fc4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff ffb4 	bl	8001b24 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bbe:	e012      	b.n	8001be6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc0:	f7ff ffb0 	bl	8001b24 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d90b      	bls.n	8001be6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2205      	movs	r2, #5
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0c5      	b.n	8001d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0e5      	beq.n	8001bc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0202 	bic.w	r2, r2, #2
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c04:	f7ff ff8e 	bl	8001b24 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c0a:	e012      	b.n	8001c32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c0c:	f7ff ff8a 	bl	8001b24 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b0a      	cmp	r3, #10
 8001c18:	d90b      	bls.n	8001c32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2205      	movs	r2, #5
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e09f      	b.n	8001d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e5      	bne.n	8001c0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7e1b      	ldrb	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d108      	bne.n	8001c5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e007      	b.n	8001c6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7e5b      	ldrb	r3, [r3, #25]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e007      	b.n	8001c94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7e9b      	ldrb	r3, [r3, #26]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d108      	bne.n	8001cae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0220 	bic.w	r2, r2, #32
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7edb      	ldrb	r3, [r3, #27]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0210 	bic.w	r2, r2, #16
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e007      	b.n	8001ce8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0210 	orr.w	r2, r2, #16
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7f1b      	ldrb	r3, [r3, #28]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d108      	bne.n	8001d02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e007      	b.n	8001d12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0208 	bic.w	r2, r2, #8
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7f5b      	ldrb	r3, [r3, #29]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d108      	bne.n	8001d2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0204 	orr.w	r2, r2, #4
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e007      	b.n	8001d3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	ea42 0103 	orr.w	r1, r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <__NVIC_SetPriorityGrouping>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <__NVIC_SetPriorityGrouping+0x40>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x40>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00
 8001dc0:	05fa0000 	.word	0x05fa0000

08001dc4 <__NVIC_GetPriorityGrouping>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_SetPriority>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff47 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff5c 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffb0 	bl	8001e9c <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f4c:	f3bf 8f5f 	dmb	sy
}
 8001f50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_MPU_Disable+0x28>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_MPU_Disable+0x28>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_MPU_Disable+0x2c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	e000ed90 	.word	0xe000ed90

08001f78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f80:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <HAL_MPU_Enable+0x38>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_MPU_Enable+0x3c>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_MPU_Enable+0x3c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f96:	f3bf 8f4f 	dsb	sy
}
 8001f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f9c:	f3bf 8f6f 	isb	sy
}
 8001fa0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed90 	.word	0xe000ed90
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	785a      	ldrb	r2, [r3, #1]
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fc6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fd4:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7adb      	ldrb	r3, [r3, #11]
 8001fe6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a9b      	ldrb	r3, [r3, #10]
 8001fee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ff0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7b5b      	ldrb	r3, [r3, #13]
 8001ff6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ff8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7b9b      	ldrb	r3, [r3, #14]
 8001ffe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002000:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7bdb      	ldrb	r3, [r3, #15]
 8002006:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7a5b      	ldrb	r3, [r3, #9]
 800200e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7a1b      	ldrb	r3, [r3, #8]
 8002016:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002018:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002022:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002024:	6113      	str	r3, [r2, #16]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed90 	.word	0xe000ed90

08002038 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e086      	b.n	8002158 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002050:	2b00      	cmp	r3, #0
 8002052:	d106      	bne.n	8002062 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2223      	movs	r2, #35	; 0x23
 8002058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f004 f947 	bl	80062f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_ETH_Init+0x128>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <HAL_ETH_Init+0x128>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <HAL_ETH_Init+0x128>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_ETH_Init+0x12c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a39      	ldr	r2, [pc, #228]	; (8002164 <HAL_ETH_Init+0x12c>)
 8002080:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002084:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002086:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HAL_ETH_Init+0x12c>)
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4935      	ldr	r1, [pc, #212]	; (8002164 <HAL_ETH_Init+0x12c>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_ETH_Init+0x12c>)
 8002096:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b0:	f7ff fd38 	bl	8001b24 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020b6:	e011      	b.n	80020dc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020b8:	f7ff fd34 	bl	8001b24 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020c6:	d909      	bls.n	80020dc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2204      	movs	r2, #4
 80020cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	22e0      	movs	r2, #224	; 0xe0
 80020d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e03d      	b.n	8002158 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1e4      	bne.n	80020b8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fd58 	bl	8002ba4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fe03 	bl	8002d00 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fe59 	bl	8002db2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	461a      	mov	r2, r3
 8002106:	2100      	movs	r1, #0
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fdc1 	bl	8002c90 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800211c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_ETH_Init+0x130>)
 800212c:	430b      	orrs	r3, r1
 800212e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002142:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2210      	movs	r2, #16
 8002152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	00020060 	.word	0x00020060

0800216c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217a:	2b10      	cmp	r3, #16
 800217c:	d150      	bne.n	8002220 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2223      	movs	r2, #35	; 0x23
 8002182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f939 	bl	8002404 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0208 	orr.w	r2, r2, #8
 80021a0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fcc6 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0204 	orr.w	r2, r2, #4
 80021c6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7ff fcb3 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fb7c 	bl	80028dc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021fa:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002212:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2223      	movs	r2, #35	; 0x23
 8002218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	e000      	b.n	8002222 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002238:	2b23      	cmp	r3, #35	; 0x23
 800223a:	d14a      	bne.n	80022d2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2223      	movs	r2, #35	; 0x23
 8002240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002256:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800225a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	f023 0302 	bic.w	r3, r3, #2
 800226e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002272:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0204 	bic.w	r2, r2, #4
 8002282:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800228c:	2001      	movs	r0, #1
 800228e:	f7ff fc55 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fb1e 	bl	80028dc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0208 	bic.w	r2, r2, #8
 80022ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7ff fc3f 	bl	8001b3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2210      	movs	r2, #16
 80022ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
  }
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07c      	b.n	80023fc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002308:	2b23      	cmp	r3, #35	; 0x23
 800230a:	d176      	bne.n	80023fa <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800230c:	2200      	movs	r2, #0
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fdbd 	bl	8002e90 <ETH_Prepare_Tx_Descriptors>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f043 0202 	orr.w	r2, r3, #2
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e065      	b.n	80023fc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002330:	f3bf 8f4f 	dsb	sy
}
 8002334:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3206      	adds	r2, #6
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	2b03      	cmp	r3, #3
 8002354:	d904      	bls.n	8002360 <HAL_ETH_Transmit+0x84>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	1f1a      	subs	r2, r3, #4
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3106      	adds	r1, #6
 800236c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002370:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002374:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002376:	f7ff fbd5 	bl	8001b24 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800237c:	e037      	b.n	80023ee <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d011      	beq.n	80023b4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f043 0208 	orr.w	r2, r3, #8
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e023      	b.n	80023fc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ba:	d018      	beq.n	80023ee <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023bc:	f7ff fbb2 	bl	8001b24 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d302      	bcc.n	80023d2 <HAL_ETH_Transmit+0xf6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f043 0204 	orr.w	r2, r3, #4
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80023e8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e006      	b.n	80023fc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	dbc3      	blt.n	800237e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002410:	2301      	movs	r3, #1
 8002412:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002418:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	3212      	adds	r2, #18
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800242c:	e042      	b.n	80024b4 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d112      	bne.n	800245c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	4618      	mov	r0, r3
 800243c:	f004 f8ea 	bl	8006614 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	74fb      	strb	r3, [r7, #19]
 800244a:	e007      	b.n	800245c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	461a      	mov	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	461a      	mov	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d028      	beq.n	80024b4 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <ETH_UpdateDescriptor+0x104>)
 8002470:	4313      	orrs	r3, r2
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	6053      	str	r3, [r2, #4]
 8002476:	e005      	b.n	8002484 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3301      	adds	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d902      	bls.n	80024a2 <ETH_UpdateDescriptor+0x9e>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3b04      	subs	r3, #4
 80024a0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	3212      	adds	r2, #18
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	617b      	str	r3, [r7, #20]
      desccount--;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <ETH_UpdateDescriptor+0xbc>
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1b6      	bne.n	800242e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d01a      	beq.n	8002500 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80024d4:	f3bf 8f5f 	dmb	sy
}
 80024d8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6919      	ldr	r1, [r3, #16]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	18ca      	adds	r2, r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002500:	bf00      	nop
 8002502:	3720      	adds	r7, #32
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	80004000 	.word	0x80004000

0800250c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 031c 	and.w	r3, r3, #28
 8002528:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	02db      	lsls	r3, r3, #11
 800252e:	b29b      	uxth	r3, r3
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	019b      	lsls	r3, r3, #6
 800253a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0302 	bic.w	r3, r3, #2
 800254a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800255c:	f7ff fae2 	bl	8001b24 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002562:	e00d      	b.n	8002580 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002564:	f7ff fade 	bl	8001b24 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d301      	bcc.n	8002578 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e010      	b.n	800259a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ec      	bne.n	8002564 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 031c 	and.w	r3, r3, #28
 80025be:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	02db      	lsls	r3, r3, #11
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff fa92 	bl	8001b24 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002602:	e00d      	b.n	8002620 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002604:	f7ff fa8e 	bl	8001b24 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002612:	d301      	bcc.n	8002618 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e009      	b.n	800262c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ec      	bne.n	8002604 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0e6      	b.n	8002816 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf14      	ite	ne
 8002762:	2301      	movne	r3, #1
 8002764:	2300      	moveq	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e00b      	b.n	800284e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283c:	2b10      	cmp	r3, #16
 800283e:	d105      	bne.n	800284c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002840:	6839      	ldr	r1, [r7, #0]
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f870 	bl	8002928 <ETH_SetMACConfig>

    return HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e000      	b.n	800284e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 031c 	bic.w	r3, r3, #28
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002870:	f001 fc3c 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8002874:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_ETH_SetMDIOClockRange+0x74>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d804      	bhi.n	8002888 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e019      	b.n	80028bc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_ETH_SetMDIOClockRange+0x78>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d204      	bcs.n	800289a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f043 030c 	orr.w	r3, r3, #12
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e010      	b.n	80028bc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d90c      	bls.n	80028bc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <HAL_ETH_SetMDIOClockRange+0x80>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d804      	bhi.n	80028b4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	e003      	b.n	80028bc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f043 0310 	orr.w	r3, r3, #16
 80028ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	611a      	str	r2, [r3, #16]
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	02160ebf 	.word	0x02160ebf
 80028d0:	03938700 	.word	0x03938700
 80028d4:	05f5e0ff 	.word	0x05f5e0ff
 80028d8:	08f0d17f 	.word	0x08f0d17f

080028dc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028fe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800290c:	2001      	movs	r0, #1
 800290e:	f7ff f915 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800291c:	6193      	str	r3, [r2, #24]
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <ETH_SetMACConfig+0x164>)
 800293e:	4013      	ands	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7b9b      	ldrb	r3, [r3, #14]
 8002946:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	7c12      	ldrb	r2, [r2, #16]
 800294c:	2a00      	cmp	r2, #0
 800294e:	d102      	bne.n	8002956 <ETH_SetMACConfig+0x2e>
 8002950:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002954:	e000      	b.n	8002958 <ETH_SetMACConfig+0x30>
 8002956:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002958:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	7c52      	ldrb	r2, [r2, #17]
 800295e:	2a00      	cmp	r2, #0
 8002960:	d102      	bne.n	8002968 <ETH_SetMACConfig+0x40>
 8002962:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002966:	e000      	b.n	800296a <ETH_SetMACConfig+0x42>
 8002968:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800296a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002970:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7fdb      	ldrb	r3, [r3, #31]
 8002976:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002978:	431a      	orrs	r2, r3
                        macconf->Speed |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800297e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	7f92      	ldrb	r2, [r2, #30]
 8002984:	2a00      	cmp	r2, #0
 8002986:	d102      	bne.n	800298e <ETH_SetMACConfig+0x66>
 8002988:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298c:	e000      	b.n	8002990 <ETH_SetMACConfig+0x68>
 800298e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	7f1b      	ldrb	r3, [r3, #28]
 8002996:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002998:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800299e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	791b      	ldrb	r3, [r3, #4]
 80029a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	d102      	bne.n	80029b8 <ETH_SetMACConfig+0x90>
 80029b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b6:	e000      	b.n	80029ba <ETH_SetMACConfig+0x92>
 80029b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	7bdb      	ldrb	r3, [r3, #15]
 80029c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80029d2:	4313      	orrs	r3, r2
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff f8a6 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a16:	2a00      	cmp	r2, #0
 8002a18:	d101      	bne.n	8002a1e <ETH_SetMACConfig+0xf6>
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	e000      	b.n	8002a20 <ETH_SetMACConfig+0xf8>
 8002a1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a20:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002a2e:	2a01      	cmp	r2, #1
 8002a30:	d101      	bne.n	8002a36 <ETH_SetMACConfig+0x10e>
 8002a32:	2208      	movs	r2, #8
 8002a34:	e000      	b.n	8002a38 <ETH_SetMACConfig+0x110>
 8002a36:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a38:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a40:	2a01      	cmp	r2, #1
 8002a42:	d101      	bne.n	8002a48 <ETH_SetMACConfig+0x120>
 8002a44:	2204      	movs	r2, #4
 8002a46:	e000      	b.n	8002a4a <ETH_SetMACConfig+0x122>
 8002a48:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a52:	2a01      	cmp	r2, #1
 8002a54:	d101      	bne.n	8002a5a <ETH_SetMACConfig+0x132>
 8002a56:	2202      	movs	r2, #2
 8002a58:	e000      	b.n	8002a5c <ETH_SetMACConfig+0x134>
 8002a5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff f861 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	fd20810f 	.word	0xfd20810f

08002a90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <ETH_SetDMAConfig+0x110>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	7b1b      	ldrb	r3, [r3, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <ETH_SetDMAConfig+0x2c>
 8002ab6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aba:	e000      	b.n	8002abe <ETH_SetDMAConfig+0x2e>
 8002abc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	7b5b      	ldrb	r3, [r3, #13]
 8002ac2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ac4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	7f52      	ldrb	r2, [r2, #29]
 8002aca:	2a00      	cmp	r2, #0
 8002acc:	d102      	bne.n	8002ad4 <ETH_SetDMAConfig+0x44>
 8002ace:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ad2:	e000      	b.n	8002ad6 <ETH_SetDMAConfig+0x46>
 8002ad4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ad6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	7b9b      	ldrb	r3, [r3, #14]
 8002adc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ade:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ae4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002aec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7f9b      	ldrb	r3, [r3, #30]
 8002af2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002af4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002afa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b02:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7ff f808 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b44:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b4a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b50:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b58:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b5a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b62:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b68:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b76:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7fe ffd9 	bl	8001b3c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	f8de3f23 	.word	0xf8de3f23

08002ba4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b0a6      	sub	sp, #152	; 0x98
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002be6:	2300      	movs	r3, #0
 8002be8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fe7f 	bl	8002928 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c56:	2301      	movs	r3, #1
 8002c58:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c64:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c6a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff05 	bl	8002a90 <ETH_SetDMAConfig>
}
 8002c86:	bf00      	nop
 8002c88:	3798      	adds	r7, #152	; 0x98
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3305      	adds	r3, #5
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	3204      	adds	r2, #4
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <ETH_MACAddressConfig+0x68>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	061a      	lsls	r2, r3, #24
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <ETH_MACAddressConfig+0x6c>)
 8002ce2:	4413      	add	r3, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40028040 	.word	0x40028040
 8002cfc:	40028044 	.word	0x40028044

08002d00 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e03e      	b.n	8002d8c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68d9      	ldr	r1, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	3206      	adds	r2, #6
 8002d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d80c      	bhi.n	8002d70 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68d9      	ldr	r1, [r3, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	e004      	b.n	8002d7a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d9bd      	bls.n	8002d0e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da4:	611a      	str	r2, [r3, #16]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e048      	b.n	8002e52 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6919      	ldr	r1, [r3, #16]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2200      	movs	r2, #0
 8002dee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	3212      	adds	r2, #18
 8002e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d80c      	bhi.n	8002e42 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6919      	ldr	r1, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	e004      	b.n	8002e4c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d9b3      	bls.n	8002dc0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e82:	60da      	str	r2, [r3, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b091      	sub	sp, #68	; 0x44
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3318      	adds	r3, #24
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eba:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ed2:	d007      	beq.n	8002ee4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed8:	3304      	adds	r3, #4
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e111      	b.n	800310c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	3301      	adds	r3, #1
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4b86      	ldr	r3, [pc, #536]	; (8003118 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f02:	6852      	ldr	r2, [r2, #4]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002f6a:	e082      	b.n	8003072 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e005      	b.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d902      	bls.n	8002faa <ETH_Prepare_Tx_Descriptors+0x11a>
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc0:	d007      	beq.n	8002fd2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d029      	beq.n	8003026 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe4:	e019      	b.n	800301a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002fe6:	f3bf 8f5f 	dmb	sy
}
 8002fea:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003000:	2b03      	cmp	r3, #3
 8003002:	d902      	bls.n	800300a <ETH_Prepare_Tx_Descriptors+0x17a>
 8003004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003006:	3b04      	subs	r3, #4
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	3301      	adds	r3, #1
 8003018:	63bb      	str	r3, [r7, #56]	; 0x38
 800301a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	429a      	cmp	r2, r3
 8003020:	d3e1      	bcc.n	8002fe6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	e072      	b.n	800310c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	3301      	adds	r3, #1
 8003036:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <ETH_Prepare_Tx_Descriptors+0x288>)
 800304e:	4013      	ands	r3, r2
 8003050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003052:	6852      	ldr	r2, [r2, #4]
 8003054:	431a      	orrs	r2, r3
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	3301      	adds	r3, #1
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003060:	f3bf 8f5f 	dmb	sy
}
 8003064:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f47f af78 	bne.w	8002f6c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d006      	beq.n	8003090 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e005      	b.n	800309c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80030b2:	f3bf 8f5f 	dmb	sy
}
 80030b6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030cc:	3304      	adds	r3, #4
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030d8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030da:	f3ef 8310 	mrs	r3, PRIMASK
 80030de:	613b      	str	r3, [r7, #16]
  return(result);
 80030e0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	2301      	movs	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	4413      	add	r3, r2
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3744      	adds	r7, #68	; 0x44
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	ffffe000 	.word	0xffffe000

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e175      	b.n	8003428 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	f040 8164 	bne.w	8003422 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d005      	beq.n	8003172 <HAL_GPIO_Init+0x56>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d130      	bne.n	80031d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 0201 	and.w	r2, r3, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d017      	beq.n	8003210 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d123      	bne.n	8003264 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	08da      	lsrs	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3208      	adds	r2, #8
 8003224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	69b9      	ldr	r1, [r7, #24]
 8003260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0203 	and.w	r2, r3, #3
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80be 	beq.w	8003422 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	4b66      	ldr	r3, [pc, #408]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	4a65      	ldr	r2, [pc, #404]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b0:	6453      	str	r3, [r2, #68]	; 0x44
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032be:	4a61      	ldr	r2, [pc, #388]	; (8003444 <HAL_GPIO_Init+0x328>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d037      	beq.n	800335a <HAL_GPIO_Init+0x23e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a57      	ldr	r2, [pc, #348]	; (800344c <HAL_GPIO_Init+0x330>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_GPIO_Init+0x23a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_GPIO_Init+0x334>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02b      	beq.n	8003352 <HAL_GPIO_Init+0x236>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a55      	ldr	r2, [pc, #340]	; (8003454 <HAL_GPIO_Init+0x338>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d025      	beq.n	800334e <HAL_GPIO_Init+0x232>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a54      	ldr	r2, [pc, #336]	; (8003458 <HAL_GPIO_Init+0x33c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <HAL_GPIO_Init+0x22e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a53      	ldr	r2, [pc, #332]	; (800345c <HAL_GPIO_Init+0x340>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d019      	beq.n	8003346 <HAL_GPIO_Init+0x22a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_GPIO_Init+0x344>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_GPIO_Init+0x348>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00d      	beq.n	800333e <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_GPIO_Init+0x34c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	; (800346c <HAL_GPIO_Init+0x350>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_GPIO_Init+0x21a>
 8003332:	2309      	movs	r3, #9
 8003334:	e012      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003336:	230a      	movs	r3, #10
 8003338:	e010      	b.n	800335c <HAL_GPIO_Init+0x240>
 800333a:	2308      	movs	r3, #8
 800333c:	e00e      	b.n	800335c <HAL_GPIO_Init+0x240>
 800333e:	2307      	movs	r3, #7
 8003340:	e00c      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003342:	2306      	movs	r3, #6
 8003344:	e00a      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003346:	2305      	movs	r3, #5
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x240>
 800334a:	2304      	movs	r3, #4
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x240>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x240>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800336c:	4935      	ldr	r1, [pc, #212]	; (8003444 <HAL_GPIO_Init+0x328>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_GPIO_Init+0x354>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339e:	4a34      	ldr	r2, [pc, #208]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c8:	4a29      	ldr	r2, [pc, #164]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <HAL_GPIO_Init+0x354>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f ae86 	bls.w	800313c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40013800 	.word	0x40013800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40021400 	.word	0x40021400
 8003460:	40021800 	.word	0x40021800
 8003464:	40021c00 	.word	0x40021c00
 8003468:	40022000 	.word	0x40022000
 800346c:	40022400 	.word	0x40022400
 8003470:	40013c00 	.word	0x40013c00

08003474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003490:	e003      	b.n	800349a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	041a      	lsls	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e08b      	b.n	80035d2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fdbc 	bl	800104c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e006      	b.n	8003530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800352e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d108      	bne.n	800354a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	e007      	b.n	800355a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_I2C_Init+0x134>)
 8003566:	430b      	orrs	r3, r1
 8003568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	02008000 	.word	0x02008000

080035e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d138      	bne.n	8003668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003600:	2302      	movs	r3, #2
 8003602:	e032      	b.n	800366a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b20      	cmp	r3, #32
 800368a:	d139      	bne.n	8003700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003696:	2302      	movs	r3, #2
 8003698:	e033      	b.n	8003702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2224      	movs	r2, #36	; 0x24
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800373e:	f7fe f9f1 	bl	8001b24 <HAL_GetTick>
 8003742:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003744:	e009      	b.n	800375a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003746:	f7fe f9ed 	bl	8001b24 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003754:	d901      	bls.n	800375a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e022      	b.n	80037a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003766:	d1ee      	bne.n	8003746 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003774:	f7fe f9d6 	bl	8001b24 <HAL_GetTick>
 8003778:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800377a:	e009      	b.n	8003790 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800377c:	f7fe f9d2 	bl	8001b24 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800378a:	d901      	bls.n	8003790 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e007      	b.n	80037a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800379c:	d1ee      	bne.n	800377c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000

080037b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e29b      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8087 	beq.w	80038e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d4:	4b96      	ldr	r3, [pc, #600]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d00c      	beq.n	80037fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e0:	4b93      	ldr	r3, [pc, #588]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d112      	bne.n	8003812 <HAL_RCC_OscConfig+0x62>
 80037ec:	4b90      	ldr	r3, [pc, #576]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f8:	d10b      	bne.n	8003812 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fa:	4b8d      	ldr	r3, [pc, #564]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d06c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x130>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d168      	bne.n	80038e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e275      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x7a>
 800381c:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a83      	ldr	r2, [pc, #524]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e02e      	b.n	8003888 <HAL_RCC_OscConfig+0xd8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x9c>
 8003832:	4b7f      	ldr	r3, [pc, #508]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7e      	ldr	r2, [pc, #504]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b7c      	ldr	r3, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7b      	ldr	r2, [pc, #492]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xd8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0xc0>
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b73      	ldr	r3, [pc, #460]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a72      	ldr	r2, [pc, #456]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xd8>
 8003870:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6e      	ldr	r2, [pc, #440]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b6c      	ldr	r3, [pc, #432]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fe f948 	bl	8001b24 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7fe f944 	bl	8001b24 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e229      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xe8>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe f934 	bl	8001b24 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe f930 	bl	8001b24 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e215      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x110>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d069      	beq.n	80039c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ee:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x190>
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x17a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e1e9      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	493d      	ldr	r1, [pc, #244]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e040      	b.n	80039c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d023      	beq.n	8003990 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a38      	ldr	r2, [pc, #224]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe f8e6 	bl	8001b24 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395c:	f7fe f8e2 	bl	8001b24 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1c7      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4929      	ldr	r1, [pc, #164]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
 800398e:	e018      	b.n	80039c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe f8c2 	bl	8001b24 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fe f8be 	bl	8001b24 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1a3      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d038      	beq.n	8003a40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d019      	beq.n	8003a0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fe f89f 	bl	8001b24 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fe f89b 	bl	8001b24 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e180      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x23a>
 8003a08:	e01a      	b.n	8003a40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe f885 	bl	8001b24 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe f881 	bl	8001b24 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d903      	bls.n	8003a34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e166      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
 8003a30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	4b92      	ldr	r3, [pc, #584]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ee      	bne.n	8003a1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a4 	beq.w	8003b96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b8c      	ldr	r3, [pc, #560]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b89      	ldr	r3, [pc, #548]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a88      	ldr	r2, [pc, #544]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b86      	ldr	r3, [pc, #536]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a76:	4b83      	ldr	r3, [pc, #524]	; (8003c84 <HAL_RCC_OscConfig+0x4d4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a82:	4b80      	ldr	r3, [pc, #512]	; (8003c84 <HAL_RCC_OscConfig+0x4d4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7f      	ldr	r2, [pc, #508]	; (8003c84 <HAL_RCC_OscConfig+0x4d4>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe f849 	bl	8001b24 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7fe f845 	bl	8001b24 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	; 0x64
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e12a      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <HAL_RCC_OscConfig+0x4d4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x31a>
 8003abc:	4b70      	ldr	r3, [pc, #448]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a6f      	ldr	r2, [pc, #444]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac8:	e02d      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x33c>
 8003ad2:	4b6b      	ldr	r3, [pc, #428]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a67      	ldr	r2, [pc, #412]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	e01c      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x35e>
 8003af4:	4b62      	ldr	r3, [pc, #392]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
 8003b00:	4b5f      	ldr	r3, [pc, #380]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a5e      	ldr	r2, [pc, #376]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
 8003b0e:	4b5c      	ldr	r3, [pc, #368]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a5b      	ldr	r2, [pc, #364]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a58      	ldr	r2, [pc, #352]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d015      	beq.n	8003b5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fff9 	bl	8001b24 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fd fff5 	bl	8001b24 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0d8      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ee      	beq.n	8003b36 <HAL_RCC_OscConfig+0x386>
 8003b58:	e014      	b.n	8003b84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd ffe3 	bl	8001b24 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fd ffdf 	bl	8001b24 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0c2      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b78:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ee      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8a:	4b3d      	ldr	r3, [pc, #244]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80ae 	beq.w	8003cfc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba0:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d06d      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d14b      	bne.n	8003c4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd ffb0 	bl	8001b24 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd ffac 	bl	8001b24 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e091      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	491b      	ldr	r1, [pc, #108]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fd ff7e 	bl	8001b24 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fd ff7a 	bl	8001b24 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e05f      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x47c>
 8003c4a:	e057      	b.n	8003cfc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fd ff64 	bl	8001b24 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fd ff60 	bl	8001b24 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e045      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4b0>
 8003c7e:	e03d      	b.n	8003cfc <HAL_RCC_OscConfig+0x54c>
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_RCC_OscConfig+0x558>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d030      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d129      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d122      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d119      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0d0      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b6a      	ldr	r3, [pc, #424]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d910      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 020f 	bic.w	r2, r3, #15
 8003d3a:	4965      	ldr	r1, [pc, #404]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b63      	ldr	r3, [pc, #396]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0b8      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b59      	ldr	r3, [pc, #356]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d84:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a52      	ldr	r2, [pc, #328]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494d      	ldr	r1, [pc, #308]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d040      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d115      	bne.n	8003dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e073      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06b      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b39      	ldr	r3, [pc, #228]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4936      	ldr	r1, [pc, #216]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e00:	f7fd fe90 	bl	8001b24 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fd fe8c 	bl	8001b24 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e053      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d210      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 020f 	bic.w	r2, r3, #15
 8003e46:	4922      	ldr	r1, [pc, #136]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e032      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4916      	ldr	r1, [pc, #88]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9e:	f000 f821 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490a      	ldr	r1, [pc, #40]	; (8003ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x1d0>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCC_ClockConfig+0x1d4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fd fdec 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023c00 	.word	0x40023c00
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	08016138 	.word	0x08016138
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000004 	.word	0x20000004

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b094      	sub	sp, #80	; 0x50
 8003eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003efc:	4b79      	ldr	r3, [pc, #484]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d00d      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x40>
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	f200 80e1 	bhi.w	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x34>
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f16:	e0db      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f1c:	e0db      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1e:	4b72      	ldr	r3, [pc, #456]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f22:	e0d8      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f24:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d063      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	2200      	movs	r2, #0
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	f04f 0000 	mov.w	r0, #0
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	0159      	lsls	r1, r3, #5
 8003f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f68:	0150      	lsls	r0, r2, #5
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4621      	mov	r1, r4
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	4629      	mov	r1, r5
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f88:	4659      	mov	r1, fp
 8003f8a:	018b      	lsls	r3, r1, #6
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f92:	4651      	mov	r1, sl
 8003f94:	018a      	lsls	r2, r1, #6
 8003f96:	4651      	mov	r1, sl
 8003f98:	ebb2 0801 	subs.w	r8, r2, r1
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb6:	4690      	mov	r8, r2
 8003fb8:	4699      	mov	r9, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	eb18 0303 	adds.w	r3, r8, r3
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	eb49 0303 	adc.w	r3, r9, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	028b      	lsls	r3, r1, #10
 8003fda:	4621      	mov	r1, r4
 8003fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	028a      	lsls	r2, r1, #10
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff4:	f7fc f974 	bl	80002e0 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004000:	e058      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	2200      	movs	r2, #0
 800400a:	4618      	mov	r0, r3
 800400c:	4611      	mov	r1, r2
 800400e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	f04f 0000 	mov.w	r0, #0
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	0159      	lsls	r1, r3, #5
 800402a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800402e:	0150      	lsls	r0, r2, #5
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4641      	mov	r1, r8
 8004036:	ebb2 0a01 	subs.w	sl, r2, r1
 800403a:	4649      	mov	r1, r9
 800403c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800404c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004054:	ebb2 040a 	subs.w	r4, r2, sl
 8004058:	eb63 050b 	sbc.w	r5, r3, fp
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	00eb      	lsls	r3, r5, #3
 8004066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406a:	00e2      	lsls	r2, r4, #3
 800406c:	4614      	mov	r4, r2
 800406e:	461d      	mov	r5, r3
 8004070:	4643      	mov	r3, r8
 8004072:	18e3      	adds	r3, r4, r3
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	464b      	mov	r3, r9
 8004078:	eb45 0303 	adc.w	r3, r5, r3
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800408a:	4629      	mov	r1, r5
 800408c:	028b      	lsls	r3, r1, #10
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004094:	4621      	mov	r1, r4
 8004096:	028a      	lsls	r2, r1, #10
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409e:	2200      	movs	r2, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	61fa      	str	r2, [r7, #28]
 80040a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a8:	f7fc f91a 	bl	80002e0 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80040c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3750      	adds	r7, #80	; 0x50
 80040dc:	46bd      	mov	sp, r7
 80040de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00f42400 	.word	0x00f42400

080040ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000000 	.word	0x20000000

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004108:	f7ff fff0 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0a9b      	lsrs	r3, r3, #10
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40023800 	.word	0x40023800
 8004128:	08016148 	.word	0x08016148

0800412c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004130:	f7ff ffdc 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0b5b      	lsrs	r3, r3, #13
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40023800 	.word	0x40023800
 8004150:	08016148 	.word	0x08016148

08004154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d012      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800417c:	4b69      	ldr	r3, [pc, #420]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a68      	ldr	r2, [pc, #416]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004186:	6093      	str	r3, [r2, #8]
 8004188:	4b66      	ldr	r3, [pc, #408]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	4964      	ldr	r1, [pc, #400]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d017      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ae:	4b5d      	ldr	r3, [pc, #372]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	4959      	ldr	r1, [pc, #356]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041cc:	d101      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d017      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ea:	4b4e      	ldr	r3, [pc, #312]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	494a      	ldr	r1, [pc, #296]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004208:	d101      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800420a:	2301      	movs	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004216:	2301      	movs	r3, #1
 8004218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 808b 	beq.w	800434e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004238:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	4a39      	ldr	r2, [pc, #228]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004242:	6413      	str	r3, [r2, #64]	; 0x40
 8004244:	4b37      	ldr	r3, [pc, #220]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004250:	4b35      	ldr	r3, [pc, #212]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a34      	ldr	r2, [pc, #208]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425c:	f7fd fc62 	bl	8001b24 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fd fc5e 	bl	8001b24 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b64      	cmp	r3, #100	; 0x64
 8004270:	d901      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e38f      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004276:	4b2c      	ldr	r3, [pc, #176]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004282:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d035      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	429a      	cmp	r2, r3
 800429e:	d02e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042c2:	4a18      	ldr	r2, [pc, #96]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d114      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fc26 	bl	8001b24 <HAL_GetTick>
 80042d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fd fc22 	bl	8001b24 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e351      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0ee      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800430a:	d111      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800431a:	400b      	ands	r3, r1
 800431c:	4901      	ldr	r1, [pc, #4]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
 8004322:	e00b      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004324:	40023800 	.word	0x40023800
 8004328:	40007000 	.word	0x40007000
 800432c:	0ffffcff 	.word	0x0ffffcff
 8004330:	4bac      	ldr	r3, [pc, #688]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4aab      	ldr	r2, [pc, #684]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004336:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800433a:	6093      	str	r3, [r2, #8]
 800433c:	4ba9      	ldr	r3, [pc, #676]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004348:	49a6      	ldr	r1, [pc, #664]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	4313      	orrs	r3, r2
 800434c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b00      	cmp	r3, #0
 8004358:	d010      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800435a:	4ba2      	ldr	r3, [pc, #648]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004360:	4aa0      	ldr	r2, [pc, #640]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800436a:	4b9e      	ldr	r3, [pc, #632]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	499b      	ldr	r1, [pc, #620]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004388:	4b96      	ldr	r3, [pc, #600]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004396:	4993      	ldr	r1, [pc, #588]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043aa:	4b8e      	ldr	r3, [pc, #568]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b8:	498a      	ldr	r1, [pc, #552]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043cc:	4b85      	ldr	r3, [pc, #532]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043da:	4982      	ldr	r1, [pc, #520]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ee:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	4979      	ldr	r1, [pc, #484]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004410:	4b74      	ldr	r3, [pc, #464]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f023 0203 	bic.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	4971      	ldr	r1, [pc, #452]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004432:	4b6c      	ldr	r3, [pc, #432]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f023 020c 	bic.w	r2, r3, #12
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004440:	4968      	ldr	r1, [pc, #416]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004454:	4b63      	ldr	r3, [pc, #396]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	4960      	ldr	r1, [pc, #384]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004476:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004484:	4957      	ldr	r1, [pc, #348]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004498:	4b52      	ldr	r3, [pc, #328]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	494f      	ldr	r1, [pc, #316]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044ba:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	4946      	ldr	r1, [pc, #280]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044dc:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	493e      	ldr	r1, [pc, #248]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044fe:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	4935      	ldr	r1, [pc, #212]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004520:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452e:	492d      	ldr	r1, [pc, #180]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004542:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004550:	4924      	ldr	r1, [pc, #144]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800455c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004560:	d101      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004562:	2301      	movs	r3, #1
 8004564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004582:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004590:	4914      	ldr	r1, [pc, #80]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b4:	490b      	ldr	r1, [pc, #44]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00f      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d8:	4902      	ldr	r1, [pc, #8]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f4:	4b8a      	ldr	r3, [pc, #552]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	4986      	ldr	r1, [pc, #536]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004618:	4b81      	ldr	r3, [pc, #516]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004628:	497d      	ldr	r1, [pc, #500]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d006      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80d6 	beq.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004644:	4b76      	ldr	r3, [pc, #472]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a75      	ldr	r2, [pc, #468]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800464e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004650:	f7fd fa68 	bl	8001b24 <HAL_GetTick>
 8004654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004658:	f7fd fa64 	bl	8001b24 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e195      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800466a:	4b6d      	ldr	r3, [pc, #436]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d021      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11d      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800468a:	4b65      	ldr	r3, [pc, #404]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800468c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004698:	4b61      	ldr	r3, [pc, #388]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469e:	0e1b      	lsrs	r3, r3, #24
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	019a      	lsls	r2, r3, #6
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	071b      	lsls	r3, r3, #28
 80046be:	4958      	ldr	r1, [pc, #352]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02e      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f0:	d129      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f2:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004700:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004706:	0f1b      	lsrs	r3, r3, #28
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	019a      	lsls	r2, r3, #6
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	071b      	lsls	r3, r3, #28
 8004726:	493e      	ldr	r1, [pc, #248]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800472e:	4b3c      	ldr	r3, [pc, #240]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004734:	f023 021f 	bic.w	r2, r3, #31
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	3b01      	subs	r3, #1
 800473e:	4938      	ldr	r1, [pc, #224]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01d      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004752:	4b33      	ldr	r3, [pc, #204]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004758:	0e1b      	lsrs	r3, r3, #24
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004760:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	0f1b      	lsrs	r3, r3, #28
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	019a      	lsls	r2, r3, #6
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	431a      	orrs	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	071b      	lsls	r3, r3, #28
 8004786:	4926      	ldr	r1, [pc, #152]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d011      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	019a      	lsls	r2, r3, #6
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	061b      	lsls	r3, r3, #24
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	491a      	ldr	r1, [pc, #104]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ca:	f7fd f9ab 	bl	8001b24 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047d2:	f7fd f9a7 	bl	8001b24 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b64      	cmp	r3, #100	; 0x64
 80047de:	d901      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e0d8      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	f040 80ce 	bne.w	8004994 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a08      	ldr	r2, [pc, #32]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fd f98e 	bl	8001b24 <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800480a:	e00b      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800480c:	f7fd f98a 	bl	8001b24 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d904      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0bb      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004830:	d0ec      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02e      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d12a      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800485a:	4b51      	ldr	r3, [pc, #324]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004868:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	0f1b      	lsrs	r3, r3, #28
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	019a      	lsls	r2, r3, #6
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	061b      	lsls	r3, r3, #24
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	071b      	lsls	r3, r3, #28
 800488e:	4944      	ldr	r1, [pc, #272]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004896:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	3b01      	subs	r3, #1
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	493d      	ldr	r1, [pc, #244]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d022      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c4:	d11d      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	0e1b      	lsrs	r3, r3, #24
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048d4:	4b32      	ldr	r3, [pc, #200]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	0f1b      	lsrs	r3, r3, #28
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	019a      	lsls	r2, r3, #6
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	431a      	orrs	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	4929      	ldr	r1, [pc, #164]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d028      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	0e1b      	lsrs	r3, r3, #24
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800491c:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	019a      	lsls	r2, r3, #6
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	071b      	lsls	r3, r3, #28
 8004942:	4917      	ldr	r1, [pc, #92]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800494c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	4911      	ldr	r1, [pc, #68]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496c:	f7fd f8da 	bl	8001b24 <HAL_GetTick>
 8004970:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004974:	f7fd f8d6 	bl	8001b24 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e007      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800498e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004992:	d1ef      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e09d      	b.n	8004af2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c6:	d009      	beq.n	80049dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	61da      	str	r2, [r3, #28]
 80049ce:	e005      	b.n	80049dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fb88 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a1c:	d902      	bls.n	8004a24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e002      	b.n	8004a2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a32:	d007      	beq.n	8004a44 <HAL_SPI_Init+0xa0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a3c:	d002      	beq.n	8004a44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	f003 0204 	and.w	r2, r3, #4
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ac0:	ea42 0103 	orr.w	r1, r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e049      	b.n	8004ba0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fc fb55 	bl	80011d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f000 f949 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e0ff      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b14      	cmp	r3, #20
 8004bd2:	f200 80f0 	bhi.w	8004db6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004db7 	.word	0x08004db7
 8004be4:	08004db7 	.word	0x08004db7
 8004be8:	08004db7 	.word	0x08004db7
 8004bec:	08004c71 	.word	0x08004c71
 8004bf0:	08004db7 	.word	0x08004db7
 8004bf4:	08004db7 	.word	0x08004db7
 8004bf8:	08004db7 	.word	0x08004db7
 8004bfc:	08004cb3 	.word	0x08004cb3
 8004c00:	08004db7 	.word	0x08004db7
 8004c04:	08004db7 	.word	0x08004db7
 8004c08:	08004db7 	.word	0x08004db7
 8004c0c:	08004cf3 	.word	0x08004cf3
 8004c10:	08004db7 	.word	0x08004db7
 8004c14:	08004db7 	.word	0x08004db7
 8004c18:	08004db7 	.word	0x08004db7
 8004c1c:	08004d35 	.word	0x08004d35
 8004c20:	08004db7 	.word	0x08004db7
 8004c24:	08004db7 	.word	0x08004db7
 8004c28:	08004db7 	.word	0x08004db7
 8004c2c:	08004d75 	.word	0x08004d75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f976 	bl	8004f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0208 	orr.w	r2, r2, #8
 8004c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0204 	bic.w	r2, r2, #4
 8004c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6999      	ldr	r1, [r3, #24]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	619a      	str	r2, [r3, #24]
      break;
 8004c6e:	e0a5      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f9c8 	bl	800500c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6999      	ldr	r1, [r3, #24]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	619a      	str	r2, [r3, #24]
      break;
 8004cb0:	e084      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fa1f 	bl	80050fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0208 	orr.w	r2, r2, #8
 8004ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0204 	bic.w	r2, r2, #4
 8004cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69d9      	ldr	r1, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	61da      	str	r2, [r3, #28]
      break;
 8004cf0:	e064      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fa75 	bl	80051e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69d9      	ldr	r1, [r3, #28]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	021a      	lsls	r2, r3, #8
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	61da      	str	r2, [r3, #28]
      break;
 8004d32:	e043      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 faac 	bl	8005298 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0208 	orr.w	r2, r2, #8
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0204 	bic.w	r2, r2, #4
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d72:	e023      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fade 	bl	800533c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004db4:	e002      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop

08004dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a46      	ldr	r2, [pc, #280]	; (8004efc <TIM_Base_SetConfig+0x12c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d00f      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a43      	ldr	r2, [pc, #268]	; (8004f00 <TIM_Base_SetConfig+0x130>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a42      	ldr	r2, [pc, #264]	; (8004f04 <TIM_Base_SetConfig+0x134>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a41      	ldr	r2, [pc, #260]	; (8004f08 <TIM_Base_SetConfig+0x138>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <TIM_Base_SetConfig+0x13c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d108      	bne.n	8004e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a35      	ldr	r2, [pc, #212]	; (8004efc <TIM_Base_SetConfig+0x12c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d02b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d027      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a32      	ldr	r2, [pc, #200]	; (8004f00 <TIM_Base_SetConfig+0x130>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d023      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a31      	ldr	r2, [pc, #196]	; (8004f04 <TIM_Base_SetConfig+0x134>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <TIM_Base_SetConfig+0x138>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0x13c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d017      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2e      	ldr	r2, [pc, #184]	; (8004f10 <TIM_Base_SetConfig+0x140>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <TIM_Base_SetConfig+0x144>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2c      	ldr	r2, [pc, #176]	; (8004f18 <TIM_Base_SetConfig+0x148>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2b      	ldr	r2, [pc, #172]	; (8004f1c <TIM_Base_SetConfig+0x14c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <TIM_Base_SetConfig+0x150>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <TIM_Base_SetConfig+0x154>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <TIM_Base_SetConfig+0x12c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_Base_SetConfig+0xf8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <TIM_Base_SetConfig+0x13c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d103      	bne.n	8004ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f023 0201 	bic.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	611a      	str	r2, [r3, #16]
  }
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	40001c00 	.word	0x40001c00
 8004f24:	40002000 	.word	0x40002000

08004f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f023 0201 	bic.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <TIM_OC1_SetConfig+0xd8>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 0302 	bic.w	r3, r3, #2
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a21      	ldr	r2, [pc, #132]	; (8005004 <TIM_OC1_SetConfig+0xdc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC1_SetConfig+0x64>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a20      	ldr	r2, [pc, #128]	; (8005008 <TIM_OC1_SetConfig+0xe0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a16      	ldr	r2, [pc, #88]	; (8005004 <TIM_OC1_SetConfig+0xdc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC1_SetConfig+0x8e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a15      	ldr	r2, [pc, #84]	; (8005008 <TIM_OC1_SetConfig+0xe0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d111      	bne.n	8004fda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	621a      	str	r2, [r3, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	fffeff8f 	.word	0xfffeff8f
 8005004:	40010000 	.word	0x40010000
 8005008:	40010400 	.word	0x40010400

0800500c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f023 0210 	bic.w	r2, r3, #16
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <TIM_OC2_SetConfig+0xe4>)
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0320 	bic.w	r3, r3, #32
 8005056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <TIM_OC2_SetConfig+0xe8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC2_SetConfig+0x68>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <TIM_OC2_SetConfig+0xec>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10d      	bne.n	8005090 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a18      	ldr	r2, [pc, #96]	; (80050f4 <TIM_OC2_SetConfig+0xe8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC2_SetConfig+0x94>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <TIM_OC2_SetConfig+0xec>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	feff8fff 	.word	0xfeff8fff
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40010400 	.word	0x40010400

080050fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <TIM_OC3_SetConfig+0xe0>)
 8005128:	4013      	ands	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <TIM_OC3_SetConfig+0xe4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC3_SetConfig+0x66>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a21      	ldr	r2, [pc, #132]	; (80051e4 <TIM_OC3_SetConfig+0xe8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10d      	bne.n	800517e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800517c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <TIM_OC3_SetConfig+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC3_SetConfig+0x92>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_OC3_SetConfig+0xe8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800519c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	fffeff8f 	.word	0xfffeff8f
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4b1e      	ldr	r3, [pc, #120]	; (800528c <TIM_OC4_SetConfig+0xa4>)
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <TIM_OC4_SetConfig+0xa8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_OC4_SetConfig+0x68>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <TIM_OC4_SetConfig+0xac>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d109      	bne.n	8005264 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	feff8fff 	.word	0xfeff8fff
 8005290:	40010000 	.word	0x40010000
 8005294:	40010400 	.word	0x40010400

08005298 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <TIM_OC5_SetConfig+0x98>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a12      	ldr	r2, [pc, #72]	; (8005334 <TIM_OC5_SetConfig+0x9c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC5_SetConfig+0x5e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a11      	ldr	r2, [pc, #68]	; (8005338 <TIM_OC5_SetConfig+0xa0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d109      	bne.n	800530a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	fffeff8f 	.word	0xfffeff8f
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <TIM_OC6_SetConfig+0x9c>)
 8005368:	4013      	ands	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800537e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	051b      	lsls	r3, r3, #20
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a13      	ldr	r2, [pc, #76]	; (80053dc <TIM_OC6_SetConfig+0xa0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC6_SetConfig+0x60>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <TIM_OC6_SetConfig+0xa4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d109      	bne.n	80053b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	feff8fff 	.word	0xfeff8fff
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e06d      	b.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2f      	ldr	r2, [pc, #188]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d108      	bne.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005436:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005448:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a20      	ldr	r2, [pc, #128]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d01d      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a15      	ldr	r2, [pc, #84]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10c      	bne.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40010400 	.word	0x40010400
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40001800 	.word	0x40001800

08005500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005518:	2302      	movs	r3, #2
 800551a:	e065      	b.n	80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d115      	bne.n	80055d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	051b      	lsls	r3, r3, #20
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40010400 	.word	0x40010400

080055fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e040      	b.n	8005690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb fe88 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa8c 	bl	8005b60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f825 	bl	8005698 <UART_SetConfig>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e01b      	b.n	8005690 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb0b 	bl	8005ca4 <UART_CheckIdleState>
 800568e:	4603      	mov	r3, r0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4ba6      	ldr	r3, [pc, #664]	; (800595c <UART_SetConfig+0x2c4>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6979      	ldr	r1, [r7, #20]
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	430a      	orrs	r2, r1
 8005708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a94      	ldr	r2, [pc, #592]	; (8005960 <UART_SetConfig+0x2c8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d120      	bne.n	8005756 <UART_SetConfig+0xbe>
 8005714:	4b93      	ldr	r3, [pc, #588]	; (8005964 <UART_SetConfig+0x2cc>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b03      	cmp	r3, #3
 8005720:	d816      	bhi.n	8005750 <UART_SetConfig+0xb8>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0x90>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005739 	.word	0x08005739
 800572c:	08005745 	.word	0x08005745
 8005730:	0800573f 	.word	0x0800573f
 8005734:	0800574b 	.word	0x0800574b
 8005738:	2301      	movs	r3, #1
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e150      	b.n	80059e0 <UART_SetConfig+0x348>
 800573e:	2302      	movs	r3, #2
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e14d      	b.n	80059e0 <UART_SetConfig+0x348>
 8005744:	2304      	movs	r3, #4
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e14a      	b.n	80059e0 <UART_SetConfig+0x348>
 800574a:	2308      	movs	r3, #8
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e147      	b.n	80059e0 <UART_SetConfig+0x348>
 8005750:	2310      	movs	r3, #16
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e144      	b.n	80059e0 <UART_SetConfig+0x348>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a83      	ldr	r2, [pc, #524]	; (8005968 <UART_SetConfig+0x2d0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d132      	bne.n	80057c6 <UART_SetConfig+0x12e>
 8005760:	4b80      	ldr	r3, [pc, #512]	; (8005964 <UART_SetConfig+0x2cc>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b0c      	cmp	r3, #12
 800576c:	d828      	bhi.n	80057c0 <UART_SetConfig+0x128>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0xdc>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057a9 	.word	0x080057a9
 8005778:	080057c1 	.word	0x080057c1
 800577c:	080057c1 	.word	0x080057c1
 8005780:	080057c1 	.word	0x080057c1
 8005784:	080057b5 	.word	0x080057b5
 8005788:	080057c1 	.word	0x080057c1
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080057c1 	.word	0x080057c1
 8005794:	080057af 	.word	0x080057af
 8005798:	080057c1 	.word	0x080057c1
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c1 	.word	0x080057c1
 80057a4:	080057bb 	.word	0x080057bb
 80057a8:	2300      	movs	r3, #0
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e118      	b.n	80059e0 <UART_SetConfig+0x348>
 80057ae:	2302      	movs	r3, #2
 80057b0:	77fb      	strb	r3, [r7, #31]
 80057b2:	e115      	b.n	80059e0 <UART_SetConfig+0x348>
 80057b4:	2304      	movs	r3, #4
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e112      	b.n	80059e0 <UART_SetConfig+0x348>
 80057ba:	2308      	movs	r3, #8
 80057bc:	77fb      	strb	r3, [r7, #31]
 80057be:	e10f      	b.n	80059e0 <UART_SetConfig+0x348>
 80057c0:	2310      	movs	r3, #16
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e10c      	b.n	80059e0 <UART_SetConfig+0x348>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a68      	ldr	r2, [pc, #416]	; (800596c <UART_SetConfig+0x2d4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d120      	bne.n	8005812 <UART_SetConfig+0x17a>
 80057d0:	4b64      	ldr	r3, [pc, #400]	; (8005964 <UART_SetConfig+0x2cc>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057da:	2b30      	cmp	r3, #48	; 0x30
 80057dc:	d013      	beq.n	8005806 <UART_SetConfig+0x16e>
 80057de:	2b30      	cmp	r3, #48	; 0x30
 80057e0:	d814      	bhi.n	800580c <UART_SetConfig+0x174>
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d009      	beq.n	80057fa <UART_SetConfig+0x162>
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d810      	bhi.n	800580c <UART_SetConfig+0x174>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <UART_SetConfig+0x15c>
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d006      	beq.n	8005800 <UART_SetConfig+0x168>
 80057f2:	e00b      	b.n	800580c <UART_SetConfig+0x174>
 80057f4:	2300      	movs	r3, #0
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e0f2      	b.n	80059e0 <UART_SetConfig+0x348>
 80057fa:	2302      	movs	r3, #2
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e0ef      	b.n	80059e0 <UART_SetConfig+0x348>
 8005800:	2304      	movs	r3, #4
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e0ec      	b.n	80059e0 <UART_SetConfig+0x348>
 8005806:	2308      	movs	r3, #8
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e0e9      	b.n	80059e0 <UART_SetConfig+0x348>
 800580c:	2310      	movs	r3, #16
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e0e6      	b.n	80059e0 <UART_SetConfig+0x348>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a56      	ldr	r2, [pc, #344]	; (8005970 <UART_SetConfig+0x2d8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d120      	bne.n	800585e <UART_SetConfig+0x1c6>
 800581c:	4b51      	ldr	r3, [pc, #324]	; (8005964 <UART_SetConfig+0x2cc>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005826:	2bc0      	cmp	r3, #192	; 0xc0
 8005828:	d013      	beq.n	8005852 <UART_SetConfig+0x1ba>
 800582a:	2bc0      	cmp	r3, #192	; 0xc0
 800582c:	d814      	bhi.n	8005858 <UART_SetConfig+0x1c0>
 800582e:	2b80      	cmp	r3, #128	; 0x80
 8005830:	d009      	beq.n	8005846 <UART_SetConfig+0x1ae>
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d810      	bhi.n	8005858 <UART_SetConfig+0x1c0>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <UART_SetConfig+0x1a8>
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d006      	beq.n	800584c <UART_SetConfig+0x1b4>
 800583e:	e00b      	b.n	8005858 <UART_SetConfig+0x1c0>
 8005840:	2300      	movs	r3, #0
 8005842:	77fb      	strb	r3, [r7, #31]
 8005844:	e0cc      	b.n	80059e0 <UART_SetConfig+0x348>
 8005846:	2302      	movs	r3, #2
 8005848:	77fb      	strb	r3, [r7, #31]
 800584a:	e0c9      	b.n	80059e0 <UART_SetConfig+0x348>
 800584c:	2304      	movs	r3, #4
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e0c6      	b.n	80059e0 <UART_SetConfig+0x348>
 8005852:	2308      	movs	r3, #8
 8005854:	77fb      	strb	r3, [r7, #31]
 8005856:	e0c3      	b.n	80059e0 <UART_SetConfig+0x348>
 8005858:	2310      	movs	r3, #16
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e0c0      	b.n	80059e0 <UART_SetConfig+0x348>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a44      	ldr	r2, [pc, #272]	; (8005974 <UART_SetConfig+0x2dc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d125      	bne.n	80058b4 <UART_SetConfig+0x21c>
 8005868:	4b3e      	ldr	r3, [pc, #248]	; (8005964 <UART_SetConfig+0x2cc>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005876:	d017      	beq.n	80058a8 <UART_SetConfig+0x210>
 8005878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800587c:	d817      	bhi.n	80058ae <UART_SetConfig+0x216>
 800587e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005882:	d00b      	beq.n	800589c <UART_SetConfig+0x204>
 8005884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005888:	d811      	bhi.n	80058ae <UART_SetConfig+0x216>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <UART_SetConfig+0x1fe>
 800588e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005892:	d006      	beq.n	80058a2 <UART_SetConfig+0x20a>
 8005894:	e00b      	b.n	80058ae <UART_SetConfig+0x216>
 8005896:	2300      	movs	r3, #0
 8005898:	77fb      	strb	r3, [r7, #31]
 800589a:	e0a1      	b.n	80059e0 <UART_SetConfig+0x348>
 800589c:	2302      	movs	r3, #2
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	e09e      	b.n	80059e0 <UART_SetConfig+0x348>
 80058a2:	2304      	movs	r3, #4
 80058a4:	77fb      	strb	r3, [r7, #31]
 80058a6:	e09b      	b.n	80059e0 <UART_SetConfig+0x348>
 80058a8:	2308      	movs	r3, #8
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	e098      	b.n	80059e0 <UART_SetConfig+0x348>
 80058ae:	2310      	movs	r3, #16
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e095      	b.n	80059e0 <UART_SetConfig+0x348>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2f      	ldr	r2, [pc, #188]	; (8005978 <UART_SetConfig+0x2e0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d125      	bne.n	800590a <UART_SetConfig+0x272>
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <UART_SetConfig+0x2cc>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058cc:	d017      	beq.n	80058fe <UART_SetConfig+0x266>
 80058ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d2:	d817      	bhi.n	8005904 <UART_SetConfig+0x26c>
 80058d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d8:	d00b      	beq.n	80058f2 <UART_SetConfig+0x25a>
 80058da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058de:	d811      	bhi.n	8005904 <UART_SetConfig+0x26c>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x254>
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d006      	beq.n	80058f8 <UART_SetConfig+0x260>
 80058ea:	e00b      	b.n	8005904 <UART_SetConfig+0x26c>
 80058ec:	2301      	movs	r3, #1
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e076      	b.n	80059e0 <UART_SetConfig+0x348>
 80058f2:	2302      	movs	r3, #2
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e073      	b.n	80059e0 <UART_SetConfig+0x348>
 80058f8:	2304      	movs	r3, #4
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e070      	b.n	80059e0 <UART_SetConfig+0x348>
 80058fe:	2308      	movs	r3, #8
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e06d      	b.n	80059e0 <UART_SetConfig+0x348>
 8005904:	2310      	movs	r3, #16
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e06a      	b.n	80059e0 <UART_SetConfig+0x348>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <UART_SetConfig+0x2e4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d138      	bne.n	8005986 <UART_SetConfig+0x2ee>
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <UART_SetConfig+0x2cc>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800591e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005922:	d017      	beq.n	8005954 <UART_SetConfig+0x2bc>
 8005924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005928:	d82a      	bhi.n	8005980 <UART_SetConfig+0x2e8>
 800592a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592e:	d00b      	beq.n	8005948 <UART_SetConfig+0x2b0>
 8005930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005934:	d824      	bhi.n	8005980 <UART_SetConfig+0x2e8>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <UART_SetConfig+0x2aa>
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593e:	d006      	beq.n	800594e <UART_SetConfig+0x2b6>
 8005940:	e01e      	b.n	8005980 <UART_SetConfig+0x2e8>
 8005942:	2300      	movs	r3, #0
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e04b      	b.n	80059e0 <UART_SetConfig+0x348>
 8005948:	2302      	movs	r3, #2
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e048      	b.n	80059e0 <UART_SetConfig+0x348>
 800594e:	2304      	movs	r3, #4
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e045      	b.n	80059e0 <UART_SetConfig+0x348>
 8005954:	2308      	movs	r3, #8
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e042      	b.n	80059e0 <UART_SetConfig+0x348>
 800595a:	bf00      	nop
 800595c:	efff69f3 	.word	0xefff69f3
 8005960:	40011000 	.word	0x40011000
 8005964:	40023800 	.word	0x40023800
 8005968:	40004400 	.word	0x40004400
 800596c:	40004800 	.word	0x40004800
 8005970:	40004c00 	.word	0x40004c00
 8005974:	40005000 	.word	0x40005000
 8005978:	40011400 	.word	0x40011400
 800597c:	40007800 	.word	0x40007800
 8005980:	2310      	movs	r3, #16
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e02c      	b.n	80059e0 <UART_SetConfig+0x348>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a72      	ldr	r2, [pc, #456]	; (8005b54 <UART_SetConfig+0x4bc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d125      	bne.n	80059dc <UART_SetConfig+0x344>
 8005990:	4b71      	ldr	r3, [pc, #452]	; (8005b58 <UART_SetConfig+0x4c0>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005996:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800599a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800599e:	d017      	beq.n	80059d0 <UART_SetConfig+0x338>
 80059a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059a4:	d817      	bhi.n	80059d6 <UART_SetConfig+0x33e>
 80059a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059aa:	d00b      	beq.n	80059c4 <UART_SetConfig+0x32c>
 80059ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b0:	d811      	bhi.n	80059d6 <UART_SetConfig+0x33e>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <UART_SetConfig+0x326>
 80059b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ba:	d006      	beq.n	80059ca <UART_SetConfig+0x332>
 80059bc:	e00b      	b.n	80059d6 <UART_SetConfig+0x33e>
 80059be:	2300      	movs	r3, #0
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e00d      	b.n	80059e0 <UART_SetConfig+0x348>
 80059c4:	2302      	movs	r3, #2
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e00a      	b.n	80059e0 <UART_SetConfig+0x348>
 80059ca:	2304      	movs	r3, #4
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e007      	b.n	80059e0 <UART_SetConfig+0x348>
 80059d0:	2308      	movs	r3, #8
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e004      	b.n	80059e0 <UART_SetConfig+0x348>
 80059d6:	2310      	movs	r3, #16
 80059d8:	77fb      	strb	r3, [r7, #31]
 80059da:	e001      	b.n	80059e0 <UART_SetConfig+0x348>
 80059dc:	2310      	movs	r3, #16
 80059de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e8:	d15b      	bne.n	8005aa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80059ea:	7ffb      	ldrb	r3, [r7, #31]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d828      	bhi.n	8005a42 <UART_SetConfig+0x3aa>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0x360>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a25 	.word	0x08005a25
 8005a00:	08005a2d 	.word	0x08005a2d
 8005a04:	08005a43 	.word	0x08005a43
 8005a08:	08005a33 	.word	0x08005a33
 8005a0c:	08005a43 	.word	0x08005a43
 8005a10:	08005a43 	.word	0x08005a43
 8005a14:	08005a43 	.word	0x08005a43
 8005a18:	08005a3b 	.word	0x08005a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a1c:	f7fe fb72 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8005a20:	61b8      	str	r0, [r7, #24]
        break;
 8005a22:	e013      	b.n	8005a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7fe fb82 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8005a28:	61b8      	str	r0, [r7, #24]
        break;
 8005a2a:	e00f      	b.n	8005a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a2c:	4b4b      	ldr	r3, [pc, #300]	; (8005b5c <UART_SetConfig+0x4c4>)
 8005a2e:	61bb      	str	r3, [r7, #24]
        break;
 8005a30:	e00c      	b.n	8005a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a32:	f7fe fa57 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8005a36:	61b8      	str	r0, [r7, #24]
        break;
 8005a38:	e008      	b.n	8005a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3e:	61bb      	str	r3, [r7, #24]
        break;
 8005a40:	e004      	b.n	8005a4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	77bb      	strb	r3, [r7, #30]
        break;
 8005a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d074      	beq.n	8005b3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	005a      	lsls	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	441a      	add	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2b0f      	cmp	r3, #15
 8005a6c:	d916      	bls.n	8005a9c <UART_SetConfig+0x404>
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a74:	d212      	bcs.n	8005a9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f023 030f 	bic.w	r3, r3, #15
 8005a7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	89fb      	ldrh	r3, [r7, #14]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	89fa      	ldrh	r2, [r7, #14]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	e04f      	b.n	8005b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	77bb      	strb	r3, [r7, #30]
 8005aa0:	e04c      	b.n	8005b3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa2:	7ffb      	ldrb	r3, [r7, #31]
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d828      	bhi.n	8005afa <UART_SetConfig+0x462>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <UART_SetConfig+0x418>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	08005afb 	.word	0x08005afb
 8005ac0:	08005aeb 	.word	0x08005aeb
 8005ac4:	08005afb 	.word	0x08005afb
 8005ac8:	08005afb 	.word	0x08005afb
 8005acc:	08005afb 	.word	0x08005afb
 8005ad0:	08005af3 	.word	0x08005af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad4:	f7fe fb16 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8005ad8:	61b8      	str	r0, [r7, #24]
        break;
 8005ada:	e013      	b.n	8005b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005adc:	f7fe fb26 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8005ae0:	61b8      	str	r0, [r7, #24]
        break;
 8005ae2:	e00f      	b.n	8005b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae4:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <UART_SetConfig+0x4c4>)
 8005ae6:	61bb      	str	r3, [r7, #24]
        break;
 8005ae8:	e00c      	b.n	8005b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aea:	f7fe f9fb 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8005aee:	61b8      	str	r0, [r7, #24]
        break;
 8005af0:	e008      	b.n	8005b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af6:	61bb      	str	r3, [r7, #24]
        break;
 8005af8:	e004      	b.n	8005b04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	77bb      	strb	r3, [r7, #30]
        break;
 8005b02:	bf00      	nop
    }

    if (pclk != 0U)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d018      	beq.n	8005b3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	085a      	lsrs	r2, r3, #1
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	441a      	add	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b0f      	cmp	r3, #15
 8005b22:	d909      	bls.n	8005b38 <UART_SetConfig+0x4a0>
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2a:	d205      	bcs.n	8005b38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	e001      	b.n	8005b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b48:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40007c00 	.word	0x40007c00
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	00f42400 	.word	0x00f42400

08005b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01a      	beq.n	8005c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c5e:	d10a      	bne.n	8005c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]
  }
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b098      	sub	sp, #96	; 0x60
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb4:	f7fb ff36 	bl	8001b24 <HAL_GetTick>
 8005cb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d12e      	bne.n	8005d26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f88c 	bl	8005df4 <UART_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d021      	beq.n	8005d26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d00:	647b      	str	r3, [r7, #68]	; 0x44
 8005d02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e062      	b.n	8005dec <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d149      	bne.n	8005dc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f856 	bl	8005df4 <UART_WaitOnFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d03c      	beq.n	8005dc8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e6      	bne.n	8005d4e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3308      	adds	r3, #8
 8005d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0301 	bic.w	r3, r3, #1
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da0:	61fa      	str	r2, [r7, #28]
 8005da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e5      	bne.n	8005d80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e011      	b.n	8005dec <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3758      	adds	r7, #88	; 0x58
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e04:	e04f      	b.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0c:	d04b      	beq.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0e:	f7fb fe89 	bl	8001b24 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e04e      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d037      	beq.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b80      	cmp	r3, #128	; 0x80
 8005e3a:	d034      	beq.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d031      	beq.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d110      	bne.n	8005e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2208      	movs	r2, #8
 8005e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f838 	bl	8005ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2208      	movs	r2, #8
 8005e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e029      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e80:	d111      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f81e 	bl	8005ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e00f      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d0a0      	beq.n	8005e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b095      	sub	sp, #84	; 0x54
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3308      	adds	r3, #8
 8005f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e5      	bne.n	8005f08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d118      	bne.n	8005f76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f023 0310 	bic.w	r3, r3, #16
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6979      	ldr	r1, [r7, #20]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e6      	bne.n	8005f44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f8a:	bf00      	nop
 8005f8c:	3754      	adds	r7, #84	; 0x54
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005f9e:	f000 fb97 	bl	80066d0 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <MX_LWIP_Init+0x54>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <MX_LWIP_Init+0x58>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005fae:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <MX_LWIP_Init+0x5c>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <MX_LWIP_Init+0x60>)
 8005fb6:	9302      	str	r3, [sp, #8]
 8005fb8:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <MX_LWIP_Init+0x64>)
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <MX_LWIP_Init+0x5c>)
 8005fc2:	4a0b      	ldr	r2, [pc, #44]	; (8005ff0 <MX_LWIP_Init+0x58>)
 8005fc4:	4909      	ldr	r1, [pc, #36]	; (8005fec <MX_LWIP_Init+0x54>)
 8005fc6:	480e      	ldr	r0, [pc, #56]	; (8006000 <MX_LWIP_Init+0x68>)
 8005fc8:	f001 f86e 	bl	80070a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005fcc:	480c      	ldr	r0, [pc, #48]	; (8006000 <MX_LWIP_Init+0x68>)
 8005fce:	f001 fa25 	bl	800741c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005fd2:	480b      	ldr	r0, [pc, #44]	; (8006000 <MX_LWIP_Init+0x68>)
 8005fd4:	f001 fa32 	bl	800743c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005fd8:	490a      	ldr	r1, [pc, #40]	; (8006004 <MX_LWIP_Init+0x6c>)
 8005fda:	4809      	ldr	r0, [pc, #36]	; (8006000 <MX_LWIP_Init+0x68>)
 8005fdc:	f001 fb34 	bl	8007648 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005fe0:	4807      	ldr	r0, [pc, #28]	; (8006000 <MX_LWIP_Init+0x68>)
 8005fe2:	f008 fbcd 	bl	800e780 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005fe6:	bf00      	nop
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200005c0 	.word	0x200005c0
 8005ff0:	200005c4 	.word	0x200005c4
 8005ff4:	200005c8 	.word	0x200005c8
 8005ff8:	080121d1 	.word	0x080121d1
 8005ffc:	08006251 	.word	0x08006251
 8006000:	20000588 	.word	0x20000588
 8006004:	08006009 	.word	0x08006009

08006008 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006028:	4b40      	ldr	r3, [pc, #256]	; (800612c <low_level_init+0x110>)
 800602a:	4a41      	ldr	r2, [pc, #260]	; (8006130 <low_level_init+0x114>)
 800602c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800602e:	2300      	movs	r3, #0
 8006030:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006036:	23e1      	movs	r3, #225	; 0xe1
 8006038:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800603a:	2300      	movs	r3, #0
 800603c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800603e:	2300      	movs	r3, #0
 8006040:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006042:	2300      	movs	r3, #0
 8006044:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006046:	4a39      	ldr	r2, [pc, #228]	; (800612c <low_level_init+0x110>)
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800604e:	4b37      	ldr	r3, [pc, #220]	; (800612c <low_level_init+0x110>)
 8006050:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006054:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006056:	4b35      	ldr	r3, [pc, #212]	; (800612c <low_level_init+0x110>)
 8006058:	4a36      	ldr	r2, [pc, #216]	; (8006134 <low_level_init+0x118>)
 800605a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800605c:	4b33      	ldr	r3, [pc, #204]	; (800612c <low_level_init+0x110>)
 800605e:	4a36      	ldr	r2, [pc, #216]	; (8006138 <low_level_init+0x11c>)
 8006060:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006062:	4b32      	ldr	r3, [pc, #200]	; (800612c <low_level_init+0x110>)
 8006064:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006068:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800606a:	4830      	ldr	r0, [pc, #192]	; (800612c <low_level_init+0x110>)
 800606c:	f7fb ffe4 	bl	8002038 <HAL_ETH_Init>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006074:	2238      	movs	r2, #56	; 0x38
 8006076:	2100      	movs	r1, #0
 8006078:	4830      	ldr	r0, [pc, #192]	; (800613c <low_level_init+0x120>)
 800607a:	f00c fae4 	bl	8012646 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800607e:	4b2f      	ldr	r3, [pc, #188]	; (800613c <low_level_init+0x120>)
 8006080:	2221      	movs	r2, #33	; 0x21
 8006082:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006084:	4b2d      	ldr	r3, [pc, #180]	; (800613c <low_level_init+0x120>)
 8006086:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800608a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <low_level_init+0x120>)
 800608e:	2200      	movs	r2, #0
 8006090:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006092:	482b      	ldr	r0, [pc, #172]	; (8006140 <low_level_init+0x124>)
 8006094:	f000 fed0 	bl	8006e38 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2206      	movs	r2, #6
 800609c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80060a0:	4b22      	ldr	r3, [pc, #136]	; (800612c <low_level_init+0x110>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80060ac:	4b1f      	ldr	r3, [pc, #124]	; (800612c <low_level_init+0x110>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	785a      	ldrb	r2, [r3, #1]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80060b8:	4b1c      	ldr	r3, [pc, #112]	; (800612c <low_level_init+0x110>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	789a      	ldrb	r2, [r3, #2]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80060c4:	4b19      	ldr	r3, [pc, #100]	; (800612c <low_level_init+0x110>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	78da      	ldrb	r2, [r3, #3]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80060d0:	4b16      	ldr	r3, [pc, #88]	; (800612c <low_level_init+0x110>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	791a      	ldrb	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <low_level_init+0x110>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	795a      	ldrb	r2, [r3, #5]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80060ee:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060f6:	f043 030a 	orr.w	r3, r3, #10
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006102:	4910      	ldr	r1, [pc, #64]	; (8006144 <low_level_init+0x128>)
 8006104:	4810      	ldr	r0, [pc, #64]	; (8006148 <low_level_init+0x12c>)
 8006106:	f7fb fbac 	bl	8001862 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800610a:	480f      	ldr	r0, [pc, #60]	; (8006148 <low_level_init+0x12c>)
 800610c:	f7fb fbdb 	bl	80018c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f9f0 	bl	80064fc <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800611c:	e001      	b.n	8006122 <low_level_init+0x106>
    Error_Handler();
 800611e:	f7fa ff27 	bl	8000f70 <Error_Handler>
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20004f58 	.word	0x20004f58
 8006130:	40028000 	.word	0x40028000
 8006134:	2000012c 	.word	0x2000012c
 8006138:	2000008c 	.word	0x2000008c
 800613c:	20005008 	.word	0x20005008
 8006140:	08016150 	.word	0x08016150
 8006144:	2000000c 	.word	0x2000000c
 8006148:	20005040 	.word	0x20005040

0800614c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b092      	sub	sp, #72	; 0x48
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006164:	f107 030c 	add.w	r3, r7, #12
 8006168:	2230      	movs	r2, #48	; 0x30
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f00c fa6a 	bl	8012646 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006172:	f107 030c 	add.w	r3, r7, #12
 8006176:	2230      	movs	r2, #48	; 0x30
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f00c fa63 	bl	8012646 <memset>

  for(q = p; q != NULL; q = q->next)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	643b      	str	r3, [r7, #64]	; 0x40
 8006184:	e045      	b.n	8006212 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006188:	2b03      	cmp	r3, #3
 800618a:	d902      	bls.n	8006192 <low_level_output+0x46>
      return ERR_IF;
 800618c:	f06f 030b 	mvn.w	r3, #11
 8006190:	e055      	b.n	800623e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006194:	6859      	ldr	r1, [r3, #4]
 8006196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006198:	4613      	mov	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	3348      	adds	r3, #72	; 0x48
 80061a2:	443b      	add	r3, r7
 80061a4:	3b3c      	subs	r3, #60	; 0x3c
 80061a6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80061a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061aa:	895b      	ldrh	r3, [r3, #10]
 80061ac:	4619      	mov	r1, r3
 80061ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	3348      	adds	r3, #72	; 0x48
 80061ba:	443b      	add	r3, r7
 80061bc:	3b38      	subs	r3, #56	; 0x38
 80061be:	6019      	str	r1, [r3, #0]

    if(i>0)
 80061c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d011      	beq.n	80061ea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80061c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c8:	1e5a      	subs	r2, r3, #1
 80061ca:	f107 000c 	add.w	r0, r7, #12
 80061ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d0:	460b      	mov	r3, r1
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	440b      	add	r3, r1
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	18c1      	adds	r1, r0, r3
 80061da:	4613      	mov	r3, r2
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3348      	adds	r3, #72	; 0x48
 80061e4:	443b      	add	r3, r7
 80061e6:	3b34      	subs	r3, #52	; 0x34
 80061e8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80061ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80061f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f4:	4613      	mov	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	3348      	adds	r3, #72	; 0x48
 80061fe:	443b      	add	r3, r7
 8006200:	3b34      	subs	r3, #52	; 0x34
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006208:	3301      	adds	r3, #1
 800620a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800620c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	643b      	str	r3, [r7, #64]	; 0x40
 8006212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1b6      	bne.n	8006186 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	891b      	ldrh	r3, [r3, #8]
 800621c:	461a      	mov	r2, r3
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <low_level_output+0xfc>)
 8006220:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <low_level_output+0xfc>)
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800622a:	4a07      	ldr	r2, [pc, #28]	; (8006248 <low_level_output+0xfc>)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006230:	2214      	movs	r2, #20
 8006232:	4905      	ldr	r1, [pc, #20]	; (8006248 <low_level_output+0xfc>)
 8006234:	4805      	ldr	r0, [pc, #20]	; (800624c <low_level_output+0x100>)
 8006236:	f7fc f851 	bl	80022dc <HAL_ETH_Transmit>

  return errval;
 800623a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800623e:	4618      	mov	r0, r3
 8006240:	3748      	adds	r7, #72	; 0x48
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20005008 	.word	0x20005008
 800624c:	20004f58 	.word	0x20004f58

08006250 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <ethernetif_init+0x1c>
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <ethernetif_init+0x48>)
 8006260:	f240 127b 	movw	r2, #379	; 0x17b
 8006264:	490d      	ldr	r1, [pc, #52]	; (800629c <ethernetif_init+0x4c>)
 8006266:	480e      	ldr	r0, [pc, #56]	; (80062a0 <ethernetif_init+0x50>)
 8006268:	f00c f988 	bl	801257c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2273      	movs	r2, #115	; 0x73
 8006270:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2274      	movs	r2, #116	; 0x74
 8006278:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <ethernetif_init+0x54>)
 8006280:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <ethernetif_init+0x58>)
 8006286:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fec7 	bl	800601c <low_level_init>

  return ERR_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	080133b8 	.word	0x080133b8
 800629c:	080133d4 	.word	0x080133d4
 80062a0:	080133e4 	.word	0x080133e4
 80062a4:	0801064d 	.word	0x0801064d
 80062a8:	0800614d 	.word	0x0800614d

080062ac <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	4807      	ldr	r0, [pc, #28]	; (80062d8 <pbuf_free_custom+0x2c>)
 80062bc:	f000 fe9e 	bl	8006ffc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <pbuf_free_custom+0x30>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <pbuf_free_custom+0x30>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
  }
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	08016150 	.word	0x08016150
 80062dc:	20004f54 	.word	0x20004f54

080062e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80062e4:	f7fb fc1e 	bl	8001b24 <HAL_GetTick>
 80062e8:	4603      	mov	r3, r0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08e      	sub	sp, #56	; 0x38
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a4e      	ldr	r2, [pc, #312]	; (8006448 <HAL_ETH_MspInit+0x158>)
 800630e:	4293      	cmp	r3, r2
 8006310:	f040 8096 	bne.w	8006440 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006314:	4b4d      	ldr	r3, [pc, #308]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	4a4c      	ldr	r2, [pc, #304]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800631a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800631e:	6313      	str	r3, [r2, #48]	; 0x30
 8006320:	4b4a      	ldr	r3, [pc, #296]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	4b47      	ldr	r3, [pc, #284]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	4a46      	ldr	r2, [pc, #280]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006336:	6313      	str	r3, [r2, #48]	; 0x30
 8006338:	4b44      	ldr	r3, [pc, #272]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4b41      	ldr	r3, [pc, #260]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	4a40      	ldr	r2, [pc, #256]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800634a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800634e:	6313      	str	r3, [r2, #48]	; 0x30
 8006350:	4b3e      	ldr	r3, [pc, #248]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800635c:	4b3b      	ldr	r3, [pc, #236]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	4a3a      	ldr	r2, [pc, #232]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006362:	f043 0304 	orr.w	r3, r3, #4
 8006366:	6313      	str	r3, [r2, #48]	; 0x30
 8006368:	4b38      	ldr	r3, [pc, #224]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006374:	4b35      	ldr	r3, [pc, #212]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	4a34      	ldr	r2, [pc, #208]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	6313      	str	r3, [r2, #48]	; 0x30
 8006380:	4b32      	ldr	r3, [pc, #200]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800638c:	4b2f      	ldr	r3, [pc, #188]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	4a2e      	ldr	r2, [pc, #184]	; (800644c <HAL_ETH_MspInit+0x15c>)
 8006392:	f043 0302 	orr.w	r3, r3, #2
 8006396:	6313      	str	r3, [r2, #48]	; 0x30
 8006398:	4b2c      	ldr	r3, [pc, #176]	; (800644c <HAL_ETH_MspInit+0x15c>)
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80063a4:	4b29      	ldr	r3, [pc, #164]	; (800644c <HAL_ETH_MspInit+0x15c>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	4a28      	ldr	r2, [pc, #160]	; (800644c <HAL_ETH_MspInit+0x15c>)
 80063aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ae:	6313      	str	r3, [r2, #48]	; 0x30
 80063b0:	4b26      	ldr	r3, [pc, #152]	; (800644c <HAL_ETH_MspInit+0x15c>)
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80063bc:	2332      	movs	r3, #50	; 0x32
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c0:	2302      	movs	r3, #2
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c8:	2303      	movs	r3, #3
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80063cc:	230b      	movs	r3, #11
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063d4:	4619      	mov	r1, r3
 80063d6:	481e      	ldr	r0, [pc, #120]	; (8006450 <HAL_ETH_MspInit+0x160>)
 80063d8:	f7fc fea0 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80063dc:	2386      	movs	r3, #134	; 0x86
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e0:	2302      	movs	r3, #2
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063e8:	2303      	movs	r3, #3
 80063ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80063ec:	230b      	movs	r3, #11
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f4:	4619      	mov	r1, r3
 80063f6:	4817      	ldr	r0, [pc, #92]	; (8006454 <HAL_ETH_MspInit+0x164>)
 80063f8:	f7fc fe90 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80063fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006402:	2302      	movs	r3, #2
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006406:	2300      	movs	r3, #0
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800640a:	2303      	movs	r3, #3
 800640c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800640e:	230b      	movs	r3, #11
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006416:	4619      	mov	r1, r3
 8006418:	480f      	ldr	r0, [pc, #60]	; (8006458 <HAL_ETH_MspInit+0x168>)
 800641a:	f7fc fe7f 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800641e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006424:	2302      	movs	r3, #2
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006428:	2300      	movs	r3, #0
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800642c:	2303      	movs	r3, #3
 800642e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006430:	230b      	movs	r3, #11
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006438:	4619      	mov	r1, r3
 800643a:	4808      	ldr	r0, [pc, #32]	; (800645c <HAL_ETH_MspInit+0x16c>)
 800643c:	f7fc fe6e 	bl	800311c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006440:	bf00      	nop
 8006442:	3738      	adds	r7, #56	; 0x38
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40028000 	.word	0x40028000
 800644c:	40023800 	.word	0x40023800
 8006450:	40020800 	.word	0x40020800
 8006454:	40020000 	.word	0x40020000
 8006458:	40020400 	.word	0x40020400
 800645c:	40021800 	.word	0x40021800

08006460 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006464:	4802      	ldr	r0, [pc, #8]	; (8006470 <ETH_PHY_IO_Init+0x10>)
 8006466:	f7fc f9f7 	bl	8002858 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20004f58 	.word	0x20004f58

08006474 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  return 0;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	68f9      	ldr	r1, [r7, #12]
 8006496:	4807      	ldr	r0, [pc, #28]	; (80064b4 <ETH_PHY_IO_ReadReg+0x30>)
 8006498:	f7fc f838 	bl	800250c <HAL_ETH_ReadPHYRegister>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a6:	e000      	b.n	80064aa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20004f58 	.word	0x20004f58

080064b8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	68f9      	ldr	r1, [r7, #12]
 80064ca:	4807      	ldr	r0, [pc, #28]	; (80064e8 <ETH_PHY_IO_WriteReg+0x30>)
 80064cc:	f7fc f869 	bl	80025a2 <HAL_ETH_WritePHYRegister>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064da:	e000      	b.n	80064de <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20004f58 	.word	0x20004f58

080064ec <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80064f0:	f7fb fb18 	bl	8001b24 <HAL_GetTick>
 80064f4:	4603      	mov	r3, r0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b0a0      	sub	sp, #128	; 0x80
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006504:	f107 030c 	add.w	r3, r7, #12
 8006508:	2264      	movs	r2, #100	; 0x64
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f00c f89a 	bl	8012646 <memset>
  int32_t PHYLinkState = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	67fb      	str	r3, [r7, #124]	; 0x7c
 800651a:	2300      	movs	r3, #0
 800651c:	67bb      	str	r3, [r7, #120]	; 0x78
 800651e:	2300      	movs	r3, #0
 8006520:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006522:	483a      	ldr	r0, [pc, #232]	; (800660c <ethernet_link_check_state+0x110>)
 8006524:	f7fb fa1c 	bl	8001960 <LAN8742_GetLinkState>
 8006528:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <ethernet_link_check_state+0x5a>
 800653c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800653e:	2b01      	cmp	r3, #1
 8006540:	dc09      	bgt.n	8006556 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006542:	4833      	ldr	r0, [pc, #204]	; (8006610 <ethernet_link_check_state+0x114>)
 8006544:	f7fb fe71 	bl	800222a <HAL_ETH_Stop>
    netif_set_down(netif);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 ffe3 	bl	8007514 <netif_set_down>
    netif_set_link_down(netif);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 f84a 	bl	80075e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006554:	e055      	b.n	8006602 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d14e      	bne.n	8006602 <ethernet_link_check_state+0x106>
 8006564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006566:	2b01      	cmp	r3, #1
 8006568:	dd4b      	ble.n	8006602 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800656a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800656c:	3b02      	subs	r3, #2
 800656e:	2b03      	cmp	r3, #3
 8006570:	d82a      	bhi.n	80065c8 <ethernet_link_check_state+0xcc>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <ethernet_link_check_state+0x7c>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006589 	.word	0x08006589
 800657c:	0800659b 	.word	0x0800659b
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065bb 	.word	0x080065bb
      duplex = ETH_FULLDUPLEX_MODE;
 8006588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800658c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800658e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006592:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006594:	2301      	movs	r3, #1
 8006596:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006598:	e017      	b.n	80065ca <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800659a:	2300      	movs	r3, #0
 800659c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800659e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80065a4:	2301      	movs	r3, #1
 80065a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80065a8:	e00f      	b.n	80065ca <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80065aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ae:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80065b0:	2300      	movs	r3, #0
 80065b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80065b4:	2301      	movs	r3, #1
 80065b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80065b8:	e007      	b.n	80065ca <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80065be:	2300      	movs	r3, #0
 80065c0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80065c2:	2301      	movs	r3, #1
 80065c4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80065c6:	e000      	b.n	80065ca <ethernet_link_check_state+0xce>
      break;
 80065c8:	bf00      	nop
    if(linkchanged)
 80065ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d018      	beq.n	8006602 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80065d0:	f107 030c 	add.w	r3, r7, #12
 80065d4:	4619      	mov	r1, r3
 80065d6:	480e      	ldr	r0, [pc, #56]	; (8006610 <ethernet_link_check_state+0x114>)
 80065d8:	f7fc f82c 	bl	8002634 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80065dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80065e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80065e4:	f107 030c 	add.w	r3, r7, #12
 80065e8:	4619      	mov	r1, r3
 80065ea:	4809      	ldr	r0, [pc, #36]	; (8006610 <ethernet_link_check_state+0x114>)
 80065ec:	f7fc f919 	bl	8002822 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80065f0:	4807      	ldr	r0, [pc, #28]	; (8006610 <ethernet_link_check_state+0x114>)
 80065f2:	f7fb fdbb 	bl	800216c <HAL_ETH_Start>
      netif_set_up(netif);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 ff20 	bl	800743c <netif_set_up>
      netif_set_link_up(netif);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 ffbb 	bl	8007578 <netif_set_link_up>
}
 8006602:	bf00      	nop
 8006604:	3780      	adds	r7, #128	; 0x80
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20005040 	.word	0x20005040
 8006610:	20004f58 	.word	0x20004f58

08006614 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af02      	add	r7, sp, #8
 800661a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800661c:	4812      	ldr	r0, [pc, #72]	; (8006668 <HAL_ETH_RxAllocateCallback+0x54>)
 800661e:	f000 fc7f 	bl	8006f20 <memp_malloc_pool>
 8006622:	60f8      	str	r0, [r7, #12]
  if (p)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d014      	beq.n	8006654 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f103 0220 	add.w	r2, r3, #32
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a0d      	ldr	r2, [pc, #52]	; (800666c <HAL_ETH_RxAllocateCallback+0x58>)
 8006638:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006642:	9201      	str	r2, [sp, #4]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2241      	movs	r2, #65	; 0x41
 800664a:	2100      	movs	r1, #0
 800664c:	2000      	movs	r0, #0
 800664e:	f001 f9a1 	bl	8007994 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006652:	e005      	b.n	8006660 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006656:	2201      	movs	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	08016150 	.word	0x08016150
 800666c:	080062ad 	.word	0x080062ad
 8006670:	20004f54 	.word	0x20004f54

08006674 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800667e:	88fb      	ldrh	r3, [r7, #6]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	b21a      	sxth	r2, r3
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	b29b      	uxth	r3, r3
 800668a:	b21b      	sxth	r3, r3
 800668c:	4313      	orrs	r3, r2
 800668e:	b21b      	sxth	r3, r3
 8006690:	b29b      	uxth	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	061a      	lsls	r2, r3, #24
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	0e1b      	lsrs	r3, r3, #24
 80066c2:	4313      	orrs	r3, r2
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80066da:	f000 f8d5 	bl	8006888 <mem_init>
  memp_init();
 80066de:	f000 fbdb 	bl	8006e98 <memp_init>
  pbuf_init();
  netif_init();
 80066e2:	f000 fcd9 	bl	8007098 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80066e6:	f007 f811 	bl	800d70c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80066ea:	f001 fdab 	bl	8008244 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80066ee:	f006 ffc5 	bl	800d67c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <ptr_to_mem+0x20>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	4413      	add	r3, r2
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	2000788c 	.word	0x2000788c

08006720 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <mem_to_ptr+0x20>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	b29b      	uxth	r3, r3
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	2000788c 	.word	0x2000788c

08006744 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800674c:	4b45      	ldr	r3, [pc, #276]	; (8006864 <plug_holes+0x120>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d206      	bcs.n	8006764 <plug_holes+0x20>
 8006756:	4b44      	ldr	r3, [pc, #272]	; (8006868 <plug_holes+0x124>)
 8006758:	f240 12df 	movw	r2, #479	; 0x1df
 800675c:	4943      	ldr	r1, [pc, #268]	; (800686c <plug_holes+0x128>)
 800675e:	4844      	ldr	r0, [pc, #272]	; (8006870 <plug_holes+0x12c>)
 8006760:	f00b ff0c 	bl	801257c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006764:	4b43      	ldr	r3, [pc, #268]	; (8006874 <plug_holes+0x130>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d306      	bcc.n	800677c <plug_holes+0x38>
 800676e:	4b3e      	ldr	r3, [pc, #248]	; (8006868 <plug_holes+0x124>)
 8006770:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006774:	4940      	ldr	r1, [pc, #256]	; (8006878 <plug_holes+0x134>)
 8006776:	483e      	ldr	r0, [pc, #248]	; (8006870 <plug_holes+0x12c>)
 8006778:	f00b ff00 	bl	801257c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	791b      	ldrb	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d006      	beq.n	8006792 <plug_holes+0x4e>
 8006784:	4b38      	ldr	r3, [pc, #224]	; (8006868 <plug_holes+0x124>)
 8006786:	f240 12e1 	movw	r2, #481	; 0x1e1
 800678a:	493c      	ldr	r1, [pc, #240]	; (800687c <plug_holes+0x138>)
 800678c:	4838      	ldr	r0, [pc, #224]	; (8006870 <plug_holes+0x12c>)
 800678e:	f00b fef5 	bl	801257c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800679a:	d906      	bls.n	80067aa <plug_holes+0x66>
 800679c:	4b32      	ldr	r3, [pc, #200]	; (8006868 <plug_holes+0x124>)
 800679e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80067a2:	4937      	ldr	r1, [pc, #220]	; (8006880 <plug_holes+0x13c>)
 80067a4:	4832      	ldr	r0, [pc, #200]	; (8006870 <plug_holes+0x12c>)
 80067a6:	f00b fee9 	bl	801257c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff ffa4 	bl	80066fc <ptr_to_mem>
 80067b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d024      	beq.n	8006808 <plug_holes+0xc4>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	791b      	ldrb	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d120      	bne.n	8006808 <plug_holes+0xc4>
 80067c6:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <plug_holes+0x130>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d01b      	beq.n	8006808 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80067d0:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <plug_holes+0x140>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d102      	bne.n	80067e0 <plug_holes+0x9c>
      lfree = mem;
 80067da:	4a2a      	ldr	r2, [pc, #168]	; (8006884 <plug_holes+0x140>)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	881a      	ldrh	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80067f0:	d00a      	beq.n	8006808 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff80 	bl	80066fc <ptr_to_mem>
 80067fc:	4604      	mov	r4, r0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff ff8e 	bl	8006720 <mem_to_ptr>
 8006804:	4603      	mov	r3, r0
 8006806:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	885b      	ldrh	r3, [r3, #2]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff75 	bl	80066fc <ptr_to_mem>
 8006812:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d01f      	beq.n	800685c <plug_holes+0x118>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	791b      	ldrb	r3, [r3, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11b      	bne.n	800685c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006824:	4b17      	ldr	r3, [pc, #92]	; (8006884 <plug_holes+0x140>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	429a      	cmp	r2, r3
 800682c:	d102      	bne.n	8006834 <plug_holes+0xf0>
      lfree = pmem;
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <plug_holes+0x140>)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006844:	d00a      	beq.n	800685c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff ff56 	bl	80066fc <ptr_to_mem>
 8006850:	4604      	mov	r4, r0
 8006852:	68b8      	ldr	r0, [r7, #8]
 8006854:	f7ff ff64 	bl	8006720 <mem_to_ptr>
 8006858:	4603      	mov	r3, r0
 800685a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	bd90      	pop	{r4, r7, pc}
 8006864:	2000788c 	.word	0x2000788c
 8006868:	0801340c 	.word	0x0801340c
 800686c:	0801343c 	.word	0x0801343c
 8006870:	08013454 	.word	0x08013454
 8006874:	20007890 	.word	0x20007890
 8006878:	0801347c 	.word	0x0801347c
 800687c:	08013498 	.word	0x08013498
 8006880:	080134b4 	.word	0x080134b4
 8006884:	20007894 	.word	0x20007894

08006888 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800688e:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <mem_init+0x68>)
 8006890:	3303      	adds	r3, #3
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	461a      	mov	r2, r3
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <mem_init+0x6c>)
 800689a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800689c:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <mem_init+0x6c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80068a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80068b6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80068ba:	f7ff ff1f 	bl	80066fc <ptr_to_mem>
 80068be:	4603      	mov	r3, r0
 80068c0:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <mem_init+0x70>)
 80068c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <mem_init+0x70>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2201      	movs	r2, #1
 80068ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <mem_init+0x70>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80068d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <mem_init+0x70>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80068de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <mem_init+0x6c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a05      	ldr	r2, [pc, #20]	; (80068fc <mem_init+0x74>)
 80068e6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20005078 	.word	0x20005078
 80068f4:	2000788c 	.word	0x2000788c
 80068f8:	20007890 	.word	0x20007890
 80068fc:	20007894 	.word	0x20007894

08006900 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ff09 	bl	8006720 <mem_to_ptr>
 800690e:	4603      	mov	r3, r0
 8006910:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fef0 	bl	80066fc <ptr_to_mem>
 800691c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff feea 	bl	80066fc <ptr_to_mem>
 8006928:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006932:	d818      	bhi.n	8006966 <mem_link_valid+0x66>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	885b      	ldrh	r3, [r3, #2]
 8006938:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800693c:	d813      	bhi.n	8006966 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006942:	8afa      	ldrh	r2, [r7, #22]
 8006944:	429a      	cmp	r2, r3
 8006946:	d004      	beq.n	8006952 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	8afa      	ldrh	r2, [r7, #22]
 800694e:	429a      	cmp	r2, r3
 8006950:	d109      	bne.n	8006966 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <mem_link_valid+0x74>)
 8006954:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	429a      	cmp	r2, r3
 800695a:	d006      	beq.n	800696a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	885b      	ldrh	r3, [r3, #2]
 8006960:	8afa      	ldrh	r2, [r7, #22]
 8006962:	429a      	cmp	r2, r3
 8006964:	d001      	beq.n	800696a <mem_link_valid+0x6a>
    return 0;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <mem_link_valid+0x6c>
  }
  return 1;
 800696a:	2301      	movs	r3, #1
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20007890 	.word	0x20007890

08006978 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04c      	beq.n	8006a20 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <mem_free+0xb0>)
 8006992:	f240 2273 	movw	r2, #627	; 0x273
 8006996:	4925      	ldr	r1, [pc, #148]	; (8006a2c <mem_free+0xb4>)
 8006998:	4825      	ldr	r0, [pc, #148]	; (8006a30 <mem_free+0xb8>)
 800699a:	f00b fdef 	bl	801257c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800699e:	e040      	b.n	8006a22 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3b08      	subs	r3, #8
 80069a4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <mem_free+0xbc>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d306      	bcc.n	80069be <mem_free+0x46>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f103 020c 	add.w	r2, r3, #12
 80069b6:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <mem_free+0xc0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d907      	bls.n	80069ce <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80069be:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <mem_free+0xb0>)
 80069c0:	f240 227f 	movw	r2, #639	; 0x27f
 80069c4:	491d      	ldr	r1, [pc, #116]	; (8006a3c <mem_free+0xc4>)
 80069c6:	481a      	ldr	r0, [pc, #104]	; (8006a30 <mem_free+0xb8>)
 80069c8:	f00b fdd8 	bl	801257c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069cc:	e029      	b.n	8006a22 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <mem_free+0xb0>)
 80069d8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80069dc:	4918      	ldr	r1, [pc, #96]	; (8006a40 <mem_free+0xc8>)
 80069de:	4814      	ldr	r0, [pc, #80]	; (8006a30 <mem_free+0xb8>)
 80069e0:	f00b fdcc 	bl	801257c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069e4:	e01d      	b.n	8006a22 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff ff8a 	bl	8006900 <mem_link_valid>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80069f2:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <mem_free+0xb0>)
 80069f4:	f240 2295 	movw	r2, #661	; 0x295
 80069f8:	4912      	ldr	r1, [pc, #72]	; (8006a44 <mem_free+0xcc>)
 80069fa:	480d      	ldr	r0, [pc, #52]	; (8006a30 <mem_free+0xb8>)
 80069fc:	f00b fdbe 	bl	801257c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006a00:	e00f      	b.n	8006a22 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <mem_free+0xd0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d202      	bcs.n	8006a18 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006a12:	4a0d      	ldr	r2, [pc, #52]	; (8006a48 <mem_free+0xd0>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fe93 	bl	8006744 <plug_holes>
 8006a1e:	e000      	b.n	8006a22 <mem_free+0xaa>
    return;
 8006a20:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	0801340c 	.word	0x0801340c
 8006a2c:	080134e0 	.word	0x080134e0
 8006a30:	08013454 	.word	0x08013454
 8006a34:	2000788c 	.word	0x2000788c
 8006a38:	20007890 	.word	0x20007890
 8006a3c:	08013504 	.word	0x08013504
 8006a40:	08013520 	.word	0x08013520
 8006a44:	08013548 	.word	0x08013548
 8006a48:	20007894 	.word	0x20007894

08006a4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	3303      	adds	r3, #3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006a64:	8bfb      	ldrh	r3, [r7, #30]
 8006a66:	2b0b      	cmp	r3, #11
 8006a68:	d801      	bhi.n	8006a6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006a6e:	8bfb      	ldrh	r3, [r7, #30]
 8006a70:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a74:	d803      	bhi.n	8006a7e <mem_trim+0x32>
 8006a76:	8bfa      	ldrh	r2, [r7, #30]
 8006a78:	887b      	ldrh	r3, [r7, #2]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d201      	bcs.n	8006a82 <mem_trim+0x36>
    return NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e0cc      	b.n	8006c1c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006a82:	4b68      	ldr	r3, [pc, #416]	; (8006c24 <mem_trim+0x1d8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d304      	bcc.n	8006a96 <mem_trim+0x4a>
 8006a8c:	4b66      	ldr	r3, [pc, #408]	; (8006c28 <mem_trim+0x1dc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d306      	bcc.n	8006aa4 <mem_trim+0x58>
 8006a96:	4b65      	ldr	r3, [pc, #404]	; (8006c2c <mem_trim+0x1e0>)
 8006a98:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006a9c:	4964      	ldr	r1, [pc, #400]	; (8006c30 <mem_trim+0x1e4>)
 8006a9e:	4865      	ldr	r0, [pc, #404]	; (8006c34 <mem_trim+0x1e8>)
 8006aa0:	f00b fd6c 	bl	801257c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006aa4:	4b5f      	ldr	r3, [pc, #380]	; (8006c24 <mem_trim+0x1d8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d304      	bcc.n	8006ab8 <mem_trim+0x6c>
 8006aae:	4b5e      	ldr	r3, [pc, #376]	; (8006c28 <mem_trim+0x1dc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d301      	bcc.n	8006abc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	e0af      	b.n	8006c1c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3b08      	subs	r3, #8
 8006ac0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	f7ff fe2c 	bl	8006720 <mem_to_ptr>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	881a      	ldrh	r2, [r3, #0]
 8006ad0:	8afb      	ldrh	r3, [r7, #22]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b08      	subs	r3, #8
 8006ad8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006ada:	8bfa      	ldrh	r2, [r7, #30]
 8006adc:	8abb      	ldrh	r3, [r7, #20]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d906      	bls.n	8006af0 <mem_trim+0xa4>
 8006ae2:	4b52      	ldr	r3, [pc, #328]	; (8006c2c <mem_trim+0x1e0>)
 8006ae4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006ae8:	4953      	ldr	r1, [pc, #332]	; (8006c38 <mem_trim+0x1ec>)
 8006aea:	4852      	ldr	r0, [pc, #328]	; (8006c34 <mem_trim+0x1e8>)
 8006aec:	f00b fd46 	bl	801257c <iprintf>
  if (newsize > size) {
 8006af0:	8bfa      	ldrh	r2, [r7, #30]
 8006af2:	8abb      	ldrh	r3, [r7, #20]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d901      	bls.n	8006afc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e08f      	b.n	8006c1c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006afc:	8bfa      	ldrh	r2, [r7, #30]
 8006afe:	8abb      	ldrh	r3, [r7, #20]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d101      	bne.n	8006b08 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	e089      	b.n	8006c1c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fdf5 	bl	80066fc <ptr_to_mem>
 8006b12:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	791b      	ldrb	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d13f      	bne.n	8006b9c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006b24:	d106      	bne.n	8006b34 <mem_trim+0xe8>
 8006b26:	4b41      	ldr	r3, [pc, #260]	; (8006c2c <mem_trim+0x1e0>)
 8006b28:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006b2c:	4943      	ldr	r1, [pc, #268]	; (8006c3c <mem_trim+0x1f0>)
 8006b2e:	4841      	ldr	r0, [pc, #260]	; (8006c34 <mem_trim+0x1e8>)
 8006b30:	f00b fd24 	bl	801257c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006b3a:	8afa      	ldrh	r2, [r7, #22]
 8006b3c:	8bfb      	ldrh	r3, [r7, #30]
 8006b3e:	4413      	add	r3, r2
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3308      	adds	r3, #8
 8006b44:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006b46:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <mem_trim+0x1f4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d106      	bne.n	8006b5e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006b50:	89fb      	ldrh	r3, [r7, #14]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fdd2 	bl	80066fc <ptr_to_mem>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	4a39      	ldr	r2, [pc, #228]	; (8006c40 <mem_trim+0x1f4>)
 8006b5c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006b5e:	89fb      	ldrh	r3, [r7, #14]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fdcb 	bl	80066fc <ptr_to_mem>
 8006b66:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	89ba      	ldrh	r2, [r7, #12]
 8006b72:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	8afa      	ldrh	r2, [r7, #22]
 8006b78:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	89fa      	ldrh	r2, [r7, #14]
 8006b7e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006b88:	d047      	beq.n	8006c1a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fdb4 	bl	80066fc <ptr_to_mem>
 8006b94:	4602      	mov	r2, r0
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	8053      	strh	r3, [r2, #2]
 8006b9a:	e03e      	b.n	8006c1a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006b9c:	8bfb      	ldrh	r3, [r7, #30]
 8006b9e:	f103 0214 	add.w	r2, r3, #20
 8006ba2:	8abb      	ldrh	r3, [r7, #20]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d838      	bhi.n	8006c1a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006ba8:	8afa      	ldrh	r2, [r7, #22]
 8006baa:	8bfb      	ldrh	r3, [r7, #30]
 8006bac:	4413      	add	r3, r2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006bbc:	d106      	bne.n	8006bcc <mem_trim+0x180>
 8006bbe:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <mem_trim+0x1e0>)
 8006bc0:	f240 3216 	movw	r2, #790	; 0x316
 8006bc4:	491d      	ldr	r1, [pc, #116]	; (8006c3c <mem_trim+0x1f0>)
 8006bc6:	481b      	ldr	r0, [pc, #108]	; (8006c34 <mem_trim+0x1e8>)
 8006bc8:	f00b fcd8 	bl	801257c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006bcc:	89fb      	ldrh	r3, [r7, #14]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fd94 	bl	80066fc <ptr_to_mem>
 8006bd4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <mem_trim+0x1f4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d202      	bcs.n	8006be6 <mem_trim+0x19a>
      lfree = mem2;
 8006be0:	4a17      	ldr	r2, [pc, #92]	; (8006c40 <mem_trim+0x1f4>)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2200      	movs	r2, #0
 8006bea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	881a      	ldrh	r2, [r3, #0]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	8afa      	ldrh	r2, [r7, #22]
 8006bf8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	89fa      	ldrh	r2, [r7, #14]
 8006bfe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006c08:	d007      	beq.n	8006c1a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fd74 	bl	80066fc <ptr_to_mem>
 8006c14:	4602      	mov	r2, r0
 8006c16:	89fb      	ldrh	r3, [r7, #14]
 8006c18:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006c1a:	687b      	ldr	r3, [r7, #4]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	2000788c 	.word	0x2000788c
 8006c28:	20007890 	.word	0x20007890
 8006c2c:	0801340c 	.word	0x0801340c
 8006c30:	0801357c 	.word	0x0801357c
 8006c34:	08013454 	.word	0x08013454
 8006c38:	08013594 	.word	0x08013594
 8006c3c:	080135b4 	.word	0x080135b4
 8006c40:	20007894 	.word	0x20007894

08006c44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <mem_malloc+0x14>
    return NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e0d9      	b.n	8006e0c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	3303      	adds	r3, #3
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f023 0303 	bic.w	r3, r3, #3
 8006c62:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006c64:	8bbb      	ldrh	r3, [r7, #28]
 8006c66:	2b0b      	cmp	r3, #11
 8006c68:	d801      	bhi.n	8006c6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c6e:	8bbb      	ldrh	r3, [r7, #28]
 8006c70:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006c74:	d803      	bhi.n	8006c7e <mem_malloc+0x3a>
 8006c76:	8bba      	ldrh	r2, [r7, #28]
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d201      	bcs.n	8006c82 <mem_malloc+0x3e>
    return NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e0c4      	b.n	8006e0c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c82:	4b64      	ldr	r3, [pc, #400]	; (8006e14 <mem_malloc+0x1d0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fd4a 	bl	8006720 <mem_to_ptr>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	83fb      	strh	r3, [r7, #30]
 8006c90:	e0b4      	b.n	8006dfc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006c92:	8bfb      	ldrh	r3, [r7, #30]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fd31 	bl	80066fc <ptr_to_mem>
 8006c9a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	791b      	ldrb	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80a4 	bne.w	8006dee <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	8bfb      	ldrh	r3, [r7, #30]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f1a3 0208 	sub.w	r2, r3, #8
 8006cb4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	f0c0 8099 	bcc.w	8006dee <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	8bfb      	ldrh	r3, [r7, #30]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f1a3 0208 	sub.w	r2, r3, #8
 8006cca:	8bbb      	ldrh	r3, [r7, #28]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d333      	bcc.n	8006d3a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006cd2:	8bfa      	ldrh	r2, [r7, #30]
 8006cd4:	8bbb      	ldrh	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3308      	adds	r3, #8
 8006cdc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006cde:	8a7b      	ldrh	r3, [r7, #18]
 8006ce0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006ce4:	d106      	bne.n	8006cf4 <mem_malloc+0xb0>
 8006ce6:	4b4c      	ldr	r3, [pc, #304]	; (8006e18 <mem_malloc+0x1d4>)
 8006ce8:	f240 3287 	movw	r2, #903	; 0x387
 8006cec:	494b      	ldr	r1, [pc, #300]	; (8006e1c <mem_malloc+0x1d8>)
 8006cee:	484c      	ldr	r0, [pc, #304]	; (8006e20 <mem_malloc+0x1dc>)
 8006cf0:	f00b fc44 	bl	801257c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006cf4:	8a7b      	ldrh	r3, [r7, #18]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fd00 	bl	80066fc <ptr_to_mem>
 8006cfc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	881a      	ldrh	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8bfa      	ldrh	r2, [r7, #30]
 8006d10:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	8a7a      	ldrh	r2, [r7, #18]
 8006d16:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006d26:	d00b      	beq.n	8006d40 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fce5 	bl	80066fc <ptr_to_mem>
 8006d32:	4602      	mov	r2, r0
 8006d34:	8a7b      	ldrh	r3, [r7, #18]
 8006d36:	8053      	strh	r3, [r2, #2]
 8006d38:	e002      	b.n	8006d40 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006d40:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <mem_malloc+0x1d0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d127      	bne.n	8006d9a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006d4a:	4b32      	ldr	r3, [pc, #200]	; (8006e14 <mem_malloc+0x1d0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006d50:	e005      	b.n	8006d5e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fcd0 	bl	80066fc <ptr_to_mem>
 8006d5c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	791b      	ldrb	r3, [r3, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <mem_malloc+0x12c>
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <mem_malloc+0x1e0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d1f0      	bne.n	8006d52 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006d70:	4a28      	ldr	r2, [pc, #160]	; (8006e14 <mem_malloc+0x1d0>)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d76:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <mem_malloc+0x1d0>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	4b2a      	ldr	r3, [pc, #168]	; (8006e24 <mem_malloc+0x1e0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d00b      	beq.n	8006d9a <mem_malloc+0x156>
 8006d82:	4b24      	ldr	r3, [pc, #144]	; (8006e14 <mem_malloc+0x1d0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d006      	beq.n	8006d9a <mem_malloc+0x156>
 8006d8c:	4b22      	ldr	r3, [pc, #136]	; (8006e18 <mem_malloc+0x1d4>)
 8006d8e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006d92:	4925      	ldr	r1, [pc, #148]	; (8006e28 <mem_malloc+0x1e4>)
 8006d94:	4822      	ldr	r0, [pc, #136]	; (8006e20 <mem_malloc+0x1dc>)
 8006d96:	f00b fbf1 	bl	801257c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006d9a:	8bba      	ldrh	r2, [r7, #28]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	4413      	add	r3, r2
 8006da0:	3308      	adds	r3, #8
 8006da2:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <mem_malloc+0x1e0>)
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d906      	bls.n	8006db8 <mem_malloc+0x174>
 8006daa:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <mem_malloc+0x1d4>)
 8006dac:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006db0:	491e      	ldr	r1, [pc, #120]	; (8006e2c <mem_malloc+0x1e8>)
 8006db2:	481b      	ldr	r0, [pc, #108]	; (8006e20 <mem_malloc+0x1dc>)
 8006db4:	f00b fbe2 	bl	801257c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <mem_malloc+0x18c>
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <mem_malloc+0x1d4>)
 8006dc4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006dc8:	4919      	ldr	r1, [pc, #100]	; (8006e30 <mem_malloc+0x1ec>)
 8006dca:	4815      	ldr	r0, [pc, #84]	; (8006e20 <mem_malloc+0x1dc>)
 8006dcc:	f00b fbd6 	bl	801257c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <mem_malloc+0x1a4>
 8006dda:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <mem_malloc+0x1d4>)
 8006ddc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006de0:	4914      	ldr	r1, [pc, #80]	; (8006e34 <mem_malloc+0x1f0>)
 8006de2:	480f      	ldr	r0, [pc, #60]	; (8006e20 <mem_malloc+0x1dc>)
 8006de4:	f00b fbca 	bl	801257c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3308      	adds	r3, #8
 8006dec:	e00e      	b.n	8006e0c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006dee:	8bfb      	ldrh	r3, [r7, #30]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fc83 	bl	80066fc <ptr_to_mem>
 8006df6:	4603      	mov	r3, r0
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006dfc:	8bfa      	ldrh	r2, [r7, #30]
 8006dfe:	8bbb      	ldrh	r3, [r7, #28]
 8006e00:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8006e04:	429a      	cmp	r2, r3
 8006e06:	f4ff af44 	bcc.w	8006c92 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20007894 	.word	0x20007894
 8006e18:	0801340c 	.word	0x0801340c
 8006e1c:	080135b4 	.word	0x080135b4
 8006e20:	08013454 	.word	0x08013454
 8006e24:	20007890 	.word	0x20007890
 8006e28:	080135c8 	.word	0x080135c8
 8006e2c:	080135e4 	.word	0x080135e4
 8006e30:	08013614 	.word	0x08013614
 8006e34:	08013644 	.word	0x08013644

08006e38 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e011      	b.n	8006e7e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4413      	add	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	461a      	mov	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	dbe7      	blt.n	8006e5a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	80fb      	strh	r3, [r7, #6]
 8006ea2:	e009      	b.n	8006eb8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <memp_init+0x30>)
 8006ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff ffc3 	bl	8006e38 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	80fb      	strh	r3, [r7, #6]
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d9f2      	bls.n	8006ea4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	080161c8 	.word	0x080161c8

08006ecc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d012      	beq.n	8006f08 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d006      	beq.n	8006f04 <do_memp_malloc_pool+0x38>
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <do_memp_malloc_pool+0x48>)
 8006ef8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006efc:	4906      	ldr	r1, [pc, #24]	; (8006f18 <do_memp_malloc_pool+0x4c>)
 8006efe:	4807      	ldr	r0, [pc, #28]	; (8006f1c <do_memp_malloc_pool+0x50>)
 8006f00:	f00b fb3c 	bl	801257c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	e000      	b.n	8006f0a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	08013668 	.word	0x08013668
 8006f18:	08013698 	.word	0x08013698
 8006f1c:	080136bc 	.word	0x080136bc

08006f20 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <memp_malloc_pool+0x1c>
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <memp_malloc_pool+0x38>)
 8006f30:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006f34:	4909      	ldr	r1, [pc, #36]	; (8006f5c <memp_malloc_pool+0x3c>)
 8006f36:	480a      	ldr	r0, [pc, #40]	; (8006f60 <memp_malloc_pool+0x40>)
 8006f38:	f00b fb20 	bl	801257c <iprintf>
  if (desc == NULL) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <memp_malloc_pool+0x26>
    return NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e003      	b.n	8006f4e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff ffc0 	bl	8006ecc <do_memp_malloc_pool>
 8006f4c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	08013668 	.word	0x08013668
 8006f5c:	080136e4 	.word	0x080136e4
 8006f60:	080136bc 	.word	0x080136bc

08006f64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d908      	bls.n	8006f86 <memp_malloc+0x22>
 8006f74:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <memp_malloc+0x3c>)
 8006f76:	f240 1257 	movw	r2, #343	; 0x157
 8006f7a:	490a      	ldr	r1, [pc, #40]	; (8006fa4 <memp_malloc+0x40>)
 8006f7c:	480a      	ldr	r0, [pc, #40]	; (8006fa8 <memp_malloc+0x44>)
 8006f7e:	f00b fafd 	bl	801257c <iprintf>
 8006f82:	2300      	movs	r3, #0
 8006f84:	e008      	b.n	8006f98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	4a08      	ldr	r2, [pc, #32]	; (8006fac <memp_malloc+0x48>)
 8006f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff ff9c 	bl	8006ecc <do_memp_malloc_pool>
 8006f94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	08013668 	.word	0x08013668
 8006fa4:	080136f8 	.word	0x080136f8
 8006fa8:	080136bc 	.word	0x080136bc
 8006fac:	080161c8 	.word	0x080161c8

08006fb0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <do_memp_free_pool+0x22>
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <do_memp_free_pool+0x40>)
 8006fc6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006fca:	490a      	ldr	r1, [pc, #40]	; (8006ff4 <do_memp_free_pool+0x44>)
 8006fcc:	480a      	ldr	r0, [pc, #40]	; (8006ff8 <do_memp_free_pool+0x48>)
 8006fce:	f00b fad5 	bl	801257c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	08013668 	.word	0x08013668
 8006ff4:	08013718 	.word	0x08013718
 8006ff8:	080136bc 	.word	0x080136bc

08006ffc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <memp_free_pool+0x1e>
 800700c:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <memp_free_pool+0x3c>)
 800700e:	f240 1295 	movw	r2, #405	; 0x195
 8007012:	490a      	ldr	r1, [pc, #40]	; (800703c <memp_free_pool+0x40>)
 8007014:	480a      	ldr	r0, [pc, #40]	; (8007040 <memp_free_pool+0x44>)
 8007016:	f00b fab1 	bl	801257c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <memp_free_pool+0x34>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff ffc1 	bl	8006fb0 <do_memp_free_pool>
 800702e:	e000      	b.n	8007032 <memp_free_pool+0x36>
    return;
 8007030:	bf00      	nop
}
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	08013668 	.word	0x08013668
 800703c:	080136e4 	.word	0x080136e4
 8007040:	080136bc 	.word	0x080136bc

08007044 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	2b08      	cmp	r3, #8
 8007054:	d907      	bls.n	8007066 <memp_free+0x22>
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <memp_free+0x44>)
 8007058:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800705c:	490b      	ldr	r1, [pc, #44]	; (800708c <memp_free+0x48>)
 800705e:	480c      	ldr	r0, [pc, #48]	; (8007090 <memp_free+0x4c>)
 8007060:	f00b fa8c 	bl	801257c <iprintf>
 8007064:	e00c      	b.n	8007080 <memp_free+0x3c>

  if (mem == NULL) {
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <memp_free+0x50>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff ff9a 	bl	8006fb0 <do_memp_free_pool>
 800707c:	e000      	b.n	8007080 <memp_free+0x3c>
    return;
 800707e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	08013668 	.word	0x08013668
 800708c:	08013738 	.word	0x08013738
 8007090:	080136bc 	.word	0x080136bc
 8007094:	080161c8 	.word	0x080161c8

08007098 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d108      	bne.n	80070ce <netif_add+0x26>
 80070bc:	4b5b      	ldr	r3, [pc, #364]	; (800722c <netif_add+0x184>)
 80070be:	f240 1227 	movw	r2, #295	; 0x127
 80070c2:	495b      	ldr	r1, [pc, #364]	; (8007230 <netif_add+0x188>)
 80070c4:	485b      	ldr	r0, [pc, #364]	; (8007234 <netif_add+0x18c>)
 80070c6:	f00b fa59 	bl	801257c <iprintf>
 80070ca:	2300      	movs	r3, #0
 80070cc:	e0a9      	b.n	8007222 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d108      	bne.n	80070e6 <netif_add+0x3e>
 80070d4:	4b55      	ldr	r3, [pc, #340]	; (800722c <netif_add+0x184>)
 80070d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80070da:	4957      	ldr	r1, [pc, #348]	; (8007238 <netif_add+0x190>)
 80070dc:	4855      	ldr	r0, [pc, #340]	; (8007234 <netif_add+0x18c>)
 80070de:	f00b fa4d 	bl	801257c <iprintf>
 80070e2:	2300      	movs	r3, #0
 80070e4:	e09d      	b.n	8007222 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80070ec:	4b53      	ldr	r3, [pc, #332]	; (800723c <netif_add+0x194>)
 80070ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80070f6:	4b51      	ldr	r3, [pc, #324]	; (800723c <netif_add+0x194>)
 80070f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007100:	4b4e      	ldr	r3, [pc, #312]	; (800723c <netif_add+0x194>)
 8007102:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4a49      	ldr	r2, [pc, #292]	; (8007240 <netif_add+0x198>)
 800711a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3324      	adds	r3, #36	; 0x24
 800712e:	2204      	movs	r2, #4
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f00b fa87 	bl	8012646 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a3a      	ldr	r2, [r7, #32]
 8007142:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007144:	4b3f      	ldr	r3, [pc, #252]	; (8007244 <netif_add+0x19c>)
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007152:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f914 	bl	8007388 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	4798      	blx	r3
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <netif_add+0xc8>
    return NULL;
 800716c:	2300      	movs	r3, #0
 800716e:	e058      	b.n	8007222 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007176:	2bff      	cmp	r3, #255	; 0xff
 8007178:	d103      	bne.n	8007182 <netif_add+0xda>
        netif->num = 0;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007186:	4b30      	ldr	r3, [pc, #192]	; (8007248 <netif_add+0x1a0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e02b      	b.n	80071e6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	429a      	cmp	r2, r3
 8007194:	d106      	bne.n	80071a4 <netif_add+0xfc>
 8007196:	4b25      	ldr	r3, [pc, #148]	; (800722c <netif_add+0x184>)
 8007198:	f240 128b 	movw	r2, #395	; 0x18b
 800719c:	492b      	ldr	r1, [pc, #172]	; (800724c <netif_add+0x1a4>)
 800719e:	4825      	ldr	r0, [pc, #148]	; (8007234 <netif_add+0x18c>)
 80071a0:	f00b f9ec 	bl	801257c <iprintf>
        num_netifs++;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3301      	adds	r3, #1
 80071a8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2bff      	cmp	r3, #255	; 0xff
 80071ae:	dd06      	ble.n	80071be <netif_add+0x116>
 80071b0:	4b1e      	ldr	r3, [pc, #120]	; (800722c <netif_add+0x184>)
 80071b2:	f240 128d 	movw	r2, #397	; 0x18d
 80071b6:	4926      	ldr	r1, [pc, #152]	; (8007250 <netif_add+0x1a8>)
 80071b8:	481e      	ldr	r0, [pc, #120]	; (8007234 <netif_add+0x18c>)
 80071ba:	f00b f9df 	bl	801257c <iprintf>
        if (netif2->num == netif->num) {
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d108      	bne.n	80071e0 <netif_add+0x138>
          netif->num++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071d4:	3301      	adds	r3, #1
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80071de:	e005      	b.n	80071ec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1d0      	bne.n	800718e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1be      	bne.n	8007170 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071f8:	2bfe      	cmp	r3, #254	; 0xfe
 80071fa:	d103      	bne.n	8007204 <netif_add+0x15c>
    netif_num = 0;
 80071fc:	4b11      	ldr	r3, [pc, #68]	; (8007244 <netif_add+0x19c>)
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	e006      	b.n	8007212 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800720a:	3301      	adds	r3, #1
 800720c:	b2da      	uxtb	r2, r3
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <netif_add+0x19c>)
 8007210:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <netif_add+0x1a0>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800721a:	4a0b      	ldr	r2, [pc, #44]	; (8007248 <netif_add+0x1a0>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007220:	68fb      	ldr	r3, [r7, #12]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	08013754 	.word	0x08013754
 8007230:	080137e8 	.word	0x080137e8
 8007234:	080137a4 	.word	0x080137a4
 8007238:	08013804 	.word	0x08013804
 800723c:	0801623c 	.word	0x0801623c
 8007240:	0800766b 	.word	0x0800766b
 8007244:	2000a7ac 	.word	0x2000a7ac
 8007248:	2000a7a4 	.word	0x2000a7a4
 800724c:	08013828 	.word	0x08013828
 8007250:	0801383c 	.word	0x0801383c

08007254 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f002 fb37 	bl	80098d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f006 fedb 	bl	800e024 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <netif_do_set_ipaddr+0x20>
 800728a:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <netif_do_set_ipaddr+0x88>)
 800728c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007290:	491c      	ldr	r1, [pc, #112]	; (8007304 <netif_do_set_ipaddr+0x8c>)
 8007292:	481d      	ldr	r0, [pc, #116]	; (8007308 <netif_do_set_ipaddr+0x90>)
 8007294:	f00b f972 	bl	801257c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <netif_do_set_ipaddr+0x34>
 800729e:	4b18      	ldr	r3, [pc, #96]	; (8007300 <netif_do_set_ipaddr+0x88>)
 80072a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80072a4:	4917      	ldr	r1, [pc, #92]	; (8007304 <netif_do_set_ipaddr+0x8c>)
 80072a6:	4818      	ldr	r0, [pc, #96]	; (8007308 <netif_do_set_ipaddr+0x90>)
 80072a8:	f00b f968 	bl	801257c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3304      	adds	r3, #4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d01c      	beq.n	80072f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3304      	adds	r3, #4
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80072ca:	f107 0314 	add.w	r3, r7, #20
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ffbf 	bl	8007254 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <netif_do_set_ipaddr+0x6a>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	e000      	b.n	80072e4 <netif_do_set_ipaddr+0x6c>
 80072e2:	2300      	movs	r3, #0
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80072e8:	2101      	movs	r1, #1
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f8d2 	bl	8007494 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	08013754 	.word	0x08013754
 8007304:	0801386c 	.word	0x0801386c
 8007308:	080137a4 	.word	0x080137a4

0800730c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3308      	adds	r3, #8
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d00a      	beq.n	800733c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <netif_do_set_netmask+0x26>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	e000      	b.n	8007334 <netif_do_set_netmask+0x28>
 8007332:	2300      	movs	r3, #0
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	330c      	adds	r3, #12
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d00a      	beq.n	800737a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <netif_do_set_gw+0x26>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	e000      	b.n	8007372 <netif_do_set_gw+0x28>
 8007370:	2300      	movs	r3, #0
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80073a4:	4b1c      	ldr	r3, [pc, #112]	; (8007418 <netif_set_addr+0x90>)
 80073a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80073ae:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <netif_set_addr+0x90>)
 80073b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80073b8:	4b17      	ldr	r3, [pc, #92]	; (8007418 <netif_set_addr+0x90>)
 80073ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <netif_set_addr+0x42>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <netif_set_addr+0x46>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <netif_set_addr+0x48>
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d006      	beq.n	80073e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80073d8:	f107 0310 	add.w	r3, r7, #16
 80073dc:	461a      	mov	r2, r3
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff ff49 	bl	8007278 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7ff ff8e 	bl	800730c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff ffa8 	bl	800734a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007400:	f107 0310 	add.w	r3, r7, #16
 8007404:	461a      	mov	r2, r3
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f7ff ff35 	bl	8007278 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800740e:	bf00      	nop
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	0801623c 	.word	0x0801623c

0800741c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007424:	4a04      	ldr	r2, [pc, #16]	; (8007438 <netif_set_default+0x1c>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	2000a7a8 	.word	0x2000a7a8

0800743c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d107      	bne.n	800745a <netif_set_up+0x1e>
 800744a:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <netif_set_up+0x4c>)
 800744c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007450:	490e      	ldr	r1, [pc, #56]	; (800748c <netif_set_up+0x50>)
 8007452:	480f      	ldr	r0, [pc, #60]	; (8007490 <netif_set_up+0x54>)
 8007454:	f00b f892 	bl	801257c <iprintf>
 8007458:	e013      	b.n	8007482 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10c      	bne.n	8007482 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	b2da      	uxtb	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800747a:	2103      	movs	r1, #3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f809 	bl	8007494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	08013754 	.word	0x08013754
 800748c:	080138dc 	.word	0x080138dc
 8007490:	080137a4 	.word	0x080137a4

08007494 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <netif_issue_reports+0x20>
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <netif_issue_reports+0x74>)
 80074a8:	f240 326d 	movw	r2, #877	; 0x36d
 80074ac:	4917      	ldr	r1, [pc, #92]	; (800750c <netif_issue_reports+0x78>)
 80074ae:	4818      	ldr	r0, [pc, #96]	; (8007510 <netif_issue_reports+0x7c>)
 80074b0:	f00b f864 	bl	801257c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01e      	beq.n	8007500 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80074c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d013      	beq.n	8007502 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3304      	adds	r3, #4
 80074de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00e      	beq.n	8007502 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f009 fb95 	bl	8010c28 <etharp_request>
 80074fe:	e000      	b.n	8007502 <netif_issue_reports+0x6e>
    return;
 8007500:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	08013754 	.word	0x08013754
 800750c:	080138f8 	.word	0x080138f8
 8007510:	080137a4 	.word	0x080137a4

08007514 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d107      	bne.n	8007532 <netif_set_down+0x1e>
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <netif_set_down+0x58>)
 8007524:	f240 329b 	movw	r2, #923	; 0x39b
 8007528:	4911      	ldr	r1, [pc, #68]	; (8007570 <netif_set_down+0x5c>)
 800752a:	4812      	ldr	r0, [pc, #72]	; (8007574 <netif_set_down+0x60>)
 800752c:	f00b f826 	bl	801257c <iprintf>
 8007530:	e019      	b.n	8007566 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d012      	beq.n	8007566 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f008 ff1b 	bl	801039c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	08013754 	.word	0x08013754
 8007570:	0801391c 	.word	0x0801391c
 8007574:	080137a4 	.word	0x080137a4

08007578 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <netif_set_link_up+0x1e>
 8007586:	4b15      	ldr	r3, [pc, #84]	; (80075dc <netif_set_link_up+0x64>)
 8007588:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800758c:	4914      	ldr	r1, [pc, #80]	; (80075e0 <netif_set_link_up+0x68>)
 800758e:	4815      	ldr	r0, [pc, #84]	; (80075e4 <netif_set_link_up+0x6c>)
 8007590:	f00a fff4 	bl	801257c <iprintf>
 8007594:	e01e      	b.n	80075d4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d117      	bne.n	80075d4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075aa:	f043 0304 	orr.w	r3, r3, #4
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f007 f960 	bl	800e87c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80075bc:	2103      	movs	r1, #3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff ff68 	bl	8007494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <netif_set_link_up+0x5c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	08013754 	.word	0x08013754
 80075e0:	0801393c 	.word	0x0801393c
 80075e4:	080137a4 	.word	0x080137a4

080075e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <netif_set_link_down+0x1e>
 80075f6:	4b11      	ldr	r3, [pc, #68]	; (800763c <netif_set_link_down+0x54>)
 80075f8:	f240 4206 	movw	r2, #1030	; 0x406
 80075fc:	4910      	ldr	r1, [pc, #64]	; (8007640 <netif_set_link_down+0x58>)
 80075fe:	4811      	ldr	r0, [pc, #68]	; (8007644 <netif_set_link_down+0x5c>)
 8007600:	f00a ffbc 	bl	801257c <iprintf>
 8007604:	e017      	b.n	8007636 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800761a:	f023 0304 	bic.w	r3, r3, #4
 800761e:	b2da      	uxtb	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <netif_set_link_down+0x4e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	08013754 	.word	0x08013754
 8007640:	08013960 	.word	0x08013960
 8007644:	080137a4 	.word	0x080137a4

08007648 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	61da      	str	r2, [r3, #28]
  }
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007676:	f06f 030b 	mvn.w	r3, #11
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d013      	beq.n	80076c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007698:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <netif_get_by_index+0x48>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e00c      	b.n	80076ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076a6:	3301      	adds	r3, #1
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	79fa      	ldrb	r2, [r7, #7]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d101      	bne.n	80076b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	e006      	b.n	80076c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ef      	bne.n	80076a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	2000a7a4 	.word	0x2000a7a4

080076d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80076d8:	4b03      	ldr	r3, [pc, #12]	; (80076e8 <pbuf_pool_is_empty+0x14>)
 80076da:	2201      	movs	r2, #1
 80076dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80076de:	bf00      	nop
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	2000a7ad 	.word	0x2000a7ad

080076ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4611      	mov	r1, r2
 80076f8:	461a      	mov	r2, r3
 80076fa:	460b      	mov	r3, r1
 80076fc:	80fb      	strh	r3, [r7, #6]
 80076fe:	4613      	mov	r3, r2
 8007700:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	88fa      	ldrh	r2, [r7, #6]
 8007712:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	88ba      	ldrh	r2, [r7, #4]
 8007718:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800771a:	8b3b      	ldrh	r3, [r7, #24]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	7f3a      	ldrb	r2, [r7, #28]
 8007726:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	73da      	strb	r2, [r3, #15]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08c      	sub	sp, #48	; 0x30
 8007744:	af02      	add	r7, sp, #8
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
 800774a:	460b      	mov	r3, r1
 800774c:	80bb      	strh	r3, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007756:	887b      	ldrh	r3, [r7, #2]
 8007758:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800775c:	d07f      	beq.n	800785e <pbuf_alloc+0x11e>
 800775e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007762:	f300 80c8 	bgt.w	80078f6 <pbuf_alloc+0x1b6>
 8007766:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800776a:	d010      	beq.n	800778e <pbuf_alloc+0x4e>
 800776c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007770:	f300 80c1 	bgt.w	80078f6 <pbuf_alloc+0x1b6>
 8007774:	2b01      	cmp	r3, #1
 8007776:	d002      	beq.n	800777e <pbuf_alloc+0x3e>
 8007778:	2b41      	cmp	r3, #65	; 0x41
 800777a:	f040 80bc 	bne.w	80078f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	88bb      	ldrh	r3, [r7, #4]
 8007782:	4619      	mov	r1, r3
 8007784:	2000      	movs	r0, #0
 8007786:	f000 f8d1 	bl	800792c <pbuf_alloc_reference>
 800778a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800778c:	e0bd      	b.n	800790a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007796:	88bb      	ldrh	r3, [r7, #4]
 8007798:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800779a:	2008      	movs	r0, #8
 800779c:	f7ff fbe2 	bl	8006f64 <memp_malloc>
 80077a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80077a8:	f7ff ff94 	bl	80076d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80077b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077b4:	f000 faa8 	bl	8007d08 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e0a7      	b.n	800790c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80077bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077be:	3303      	adds	r3, #3
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	8b7a      	ldrh	r2, [r7, #26]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	bf28      	it	cs
 80077d4:	4613      	movcs	r3, r2
 80077d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80077d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077da:	3310      	adds	r3, #16
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4413      	add	r3, r2
 80077e0:	3303      	adds	r3, #3
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	4618      	mov	r0, r3
 80077e8:	89f9      	ldrh	r1, [r7, #14]
 80077ea:	8b7a      	ldrh	r2, [r7, #26]
 80077ec:	2300      	movs	r3, #0
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	887b      	ldrh	r3, [r7, #2]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	460b      	mov	r3, r1
 80077f6:	4601      	mov	r1, r0
 80077f8:	6938      	ldr	r0, [r7, #16]
 80077fa:	f7ff ff77 	bl	80076ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <pbuf_alloc+0xd8>
 800780a:	4b42      	ldr	r3, [pc, #264]	; (8007914 <pbuf_alloc+0x1d4>)
 800780c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007810:	4941      	ldr	r1, [pc, #260]	; (8007918 <pbuf_alloc+0x1d8>)
 8007812:	4842      	ldr	r0, [pc, #264]	; (800791c <pbuf_alloc+0x1dc>)
 8007814:	f00a feb2 	bl	801257c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800781a:	3303      	adds	r3, #3
 800781c:	f023 0303 	bic.w	r3, r3, #3
 8007820:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007824:	d106      	bne.n	8007834 <pbuf_alloc+0xf4>
 8007826:	4b3b      	ldr	r3, [pc, #236]	; (8007914 <pbuf_alloc+0x1d4>)
 8007828:	f44f 7281 	mov.w	r2, #258	; 0x102
 800782c:	493c      	ldr	r1, [pc, #240]	; (8007920 <pbuf_alloc+0x1e0>)
 800782e:	483b      	ldr	r0, [pc, #236]	; (800791c <pbuf_alloc+0x1dc>)
 8007830:	f00a fea4 	bl	801257c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
 800783e:	e002      	b.n	8007846 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800784a:	8b7a      	ldrh	r2, [r7, #26]
 800784c:	89fb      	ldrh	r3, [r7, #14]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007856:	8b7b      	ldrh	r3, [r7, #26]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d19e      	bne.n	800779a <pbuf_alloc+0x5a>
      break;
 800785c:	e055      	b.n	800790a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800785e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007860:	3303      	adds	r3, #3
 8007862:	b29b      	uxth	r3, r3
 8007864:	f023 0303 	bic.w	r3, r3, #3
 8007868:	b29a      	uxth	r2, r3
 800786a:	88bb      	ldrh	r3, [r7, #4]
 800786c:	3303      	adds	r3, #3
 800786e:	b29b      	uxth	r3, r3
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	b29b      	uxth	r3, r3
 8007876:	4413      	add	r3, r2
 8007878:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800787a:	8b3b      	ldrh	r3, [r7, #24]
 800787c:	3310      	adds	r3, #16
 800787e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007880:	8b3a      	ldrh	r2, [r7, #24]
 8007882:	88bb      	ldrh	r3, [r7, #4]
 8007884:	3303      	adds	r3, #3
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	429a      	cmp	r2, r3
 800788c:	d306      	bcc.n	800789c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800788e:	8afa      	ldrh	r2, [r7, #22]
 8007890:	88bb      	ldrh	r3, [r7, #4]
 8007892:	3303      	adds	r3, #3
 8007894:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007898:	429a      	cmp	r2, r3
 800789a:	d201      	bcs.n	80078a0 <pbuf_alloc+0x160>
        return NULL;
 800789c:	2300      	movs	r3, #0
 800789e:	e035      	b.n	800790c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80078a0:	8afb      	ldrh	r3, [r7, #22]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff f9ce 	bl	8006c44 <mem_malloc>
 80078a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <pbuf_alloc+0x174>
        return NULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e02b      	b.n	800790c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80078b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078b6:	3310      	adds	r3, #16
 80078b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ba:	4413      	add	r3, r2
 80078bc:	3303      	adds	r3, #3
 80078be:	f023 0303 	bic.w	r3, r3, #3
 80078c2:	4618      	mov	r0, r3
 80078c4:	88b9      	ldrh	r1, [r7, #4]
 80078c6:	88ba      	ldrh	r2, [r7, #4]
 80078c8:	2300      	movs	r3, #0
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	887b      	ldrh	r3, [r7, #2]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	460b      	mov	r3, r1
 80078d2:	4601      	mov	r1, r0
 80078d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d6:	f7ff ff09 	bl	80076ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d010      	beq.n	8007908 <pbuf_alloc+0x1c8>
 80078e6:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <pbuf_alloc+0x1d4>)
 80078e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80078ec:	490d      	ldr	r1, [pc, #52]	; (8007924 <pbuf_alloc+0x1e4>)
 80078ee:	480b      	ldr	r0, [pc, #44]	; (800791c <pbuf_alloc+0x1dc>)
 80078f0:	f00a fe44 	bl	801257c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80078f4:	e008      	b.n	8007908 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <pbuf_alloc+0x1d4>)
 80078f8:	f240 1227 	movw	r2, #295	; 0x127
 80078fc:	490a      	ldr	r1, [pc, #40]	; (8007928 <pbuf_alloc+0x1e8>)
 80078fe:	4807      	ldr	r0, [pc, #28]	; (800791c <pbuf_alloc+0x1dc>)
 8007900:	f00a fe3c 	bl	801257c <iprintf>
      return NULL;
 8007904:	2300      	movs	r3, #0
 8007906:	e001      	b.n	800790c <pbuf_alloc+0x1cc>
      break;
 8007908:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800790c:	4618      	mov	r0, r3
 800790e:	3728      	adds	r7, #40	; 0x28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	08013984 	.word	0x08013984
 8007918:	080139b4 	.word	0x080139b4
 800791c:	080139e4 	.word	0x080139e4
 8007920:	08013a0c 	.word	0x08013a0c
 8007924:	08013a40 	.word	0x08013a40
 8007928:	08013a6c 	.word	0x08013a6c

0800792c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	807b      	strh	r3, [r7, #2]
 8007938:	4613      	mov	r3, r2
 800793a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800793c:	883b      	ldrh	r3, [r7, #0]
 800793e:	2b41      	cmp	r3, #65	; 0x41
 8007940:	d009      	beq.n	8007956 <pbuf_alloc_reference+0x2a>
 8007942:	883b      	ldrh	r3, [r7, #0]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d006      	beq.n	8007956 <pbuf_alloc_reference+0x2a>
 8007948:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <pbuf_alloc_reference+0x5c>)
 800794a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800794e:	490f      	ldr	r1, [pc, #60]	; (800798c <pbuf_alloc_reference+0x60>)
 8007950:	480f      	ldr	r0, [pc, #60]	; (8007990 <pbuf_alloc_reference+0x64>)
 8007952:	f00a fe13 	bl	801257c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007956:	2007      	movs	r0, #7
 8007958:	f7ff fb04 	bl	8006f64 <memp_malloc>
 800795c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	e00b      	b.n	8007980 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007968:	8879      	ldrh	r1, [r7, #2]
 800796a:	887a      	ldrh	r2, [r7, #2]
 800796c:	2300      	movs	r3, #0
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	883b      	ldrh	r3, [r7, #0]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	460b      	mov	r3, r1
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff feb7 	bl	80076ec <pbuf_init_alloced_pbuf>
  return p;
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08013984 	.word	0x08013984
 800798c:	08013a88 	.word	0x08013a88
 8007990:	080139e4 	.word	0x080139e4

08007994 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af02      	add	r7, sp, #8
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	460b      	mov	r3, r1
 80079a2:	81bb      	strh	r3, [r7, #12]
 80079a4:	4613      	mov	r3, r2
 80079a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80079ac:	8a7b      	ldrh	r3, [r7, #18]
 80079ae:	3303      	adds	r3, #3
 80079b0:	f023 0203 	bic.w	r2, r3, #3
 80079b4:	89bb      	ldrh	r3, [r7, #12]
 80079b6:	441a      	add	r2, r3
 80079b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d901      	bls.n	80079c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	e018      	b.n	80079f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80079c8:	8a7b      	ldrh	r3, [r7, #18]
 80079ca:	3303      	adds	r3, #3
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	6a3a      	ldr	r2, [r7, #32]
 80079d2:	4413      	add	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e001      	b.n	80079dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	89b9      	ldrh	r1, [r7, #12]
 80079e0:	89ba      	ldrh	r2, [r7, #12]
 80079e2:	2302      	movs	r3, #2
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	897b      	ldrh	r3, [r7, #10]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	460b      	mov	r3, r1
 80079ec:	6979      	ldr	r1, [r7, #20]
 80079ee:	f7ff fe7d 	bl	80076ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80079f2:	687b      	ldr	r3, [r7, #4]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <pbuf_realloc+0x20>
 8007a0e:	4b3a      	ldr	r3, [pc, #232]	; (8007af8 <pbuf_realloc+0xfc>)
 8007a10:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007a14:	4939      	ldr	r1, [pc, #228]	; (8007afc <pbuf_realloc+0x100>)
 8007a16:	483a      	ldr	r0, [pc, #232]	; (8007b00 <pbuf_realloc+0x104>)
 8007a18:	f00a fdb0 	bl	801257c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	891b      	ldrh	r3, [r3, #8]
 8007a20:	887a      	ldrh	r2, [r7, #2]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d263      	bcs.n	8007aee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	891a      	ldrh	r2, [r3, #8]
 8007a2a:	887b      	ldrh	r3, [r7, #2]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007a30:	887b      	ldrh	r3, [r7, #2]
 8007a32:	817b      	strh	r3, [r7, #10]
  q = p;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007a38:	e018      	b.n	8007a6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	895b      	ldrh	r3, [r3, #10]
 8007a3e:	897a      	ldrh	r2, [r7, #10]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	891a      	ldrh	r2, [r3, #8]
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <pbuf_realloc+0x70>
 8007a5e:	4b26      	ldr	r3, [pc, #152]	; (8007af8 <pbuf_realloc+0xfc>)
 8007a60:	f240 12af 	movw	r2, #431	; 0x1af
 8007a64:	4927      	ldr	r1, [pc, #156]	; (8007b04 <pbuf_realloc+0x108>)
 8007a66:	4826      	ldr	r0, [pc, #152]	; (8007b00 <pbuf_realloc+0x104>)
 8007a68:	f00a fd88 	bl	801257c <iprintf>
  while (rem_len > q->len) {
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	895b      	ldrh	r3, [r3, #10]
 8007a70:	897a      	ldrh	r2, [r7, #10]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8e1      	bhi.n	8007a3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	7b1b      	ldrb	r3, [r3, #12]
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d121      	bne.n	8007ac6 <pbuf_realloc+0xca>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	895b      	ldrh	r3, [r3, #10]
 8007a86:	897a      	ldrh	r2, [r7, #10]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d01c      	beq.n	8007ac6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	7b5b      	ldrb	r3, [r3, #13]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d116      	bne.n	8007ac6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	897b      	ldrh	r3, [r7, #10]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f7fe ffce 	bl	8006a4c <mem_trim>
 8007ab0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d106      	bne.n	8007ac6 <pbuf_realloc+0xca>
 8007ab8:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <pbuf_realloc+0xfc>)
 8007aba:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007abe:	4912      	ldr	r1, [pc, #72]	; (8007b08 <pbuf_realloc+0x10c>)
 8007ac0:	480f      	ldr	r0, [pc, #60]	; (8007b00 <pbuf_realloc+0x104>)
 8007ac2:	f00a fd5b 	bl	801257c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	897a      	ldrh	r2, [r7, #10]
 8007aca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	895a      	ldrh	r2, [r3, #10]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d004      	beq.n	8007ae6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 f911 	bl	8007d08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e000      	b.n	8007af0 <pbuf_realloc+0xf4>
    return;
 8007aee:	bf00      	nop

}
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08013984 	.word	0x08013984
 8007afc:	08013a9c 	.word	0x08013a9c
 8007b00:	080139e4 	.word	0x080139e4
 8007b04:	08013ab4 	.word	0x08013ab4
 8007b08:	08013acc 	.word	0x08013acc

08007b0c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <pbuf_add_header_impl+0x22>
 8007b20:	4b2b      	ldr	r3, [pc, #172]	; (8007bd0 <pbuf_add_header_impl+0xc4>)
 8007b22:	f240 12df 	movw	r2, #479	; 0x1df
 8007b26:	492b      	ldr	r1, [pc, #172]	; (8007bd4 <pbuf_add_header_impl+0xc8>)
 8007b28:	482b      	ldr	r0, [pc, #172]	; (8007bd8 <pbuf_add_header_impl+0xcc>)
 8007b2a:	f00a fd27 	bl	801257c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <pbuf_add_header_impl+0x30>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3a:	d301      	bcc.n	8007b40 <pbuf_add_header_impl+0x34>
    return 1;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e043      	b.n	8007bc8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <pbuf_add_header_impl+0x3e>
    return 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e03e      	b.n	8007bc8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	891a      	ldrh	r2, [r3, #8]
 8007b52:	8a7b      	ldrh	r3, [r7, #18]
 8007b54:	4413      	add	r3, r2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8a7a      	ldrh	r2, [r7, #18]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d901      	bls.n	8007b62 <pbuf_add_header_impl+0x56>
    return 1;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e032      	b.n	8007bc8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	7b1b      	ldrb	r3, [r3, #12]
 8007b66:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007b68:	8a3b      	ldrh	r3, [r7, #16]
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	425b      	negs	r3, r3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3310      	adds	r3, #16
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d20d      	bcs.n	8007ba4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e01d      	b.n	8007bc8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d006      	beq.n	8007ba0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	425b      	negs	r3, r3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	e001      	b.n	8007ba4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e011      	b.n	8007bc8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	895a      	ldrh	r2, [r3, #10]
 8007bae:	8a7b      	ldrh	r3, [r7, #18]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	891a      	ldrh	r2, [r3, #8]
 8007bbc:	8a7b      	ldrh	r3, [r7, #18]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	811a      	strh	r2, [r3, #8]


  return 0;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	08013984 	.word	0x08013984
 8007bd4:	08013ae8 	.word	0x08013ae8
 8007bd8:	080139e4 	.word	0x080139e4

08007bdc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007be6:	2200      	movs	r2, #0
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff ff8e 	bl	8007b0c <pbuf_add_header_impl>
 8007bf0:	4603      	mov	r3, r0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <pbuf_remove_header+0x1e>
 8007c0c:	4b20      	ldr	r3, [pc, #128]	; (8007c90 <pbuf_remove_header+0x94>)
 8007c0e:	f240 224b 	movw	r2, #587	; 0x24b
 8007c12:	4920      	ldr	r1, [pc, #128]	; (8007c94 <pbuf_remove_header+0x98>)
 8007c14:	4820      	ldr	r0, [pc, #128]	; (8007c98 <pbuf_remove_header+0x9c>)
 8007c16:	f00a fcb1 	bl	801257c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <pbuf_remove_header+0x2c>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c26:	d301      	bcc.n	8007c2c <pbuf_remove_header+0x30>
    return 1;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e02c      	b.n	8007c86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <pbuf_remove_header+0x3a>
    return 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e027      	b.n	8007c86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	895b      	ldrh	r3, [r3, #10]
 8007c3e:	89fa      	ldrh	r2, [r7, #14]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d908      	bls.n	8007c56 <pbuf_remove_header+0x5a>
 8007c44:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <pbuf_remove_header+0x94>)
 8007c46:	f240 2255 	movw	r2, #597	; 0x255
 8007c4a:	4914      	ldr	r1, [pc, #80]	; (8007c9c <pbuf_remove_header+0xa0>)
 8007c4c:	4812      	ldr	r0, [pc, #72]	; (8007c98 <pbuf_remove_header+0x9c>)
 8007c4e:	f00a fc95 	bl	801257c <iprintf>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e017      	b.n	8007c86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	441a      	add	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	895a      	ldrh	r2, [r3, #10]
 8007c6c:	89fb      	ldrh	r3, [r7, #14]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	891a      	ldrh	r2, [r3, #8]
 8007c7a:	89fb      	ldrh	r3, [r7, #14]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	08013984 	.word	0x08013984
 8007c94:	08013ae8 	.word	0x08013ae8
 8007c98:	080139e4 	.word	0x080139e4
 8007c9c:	08013af4 	.word	0x08013af4

08007ca0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
 8007cac:	4613      	mov	r3, r2
 8007cae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007cb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da08      	bge.n	8007cca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007cb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff ff9b 	bl	8007bfc <pbuf_remove_header>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	e007      	b.n	8007cda <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007cca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cce:	787a      	ldrb	r2, [r7, #1]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ff1a 	bl	8007b0c <pbuf_add_header_impl>
 8007cd8:	4603      	mov	r3, r0
  }
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff ffd2 	bl	8007ca0 <pbuf_header_impl>
 8007cfc:	4603      	mov	r3, r0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <pbuf_free+0x22>
 8007d1c:	4b38      	ldr	r3, [pc, #224]	; (8007e00 <pbuf_free+0xf8>)
 8007d1e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007d22:	4938      	ldr	r1, [pc, #224]	; (8007e04 <pbuf_free+0xfc>)
 8007d24:	4838      	ldr	r0, [pc, #224]	; (8007e08 <pbuf_free+0x100>)
 8007d26:	f00a fc29 	bl	801257c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e063      	b.n	8007df6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007d32:	e05c      	b.n	8007dee <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7b9b      	ldrb	r3, [r3, #14]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <pbuf_free+0x42>
 8007d3c:	4b30      	ldr	r3, [pc, #192]	; (8007e00 <pbuf_free+0xf8>)
 8007d3e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007d42:	4932      	ldr	r1, [pc, #200]	; (8007e0c <pbuf_free+0x104>)
 8007d44:	4830      	ldr	r0, [pc, #192]	; (8007e08 <pbuf_free+0x100>)
 8007d46:	f00a fc19 	bl	801257c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	7b9b      	ldrb	r3, [r3, #14]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	739a      	strb	r2, [r3, #14]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7b9b      	ldrb	r3, [r3, #14]
 8007d5a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d143      	bne.n	8007dea <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7b1b      	ldrb	r3, [r3, #12]
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	7b5b      	ldrb	r3, [r3, #13]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <pbuf_free+0x90>
 8007d8a:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <pbuf_free+0xf8>)
 8007d8c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007d90:	491f      	ldr	r1, [pc, #124]	; (8007e10 <pbuf_free+0x108>)
 8007d92:	481d      	ldr	r0, [pc, #116]	; (8007e08 <pbuf_free+0x100>)
 8007d94:	f00a fbf2 	bl	801257c <iprintf>
        pc->custom_free_function(p);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
 8007da0:	e01d      	b.n	8007dde <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d104      	bne.n	8007db2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007da8:	6879      	ldr	r1, [r7, #4]
 8007daa:	2008      	movs	r0, #8
 8007dac:	f7ff f94a 	bl	8007044 <memp_free>
 8007db0:	e015      	b.n	8007dde <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d104      	bne.n	8007dc2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	2007      	movs	r0, #7
 8007dbc:	f7ff f942 	bl	8007044 <memp_free>
 8007dc0:	e00d      	b.n	8007dde <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <pbuf_free+0xc8>
          mem_free(p);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7fe fdd5 	bl	8006978 <mem_free>
 8007dce:	e006      	b.n	8007dde <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <pbuf_free+0xf8>)
 8007dd2:	f240 320f 	movw	r2, #783	; 0x30f
 8007dd6:	490f      	ldr	r1, [pc, #60]	; (8007e14 <pbuf_free+0x10c>)
 8007dd8:	480b      	ldr	r0, [pc, #44]	; (8007e08 <pbuf_free+0x100>)
 8007dda:	f00a fbcf 	bl	801257c <iprintf>
        }
      }
      count++;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	3301      	adds	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	e001      	b.n	8007dee <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d19f      	bne.n	8007d34 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	08013984 	.word	0x08013984
 8007e04:	08013ae8 	.word	0x08013ae8
 8007e08:	080139e4 	.word	0x080139e4
 8007e0c:	08013b14 	.word	0x08013b14
 8007e10:	08013b2c 	.word	0x08013b2c
 8007e14:	08013b50 	.word	0x08013b50

08007e18 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007e24:	e005      	b.n	8007e32 <pbuf_clen+0x1a>
    ++len;
 8007e26:	89fb      	ldrh	r3, [r7, #14]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f6      	bne.n	8007e26 <pbuf_clen+0xe>
  }
  return len;
 8007e38:	89fb      	ldrh	r3, [r7, #14]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d010      	beq.n	8007e78 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	7b9b      	ldrb	r3, [r3, #14]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7b9b      	ldrb	r3, [r3, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <pbuf_ref+0x30>
 8007e6a:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <pbuf_ref+0x38>)
 8007e6c:	f240 3242 	movw	r2, #834	; 0x342
 8007e70:	4904      	ldr	r1, [pc, #16]	; (8007e84 <pbuf_ref+0x3c>)
 8007e72:	4805      	ldr	r0, [pc, #20]	; (8007e88 <pbuf_ref+0x40>)
 8007e74:	f00a fb82 	bl	801257c <iprintf>
  }
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	08013984 	.word	0x08013984
 8007e84:	08013b64 	.word	0x08013b64
 8007e88:	080139e4 	.word	0x080139e4

08007e8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <pbuf_cat+0x16>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <pbuf_cat+0x26>
 8007ea2:	4b20      	ldr	r3, [pc, #128]	; (8007f24 <pbuf_cat+0x98>)
 8007ea4:	f240 3259 	movw	r2, #857	; 0x359
 8007ea8:	491f      	ldr	r1, [pc, #124]	; (8007f28 <pbuf_cat+0x9c>)
 8007eaa:	4820      	ldr	r0, [pc, #128]	; (8007f2c <pbuf_cat+0xa0>)
 8007eac:	f00a fb66 	bl	801257c <iprintf>
 8007eb0:	e034      	b.n	8007f1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	e00a      	b.n	8007ece <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	891a      	ldrh	r2, [r3, #8]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	891b      	ldrh	r3, [r3, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1f0      	bne.n	8007eb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	891a      	ldrh	r2, [r3, #8]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	895b      	ldrh	r3, [r3, #10]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d006      	beq.n	8007ef0 <pbuf_cat+0x64>
 8007ee2:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <pbuf_cat+0x98>)
 8007ee4:	f240 3262 	movw	r2, #866	; 0x362
 8007ee8:	4911      	ldr	r1, [pc, #68]	; (8007f30 <pbuf_cat+0xa4>)
 8007eea:	4810      	ldr	r0, [pc, #64]	; (8007f2c <pbuf_cat+0xa0>)
 8007eec:	f00a fb46 	bl	801257c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d006      	beq.n	8007f06 <pbuf_cat+0x7a>
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <pbuf_cat+0x98>)
 8007efa:	f240 3263 	movw	r2, #867	; 0x363
 8007efe:	490d      	ldr	r1, [pc, #52]	; (8007f34 <pbuf_cat+0xa8>)
 8007f00:	480a      	ldr	r0, [pc, #40]	; (8007f2c <pbuf_cat+0xa0>)
 8007f02:	f00a fb3b 	bl	801257c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	891a      	ldrh	r2, [r3, #8]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	891b      	ldrh	r3, [r3, #8]
 8007f0e:	4413      	add	r3, r2
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	08013984 	.word	0x08013984
 8007f28:	08013b78 	.word	0x08013b78
 8007f2c:	080139e4 	.word	0x080139e4
 8007f30:	08013bb0 	.word	0x08013bb0
 8007f34:	08013be0 	.word	0x08013be0

08007f38 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff ffa1 	bl	8007e8c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007f4a:	6838      	ldr	r0, [r7, #0]
 8007f4c:	f7ff ff7c 	bl	8007e48 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	2300      	movs	r3, #0
 8007f68:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <pbuf_copy+0x2a>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <pbuf_copy+0x2a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	891a      	ldrh	r2, [r3, #8]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	891b      	ldrh	r3, [r3, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d209      	bcs.n	8007f96 <pbuf_copy+0x3e>
 8007f82:	4b57      	ldr	r3, [pc, #348]	; (80080e0 <pbuf_copy+0x188>)
 8007f84:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007f88:	4956      	ldr	r1, [pc, #344]	; (80080e4 <pbuf_copy+0x18c>)
 8007f8a:	4857      	ldr	r0, [pc, #348]	; (80080e8 <pbuf_copy+0x190>)
 8007f8c:	f00a faf6 	bl	801257c <iprintf>
 8007f90:	f06f 030f 	mvn.w	r3, #15
 8007f94:	e09f      	b.n	80080d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	895b      	ldrh	r3, [r3, #10]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	895b      	ldrh	r3, [r3, #10]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	1acb      	subs	r3, r1, r3
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d306      	bcc.n	8007fbc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	895b      	ldrh	r3, [r3, #10]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	e005      	b.n	8007fc8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	895b      	ldrh	r3, [r3, #10]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	18d0      	adds	r0, r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f00a fba9 	bl	8012732 <memcpy>
    offset_to += len;
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	895b      	ldrh	r3, [r3, #10]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d906      	bls.n	800800a <pbuf_copy+0xb2>
 8007ffc:	4b38      	ldr	r3, [pc, #224]	; (80080e0 <pbuf_copy+0x188>)
 8007ffe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008002:	493a      	ldr	r1, [pc, #232]	; (80080ec <pbuf_copy+0x194>)
 8008004:	4838      	ldr	r0, [pc, #224]	; (80080e8 <pbuf_copy+0x190>)
 8008006:	f00a fab9 	bl	801257c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	895b      	ldrh	r3, [r3, #10]
 800800e:	461a      	mov	r2, r3
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	4293      	cmp	r3, r2
 8008014:	d906      	bls.n	8008024 <pbuf_copy+0xcc>
 8008016:	4b32      	ldr	r3, [pc, #200]	; (80080e0 <pbuf_copy+0x188>)
 8008018:	f240 32da 	movw	r2, #986	; 0x3da
 800801c:	4934      	ldr	r1, [pc, #208]	; (80080f0 <pbuf_copy+0x198>)
 800801e:	4832      	ldr	r0, [pc, #200]	; (80080e8 <pbuf_copy+0x190>)
 8008020:	f00a faac 	bl	801257c <iprintf>
    if (offset_from >= p_from->len) {
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	895b      	ldrh	r3, [r3, #10]
 8008028:	461a      	mov	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	4293      	cmp	r3, r2
 800802e:	d304      	bcc.n	800803a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	895b      	ldrh	r3, [r3, #10]
 800803e:	461a      	mov	r2, r3
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	4293      	cmp	r3, r2
 8008044:	d114      	bne.n	8008070 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10c      	bne.n	8008070 <pbuf_copy+0x118>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d009      	beq.n	8008070 <pbuf_copy+0x118>
 800805c:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <pbuf_copy+0x188>)
 800805e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008062:	4924      	ldr	r1, [pc, #144]	; (80080f4 <pbuf_copy+0x19c>)
 8008064:	4820      	ldr	r0, [pc, #128]	; (80080e8 <pbuf_copy+0x190>)
 8008066:	f00a fa89 	bl	801257c <iprintf>
 800806a:	f06f 030f 	mvn.w	r3, #15
 800806e:	e032      	b.n	80080d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d013      	beq.n	800809e <pbuf_copy+0x146>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	895a      	ldrh	r2, [r3, #10]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	891b      	ldrh	r3, [r3, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	d10d      	bne.n	800809e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <pbuf_copy+0x146>
 800808a:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <pbuf_copy+0x188>)
 800808c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008090:	4919      	ldr	r1, [pc, #100]	; (80080f8 <pbuf_copy+0x1a0>)
 8008092:	4815      	ldr	r0, [pc, #84]	; (80080e8 <pbuf_copy+0x190>)
 8008094:	f00a fa72 	bl	801257c <iprintf>
 8008098:	f06f 0305 	mvn.w	r3, #5
 800809c:	e01b      	b.n	80080d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d013      	beq.n	80080cc <pbuf_copy+0x174>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	895a      	ldrh	r2, [r3, #10]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	891b      	ldrh	r3, [r3, #8]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d10d      	bne.n	80080cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d009      	beq.n	80080cc <pbuf_copy+0x174>
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <pbuf_copy+0x188>)
 80080ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80080be:	490e      	ldr	r1, [pc, #56]	; (80080f8 <pbuf_copy+0x1a0>)
 80080c0:	4809      	ldr	r0, [pc, #36]	; (80080e8 <pbuf_copy+0x190>)
 80080c2:	f00a fa5b 	bl	801257c <iprintf>
 80080c6:	f06f 0305 	mvn.w	r3, #5
 80080ca:	e004      	b.n	80080d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f47f af61 	bne.w	8007f96 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	08013984 	.word	0x08013984
 80080e4:	08013c2c 	.word	0x08013c2c
 80080e8:	080139e4 	.word	0x080139e4
 80080ec:	08013c5c 	.word	0x08013c5c
 80080f0:	08013c74 	.word	0x08013c74
 80080f4:	08013c90 	.word	0x08013c90
 80080f8:	08013ca0 	.word	0x08013ca0

080080fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	460b      	mov	r3, r1
 800810c:	80fb      	strh	r3, [r7, #6]
 800810e:	4613      	mov	r3, r2
 8008110:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <pbuf_copy_partial+0x36>
 8008120:	4b2b      	ldr	r3, [pc, #172]	; (80081d0 <pbuf_copy_partial+0xd4>)
 8008122:	f240 420a 	movw	r2, #1034	; 0x40a
 8008126:	492b      	ldr	r1, [pc, #172]	; (80081d4 <pbuf_copy_partial+0xd8>)
 8008128:	482b      	ldr	r0, [pc, #172]	; (80081d8 <pbuf_copy_partial+0xdc>)
 800812a:	f00a fa27 	bl	801257c <iprintf>
 800812e:	2300      	movs	r3, #0
 8008130:	e04a      	b.n	80081c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <pbuf_copy_partial+0x4e>
 8008138:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <pbuf_copy_partial+0xd4>)
 800813a:	f240 420b 	movw	r2, #1035	; 0x40b
 800813e:	4927      	ldr	r1, [pc, #156]	; (80081dc <pbuf_copy_partial+0xe0>)
 8008140:	4825      	ldr	r0, [pc, #148]	; (80081d8 <pbuf_copy_partial+0xdc>)
 8008142:	f00a fa1b 	bl	801257c <iprintf>
 8008146:	2300      	movs	r3, #0
 8008148:	e03e      	b.n	80081c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	61fb      	str	r3, [r7, #28]
 800814e:	e034      	b.n	80081ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008150:	88bb      	ldrh	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <pbuf_copy_partial+0x70>
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	895b      	ldrh	r3, [r3, #10]
 800815a:	88ba      	ldrh	r2, [r7, #4]
 800815c:	429a      	cmp	r2, r3
 800815e:	d305      	bcc.n	800816c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	895b      	ldrh	r3, [r3, #10]
 8008164:	88ba      	ldrh	r2, [r7, #4]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	80bb      	strh	r3, [r7, #4]
 800816a:	e023      	b.n	80081b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	895a      	ldrh	r2, [r3, #10]
 8008170:	88bb      	ldrh	r3, [r7, #4]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008176:	8b3a      	ldrh	r2, [r7, #24]
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	429a      	cmp	r2, r3
 800817c:	d901      	bls.n	8008182 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008182:	8b7b      	ldrh	r3, [r7, #26]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	18d0      	adds	r0, r2, r3
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	88bb      	ldrh	r3, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	8b3a      	ldrh	r2, [r7, #24]
 8008192:	4619      	mov	r1, r3
 8008194:	f00a facd 	bl	8012732 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008198:	8afa      	ldrh	r2, [r7, #22]
 800819a:	8b3b      	ldrh	r3, [r7, #24]
 800819c:	4413      	add	r3, r2
 800819e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80081a0:	8b7a      	ldrh	r2, [r7, #26]
 80081a2:	8b3b      	ldrh	r3, [r7, #24]
 80081a4:	4413      	add	r3, r2
 80081a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	8b3b      	ldrh	r3, [r7, #24]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <pbuf_copy_partial+0xca>
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1c4      	bne.n	8008150 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80081c6:	8afb      	ldrh	r3, [r7, #22]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	08013984 	.word	0x08013984
 80081d4:	08013ccc 	.word	0x08013ccc
 80081d8:	080139e4 	.word	0x080139e4
 80081dc:	08013cec 	.word	0x08013cec

080081e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	603a      	str	r2, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
 80081ec:	460b      	mov	r3, r1
 80081ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	8919      	ldrh	r1, [r3, #8]
 80081f4:	88ba      	ldrh	r2, [r7, #4]
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff faa1 	bl	8007740 <pbuf_alloc>
 80081fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <pbuf_clone+0x2a>
    return NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	e011      	b.n	800822e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fea3 	bl	8007f58 <pbuf_copy>
 8008212:	4603      	mov	r3, r0
 8008214:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008216:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <pbuf_clone+0x4c>
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <pbuf_clone+0x58>)
 8008220:	f240 5224 	movw	r2, #1316	; 0x524
 8008224:	4905      	ldr	r1, [pc, #20]	; (800823c <pbuf_clone+0x5c>)
 8008226:	4806      	ldr	r0, [pc, #24]	; (8008240 <pbuf_clone+0x60>)
 8008228:	f00a f9a8 	bl	801257c <iprintf>
  return q;
 800822c:	68fb      	ldr	r3, [r7, #12]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	08013984 	.word	0x08013984
 800823c:	08013df8 	.word	0x08013df8
 8008240:	080139e4 	.word	0x080139e4

08008244 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008248:	f00a f898 	bl	801237c <rand>
 800824c:	4603      	mov	r3, r0
 800824e:	b29b      	uxth	r3, r3
 8008250:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008254:	b29b      	uxth	r3, r3
 8008256:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800825a:	b29a      	uxth	r2, r3
 800825c:	4b01      	ldr	r3, [pc, #4]	; (8008264 <tcp_init+0x20>)
 800825e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008260:	bf00      	nop
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000020 	.word	0x20000020

08008268 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7d1b      	ldrb	r3, [r3, #20]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d105      	bne.n	8008284 <tcp_free+0x1c>
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <tcp_free+0x2c>)
 800827a:	22d4      	movs	r2, #212	; 0xd4
 800827c:	4906      	ldr	r1, [pc, #24]	; (8008298 <tcp_free+0x30>)
 800827e:	4807      	ldr	r0, [pc, #28]	; (800829c <tcp_free+0x34>)
 8008280:	f00a f97c 	bl	801257c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	2001      	movs	r0, #1
 8008288:	f7fe fedc 	bl	8007044 <memp_free>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	08013e84 	.word	0x08013e84
 8008298:	08013eb4 	.word	0x08013eb4
 800829c:	08013ec8 	.word	0x08013ec8

080082a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7d1b      	ldrb	r3, [r3, #20]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d105      	bne.n	80082bc <tcp_free_listen+0x1c>
 80082b0:	4b06      	ldr	r3, [pc, #24]	; (80082cc <tcp_free_listen+0x2c>)
 80082b2:	22df      	movs	r2, #223	; 0xdf
 80082b4:	4906      	ldr	r1, [pc, #24]	; (80082d0 <tcp_free_listen+0x30>)
 80082b6:	4807      	ldr	r0, [pc, #28]	; (80082d4 <tcp_free_listen+0x34>)
 80082b8:	f00a f960 	bl	801257c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	2002      	movs	r0, #2
 80082c0:	f7fe fec0 	bl	8007044 <memp_free>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	08013e84 	.word	0x08013e84
 80082d0:	08013ef0 	.word	0x08013ef0
 80082d4:	08013ec8 	.word	0x08013ec8

080082d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80082dc:	f000 fea2 	bl	8009024 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <tcp_tmr+0x28>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <tcp_tmr+0x28>)
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	4b04      	ldr	r3, [pc, #16]	; (8008300 <tcp_tmr+0x28>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80082f8:	f000 fb54 	bl	80089a4 <tcp_slowtmr>
  }
}
 80082fc:	bf00      	nop
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	2000a7c5 	.word	0x2000a7c5

08008304 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <tcp_remove_listener+0x1c>
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <tcp_remove_listener+0x48>)
 8008316:	22ff      	movs	r2, #255	; 0xff
 8008318:	490d      	ldr	r1, [pc, #52]	; (8008350 <tcp_remove_listener+0x4c>)
 800831a:	480e      	ldr	r0, [pc, #56]	; (8008354 <tcp_remove_listener+0x50>)
 800831c:	f00a f92e 	bl	801257c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e00a      	b.n	800833c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d102      	bne.n	8008336 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f1      	bne.n	8008326 <tcp_remove_listener+0x22>
    }
  }
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	08013e84 	.word	0x08013e84
 8008350:	08013f0c 	.word	0x08013f0c
 8008354:	08013ec8 	.word	0x08013ec8

08008358 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <tcp_listen_closed+0x1c>
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <tcp_listen_closed+0x60>)
 8008368:	f240 1211 	movw	r2, #273	; 0x111
 800836c:	4913      	ldr	r1, [pc, #76]	; (80083bc <tcp_listen_closed+0x64>)
 800836e:	4814      	ldr	r0, [pc, #80]	; (80083c0 <tcp_listen_closed+0x68>)
 8008370:	f00a f904 	bl	801257c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7d1b      	ldrb	r3, [r3, #20]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d006      	beq.n	800838a <tcp_listen_closed+0x32>
 800837c:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <tcp_listen_closed+0x60>)
 800837e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008382:	4910      	ldr	r1, [pc, #64]	; (80083c4 <tcp_listen_closed+0x6c>)
 8008384:	480e      	ldr	r0, [pc, #56]	; (80083c0 <tcp_listen_closed+0x68>)
 8008386:	f00a f8f9 	bl	801257c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800838a:	2301      	movs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	e00b      	b.n	80083a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008390:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <tcp_listen_closed+0x70>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff ffb1 	bl	8008304 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d9f0      	bls.n	8008390 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	08013e84 	.word	0x08013e84
 80083bc:	08013f34 	.word	0x08013f34
 80083c0:	08013ec8 	.word	0x08013ec8
 80083c4:	08013f40 	.word	0x08013f40
 80083c8:	08016204 	.word	0x08016204

080083cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80083cc:	b5b0      	push	{r4, r5, r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af04      	add	r7, sp, #16
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <tcp_close_shutdown+0x20>
 80083de:	4b63      	ldr	r3, [pc, #396]	; (800856c <tcp_close_shutdown+0x1a0>)
 80083e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80083e4:	4962      	ldr	r1, [pc, #392]	; (8008570 <tcp_close_shutdown+0x1a4>)
 80083e6:	4863      	ldr	r0, [pc, #396]	; (8008574 <tcp_close_shutdown+0x1a8>)
 80083e8:	f00a f8c8 	bl	801257c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d066      	beq.n	80084c0 <tcp_close_shutdown+0xf4>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7d1b      	ldrb	r3, [r3, #20]
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d003      	beq.n	8008402 <tcp_close_shutdown+0x36>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7d1b      	ldrb	r3, [r3, #20]
 80083fe:	2b07      	cmp	r3, #7
 8008400:	d15e      	bne.n	80084c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <tcp_close_shutdown+0x48>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800840e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008412:	d055      	beq.n	80084c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	8b5b      	ldrh	r3, [r3, #26]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <tcp_close_shutdown+0x62>
 8008420:	4b52      	ldr	r3, [pc, #328]	; (800856c <tcp_close_shutdown+0x1a0>)
 8008422:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008426:	4954      	ldr	r1, [pc, #336]	; (8008578 <tcp_close_shutdown+0x1ac>)
 8008428:	4852      	ldr	r0, [pc, #328]	; (8008574 <tcp_close_shutdown+0x1a8>)
 800842a:	f00a f8a7 	bl	801257c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008436:	687d      	ldr	r5, [r7, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	8ad2      	ldrh	r2, [r2, #22]
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	8b09      	ldrh	r1, [r1, #24]
 8008444:	9102      	str	r1, [sp, #8]
 8008446:	9201      	str	r2, [sp, #4]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	462b      	mov	r3, r5
 800844c:	4622      	mov	r2, r4
 800844e:	4601      	mov	r1, r0
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f004 fe91 	bl	800d178 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 f8c6 	bl	80095e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800845c:	4b47      	ldr	r3, [pc, #284]	; (800857c <tcp_close_shutdown+0x1b0>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d105      	bne.n	8008472 <tcp_close_shutdown+0xa6>
 8008466:	4b45      	ldr	r3, [pc, #276]	; (800857c <tcp_close_shutdown+0x1b0>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a43      	ldr	r2, [pc, #268]	; (800857c <tcp_close_shutdown+0x1b0>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e013      	b.n	800849a <tcp_close_shutdown+0xce>
 8008472:	4b42      	ldr	r3, [pc, #264]	; (800857c <tcp_close_shutdown+0x1b0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e00c      	b.n	8008494 <tcp_close_shutdown+0xc8>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d104      	bne.n	800848e <tcp_close_shutdown+0xc2>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e005      	b.n	800849a <tcp_close_shutdown+0xce>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1ef      	bne.n	800847a <tcp_close_shutdown+0xae>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	60da      	str	r2, [r3, #12]
 80084a0:	4b37      	ldr	r3, [pc, #220]	; (8008580 <tcp_close_shutdown+0x1b4>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80084a6:	4b37      	ldr	r3, [pc, #220]	; (8008584 <tcp_close_shutdown+0x1b8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d102      	bne.n	80084b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80084b0:	f003 fd5e 	bl	800bf70 <tcp_trigger_input_pcb_close>
 80084b4:	e002      	b.n	80084bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fed6 	bl	8008268 <tcp_free>
      }
      return ERR_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	e050      	b.n	8008562 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7d1b      	ldrb	r3, [r3, #20]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d03b      	beq.n	8008540 <tcp_close_shutdown+0x174>
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	dc44      	bgt.n	8008556 <tcp_close_shutdown+0x18a>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <tcp_close_shutdown+0x10a>
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d02a      	beq.n	800852a <tcp_close_shutdown+0x15e>
 80084d4:	e03f      	b.n	8008556 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8adb      	ldrh	r3, [r3, #22]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d021      	beq.n	8008522 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80084de:	4b2a      	ldr	r3, [pc, #168]	; (8008588 <tcp_close_shutdown+0x1bc>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d105      	bne.n	80084f4 <tcp_close_shutdown+0x128>
 80084e8:	4b27      	ldr	r3, [pc, #156]	; (8008588 <tcp_close_shutdown+0x1bc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	4a26      	ldr	r2, [pc, #152]	; (8008588 <tcp_close_shutdown+0x1bc>)
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e013      	b.n	800851c <tcp_close_shutdown+0x150>
 80084f4:	4b24      	ldr	r3, [pc, #144]	; (8008588 <tcp_close_shutdown+0x1bc>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	e00c      	b.n	8008516 <tcp_close_shutdown+0x14a>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d104      	bne.n	8008510 <tcp_close_shutdown+0x144>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	60da      	str	r2, [r3, #12]
 800850e:	e005      	b.n	800851c <tcp_close_shutdown+0x150>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	60bb      	str	r3, [r7, #8]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1ef      	bne.n	80084fc <tcp_close_shutdown+0x130>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fea0 	bl	8008268 <tcp_free>
      break;
 8008528:	e01a      	b.n	8008560 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff ff14 	bl	8008358 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	4816      	ldr	r0, [pc, #88]	; (800858c <tcp_close_shutdown+0x1c0>)
 8008534:	f001 f8a8 	bl	8009688 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff feb1 	bl	80082a0 <tcp_free_listen>
      break;
 800853e:	e00f      	b.n	8008560 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	480e      	ldr	r0, [pc, #56]	; (800857c <tcp_close_shutdown+0x1b0>)
 8008544:	f001 f8a0 	bl	8009688 <tcp_pcb_remove>
 8008548:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <tcp_close_shutdown+0x1b4>)
 800854a:	2201      	movs	r2, #1
 800854c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fe8a 	bl	8008268 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008554:	e004      	b.n	8008560 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f81a 	bl	8008590 <tcp_close_shutdown_fin>
 800855c:	4603      	mov	r3, r0
 800855e:	e000      	b.n	8008562 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bdb0      	pop	{r4, r5, r7, pc}
 800856a:	bf00      	nop
 800856c:	08013e84 	.word	0x08013e84
 8008570:	08013f58 	.word	0x08013f58
 8008574:	08013ec8 	.word	0x08013ec8
 8008578:	08013f78 	.word	0x08013f78
 800857c:	2000a7bc 	.word	0x2000a7bc
 8008580:	2000a7c4 	.word	0x2000a7c4
 8008584:	2000a7fc 	.word	0x2000a7fc
 8008588:	2000a7b4 	.word	0x2000a7b4
 800858c:	2000a7b8 	.word	0x2000a7b8

08008590 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <tcp_close_shutdown_fin+0x1c>
 800859e:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <tcp_close_shutdown_fin+0xc8>)
 80085a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80085a4:	492d      	ldr	r1, [pc, #180]	; (800865c <tcp_close_shutdown_fin+0xcc>)
 80085a6:	482e      	ldr	r0, [pc, #184]	; (8008660 <tcp_close_shutdown_fin+0xd0>)
 80085a8:	f009 ffe8 	bl	801257c <iprintf>

  switch (pcb->state) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	7d1b      	ldrb	r3, [r3, #20]
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	d020      	beq.n	80085f6 <tcp_close_shutdown_fin+0x66>
 80085b4:	2b07      	cmp	r3, #7
 80085b6:	dc2b      	bgt.n	8008610 <tcp_close_shutdown_fin+0x80>
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d002      	beq.n	80085c2 <tcp_close_shutdown_fin+0x32>
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d00d      	beq.n	80085dc <tcp_close_shutdown_fin+0x4c>
 80085c0:	e026      	b.n	8008610 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f003 fee6 	bl	800c394 <tcp_send_fin>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d11f      	bne.n	8008614 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2205      	movs	r2, #5
 80085d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085da:	e01b      	b.n	8008614 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f003 fed9 	bl	800c394 <tcp_send_fin>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d114      	bne.n	8008618 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2205      	movs	r2, #5
 80085f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085f4:	e010      	b.n	8008618 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f003 fecc 	bl	800c394 <tcp_send_fin>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2209      	movs	r2, #9
 800860c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800860e:	e005      	b.n	800861c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	e01c      	b.n	800864e <tcp_close_shutdown_fin+0xbe>
      break;
 8008614:	bf00      	nop
 8008616:	e002      	b.n	800861e <tcp_close_shutdown_fin+0x8e>
      break;
 8008618:	bf00      	nop
 800861a:	e000      	b.n	800861e <tcp_close_shutdown_fin+0x8e>
      break;
 800861c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800861e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d103      	bne.n	800862e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f003 fff2 	bl	800c610 <tcp_output>
 800862c:	e00d      	b.n	800864a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800862e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008636:	d108      	bne.n	800864a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	8b5b      	ldrh	r3, [r3, #26]
 800863c:	f043 0308 	orr.w	r3, r3, #8
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	e001      	b.n	800864e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800864a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	08013e84 	.word	0x08013e84
 800865c:	08013f34 	.word	0x08013f34
 8008660:	08013ec8 	.word	0x08013ec8

08008664 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d109      	bne.n	8008686 <tcp_close+0x22>
 8008672:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <tcp_close+0x4c>)
 8008674:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008678:	490e      	ldr	r1, [pc, #56]	; (80086b4 <tcp_close+0x50>)
 800867a:	480f      	ldr	r0, [pc, #60]	; (80086b8 <tcp_close+0x54>)
 800867c:	f009 ff7e 	bl	801257c <iprintf>
 8008680:	f06f 030f 	mvn.w	r3, #15
 8008684:	e00f      	b.n	80086a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7d1b      	ldrb	r3, [r3, #20]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d006      	beq.n	800869c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8b5b      	ldrh	r3, [r3, #26]
 8008692:	f043 0310 	orr.w	r3, r3, #16
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800869c:	2101      	movs	r1, #1
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fe94 	bl	80083cc <tcp_close_shutdown>
 80086a4:	4603      	mov	r3, r0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	08013e84 	.word	0x08013e84
 80086b4:	08013f94 	.word	0x08013f94
 80086b8:	08013ec8 	.word	0x08013ec8

080086bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08e      	sub	sp, #56	; 0x38
 80086c0:	af04      	add	r7, sp, #16
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d107      	bne.n	80086dc <tcp_abandon+0x20>
 80086cc:	4b52      	ldr	r3, [pc, #328]	; (8008818 <tcp_abandon+0x15c>)
 80086ce:	f240 223d 	movw	r2, #573	; 0x23d
 80086d2:	4952      	ldr	r1, [pc, #328]	; (800881c <tcp_abandon+0x160>)
 80086d4:	4852      	ldr	r0, [pc, #328]	; (8008820 <tcp_abandon+0x164>)
 80086d6:	f009 ff51 	bl	801257c <iprintf>
 80086da:	e099      	b.n	8008810 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	7d1b      	ldrb	r3, [r3, #20]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d106      	bne.n	80086f2 <tcp_abandon+0x36>
 80086e4:	4b4c      	ldr	r3, [pc, #304]	; (8008818 <tcp_abandon+0x15c>)
 80086e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80086ea:	494e      	ldr	r1, [pc, #312]	; (8008824 <tcp_abandon+0x168>)
 80086ec:	484c      	ldr	r0, [pc, #304]	; (8008820 <tcp_abandon+0x164>)
 80086ee:	f009 ff45 	bl	801257c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	7d1b      	ldrb	r3, [r3, #20]
 80086f6:	2b0a      	cmp	r3, #10
 80086f8:	d107      	bne.n	800870a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	484a      	ldr	r0, [pc, #296]	; (8008828 <tcp_abandon+0x16c>)
 80086fe:	f000 ffc3 	bl	8009688 <tcp_pcb_remove>
    tcp_free(pcb);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff fdb0 	bl	8008268 <tcp_free>
 8008708:	e082      	b.n	8008810 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008716:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008724:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7d1b      	ldrb	r3, [r3, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d126      	bne.n	8008782 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	8adb      	ldrh	r3, [r3, #22]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d02e      	beq.n	800879a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800873c:	4b3b      	ldr	r3, [pc, #236]	; (800882c <tcp_abandon+0x170>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d105      	bne.n	8008752 <tcp_abandon+0x96>
 8008746:	4b39      	ldr	r3, [pc, #228]	; (800882c <tcp_abandon+0x170>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	4a37      	ldr	r2, [pc, #220]	; (800882c <tcp_abandon+0x170>)
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	e013      	b.n	800877a <tcp_abandon+0xbe>
 8008752:	4b36      	ldr	r3, [pc, #216]	; (800882c <tcp_abandon+0x170>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e00c      	b.n	8008774 <tcp_abandon+0xb8>
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d104      	bne.n	800876e <tcp_abandon+0xb2>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	60da      	str	r2, [r3, #12]
 800876c:	e005      	b.n	800877a <tcp_abandon+0xbe>
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1ef      	bne.n	800875a <tcp_abandon+0x9e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	60da      	str	r2, [r3, #12]
 8008780:	e00b      	b.n	800879a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8adb      	ldrh	r3, [r3, #22]
 800878a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	4828      	ldr	r0, [pc, #160]	; (8008830 <tcp_abandon+0x174>)
 8008790:	f000 ff7a 	bl	8009688 <tcp_pcb_remove>
 8008794:	4b27      	ldr	r3, [pc, #156]	; (8008834 <tcp_abandon+0x178>)
 8008796:	2201      	movs	r2, #1
 8008798:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fd1c 	bl	80091e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fd13 	bl	80091e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d004      	beq.n	80087d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fd0a 	bl	80091e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00e      	beq.n	80087f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3304      	adds	r3, #4
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	8b12      	ldrh	r2, [r2, #24]
 80087e0:	9202      	str	r2, [sp, #8]
 80087e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80087e4:	9201      	str	r2, [sp, #4]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	460b      	mov	r3, r1
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	69b9      	ldr	r1, [r7, #24]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f004 fcc2 	bl	800d178 <tcp_rst>
    }
    last_state = pcb->state;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	7d1b      	ldrb	r3, [r3, #20]
 80087f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fd34 	bl	8008268 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d004      	beq.n	8008810 <tcp_abandon+0x154>
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f06f 010c 	mvn.w	r1, #12
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	4798      	blx	r3
  }
}
 8008810:	3728      	adds	r7, #40	; 0x28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	08013e84 	.word	0x08013e84
 800881c:	08013fc8 	.word	0x08013fc8
 8008820:	08013ec8 	.word	0x08013ec8
 8008824:	08013fe4 	.word	0x08013fe4
 8008828:	2000a7c0 	.word	0x2000a7c0
 800882c:	2000a7b4 	.word	0x2000a7b4
 8008830:	2000a7bc 	.word	0x2000a7bc
 8008834:	2000a7c4 	.word	0x2000a7c4

08008838 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008840:	2101      	movs	r1, #1
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ff3a 	bl	80086bc <tcp_abandon>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d106      	bne.n	800886c <tcp_update_rcv_ann_wnd+0x1c>
 800885e:	4b25      	ldr	r3, [pc, #148]	; (80088f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8008860:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008864:	4924      	ldr	r1, [pc, #144]	; (80088f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8008866:	4825      	ldr	r0, [pc, #148]	; (80088fc <tcp_update_rcv_ann_wnd+0xac>)
 8008868:	f009 fe88 	bl	801257c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008874:	4413      	add	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008880:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008884:	bf28      	it	cs
 8008886:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800888a:	b292      	uxth	r2, r2
 800888c:	4413      	add	r3, r2
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	db08      	blt.n	80088a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	e020      	b.n	80088ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	dd03      	ble.n	80088be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088bc:	e014      	b.n	80088e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d0:	d306      	bcc.n	80088e0 <tcp_update_rcv_ann_wnd+0x90>
 80088d2:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80088d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80088d8:	4909      	ldr	r1, [pc, #36]	; (8008900 <tcp_update_rcv_ann_wnd+0xb0>)
 80088da:	4808      	ldr	r0, [pc, #32]	; (80088fc <tcp_update_rcv_ann_wnd+0xac>)
 80088dc:	f009 fe4e 	bl	801257c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80088e8:	2300      	movs	r3, #0
  }
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	08013e84 	.word	0x08013e84
 80088f8:	080140e0 	.word	0x080140e0
 80088fc:	08013ec8 	.word	0x08013ec8
 8008900:	08014104 	.word	0x08014104

08008904 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <tcp_recved+0x22>
 8008916:	4b1f      	ldr	r3, [pc, #124]	; (8008994 <tcp_recved+0x90>)
 8008918:	f240 32cf 	movw	r2, #975	; 0x3cf
 800891c:	491e      	ldr	r1, [pc, #120]	; (8008998 <tcp_recved+0x94>)
 800891e:	481f      	ldr	r0, [pc, #124]	; (800899c <tcp_recved+0x98>)
 8008920:	f009 fe2c 	bl	801257c <iprintf>
 8008924:	e032      	b.n	800898c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	7d1b      	ldrb	r3, [r3, #20]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d106      	bne.n	800893c <tcp_recved+0x38>
 800892e:	4b19      	ldr	r3, [pc, #100]	; (8008994 <tcp_recved+0x90>)
 8008930:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008934:	491a      	ldr	r1, [pc, #104]	; (80089a0 <tcp_recved+0x9c>)
 8008936:	4819      	ldr	r0, [pc, #100]	; (800899c <tcp_recved+0x98>)
 8008938:	f009 fe20 	bl	801257c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008940:	887b      	ldrh	r3, [r7, #2]
 8008942:	4413      	add	r3, r2
 8008944:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008946:	89fb      	ldrh	r3, [r7, #14]
 8008948:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800894c:	d804      	bhi.n	8008958 <tcp_recved+0x54>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008952:	89fa      	ldrh	r2, [r7, #14]
 8008954:	429a      	cmp	r2, r3
 8008956:	d204      	bcs.n	8008962 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800895e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008960:	e002      	b.n	8008968 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	89fa      	ldrh	r2, [r7, #14]
 8008966:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ff71 	bl	8008850 <tcp_update_rcv_ann_wnd>
 800896e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008976:	d309      	bcc.n	800898c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8b5b      	ldrh	r3, [r3, #26]
 800897c:	f043 0302 	orr.w	r3, r3, #2
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f003 fe42 	bl	800c610 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	08013e84 	.word	0x08013e84
 8008998:	08014120 	.word	0x08014120
 800899c:	08013ec8 	.word	0x08013ec8
 80089a0:	08014138 	.word	0x08014138

080089a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80089a4:	b5b0      	push	{r4, r5, r7, lr}
 80089a6:	b090      	sub	sp, #64	; 0x40
 80089a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80089b0:	4b94      	ldr	r3, [pc, #592]	; (8008c04 <tcp_slowtmr+0x260>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3301      	adds	r3, #1
 80089b6:	4a93      	ldr	r2, [pc, #588]	; (8008c04 <tcp_slowtmr+0x260>)
 80089b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80089ba:	4b93      	ldr	r3, [pc, #588]	; (8008c08 <tcp_slowtmr+0x264>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	4b91      	ldr	r3, [pc, #580]	; (8008c08 <tcp_slowtmr+0x264>)
 80089c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80089ca:	4b90      	ldr	r3, [pc, #576]	; (8008c0c <tcp_slowtmr+0x268>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80089d0:	e29d      	b.n	8008f0e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	7d1b      	ldrb	r3, [r3, #20]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d106      	bne.n	80089e8 <tcp_slowtmr+0x44>
 80089da:	4b8d      	ldr	r3, [pc, #564]	; (8008c10 <tcp_slowtmr+0x26c>)
 80089dc:	f240 42be 	movw	r2, #1214	; 0x4be
 80089e0:	498c      	ldr	r1, [pc, #560]	; (8008c14 <tcp_slowtmr+0x270>)
 80089e2:	488d      	ldr	r0, [pc, #564]	; (8008c18 <tcp_slowtmr+0x274>)
 80089e4:	f009 fdca 	bl	801257c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	7d1b      	ldrb	r3, [r3, #20]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d106      	bne.n	80089fe <tcp_slowtmr+0x5a>
 80089f0:	4b87      	ldr	r3, [pc, #540]	; (8008c10 <tcp_slowtmr+0x26c>)
 80089f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80089f6:	4989      	ldr	r1, [pc, #548]	; (8008c1c <tcp_slowtmr+0x278>)
 80089f8:	4887      	ldr	r0, [pc, #540]	; (8008c18 <tcp_slowtmr+0x274>)
 80089fa:	f009 fdbf 	bl	801257c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	7d1b      	ldrb	r3, [r3, #20]
 8008a02:	2b0a      	cmp	r3, #10
 8008a04:	d106      	bne.n	8008a14 <tcp_slowtmr+0x70>
 8008a06:	4b82      	ldr	r3, [pc, #520]	; (8008c10 <tcp_slowtmr+0x26c>)
 8008a08:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008a0c:	4984      	ldr	r1, [pc, #528]	; (8008c20 <tcp_slowtmr+0x27c>)
 8008a0e:	4882      	ldr	r0, [pc, #520]	; (8008c18 <tcp_slowtmr+0x274>)
 8008a10:	f009 fdb4 	bl	801257c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	7f9a      	ldrb	r2, [r3, #30]
 8008a18:	4b7b      	ldr	r3, [pc, #492]	; (8008c08 <tcp_slowtmr+0x264>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d105      	bne.n	8008a2c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008a2a:	e270      	b.n	8008f0e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008a2c:	4b76      	ldr	r3, [pc, #472]	; (8008c08 <tcp_slowtmr+0x264>)
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	7d1b      	ldrb	r3, [r3, #20]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d10a      	bne.n	8008a5e <tcp_slowtmr+0xba>
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d905      	bls.n	8008a5e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a56:	3301      	adds	r3, #1
 8008a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a5c:	e11e      	b.n	8008c9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a64:	2b0b      	cmp	r3, #11
 8008a66:	d905      	bls.n	8008a74 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a72:	e113      	b.n	8008c9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d075      	beq.n	8008b6a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d006      	beq.n	8008a94 <tcp_slowtmr+0xf0>
 8008a86:	4b62      	ldr	r3, [pc, #392]	; (8008c10 <tcp_slowtmr+0x26c>)
 8008a88:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008a8c:	4965      	ldr	r1, [pc, #404]	; (8008c24 <tcp_slowtmr+0x280>)
 8008a8e:	4862      	ldr	r0, [pc, #392]	; (8008c18 <tcp_slowtmr+0x274>)
 8008a90:	f009 fd74 	bl	801257c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d106      	bne.n	8008aaa <tcp_slowtmr+0x106>
 8008a9c:	4b5c      	ldr	r3, [pc, #368]	; (8008c10 <tcp_slowtmr+0x26c>)
 8008a9e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008aa2:	4961      	ldr	r1, [pc, #388]	; (8008c28 <tcp_slowtmr+0x284>)
 8008aa4:	485c      	ldr	r0, [pc, #368]	; (8008c18 <tcp_slowtmr+0x274>)
 8008aa6:	f009 fd69 	bl	801257c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008ab0:	2b0b      	cmp	r3, #11
 8008ab2:	d905      	bls.n	8008ac0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ab8:	3301      	adds	r3, #1
 8008aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008abe:	e0ed      	b.n	8008c9c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	4a58      	ldr	r2, [pc, #352]	; (8008c2c <tcp_slowtmr+0x288>)
 8008aca:	5cd3      	ldrb	r3, [r2, r3]
 8008acc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ad4:	7c7a      	ldrb	r2, [r7, #17]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d907      	bls.n	8008aea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008af0:	7c7a      	ldrb	r2, [r7, #17]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	f200 80d2 	bhi.w	8008c9c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008af8:	2301      	movs	r3, #1
 8008afa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d108      	bne.n	8008b18 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b08:	f004 fc2a 	bl	800d360 <tcp_zero_window_probe>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d014      	beq.n	8008b3c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008b12:	2300      	movs	r3, #0
 8008b14:	623b      	str	r3, [r7, #32]
 8008b16:	e011      	b.n	8008b3c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b22:	f003 faef 	bl	800c104 <tcp_split_unsent_seg>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d107      	bne.n	8008b3c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b2e:	f003 fd6f 	bl	800c610 <tcp_output>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80ac 	beq.w	8008c9c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008b52:	2b06      	cmp	r3, #6
 8008b54:	f200 80a2 	bhi.w	8008c9c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008b68:	e098      	b.n	8008c9c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	db0f      	blt.n	8008b94 <tcp_slowtmr+0x1f0>
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d008      	beq.n	8008b94 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	b21a      	sxth	r2, r3
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	db7b      	blt.n	8008c9c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008ba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ba6:	f004 f827 	bl	800cbf8 <tcp_rexmit_rto_prepare>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <tcp_slowtmr+0x21c>
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d171      	bne.n	8008c9c <tcp_slowtmr+0x2f8>
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d06d      	beq.n	8008c9c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	7d1b      	ldrb	r3, [r3, #20]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d03a      	beq.n	8008c3e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bce:	2b0c      	cmp	r3, #12
 8008bd0:	bf28      	it	cs
 8008bd2:	230c      	movcs	r3, #12
 8008bd4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008bdc:	10db      	asrs	r3, r3, #3
 8008bde:	b21b      	sxth	r3, r3
 8008be0:	461a      	mov	r2, r3
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008be8:	4413      	add	r3, r2
 8008bea:	7efa      	ldrb	r2, [r7, #27]
 8008bec:	4910      	ldr	r1, [pc, #64]	; (8008c30 <tcp_slowtmr+0x28c>)
 8008bee:	5c8a      	ldrb	r2, [r1, r2]
 8008bf0:	4093      	lsls	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	dc1a      	bgt.n	8008c34 <tcp_slowtmr+0x290>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	b21a      	sxth	r2, r3
 8008c02:	e019      	b.n	8008c38 <tcp_slowtmr+0x294>
 8008c04:	2000a7b0 	.word	0x2000a7b0
 8008c08:	2000a7c6 	.word	0x2000a7c6
 8008c0c:	2000a7bc 	.word	0x2000a7bc
 8008c10:	08013e84 	.word	0x08013e84
 8008c14:	080141c8 	.word	0x080141c8
 8008c18:	08013ec8 	.word	0x08013ec8
 8008c1c:	080141f4 	.word	0x080141f4
 8008c20:	08014220 	.word	0x08014220
 8008c24:	08014250 	.word	0x08014250
 8008c28:	08014284 	.word	0x08014284
 8008c2c:	080161fc 	.word	0x080161fc
 8008c30:	080161ec 	.word	0x080161ec
 8008c34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	2200      	movs	r2, #0
 8008c42:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c50:	4293      	cmp	r3, r2
 8008c52:	bf28      	it	cs
 8008c54:	4613      	movcs	r3, r2
 8008c56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008c58:	8a7b      	ldrh	r3, [r7, #18]
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d206      	bcs.n	8008c84 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c98:	f004 f81e 	bl	800ccd8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ca0:	2b06      	cmp	r3, #6
 8008ca2:	d111      	bne.n	8008cc8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	8b5b      	ldrh	r3, [r3, #26]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008cb0:	4b9c      	ldr	r3, [pc, #624]	; (8008f24 <tcp_slowtmr+0x580>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b28      	cmp	r3, #40	; 0x28
 8008cbc:	d904      	bls.n	8008cc8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cca:	7a5b      	ldrb	r3, [r3, #9]
 8008ccc:	f003 0308 	and.w	r3, r3, #8
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d04a      	beq.n	8008d6a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d003      	beq.n	8008ce4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008ce0:	2b07      	cmp	r3, #7
 8008ce2:	d142      	bne.n	8008d6a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ce4:	4b8f      	ldr	r3, [pc, #572]	; (8008f24 <tcp_slowtmr+0x580>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008cf4:	4b8c      	ldr	r3, [pc, #560]	; (8008f28 <tcp_slowtmr+0x584>)
 8008cf6:	440b      	add	r3, r1
 8008cf8:	498c      	ldr	r1, [pc, #560]	; (8008f2c <tcp_slowtmr+0x588>)
 8008cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8008cfe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d90a      	bls.n	8008d1a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d08:	3301      	adds	r3, #1
 8008d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d12:	3301      	adds	r3, #1
 8008d14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d18:	e027      	b.n	8008d6a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d1a:	4b82      	ldr	r3, [pc, #520]	; (8008f24 <tcp_slowtmr+0x580>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008d30:	4618      	mov	r0, r3
 8008d32:	4b7f      	ldr	r3, [pc, #508]	; (8008f30 <tcp_slowtmr+0x58c>)
 8008d34:	fb00 f303 	mul.w	r3, r0, r3
 8008d38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008d3a:	497c      	ldr	r1, [pc, #496]	; (8008f2c <tcp_slowtmr+0x588>)
 8008d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8008d40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d911      	bls.n	8008d6a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d48:	f004 faca 	bl	800d2e0 <tcp_keepalive>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008d52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d107      	bne.n	8008d6a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008d60:	3301      	adds	r3, #1
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d011      	beq.n	8008d96 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008d72:	4b6c      	ldr	r3, [pc, #432]	; (8008f24 <tcp_slowtmr+0x580>)
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008d82:	4619      	mov	r1, r3
 8008d84:	460b      	mov	r3, r1
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	440b      	add	r3, r1
 8008d8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d302      	bcc.n	8008d96 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008d90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d92:	f000 fddd 	bl	8009950 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	7d1b      	ldrb	r3, [r3, #20]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d10b      	bne.n	8008db6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d9e:	4b61      	ldr	r3, [pc, #388]	; (8008f24 <tcp_slowtmr+0x580>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b28      	cmp	r3, #40	; 0x28
 8008daa:	d904      	bls.n	8008db6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db0:	3301      	adds	r3, #1
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	7d1b      	ldrb	r3, [r3, #20]
 8008dba:	2b09      	cmp	r3, #9
 8008dbc:	d10b      	bne.n	8008dd6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008dbe:	4b59      	ldr	r3, [pc, #356]	; (8008f24 <tcp_slowtmr+0x580>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2bf0      	cmp	r3, #240	; 0xf0
 8008dca:	d904      	bls.n	8008dd6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d060      	beq.n	8008ea0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008de8:	f000 fbfe 	bl	80095e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d010      	beq.n	8008e14 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008df2:	4b50      	ldr	r3, [pc, #320]	; (8008f34 <tcp_slowtmr+0x590>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d106      	bne.n	8008e0a <tcp_slowtmr+0x466>
 8008dfc:	4b4e      	ldr	r3, [pc, #312]	; (8008f38 <tcp_slowtmr+0x594>)
 8008dfe:	f240 526d 	movw	r2, #1389	; 0x56d
 8008e02:	494e      	ldr	r1, [pc, #312]	; (8008f3c <tcp_slowtmr+0x598>)
 8008e04:	484e      	ldr	r0, [pc, #312]	; (8008f40 <tcp_slowtmr+0x59c>)
 8008e06:	f009 fbb9 	bl	801257c <iprintf>
        prev->next = pcb->next;
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	60da      	str	r2, [r3, #12]
 8008e12:	e00f      	b.n	8008e34 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008e14:	4b47      	ldr	r3, [pc, #284]	; (8008f34 <tcp_slowtmr+0x590>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d006      	beq.n	8008e2c <tcp_slowtmr+0x488>
 8008e1e:	4b46      	ldr	r3, [pc, #280]	; (8008f38 <tcp_slowtmr+0x594>)
 8008e20:	f240 5271 	movw	r2, #1393	; 0x571
 8008e24:	4947      	ldr	r1, [pc, #284]	; (8008f44 <tcp_slowtmr+0x5a0>)
 8008e26:	4846      	ldr	r0, [pc, #280]	; (8008f40 <tcp_slowtmr+0x59c>)
 8008e28:	f009 fba8 	bl	801257c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	4a40      	ldr	r2, [pc, #256]	; (8008f34 <tcp_slowtmr+0x590>)
 8008e32:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d013      	beq.n	8008e64 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008e44:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	3304      	adds	r3, #4
 8008e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e4c:	8ad2      	ldrh	r2, [r2, #22]
 8008e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e50:	8b09      	ldrh	r1, [r1, #24]
 8008e52:	9102      	str	r1, [sp, #8]
 8008e54:	9201      	str	r2, [sp, #4]
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	462b      	mov	r3, r5
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	4601      	mov	r1, r0
 8008e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e60:	f004 f98a 	bl	800d178 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	7d1b      	ldrb	r3, [r3, #20]
 8008e6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008e7a:	6838      	ldr	r0, [r7, #0]
 8008e7c:	f7ff f9f4 	bl	8008268 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008e80:	4b31      	ldr	r3, [pc, #196]	; (8008f48 <tcp_slowtmr+0x5a4>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <tcp_slowtmr+0x4f2>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f06f 010c 	mvn.w	r1, #12
 8008e92:	68b8      	ldr	r0, [r7, #8]
 8008e94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008e96:	4b2c      	ldr	r3, [pc, #176]	; (8008f48 <tcp_slowtmr+0x5a4>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d037      	beq.n	8008f0e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008e9e:	e592      	b.n	80089c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	7f1b      	ldrb	r3, [r3, #28]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	7f1a      	ldrb	r2, [r3, #28]
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	7f5b      	ldrb	r3, [r3, #29]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d325      	bcc.n	8008f0e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008ec8:	4b1f      	ldr	r3, [pc, #124]	; (8008f48 <tcp_slowtmr+0x5a4>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <tcp_slowtmr+0x54c>
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee0:	6912      	ldr	r2, [r2, #16]
 8008ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008eee:	e002      	b.n	8008ef6 <tcp_slowtmr+0x552>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <tcp_slowtmr+0x5a4>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d000      	beq.n	8008f00 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008efe:	e562      	b.n	80089c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008f00:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d102      	bne.n	8008f0e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0a:	f003 fb81 	bl	800c610 <tcp_output>
  while (pcb != NULL) {
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f47f ad5e 	bne.w	80089d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <tcp_slowtmr+0x5a8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008f20:	e069      	b.n	8008ff6 <tcp_slowtmr+0x652>
 8008f22:	bf00      	nop
 8008f24:	2000a7b0 	.word	0x2000a7b0
 8008f28:	000a4cb8 	.word	0x000a4cb8
 8008f2c:	10624dd3 	.word	0x10624dd3
 8008f30:	000124f8 	.word	0x000124f8
 8008f34:	2000a7bc 	.word	0x2000a7bc
 8008f38:	08013e84 	.word	0x08013e84
 8008f3c:	080142bc 	.word	0x080142bc
 8008f40:	08013ec8 	.word	0x08013ec8
 8008f44:	080142e8 	.word	0x080142e8
 8008f48:	2000a7c4 	.word	0x2000a7c4
 8008f4c:	2000a7c0 	.word	0x2000a7c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	7d1b      	ldrb	r3, [r3, #20]
 8008f54:	2b0a      	cmp	r3, #10
 8008f56:	d006      	beq.n	8008f66 <tcp_slowtmr+0x5c2>
 8008f58:	4b2b      	ldr	r3, [pc, #172]	; (8009008 <tcp_slowtmr+0x664>)
 8008f5a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008f5e:	492b      	ldr	r1, [pc, #172]	; (800900c <tcp_slowtmr+0x668>)
 8008f60:	482b      	ldr	r0, [pc, #172]	; (8009010 <tcp_slowtmr+0x66c>)
 8008f62:	f009 fb0b 	bl	801257c <iprintf>
    pcb_remove = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008f6c:	4b29      	ldr	r3, [pc, #164]	; (8009014 <tcp_slowtmr+0x670>)
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2bf0      	cmp	r3, #240	; 0xf0
 8008f78:	d904      	bls.n	8008f84 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f7e:	3301      	adds	r3, #1
 8008f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d02f      	beq.n	8008fec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f8e:	f000 fb2b 	bl	80095e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d010      	beq.n	8008fba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008f98:	4b1f      	ldr	r3, [pc, #124]	; (8009018 <tcp_slowtmr+0x674>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d106      	bne.n	8008fb0 <tcp_slowtmr+0x60c>
 8008fa2:	4b19      	ldr	r3, [pc, #100]	; (8009008 <tcp_slowtmr+0x664>)
 8008fa4:	f240 52af 	movw	r2, #1455	; 0x5af
 8008fa8:	491c      	ldr	r1, [pc, #112]	; (800901c <tcp_slowtmr+0x678>)
 8008faa:	4819      	ldr	r0, [pc, #100]	; (8009010 <tcp_slowtmr+0x66c>)
 8008fac:	f009 fae6 	bl	801257c <iprintf>
        prev->next = pcb->next;
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	60da      	str	r2, [r3, #12]
 8008fb8:	e00f      	b.n	8008fda <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008fba:	4b17      	ldr	r3, [pc, #92]	; (8009018 <tcp_slowtmr+0x674>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d006      	beq.n	8008fd2 <tcp_slowtmr+0x62e>
 8008fc4:	4b10      	ldr	r3, [pc, #64]	; (8009008 <tcp_slowtmr+0x664>)
 8008fc6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008fca:	4915      	ldr	r1, [pc, #84]	; (8009020 <tcp_slowtmr+0x67c>)
 8008fcc:	4810      	ldr	r0, [pc, #64]	; (8009010 <tcp_slowtmr+0x66c>)
 8008fce:	f009 fad5 	bl	801257c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	4a10      	ldr	r2, [pc, #64]	; (8009018 <tcp_slowtmr+0x674>)
 8008fd8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008fe4:	69f8      	ldr	r0, [r7, #28]
 8008fe6:	f7ff f93f 	bl	8008268 <tcp_free>
 8008fea:	e004      	b.n	8008ff6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1a9      	bne.n	8008f50 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	3730      	adds	r7, #48	; 0x30
 8009002:	46bd      	mov	sp, r7
 8009004:	bdb0      	pop	{r4, r5, r7, pc}
 8009006:	bf00      	nop
 8009008:	08013e84 	.word	0x08013e84
 800900c:	08014314 	.word	0x08014314
 8009010:	08013ec8 	.word	0x08013ec8
 8009014:	2000a7b0 	.word	0x2000a7b0
 8009018:	2000a7c0 	.word	0x2000a7c0
 800901c:	08014344 	.word	0x08014344
 8009020:	0801436c 	.word	0x0801436c

08009024 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800902a:	4b2d      	ldr	r3, [pc, #180]	; (80090e0 <tcp_fasttmr+0xbc>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	3301      	adds	r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b2b      	ldr	r3, [pc, #172]	; (80090e0 <tcp_fasttmr+0xbc>)
 8009034:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009036:	4b2b      	ldr	r3, [pc, #172]	; (80090e4 <tcp_fasttmr+0xc0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800903c:	e048      	b.n	80090d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7f9a      	ldrb	r2, [r3, #30]
 8009042:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <tcp_fasttmr+0xbc>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d03f      	beq.n	80090ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800904a:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <tcp_fasttmr+0xbc>)
 800904c:	781a      	ldrb	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	8b5b      	ldrh	r3, [r3, #26]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d010      	beq.n	8009080 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	8b5b      	ldrh	r3, [r3, #26]
 8009062:	f043 0302 	orr.w	r3, r3, #2
 8009066:	b29a      	uxth	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f003 facf 	bl	800c610 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8b5b      	ldrh	r3, [r3, #26]
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	8b5b      	ldrh	r3, [r3, #26]
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	2b00      	cmp	r3, #0
 800908a:	d009      	beq.n	80090a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	8b5b      	ldrh	r3, [r3, #26]
 8009090:	f023 0308 	bic.w	r3, r3, #8
 8009094:	b29a      	uxth	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff fa78 	bl	8008590 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80090ae:	4b0e      	ldr	r3, [pc, #56]	; (80090e8 <tcp_fasttmr+0xc4>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f819 	bl	80090ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80090ba:	4b0b      	ldr	r3, [pc, #44]	; (80090e8 <tcp_fasttmr+0xc4>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d000      	beq.n	80090c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80090c2:	e7b8      	b.n	8009036 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	607b      	str	r3, [r7, #4]
 80090c8:	e002      	b.n	80090d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1b3      	bne.n	800903e <tcp_fasttmr+0x1a>
    }
  }
}
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	2000a7c6 	.word	0x2000a7c6
 80090e4:	2000a7bc 	.word	0x2000a7bc
 80090e8:	2000a7c4 	.word	0x2000a7c4

080090ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <tcp_process_refused_data+0x22>
 80090fa:	4b37      	ldr	r3, [pc, #220]	; (80091d8 <tcp_process_refused_data+0xec>)
 80090fc:	f240 6209 	movw	r2, #1545	; 0x609
 8009100:	4936      	ldr	r1, [pc, #216]	; (80091dc <tcp_process_refused_data+0xf0>)
 8009102:	4837      	ldr	r0, [pc, #220]	; (80091e0 <tcp_process_refused_data+0xf4>)
 8009104:	f009 fa3a 	bl	801257c <iprintf>
 8009108:	f06f 030f 	mvn.w	r3, #15
 800910c:	e060      	b.n	80091d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009112:	7b5b      	ldrb	r3, [r3, #13]
 8009114:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800911a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <tcp_process_refused_data+0x58>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6918      	ldr	r0, [r3, #16]
 8009136:	2300      	movs	r3, #0
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	47a0      	blx	r4
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
 8009142:	e007      	b.n	8009154 <tcp_process_refused_data+0x68>
 8009144:	2300      	movs	r3, #0
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	2000      	movs	r0, #0
 800914c:	f000 f8a4 	bl	8009298 <tcp_recv_null>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d12a      	bne.n	80091b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d033      	beq.n	80091ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800916e:	d005      	beq.n	800917c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009174:	3301      	adds	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00b      	beq.n	800919e <tcp_process_refused_data+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6918      	ldr	r0, [r3, #16]
 8009190:	2300      	movs	r3, #0
 8009192:	2200      	movs	r2, #0
 8009194:	6879      	ldr	r1, [r7, #4]
 8009196:	47a0      	blx	r4
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]
 800919c:	e001      	b.n	80091a2 <tcp_process_refused_data+0xb6>
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80091a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a6:	f113 0f0d 	cmn.w	r3, #13
 80091aa:	d110      	bne.n	80091ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80091ac:	f06f 030c 	mvn.w	r3, #12
 80091b0:	e00e      	b.n	80091d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80091b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091b6:	f113 0f0d 	cmn.w	r3, #13
 80091ba:	d102      	bne.n	80091c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80091bc:	f06f 030c 	mvn.w	r3, #12
 80091c0:	e006      	b.n	80091d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80091c8:	f06f 0304 	mvn.w	r3, #4
 80091cc:	e000      	b.n	80091d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd90      	pop	{r4, r7, pc}
 80091d8:	08013e84 	.word	0x08013e84
 80091dc:	08014394 	.word	0x08014394
 80091e0:	08013ec8 	.word	0x08013ec8

080091e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80091ec:	e007      	b.n	80091fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f80a 	bl	800920e <tcp_seg_free>
    seg = next;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f4      	bne.n	80091ee <tcp_segs_free+0xa>
  }
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe fd6d 	bl	8007d08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	2003      	movs	r0, #3
 8009232:	f7fd ff07 	bl	8007044 <memp_free>
  }
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d106      	bne.n	800925c <tcp_seg_copy+0x1c>
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <tcp_seg_copy+0x4c>)
 8009250:	f240 6282 	movw	r2, #1666	; 0x682
 8009254:	490e      	ldr	r1, [pc, #56]	; (8009290 <tcp_seg_copy+0x50>)
 8009256:	480f      	ldr	r0, [pc, #60]	; (8009294 <tcp_seg_copy+0x54>)
 8009258:	f009 f990 	bl	801257c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800925c:	2003      	movs	r0, #3
 800925e:	f7fd fe81 	bl	8006f64 <memp_malloc>
 8009262:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <tcp_seg_copy+0x2e>
    return NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	e00a      	b.n	8009284 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800926e:	2210      	movs	r2, #16
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f009 fa5d 	bl	8012732 <memcpy>
  pbuf_ref(cseg->p);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fde3 	bl	8007e48 <pbuf_ref>
  return cseg;
 8009282:	68fb      	ldr	r3, [r7, #12]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	08013e84 	.word	0x08013e84
 8009290:	080143d8 	.word	0x080143d8
 8009294:	08013ec8 	.word	0x08013ec8

08009298 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d109      	bne.n	80092c0 <tcp_recv_null+0x28>
 80092ac:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <tcp_recv_null+0x60>)
 80092ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80092b2:	4912      	ldr	r1, [pc, #72]	; (80092fc <tcp_recv_null+0x64>)
 80092b4:	4812      	ldr	r0, [pc, #72]	; (8009300 <tcp_recv_null+0x68>)
 80092b6:	f009 f961 	bl	801257c <iprintf>
 80092ba:	f06f 030f 	mvn.w	r3, #15
 80092be:	e016      	b.n	80092ee <tcp_recv_null+0x56>

  if (p != NULL) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d009      	beq.n	80092da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	891b      	ldrh	r3, [r3, #8]
 80092ca:	4619      	mov	r1, r3
 80092cc:	68b8      	ldr	r0, [r7, #8]
 80092ce:	f7ff fb19 	bl	8008904 <tcp_recved>
    pbuf_free(p);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7fe fd18 	bl	8007d08 <pbuf_free>
 80092d8:	e008      	b.n	80092ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80092da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d104      	bne.n	80092ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80092e2:	68b8      	ldr	r0, [r7, #8]
 80092e4:	f7ff f9be 	bl	8008664 <tcp_close>
 80092e8:	4603      	mov	r3, r0
 80092ea:	e000      	b.n	80092ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	08013e84 	.word	0x08013e84
 80092fc:	080143f4 	.word	0x080143f4
 8009300:	08013ec8 	.word	0x08013ec8

08009304 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800930e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009312:	2b00      	cmp	r3, #0
 8009314:	db01      	blt.n	800931a <tcp_kill_prio+0x16>
 8009316:	79fb      	ldrb	r3, [r7, #7]
 8009318:	e000      	b.n	800931c <tcp_kill_prio+0x18>
 800931a:	237f      	movs	r3, #127	; 0x7f
 800931c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800931e:	7afb      	ldrb	r3, [r7, #11]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d034      	beq.n	800938e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	3b01      	subs	r3, #1
 8009328:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800932e:	2300      	movs	r3, #0
 8009330:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009332:	4b19      	ldr	r3, [pc, #100]	; (8009398 <tcp_kill_prio+0x94>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	e01f      	b.n	800937a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	7d5b      	ldrb	r3, [r3, #21]
 800933e:	7afa      	ldrb	r2, [r7, #11]
 8009340:	429a      	cmp	r2, r3
 8009342:	d80c      	bhi.n	800935e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009348:	7afa      	ldrb	r2, [r7, #11]
 800934a:	429a      	cmp	r2, r3
 800934c:	d112      	bne.n	8009374 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <tcp_kill_prio+0x98>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	429a      	cmp	r2, r3
 800935c:	d80a      	bhi.n	8009374 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <tcp_kill_prio+0x98>)
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	7d5b      	ldrb	r3, [r3, #21]
 8009372:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1dc      	bne.n	800933a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d004      	beq.n	8009390 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009386:	6938      	ldr	r0, [r7, #16]
 8009388:	f7ff fa56 	bl	8008838 <tcp_abort>
 800938c:	e000      	b.n	8009390 <tcp_kill_prio+0x8c>
    return;
 800938e:	bf00      	nop
  }
}
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000a7bc 	.word	0x2000a7bc
 800939c:	2000a7b0 	.word	0x2000a7b0

080093a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d009      	beq.n	80093c4 <tcp_kill_state+0x24>
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b09      	cmp	r3, #9
 80093b4:	d006      	beq.n	80093c4 <tcp_kill_state+0x24>
 80093b6:	4b1a      	ldr	r3, [pc, #104]	; (8009420 <tcp_kill_state+0x80>)
 80093b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80093bc:	4919      	ldr	r1, [pc, #100]	; (8009424 <tcp_kill_state+0x84>)
 80093be:	481a      	ldr	r0, [pc, #104]	; (8009428 <tcp_kill_state+0x88>)
 80093c0:	f009 f8dc 	bl	801257c <iprintf>

  inactivity = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093cc:	4b17      	ldr	r3, [pc, #92]	; (800942c <tcp_kill_state+0x8c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	e017      	b.n	8009404 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	7d1b      	ldrb	r3, [r3, #20]
 80093d8:	79fa      	ldrb	r2, [r7, #7]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d10f      	bne.n	80093fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80093de:	4b14      	ldr	r3, [pc, #80]	; (8009430 <tcp_kill_state+0x90>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d807      	bhi.n	80093fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80093ee:	4b10      	ldr	r3, [pc, #64]	; (8009430 <tcp_kill_state+0x90>)
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e4      	bne.n	80093d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009410:	2100      	movs	r1, #0
 8009412:	6938      	ldr	r0, [r7, #16]
 8009414:	f7ff f952 	bl	80086bc <tcp_abandon>
  }
}
 8009418:	bf00      	nop
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	08013e84 	.word	0x08013e84
 8009424:	08014410 	.word	0x08014410
 8009428:	08013ec8 	.word	0x08013ec8
 800942c:	2000a7bc 	.word	0x2000a7bc
 8009430:	2000a7b0 	.word	0x2000a7b0

08009434 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009442:	4b12      	ldr	r3, [pc, #72]	; (800948c <tcp_kill_timewait+0x58>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e012      	b.n	8009470 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800944a:	4b11      	ldr	r3, [pc, #68]	; (8009490 <tcp_kill_timewait+0x5c>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d807      	bhi.n	800946a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800945a:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <tcp_kill_timewait+0x5c>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e9      	bne.n	800944a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800947c:	68b8      	ldr	r0, [r7, #8]
 800947e:	f7ff f9db 	bl	8008838 <tcp_abort>
  }
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	2000a7c0 	.word	0x2000a7c0
 8009490:	2000a7b0 	.word	0x2000a7b0

08009494 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800949a:	4b10      	ldr	r3, [pc, #64]	; (80094dc <tcp_handle_closepend+0x48>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80094a0:	e014      	b.n	80094cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	8b5b      	ldrh	r3, [r3, #26]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	8b5b      	ldrh	r3, [r3, #26]
 80094b8:	f023 0308 	bic.w	r3, r3, #8
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff f864 	bl	8008590 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e7      	bne.n	80094a2 <tcp_handle_closepend+0xe>
  }
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	2000a7bc 	.word	0x2000a7bc

080094e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80094ea:	2001      	movs	r0, #1
 80094ec:	f7fd fd3a 	bl	8006f64 <memp_malloc>
 80094f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d126      	bne.n	8009546 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80094f8:	f7ff ffcc 	bl	8009494 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80094fc:	f7ff ff9a 	bl	8009434 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009500:	2001      	movs	r0, #1
 8009502:	f7fd fd2f 	bl	8006f64 <memp_malloc>
 8009506:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d11b      	bne.n	8009546 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800950e:	2009      	movs	r0, #9
 8009510:	f7ff ff46 	bl	80093a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009514:	2001      	movs	r0, #1
 8009516:	f7fd fd25 	bl	8006f64 <memp_malloc>
 800951a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d111      	bne.n	8009546 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009522:	2008      	movs	r0, #8
 8009524:	f7ff ff3c 	bl	80093a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009528:	2001      	movs	r0, #1
 800952a:	f7fd fd1b 	bl	8006f64 <memp_malloc>
 800952e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d107      	bne.n	8009546 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff fee3 	bl	8009304 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800953e:	2001      	movs	r0, #1
 8009540:	f7fd fd10 	bl	8006f64 <memp_malloc>
 8009544:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d03f      	beq.n	80095cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800954c:	229c      	movs	r2, #156	; 0x9c
 800954e:	2100      	movs	r1, #0
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f009 f878 	bl	8012646 <memset>
    pcb->prio = prio;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	79fa      	ldrb	r2, [r7, #7]
 800955a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009562:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800956c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	22ff      	movs	r2, #255	; 0xff
 800957a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009582:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2206      	movs	r2, #6
 8009588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2206      	movs	r2, #6
 8009590:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009598:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80095a2:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <tcp_alloc+0xf8>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80095aa:	4b0c      	ldr	r3, [pc, #48]	; (80095dc <tcp_alloc+0xfc>)
 80095ac:	781a      	ldrb	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80095b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4a08      	ldr	r2, [pc, #32]	; (80095e0 <tcp_alloc+0x100>)
 80095c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4a07      	ldr	r2, [pc, #28]	; (80095e4 <tcp_alloc+0x104>)
 80095c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80095cc:	68fb      	ldr	r3, [r7, #12]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	2000a7b0 	.word	0x2000a7b0
 80095dc:	2000a7c6 	.word	0x2000a7c6
 80095e0:	08009299 	.word	0x08009299
 80095e4:	006ddd00 	.word	0x006ddd00

080095e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d107      	bne.n	8009606 <tcp_pcb_purge+0x1e>
 80095f6:	4b21      	ldr	r3, [pc, #132]	; (800967c <tcp_pcb_purge+0x94>)
 80095f8:	f640 0251 	movw	r2, #2129	; 0x851
 80095fc:	4920      	ldr	r1, [pc, #128]	; (8009680 <tcp_pcb_purge+0x98>)
 80095fe:	4821      	ldr	r0, [pc, #132]	; (8009684 <tcp_pcb_purge+0x9c>)
 8009600:	f008 ffbc 	bl	801257c <iprintf>
 8009604:	e037      	b.n	8009676 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7d1b      	ldrb	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d033      	beq.n	8009676 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009612:	2b0a      	cmp	r3, #10
 8009614:	d02f      	beq.n	8009676 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800961a:	2b01      	cmp	r3, #1
 800961c:	d02b      	beq.n	8009676 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fb6c 	bl	8007d08 <pbuf_free>
      pcb->refused_data = NULL;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f986 	bl	8009950 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800964a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff fdc7 	bl	80091e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fdc2 	bl	80091e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	66da      	str	r2, [r3, #108]	; 0x6c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	08013e84 	.word	0x08013e84
 8009680:	080144d0 	.word	0x080144d0
 8009684:	08013ec8 	.word	0x08013ec8

08009688 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <tcp_pcb_remove+0x1e>
 8009698:	4b3e      	ldr	r3, [pc, #248]	; (8009794 <tcp_pcb_remove+0x10c>)
 800969a:	f640 0283 	movw	r2, #2179	; 0x883
 800969e:	493e      	ldr	r1, [pc, #248]	; (8009798 <tcp_pcb_remove+0x110>)
 80096a0:	483e      	ldr	r0, [pc, #248]	; (800979c <tcp_pcb_remove+0x114>)
 80096a2:	f008 ff6b 	bl	801257c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d106      	bne.n	80096ba <tcp_pcb_remove+0x32>
 80096ac:	4b39      	ldr	r3, [pc, #228]	; (8009794 <tcp_pcb_remove+0x10c>)
 80096ae:	f640 0284 	movw	r2, #2180	; 0x884
 80096b2:	493b      	ldr	r1, [pc, #236]	; (80097a0 <tcp_pcb_remove+0x118>)
 80096b4:	4839      	ldr	r0, [pc, #228]	; (800979c <tcp_pcb_remove+0x114>)
 80096b6:	f008 ff61 	bl	801257c <iprintf>

  TCP_RMV(pcblist, pcb);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d105      	bne.n	80096d0 <tcp_pcb_remove+0x48>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e013      	b.n	80096f8 <tcp_pcb_remove+0x70>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e00c      	b.n	80096f2 <tcp_pcb_remove+0x6a>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d104      	bne.n	80096ec <tcp_pcb_remove+0x64>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	e005      	b.n	80096f8 <tcp_pcb_remove+0x70>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1ef      	bne.n	80096d8 <tcp_pcb_remove+0x50>
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2200      	movs	r2, #0
 80096fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80096fe:	6838      	ldr	r0, [r7, #0]
 8009700:	f7ff ff72 	bl	80095e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	7d1b      	ldrb	r3, [r3, #20]
 8009708:	2b0a      	cmp	r3, #10
 800970a:	d013      	beq.n	8009734 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009710:	2b01      	cmp	r3, #1
 8009712:	d00f      	beq.n	8009734 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	8b5b      	ldrh	r3, [r3, #26]
 8009718:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	8b5b      	ldrh	r3, [r3, #26]
 8009724:	f043 0302 	orr.w	r3, r3, #2
 8009728:	b29a      	uxth	r2, r3
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800972e:	6838      	ldr	r0, [r7, #0]
 8009730:	f002 ff6e 	bl	800c610 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	7d1b      	ldrb	r3, [r3, #20]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d020      	beq.n	800977e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <tcp_pcb_remove+0xca>
 8009744:	4b13      	ldr	r3, [pc, #76]	; (8009794 <tcp_pcb_remove+0x10c>)
 8009746:	f640 0293 	movw	r2, #2195	; 0x893
 800974a:	4916      	ldr	r1, [pc, #88]	; (80097a4 <tcp_pcb_remove+0x11c>)
 800974c:	4813      	ldr	r0, [pc, #76]	; (800979c <tcp_pcb_remove+0x114>)
 800974e:	f008 ff15 	bl	801257c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009756:	2b00      	cmp	r3, #0
 8009758:	d006      	beq.n	8009768 <tcp_pcb_remove+0xe0>
 800975a:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <tcp_pcb_remove+0x10c>)
 800975c:	f640 0294 	movw	r2, #2196	; 0x894
 8009760:	4911      	ldr	r1, [pc, #68]	; (80097a8 <tcp_pcb_remove+0x120>)
 8009762:	480e      	ldr	r0, [pc, #56]	; (800979c <tcp_pcb_remove+0x114>)
 8009764:	f008 ff0a 	bl	801257c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976c:	2b00      	cmp	r3, #0
 800976e:	d006      	beq.n	800977e <tcp_pcb_remove+0xf6>
 8009770:	4b08      	ldr	r3, [pc, #32]	; (8009794 <tcp_pcb_remove+0x10c>)
 8009772:	f640 0296 	movw	r2, #2198	; 0x896
 8009776:	490d      	ldr	r1, [pc, #52]	; (80097ac <tcp_pcb_remove+0x124>)
 8009778:	4808      	ldr	r0, [pc, #32]	; (800979c <tcp_pcb_remove+0x114>)
 800977a:	f008 feff 	bl	801257c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2200      	movs	r2, #0
 8009782:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2200      	movs	r2, #0
 8009788:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	08013e84 	.word	0x08013e84
 8009798:	080144ec 	.word	0x080144ec
 800979c:	08013ec8 	.word	0x08013ec8
 80097a0:	08014508 	.word	0x08014508
 80097a4:	08014528 	.word	0x08014528
 80097a8:	08014540 	.word	0x08014540
 80097ac:	0801455c 	.word	0x0801455c

080097b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <tcp_next_iss+0x1c>
 80097be:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <tcp_next_iss+0x38>)
 80097c0:	f640 02af 	movw	r2, #2223	; 0x8af
 80097c4:	4909      	ldr	r1, [pc, #36]	; (80097ec <tcp_next_iss+0x3c>)
 80097c6:	480a      	ldr	r0, [pc, #40]	; (80097f0 <tcp_next_iss+0x40>)
 80097c8:	f008 fed8 	bl	801257c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80097cc:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <tcp_next_iss+0x44>)
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <tcp_next_iss+0x48>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	4a07      	ldr	r2, [pc, #28]	; (80097f4 <tcp_next_iss+0x44>)
 80097d8:	6013      	str	r3, [r2, #0]
  return iss;
 80097da:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <tcp_next_iss+0x44>)
 80097dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	08013e84 	.word	0x08013e84
 80097ec:	08014574 	.word	0x08014574
 80097f0:	08013ec8 	.word	0x08013ec8
 80097f4:	20000024 	.word	0x20000024
 80097f8:	2000a7b0 	.word	0x2000a7b0

080097fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <tcp_eff_send_mss_netif+0x22>
 8009810:	4b14      	ldr	r3, [pc, #80]	; (8009864 <tcp_eff_send_mss_netif+0x68>)
 8009812:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009816:	4914      	ldr	r1, [pc, #80]	; (8009868 <tcp_eff_send_mss_netif+0x6c>)
 8009818:	4814      	ldr	r0, [pc, #80]	; (800986c <tcp_eff_send_mss_netif+0x70>)
 800981a:	f008 feaf 	bl	801257c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	e019      	b.n	800985c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800982e:	8afb      	ldrh	r3, [r7, #22]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d012      	beq.n	800985a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009834:	2328      	movs	r3, #40	; 0x28
 8009836:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009838:	8afa      	ldrh	r2, [r7, #22]
 800983a:	8abb      	ldrh	r3, [r7, #20]
 800983c:	429a      	cmp	r2, r3
 800983e:	d904      	bls.n	800984a <tcp_eff_send_mss_netif+0x4e>
 8009840:	8afa      	ldrh	r2, [r7, #22]
 8009842:	8abb      	ldrh	r3, [r7, #20]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	b29b      	uxth	r3, r3
 8009848:	e000      	b.n	800984c <tcp_eff_send_mss_netif+0x50>
 800984a:	2300      	movs	r3, #0
 800984c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800984e:	8a7a      	ldrh	r2, [r7, #18]
 8009850:	89fb      	ldrh	r3, [r7, #14]
 8009852:	4293      	cmp	r3, r2
 8009854:	bf28      	it	cs
 8009856:	4613      	movcs	r3, r2
 8009858:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800985a:	89fb      	ldrh	r3, [r7, #14]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	08013e84 	.word	0x08013e84
 8009868:	08014590 	.word	0x08014590
 800986c:	08013ec8 	.word	0x08013ec8

08009870 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d119      	bne.n	80098b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009886:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800988a:	4910      	ldr	r1, [pc, #64]	; (80098cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800988c:	4810      	ldr	r0, [pc, #64]	; (80098d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800988e:	f008 fe75 	bl	801257c <iprintf>

  while (pcb != NULL) {
 8009892:	e011      	b.n	80098b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d108      	bne.n	80098b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7fe ffc6 	bl	8008838 <tcp_abort>
      pcb = next;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	e002      	b.n	80098b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1ea      	bne.n	8009894 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	08013e84 	.word	0x08013e84
 80098cc:	080145b8 	.word	0x080145b8
 80098d0:	08013ec8 	.word	0x08013ec8

080098d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d02a      	beq.n	800993a <tcp_netif_ip_addr_changed+0x66>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d026      	beq.n	800993a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80098ec:	4b15      	ldr	r3, [pc, #84]	; (8009944 <tcp_netif_ip_addr_changed+0x70>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff ffbc 	bl	8009870 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80098f8:	4b13      	ldr	r3, [pc, #76]	; (8009948 <tcp_netif_ip_addr_changed+0x74>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ffb6 	bl	8009870 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d017      	beq.n	800993a <tcp_netif_ip_addr_changed+0x66>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d013      	beq.n	800993a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009912:	4b0e      	ldr	r3, [pc, #56]	; (800994c <tcp_netif_ip_addr_changed+0x78>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	e00c      	b.n	8009934 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d103      	bne.n	800992e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1ef      	bne.n	800991a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800993a:	bf00      	nop
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	2000a7bc 	.word	0x2000a7bc
 8009948:	2000a7b4 	.word	0x2000a7b4
 800994c:	2000a7b8 	.word	0x2000a7b8

08009950 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff fc3d 	bl	80091e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b08d      	sub	sp, #52	; 0x34
 800997c:	af04      	add	r7, sp, #16
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d105      	bne.n	8009994 <tcp_input+0x1c>
 8009988:	4b9b      	ldr	r3, [pc, #620]	; (8009bf8 <tcp_input+0x280>)
 800998a:	2283      	movs	r2, #131	; 0x83
 800998c:	499b      	ldr	r1, [pc, #620]	; (8009bfc <tcp_input+0x284>)
 800998e:	489c      	ldr	r0, [pc, #624]	; (8009c00 <tcp_input+0x288>)
 8009990:	f008 fdf4 	bl	801257c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	4a9a      	ldr	r2, [pc, #616]	; (8009c04 <tcp_input+0x28c>)
 800999a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	895b      	ldrh	r3, [r3, #10]
 80099a0:	2b13      	cmp	r3, #19
 80099a2:	f240 83d1 	bls.w	800a148 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80099a6:	4b98      	ldr	r3, [pc, #608]	; (8009c08 <tcp_input+0x290>)
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	4a97      	ldr	r2, [pc, #604]	; (8009c08 <tcp_input+0x290>)
 80099ac:	6812      	ldr	r2, [r2, #0]
 80099ae:	4611      	mov	r1, r2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f007 fd8d 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f040 83c7 	bne.w	800a14c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80099be:	4b92      	ldr	r3, [pc, #584]	; (8009c08 <tcp_input+0x290>)
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80099c6:	2be0      	cmp	r3, #224	; 0xe0
 80099c8:	f000 83c0 	beq.w	800a14c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80099cc:	4b8d      	ldr	r3, [pc, #564]	; (8009c04 <tcp_input+0x28c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	899b      	ldrh	r3, [r3, #12]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fc fe4d 	bl	8006674 <lwip_htons>
 80099da:	4603      	mov	r3, r0
 80099dc:	0b1b      	lsrs	r3, r3, #12
 80099de:	b29b      	uxth	r3, r3
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80099e6:	7cbb      	ldrb	r3, [r7, #18]
 80099e8:	2b13      	cmp	r3, #19
 80099ea:	f240 83b1 	bls.w	800a150 <tcp_input+0x7d8>
 80099ee:	7cbb      	ldrb	r3, [r7, #18]
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	891b      	ldrh	r3, [r3, #8]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	f200 83aa 	bhi.w	800a150 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80099fc:	7cbb      	ldrb	r3, [r7, #18]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	3b14      	subs	r3, #20
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	4b81      	ldr	r3, [pc, #516]	; (8009c0c <tcp_input+0x294>)
 8009a06:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009a08:	4b81      	ldr	r3, [pc, #516]	; (8009c10 <tcp_input+0x298>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	895a      	ldrh	r2, [r3, #10]
 8009a12:	7cbb      	ldrb	r3, [r7, #18]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d309      	bcc.n	8009a2e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009a1a:	4b7c      	ldr	r3, [pc, #496]	; (8009c0c <tcp_input+0x294>)
 8009a1c:	881a      	ldrh	r2, [r3, #0]
 8009a1e:	4b7d      	ldr	r3, [pc, #500]	; (8009c14 <tcp_input+0x29c>)
 8009a20:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009a22:	7cbb      	ldrb	r3, [r7, #18]
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7fe f8e8 	bl	8007bfc <pbuf_remove_header>
 8009a2c:	e04e      	b.n	8009acc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d105      	bne.n	8009a42 <tcp_input+0xca>
 8009a36:	4b70      	ldr	r3, [pc, #448]	; (8009bf8 <tcp_input+0x280>)
 8009a38:	22c2      	movs	r2, #194	; 0xc2
 8009a3a:	4977      	ldr	r1, [pc, #476]	; (8009c18 <tcp_input+0x2a0>)
 8009a3c:	4870      	ldr	r0, [pc, #448]	; (8009c00 <tcp_input+0x288>)
 8009a3e:	f008 fd9d 	bl	801257c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009a42:	2114      	movs	r1, #20
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7fe f8d9 	bl	8007bfc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	895a      	ldrh	r2, [r3, #10]
 8009a4e:	4b71      	ldr	r3, [pc, #452]	; (8009c14 <tcp_input+0x29c>)
 8009a50:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009a52:	4b6e      	ldr	r3, [pc, #440]	; (8009c0c <tcp_input+0x294>)
 8009a54:	881a      	ldrh	r2, [r3, #0]
 8009a56:	4b6f      	ldr	r3, [pc, #444]	; (8009c14 <tcp_input+0x29c>)
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009a5e:	4b6d      	ldr	r3, [pc, #436]	; (8009c14 <tcp_input+0x29c>)
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7fe f8c9 	bl	8007bfc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	895b      	ldrh	r3, [r3, #10]
 8009a70:	8a3a      	ldrh	r2, [r7, #16]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f200 836e 	bhi.w	800a154 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	4a64      	ldr	r2, [pc, #400]	; (8009c10 <tcp_input+0x298>)
 8009a80:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	8a3a      	ldrh	r2, [r7, #16]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe f8b6 	bl	8007bfc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	891a      	ldrh	r2, [r3, #8]
 8009a94:	8a3b      	ldrh	r3, [r7, #16]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	895b      	ldrh	r3, [r3, #10]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d005      	beq.n	8009ab2 <tcp_input+0x13a>
 8009aa6:	4b54      	ldr	r3, [pc, #336]	; (8009bf8 <tcp_input+0x280>)
 8009aa8:	22df      	movs	r2, #223	; 0xdf
 8009aaa:	495c      	ldr	r1, [pc, #368]	; (8009c1c <tcp_input+0x2a4>)
 8009aac:	4854      	ldr	r0, [pc, #336]	; (8009c00 <tcp_input+0x288>)
 8009aae:	f008 fd65 	bl	801257c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	891a      	ldrh	r2, [r3, #8]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	891b      	ldrh	r3, [r3, #8]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d005      	beq.n	8009acc <tcp_input+0x154>
 8009ac0:	4b4d      	ldr	r3, [pc, #308]	; (8009bf8 <tcp_input+0x280>)
 8009ac2:	22e0      	movs	r2, #224	; 0xe0
 8009ac4:	4956      	ldr	r1, [pc, #344]	; (8009c20 <tcp_input+0x2a8>)
 8009ac6:	484e      	ldr	r0, [pc, #312]	; (8009c00 <tcp_input+0x288>)
 8009ac8:	f008 fd58 	bl	801257c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009acc:	4b4d      	ldr	r3, [pc, #308]	; (8009c04 <tcp_input+0x28c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	4a4b      	ldr	r2, [pc, #300]	; (8009c04 <tcp_input+0x28c>)
 8009ad6:	6814      	ldr	r4, [r2, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fc fdcb 	bl	8006674 <lwip_htons>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009ae2:	4b48      	ldr	r3, [pc, #288]	; (8009c04 <tcp_input+0x28c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	885b      	ldrh	r3, [r3, #2]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	4a46      	ldr	r2, [pc, #280]	; (8009c04 <tcp_input+0x28c>)
 8009aec:	6814      	ldr	r4, [r2, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fc fdc0 	bl	8006674 <lwip_htons>
 8009af4:	4603      	mov	r3, r0
 8009af6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009af8:	4b42      	ldr	r3, [pc, #264]	; (8009c04 <tcp_input+0x28c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	4a41      	ldr	r2, [pc, #260]	; (8009c04 <tcp_input+0x28c>)
 8009b00:	6814      	ldr	r4, [r2, #0]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fc fdcb 	bl	800669e <lwip_htonl>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	6863      	ldr	r3, [r4, #4]
 8009b0e:	4a45      	ldr	r2, [pc, #276]	; (8009c24 <tcp_input+0x2ac>)
 8009b10:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009b12:	4b3c      	ldr	r3, [pc, #240]	; (8009c04 <tcp_input+0x28c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4a3a      	ldr	r2, [pc, #232]	; (8009c04 <tcp_input+0x28c>)
 8009b1a:	6814      	ldr	r4, [r2, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fc fdbe 	bl	800669e <lwip_htonl>
 8009b22:	4603      	mov	r3, r0
 8009b24:	60a3      	str	r3, [r4, #8]
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	4a3f      	ldr	r2, [pc, #252]	; (8009c28 <tcp_input+0x2b0>)
 8009b2a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009b2c:	4b35      	ldr	r3, [pc, #212]	; (8009c04 <tcp_input+0x28c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	89db      	ldrh	r3, [r3, #14]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4a33      	ldr	r2, [pc, #204]	; (8009c04 <tcp_input+0x28c>)
 8009b36:	6814      	ldr	r4, [r2, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fc fd9b 	bl	8006674 <lwip_htons>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009b42:	4b30      	ldr	r3, [pc, #192]	; (8009c04 <tcp_input+0x28c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	899b      	ldrh	r3, [r3, #12]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fc fd92 	bl	8006674 <lwip_htons>
 8009b50:	4603      	mov	r3, r0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	4b34      	ldr	r3, [pc, #208]	; (8009c2c <tcp_input+0x2b4>)
 8009b5c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	891a      	ldrh	r2, [r3, #8]
 8009b62:	4b33      	ldr	r3, [pc, #204]	; (8009c30 <tcp_input+0x2b8>)
 8009b64:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009b66:	4b31      	ldr	r3, [pc, #196]	; (8009c2c <tcp_input+0x2b4>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00c      	beq.n	8009b8c <tcp_input+0x214>
    tcplen++;
 8009b72:	4b2f      	ldr	r3, [pc, #188]	; (8009c30 <tcp_input+0x2b8>)
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	3301      	adds	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	4b2d      	ldr	r3, [pc, #180]	; (8009c30 <tcp_input+0x2b8>)
 8009b7c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	891a      	ldrh	r2, [r3, #8]
 8009b82:	4b2b      	ldr	r3, [pc, #172]	; (8009c30 <tcp_input+0x2b8>)
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	f200 82e6 	bhi.w	800a158 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b90:	4b28      	ldr	r3, [pc, #160]	; (8009c34 <tcp_input+0x2bc>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	61fb      	str	r3, [r7, #28]
 8009b96:	e09d      	b.n	8009cd4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	7d1b      	ldrb	r3, [r3, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d105      	bne.n	8009bac <tcp_input+0x234>
 8009ba0:	4b15      	ldr	r3, [pc, #84]	; (8009bf8 <tcp_input+0x280>)
 8009ba2:	22fb      	movs	r2, #251	; 0xfb
 8009ba4:	4924      	ldr	r1, [pc, #144]	; (8009c38 <tcp_input+0x2c0>)
 8009ba6:	4816      	ldr	r0, [pc, #88]	; (8009c00 <tcp_input+0x288>)
 8009ba8:	f008 fce8 	bl	801257c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	7d1b      	ldrb	r3, [r3, #20]
 8009bb0:	2b0a      	cmp	r3, #10
 8009bb2:	d105      	bne.n	8009bc0 <tcp_input+0x248>
 8009bb4:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <tcp_input+0x280>)
 8009bb6:	22fc      	movs	r2, #252	; 0xfc
 8009bb8:	4920      	ldr	r1, [pc, #128]	; (8009c3c <tcp_input+0x2c4>)
 8009bba:	4811      	ldr	r0, [pc, #68]	; (8009c00 <tcp_input+0x288>)
 8009bbc:	f008 fcde 	bl	801257c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	7d1b      	ldrb	r3, [r3, #20]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d105      	bne.n	8009bd4 <tcp_input+0x25c>
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <tcp_input+0x280>)
 8009bca:	22fd      	movs	r2, #253	; 0xfd
 8009bcc:	491c      	ldr	r1, [pc, #112]	; (8009c40 <tcp_input+0x2c8>)
 8009bce:	480c      	ldr	r0, [pc, #48]	; (8009c00 <tcp_input+0x288>)
 8009bd0:	f008 fcd4 	bl	801257c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	7a1b      	ldrb	r3, [r3, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d033      	beq.n	8009c44 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	7a1a      	ldrb	r2, [r3, #8]
 8009be0:	4b09      	ldr	r3, [pc, #36]	; (8009c08 <tcp_input+0x290>)
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009be8:	3301      	adds	r3, #1
 8009bea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d029      	beq.n	8009c44 <tcp_input+0x2cc>
      prev = pcb;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	61bb      	str	r3, [r7, #24]
      continue;
 8009bf4:	e06b      	b.n	8009cce <tcp_input+0x356>
 8009bf6:	bf00      	nop
 8009bf8:	080145ec 	.word	0x080145ec
 8009bfc:	08014620 	.word	0x08014620
 8009c00:	08014638 	.word	0x08014638
 8009c04:	2000a7d8 	.word	0x2000a7d8
 8009c08:	20005060 	.word	0x20005060
 8009c0c:	2000a7dc 	.word	0x2000a7dc
 8009c10:	2000a7e0 	.word	0x2000a7e0
 8009c14:	2000a7de 	.word	0x2000a7de
 8009c18:	08014660 	.word	0x08014660
 8009c1c:	08014670 	.word	0x08014670
 8009c20:	0801467c 	.word	0x0801467c
 8009c24:	2000a7e8 	.word	0x2000a7e8
 8009c28:	2000a7ec 	.word	0x2000a7ec
 8009c2c:	2000a7f4 	.word	0x2000a7f4
 8009c30:	2000a7f2 	.word	0x2000a7f2
 8009c34:	2000a7bc 	.word	0x2000a7bc
 8009c38:	0801469c 	.word	0x0801469c
 8009c3c:	080146c4 	.word	0x080146c4
 8009c40:	080146f0 	.word	0x080146f0
    }

    if (pcb->remote_port == tcphdr->src &&
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	8b1a      	ldrh	r2, [r3, #24]
 8009c48:	4b72      	ldr	r3, [pc, #456]	; (8009e14 <tcp_input+0x49c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d13a      	bne.n	8009cca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	8ada      	ldrh	r2, [r3, #22]
 8009c58:	4b6e      	ldr	r3, [pc, #440]	; (8009e14 <tcp_input+0x49c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	885b      	ldrh	r3, [r3, #2]
 8009c5e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d132      	bne.n	8009cca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	4b6b      	ldr	r3, [pc, #428]	; (8009e18 <tcp_input+0x4a0>)
 8009c6a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d12c      	bne.n	8009cca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	4b68      	ldr	r3, [pc, #416]	; (8009e18 <tcp_input+0x4a0>)
 8009c76:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d126      	bne.n	8009cca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d106      	bne.n	8009c94 <tcp_input+0x31c>
 8009c86:	4b65      	ldr	r3, [pc, #404]	; (8009e1c <tcp_input+0x4a4>)
 8009c88:	f240 120d 	movw	r2, #269	; 0x10d
 8009c8c:	4964      	ldr	r1, [pc, #400]	; (8009e20 <tcp_input+0x4a8>)
 8009c8e:	4865      	ldr	r0, [pc, #404]	; (8009e24 <tcp_input+0x4ac>)
 8009c90:	f008 fc74 	bl	801257c <iprintf>
      if (prev != NULL) {
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <tcp_input+0x338>
        prev->next = pcb->next;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009ca2:	4b61      	ldr	r3, [pc, #388]	; (8009e28 <tcp_input+0x4b0>)
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009caa:	4a5f      	ldr	r2, [pc, #380]	; (8009e28 <tcp_input+0x4b0>)
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d111      	bne.n	8009cde <tcp_input+0x366>
 8009cba:	4b58      	ldr	r3, [pc, #352]	; (8009e1c <tcp_input+0x4a4>)
 8009cbc:	f240 1215 	movw	r2, #277	; 0x115
 8009cc0:	495a      	ldr	r1, [pc, #360]	; (8009e2c <tcp_input+0x4b4>)
 8009cc2:	4858      	ldr	r0, [pc, #352]	; (8009e24 <tcp_input+0x4ac>)
 8009cc4:	f008 fc5a 	bl	801257c <iprintf>
      break;
 8009cc8:	e009      	b.n	8009cde <tcp_input+0x366>
    }
    prev = pcb;
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	61fb      	str	r3, [r7, #28]
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f47f af5e 	bne.w	8009b98 <tcp_input+0x220>
 8009cdc:	e000      	b.n	8009ce0 <tcp_input+0x368>
      break;
 8009cde:	bf00      	nop
  }

  if (pcb == NULL) {
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f040 80aa 	bne.w	8009e3c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ce8:	4b51      	ldr	r3, [pc, #324]	; (8009e30 <tcp_input+0x4b8>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	61fb      	str	r3, [r7, #28]
 8009cee:	e03f      	b.n	8009d70 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	7d1b      	ldrb	r3, [r3, #20]
 8009cf4:	2b0a      	cmp	r3, #10
 8009cf6:	d006      	beq.n	8009d06 <tcp_input+0x38e>
 8009cf8:	4b48      	ldr	r3, [pc, #288]	; (8009e1c <tcp_input+0x4a4>)
 8009cfa:	f240 121f 	movw	r2, #287	; 0x11f
 8009cfe:	494d      	ldr	r1, [pc, #308]	; (8009e34 <tcp_input+0x4bc>)
 8009d00:	4848      	ldr	r0, [pc, #288]	; (8009e24 <tcp_input+0x4ac>)
 8009d02:	f008 fc3b 	bl	801257c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	7a1b      	ldrb	r3, [r3, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	7a1a      	ldrb	r2, [r3, #8]
 8009d12:	4b41      	ldr	r3, [pc, #260]	; (8009e18 <tcp_input+0x4a0>)
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d122      	bne.n	8009d68 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	8b1a      	ldrh	r2, [r3, #24]
 8009d26:	4b3b      	ldr	r3, [pc, #236]	; (8009e14 <tcp_input+0x49c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d11b      	bne.n	8009d6a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	8ada      	ldrh	r2, [r3, #22]
 8009d36:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <tcp_input+0x49c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	885b      	ldrh	r3, [r3, #2]
 8009d3c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d113      	bne.n	8009d6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	4b34      	ldr	r3, [pc, #208]	; (8009e18 <tcp_input+0x4a0>)
 8009d48:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d10d      	bne.n	8009d6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	4b31      	ldr	r3, [pc, #196]	; (8009e18 <tcp_input+0x4a0>)
 8009d54:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d107      	bne.n	8009d6a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009d5a:	69f8      	ldr	r0, [r7, #28]
 8009d5c:	f000 fb56 	bl	800a40c <tcp_timewait_input>
        }
        pbuf_free(p);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7fd ffd1 	bl	8007d08 <pbuf_free>
        return;
 8009d66:	e1fd      	b.n	800a164 <tcp_input+0x7ec>
        continue;
 8009d68:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	61fb      	str	r3, [r7, #28]
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1bc      	bne.n	8009cf0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009d76:	2300      	movs	r3, #0
 8009d78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d7a:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <tcp_input+0x4c0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	e02a      	b.n	8009dd8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	7a1b      	ldrb	r3, [r3, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00c      	beq.n	8009da4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	7a1a      	ldrb	r2, [r3, #8]
 8009d8e:	4b22      	ldr	r3, [pc, #136]	; (8009e18 <tcp_input+0x4a0>)
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d96:	3301      	adds	r3, #1
 8009d98:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d002      	beq.n	8009da4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	61bb      	str	r3, [r7, #24]
        continue;
 8009da2:	e016      	b.n	8009dd2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	8ada      	ldrh	r2, [r3, #22]
 8009da8:	4b1a      	ldr	r3, [pc, #104]	; (8009e14 <tcp_input+0x49c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	885b      	ldrh	r3, [r3, #2]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d10c      	bne.n	8009dce <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	4b17      	ldr	r3, [pc, #92]	; (8009e18 <tcp_input+0x4a0>)
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d00f      	beq.n	8009de0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00d      	beq.n	8009de2 <tcp_input+0x46a>
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1d1      	bne.n	8009d82 <tcp_input+0x40a>
 8009dde:	e000      	b.n	8009de2 <tcp_input+0x46a>
            break;
 8009de0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d029      	beq.n	8009e3c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	68da      	ldr	r2, [r3, #12]
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009df6:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <tcp_input+0x4c0>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009dfe:	4a0e      	ldr	r2, [pc, #56]	; (8009e38 <tcp_input+0x4c0>)
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009e04:	6978      	ldr	r0, [r7, #20]
 8009e06:	f000 fa03 	bl	800a210 <tcp_listen_input>
      }
      pbuf_free(p);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fd ff7c 	bl	8007d08 <pbuf_free>
      return;
 8009e10:	e1a8      	b.n	800a164 <tcp_input+0x7ec>
 8009e12:	bf00      	nop
 8009e14:	2000a7d8 	.word	0x2000a7d8
 8009e18:	20005060 	.word	0x20005060
 8009e1c:	080145ec 	.word	0x080145ec
 8009e20:	08014718 	.word	0x08014718
 8009e24:	08014638 	.word	0x08014638
 8009e28:	2000a7bc 	.word	0x2000a7bc
 8009e2c:	08014744 	.word	0x08014744
 8009e30:	2000a7c0 	.word	0x2000a7c0
 8009e34:	08014770 	.word	0x08014770
 8009e38:	2000a7b8 	.word	0x2000a7b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 8158 	beq.w	800a0f4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009e44:	4b95      	ldr	r3, [pc, #596]	; (800a09c <tcp_input+0x724>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	891a      	ldrh	r2, [r3, #8]
 8009e4e:	4b93      	ldr	r3, [pc, #588]	; (800a09c <tcp_input+0x724>)
 8009e50:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009e52:	4a92      	ldr	r2, [pc, #584]	; (800a09c <tcp_input+0x724>)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009e58:	4b91      	ldr	r3, [pc, #580]	; (800a0a0 <tcp_input+0x728>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a8f      	ldr	r2, [pc, #572]	; (800a09c <tcp_input+0x724>)
 8009e5e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009e60:	4b90      	ldr	r3, [pc, #576]	; (800a0a4 <tcp_input+0x72c>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009e66:	4b90      	ldr	r3, [pc, #576]	; (800a0a8 <tcp_input+0x730>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009e6c:	4b8f      	ldr	r3, [pc, #572]	; (800a0ac <tcp_input+0x734>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009e72:	4b8f      	ldr	r3, [pc, #572]	; (800a0b0 <tcp_input+0x738>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 0308 	and.w	r3, r3, #8
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d006      	beq.n	8009e8c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7b5b      	ldrb	r3, [r3, #13]
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d017      	beq.n	8009ec4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009e94:	69f8      	ldr	r0, [r7, #28]
 8009e96:	f7ff f929 	bl	80090ec <tcp_process_refused_data>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f113 0f0d 	cmn.w	r3, #13
 8009ea0:	d007      	beq.n	8009eb2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00c      	beq.n	8009ec4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009eaa:	4b82      	ldr	r3, [pc, #520]	; (800a0b4 <tcp_input+0x73c>)
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d008      	beq.n	8009ec4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f040 80e3 	bne.w	800a082 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009ebc:	69f8      	ldr	r0, [r7, #28]
 8009ebe:	f003 f9ad 	bl	800d21c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009ec2:	e0de      	b.n	800a082 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009ec4:	4a7c      	ldr	r2, [pc, #496]	; (800a0b8 <tcp_input+0x740>)
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009eca:	69f8      	ldr	r0, [r7, #28]
 8009ecc:	f000 fb18 	bl	800a500 <tcp_process>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009ed4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ed8:	f113 0f0d 	cmn.w	r3, #13
 8009edc:	f000 80d3 	beq.w	800a086 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009ee0:	4b71      	ldr	r3, [pc, #452]	; (800a0a8 <tcp_input+0x730>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	f003 0308 	and.w	r3, r3, #8
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d015      	beq.n	8009f18 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d008      	beq.n	8009f08 <tcp_input+0x590>
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efc:	69fa      	ldr	r2, [r7, #28]
 8009efe:	6912      	ldr	r2, [r2, #16]
 8009f00:	f06f 010d 	mvn.w	r1, #13
 8009f04:	4610      	mov	r0, r2
 8009f06:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009f08:	69f9      	ldr	r1, [r7, #28]
 8009f0a:	486c      	ldr	r0, [pc, #432]	; (800a0bc <tcp_input+0x744>)
 8009f0c:	f7ff fbbc 	bl	8009688 <tcp_pcb_remove>
        tcp_free(pcb);
 8009f10:	69f8      	ldr	r0, [r7, #28]
 8009f12:	f7fe f9a9 	bl	8008268 <tcp_free>
 8009f16:	e0da      	b.n	800a0ce <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009f1c:	4b63      	ldr	r3, [pc, #396]	; (800a0ac <tcp_input+0x734>)
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01d      	beq.n	8009f60 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009f24:	4b61      	ldr	r3, [pc, #388]	; (800a0ac <tcp_input+0x734>)
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <tcp_input+0x5d2>
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	6910      	ldr	r0, [r2, #16]
 8009f3e:	89fa      	ldrh	r2, [r7, #14]
 8009f40:	69f9      	ldr	r1, [r7, #28]
 8009f42:	4798      	blx	r3
 8009f44:	4603      	mov	r3, r0
 8009f46:	74fb      	strb	r3, [r7, #19]
 8009f48:	e001      	b.n	8009f4e <tcp_input+0x5d6>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009f4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f52:	f113 0f0d 	cmn.w	r3, #13
 8009f56:	f000 8098 	beq.w	800a08a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009f5a:	4b54      	ldr	r3, [pc, #336]	; (800a0ac <tcp_input+0x734>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009f60:	69f8      	ldr	r0, [r7, #28]
 8009f62:	f000 f915 	bl	800a190 <tcp_input_delayed_close>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f040 8090 	bne.w	800a08e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009f6e:	4b4d      	ldr	r3, [pc, #308]	; (800a0a4 <tcp_input+0x72c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d041      	beq.n	8009ffa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d006      	beq.n	8009f8c <tcp_input+0x614>
 8009f7e:	4b50      	ldr	r3, [pc, #320]	; (800a0c0 <tcp_input+0x748>)
 8009f80:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009f84:	494f      	ldr	r1, [pc, #316]	; (800a0c4 <tcp_input+0x74c>)
 8009f86:	4850      	ldr	r0, [pc, #320]	; (800a0c8 <tcp_input+0x750>)
 8009f88:	f008 faf8 	bl	801257c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	8b5b      	ldrh	r3, [r3, #26]
 8009f90:	f003 0310 	and.w	r3, r3, #16
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d008      	beq.n	8009faa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009f98:	4b42      	ldr	r3, [pc, #264]	; (800a0a4 <tcp_input+0x72c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fd feb3 	bl	8007d08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009fa2:	69f8      	ldr	r0, [r7, #28]
 8009fa4:	f7fe fc48 	bl	8008838 <tcp_abort>
            goto aborted;
 8009fa8:	e091      	b.n	800a0ce <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00c      	beq.n	8009fce <tcp_input+0x656>
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	6918      	ldr	r0, [r3, #16]
 8009fbe:	4b39      	ldr	r3, [pc, #228]	; (800a0a4 <tcp_input+0x72c>)
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	69f9      	ldr	r1, [r7, #28]
 8009fc6:	47a0      	blx	r4
 8009fc8:	4603      	mov	r3, r0
 8009fca:	74fb      	strb	r3, [r7, #19]
 8009fcc:	e008      	b.n	8009fe0 <tcp_input+0x668>
 8009fce:	4b35      	ldr	r3, [pc, #212]	; (800a0a4 <tcp_input+0x72c>)
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	69f9      	ldr	r1, [r7, #28]
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	f7ff f95e 	bl	8009298 <tcp_recv_null>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009fe0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fe4:	f113 0f0d 	cmn.w	r3, #13
 8009fe8:	d053      	beq.n	800a092 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009fea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009ff2:	4b2c      	ldr	r3, [pc, #176]	; (800a0a4 <tcp_input+0x72c>)
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009ffa:	4b2b      	ldr	r3, [pc, #172]	; (800a0a8 <tcp_input+0x730>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d030      	beq.n	800a068 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d009      	beq.n	800a022 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a012:	7b5a      	ldrb	r2, [r3, #13]
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a018:	f042 0220 	orr.w	r2, r2, #32
 800a01c:	b2d2      	uxtb	r2, r2
 800a01e:	735a      	strb	r2, [r3, #13]
 800a020:	e022      	b.n	800a068 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a026:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a02a:	d005      	beq.n	800a038 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a030:	3301      	adds	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <tcp_input+0x6e2>
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	6918      	ldr	r0, [r3, #16]
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	69f9      	ldr	r1, [r7, #28]
 800a052:	47a0      	blx	r4
 800a054:	4603      	mov	r3, r0
 800a056:	74fb      	strb	r3, [r7, #19]
 800a058:	e001      	b.n	800a05e <tcp_input+0x6e6>
 800a05a:	2300      	movs	r3, #0
 800a05c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a05e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a062:	f113 0f0d 	cmn.w	r3, #13
 800a066:	d016      	beq.n	800a096 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <tcp_input+0x740>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a06e:	69f8      	ldr	r0, [r7, #28]
 800a070:	f000 f88e 	bl	800a190 <tcp_input_delayed_close>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d128      	bne.n	800a0cc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a07a:	69f8      	ldr	r0, [r7, #28]
 800a07c:	f002 fac8 	bl	800c610 <tcp_output>
 800a080:	e025      	b.n	800a0ce <tcp_input+0x756>
        goto aborted;
 800a082:	bf00      	nop
 800a084:	e023      	b.n	800a0ce <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a086:	bf00      	nop
 800a088:	e021      	b.n	800a0ce <tcp_input+0x756>
              goto aborted;
 800a08a:	bf00      	nop
 800a08c:	e01f      	b.n	800a0ce <tcp_input+0x756>
          goto aborted;
 800a08e:	bf00      	nop
 800a090:	e01d      	b.n	800a0ce <tcp_input+0x756>
            goto aborted;
 800a092:	bf00      	nop
 800a094:	e01b      	b.n	800a0ce <tcp_input+0x756>
              goto aborted;
 800a096:	bf00      	nop
 800a098:	e019      	b.n	800a0ce <tcp_input+0x756>
 800a09a:	bf00      	nop
 800a09c:	2000a7c8 	.word	0x2000a7c8
 800a0a0:	2000a7d8 	.word	0x2000a7d8
 800a0a4:	2000a7f8 	.word	0x2000a7f8
 800a0a8:	2000a7f5 	.word	0x2000a7f5
 800a0ac:	2000a7f0 	.word	0x2000a7f0
 800a0b0:	2000a7f4 	.word	0x2000a7f4
 800a0b4:	2000a7f2 	.word	0x2000a7f2
 800a0b8:	2000a7fc 	.word	0x2000a7fc
 800a0bc:	2000a7bc 	.word	0x2000a7bc
 800a0c0:	080145ec 	.word	0x080145ec
 800a0c4:	080147a0 	.word	0x080147a0
 800a0c8:	08014638 	.word	0x08014638
          goto aborted;
 800a0cc:	bf00      	nop
    tcp_input_pcb = NULL;
 800a0ce:	4b27      	ldr	r3, [pc, #156]	; (800a16c <tcp_input+0x7f4>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a0d4:	4b26      	ldr	r3, [pc, #152]	; (800a170 <tcp_input+0x7f8>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a0da:	4b26      	ldr	r3, [pc, #152]	; (800a174 <tcp_input+0x7fc>)
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d03f      	beq.n	800a162 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a0e2:	4b24      	ldr	r3, [pc, #144]	; (800a174 <tcp_input+0x7fc>)
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fd fe0e 	bl	8007d08 <pbuf_free>
      inseg.p = NULL;
 800a0ec:	4b21      	ldr	r3, [pc, #132]	; (800a174 <tcp_input+0x7fc>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a0f2:	e036      	b.n	800a162 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a0f4:	4b20      	ldr	r3, [pc, #128]	; (800a178 <tcp_input+0x800>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	899b      	ldrh	r3, [r3, #12]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fc fab9 	bl	8006674 <lwip_htons>
 800a102:	4603      	mov	r3, r0
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d118      	bne.n	800a140 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a10e:	4b1b      	ldr	r3, [pc, #108]	; (800a17c <tcp_input+0x804>)
 800a110:	6819      	ldr	r1, [r3, #0]
 800a112:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <tcp_input+0x808>)
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	4b1a      	ldr	r3, [pc, #104]	; (800a184 <tcp_input+0x80c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a11e:	4b16      	ldr	r3, [pc, #88]	; (800a178 <tcp_input+0x800>)
 800a120:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a122:	885b      	ldrh	r3, [r3, #2]
 800a124:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a126:	4a14      	ldr	r2, [pc, #80]	; (800a178 <tcp_input+0x800>)
 800a128:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a12a:	8812      	ldrh	r2, [r2, #0]
 800a12c:	b292      	uxth	r2, r2
 800a12e:	9202      	str	r2, [sp, #8]
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <tcp_input+0x810>)
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	4b15      	ldr	r3, [pc, #84]	; (800a18c <tcp_input+0x814>)
 800a138:	4602      	mov	r2, r0
 800a13a:	2000      	movs	r0, #0
 800a13c:	f003 f81c 	bl	800d178 <tcp_rst>
    pbuf_free(p);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7fd fde1 	bl	8007d08 <pbuf_free>
  return;
 800a146:	e00c      	b.n	800a162 <tcp_input+0x7ea>
    goto dropped;
 800a148:	bf00      	nop
 800a14a:	e006      	b.n	800a15a <tcp_input+0x7e2>
    goto dropped;
 800a14c:	bf00      	nop
 800a14e:	e004      	b.n	800a15a <tcp_input+0x7e2>
    goto dropped;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <tcp_input+0x7e2>
      goto dropped;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <tcp_input+0x7e2>
      goto dropped;
 800a158:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7fd fdd4 	bl	8007d08 <pbuf_free>
 800a160:	e000      	b.n	800a164 <tcp_input+0x7ec>
  return;
 800a162:	bf00      	nop
}
 800a164:	3724      	adds	r7, #36	; 0x24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd90      	pop	{r4, r7, pc}
 800a16a:	bf00      	nop
 800a16c:	2000a7fc 	.word	0x2000a7fc
 800a170:	2000a7f8 	.word	0x2000a7f8
 800a174:	2000a7c8 	.word	0x2000a7c8
 800a178:	2000a7d8 	.word	0x2000a7d8
 800a17c:	2000a7ec 	.word	0x2000a7ec
 800a180:	2000a7f2 	.word	0x2000a7f2
 800a184:	2000a7e8 	.word	0x2000a7e8
 800a188:	20005070 	.word	0x20005070
 800a18c:	20005074 	.word	0x20005074

0800a190 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d106      	bne.n	800a1ac <tcp_input_delayed_close+0x1c>
 800a19e:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <tcp_input_delayed_close+0x6c>)
 800a1a0:	f240 225a 	movw	r2, #602	; 0x25a
 800a1a4:	4916      	ldr	r1, [pc, #88]	; (800a200 <tcp_input_delayed_close+0x70>)
 800a1a6:	4817      	ldr	r0, [pc, #92]	; (800a204 <tcp_input_delayed_close+0x74>)
 800a1a8:	f008 f9e8 	bl	801257c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a1ac:	4b16      	ldr	r3, [pc, #88]	; (800a208 <tcp_input_delayed_close+0x78>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01c      	beq.n	800a1f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	8b5b      	ldrh	r3, [r3, #26]
 800a1bc:	f003 0310 	and.w	r3, r3, #16
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10d      	bne.n	800a1e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d008      	beq.n	800a1e0 <tcp_input_delayed_close+0x50>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	6912      	ldr	r2, [r2, #16]
 800a1d8:	f06f 010e 	mvn.w	r1, #14
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	480a      	ldr	r0, [pc, #40]	; (800a20c <tcp_input_delayed_close+0x7c>)
 800a1e4:	f7ff fa50 	bl	8009688 <tcp_pcb_remove>
    tcp_free(pcb);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7fe f83d 	bl	8008268 <tcp_free>
    return 1;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	080145ec 	.word	0x080145ec
 800a200:	080147bc 	.word	0x080147bc
 800a204:	08014638 	.word	0x08014638
 800a208:	2000a7f5 	.word	0x2000a7f5
 800a20c:	2000a7bc 	.word	0x2000a7bc

0800a210 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a210:	b590      	push	{r4, r7, lr}
 800a212:	b08b      	sub	sp, #44	; 0x2c
 800a214:	af04      	add	r7, sp, #16
 800a216:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a218:	4b6f      	ldr	r3, [pc, #444]	; (800a3d8 <tcp_listen_input+0x1c8>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	f003 0304 	and.w	r3, r3, #4
 800a220:	2b00      	cmp	r3, #0
 800a222:	f040 80d2 	bne.w	800a3ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <tcp_listen_input+0x2a>
 800a22c:	4b6b      	ldr	r3, [pc, #428]	; (800a3dc <tcp_listen_input+0x1cc>)
 800a22e:	f240 2281 	movw	r2, #641	; 0x281
 800a232:	496b      	ldr	r1, [pc, #428]	; (800a3e0 <tcp_listen_input+0x1d0>)
 800a234:	486b      	ldr	r0, [pc, #428]	; (800a3e4 <tcp_listen_input+0x1d4>)
 800a236:	f008 f9a1 	bl	801257c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a23a:	4b67      	ldr	r3, [pc, #412]	; (800a3d8 <tcp_listen_input+0x1c8>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	f003 0310 	and.w	r3, r3, #16
 800a242:	2b00      	cmp	r3, #0
 800a244:	d019      	beq.n	800a27a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a246:	4b68      	ldr	r3, [pc, #416]	; (800a3e8 <tcp_listen_input+0x1d8>)
 800a248:	6819      	ldr	r1, [r3, #0]
 800a24a:	4b68      	ldr	r3, [pc, #416]	; (800a3ec <tcp_listen_input+0x1dc>)
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	4b67      	ldr	r3, [pc, #412]	; (800a3f0 <tcp_listen_input+0x1e0>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a256:	4b67      	ldr	r3, [pc, #412]	; (800a3f4 <tcp_listen_input+0x1e4>)
 800a258:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a25a:	885b      	ldrh	r3, [r3, #2]
 800a25c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a25e:	4a65      	ldr	r2, [pc, #404]	; (800a3f4 <tcp_listen_input+0x1e4>)
 800a260:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a262:	8812      	ldrh	r2, [r2, #0]
 800a264:	b292      	uxth	r2, r2
 800a266:	9202      	str	r2, [sp, #8]
 800a268:	9301      	str	r3, [sp, #4]
 800a26a:	4b63      	ldr	r3, [pc, #396]	; (800a3f8 <tcp_listen_input+0x1e8>)
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4b63      	ldr	r3, [pc, #396]	; (800a3fc <tcp_listen_input+0x1ec>)
 800a270:	4602      	mov	r2, r0
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f002 ff80 	bl	800d178 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a278:	e0a9      	b.n	800a3ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a27a:	4b57      	ldr	r3, [pc, #348]	; (800a3d8 <tcp_listen_input+0x1c8>)
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 80a3 	beq.w	800a3ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	7d5b      	ldrb	r3, [r3, #21]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff f927 	bl	80094e0 <tcp_alloc>
 800a292:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d111      	bne.n	800a2be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <tcp_listen_input+0xa8>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6910      	ldr	r0, [r2, #16]
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73bb      	strb	r3, [r7, #14]
      return;
 800a2b6:	e08b      	b.n	800a3d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a2b8:	23f0      	movs	r3, #240	; 0xf0
 800a2ba:	73bb      	strb	r3, [r7, #14]
      return;
 800a2bc:	e088      	b.n	800a3d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a2be:	4b50      	ldr	r3, [pc, #320]	; (800a400 <tcp_listen_input+0x1f0>)
 800a2c0:	695a      	ldr	r2, [r3, #20]
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a2c6:	4b4e      	ldr	r3, [pc, #312]	; (800a400 <tcp_listen_input+0x1f0>)
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	8ada      	ldrh	r2, [r3, #22]
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a2d6:	4b47      	ldr	r3, [pc, #284]	; (800a3f4 <tcp_listen_input+0x1e4>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a2e8:	4b41      	ldr	r3, [pc, #260]	; (800a3f0 <tcp_listen_input+0x1e0>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a2fa:	6978      	ldr	r0, [r7, #20]
 800a2fc:	f7ff fa58 	bl	80097b0 <tcp_next_iss>
 800a300:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a31a:	4b35      	ldr	r3, [pc, #212]	; (800a3f0 <tcp_listen_input+0x1e0>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	1e5a      	subs	r2, r3, #1
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691a      	ldr	r2, [r3, #16]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	7a5b      	ldrb	r3, [r3, #9]
 800a336:	f003 030c 	and.w	r3, r3, #12
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7a1a      	ldrb	r2, [r3, #8]
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a348:	4b2e      	ldr	r3, [pc, #184]	; (800a404 <tcp_listen_input+0x1f4>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	60da      	str	r2, [r3, #12]
 800a350:	4a2c      	ldr	r2, [pc, #176]	; (800a404 <tcp_listen_input+0x1f4>)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	f003 f8d1 	bl	800d4fc <tcp_timer_needed>
 800a35a:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <tcp_listen_input+0x1f8>)
 800a35c:	2201      	movs	r2, #1
 800a35e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a360:	6978      	ldr	r0, [r7, #20]
 800a362:	f001 fd8f 	bl	800be84 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a366:	4b23      	ldr	r3, [pc, #140]	; (800a3f4 <tcp_listen_input+0x1e4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	89db      	ldrh	r3, [r3, #14]
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	3304      	adds	r3, #4
 800a388:	4618      	mov	r0, r3
 800a38a:	f006 fded 	bl	8010f68 <ip4_route>
 800a38e:	4601      	mov	r1, r0
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	3304      	adds	r3, #4
 800a394:	461a      	mov	r2, r3
 800a396:	4620      	mov	r0, r4
 800a398:	f7ff fa30 	bl	80097fc <tcp_eff_send_mss_netif>
 800a39c:	4603      	mov	r3, r0
 800a39e:	461a      	mov	r2, r3
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a3a4:	2112      	movs	r1, #18
 800a3a6:	6978      	ldr	r0, [r7, #20]
 800a3a8:	f002 f844 	bl	800c434 <tcp_enqueue_flags>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d004      	beq.n	800a3c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	6978      	ldr	r0, [r7, #20]
 800a3bc:	f7fe f97e 	bl	80086bc <tcp_abandon>
      return;
 800a3c0:	e006      	b.n	800a3d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a3c2:	6978      	ldr	r0, [r7, #20]
 800a3c4:	f002 f924 	bl	800c610 <tcp_output>
  return;
 800a3c8:	e001      	b.n	800a3ce <tcp_listen_input+0x1be>
    return;
 800a3ca:	bf00      	nop
 800a3cc:	e000      	b.n	800a3d0 <tcp_listen_input+0x1c0>
  return;
 800a3ce:	bf00      	nop
}
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd90      	pop	{r4, r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	2000a7f4 	.word	0x2000a7f4
 800a3dc:	080145ec 	.word	0x080145ec
 800a3e0:	080147e4 	.word	0x080147e4
 800a3e4:	08014638 	.word	0x08014638
 800a3e8:	2000a7ec 	.word	0x2000a7ec
 800a3ec:	2000a7f2 	.word	0x2000a7f2
 800a3f0:	2000a7e8 	.word	0x2000a7e8
 800a3f4:	2000a7d8 	.word	0x2000a7d8
 800a3f8:	20005070 	.word	0x20005070
 800a3fc:	20005074 	.word	0x20005074
 800a400:	20005060 	.word	0x20005060
 800a404:	2000a7bc 	.word	0x2000a7bc
 800a408:	2000a7c4 	.word	0x2000a7c4

0800a40c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af04      	add	r7, sp, #16
 800a412:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a414:	4b2f      	ldr	r3, [pc, #188]	; (800a4d4 <tcp_timewait_input+0xc8>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d153      	bne.n	800a4c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <tcp_timewait_input+0x28>
 800a426:	4b2c      	ldr	r3, [pc, #176]	; (800a4d8 <tcp_timewait_input+0xcc>)
 800a428:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a42c:	492b      	ldr	r1, [pc, #172]	; (800a4dc <tcp_timewait_input+0xd0>)
 800a42e:	482c      	ldr	r0, [pc, #176]	; (800a4e0 <tcp_timewait_input+0xd4>)
 800a430:	f008 f8a4 	bl	801257c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a434:	4b27      	ldr	r3, [pc, #156]	; (800a4d4 <tcp_timewait_input+0xc8>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d02a      	beq.n	800a496 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a440:	4b28      	ldr	r3, [pc, #160]	; (800a4e4 <tcp_timewait_input+0xd8>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	db2d      	blt.n	800a4aa <tcp_timewait_input+0x9e>
 800a44e:	4b25      	ldr	r3, [pc, #148]	; (800a4e4 <tcp_timewait_input+0xd8>)
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a45a:	440b      	add	r3, r1
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dc23      	bgt.n	800a4aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a462:	4b21      	ldr	r3, [pc, #132]	; (800a4e8 <tcp_timewait_input+0xdc>)
 800a464:	6819      	ldr	r1, [r3, #0]
 800a466:	4b21      	ldr	r3, [pc, #132]	; (800a4ec <tcp_timewait_input+0xe0>)
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <tcp_timewait_input+0xd8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a472:	4b1f      	ldr	r3, [pc, #124]	; (800a4f0 <tcp_timewait_input+0xe4>)
 800a474:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a476:	885b      	ldrh	r3, [r3, #2]
 800a478:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a47a:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <tcp_timewait_input+0xe4>)
 800a47c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a47e:	8812      	ldrh	r2, [r2, #0]
 800a480:	b292      	uxth	r2, r2
 800a482:	9202      	str	r2, [sp, #8]
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	4b1b      	ldr	r3, [pc, #108]	; (800a4f4 <tcp_timewait_input+0xe8>)
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	4b1b      	ldr	r3, [pc, #108]	; (800a4f8 <tcp_timewait_input+0xec>)
 800a48c:	4602      	mov	r2, r0
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f002 fe72 	bl	800d178 <tcp_rst>
      return;
 800a494:	e01b      	b.n	800a4ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a496:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <tcp_timewait_input+0xc8>)
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a4a2:	4b16      	ldr	r3, [pc, #88]	; (800a4fc <tcp_timewait_input+0xf0>)
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a4aa:	4b10      	ldr	r3, [pc, #64]	; (800a4ec <tcp_timewait_input+0xe0>)
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	8b5b      	ldrh	r3, [r3, #26]
 800a4b6:	f043 0302 	orr.w	r3, r3, #2
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f002 f8a5 	bl	800c610 <tcp_output>
  }
  return;
 800a4c6:	e001      	b.n	800a4cc <tcp_timewait_input+0xc0>
    return;
 800a4c8:	bf00      	nop
 800a4ca:	e000      	b.n	800a4ce <tcp_timewait_input+0xc2>
  return;
 800a4cc:	bf00      	nop
}
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	2000a7f4 	.word	0x2000a7f4
 800a4d8:	080145ec 	.word	0x080145ec
 800a4dc:	08014804 	.word	0x08014804
 800a4e0:	08014638 	.word	0x08014638
 800a4e4:	2000a7e8 	.word	0x2000a7e8
 800a4e8:	2000a7ec 	.word	0x2000a7ec
 800a4ec:	2000a7f2 	.word	0x2000a7f2
 800a4f0:	2000a7d8 	.word	0x2000a7d8
 800a4f4:	20005070 	.word	0x20005070
 800a4f8:	20005074 	.word	0x20005074
 800a4fc:	2000a7b0 	.word	0x2000a7b0

0800a500 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a500:	b590      	push	{r4, r7, lr}
 800a502:	b08d      	sub	sp, #52	; 0x34
 800a504:	af04      	add	r7, sp, #16
 800a506:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d106      	bne.n	800a524 <tcp_process+0x24>
 800a516:	4b9d      	ldr	r3, [pc, #628]	; (800a78c <tcp_process+0x28c>)
 800a518:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a51c:	499c      	ldr	r1, [pc, #624]	; (800a790 <tcp_process+0x290>)
 800a51e:	489d      	ldr	r0, [pc, #628]	; (800a794 <tcp_process+0x294>)
 800a520:	f008 f82c 	bl	801257c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a524:	4b9c      	ldr	r3, [pc, #624]	; (800a798 <tcp_process+0x298>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d04e      	beq.n	800a5ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	7d1b      	ldrb	r3, [r3, #20]
 800a534:	2b02      	cmp	r3, #2
 800a536:	d108      	bne.n	800a54a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a53c:	4b97      	ldr	r3, [pc, #604]	; (800a79c <tcp_process+0x29c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d123      	bne.n	800a58c <tcp_process+0x8c>
        acceptable = 1;
 800a544:	2301      	movs	r3, #1
 800a546:	76fb      	strb	r3, [r7, #27]
 800a548:	e020      	b.n	800a58c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a54e:	4b94      	ldr	r3, [pc, #592]	; (800a7a0 <tcp_process+0x2a0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d102      	bne.n	800a55c <tcp_process+0x5c>
        acceptable = 1;
 800a556:	2301      	movs	r3, #1
 800a558:	76fb      	strb	r3, [r7, #27]
 800a55a:	e017      	b.n	800a58c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a55c:	4b90      	ldr	r3, [pc, #576]	; (800a7a0 <tcp_process+0x2a0>)
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	db10      	blt.n	800a58c <tcp_process+0x8c>
 800a56a:	4b8d      	ldr	r3, [pc, #564]	; (800a7a0 <tcp_process+0x2a0>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a576:	440b      	add	r3, r1
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dc06      	bgt.n	800a58c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	8b5b      	ldrh	r3, [r3, #26]
 800a582:	f043 0302 	orr.w	r3, r3, #2
 800a586:	b29a      	uxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a58c:	7efb      	ldrb	r3, [r7, #27]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d01b      	beq.n	800a5ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	7d1b      	ldrb	r3, [r3, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d106      	bne.n	800a5a8 <tcp_process+0xa8>
 800a59a:	4b7c      	ldr	r3, [pc, #496]	; (800a78c <tcp_process+0x28c>)
 800a59c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a5a0:	4980      	ldr	r1, [pc, #512]	; (800a7a4 <tcp_process+0x2a4>)
 800a5a2:	487c      	ldr	r0, [pc, #496]	; (800a794 <tcp_process+0x294>)
 800a5a4:	f007 ffea 	bl	801257c <iprintf>
      recv_flags |= TF_RESET;
 800a5a8:	4b7f      	ldr	r3, [pc, #508]	; (800a7a8 <tcp_process+0x2a8>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	f043 0308 	orr.w	r3, r3, #8
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	4b7d      	ldr	r3, [pc, #500]	; (800a7a8 <tcp_process+0x2a8>)
 800a5b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	8b5b      	ldrh	r3, [r3, #26]
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a5c4:	f06f 030d 	mvn.w	r3, #13
 800a5c8:	e37a      	b.n	800acc0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e378      	b.n	800acc0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a5ce:	4b72      	ldr	r3, [pc, #456]	; (800a798 <tcp_process+0x298>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d010      	beq.n	800a5fc <tcp_process+0xfc>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7d1b      	ldrb	r3, [r3, #20]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d00c      	beq.n	800a5fc <tcp_process+0xfc>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	7d1b      	ldrb	r3, [r3, #20]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d008      	beq.n	800a5fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8b5b      	ldrh	r3, [r3, #26]
 800a5ee:	f043 0302 	orr.w	r3, r3, #2
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e361      	b.n	800acc0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	8b5b      	ldrh	r3, [r3, #26]
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b00      	cmp	r3, #0
 800a606:	d103      	bne.n	800a610 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a608:	4b68      	ldr	r3, [pc, #416]	; (800a7ac <tcp_process+0x2ac>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 fc2f 	bl	800be84 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7d1b      	ldrb	r3, [r3, #20]
 800a62a:	3b02      	subs	r3, #2
 800a62c:	2b07      	cmp	r3, #7
 800a62e:	f200 8337 	bhi.w	800aca0 <tcp_process+0x7a0>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <tcp_process+0x138>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a659 	.word	0x0800a659
 800a63c:	0800a889 	.word	0x0800a889
 800a640:	0800aa01 	.word	0x0800aa01
 800a644:	0800aa2b 	.word	0x0800aa2b
 800a648:	0800ab4f 	.word	0x0800ab4f
 800a64c:	0800aa01 	.word	0x0800aa01
 800a650:	0800abdb 	.word	0x0800abdb
 800a654:	0800ac6b 	.word	0x0800ac6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a658:	4b4f      	ldr	r3, [pc, #316]	; (800a798 <tcp_process+0x298>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 80e4 	beq.w	800a82e <tcp_process+0x32e>
 800a666:	4b4c      	ldr	r3, [pc, #304]	; (800a798 <tcp_process+0x298>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80dd 	beq.w	800a82e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	4b48      	ldr	r3, [pc, #288]	; (800a79c <tcp_process+0x29c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	f040 80d5 	bne.w	800a82e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a684:	4b46      	ldr	r3, [pc, #280]	; (800a7a0 <tcp_process+0x2a0>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a696:	4b41      	ldr	r3, [pc, #260]	; (800a79c <tcp_process+0x29c>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a69e:	4b44      	ldr	r3, [pc, #272]	; (800a7b0 <tcp_process+0x2b0>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	89db      	ldrh	r3, [r3, #14]
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a6b8:	4b39      	ldr	r3, [pc, #228]	; (800a7a0 <tcp_process+0x2a0>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	1e5a      	subs	r2, r3, #1
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f006 fc49 	bl	8010f68 <ip4_route>
 800a6d6:	4601      	mov	r1, r0
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7ff f88c 	bl	80097fc <tcp_eff_send_mss_netif>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6f0:	009a      	lsls	r2, r3, #2
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	f241 111c 	movw	r1, #4380	; 0x111c
 800a6fc:	428b      	cmp	r3, r1
 800a6fe:	bf38      	it	cc
 800a700:	460b      	movcc	r3, r1
 800a702:	429a      	cmp	r2, r3
 800a704:	d204      	bcs.n	800a710 <tcp_process+0x210>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	e00d      	b.n	800a72c <tcp_process+0x22c>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	f241 121c 	movw	r2, #4380	; 0x111c
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d904      	bls.n	800a728 <tcp_process+0x228>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	b29b      	uxth	r3, r3
 800a726:	e001      	b.n	800a72c <tcp_process+0x22c>
 800a728:	f241 131c 	movw	r3, #4380	; 0x111c
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d106      	bne.n	800a74a <tcp_process+0x24a>
 800a73c:	4b13      	ldr	r3, [pc, #76]	; (800a78c <tcp_process+0x28c>)
 800a73e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a742:	491c      	ldr	r1, [pc, #112]	; (800a7b4 <tcp_process+0x2b4>)
 800a744:	4813      	ldr	r0, [pc, #76]	; (800a794 <tcp_process+0x294>)
 800a746:	f007 ff19 	bl	801257c <iprintf>
        --pcb->snd_queuelen;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a750:	3b01      	subs	r3, #1
 800a752:	b29a      	uxth	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d12a      	bne.n	800a7bc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a76a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <tcp_process+0x280>
 800a772:	4b06      	ldr	r3, [pc, #24]	; (800a78c <tcp_process+0x28c>)
 800a774:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a778:	490f      	ldr	r1, [pc, #60]	; (800a7b8 <tcp_process+0x2b8>)
 800a77a:	4806      	ldr	r0, [pc, #24]	; (800a794 <tcp_process+0x294>)
 800a77c:	f007 fefe 	bl	801257c <iprintf>
          pcb->unsent = rseg->next;
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	66da      	str	r2, [r3, #108]	; 0x6c
 800a788:	e01c      	b.n	800a7c4 <tcp_process+0x2c4>
 800a78a:	bf00      	nop
 800a78c:	080145ec 	.word	0x080145ec
 800a790:	08014824 	.word	0x08014824
 800a794:	08014638 	.word	0x08014638
 800a798:	2000a7f4 	.word	0x2000a7f4
 800a79c:	2000a7ec 	.word	0x2000a7ec
 800a7a0:	2000a7e8 	.word	0x2000a7e8
 800a7a4:	08014840 	.word	0x08014840
 800a7a8:	2000a7f5 	.word	0x2000a7f5
 800a7ac:	2000a7b0 	.word	0x2000a7b0
 800a7b0:	2000a7d8 	.word	0x2000a7d8
 800a7b4:	08014860 	.word	0x08014860
 800a7b8:	08014878 	.word	0x08014878
        } else {
          pcb->unacked = rseg->next;
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a7c4:	69f8      	ldr	r0, [r7, #28]
 800a7c6:	f7fe fd22 	bl	800920e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d104      	bne.n	800a7dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7d8:	861a      	strh	r2, [r3, #48]	; 0x30
 800a7da:	e006      	b.n	800a7ea <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00a      	beq.n	800a80a <tcp_process+0x30a>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	6910      	ldr	r0, [r2, #16]
 800a7fe:	2200      	movs	r2, #0
 800a800:	6879      	ldr	r1, [r7, #4]
 800a802:	4798      	blx	r3
 800a804:	4603      	mov	r3, r0
 800a806:	76bb      	strb	r3, [r7, #26]
 800a808:	e001      	b.n	800a80e <tcp_process+0x30e>
 800a80a:	2300      	movs	r3, #0
 800a80c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a80e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a812:	f113 0f0d 	cmn.w	r3, #13
 800a816:	d102      	bne.n	800a81e <tcp_process+0x31e>
          return ERR_ABRT;
 800a818:	f06f 030c 	mvn.w	r3, #12
 800a81c:	e250      	b.n	800acc0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	8b5b      	ldrh	r3, [r3, #26]
 800a822:	f043 0302 	orr.w	r3, r3, #2
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a82c:	e23a      	b.n	800aca4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a82e:	4b98      	ldr	r3, [pc, #608]	; (800aa90 <tcp_process+0x590>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	f003 0310 	and.w	r3, r3, #16
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 8234 	beq.w	800aca4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a83c:	4b95      	ldr	r3, [pc, #596]	; (800aa94 <tcp_process+0x594>)
 800a83e:	6819      	ldr	r1, [r3, #0]
 800a840:	4b95      	ldr	r3, [pc, #596]	; (800aa98 <tcp_process+0x598>)
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
 800a846:	4b95      	ldr	r3, [pc, #596]	; (800aa9c <tcp_process+0x59c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a84c:	4b94      	ldr	r3, [pc, #592]	; (800aaa0 <tcp_process+0x5a0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a850:	885b      	ldrh	r3, [r3, #2]
 800a852:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a854:	4a92      	ldr	r2, [pc, #584]	; (800aaa0 <tcp_process+0x5a0>)
 800a856:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a858:	8812      	ldrh	r2, [r2, #0]
 800a85a:	b292      	uxth	r2, r2
 800a85c:	9202      	str	r2, [sp, #8]
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	4b90      	ldr	r3, [pc, #576]	; (800aaa4 <tcp_process+0x5a4>)
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	4b90      	ldr	r3, [pc, #576]	; (800aaa8 <tcp_process+0x5a8>)
 800a866:	4602      	mov	r2, r0
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f002 fc85 	bl	800d178 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a874:	2b05      	cmp	r3, #5
 800a876:	f200 8215 	bhi.w	800aca4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f002 fa51 	bl	800cd28 <tcp_rexmit_rto>
      break;
 800a886:	e20d      	b.n	800aca4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a888:	4b81      	ldr	r3, [pc, #516]	; (800aa90 <tcp_process+0x590>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80a1 	beq.w	800a9d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a896:	4b7f      	ldr	r3, [pc, #508]	; (800aa94 <tcp_process+0x594>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	db7e      	blt.n	800a9a4 <tcp_process+0x4a4>
 800a8a6:	4b7b      	ldr	r3, [pc, #492]	; (800aa94 <tcp_process+0x594>)
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dc77      	bgt.n	800a9a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2204      	movs	r2, #4
 800a8b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a8c2:	23fa      	movs	r3, #250	; 0xfa
 800a8c4:	76bb      	strb	r3, [r7, #26]
 800a8c6:	e01d      	b.n	800a904 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <tcp_process+0x3e0>
 800a8d2:	4b76      	ldr	r3, [pc, #472]	; (800aaac <tcp_process+0x5ac>)
 800a8d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a8d8:	4975      	ldr	r1, [pc, #468]	; (800aab0 <tcp_process+0x5b0>)
 800a8da:	4876      	ldr	r0, [pc, #472]	; (800aab4 <tcp_process+0x5b4>)
 800a8dc:	f007 fe4e 	bl	801257c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00a      	beq.n	800a900 <tcp_process+0x400>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	6910      	ldr	r0, [r2, #16]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	4798      	blx	r3
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	76bb      	strb	r3, [r7, #26]
 800a8fe:	e001      	b.n	800a904 <tcp_process+0x404>
 800a900:	23f0      	movs	r3, #240	; 0xf0
 800a902:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a904:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00a      	beq.n	800a922 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a90c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a910:	f113 0f0d 	cmn.w	r3, #13
 800a914:	d002      	beq.n	800a91c <tcp_process+0x41c>
              tcp_abort(pcb);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7fd ff8e 	bl	8008838 <tcp_abort>
            }
            return ERR_ABRT;
 800a91c:	f06f 030c 	mvn.w	r3, #12
 800a920:	e1ce      	b.n	800acc0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fae0 	bl	800aee8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a928:	4b63      	ldr	r3, [pc, #396]	; (800aab8 <tcp_process+0x5b8>)
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d005      	beq.n	800a93c <tcp_process+0x43c>
            recv_acked--;
 800a930:	4b61      	ldr	r3, [pc, #388]	; (800aab8 <tcp_process+0x5b8>)
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	3b01      	subs	r3, #1
 800a936:	b29a      	uxth	r2, r3
 800a938:	4b5f      	ldr	r3, [pc, #380]	; (800aab8 <tcp_process+0x5b8>)
 800a93a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a940:	009a      	lsls	r2, r3, #2
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	f241 111c 	movw	r1, #4380	; 0x111c
 800a94c:	428b      	cmp	r3, r1
 800a94e:	bf38      	it	cc
 800a950:	460b      	movcc	r3, r1
 800a952:	429a      	cmp	r2, r3
 800a954:	d204      	bcs.n	800a960 <tcp_process+0x460>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	e00d      	b.n	800a97c <tcp_process+0x47c>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	f241 121c 	movw	r2, #4380	; 0x111c
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d904      	bls.n	800a978 <tcp_process+0x478>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	b29b      	uxth	r3, r3
 800a976:	e001      	b.n	800a97c <tcp_process+0x47c>
 800a978:	f241 131c 	movw	r3, #4380	; 0x111c
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a982:	4b4e      	ldr	r3, [pc, #312]	; (800aabc <tcp_process+0x5bc>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 0320 	and.w	r3, r3, #32
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d037      	beq.n	800a9fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	8b5b      	ldrh	r3, [r3, #26]
 800a992:	f043 0302 	orr.w	r3, r3, #2
 800a996:	b29a      	uxth	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2207      	movs	r2, #7
 800a9a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a9a2:	e02c      	b.n	800a9fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9a4:	4b3b      	ldr	r3, [pc, #236]	; (800aa94 <tcp_process+0x594>)
 800a9a6:	6819      	ldr	r1, [r3, #0]
 800a9a8:	4b3b      	ldr	r3, [pc, #236]	; (800aa98 <tcp_process+0x598>)
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4b3b      	ldr	r3, [pc, #236]	; (800aa9c <tcp_process+0x59c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9b4:	4b3a      	ldr	r3, [pc, #232]	; (800aaa0 <tcp_process+0x5a0>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9b8:	885b      	ldrh	r3, [r3, #2]
 800a9ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9bc:	4a38      	ldr	r2, [pc, #224]	; (800aaa0 <tcp_process+0x5a0>)
 800a9be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9c0:	8812      	ldrh	r2, [r2, #0]
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	9202      	str	r2, [sp, #8]
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	4b36      	ldr	r3, [pc, #216]	; (800aaa4 <tcp_process+0x5a4>)
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	4b36      	ldr	r3, [pc, #216]	; (800aaa8 <tcp_process+0x5a8>)
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f002 fbd1 	bl	800d178 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a9d6:	e167      	b.n	800aca8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a9d8:	4b2d      	ldr	r3, [pc, #180]	; (800aa90 <tcp_process+0x590>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 8161 	beq.w	800aca8 <tcp_process+0x7a8>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	1e5a      	subs	r2, r3, #1
 800a9ec:	4b2b      	ldr	r3, [pc, #172]	; (800aa9c <tcp_process+0x59c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	f040 8159 	bne.w	800aca8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f002 f9b8 	bl	800cd6c <tcp_rexmit>
      break;
 800a9fc:	e154      	b.n	800aca8 <tcp_process+0x7a8>
 800a9fe:	e153      	b.n	800aca8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fa71 	bl	800aee8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800aa06:	4b2d      	ldr	r3, [pc, #180]	; (800aabc <tcp_process+0x5bc>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 0320 	and.w	r3, r3, #32
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 814c 	beq.w	800acac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	8b5b      	ldrh	r3, [r3, #26]
 800aa18:	f043 0302 	orr.w	r3, r3, #2
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2207      	movs	r2, #7
 800aa26:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aa28:	e140      	b.n	800acac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa5c 	bl	800aee8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa30:	4b22      	ldr	r3, [pc, #136]	; (800aabc <tcp_process+0x5bc>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 0320 	and.w	r3, r3, #32
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d071      	beq.n	800ab20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa3c:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <tcp_process+0x590>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 0310 	and.w	r3, r3, #16
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d060      	beq.n	800ab0a <tcp_process+0x60a>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa4c:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <tcp_process+0x594>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d15a      	bne.n	800ab0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d156      	bne.n	800ab0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8b5b      	ldrh	r3, [r3, #26]
 800aa60:	f043 0302 	orr.w	r3, r3, #2
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7fe fdbc 	bl	80095e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800aa70:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <tcp_process+0x5c0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d105      	bne.n	800aa86 <tcp_process+0x586>
 800aa7a:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <tcp_process+0x5c0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	4a0f      	ldr	r2, [pc, #60]	; (800aac0 <tcp_process+0x5c0>)
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	e02e      	b.n	800aae4 <tcp_process+0x5e4>
 800aa86:	4b0e      	ldr	r3, [pc, #56]	; (800aac0 <tcp_process+0x5c0>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	e027      	b.n	800aade <tcp_process+0x5de>
 800aa8e:	bf00      	nop
 800aa90:	2000a7f4 	.word	0x2000a7f4
 800aa94:	2000a7ec 	.word	0x2000a7ec
 800aa98:	2000a7f2 	.word	0x2000a7f2
 800aa9c:	2000a7e8 	.word	0x2000a7e8
 800aaa0:	2000a7d8 	.word	0x2000a7d8
 800aaa4:	20005070 	.word	0x20005070
 800aaa8:	20005074 	.word	0x20005074
 800aaac:	080145ec 	.word	0x080145ec
 800aab0:	0801488c 	.word	0x0801488c
 800aab4:	08014638 	.word	0x08014638
 800aab8:	2000a7f0 	.word	0x2000a7f0
 800aabc:	2000a7f5 	.word	0x2000a7f5
 800aac0:	2000a7bc 	.word	0x2000a7bc
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d104      	bne.n	800aad8 <tcp_process+0x5d8>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	60da      	str	r2, [r3, #12]
 800aad6:	e005      	b.n	800aae4 <tcp_process+0x5e4>
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	617b      	str	r3, [r7, #20]
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1ef      	bne.n	800aac4 <tcp_process+0x5c4>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	60da      	str	r2, [r3, #12]
 800aaea:	4b77      	ldr	r3, [pc, #476]	; (800acc8 <tcp_process+0x7c8>)
 800aaec:	2201      	movs	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	220a      	movs	r2, #10
 800aaf4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aaf6:	4b75      	ldr	r3, [pc, #468]	; (800accc <tcp_process+0x7cc>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	60da      	str	r2, [r3, #12]
 800aafe:	4a73      	ldr	r2, [pc, #460]	; (800accc <tcp_process+0x7cc>)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	f002 fcfa 	bl	800d4fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ab08:	e0d2      	b.n	800acb0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8b5b      	ldrh	r3, [r3, #26]
 800ab0e:	f043 0302 	orr.w	r3, r3, #2
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2208      	movs	r2, #8
 800ab1c:	751a      	strb	r2, [r3, #20]
      break;
 800ab1e:	e0c7      	b.n	800acb0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ab20:	4b6b      	ldr	r3, [pc, #428]	; (800acd0 <tcp_process+0x7d0>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	f003 0310 	and.w	r3, r3, #16
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 80c1 	beq.w	800acb0 <tcp_process+0x7b0>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab32:	4b68      	ldr	r3, [pc, #416]	; (800acd4 <tcp_process+0x7d4>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	f040 80ba 	bne.w	800acb0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f040 80b5 	bne.w	800acb0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2206      	movs	r2, #6
 800ab4a:	751a      	strb	r2, [r3, #20]
      break;
 800ab4c:	e0b0      	b.n	800acb0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9ca 	bl	800aee8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ab54:	4b60      	ldr	r3, [pc, #384]	; (800acd8 <tcp_process+0x7d8>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 80a9 	beq.w	800acb4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8b5b      	ldrh	r3, [r3, #26]
 800ab66:	f043 0302 	orr.w	r3, r3, #2
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7fe fd39 	bl	80095e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ab76:	4b59      	ldr	r3, [pc, #356]	; (800acdc <tcp_process+0x7dc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d105      	bne.n	800ab8c <tcp_process+0x68c>
 800ab80:	4b56      	ldr	r3, [pc, #344]	; (800acdc <tcp_process+0x7dc>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	4a55      	ldr	r2, [pc, #340]	; (800acdc <tcp_process+0x7dc>)
 800ab88:	6013      	str	r3, [r2, #0]
 800ab8a:	e013      	b.n	800abb4 <tcp_process+0x6b4>
 800ab8c:	4b53      	ldr	r3, [pc, #332]	; (800acdc <tcp_process+0x7dc>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	e00c      	b.n	800abae <tcp_process+0x6ae>
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d104      	bne.n	800aba8 <tcp_process+0x6a8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	60da      	str	r2, [r3, #12]
 800aba6:	e005      	b.n	800abb4 <tcp_process+0x6b4>
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	613b      	str	r3, [r7, #16]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1ef      	bne.n	800ab94 <tcp_process+0x694>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	60da      	str	r2, [r3, #12]
 800abba:	4b43      	ldr	r3, [pc, #268]	; (800acc8 <tcp_process+0x7c8>)
 800abbc:	2201      	movs	r2, #1
 800abbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	220a      	movs	r2, #10
 800abc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800abc6:	4b41      	ldr	r3, [pc, #260]	; (800accc <tcp_process+0x7cc>)
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60da      	str	r2, [r3, #12]
 800abce:	4a3f      	ldr	r2, [pc, #252]	; (800accc <tcp_process+0x7cc>)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	f002 fc92 	bl	800d4fc <tcp_timer_needed>
      }
      break;
 800abd8:	e06c      	b.n	800acb4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f984 	bl	800aee8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800abe0:	4b3b      	ldr	r3, [pc, #236]	; (800acd0 <tcp_process+0x7d0>)
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	f003 0310 	and.w	r3, r3, #16
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d065      	beq.n	800acb8 <tcp_process+0x7b8>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abf0:	4b38      	ldr	r3, [pc, #224]	; (800acd4 <tcp_process+0x7d4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d15f      	bne.n	800acb8 <tcp_process+0x7b8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d15b      	bne.n	800acb8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7fe fcf1 	bl	80095e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ac06:	4b35      	ldr	r3, [pc, #212]	; (800acdc <tcp_process+0x7dc>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d105      	bne.n	800ac1c <tcp_process+0x71c>
 800ac10:	4b32      	ldr	r3, [pc, #200]	; (800acdc <tcp_process+0x7dc>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	4a31      	ldr	r2, [pc, #196]	; (800acdc <tcp_process+0x7dc>)
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e013      	b.n	800ac44 <tcp_process+0x744>
 800ac1c:	4b2f      	ldr	r3, [pc, #188]	; (800acdc <tcp_process+0x7dc>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e00c      	b.n	800ac3e <tcp_process+0x73e>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d104      	bne.n	800ac38 <tcp_process+0x738>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	60da      	str	r2, [r3, #12]
 800ac36:	e005      	b.n	800ac44 <tcp_process+0x744>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1ef      	bne.n	800ac24 <tcp_process+0x724>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	60da      	str	r2, [r3, #12]
 800ac4a:	4b1f      	ldr	r3, [pc, #124]	; (800acc8 <tcp_process+0x7c8>)
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	220a      	movs	r2, #10
 800ac54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ac56:	4b1d      	ldr	r3, [pc, #116]	; (800accc <tcp_process+0x7cc>)
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	60da      	str	r2, [r3, #12]
 800ac5e:	4a1b      	ldr	r2, [pc, #108]	; (800accc <tcp_process+0x7cc>)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	f002 fc4a 	bl	800d4fc <tcp_timer_needed>
      }
      break;
 800ac68:	e026      	b.n	800acb8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f93c 	bl	800aee8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ac70:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <tcp_process+0x7d0>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 0310 	and.w	r3, r3, #16
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01f      	beq.n	800acbc <tcp_process+0x7bc>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac80:	4b14      	ldr	r3, [pc, #80]	; (800acd4 <tcp_process+0x7d4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d119      	bne.n	800acbc <tcp_process+0x7bc>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d115      	bne.n	800acbc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <tcp_process+0x7d8>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	f043 0310 	orr.w	r3, r3, #16
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	4b0f      	ldr	r3, [pc, #60]	; (800acd8 <tcp_process+0x7d8>)
 800ac9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ac9e:	e00d      	b.n	800acbc <tcp_process+0x7bc>
    default:
      break;
 800aca0:	bf00      	nop
 800aca2:	e00c      	b.n	800acbe <tcp_process+0x7be>
      break;
 800aca4:	bf00      	nop
 800aca6:	e00a      	b.n	800acbe <tcp_process+0x7be>
      break;
 800aca8:	bf00      	nop
 800acaa:	e008      	b.n	800acbe <tcp_process+0x7be>
      break;
 800acac:	bf00      	nop
 800acae:	e006      	b.n	800acbe <tcp_process+0x7be>
      break;
 800acb0:	bf00      	nop
 800acb2:	e004      	b.n	800acbe <tcp_process+0x7be>
      break;
 800acb4:	bf00      	nop
 800acb6:	e002      	b.n	800acbe <tcp_process+0x7be>
      break;
 800acb8:	bf00      	nop
 800acba:	e000      	b.n	800acbe <tcp_process+0x7be>
      break;
 800acbc:	bf00      	nop
  }
  return ERR_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3724      	adds	r7, #36	; 0x24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd90      	pop	{r4, r7, pc}
 800acc8:	2000a7c4 	.word	0x2000a7c4
 800accc:	2000a7c0 	.word	0x2000a7c0
 800acd0:	2000a7f4 	.word	0x2000a7f4
 800acd4:	2000a7ec 	.word	0x2000a7ec
 800acd8:	2000a7f5 	.word	0x2000a7f5
 800acdc:	2000a7bc 	.word	0x2000a7bc

0800ace0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ace0:	b590      	push	{r4, r7, lr}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <tcp_oos_insert_segment+0x1e>
 800acf0:	4b3b      	ldr	r3, [pc, #236]	; (800ade0 <tcp_oos_insert_segment+0x100>)
 800acf2:	f240 421f 	movw	r2, #1055	; 0x41f
 800acf6:	493b      	ldr	r1, [pc, #236]	; (800ade4 <tcp_oos_insert_segment+0x104>)
 800acf8:	483b      	ldr	r0, [pc, #236]	; (800ade8 <tcp_oos_insert_segment+0x108>)
 800acfa:	f007 fc3f 	bl	801257c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	899b      	ldrh	r3, [r3, #12]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fb fcb4 	bl	8006674 <lwip_htons>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f003 0301 	and.w	r3, r3, #1
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d028      	beq.n	800ad6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ad18:	6838      	ldr	r0, [r7, #0]
 800ad1a:	f7fe fa63 	bl	80091e4 <tcp_segs_free>
    next = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	603b      	str	r3, [r7, #0]
 800ad22:	e056      	b.n	800add2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	899b      	ldrh	r3, [r3, #12]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fb fca1 	bl	8006674 <lwip_htons>
 800ad32:	4603      	mov	r3, r0
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00d      	beq.n	800ad5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	899b      	ldrh	r3, [r3, #12]
 800ad44:	b29c      	uxth	r4, r3
 800ad46:	2001      	movs	r0, #1
 800ad48:	f7fb fc94 	bl	8006674 <lwip_htons>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	4322      	orrs	r2, r4
 800ad56:	b292      	uxth	r2, r2
 800ad58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f7fe fa52 	bl	800920e <tcp_seg_free>
    while (next &&
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00e      	beq.n	800ad8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	891b      	ldrh	r3, [r3, #8]
 800ad74:	461a      	mov	r2, r3
 800ad76:	4b1d      	ldr	r3, [pc, #116]	; (800adec <tcp_oos_insert_segment+0x10c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	441a      	add	r2, r3
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	8909      	ldrh	r1, [r1, #8]
 800ad86:	440b      	add	r3, r1
 800ad88:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	daca      	bge.n	800ad24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d01e      	beq.n	800add2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	891b      	ldrh	r3, [r3, #8]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4b14      	ldr	r3, [pc, #80]	; (800adec <tcp_oos_insert_segment+0x10c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	441a      	add	r2, r3
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dd12      	ble.n	800add2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	4b0d      	ldr	r3, [pc, #52]	; (800adec <tcp_oos_insert_segment+0x10c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	891b      	ldrh	r3, [r3, #8]
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f7fc fe15 	bl	80079fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	601a      	str	r2, [r3, #0]
}
 800add8:	bf00      	nop
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	bd90      	pop	{r4, r7, pc}
 800ade0:	080145ec 	.word	0x080145ec
 800ade4:	080148ac 	.word	0x080148ac
 800ade8:	08014638 	.word	0x08014638
 800adec:	2000a7e8 	.word	0x2000a7e8

0800adf0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800adf0:	b5b0      	push	{r4, r5, r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800adfe:	e03e      	b.n	800ae7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fd f802 	bl	8007e18 <pbuf_clen>
 800ae14:	4603      	mov	r3, r0
 800ae16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae1e:	8a7a      	ldrh	r2, [r7, #18]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d906      	bls.n	800ae32 <tcp_free_acked_segments+0x42>
 800ae24:	4b2a      	ldr	r3, [pc, #168]	; (800aed0 <tcp_free_acked_segments+0xe0>)
 800ae26:	f240 4257 	movw	r2, #1111	; 0x457
 800ae2a:	492a      	ldr	r1, [pc, #168]	; (800aed4 <tcp_free_acked_segments+0xe4>)
 800ae2c:	482a      	ldr	r0, [pc, #168]	; (800aed8 <tcp_free_acked_segments+0xe8>)
 800ae2e:	f007 fba5 	bl	801257c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ae38:	8a7b      	ldrh	r3, [r7, #18]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	891a      	ldrh	r2, [r3, #8]
 800ae48:	4b24      	ldr	r3, [pc, #144]	; (800aedc <tcp_free_acked_segments+0xec>)
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	4b22      	ldr	r3, [pc, #136]	; (800aedc <tcp_free_acked_segments+0xec>)
 800ae52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ae54:	6978      	ldr	r0, [r7, #20]
 800ae56:	f7fe f9da 	bl	800920e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00c      	beq.n	800ae7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d109      	bne.n	800ae7e <tcp_free_acked_segments+0x8e>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <tcp_free_acked_segments+0x8e>
 800ae70:	4b17      	ldr	r3, [pc, #92]	; (800aed0 <tcp_free_acked_segments+0xe0>)
 800ae72:	f240 4261 	movw	r2, #1121	; 0x461
 800ae76:	491a      	ldr	r1, [pc, #104]	; (800aee0 <tcp_free_acked_segments+0xf0>)
 800ae78:	4817      	ldr	r0, [pc, #92]	; (800aed8 <tcp_free_acked_segments+0xe8>)
 800ae7a:	f007 fb7f 	bl	801257c <iprintf>
  while (seg_list != NULL &&
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d020      	beq.n	800aec6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fb fc07 	bl	800669e <lwip_htonl>
 800ae90:	4604      	mov	r4, r0
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	891b      	ldrh	r3, [r3, #8]
 800ae96:	461d      	mov	r5, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	899b      	ldrh	r3, [r3, #12]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fb fbe7 	bl	8006674 <lwip_htons>
 800aea6:	4603      	mov	r3, r0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	f003 0303 	and.w	r3, r3, #3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <tcp_free_acked_segments+0xc6>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e000      	b.n	800aeb8 <tcp_free_acked_segments+0xc8>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	442b      	add	r3, r5
 800aeba:	18e2      	adds	r2, r4, r3
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <tcp_free_acked_segments+0xf4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	dd9c      	ble.n	800ae00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800aec6:	68bb      	ldr	r3, [r7, #8]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bdb0      	pop	{r4, r5, r7, pc}
 800aed0:	080145ec 	.word	0x080145ec
 800aed4:	080148d4 	.word	0x080148d4
 800aed8:	08014638 	.word	0x08014638
 800aedc:	2000a7f0 	.word	0x2000a7f0
 800aee0:	080148fc 	.word	0x080148fc
 800aee4:	2000a7ec 	.word	0x2000a7ec

0800aee8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800aee8:	b5b0      	push	{r4, r5, r7, lr}
 800aeea:	b094      	sub	sp, #80	; 0x50
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <tcp_receive+0x20>
 800aefa:	4b91      	ldr	r3, [pc, #580]	; (800b140 <tcp_receive+0x258>)
 800aefc:	f240 427b 	movw	r2, #1147	; 0x47b
 800af00:	4990      	ldr	r1, [pc, #576]	; (800b144 <tcp_receive+0x25c>)
 800af02:	4891      	ldr	r0, [pc, #580]	; (800b148 <tcp_receive+0x260>)
 800af04:	f007 fb3a 	bl	801257c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	7d1b      	ldrb	r3, [r3, #20]
 800af0c:	2b03      	cmp	r3, #3
 800af0e:	d806      	bhi.n	800af1e <tcp_receive+0x36>
 800af10:	4b8b      	ldr	r3, [pc, #556]	; (800b140 <tcp_receive+0x258>)
 800af12:	f240 427c 	movw	r2, #1148	; 0x47c
 800af16:	498d      	ldr	r1, [pc, #564]	; (800b14c <tcp_receive+0x264>)
 800af18:	488b      	ldr	r0, [pc, #556]	; (800b148 <tcp_receive+0x260>)
 800af1a:	f007 fb2f 	bl	801257c <iprintf>

  if (flags & TCP_ACK) {
 800af1e:	4b8c      	ldr	r3, [pc, #560]	; (800b150 <tcp_receive+0x268>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	f003 0310 	and.w	r3, r3, #16
 800af26:	2b00      	cmp	r3, #0
 800af28:	f000 8264 	beq.w	800b3f4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af32:	461a      	mov	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af38:	4413      	add	r3, r2
 800af3a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af40:	4b84      	ldr	r3, [pc, #528]	; (800b154 <tcp_receive+0x26c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	db1b      	blt.n	800af82 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af4e:	4b81      	ldr	r3, [pc, #516]	; (800b154 <tcp_receive+0x26c>)
 800af50:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af52:	429a      	cmp	r2, r3
 800af54:	d106      	bne.n	800af64 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800af5a:	4b7f      	ldr	r3, [pc, #508]	; (800b158 <tcp_receive+0x270>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	2b00      	cmp	r3, #0
 800af62:	db0e      	blt.n	800af82 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800af68:	4b7b      	ldr	r3, [pc, #492]	; (800b158 <tcp_receive+0x270>)
 800af6a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d125      	bne.n	800afbc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af70:	4b7a      	ldr	r3, [pc, #488]	; (800b15c <tcp_receive+0x274>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	89db      	ldrh	r3, [r3, #14]
 800af76:	b29a      	uxth	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af7e:	429a      	cmp	r2, r3
 800af80:	d91c      	bls.n	800afbc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800af82:	4b76      	ldr	r3, [pc, #472]	; (800b15c <tcp_receive+0x274>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	89db      	ldrh	r3, [r3, #14]
 800af88:	b29a      	uxth	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d205      	bcs.n	800afac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800afac:	4b69      	ldr	r3, [pc, #420]	; (800b154 <tcp_receive+0x26c>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800afb4:	4b68      	ldr	r3, [pc, #416]	; (800b158 <tcp_receive+0x270>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800afbc:	4b66      	ldr	r3, [pc, #408]	; (800b158 <tcp_receive+0x270>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dc58      	bgt.n	800b07c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800afca:	4b65      	ldr	r3, [pc, #404]	; (800b160 <tcp_receive+0x278>)
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d14b      	bne.n	800b06a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800afdc:	4413      	add	r3, r2
 800afde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d142      	bne.n	800b06a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800afea:	2b00      	cmp	r3, #0
 800afec:	db3d      	blt.n	800b06a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aff2:	4b59      	ldr	r3, [pc, #356]	; (800b158 <tcp_receive+0x270>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d137      	bne.n	800b06a <tcp_receive+0x182>
              found_dupack = 1;
 800affa:	2301      	movs	r3, #1
 800affc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b004:	2bff      	cmp	r3, #255	; 0xff
 800b006:	d007      	beq.n	800b018 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b00e:	3301      	adds	r3, #1
 800b010:	b2da      	uxtb	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d91b      	bls.n	800b05a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b02c:	4413      	add	r3, r2
 800b02e:	b29a      	uxth	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b036:	429a      	cmp	r2, r3
 800b038:	d30a      	bcc.n	800b050 <tcp_receive+0x168>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b044:	4413      	add	r3, r2
 800b046:	b29a      	uxth	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b04e:	e004      	b.n	800b05a <tcp_receive+0x172>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b056:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b060:	2b02      	cmp	r3, #2
 800b062:	d902      	bls.n	800b06a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 feed 	bl	800ce44 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f040 8161 	bne.w	800b334 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b07a:	e15b      	b.n	800b334 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b07c:	4b36      	ldr	r3, [pc, #216]	; (800b158 <tcp_receive+0x270>)
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	3b01      	subs	r3, #1
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f2c0 814e 	blt.w	800b32a <tcp_receive+0x442>
 800b08e:	4b32      	ldr	r3, [pc, #200]	; (800b158 <tcp_receive+0x270>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f300 8146 	bgt.w	800b32a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	8b5b      	ldrh	r3, [r3, #26]
 800b0a2:	f003 0304 	and.w	r3, r3, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d010      	beq.n	800b0cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	8b5b      	ldrh	r3, [r3, #26]
 800b0ae:	f023 0304 	bic.w	r3, r3, #4
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b0da:	10db      	asrs	r3, r3, #3
 800b0dc:	b21b      	sxth	r3, r3
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	b21a      	sxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b0f4:	4b18      	ldr	r3, [pc, #96]	; (800b158 <tcp_receive+0x270>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b10c:	4b12      	ldr	r3, [pc, #72]	; (800b158 <tcp_receive+0x270>)
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7d1b      	ldrb	r3, [r3, #20]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	f240 8097 	bls.w	800b24c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d245      	bcs.n	800b1ba <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	8b5b      	ldrh	r3, [r3, #26]
 800b132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b136:	2b00      	cmp	r3, #0
 800b138:	d014      	beq.n	800b164 <tcp_receive+0x27c>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e013      	b.n	800b166 <tcp_receive+0x27e>
 800b13e:	bf00      	nop
 800b140:	080145ec 	.word	0x080145ec
 800b144:	0801491c 	.word	0x0801491c
 800b148:	08014638 	.word	0x08014638
 800b14c:	08014938 	.word	0x08014938
 800b150:	2000a7f4 	.word	0x2000a7f4
 800b154:	2000a7e8 	.word	0x2000a7e8
 800b158:	2000a7ec 	.word	0x2000a7ec
 800b15c:	2000a7d8 	.word	0x2000a7d8
 800b160:	2000a7f2 	.word	0x2000a7f2
 800b164:	2302      	movs	r3, #2
 800b166:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b16a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b16e:	b29a      	uxth	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b174:	fb12 f303 	smulbb	r3, r2, r3
 800b178:	b29b      	uxth	r3, r3
 800b17a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bf28      	it	cs
 800b180:	4613      	movcs	r3, r2
 800b182:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b18a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b18c:	4413      	add	r3, r2
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b196:	429a      	cmp	r2, r3
 800b198:	d309      	bcc.n	800b1ae <tcp_receive+0x2c6>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b1a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1a2:	4413      	add	r3, r2
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b1ac:	e04e      	b.n	800b24c <tcp_receive+0x364>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b1b8:	e048      	b.n	800b24c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b1c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1c2:	4413      	add	r3, r2
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d309      	bcc.n	800b1e4 <tcp_receive+0x2fc>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b1d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1d8:	4413      	add	r3, r2
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b1e2:	e004      	b.n	800b1ee <tcp_receive+0x306>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d326      	bcc.n	800b24c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b21e:	4413      	add	r3, r2
 800b220:	b29a      	uxth	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b228:	429a      	cmp	r2, r3
 800b22a:	d30a      	bcc.n	800b242 <tcp_receive+0x35a>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b236:	4413      	add	r3, r2
 800b238:	b29a      	uxth	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b240:	e004      	b.n	800b24c <tcp_receive+0x364>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b248:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b254:	4a98      	ldr	r2, [pc, #608]	; (800b4b8 <tcp_receive+0x5d0>)
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff fdca 	bl	800adf0 <tcp_free_acked_segments>
 800b25c:	4602      	mov	r2, r0
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26a:	4a94      	ldr	r2, [pc, #592]	; (800b4bc <tcp_receive+0x5d4>)
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff fdbf 	bl	800adf0 <tcp_free_acked_segments>
 800b272:	4602      	mov	r2, r0
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d104      	bne.n	800b28a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b286:	861a      	strh	r2, [r3, #48]	; 0x30
 800b288:	e002      	b.n	800b290 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d103      	bne.n	800b2a6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b2ac:	4b84      	ldr	r3, [pc, #528]	; (800b4c0 <tcp_receive+0x5d8>)
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	8b5b      	ldrh	r3, [r3, #26]
 800b2be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d035      	beq.n	800b332 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d118      	bne.n	800b300 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00c      	beq.n	800b2f0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fb f9db 	bl	800669e <lwip_htonl>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dc20      	bgt.n	800b332 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	8b5b      	ldrh	r3, [r3, #26]
 800b2f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2fe:	e018      	b.n	800b332 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fb f9c6 	bl	800669e <lwip_htonl>
 800b312:	4603      	mov	r3, r0
 800b314:	1ae3      	subs	r3, r4, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	dc0b      	bgt.n	800b332 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	8b5b      	ldrh	r3, [r3, #26]
 800b31e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b322:	b29a      	uxth	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b328:	e003      	b.n	800b332 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 ff76 	bl	800d21c <tcp_send_empty_ack>
 800b330:	e000      	b.n	800b334 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b332:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d05b      	beq.n	800b3f4 <tcp_receive+0x50c>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b340:	4b60      	ldr	r3, [pc, #384]	; (800b4c4 <tcp_receive+0x5dc>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	da54      	bge.n	800b3f4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b34a:	4b5f      	ldr	r3, [pc, #380]	; (800b4c8 <tcp_receive+0x5e0>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	b29a      	uxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b354:	b29b      	uxth	r3, r3
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	b29b      	uxth	r3, r3
 800b35a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b35e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b368:	10db      	asrs	r3, r3, #3
 800b36a:	b21b      	sxth	r3, r3
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	b29b      	uxth	r3, r3
 800b372:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b382:	4413      	add	r3, r2
 800b384:	b29b      	uxth	r3, r3
 800b386:	b21a      	sxth	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b38c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b390:	2b00      	cmp	r3, #0
 800b392:	da05      	bge.n	800b3a0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b398:	425b      	negs	r3, r3
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b3a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b3aa:	109b      	asrs	r3, r3, #2
 800b3ac:	b21b      	sxth	r3, r3
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b3c4:	4413      	add	r3, r2
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	b21a      	sxth	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b3d4:	10db      	asrs	r3, r3, #3
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	b21a      	sxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b3f4:	4b35      	ldr	r3, [pc, #212]	; (800b4cc <tcp_receive+0x5e4>)
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 84e2 	beq.w	800bdc2 <tcp_receive+0xeda>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	7d1b      	ldrb	r3, [r3, #20]
 800b402:	2b06      	cmp	r3, #6
 800b404:	f200 84dd 	bhi.w	800bdc2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b40c:	4b30      	ldr	r3, [pc, #192]	; (800b4d0 <tcp_receive+0x5e8>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	3b01      	subs	r3, #1
 800b414:	2b00      	cmp	r3, #0
 800b416:	f2c0 808f 	blt.w	800b538 <tcp_receive+0x650>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b41e:	4b2b      	ldr	r3, [pc, #172]	; (800b4cc <tcp_receive+0x5e4>)
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	4619      	mov	r1, r3
 800b424:	4b2a      	ldr	r3, [pc, #168]	; (800b4d0 <tcp_receive+0x5e8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	440b      	add	r3, r1
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	3301      	adds	r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f300 8082 	bgt.w	800b538 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b434:	4b27      	ldr	r3, [pc, #156]	; (800b4d4 <tcp_receive+0x5ec>)
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b43e:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <tcp_receive+0x5e8>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b446:	4b23      	ldr	r3, [pc, #140]	; (800b4d4 <tcp_receive+0x5ec>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <tcp_receive+0x574>
 800b44e:	4b22      	ldr	r3, [pc, #136]	; (800b4d8 <tcp_receive+0x5f0>)
 800b450:	f240 5294 	movw	r2, #1428	; 0x594
 800b454:	4921      	ldr	r1, [pc, #132]	; (800b4dc <tcp_receive+0x5f4>)
 800b456:	4822      	ldr	r0, [pc, #136]	; (800b4e0 <tcp_receive+0x5f8>)
 800b458:	f007 f890 	bl	801257c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b462:	4293      	cmp	r3, r2
 800b464:	d906      	bls.n	800b474 <tcp_receive+0x58c>
 800b466:	4b1c      	ldr	r3, [pc, #112]	; (800b4d8 <tcp_receive+0x5f0>)
 800b468:	f240 5295 	movw	r2, #1429	; 0x595
 800b46c:	491d      	ldr	r1, [pc, #116]	; (800b4e4 <tcp_receive+0x5fc>)
 800b46e:	481c      	ldr	r0, [pc, #112]	; (800b4e0 <tcp_receive+0x5f8>)
 800b470:	f007 f884 	bl	801257c <iprintf>
      off = (u16_t)off32;
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b47a:	4b16      	ldr	r3, [pc, #88]	; (800b4d4 <tcp_receive+0x5ec>)
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	891b      	ldrh	r3, [r3, #8]
 800b480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b484:	429a      	cmp	r2, r3
 800b486:	d906      	bls.n	800b496 <tcp_receive+0x5ae>
 800b488:	4b13      	ldr	r3, [pc, #76]	; (800b4d8 <tcp_receive+0x5f0>)
 800b48a:	f240 5297 	movw	r2, #1431	; 0x597
 800b48e:	4916      	ldr	r1, [pc, #88]	; (800b4e8 <tcp_receive+0x600>)
 800b490:	4813      	ldr	r0, [pc, #76]	; (800b4e0 <tcp_receive+0x5f8>)
 800b492:	f007 f873 	bl	801257c <iprintf>
      inseg.len -= off;
 800b496:	4b0f      	ldr	r3, [pc, #60]	; (800b4d4 <tcp_receive+0x5ec>)
 800b498:	891a      	ldrh	r2, [r3, #8]
 800b49a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <tcp_receive+0x5ec>)
 800b4a4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b4a6:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <tcp_receive+0x5ec>)
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	891a      	ldrh	r2, [r3, #8]
 800b4ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b4b4:	e02a      	b.n	800b50c <tcp_receive+0x624>
 800b4b6:	bf00      	nop
 800b4b8:	08014954 	.word	0x08014954
 800b4bc:	0801495c 	.word	0x0801495c
 800b4c0:	2000a7f0 	.word	0x2000a7f0
 800b4c4:	2000a7ec 	.word	0x2000a7ec
 800b4c8:	2000a7b0 	.word	0x2000a7b0
 800b4cc:	2000a7f2 	.word	0x2000a7f2
 800b4d0:	2000a7e8 	.word	0x2000a7e8
 800b4d4:	2000a7c8 	.word	0x2000a7c8
 800b4d8:	080145ec 	.word	0x080145ec
 800b4dc:	08014964 	.word	0x08014964
 800b4e0:	08014638 	.word	0x08014638
 800b4e4:	08014974 	.word	0x08014974
 800b4e8:	08014984 	.word	0x08014984
        off -= p->len;
 800b4ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ee:	895b      	ldrh	r3, [r3, #10]
 800b4f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b4fe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b502:	2200      	movs	r2, #0
 800b504:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b50e:	895b      	ldrh	r3, [r3, #10]
 800b510:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b514:	429a      	cmp	r2, r3
 800b516:	d8e9      	bhi.n	800b4ec <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b518:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b51c:	4619      	mov	r1, r3
 800b51e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b520:	f7fc fb6c 	bl	8007bfc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	4a91      	ldr	r2, [pc, #580]	; (800b770 <tcp_receive+0x888>)
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	4b91      	ldr	r3, [pc, #580]	; (800b774 <tcp_receive+0x88c>)
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	4a8f      	ldr	r2, [pc, #572]	; (800b770 <tcp_receive+0x888>)
 800b532:	6812      	ldr	r2, [r2, #0]
 800b534:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b536:	e00d      	b.n	800b554 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b538:	4b8d      	ldr	r3, [pc, #564]	; (800b770 <tcp_receive+0x888>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	da06      	bge.n	800b554 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	8b5b      	ldrh	r3, [r3, #26]
 800b54a:	f043 0302 	orr.w	r3, r3, #2
 800b54e:	b29a      	uxth	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b554:	4b86      	ldr	r3, [pc, #536]	; (800b770 <tcp_receive+0x888>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f2c0 842a 	blt.w	800bdb8 <tcp_receive+0xed0>
 800b564:	4b82      	ldr	r3, [pc, #520]	; (800b770 <tcp_receive+0x888>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b570:	440b      	add	r3, r1
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	3301      	adds	r3, #1
 800b576:	2b00      	cmp	r3, #0
 800b578:	f300 841e 	bgt.w	800bdb8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b580:	4b7b      	ldr	r3, [pc, #492]	; (800b770 <tcp_receive+0x888>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	f040 829a 	bne.w	800babe <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b58a:	4b7a      	ldr	r3, [pc, #488]	; (800b774 <tcp_receive+0x88c>)
 800b58c:	891c      	ldrh	r4, [r3, #8]
 800b58e:	4b79      	ldr	r3, [pc, #484]	; (800b774 <tcp_receive+0x88c>)
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	899b      	ldrh	r3, [r3, #12]
 800b594:	b29b      	uxth	r3, r3
 800b596:	4618      	mov	r0, r3
 800b598:	f7fb f86c 	bl	8006674 <lwip_htons>
 800b59c:	4603      	mov	r3, r0
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	f003 0303 	and.w	r3, r3, #3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <tcp_receive+0x6c4>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e000      	b.n	800b5ae <tcp_receive+0x6c6>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4423      	add	r3, r4
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	4b71      	ldr	r3, [pc, #452]	; (800b778 <tcp_receive+0x890>)
 800b5b4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b5ba:	4b6f      	ldr	r3, [pc, #444]	; (800b778 <tcp_receive+0x890>)
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d275      	bcs.n	800b6ae <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5c2:	4b6c      	ldr	r3, [pc, #432]	; (800b774 <tcp_receive+0x88c>)
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	899b      	ldrh	r3, [r3, #12]
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fb f852 	bl	8006674 <lwip_htons>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d01f      	beq.n	800b61c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b5dc:	4b65      	ldr	r3, [pc, #404]	; (800b774 <tcp_receive+0x88c>)
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	899b      	ldrh	r3, [r3, #12]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	b21b      	sxth	r3, r3
 800b5e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5ea:	b21c      	sxth	r4, r3
 800b5ec:	4b61      	ldr	r3, [pc, #388]	; (800b774 <tcp_receive+0x88c>)
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	899b      	ldrh	r3, [r3, #12]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fb f83d 	bl	8006674 <lwip_htons>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b604:	b29b      	uxth	r3, r3
 800b606:	4618      	mov	r0, r3
 800b608:	f7fb f834 	bl	8006674 <lwip_htons>
 800b60c:	4603      	mov	r3, r0
 800b60e:	b21b      	sxth	r3, r3
 800b610:	4323      	orrs	r3, r4
 800b612:	b21a      	sxth	r2, r3
 800b614:	4b57      	ldr	r3, [pc, #348]	; (800b774 <tcp_receive+0x88c>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	b292      	uxth	r2, r2
 800b61a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b620:	4b54      	ldr	r3, [pc, #336]	; (800b774 <tcp_receive+0x88c>)
 800b622:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b624:	4b53      	ldr	r3, [pc, #332]	; (800b774 <tcp_receive+0x88c>)
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	899b      	ldrh	r3, [r3, #12]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fb f821 	bl	8006674 <lwip_htons>
 800b632:	4603      	mov	r3, r0
 800b634:	b2db      	uxtb	r3, r3
 800b636:	f003 0302 	and.w	r3, r3, #2
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <tcp_receive+0x762>
            inseg.len -= 1;
 800b63e:	4b4d      	ldr	r3, [pc, #308]	; (800b774 <tcp_receive+0x88c>)
 800b640:	891b      	ldrh	r3, [r3, #8]
 800b642:	3b01      	subs	r3, #1
 800b644:	b29a      	uxth	r2, r3
 800b646:	4b4b      	ldr	r3, [pc, #300]	; (800b774 <tcp_receive+0x88c>)
 800b648:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b64a:	4b4a      	ldr	r3, [pc, #296]	; (800b774 <tcp_receive+0x88c>)
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	4a49      	ldr	r2, [pc, #292]	; (800b774 <tcp_receive+0x88c>)
 800b650:	8912      	ldrh	r2, [r2, #8]
 800b652:	4611      	mov	r1, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7fc f9d1 	bl	80079fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b65a:	4b46      	ldr	r3, [pc, #280]	; (800b774 <tcp_receive+0x88c>)
 800b65c:	891c      	ldrh	r4, [r3, #8]
 800b65e:	4b45      	ldr	r3, [pc, #276]	; (800b774 <tcp_receive+0x88c>)
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	899b      	ldrh	r3, [r3, #12]
 800b664:	b29b      	uxth	r3, r3
 800b666:	4618      	mov	r0, r3
 800b668:	f7fb f804 	bl	8006674 <lwip_htons>
 800b66c:	4603      	mov	r3, r0
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	f003 0303 	and.w	r3, r3, #3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <tcp_receive+0x794>
 800b678:	2301      	movs	r3, #1
 800b67a:	e000      	b.n	800b67e <tcp_receive+0x796>
 800b67c:	2300      	movs	r3, #0
 800b67e:	4423      	add	r3, r4
 800b680:	b29a      	uxth	r2, r3
 800b682:	4b3d      	ldr	r3, [pc, #244]	; (800b778 <tcp_receive+0x890>)
 800b684:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b686:	4b3c      	ldr	r3, [pc, #240]	; (800b778 <tcp_receive+0x890>)
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	4b38      	ldr	r3, [pc, #224]	; (800b770 <tcp_receive+0x888>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	441a      	add	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b69a:	440b      	add	r3, r1
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d006      	beq.n	800b6ae <tcp_receive+0x7c6>
 800b6a0:	4b36      	ldr	r3, [pc, #216]	; (800b77c <tcp_receive+0x894>)
 800b6a2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b6a6:	4936      	ldr	r1, [pc, #216]	; (800b780 <tcp_receive+0x898>)
 800b6a8:	4836      	ldr	r0, [pc, #216]	; (800b784 <tcp_receive+0x89c>)
 800b6aa:	f006 ff67 	bl	801257c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 80e7 	beq.w	800b886 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b6b8:	4b2e      	ldr	r3, [pc, #184]	; (800b774 <tcp_receive+0x88c>)
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	899b      	ldrh	r3, [r3, #12]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fa ffd7 	bl	8006674 <lwip_htons>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d010      	beq.n	800b6f4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b6d2:	e00a      	b.n	800b6ea <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7fd fd92 	bl	800920e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1f0      	bne.n	800b6d4 <tcp_receive+0x7ec>
 800b6f2:	e0c8      	b.n	800b886 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b6fa:	e052      	b.n	800b7a2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	899b      	ldrh	r3, [r3, #12]
 800b702:	b29b      	uxth	r3, r3
 800b704:	4618      	mov	r0, r3
 800b706:	f7fa ffb5 	bl	8006674 <lwip_htons>
 800b70a:	4603      	mov	r3, r0
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b00      	cmp	r3, #0
 800b714:	d03d      	beq.n	800b792 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b716:	4b17      	ldr	r3, [pc, #92]	; (800b774 <tcp_receive+0x88c>)
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	899b      	ldrh	r3, [r3, #12]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fa ffa8 	bl	8006674 <lwip_htons>
 800b724:	4603      	mov	r3, r0
 800b726:	b2db      	uxtb	r3, r3
 800b728:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d130      	bne.n	800b792 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b730:	4b10      	ldr	r3, [pc, #64]	; (800b774 <tcp_receive+0x88c>)
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	899b      	ldrh	r3, [r3, #12]
 800b736:	b29c      	uxth	r4, r3
 800b738:	2001      	movs	r0, #1
 800b73a:	f7fa ff9b 	bl	8006674 <lwip_htons>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	4b0c      	ldr	r3, [pc, #48]	; (800b774 <tcp_receive+0x88c>)
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	4322      	orrs	r2, r4
 800b748:	b292      	uxth	r2, r2
 800b74a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b74c:	4b09      	ldr	r3, [pc, #36]	; (800b774 <tcp_receive+0x88c>)
 800b74e:	891c      	ldrh	r4, [r3, #8]
 800b750:	4b08      	ldr	r3, [pc, #32]	; (800b774 <tcp_receive+0x88c>)
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	899b      	ldrh	r3, [r3, #12]
 800b756:	b29b      	uxth	r3, r3
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fa ff8b 	bl	8006674 <lwip_htons>
 800b75e:	4603      	mov	r3, r0
 800b760:	b2db      	uxtb	r3, r3
 800b762:	f003 0303 	and.w	r3, r3, #3
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00e      	beq.n	800b788 <tcp_receive+0x8a0>
 800b76a:	2301      	movs	r3, #1
 800b76c:	e00d      	b.n	800b78a <tcp_receive+0x8a2>
 800b76e:	bf00      	nop
 800b770:	2000a7e8 	.word	0x2000a7e8
 800b774:	2000a7c8 	.word	0x2000a7c8
 800b778:	2000a7f2 	.word	0x2000a7f2
 800b77c:	080145ec 	.word	0x080145ec
 800b780:	08014994 	.word	0x08014994
 800b784:	08014638 	.word	0x08014638
 800b788:	2300      	movs	r3, #0
 800b78a:	4423      	add	r3, r4
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	4b98      	ldr	r3, [pc, #608]	; (800b9f0 <tcp_receive+0xb08>)
 800b790:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b794:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b79c:	6938      	ldr	r0, [r7, #16]
 800b79e:	f7fd fd36 	bl	800920e <tcp_seg_free>
            while (next &&
 800b7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00e      	beq.n	800b7c6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b7a8:	4b91      	ldr	r3, [pc, #580]	; (800b9f0 <tcp_receive+0xb08>)
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4b91      	ldr	r3, [pc, #580]	; (800b9f4 <tcp_receive+0xb0c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	441a      	add	r2, r3
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7bc:	8909      	ldrh	r1, [r1, #8]
 800b7be:	440b      	add	r3, r1
 800b7c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	da9a      	bge.n	800b6fc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d059      	beq.n	800b880 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800b7cc:	4b88      	ldr	r3, [pc, #544]	; (800b9f0 <tcp_receive+0xb08>)
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b88      	ldr	r3, [pc, #544]	; (800b9f4 <tcp_receive+0xb0c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	441a      	add	r2, r3
 800b7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dd4d      	ble.n	800b880 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	4b81      	ldr	r3, [pc, #516]	; (800b9f4 <tcp_receive+0xb0c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	4b80      	ldr	r3, [pc, #512]	; (800b9f8 <tcp_receive+0xb10>)
 800b7f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b7fa:	4b7f      	ldr	r3, [pc, #508]	; (800b9f8 <tcp_receive+0xb10>)
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	899b      	ldrh	r3, [r3, #12]
 800b800:	b29b      	uxth	r3, r3
 800b802:	4618      	mov	r0, r3
 800b804:	f7fa ff36 	bl	8006674 <lwip_htons>
 800b808:	4603      	mov	r3, r0
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	f003 0302 	and.w	r3, r3, #2
 800b810:	2b00      	cmp	r3, #0
 800b812:	d005      	beq.n	800b820 <tcp_receive+0x938>
                inseg.len -= 1;
 800b814:	4b78      	ldr	r3, [pc, #480]	; (800b9f8 <tcp_receive+0xb10>)
 800b816:	891b      	ldrh	r3, [r3, #8]
 800b818:	3b01      	subs	r3, #1
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	4b76      	ldr	r3, [pc, #472]	; (800b9f8 <tcp_receive+0xb10>)
 800b81e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b820:	4b75      	ldr	r3, [pc, #468]	; (800b9f8 <tcp_receive+0xb10>)
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	4a74      	ldr	r2, [pc, #464]	; (800b9f8 <tcp_receive+0xb10>)
 800b826:	8912      	ldrh	r2, [r2, #8]
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fc f8e6 	bl	80079fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b830:	4b71      	ldr	r3, [pc, #452]	; (800b9f8 <tcp_receive+0xb10>)
 800b832:	891c      	ldrh	r4, [r3, #8]
 800b834:	4b70      	ldr	r3, [pc, #448]	; (800b9f8 <tcp_receive+0xb10>)
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	899b      	ldrh	r3, [r3, #12]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fa ff19 	bl	8006674 <lwip_htons>
 800b842:	4603      	mov	r3, r0
 800b844:	b2db      	uxtb	r3, r3
 800b846:	f003 0303 	and.w	r3, r3, #3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <tcp_receive+0x96a>
 800b84e:	2301      	movs	r3, #1
 800b850:	e000      	b.n	800b854 <tcp_receive+0x96c>
 800b852:	2300      	movs	r3, #0
 800b854:	4423      	add	r3, r4
 800b856:	b29a      	uxth	r2, r3
 800b858:	4b65      	ldr	r3, [pc, #404]	; (800b9f0 <tcp_receive+0xb08>)
 800b85a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b85c:	4b64      	ldr	r3, [pc, #400]	; (800b9f0 <tcp_receive+0xb08>)
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	4b64      	ldr	r3, [pc, #400]	; (800b9f4 <tcp_receive+0xb0c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	441a      	add	r2, r3
 800b868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d006      	beq.n	800b880 <tcp_receive+0x998>
 800b872:	4b62      	ldr	r3, [pc, #392]	; (800b9fc <tcp_receive+0xb14>)
 800b874:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b878:	4961      	ldr	r1, [pc, #388]	; (800ba00 <tcp_receive+0xb18>)
 800b87a:	4862      	ldr	r0, [pc, #392]	; (800ba04 <tcp_receive+0xb1c>)
 800b87c:	f006 fe7e 	bl	801257c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b884:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b886:	4b5a      	ldr	r3, [pc, #360]	; (800b9f0 <tcp_receive+0xb08>)
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	4b59      	ldr	r3, [pc, #356]	; (800b9f4 <tcp_receive+0xb0c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	441a      	add	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b89a:	4b55      	ldr	r3, [pc, #340]	; (800b9f0 <tcp_receive+0xb08>)
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d206      	bcs.n	800b8b0 <tcp_receive+0x9c8>
 800b8a2:	4b56      	ldr	r3, [pc, #344]	; (800b9fc <tcp_receive+0xb14>)
 800b8a4:	f240 6207 	movw	r2, #1543	; 0x607
 800b8a8:	4957      	ldr	r1, [pc, #348]	; (800ba08 <tcp_receive+0xb20>)
 800b8aa:	4856      	ldr	r0, [pc, #344]	; (800ba04 <tcp_receive+0xb1c>)
 800b8ac:	f006 fe66 	bl	801257c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8b4:	4b4e      	ldr	r3, [pc, #312]	; (800b9f0 <tcp_receive+0xb08>)
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7fc ffc5 	bl	8008850 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b8c6:	4b4c      	ldr	r3, [pc, #304]	; (800b9f8 <tcp_receive+0xb10>)
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	891b      	ldrh	r3, [r3, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d006      	beq.n	800b8de <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800b8d0:	4b49      	ldr	r3, [pc, #292]	; (800b9f8 <tcp_receive+0xb10>)
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4a4d      	ldr	r2, [pc, #308]	; (800ba0c <tcp_receive+0xb24>)
 800b8d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b8d8:	4b47      	ldr	r3, [pc, #284]	; (800b9f8 <tcp_receive+0xb10>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b8de:	4b46      	ldr	r3, [pc, #280]	; (800b9f8 <tcp_receive+0xb10>)
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	899b      	ldrh	r3, [r3, #12]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fa fec4 	bl	8006674 <lwip_htons>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 80b8 	beq.w	800ba6a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b8fa:	4b45      	ldr	r3, [pc, #276]	; (800ba10 <tcp_receive+0xb28>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	f043 0320 	orr.w	r3, r3, #32
 800b902:	b2da      	uxtb	r2, r3
 800b904:	4b42      	ldr	r3, [pc, #264]	; (800ba10 <tcp_receive+0xb28>)
 800b906:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b908:	e0af      	b.n	800ba6a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b90e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	4a36      	ldr	r2, [pc, #216]	; (800b9f4 <tcp_receive+0xb0c>)
 800b91a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	891b      	ldrh	r3, [r3, #8]
 800b920:	461c      	mov	r4, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	899b      	ldrh	r3, [r3, #12]
 800b928:	b29b      	uxth	r3, r3
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fa fea2 	bl	8006674 <lwip_htons>
 800b930:	4603      	mov	r3, r0
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 0303 	and.w	r3, r3, #3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <tcp_receive+0xa58>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e000      	b.n	800b942 <tcp_receive+0xa5a>
 800b940:	2300      	movs	r3, #0
 800b942:	191a      	adds	r2, r3, r4
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	441a      	add	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b952:	461c      	mov	r4, r3
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	891b      	ldrh	r3, [r3, #8]
 800b958:	461d      	mov	r5, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	899b      	ldrh	r3, [r3, #12]
 800b960:	b29b      	uxth	r3, r3
 800b962:	4618      	mov	r0, r3
 800b964:	f7fa fe86 	bl	8006674 <lwip_htons>
 800b968:	4603      	mov	r3, r0
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	f003 0303 	and.w	r3, r3, #3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <tcp_receive+0xa90>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <tcp_receive+0xa92>
 800b978:	2300      	movs	r3, #0
 800b97a:	442b      	add	r3, r5
 800b97c:	429c      	cmp	r4, r3
 800b97e:	d206      	bcs.n	800b98e <tcp_receive+0xaa6>
 800b980:	4b1e      	ldr	r3, [pc, #120]	; (800b9fc <tcp_receive+0xb14>)
 800b982:	f240 622b 	movw	r2, #1579	; 0x62b
 800b986:	4923      	ldr	r1, [pc, #140]	; (800ba14 <tcp_receive+0xb2c>)
 800b988:	481e      	ldr	r0, [pc, #120]	; (800ba04 <tcp_receive+0xb1c>)
 800b98a:	f006 fdf7 	bl	801257c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	891b      	ldrh	r3, [r3, #8]
 800b992:	461c      	mov	r4, r3
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	899b      	ldrh	r3, [r3, #12]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fa fe69 	bl	8006674 <lwip_htons>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	f003 0303 	and.w	r3, r3, #3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <tcp_receive+0xaca>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <tcp_receive+0xacc>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	1919      	adds	r1, r3, r4
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9ba:	b28b      	uxth	r3, r1
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7fc ff43 	bl	8008850 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	891b      	ldrh	r3, [r3, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d028      	beq.n	800ba26 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ba0c <tcp_receive+0xb24>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01d      	beq.n	800ba18 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800b9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <tcp_receive+0xb24>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f7fc fa50 	bl	8007e8c <pbuf_cat>
 800b9ec:	e018      	b.n	800ba20 <tcp_receive+0xb38>
 800b9ee:	bf00      	nop
 800b9f0:	2000a7f2 	.word	0x2000a7f2
 800b9f4:	2000a7e8 	.word	0x2000a7e8
 800b9f8:	2000a7c8 	.word	0x2000a7c8
 800b9fc:	080145ec 	.word	0x080145ec
 800ba00:	080149cc 	.word	0x080149cc
 800ba04:	08014638 	.word	0x08014638
 800ba08:	08014a08 	.word	0x08014a08
 800ba0c:	2000a7f8 	.word	0x2000a7f8
 800ba10:	2000a7f5 	.word	0x2000a7f5
 800ba14:	08014a28 	.word	0x08014a28
            } else {
              recv_data = cseg->p;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	4a70      	ldr	r2, [pc, #448]	; (800bbe0 <tcp_receive+0xcf8>)
 800ba1e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2200      	movs	r2, #0
 800ba24:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	899b      	ldrh	r3, [r3, #12]
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fa fe20 	bl	8006674 <lwip_htons>
 800ba34:	4603      	mov	r3, r0
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00d      	beq.n	800ba5c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ba40:	4b68      	ldr	r3, [pc, #416]	; (800bbe4 <tcp_receive+0xcfc>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	f043 0320 	orr.w	r3, r3, #32
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	4b66      	ldr	r3, [pc, #408]	; (800bbe4 <tcp_receive+0xcfc>)
 800ba4c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	7d1b      	ldrb	r3, [r3, #20]
 800ba52:	2b04      	cmp	r3, #4
 800ba54:	d102      	bne.n	800ba5c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2207      	movs	r2, #7
 800ba5a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ba64:	68b8      	ldr	r0, [r7, #8]
 800ba66:	f7fd fbd2 	bl	800920e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d008      	beq.n	800ba84 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	f43f af43 	beq.w	800b90a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	8b5b      	ldrh	r3, [r3, #26]
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00e      	beq.n	800baae <tcp_receive+0xbc6>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	8b5b      	ldrh	r3, [r3, #26]
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	835a      	strh	r2, [r3, #26]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	8b5b      	ldrh	r3, [r3, #26]
 800baa2:	f043 0302 	orr.w	r3, r3, #2
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800baac:	e188      	b.n	800bdc0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	8b5b      	ldrh	r3, [r3, #26]
 800bab2:	f043 0301 	orr.w	r3, r3, #1
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800babc:	e180      	b.n	800bdc0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d106      	bne.n	800bad4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bac6:	4848      	ldr	r0, [pc, #288]	; (800bbe8 <tcp_receive+0xd00>)
 800bac8:	f7fd fbba 	bl	8009240 <tcp_seg_copy>
 800bacc:	4602      	mov	r2, r0
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	675a      	str	r2, [r3, #116]	; 0x74
 800bad2:	e16d      	b.n	800bdb0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800badc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bade:	e157      	b.n	800bd90 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800bae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	4b41      	ldr	r3, [pc, #260]	; (800bbec <tcp_receive+0xd04>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d11d      	bne.n	800bb2a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800baee:	4b3e      	ldr	r3, [pc, #248]	; (800bbe8 <tcp_receive+0xd00>)
 800baf0:	891a      	ldrh	r2, [r3, #8]
 800baf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf4:	891b      	ldrh	r3, [r3, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	f240 814f 	bls.w	800bd9a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bafc:	483a      	ldr	r0, [pc, #232]	; (800bbe8 <tcp_receive+0xd00>)
 800bafe:	f7fd fb9f 	bl	8009240 <tcp_seg_copy>
 800bb02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 8149 	beq.w	800bd9e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800bb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <tcp_receive+0xc32>
                    prev->next = cseg;
 800bb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	e002      	b.n	800bb20 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bb20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb22:	6978      	ldr	r0, [r7, #20]
 800bb24:	f7ff f8dc 	bl	800ace0 <tcp_oos_insert_segment>
                }
                break;
 800bb28:	e139      	b.n	800bd9e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d117      	bne.n	800bb60 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bb30:	4b2e      	ldr	r3, [pc, #184]	; (800bbec <tcp_receive+0xd04>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	da57      	bge.n	800bbf0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb40:	4829      	ldr	r0, [pc, #164]	; (800bbe8 <tcp_receive+0xd00>)
 800bb42:	f7fd fb7d 	bl	8009240 <tcp_seg_copy>
 800bb46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f000 8129 	beq.w	800bda2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bb56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb58:	69b8      	ldr	r0, [r7, #24]
 800bb5a:	f7ff f8c1 	bl	800ace0 <tcp_oos_insert_segment>
                  }
                  break;
 800bb5e:	e120      	b.n	800bda2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bb60:	4b22      	ldr	r3, [pc, #136]	; (800bbec <tcp_receive+0xd04>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	db3e      	blt.n	800bbf0 <tcp_receive+0xd08>
 800bb72:	4b1e      	ldr	r3, [pc, #120]	; (800bbec <tcp_receive+0xd04>)
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	3301      	adds	r3, #1
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	dc35      	bgt.n	800bbf0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb84:	4818      	ldr	r0, [pc, #96]	; (800bbe8 <tcp_receive+0xd00>)
 800bb86:	f7fd fb5b 	bl	8009240 <tcp_seg_copy>
 800bb8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 8109 	beq.w	800bda6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb9c:	8912      	ldrh	r2, [r2, #8]
 800bb9e:	441a      	add	r2, r3
 800bba0:	4b12      	ldr	r3, [pc, #72]	; (800bbec <tcp_receive+0xd04>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dd12      	ble.n	800bbd0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bbaa:	4b10      	ldr	r3, [pc, #64]	; (800bbec <tcp_receive+0xd04>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc6:	891b      	ldrh	r3, [r3, #8]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f7fb ff16 	bl	80079fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bbd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbd8:	69f8      	ldr	r0, [r7, #28]
 800bbda:	f7ff f881 	bl	800ace0 <tcp_oos_insert_segment>
                  }
                  break;
 800bbde:	e0e2      	b.n	800bda6 <tcp_receive+0xebe>
 800bbe0:	2000a7f8 	.word	0x2000a7f8
 800bbe4:	2000a7f5 	.word	0x2000a7f5
 800bbe8:	2000a7c8 	.word	0x2000a7c8
 800bbec:	2000a7e8 	.word	0x2000a7e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f040 80c6 	bne.w	800bd8a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bbfe:	4b80      	ldr	r3, [pc, #512]	; (800be00 <tcp_receive+0xf18>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f340 80bd 	ble.w	800bd8a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	899b      	ldrh	r3, [r3, #12]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fa fd2b 	bl	8006674 <lwip_htons>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f040 80bf 	bne.w	800bdaa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bc2c:	4875      	ldr	r0, [pc, #468]	; (800be04 <tcp_receive+0xf1c>)
 800bc2e:	f7fd fb07 	bl	8009240 <tcp_seg_copy>
 800bc32:	4602      	mov	r2, r0
 800bc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 80b6 	beq.w	800bdae <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc4a:	8912      	ldrh	r2, [r2, #8]
 800bc4c:	441a      	add	r2, r3
 800bc4e:	4b6c      	ldr	r3, [pc, #432]	; (800be00 <tcp_receive+0xf18>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd12      	ble.n	800bc7e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bc58:	4b69      	ldr	r3, [pc, #420]	; (800be00 <tcp_receive+0xf18>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	891b      	ldrh	r3, [r3, #8]
 800bc76:	4619      	mov	r1, r3
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f7fb febf 	bl	80079fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bc7e:	4b62      	ldr	r3, [pc, #392]	; (800be08 <tcp_receive+0xf20>)
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	4b5e      	ldr	r3, [pc, #376]	; (800be00 <tcp_receive+0xf18>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	441a      	add	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc92:	440b      	add	r3, r1
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f340 8089 	ble.w	800bdae <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	899b      	ldrh	r3, [r3, #12]
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fa fce4 	bl	8006674 <lwip_htons>
 800bcac:	4603      	mov	r3, r0
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d022      	beq.n	800bcfe <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	899b      	ldrh	r3, [r3, #12]
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	b21b      	sxth	r3, r3
 800bcc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bcc8:	b21c      	sxth	r4, r3
 800bcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	899b      	ldrh	r3, [r3, #12]
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fa fccd 	bl	8006674 <lwip_htons>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fa fcc4 	bl	8006674 <lwip_htons>
 800bcec:	4603      	mov	r3, r0
 800bcee:	b21b      	sxth	r3, r3
 800bcf0:	4323      	orrs	r3, r4
 800bcf2:	b21a      	sxth	r2, r3
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	b292      	uxth	r2, r2
 800bcfc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd08:	4413      	add	r3, r2
 800bd0a:	b299      	uxth	r1, r3
 800bd0c:	4b3c      	ldr	r3, [pc, #240]	; (800be00 <tcp_receive+0xf18>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	1a8a      	subs	r2, r1, r2
 800bd18:	b292      	uxth	r2, r2
 800bd1a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	891b      	ldrh	r3, [r3, #8]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fb fe66 	bl	80079fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	891c      	ldrh	r4, [r3, #8]
 800bd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	899b      	ldrh	r3, [r3, #12]
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fa fc97 	bl	8006674 <lwip_htons>
 800bd46:	4603      	mov	r3, r0
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	f003 0303 	and.w	r3, r3, #3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d001      	beq.n	800bd56 <tcp_receive+0xe6e>
 800bd52:	2301      	movs	r3, #1
 800bd54:	e000      	b.n	800bd58 <tcp_receive+0xe70>
 800bd56:	2300      	movs	r3, #0
 800bd58:	4423      	add	r3, r4
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	4b2a      	ldr	r3, [pc, #168]	; (800be08 <tcp_receive+0xf20>)
 800bd5e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bd60:	4b29      	ldr	r3, [pc, #164]	; (800be08 <tcp_receive+0xf20>)
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	4b26      	ldr	r3, [pc, #152]	; (800be00 <tcp_receive+0xf18>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	441a      	add	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd74:	440b      	add	r3, r1
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d019      	beq.n	800bdae <tcp_receive+0xec6>
 800bd7a:	4b24      	ldr	r3, [pc, #144]	; (800be0c <tcp_receive+0xf24>)
 800bd7c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bd80:	4923      	ldr	r1, [pc, #140]	; (800be10 <tcp_receive+0xf28>)
 800bd82:	4824      	ldr	r0, [pc, #144]	; (800be14 <tcp_receive+0xf2c>)
 800bd84:	f006 fbfa 	bl	801257c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bd88:	e011      	b.n	800bdae <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f47f aea4 	bne.w	800bae0 <tcp_receive+0xbf8>
 800bd98:	e00a      	b.n	800bdb0 <tcp_receive+0xec8>
                break;
 800bd9a:	bf00      	nop
 800bd9c:	e008      	b.n	800bdb0 <tcp_receive+0xec8>
                break;
 800bd9e:	bf00      	nop
 800bda0:	e006      	b.n	800bdb0 <tcp_receive+0xec8>
                  break;
 800bda2:	bf00      	nop
 800bda4:	e004      	b.n	800bdb0 <tcp_receive+0xec8>
                  break;
 800bda6:	bf00      	nop
 800bda8:	e002      	b.n	800bdb0 <tcp_receive+0xec8>
                  break;
 800bdaa:	bf00      	nop
 800bdac:	e000      	b.n	800bdb0 <tcp_receive+0xec8>
                break;
 800bdae:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f001 fa33 	bl	800d21c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bdb6:	e003      	b.n	800bdc0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 fa2f 	bl	800d21c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bdbe:	e01a      	b.n	800bdf6 <tcp_receive+0xf0e>
 800bdc0:	e019      	b.n	800bdf6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bdc2:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <tcp_receive+0xf18>)
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	db0a      	blt.n	800bde6 <tcp_receive+0xefe>
 800bdd0:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <tcp_receive+0xf18>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bddc:	440b      	add	r3, r1
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	3301      	adds	r3, #1
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dd07      	ble.n	800bdf6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	8b5b      	ldrh	r3, [r3, #26]
 800bdea:	f043 0302 	orr.w	r3, r3, #2
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bdf4:	e7ff      	b.n	800bdf6 <tcp_receive+0xf0e>
 800bdf6:	bf00      	nop
 800bdf8:	3750      	adds	r7, #80	; 0x50
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bdfe:	bf00      	nop
 800be00:	2000a7e8 	.word	0x2000a7e8
 800be04:	2000a7c8 	.word	0x2000a7c8
 800be08:	2000a7f2 	.word	0x2000a7f2
 800be0c:	080145ec 	.word	0x080145ec
 800be10:	08014994 	.word	0x08014994
 800be14:	08014638 	.word	0x08014638

0800be18 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800be1e:	4b15      	ldr	r3, [pc, #84]	; (800be74 <tcp_get_next_optbyte+0x5c>)
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	b291      	uxth	r1, r2
 800be26:	4a13      	ldr	r2, [pc, #76]	; (800be74 <tcp_get_next_optbyte+0x5c>)
 800be28:	8011      	strh	r1, [r2, #0]
 800be2a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800be2c:	4b12      	ldr	r3, [pc, #72]	; (800be78 <tcp_get_next_optbyte+0x60>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d004      	beq.n	800be3e <tcp_get_next_optbyte+0x26>
 800be34:	4b11      	ldr	r3, [pc, #68]	; (800be7c <tcp_get_next_optbyte+0x64>)
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	88fa      	ldrh	r2, [r7, #6]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d208      	bcs.n	800be50 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800be3e:	4b10      	ldr	r3, [pc, #64]	; (800be80 <tcp_get_next_optbyte+0x68>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3314      	adds	r3, #20
 800be44:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800be46:	88fb      	ldrh	r3, [r7, #6]
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	4413      	add	r3, r2
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	e00b      	b.n	800be68 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800be50:	88fb      	ldrh	r3, [r7, #6]
 800be52:	b2da      	uxtb	r2, r3
 800be54:	4b09      	ldr	r3, [pc, #36]	; (800be7c <tcp_get_next_optbyte+0x64>)
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800be5e:	4b06      	ldr	r3, [pc, #24]	; (800be78 <tcp_get_next_optbyte+0x60>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	797b      	ldrb	r3, [r7, #5]
 800be64:	4413      	add	r3, r2
 800be66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be68:	4618      	mov	r0, r3
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	2000a7e4 	.word	0x2000a7e4
 800be78:	2000a7e0 	.word	0x2000a7e0
 800be7c:	2000a7de 	.word	0x2000a7de
 800be80:	2000a7d8 	.word	0x2000a7d8

0800be84 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d106      	bne.n	800bea0 <tcp_parseopt+0x1c>
 800be92:	4b32      	ldr	r3, [pc, #200]	; (800bf5c <tcp_parseopt+0xd8>)
 800be94:	f240 727d 	movw	r2, #1917	; 0x77d
 800be98:	4931      	ldr	r1, [pc, #196]	; (800bf60 <tcp_parseopt+0xdc>)
 800be9a:	4832      	ldr	r0, [pc, #200]	; (800bf64 <tcp_parseopt+0xe0>)
 800be9c:	f006 fb6e 	bl	801257c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bea0:	4b31      	ldr	r3, [pc, #196]	; (800bf68 <tcp_parseopt+0xe4>)
 800bea2:	881b      	ldrh	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d055      	beq.n	800bf54 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bea8:	4b30      	ldr	r3, [pc, #192]	; (800bf6c <tcp_parseopt+0xe8>)
 800beaa:	2200      	movs	r2, #0
 800beac:	801a      	strh	r2, [r3, #0]
 800beae:	e045      	b.n	800bf3c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800beb0:	f7ff ffb2 	bl	800be18 <tcp_get_next_optbyte>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d006      	beq.n	800becc <tcp_parseopt+0x48>
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	dc2b      	bgt.n	800bf1a <tcp_parseopt+0x96>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d041      	beq.n	800bf4a <tcp_parseopt+0xc6>
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d127      	bne.n	800bf1a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800beca:	e037      	b.n	800bf3c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800becc:	f7ff ffa4 	bl	800be18 <tcp_get_next_optbyte>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b04      	cmp	r3, #4
 800bed4:	d13b      	bne.n	800bf4e <tcp_parseopt+0xca>
 800bed6:	4b25      	ldr	r3, [pc, #148]	; (800bf6c <tcp_parseopt+0xe8>)
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	3301      	adds	r3, #1
 800bedc:	4a22      	ldr	r2, [pc, #136]	; (800bf68 <tcp_parseopt+0xe4>)
 800bede:	8812      	ldrh	r2, [r2, #0]
 800bee0:	4293      	cmp	r3, r2
 800bee2:	da34      	bge.n	800bf4e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bee4:	f7ff ff98 	bl	800be18 <tcp_get_next_optbyte>
 800bee8:	4603      	mov	r3, r0
 800beea:	b29b      	uxth	r3, r3
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bef0:	f7ff ff92 	bl	800be18 <tcp_get_next_optbyte>
 800bef4:	4603      	mov	r3, r0
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	89bb      	ldrh	r3, [r7, #12]
 800befa:	4313      	orrs	r3, r2
 800befc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800befe:	89bb      	ldrh	r3, [r7, #12]
 800bf00:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bf04:	d804      	bhi.n	800bf10 <tcp_parseopt+0x8c>
 800bf06:	89bb      	ldrh	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <tcp_parseopt+0x8c>
 800bf0c:	89ba      	ldrh	r2, [r7, #12]
 800bf0e:	e001      	b.n	800bf14 <tcp_parseopt+0x90>
 800bf10:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bf18:	e010      	b.n	800bf3c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bf1a:	f7ff ff7d 	bl	800be18 <tcp_get_next_optbyte>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bf22:	7afb      	ldrb	r3, [r7, #11]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d914      	bls.n	800bf52 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bf28:	7afb      	ldrb	r3, [r7, #11]
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <tcp_parseopt+0xe8>)
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	4413      	add	r3, r2
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	3b02      	subs	r3, #2
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	4b0c      	ldr	r3, [pc, #48]	; (800bf6c <tcp_parseopt+0xe8>)
 800bf3a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bf3c:	4b0b      	ldr	r3, [pc, #44]	; (800bf6c <tcp_parseopt+0xe8>)
 800bf3e:	881a      	ldrh	r2, [r3, #0]
 800bf40:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <tcp_parseopt+0xe4>)
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d3b3      	bcc.n	800beb0 <tcp_parseopt+0x2c>
 800bf48:	e004      	b.n	800bf54 <tcp_parseopt+0xd0>
          return;
 800bf4a:	bf00      	nop
 800bf4c:	e002      	b.n	800bf54 <tcp_parseopt+0xd0>
            return;
 800bf4e:	bf00      	nop
 800bf50:	e000      	b.n	800bf54 <tcp_parseopt+0xd0>
            return;
 800bf52:	bf00      	nop
      }
    }
  }
}
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	080145ec 	.word	0x080145ec
 800bf60:	08014a50 	.word	0x08014a50
 800bf64:	08014638 	.word	0x08014638
 800bf68:	2000a7dc 	.word	0x2000a7dc
 800bf6c:	2000a7e4 	.word	0x2000a7e4

0800bf70 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bf70:	b480      	push	{r7}
 800bf72:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <tcp_trigger_input_pcb_close+0x1c>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	f043 0310 	orr.w	r3, r3, #16
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	4b03      	ldr	r3, [pc, #12]	; (800bf8c <tcp_trigger_input_pcb_close+0x1c>)
 800bf80:	701a      	strb	r2, [r3, #0]
}
 800bf82:	bf00      	nop
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	2000a7f5 	.word	0x2000a7f5

0800bf90 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <tcp_route+0x28>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	7a1b      	ldrb	r3, [r3, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d006      	beq.n	800bfb8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	7a1b      	ldrb	r3, [r3, #8]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fb fb6a 	bl	8007688 <netif_get_by_index>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	e003      	b.n	800bfc0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f004 ffd5 	bl	8010f68 <ip4_route>
 800bfbe:	4603      	mov	r3, r0
  }
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	603b      	str	r3, [r7, #0]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d105      	bne.n	800bfea <tcp_create_segment+0x22>
 800bfde:	4b44      	ldr	r3, [pc, #272]	; (800c0f0 <tcp_create_segment+0x128>)
 800bfe0:	22a3      	movs	r2, #163	; 0xa3
 800bfe2:	4944      	ldr	r1, [pc, #272]	; (800c0f4 <tcp_create_segment+0x12c>)
 800bfe4:	4844      	ldr	r0, [pc, #272]	; (800c0f8 <tcp_create_segment+0x130>)
 800bfe6:	f006 fac9 	bl	801257c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d105      	bne.n	800bffc <tcp_create_segment+0x34>
 800bff0:	4b3f      	ldr	r3, [pc, #252]	; (800c0f0 <tcp_create_segment+0x128>)
 800bff2:	22a4      	movs	r2, #164	; 0xa4
 800bff4:	4941      	ldr	r1, [pc, #260]	; (800c0fc <tcp_create_segment+0x134>)
 800bff6:	4840      	ldr	r0, [pc, #256]	; (800c0f8 <tcp_create_segment+0x130>)
 800bff8:	f006 fac0 	bl	801257c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c00a:	2003      	movs	r0, #3
 800c00c:	f7fa ffaa 	bl	8006f64 <memp_malloc>
 800c010:	6138      	str	r0, [r7, #16]
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c018:	68b8      	ldr	r0, [r7, #8]
 800c01a:	f7fb fe75 	bl	8007d08 <pbuf_free>
    return NULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	e061      	b.n	800c0e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c028:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	891a      	ldrh	r2, [r3, #8]
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	429a      	cmp	r2, r3
 800c040:	d205      	bcs.n	800c04e <tcp_create_segment+0x86>
 800c042:	4b2b      	ldr	r3, [pc, #172]	; (800c0f0 <tcp_create_segment+0x128>)
 800c044:	22b0      	movs	r2, #176	; 0xb0
 800c046:	492e      	ldr	r1, [pc, #184]	; (800c100 <tcp_create_segment+0x138>)
 800c048:	482b      	ldr	r0, [pc, #172]	; (800c0f8 <tcp_create_segment+0x130>)
 800c04a:	f006 fa97 	bl	801257c <iprintf>
  seg->len = p->tot_len - optlen;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	891a      	ldrh	r2, [r3, #8]
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	b29b      	uxth	r3, r3
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	b29a      	uxth	r2, r3
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c05e:	2114      	movs	r1, #20
 800c060:	68b8      	ldr	r0, [r7, #8]
 800c062:	f7fb fdbb 	bl	8007bdc <pbuf_add_header>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d004      	beq.n	800c076 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c06c:	6938      	ldr	r0, [r7, #16]
 800c06e:	f7fd f8ce 	bl	800920e <tcp_seg_free>
    return NULL;
 800c072:	2300      	movs	r3, #0
 800c074:	e037      	b.n	800c0e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	8ada      	ldrh	r2, [r3, #22]
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	68dc      	ldr	r4, [r3, #12]
 800c088:	4610      	mov	r0, r2
 800c08a:	f7fa faf3 	bl	8006674 <lwip_htons>
 800c08e:	4603      	mov	r3, r0
 800c090:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	8b1a      	ldrh	r2, [r3, #24]
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	68dc      	ldr	r4, [r3, #12]
 800c09a:	4610      	mov	r0, r2
 800c09c:	f7fa faea 	bl	8006674 <lwip_htons>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	68dc      	ldr	r4, [r3, #12]
 800c0a8:	6838      	ldr	r0, [r7, #0]
 800c0aa:	f7fa faf8 	bl	800669e <lwip_htonl>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	089b      	lsrs	r3, r3, #2
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	3305      	adds	r3, #5
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	031b      	lsls	r3, r3, #12
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	68dc      	ldr	r4, [r3, #12]
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	f7fa fad0 	bl	8006674 <lwip_htons>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	749a      	strb	r2, [r3, #18]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	74da      	strb	r2, [r3, #19]
  return seg;
 800c0e4:	693b      	ldr	r3, [r7, #16]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	371c      	adds	r7, #28
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd90      	pop	{r4, r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	08014a6c 	.word	0x08014a6c
 800c0f4:	08014aa0 	.word	0x08014aa0
 800c0f8:	08014ac0 	.word	0x08014ac0
 800c0fc:	08014ae8 	.word	0x08014ae8
 800c100:	08014b0c 	.word	0x08014b0c

0800c104 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c104:	b590      	push	{r4, r7, lr}
 800c106:	b08b      	sub	sp, #44	; 0x2c
 800c108:	af02      	add	r7, sp, #8
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	61fb      	str	r3, [r7, #28]
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d106      	bne.n	800c130 <tcp_split_unsent_seg+0x2c>
 800c122:	4b95      	ldr	r3, [pc, #596]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c124:	f240 324b 	movw	r2, #843	; 0x34b
 800c128:	4994      	ldr	r1, [pc, #592]	; (800c37c <tcp_split_unsent_seg+0x278>)
 800c12a:	4895      	ldr	r0, [pc, #596]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c12c:	f006 fa26 	bl	801257c <iprintf>

  useg = pcb->unsent;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c134:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d102      	bne.n	800c142 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c140:	e116      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c142:	887b      	ldrh	r3, [r7, #2]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d109      	bne.n	800c15c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c148:	4b8b      	ldr	r3, [pc, #556]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c14a:	f240 3253 	movw	r2, #851	; 0x353
 800c14e:	498d      	ldr	r1, [pc, #564]	; (800c384 <tcp_split_unsent_seg+0x280>)
 800c150:	488b      	ldr	r0, [pc, #556]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c152:	f006 fa13 	bl	801257c <iprintf>
    return ERR_VAL;
 800c156:	f06f 0305 	mvn.w	r3, #5
 800c15a:	e109      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	891b      	ldrh	r3, [r3, #8]
 800c160:	887a      	ldrh	r2, [r7, #2]
 800c162:	429a      	cmp	r2, r3
 800c164:	d301      	bcc.n	800c16a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	e102      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c16e:	887a      	ldrh	r2, [r7, #2]
 800c170:	429a      	cmp	r2, r3
 800c172:	d906      	bls.n	800c182 <tcp_split_unsent_seg+0x7e>
 800c174:	4b80      	ldr	r3, [pc, #512]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c176:	f240 325b 	movw	r2, #859	; 0x35b
 800c17a:	4983      	ldr	r1, [pc, #524]	; (800c388 <tcp_split_unsent_seg+0x284>)
 800c17c:	4880      	ldr	r0, [pc, #512]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c17e:	f006 f9fd 	bl	801257c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	891b      	ldrh	r3, [r3, #8]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <tcp_split_unsent_seg+0x94>
 800c18a:	4b7b      	ldr	r3, [pc, #492]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c18c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c190:	497e      	ldr	r1, [pc, #504]	; (800c38c <tcp_split_unsent_seg+0x288>)
 800c192:	487b      	ldr	r0, [pc, #492]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c194:	f006 f9f2 	bl	801257c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	7a9b      	ldrb	r3, [r3, #10]
 800c19c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 0304 	and.w	r3, r3, #4
 800c1a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	891a      	ldrh	r2, [r3, #8]
 800c1ae:	887b      	ldrh	r3, [r7, #2]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	89bb      	ldrh	r3, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	2036      	movs	r0, #54	; 0x36
 800c1c6:	f7fb fabb 	bl	8007740 <pbuf_alloc>
 800c1ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 80b7 	beq.w	800c342 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	891a      	ldrh	r2, [r3, #8]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	891b      	ldrh	r3, [r3, #8]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	887b      	ldrh	r3, [r7, #2]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	6858      	ldr	r0, [r3, #4]
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	685a      	ldr	r2, [r3, #4]
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	18d1      	adds	r1, r2, r3
 800c1f4:	897b      	ldrh	r3, [r7, #10]
 800c1f6:	89ba      	ldrh	r2, [r7, #12]
 800c1f8:	f7fb ff80 	bl	80080fc <pbuf_copy_partial>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	461a      	mov	r2, r3
 800c200:	89bb      	ldrh	r3, [r7, #12]
 800c202:	4293      	cmp	r3, r2
 800c204:	f040 809f 	bne.w	800c346 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	899b      	ldrh	r3, [r3, #12]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	4618      	mov	r0, r3
 800c212:	f7fa fa2f 	bl	8006674 <lwip_htons>
 800c216:	4603      	mov	r3, r0
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c21e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c220:	2300      	movs	r3, #0
 800c222:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c224:	7efb      	ldrb	r3, [r7, #27]
 800c226:	f003 0308 	and.w	r3, r3, #8
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d007      	beq.n	800c23e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c22e:	7efb      	ldrb	r3, [r7, #27]
 800c230:	f023 0308 	bic.w	r3, r3, #8
 800c234:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c236:	7ebb      	ldrb	r3, [r7, #26]
 800c238:	f043 0308 	orr.w	r3, r3, #8
 800c23c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c23e:	7efb      	ldrb	r3, [r7, #27]
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	d007      	beq.n	800c258 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c248:	7efb      	ldrb	r3, [r7, #27]
 800c24a:	f023 0301 	bic.w	r3, r3, #1
 800c24e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c250:	7ebb      	ldrb	r3, [r7, #26]
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fa fa1d 	bl	800669e <lwip_htonl>
 800c264:	4602      	mov	r2, r0
 800c266:	887b      	ldrh	r3, [r7, #2]
 800c268:	18d1      	adds	r1, r2, r3
 800c26a:	7eba      	ldrb	r2, [r7, #26]
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	460b      	mov	r3, r1
 800c272:	6939      	ldr	r1, [r7, #16]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff fea7 	bl	800bfc8 <tcp_create_segment>
 800c27a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d063      	beq.n	800c34a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	4618      	mov	r0, r3
 800c288:	f7fb fdc6 	bl	8007e18 <pbuf_clen>
 800c28c:	4603      	mov	r3, r0
 800c28e:	461a      	mov	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c296:	1a9b      	subs	r3, r3, r2
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	6858      	ldr	r0, [r3, #4]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	891a      	ldrh	r2, [r3, #8]
 800c2aa:	89bb      	ldrh	r3, [r7, #12]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f7fb fba3 	bl	80079fc <pbuf_realloc>
  useg->len -= remainder;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	891a      	ldrh	r2, [r3, #8]
 800c2ba:	89bb      	ldrh	r3, [r7, #12]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	899b      	ldrh	r3, [r3, #12]
 800c2ca:	b29c      	uxth	r4, r3
 800c2cc:	7efb      	ldrb	r3, [r7, #27]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fa f9cf 	bl	8006674 <lwip_htons>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	461a      	mov	r2, r3
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	4322      	orrs	r2, r4
 800c2e0:	b292      	uxth	r2, r2
 800c2e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fb fd95 	bl	8007e18 <pbuf_clen>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2f8:	4413      	add	r3, r2
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	4618      	mov	r0, r3
 800c308:	f7fb fd86 	bl	8007e18 <pbuf_clen>
 800c30c:	4603      	mov	r3, r0
 800c30e:	461a      	mov	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c316:	4413      	add	r3, r2
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d103      	bne.n	800c33e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	e016      	b.n	800c370 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c342:	bf00      	nop
 800c344:	e002      	b.n	800c34c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c346:	bf00      	nop
 800c348:	e000      	b.n	800c34c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c34a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d006      	beq.n	800c360 <tcp_split_unsent_seg+0x25c>
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <tcp_split_unsent_seg+0x274>)
 800c354:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c358:	490d      	ldr	r1, [pc, #52]	; (800c390 <tcp_split_unsent_seg+0x28c>)
 800c35a:	4809      	ldr	r0, [pc, #36]	; (800c380 <tcp_split_unsent_seg+0x27c>)
 800c35c:	f006 f90e 	bl	801257c <iprintf>
  if (p != NULL) {
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c366:	6938      	ldr	r0, [r7, #16]
 800c368:	f7fb fcce 	bl	8007d08 <pbuf_free>
  }

  return ERR_MEM;
 800c36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c370:	4618      	mov	r0, r3
 800c372:	3724      	adds	r7, #36	; 0x24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd90      	pop	{r4, r7, pc}
 800c378:	08014a6c 	.word	0x08014a6c
 800c37c:	08014e00 	.word	0x08014e00
 800c380:	08014ac0 	.word	0x08014ac0
 800c384:	08014e24 	.word	0x08014e24
 800c388:	08014e48 	.word	0x08014e48
 800c38c:	08014e58 	.word	0x08014e58
 800c390:	08014e68 	.word	0x08014e68

0800c394 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c394:	b590      	push	{r4, r7, lr}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <tcp_send_fin+0x1c>
 800c3a2:	4b21      	ldr	r3, [pc, #132]	; (800c428 <tcp_send_fin+0x94>)
 800c3a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c3a8:	4920      	ldr	r1, [pc, #128]	; (800c42c <tcp_send_fin+0x98>)
 800c3aa:	4821      	ldr	r0, [pc, #132]	; (800c430 <tcp_send_fin+0x9c>)
 800c3ac:	f006 f8e6 	bl	801257c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d02e      	beq.n	800c416 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	e002      	b.n	800c3c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f8      	bne.n	800c3c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	899b      	ldrh	r3, [r3, #12]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fa f94c 	bl	8006674 <lwip_htons>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	f003 0307 	and.w	r3, r3, #7
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d116      	bne.n	800c416 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	899b      	ldrh	r3, [r3, #12]
 800c3ee:	b29c      	uxth	r4, r3
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	f7fa f93f 	bl	8006674 <lwip_htons>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	4322      	orrs	r2, r4
 800c400:	b292      	uxth	r2, r2
 800c402:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	8b5b      	ldrh	r3, [r3, #26]
 800c408:	f043 0320 	orr.w	r3, r3, #32
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	e004      	b.n	800c420 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c416:	2101      	movs	r1, #1
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f80b 	bl	800c434 <tcp_enqueue_flags>
 800c41e:	4603      	mov	r3, r0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	bd90      	pop	{r4, r7, pc}
 800c428:	08014a6c 	.word	0x08014a6c
 800c42c:	08014e74 	.word	0x08014e74
 800c430:	08014ac0 	.word	0x08014ac0

0800c434 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08a      	sub	sp, #40	; 0x28
 800c438:	af02      	add	r7, sp, #8
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	460b      	mov	r3, r1
 800c43e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	f003 0303 	and.w	r3, r3, #3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <tcp_enqueue_flags+0x2c>
 800c452:	4b67      	ldr	r3, [pc, #412]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c454:	f240 4211 	movw	r2, #1041	; 0x411
 800c458:	4966      	ldr	r1, [pc, #408]	; (800c5f4 <tcp_enqueue_flags+0x1c0>)
 800c45a:	4867      	ldr	r0, [pc, #412]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c45c:	f006 f88e 	bl	801257c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <tcp_enqueue_flags+0x40>
 800c466:	4b62      	ldr	r3, [pc, #392]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c468:	f240 4213 	movw	r2, #1043	; 0x413
 800c46c:	4963      	ldr	r1, [pc, #396]	; (800c5fc <tcp_enqueue_flags+0x1c8>)
 800c46e:	4862      	ldr	r0, [pc, #392]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c470:	f006 f884 	bl	801257c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c47e:	2301      	movs	r3, #1
 800c480:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c482:	7ffb      	ldrb	r3, [r7, #31]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	b2db      	uxtb	r3, r3
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	b29b      	uxth	r3, r3
 800c492:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c496:	4619      	mov	r1, r3
 800c498:	2036      	movs	r0, #54	; 0x36
 800c49a:	f7fb f951 	bl	8007740 <pbuf_alloc>
 800c49e:	6138      	str	r0, [r7, #16]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8b5b      	ldrh	r3, [r3, #26]
 800c4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4b8:	e095      	b.n	800c5e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	895a      	ldrh	r2, [r3, #10]
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d206      	bcs.n	800c4d4 <tcp_enqueue_flags+0xa0>
 800c4c6:	4b4a      	ldr	r3, [pc, #296]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c4c8:	f240 4239 	movw	r2, #1081	; 0x439
 800c4cc:	494c      	ldr	r1, [pc, #304]	; (800c600 <tcp_enqueue_flags+0x1cc>)
 800c4ce:	484a      	ldr	r0, [pc, #296]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c4d0:	f006 f854 	bl	801257c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c4d8:	78fa      	ldrb	r2, [r7, #3]
 800c4da:	7ffb      	ldrb	r3, [r7, #31]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	6939      	ldr	r1, [r7, #16]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fd70 	bl	800bfc8 <tcp_create_segment>
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d109      	bne.n	800c504 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	8b5b      	ldrh	r3, [r3, #26]
 800c4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c4fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c502:	e070      	b.n	800c5e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	f003 0303 	and.w	r3, r3, #3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d006      	beq.n	800c51e <tcp_enqueue_flags+0xea>
 800c510:	4b37      	ldr	r3, [pc, #220]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c512:	f240 4242 	movw	r2, #1090	; 0x442
 800c516:	493b      	ldr	r1, [pc, #236]	; (800c604 <tcp_enqueue_flags+0x1d0>)
 800c518:	4837      	ldr	r0, [pc, #220]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c51a:	f006 f82f 	bl	801257c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	891b      	ldrh	r3, [r3, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <tcp_enqueue_flags+0x100>
 800c526:	4b32      	ldr	r3, [pc, #200]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c528:	f240 4243 	movw	r2, #1091	; 0x443
 800c52c:	4936      	ldr	r1, [pc, #216]	; (800c608 <tcp_enqueue_flags+0x1d4>)
 800c52e:	4832      	ldr	r0, [pc, #200]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c530:	f006 f824 	bl	801257c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d103      	bne.n	800c544 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	66da      	str	r2, [r3, #108]	; 0x6c
 800c542:	e00d      	b.n	800c560 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c548:	61bb      	str	r3, [r7, #24]
 800c54a:	e002      	b.n	800c552 <tcp_enqueue_flags+0x11e>
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1f8      	bne.n	800c54c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c568:	78fb      	ldrb	r3, [r7, #3]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d104      	bne.n	800c57c <tcp_enqueue_flags+0x148>
 800c572:	78fb      	ldrb	r3, [r7, #3]
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c586:	78fb      	ldrb	r3, [r7, #3]
 800c588:	f003 0301 	and.w	r3, r3, #1
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	8b5b      	ldrh	r3, [r3, #26]
 800c594:	f043 0320 	orr.w	r3, r3, #32
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fb fc38 	bl	8007e18 <pbuf_clen>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5b2:	4413      	add	r3, r2
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00e      	beq.n	800c5e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10a      	bne.n	800c5e4 <tcp_enqueue_flags+0x1b0>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <tcp_enqueue_flags+0x1b0>
 800c5d6:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <tcp_enqueue_flags+0x1bc>)
 800c5d8:	f240 4265 	movw	r2, #1125	; 0x465
 800c5dc:	490b      	ldr	r1, [pc, #44]	; (800c60c <tcp_enqueue_flags+0x1d8>)
 800c5de:	4806      	ldr	r0, [pc, #24]	; (800c5f8 <tcp_enqueue_flags+0x1c4>)
 800c5e0:	f005 ffcc 	bl	801257c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3720      	adds	r7, #32
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08014a6c 	.word	0x08014a6c
 800c5f4:	08014e90 	.word	0x08014e90
 800c5f8:	08014ac0 	.word	0x08014ac0
 800c5fc:	08014ee8 	.word	0x08014ee8
 800c600:	08014f08 	.word	0x08014f08
 800c604:	08014f44 	.word	0x08014f44
 800c608:	08014f5c 	.word	0x08014f5c
 800c60c:	08014f88 	.word	0x08014f88

0800c610 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	b08a      	sub	sp, #40	; 0x28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <tcp_output+0x1c>
 800c61e:	4b8a      	ldr	r3, [pc, #552]	; (800c848 <tcp_output+0x238>)
 800c620:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c624:	4989      	ldr	r1, [pc, #548]	; (800c84c <tcp_output+0x23c>)
 800c626:	488a      	ldr	r0, [pc, #552]	; (800c850 <tcp_output+0x240>)
 800c628:	f005 ffa8 	bl	801257c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d106      	bne.n	800c642 <tcp_output+0x32>
 800c634:	4b84      	ldr	r3, [pc, #528]	; (800c848 <tcp_output+0x238>)
 800c636:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c63a:	4986      	ldr	r1, [pc, #536]	; (800c854 <tcp_output+0x244>)
 800c63c:	4884      	ldr	r0, [pc, #528]	; (800c850 <tcp_output+0x240>)
 800c63e:	f005 ff9d 	bl	801257c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c642:	4b85      	ldr	r3, [pc, #532]	; (800c858 <tcp_output+0x248>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d101      	bne.n	800c650 <tcp_output+0x40>
    return ERR_OK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	e1ce      	b.n	800c9ee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c65c:	4293      	cmp	r3, r2
 800c65e:	bf28      	it	cs
 800c660:	4613      	movcs	r3, r2
 800c662:	b29b      	uxth	r3, r3
 800c664:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c66a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10b      	bne.n	800c68a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	8b5b      	ldrh	r3, [r3, #26]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 81aa 	beq.w	800c9d4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fdcb 	bl	800d21c <tcp_send_empty_ack>
 800c686:	4603      	mov	r3, r0
 800c688:	e1b1      	b.n	800c9ee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3304      	adds	r3, #4
 800c690:	461a      	mov	r2, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff fc7c 	bl	800bf90 <tcp_route>
 800c698:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <tcp_output+0x96>
    return ERR_RTE;
 800c6a0:	f06f 0303 	mvn.w	r3, #3
 800c6a4:	e1a3      	b.n	800c9ee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <tcp_output+0xa4>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d111      	bne.n	800c6d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d002      	beq.n	800c6c0 <tcp_output+0xb0>
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	e000      	b.n	800c6c2 <tcp_output+0xb2>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d102      	bne.n	800c6d0 <tcp_output+0xc0>
      return ERR_RTE;
 800c6ca:	f06f 0303 	mvn.w	r3, #3
 800c6ce:	e18e      	b.n	800c9ee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f9 ffdd 	bl	800669e <lwip_htonl>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ee:	8912      	ldrh	r2, [r2, #8]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d227      	bcs.n	800c748 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6fe:	461a      	mov	r2, r3
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	4293      	cmp	r3, r2
 800c704:	d114      	bne.n	800c730 <tcp_output+0x120>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d110      	bne.n	800c730 <tcp_output+0x120>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10b      	bne.n	800c730 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	8b5b      	ldrh	r3, [r3, #26]
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 814d 	beq.w	800c9d8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fd6c 	bl	800d21c <tcp_send_empty_ack>
 800c744:	4603      	mov	r3, r0
 800c746:	e152      	b.n	800c9ee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c754:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 811c 	beq.w	800c996 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c75e:	e002      	b.n	800c766 <tcp_output+0x156>
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	623b      	str	r3, [r7, #32]
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1f8      	bne.n	800c760 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c76e:	e112      	b.n	800c996 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	899b      	ldrh	r3, [r3, #12]
 800c776:	b29b      	uxth	r3, r3
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f9 ff7b 	bl	8006674 <lwip_htons>
 800c77e:	4603      	mov	r3, r0
 800c780:	b2db      	uxtb	r3, r3
 800c782:	f003 0304 	and.w	r3, r3, #4
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <tcp_output+0x188>
 800c78a:	4b2f      	ldr	r3, [pc, #188]	; (800c848 <tcp_output+0x238>)
 800c78c:	f240 5236 	movw	r2, #1334	; 0x536
 800c790:	4932      	ldr	r1, [pc, #200]	; (800c85c <tcp_output+0x24c>)
 800c792:	482f      	ldr	r0, [pc, #188]	; (800c850 <tcp_output+0x240>)
 800c794:	f005 fef2 	bl	801257c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d01f      	beq.n	800c7e0 <tcp_output+0x1d0>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8b5b      	ldrh	r3, [r3, #26]
 800c7a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d119      	bne.n	800c7e0 <tcp_output+0x1d0>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00b      	beq.n	800c7cc <tcp_output+0x1bc>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d110      	bne.n	800c7e0 <tcp_output+0x1d0>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c2:	891a      	ldrh	r2, [r3, #8]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d209      	bcs.n	800c7e0 <tcp_output+0x1d0>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d004      	beq.n	800c7e0 <tcp_output+0x1d0>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7dc:	2b08      	cmp	r3, #8
 800c7de:	d901      	bls.n	800c7e4 <tcp_output+0x1d4>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e000      	b.n	800c7e6 <tcp_output+0x1d6>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	8b5b      	ldrh	r3, [r3, #26]
 800c7ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 80e4 	beq.w	800c9c0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7d1b      	ldrb	r3, [r3, #20]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d00d      	beq.n	800c81c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	899b      	ldrh	r3, [r3, #12]
 800c806:	b29c      	uxth	r4, r3
 800c808:	2010      	movs	r0, #16
 800c80a:	f7f9 ff33 	bl	8006674 <lwip_htons>
 800c80e:	4603      	mov	r3, r0
 800c810:	461a      	mov	r2, r3
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	4322      	orrs	r2, r4
 800c818:	b292      	uxth	r2, r2
 800c81a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	6879      	ldr	r1, [r7, #4]
 800c820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c822:	f000 f909 	bl	800ca38 <tcp_output_segment>
 800c826:	4603      	mov	r3, r0
 800c828:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d016      	beq.n	800c860 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	8b5b      	ldrh	r3, [r3, #26]
 800c836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	835a      	strh	r2, [r3, #26]
      return err;
 800c840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c844:	e0d3      	b.n	800c9ee <tcp_output+0x3de>
 800c846:	bf00      	nop
 800c848:	08014a6c 	.word	0x08014a6c
 800c84c:	08014fb0 	.word	0x08014fb0
 800c850:	08014ac0 	.word	0x08014ac0
 800c854:	08014fc8 	.word	0x08014fc8
 800c858:	2000a7fc 	.word	0x2000a7fc
 800c85c:	08014ff0 	.word	0x08014ff0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	7d1b      	ldrb	r3, [r3, #20]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d006      	beq.n	800c87e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	8b5b      	ldrh	r3, [r3, #26]
 800c874:	f023 0303 	bic.w	r3, r3, #3
 800c878:	b29a      	uxth	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	4618      	mov	r0, r3
 800c886:	f7f9 ff0a 	bl	800669e <lwip_htonl>
 800c88a:	4604      	mov	r4, r0
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	891b      	ldrh	r3, [r3, #8]
 800c890:	461d      	mov	r5, r3
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	899b      	ldrh	r3, [r3, #12]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f9 feea 	bl	8006674 <lwip_htons>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0303 	and.w	r3, r3, #3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <tcp_output+0x2a0>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e000      	b.n	800c8b2 <tcp_output+0x2a2>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	442b      	add	r3, r5
 800c8b4:	4423      	add	r3, r4
 800c8b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	da02      	bge.n	800c8ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	891b      	ldrh	r3, [r3, #8]
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	899b      	ldrh	r3, [r3, #12]
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7f9 fecb 	bl	8006674 <lwip_htons>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	f003 0303 	and.w	r3, r3, #3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <tcp_output+0x2de>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <tcp_output+0x2e0>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	4423      	add	r3, r4
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d049      	beq.n	800c98a <tcp_output+0x37a>
      seg->next = NULL;
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <tcp_output+0x300>
        pcb->unacked = seg;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c908:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	623b      	str	r3, [r7, #32]
 800c90e:	e03f      	b.n	800c990 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	4618      	mov	r0, r3
 800c918:	f7f9 fec1 	bl	800669e <lwip_htonl>
 800c91c:	4604      	mov	r4, r0
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	4618      	mov	r0, r3
 800c926:	f7f9 feba 	bl	800669e <lwip_htonl>
 800c92a:	4603      	mov	r3, r0
 800c92c:	1ae3      	subs	r3, r4, r3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da24      	bge.n	800c97c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3370      	adds	r3, #112	; 0x70
 800c936:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c938:	e002      	b.n	800c940 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d011      	beq.n	800c96c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	4618      	mov	r0, r3
 800c952:	f7f9 fea4 	bl	800669e <lwip_htonl>
 800c956:	4604      	mov	r4, r0
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7f9 fe9d 	bl	800669e <lwip_htonl>
 800c964:	4603      	mov	r3, r0
 800c966:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c968:	2b00      	cmp	r3, #0
 800c96a:	dbe6      	blt.n	800c93a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	e009      	b.n	800c990 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c980:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	623b      	str	r3, [r7, #32]
 800c988:	e002      	b.n	800c990 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c98a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c98c:	f7fc fc3f 	bl	800920e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c994:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d012      	beq.n	800c9c2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7f9 fe7b 	bl	800669e <lwip_htonl>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b2:	8912      	ldrh	r2, [r2, #8]
 800c9b4:	4413      	add	r3, r2
  while (seg != NULL &&
 800c9b6:	69ba      	ldr	r2, [r7, #24]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	f4bf aed9 	bcs.w	800c770 <tcp_output+0x160>
 800c9be:	e000      	b.n	800c9c2 <tcp_output+0x3b2>
      break;
 800c9c0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d108      	bne.n	800c9dc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c9d2:	e004      	b.n	800c9de <tcp_output+0x3ce>
    goto output_done;
 800c9d4:	bf00      	nop
 800c9d6:	e002      	b.n	800c9de <tcp_output+0x3ce>
    goto output_done;
 800c9d8:	bf00      	nop
 800c9da:	e000      	b.n	800c9de <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c9dc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8b5b      	ldrh	r3, [r3, #26]
 800c9e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3728      	adds	r7, #40	; 0x28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c9f6:	bf00      	nop

0800c9f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <tcp_output_segment_busy+0x1c>
 800ca06:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <tcp_output_segment_busy+0x34>)
 800ca08:	f240 529a 	movw	r2, #1434	; 0x59a
 800ca0c:	4908      	ldr	r1, [pc, #32]	; (800ca30 <tcp_output_segment_busy+0x38>)
 800ca0e:	4809      	ldr	r0, [pc, #36]	; (800ca34 <tcp_output_segment_busy+0x3c>)
 800ca10:	f005 fdb4 	bl	801257c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	7b9b      	ldrb	r3, [r3, #14]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d001      	beq.n	800ca22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	08014a6c 	.word	0x08014a6c
 800ca30:	08015008 	.word	0x08015008
 800ca34:	08014ac0 	.word	0x08014ac0

0800ca38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ca38:	b5b0      	push	{r4, r5, r7, lr}
 800ca3a:	b08c      	sub	sp, #48	; 0x30
 800ca3c:	af04      	add	r7, sp, #16
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <tcp_output_segment+0x20>
 800ca4a:	4b64      	ldr	r3, [pc, #400]	; (800cbdc <tcp_output_segment+0x1a4>)
 800ca4c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ca50:	4963      	ldr	r1, [pc, #396]	; (800cbe0 <tcp_output_segment+0x1a8>)
 800ca52:	4864      	ldr	r0, [pc, #400]	; (800cbe4 <tcp_output_segment+0x1ac>)
 800ca54:	f005 fd92 	bl	801257c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d106      	bne.n	800ca6c <tcp_output_segment+0x34>
 800ca5e:	4b5f      	ldr	r3, [pc, #380]	; (800cbdc <tcp_output_segment+0x1a4>)
 800ca60:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ca64:	4960      	ldr	r1, [pc, #384]	; (800cbe8 <tcp_output_segment+0x1b0>)
 800ca66:	485f      	ldr	r0, [pc, #380]	; (800cbe4 <tcp_output_segment+0x1ac>)
 800ca68:	f005 fd88 	bl	801257c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <tcp_output_segment+0x48>
 800ca72:	4b5a      	ldr	r3, [pc, #360]	; (800cbdc <tcp_output_segment+0x1a4>)
 800ca74:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ca78:	495c      	ldr	r1, [pc, #368]	; (800cbec <tcp_output_segment+0x1b4>)
 800ca7a:	485a      	ldr	r0, [pc, #360]	; (800cbe4 <tcp_output_segment+0x1ac>)
 800ca7c:	f005 fd7e 	bl	801257c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f7ff ffb9 	bl	800c9f8 <tcp_output_segment_busy>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e0a1      	b.n	800cbd4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	68dc      	ldr	r4, [r3, #12]
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f7f9 fe00 	bl	800669e <lwip_htonl>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	68dc      	ldr	r4, [r3, #12]
 800caaa:	4610      	mov	r0, r2
 800caac:	f7f9 fde2 	bl	8006674 <lwip_htons>
 800cab0:	4603      	mov	r3, r0
 800cab2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cabc:	441a      	add	r2, r3
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	3314      	adds	r3, #20
 800cac8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	7a9b      	ldrb	r3, [r3, #10]
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d015      	beq.n	800cb02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	3304      	adds	r3, #4
 800cada:	461a      	mov	r2, r3
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cae2:	f7fc fe8b 	bl	80097fc <tcp_eff_send_mss_netif>
 800cae6:	4603      	mov	r3, r0
 800cae8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800caea:	8b7b      	ldrh	r3, [r7, #26]
 800caec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f9 fdd4 	bl	800669e <lwip_htonl>
 800caf6:	4602      	mov	r2, r0
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	3304      	adds	r3, #4
 800cb00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	da02      	bge.n	800cb12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10c      	bne.n	800cb34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cb1a:	4b35      	ldr	r3, [pc, #212]	; (800cbf0 <tcp_output_segment+0x1b8>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7f9 fdb8 	bl	800669e <lwip_htonl>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	68da      	ldr	r2, [r3, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	8959      	ldrh	r1, [r3, #10]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	8b3a      	ldrh	r2, [r7, #24]
 800cb4e:	1a8a      	subs	r2, r1, r2
 800cb50:	b292      	uxth	r2, r2
 800cb52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	8919      	ldrh	r1, [r3, #8]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	8b3a      	ldrh	r2, [r7, #24]
 800cb60:	1a8a      	subs	r2, r1, r2
 800cb62:	b292      	uxth	r2, r2
 800cb64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	68d2      	ldr	r2, [r2, #12]
 800cb6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	741a      	strb	r2, [r3, #16]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	7a9b      	ldrb	r3, [r3, #10]
 800cb84:	f003 0301 	and.w	r3, r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <tcp_output_segment+0x158>
 800cb8c:	2318      	movs	r3, #24
 800cb8e:	e000      	b.n	800cb92 <tcp_output_segment+0x15a>
 800cb90:	2314      	movs	r3, #20
 800cb92:	4413      	add	r3, r2
 800cb94:	69fa      	ldr	r2, [r7, #28]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d006      	beq.n	800cba8 <tcp_output_segment+0x170>
 800cb9a:	4b10      	ldr	r3, [pc, #64]	; (800cbdc <tcp_output_segment+0x1a4>)
 800cb9c:	f240 621c 	movw	r2, #1564	; 0x61c
 800cba0:	4914      	ldr	r1, [pc, #80]	; (800cbf4 <tcp_output_segment+0x1bc>)
 800cba2:	4810      	ldr	r0, [pc, #64]	; (800cbe4 <tcp_output_segment+0x1ac>)
 800cba4:	f005 fcea 	bl	801257c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6858      	ldr	r0, [r3, #4]
 800cbac:	68b9      	ldr	r1, [r7, #8]
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	1d1c      	adds	r4, r3, #4
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	7add      	ldrb	r5, [r3, #11]
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	7a9b      	ldrb	r3, [r3, #10]
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	9202      	str	r2, [sp, #8]
 800cbbe:	2206      	movs	r2, #6
 800cbc0:	9201      	str	r2, [sp, #4]
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	f004 fbaa 	bl	8011320 <ip4_output_if>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cbd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3720      	adds	r7, #32
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bdb0      	pop	{r4, r5, r7, pc}
 800cbdc:	08014a6c 	.word	0x08014a6c
 800cbe0:	08015030 	.word	0x08015030
 800cbe4:	08014ac0 	.word	0x08014ac0
 800cbe8:	08015050 	.word	0x08015050
 800cbec:	08015070 	.word	0x08015070
 800cbf0:	2000a7b0 	.word	0x2000a7b0
 800cbf4:	08015094 	.word	0x08015094

0800cbf8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cbf8:	b5b0      	push	{r4, r5, r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d106      	bne.n	800cc14 <tcp_rexmit_rto_prepare+0x1c>
 800cc06:	4b31      	ldr	r3, [pc, #196]	; (800cccc <tcp_rexmit_rto_prepare+0xd4>)
 800cc08:	f240 6263 	movw	r2, #1635	; 0x663
 800cc0c:	4930      	ldr	r1, [pc, #192]	; (800ccd0 <tcp_rexmit_rto_prepare+0xd8>)
 800cc0e:	4831      	ldr	r0, [pc, #196]	; (800ccd4 <tcp_rexmit_rto_prepare+0xdc>)
 800cc10:	f005 fcb4 	bl	801257c <iprintf>

  if (pcb->unacked == NULL) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cc1c:	f06f 0305 	mvn.w	r3, #5
 800cc20:	e050      	b.n	800ccc4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	e00b      	b.n	800cc42 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f7ff fee4 	bl	800c9f8 <tcp_output_segment_busy>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cc36:	f06f 0305 	mvn.w	r3, #5
 800cc3a:	e043      	b.n	800ccc4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1ef      	bne.n	800cc2a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff fed4 	bl	800c9f8 <tcp_output_segment_busy>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d002      	beq.n	800cc5c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cc56:	f06f 0305 	mvn.w	r3, #5
 800cc5a:	e033      	b.n	800ccc4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	8b5b      	ldrh	r3, [r3, #26]
 800cc76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f9 fd09 	bl	800669e <lwip_htonl>
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	891b      	ldrh	r3, [r3, #8]
 800cc92:	461d      	mov	r5, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	899b      	ldrh	r3, [r3, #12]
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7f9 fce9 	bl	8006674 <lwip_htons>
 800cca2:	4603      	mov	r3, r0
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	f003 0303 	and.w	r3, r3, #3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <tcp_rexmit_rto_prepare+0xba>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e000      	b.n	800ccb4 <tcp_rexmit_rto_prepare+0xbc>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	442b      	add	r3, r5
 800ccb6:	18e2      	adds	r2, r4, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bdb0      	pop	{r4, r5, r7, pc}
 800cccc:	08014a6c 	.word	0x08014a6c
 800ccd0:	080150a8 	.word	0x080150a8
 800ccd4:	08014ac0 	.word	0x08014ac0

0800ccd8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <tcp_rexmit_rto_commit+0x1c>
 800cce6:	4b0d      	ldr	r3, [pc, #52]	; (800cd1c <tcp_rexmit_rto_commit+0x44>)
 800cce8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ccec:	490c      	ldr	r1, [pc, #48]	; (800cd20 <tcp_rexmit_rto_commit+0x48>)
 800ccee:	480d      	ldr	r0, [pc, #52]	; (800cd24 <tcp_rexmit_rto_commit+0x4c>)
 800ccf0:	f005 fc44 	bl	801257c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccfa:	2bff      	cmp	r3, #255	; 0xff
 800ccfc:	d007      	beq.n	800cd0e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd04:	3301      	adds	r3, #1
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fc7e 	bl	800c610 <tcp_output>
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	08014a6c 	.word	0x08014a6c
 800cd20:	080150cc 	.word	0x080150cc
 800cd24:	08014ac0 	.word	0x08014ac0

0800cd28 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d106      	bne.n	800cd44 <tcp_rexmit_rto+0x1c>
 800cd36:	4b0a      	ldr	r3, [pc, #40]	; (800cd60 <tcp_rexmit_rto+0x38>)
 800cd38:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cd3c:	4909      	ldr	r1, [pc, #36]	; (800cd64 <tcp_rexmit_rto+0x3c>)
 800cd3e:	480a      	ldr	r0, [pc, #40]	; (800cd68 <tcp_rexmit_rto+0x40>)
 800cd40:	f005 fc1c 	bl	801257c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff ff57 	bl	800cbf8 <tcp_rexmit_rto_prepare>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d102      	bne.n	800cd56 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff ffc1 	bl	800ccd8 <tcp_rexmit_rto_commit>
  }
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	08014a6c 	.word	0x08014a6c
 800cd64:	080150f0 	.word	0x080150f0
 800cd68:	08014ac0 	.word	0x08014ac0

0800cd6c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cd6c:	b590      	push	{r4, r7, lr}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d106      	bne.n	800cd88 <tcp_rexmit+0x1c>
 800cd7a:	4b2f      	ldr	r3, [pc, #188]	; (800ce38 <tcp_rexmit+0xcc>)
 800cd7c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cd80:	492e      	ldr	r1, [pc, #184]	; (800ce3c <tcp_rexmit+0xd0>)
 800cd82:	482f      	ldr	r0, [pc, #188]	; (800ce40 <tcp_rexmit+0xd4>)
 800cd84:	f005 fbfa 	bl	801257c <iprintf>

  if (pcb->unacked == NULL) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d102      	bne.n	800cd96 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cd90:	f06f 0305 	mvn.w	r3, #5
 800cd94:	e04c      	b.n	800ce30 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd9a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cd9c:	68b8      	ldr	r0, [r7, #8]
 800cd9e:	f7ff fe2b 	bl	800c9f8 <tcp_output_segment_busy>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cda8:	f06f 0305 	mvn.w	r3, #5
 800cdac:	e040      	b.n	800ce30 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	336c      	adds	r3, #108	; 0x6c
 800cdba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cdbc:	e002      	b.n	800cdc4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d011      	beq.n	800cdf0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7f9 fc62 	bl	800669e <lwip_htonl>
 800cdda:	4604      	mov	r4, r0
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f9 fc5b 	bl	800669e <lwip_htonl>
 800cde8:	4603      	mov	r3, r0
 800cdea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dbe6      	blt.n	800cdbe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d103      	bne.n	800ce0e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce14:	2bff      	cmp	r3, #255	; 0xff
 800ce16:	d007      	beq.n	800ce28 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce1e:	3301      	adds	r3, #1
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd90      	pop	{r4, r7, pc}
 800ce38:	08014a6c 	.word	0x08014a6c
 800ce3c:	0801510c 	.word	0x0801510c
 800ce40:	08014ac0 	.word	0x08014ac0

0800ce44 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <tcp_rexmit_fast+0x1c>
 800ce52:	4b2a      	ldr	r3, [pc, #168]	; (800cefc <tcp_rexmit_fast+0xb8>)
 800ce54:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ce58:	4929      	ldr	r1, [pc, #164]	; (800cf00 <tcp_rexmit_fast+0xbc>)
 800ce5a:	482a      	ldr	r0, [pc, #168]	; (800cf04 <tcp_rexmit_fast+0xc0>)
 800ce5c:	f005 fb8e 	bl	801257c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d045      	beq.n	800cef4 <tcp_rexmit_fast+0xb0>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	8b5b      	ldrh	r3, [r3, #26]
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d13f      	bne.n	800cef4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff ff79 	bl	800cd6c <tcp_rexmit>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d139      	bne.n	800cef4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	bf28      	it	cs
 800ce90:	4613      	movcs	r3, r2
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	da00      	bge.n	800ce9a <tcp_rexmit_fast+0x56>
 800ce98:	3301      	adds	r3, #1
 800ce9a:	105b      	asrs	r3, r3, #1
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ceaa:	461a      	mov	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d206      	bcs.n	800cec4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cece:	4619      	mov	r1, r3
 800ced0:	0049      	lsls	r1, r1, #1
 800ced2:	440b      	add	r3, r1
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	4413      	add	r3, r2
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	8b5b      	ldrh	r3, [r3, #26]
 800cee4:	f043 0304 	orr.w	r3, r3, #4
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cef4:	bf00      	nop
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	08014a6c 	.word	0x08014a6c
 800cf00:	08015124 	.word	0x08015124
 800cf04:	08014ac0 	.word	0x08014ac0

0800cf08 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	607b      	str	r3, [r7, #4]
 800cf12:	460b      	mov	r3, r1
 800cf14:	817b      	strh	r3, [r7, #10]
 800cf16:	4613      	mov	r3, r2
 800cf18:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cf1a:	897a      	ldrh	r2, [r7, #10]
 800cf1c:	893b      	ldrh	r3, [r7, #8]
 800cf1e:	4413      	add	r3, r2
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	3314      	adds	r3, #20
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	2022      	movs	r0, #34	; 0x22
 800cf2e:	f7fa fc07 	bl	8007740 <pbuf_alloc>
 800cf32:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d04d      	beq.n	800cfd6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cf3a:	897b      	ldrh	r3, [r7, #10]
 800cf3c:	3313      	adds	r3, #19
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	8952      	ldrh	r2, [r2, #10]
 800cf42:	4293      	cmp	r3, r2
 800cf44:	db06      	blt.n	800cf54 <tcp_output_alloc_header_common+0x4c>
 800cf46:	4b26      	ldr	r3, [pc, #152]	; (800cfe0 <tcp_output_alloc_header_common+0xd8>)
 800cf48:	f240 7223 	movw	r2, #1827	; 0x723
 800cf4c:	4925      	ldr	r1, [pc, #148]	; (800cfe4 <tcp_output_alloc_header_common+0xdc>)
 800cf4e:	4826      	ldr	r0, [pc, #152]	; (800cfe8 <tcp_output_alloc_header_common+0xe0>)
 800cf50:	f005 fb14 	bl	801257c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cf5a:	8c3b      	ldrh	r3, [r7, #32]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7f9 fb89 	bl	8006674 <lwip_htons>
 800cf62:	4603      	mov	r3, r0
 800cf64:	461a      	mov	r2, r3
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cf6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f9 fb81 	bl	8006674 <lwip_htons>
 800cf72:	4603      	mov	r3, r0
 800cf74:	461a      	mov	r2, r3
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7f9 fb8c 	bl	800669e <lwip_htonl>
 800cf86:	4602      	mov	r2, r0
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cf8c:	897b      	ldrh	r3, [r7, #10]
 800cf8e:	089b      	lsrs	r3, r3, #2
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	3305      	adds	r3, #5
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	031b      	lsls	r3, r3, #12
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7f9 fb65 	bl	8006674 <lwip_htons>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	461a      	mov	r2, r3
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cfb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7f9 fb5d 	bl	8006674 <lwip_htons>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	741a      	strb	r2, [r3, #16]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	749a      	strb	r2, [r3, #18]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cfd6:	697b      	ldr	r3, [r7, #20]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	08014a6c 	.word	0x08014a6c
 800cfe4:	08015144 	.word	0x08015144
 800cfe8:	08014ac0 	.word	0x08014ac0

0800cfec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cfec:	b5b0      	push	{r4, r5, r7, lr}
 800cfee:	b08a      	sub	sp, #40	; 0x28
 800cff0:	af04      	add	r7, sp, #16
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	607b      	str	r3, [r7, #4]
 800cff6:	460b      	mov	r3, r1
 800cff8:	817b      	strh	r3, [r7, #10]
 800cffa:	4613      	mov	r3, r2
 800cffc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d106      	bne.n	800d012 <tcp_output_alloc_header+0x26>
 800d004:	4b15      	ldr	r3, [pc, #84]	; (800d05c <tcp_output_alloc_header+0x70>)
 800d006:	f240 7242 	movw	r2, #1858	; 0x742
 800d00a:	4915      	ldr	r1, [pc, #84]	; (800d060 <tcp_output_alloc_header+0x74>)
 800d00c:	4815      	ldr	r0, [pc, #84]	; (800d064 <tcp_output_alloc_header+0x78>)
 800d00e:	f005 fab5 	bl	801257c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	8adb      	ldrh	r3, [r3, #22]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	8b12      	ldrh	r2, [r2, #24]
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d022:	893d      	ldrh	r5, [r7, #8]
 800d024:	897c      	ldrh	r4, [r7, #10]
 800d026:	9103      	str	r1, [sp, #12]
 800d028:	2110      	movs	r1, #16
 800d02a:	9102      	str	r1, [sp, #8]
 800d02c:	9201      	str	r2, [sp, #4]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	462a      	mov	r2, r5
 800d034:	4621      	mov	r1, r4
 800d036:	f7ff ff67 	bl	800cf08 <tcp_output_alloc_header_common>
 800d03a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d006      	beq.n	800d050 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d04a:	441a      	add	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d050:	697b      	ldr	r3, [r7, #20]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bdb0      	pop	{r4, r5, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	08014a6c 	.word	0x08014a6c
 800d060:	08015174 	.word	0x08015174
 800d064:	08014ac0 	.word	0x08014ac0

0800d068 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	4611      	mov	r1, r2
 800d074:	461a      	mov	r2, r3
 800d076:	460b      	mov	r3, r1
 800d078:	71fb      	strb	r3, [r7, #7]
 800d07a:	4613      	mov	r3, r2
 800d07c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d106      	bne.n	800d096 <tcp_output_fill_options+0x2e>
 800d088:	4b12      	ldr	r3, [pc, #72]	; (800d0d4 <tcp_output_fill_options+0x6c>)
 800d08a:	f240 7256 	movw	r2, #1878	; 0x756
 800d08e:	4912      	ldr	r1, [pc, #72]	; (800d0d8 <tcp_output_fill_options+0x70>)
 800d090:	4812      	ldr	r0, [pc, #72]	; (800d0dc <tcp_output_fill_options+0x74>)
 800d092:	f005 fa73 	bl	801257c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	3314      	adds	r3, #20
 800d0a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d0a2:	8bfb      	ldrh	r3, [r7, #30]
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	f003 0304 	and.w	r3, r3, #4
 800d0b0:	4413      	add	r3, r2
 800d0b2:	3314      	adds	r3, #20
 800d0b4:	69ba      	ldr	r2, [r7, #24]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	697a      	ldr	r2, [r7, #20]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d006      	beq.n	800d0cc <tcp_output_fill_options+0x64>
 800d0be:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <tcp_output_fill_options+0x6c>)
 800d0c0:	f240 7275 	movw	r2, #1909	; 0x775
 800d0c4:	4906      	ldr	r1, [pc, #24]	; (800d0e0 <tcp_output_fill_options+0x78>)
 800d0c6:	4805      	ldr	r0, [pc, #20]	; (800d0dc <tcp_output_fill_options+0x74>)
 800d0c8:	f005 fa58 	bl	801257c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d0cc:	bf00      	nop
 800d0ce:	3720      	adds	r7, #32
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	08014a6c 	.word	0x08014a6c
 800d0d8:	0801519c 	.word	0x0801519c
 800d0dc:	08014ac0 	.word	0x08014ac0
 800d0e0:	08015094 	.word	0x08015094

0800d0e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b08a      	sub	sp, #40	; 0x28
 800d0e8:	af04      	add	r7, sp, #16
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d106      	bne.n	800d106 <tcp_output_control_segment+0x22>
 800d0f8:	4b1c      	ldr	r3, [pc, #112]	; (800d16c <tcp_output_control_segment+0x88>)
 800d0fa:	f240 7287 	movw	r2, #1927	; 0x787
 800d0fe:	491c      	ldr	r1, [pc, #112]	; (800d170 <tcp_output_control_segment+0x8c>)
 800d100:	481c      	ldr	r0, [pc, #112]	; (800d174 <tcp_output_control_segment+0x90>)
 800d102:	f005 fa3b 	bl	801257c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	6879      	ldr	r1, [r7, #4]
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f7fe ff40 	bl	800bf90 <tcp_route>
 800d110:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d102      	bne.n	800d11e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d118:	23fc      	movs	r3, #252	; 0xfc
 800d11a:	75fb      	strb	r3, [r7, #23]
 800d11c:	e01c      	b.n	800d158 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d006      	beq.n	800d132 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	7adb      	ldrb	r3, [r3, #11]
 800d128:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	7a9b      	ldrb	r3, [r3, #10]
 800d12e:	757b      	strb	r3, [r7, #21]
 800d130:	e003      	b.n	800d13a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d132:	23ff      	movs	r3, #255	; 0xff
 800d134:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d13a:	7dba      	ldrb	r2, [r7, #22]
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	9302      	str	r3, [sp, #8]
 800d140:	2306      	movs	r3, #6
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	7d7b      	ldrb	r3, [r7, #21]
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	4613      	mov	r3, r2
 800d14a:	683a      	ldr	r2, [r7, #0]
 800d14c:	6879      	ldr	r1, [r7, #4]
 800d14e:	68b8      	ldr	r0, [r7, #8]
 800d150:	f004 f8e6 	bl	8011320 <ip4_output_if>
 800d154:	4603      	mov	r3, r0
 800d156:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d158:	68b8      	ldr	r0, [r7, #8]
 800d15a:	f7fa fdd5 	bl	8007d08 <pbuf_free>
  return err;
 800d15e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	08014a6c 	.word	0x08014a6c
 800d170:	080151c4 	.word	0x080151c4
 800d174:	08014ac0 	.word	0x08014ac0

0800d178 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d178:	b590      	push	{r4, r7, lr}
 800d17a:	b08b      	sub	sp, #44	; 0x2c
 800d17c:	af04      	add	r7, sp, #16
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d106      	bne.n	800d19a <tcp_rst+0x22>
 800d18c:	4b1f      	ldr	r3, [pc, #124]	; (800d20c <tcp_rst+0x94>)
 800d18e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d192:	491f      	ldr	r1, [pc, #124]	; (800d210 <tcp_rst+0x98>)
 800d194:	481f      	ldr	r0, [pc, #124]	; (800d214 <tcp_rst+0x9c>)
 800d196:	f005 f9f1 	bl	801257c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d106      	bne.n	800d1ae <tcp_rst+0x36>
 800d1a0:	4b1a      	ldr	r3, [pc, #104]	; (800d20c <tcp_rst+0x94>)
 800d1a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d1a6:	491c      	ldr	r1, [pc, #112]	; (800d218 <tcp_rst+0xa0>)
 800d1a8:	481a      	ldr	r0, [pc, #104]	; (800d214 <tcp_rst+0x9c>)
 800d1aa:	f005 f9e7 	bl	801257c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d1b2:	f246 0308 	movw	r3, #24584	; 0x6008
 800d1b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	b29c      	uxth	r4, r3
 800d1bc:	68b8      	ldr	r0, [r7, #8]
 800d1be:	f7f9 fa6e 	bl	800669e <lwip_htonl>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	8abb      	ldrh	r3, [r7, #20]
 800d1c6:	9303      	str	r3, [sp, #12]
 800d1c8:	2314      	movs	r3, #20
 800d1ca:	9302      	str	r3, [sp, #8]
 800d1cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	4621      	mov	r1, r4
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff fe94 	bl	800cf08 <tcp_output_alloc_header_common>
 800d1e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00c      	beq.n	800d202 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	6939      	ldr	r1, [r7, #16]
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f7ff ff3a 	bl	800d068 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	6939      	ldr	r1, [r7, #16]
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f7ff ff72 	bl	800d0e4 <tcp_output_control_segment>
 800d200:	e000      	b.n	800d204 <tcp_rst+0x8c>
    return;
 800d202:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d204:	371c      	adds	r7, #28
 800d206:	46bd      	mov	sp, r7
 800d208:	bd90      	pop	{r4, r7, pc}
 800d20a:	bf00      	nop
 800d20c:	08014a6c 	.word	0x08014a6c
 800d210:	080151f0 	.word	0x080151f0
 800d214:	08014ac0 	.word	0x08014ac0
 800d218:	0801520c 	.word	0x0801520c

0800d21c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d21c:	b590      	push	{r4, r7, lr}
 800d21e:	b087      	sub	sp, #28
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d224:	2300      	movs	r3, #0
 800d226:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <tcp_send_empty_ack+0x24>
 800d232:	4b28      	ldr	r3, [pc, #160]	; (800d2d4 <tcp_send_empty_ack+0xb8>)
 800d234:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d238:	4927      	ldr	r1, [pc, #156]	; (800d2d8 <tcp_send_empty_ack+0xbc>)
 800d23a:	4828      	ldr	r0, [pc, #160]	; (800d2dc <tcp_send_empty_ack+0xc0>)
 800d23c:	f005 f99e 	bl	801257c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f003 0304 	and.w	r3, r3, #4
 800d24a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d24c:	7d7b      	ldrb	r3, [r7, #21]
 800d24e:	b29c      	uxth	r4, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d254:	4618      	mov	r0, r3
 800d256:	f7f9 fa22 	bl	800669e <lwip_htonl>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2200      	movs	r2, #0
 800d25e:	4621      	mov	r1, r4
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff fec3 	bl	800cfec <tcp_output_alloc_header>
 800d266:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d109      	bne.n	800d282 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	8b5b      	ldrh	r3, [r3, #26]
 800d272:	f043 0303 	orr.w	r3, r3, #3
 800d276:	b29a      	uxth	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d27c:	f06f 0301 	mvn.w	r3, #1
 800d280:	e023      	b.n	800d2ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d282:	7dbb      	ldrb	r3, [r7, #22]
 800d284:	7dfa      	ldrb	r2, [r7, #23]
 800d286:	6939      	ldr	r1, [r7, #16]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7ff feed 	bl	800d068 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	3304      	adds	r3, #4
 800d294:	6939      	ldr	r1, [r7, #16]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff ff24 	bl	800d0e4 <tcp_output_control_segment>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d007      	beq.n	800d2b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	8b5b      	ldrh	r3, [r3, #26]
 800d2ac:	f043 0303 	orr.w	r3, r3, #3
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	835a      	strh	r2, [r3, #26]
 800d2b6:	e006      	b.n	800d2c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	8b5b      	ldrh	r3, [r3, #26]
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	371c      	adds	r7, #28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd90      	pop	{r4, r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08014a6c 	.word	0x08014a6c
 800d2d8:	08015228 	.word	0x08015228
 800d2dc:	08014ac0 	.word	0x08014ac0

0800d2e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <tcp_keepalive+0x20>
 800d2f2:	4b18      	ldr	r3, [pc, #96]	; (800d354 <tcp_keepalive+0x74>)
 800d2f4:	f640 0224 	movw	r2, #2084	; 0x824
 800d2f8:	4917      	ldr	r1, [pc, #92]	; (800d358 <tcp_keepalive+0x78>)
 800d2fa:	4818      	ldr	r0, [pc, #96]	; (800d35c <tcp_keepalive+0x7c>)
 800d2fc:	f005 f93e 	bl	801257c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d300:	7dfb      	ldrb	r3, [r7, #23]
 800d302:	b29c      	uxth	r4, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d308:	3b01      	subs	r3, #1
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7f9 f9c7 	bl	800669e <lwip_htonl>
 800d310:	4603      	mov	r3, r0
 800d312:	2200      	movs	r2, #0
 800d314:	4621      	mov	r1, r4
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff fe68 	bl	800cfec <tcp_output_alloc_header>
 800d31c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d328:	e010      	b.n	800d34c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d32a:	7dfb      	ldrb	r3, [r7, #23]
 800d32c:	2200      	movs	r2, #0
 800d32e:	6939      	ldr	r1, [r7, #16]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fe99 	bl	800d068 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	3304      	adds	r3, #4
 800d33c:	6939      	ldr	r1, [r7, #16]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fed0 	bl	800d0e4 <tcp_output_control_segment>
 800d344:	4603      	mov	r3, r0
 800d346:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	bd90      	pop	{r4, r7, pc}
 800d354:	08014a6c 	.word	0x08014a6c
 800d358:	08015248 	.word	0x08015248
 800d35c:	08014ac0 	.word	0x08014ac0

0800d360 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b08b      	sub	sp, #44	; 0x2c
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d368:	2300      	movs	r3, #0
 800d36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d106      	bne.n	800d382 <tcp_zero_window_probe+0x22>
 800d374:	4b4c      	ldr	r3, [pc, #304]	; (800d4a8 <tcp_zero_window_probe+0x148>)
 800d376:	f640 024f 	movw	r2, #2127	; 0x84f
 800d37a:	494c      	ldr	r1, [pc, #304]	; (800d4ac <tcp_zero_window_probe+0x14c>)
 800d37c:	484c      	ldr	r0, [pc, #304]	; (800d4b0 <tcp_zero_window_probe+0x150>)
 800d37e:	f005 f8fd 	bl	801257c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d386:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	e086      	b.n	800d4a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d398:	2bff      	cmp	r3, #255	; 0xff
 800d39a:	d007      	beq.n	800d3ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	899b      	ldrh	r3, [r3, #12]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7f9 f95d 	bl	8006674 <lwip_htons>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d005      	beq.n	800d3d2 <tcp_zero_window_probe+0x72>
 800d3c6:	6a3b      	ldr	r3, [r7, #32]
 800d3c8:	891b      	ldrh	r3, [r3, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <tcp_zero_window_probe+0x72>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e000      	b.n	800d3d4 <tcp_zero_window_probe+0x74>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d3d6:	7ffb      	ldrb	r3, [r7, #31]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	bf0c      	ite	eq
 800d3dc:	2301      	moveq	r3, #1
 800d3de:	2300      	movne	r3, #0
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3e8:	b299      	uxth	r1, r3
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	8bba      	ldrh	r2, [r7, #28]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff fdfa 	bl	800cfec <tcp_output_alloc_header>
 800d3f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d102      	bne.n	800d406 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d404:	e04c      	b.n	800d4a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d40c:	7ffb      	ldrb	r3, [r7, #31]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d011      	beq.n	800d436 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	899b      	ldrh	r3, [r3, #12]
 800d416:	b29b      	uxth	r3, r3
 800d418:	b21b      	sxth	r3, r3
 800d41a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d41e:	b21c      	sxth	r4, r3
 800d420:	2011      	movs	r0, #17
 800d422:	f7f9 f927 	bl	8006674 <lwip_htons>
 800d426:	4603      	mov	r3, r0
 800d428:	b21b      	sxth	r3, r3
 800d42a:	4323      	orrs	r3, r4
 800d42c:	b21b      	sxth	r3, r3
 800d42e:	b29a      	uxth	r2, r3
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	819a      	strh	r2, [r3, #12]
 800d434:	e010      	b.n	800d458 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	3314      	adds	r3, #20
 800d43c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	6858      	ldr	r0, [r3, #4]
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	891a      	ldrh	r2, [r3, #8]
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	891b      	ldrh	r3, [r3, #8]
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	b29b      	uxth	r3, r3
 800d450:	2201      	movs	r2, #1
 800d452:	6939      	ldr	r1, [r7, #16]
 800d454:	f7fa fe52 	bl	80080fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d458:	6a3b      	ldr	r3, [r7, #32]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f9 f91d 	bl	800669e <lwip_htonl>
 800d464:	4603      	mov	r3, r0
 800d466:	3301      	adds	r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	da02      	bge.n	800d47c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d47c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d480:	2200      	movs	r2, #0
 800d482:	69b9      	ldr	r1, [r7, #24]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff fdef 	bl	800d068 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3304      	adds	r3, #4
 800d490:	69b9      	ldr	r1, [r7, #24]
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff fe26 	bl	800d0e4 <tcp_output_control_segment>
 800d498:	4603      	mov	r3, r0
 800d49a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d49c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	372c      	adds	r7, #44	; 0x2c
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd90      	pop	{r4, r7, pc}
 800d4a8:	08014a6c 	.word	0x08014a6c
 800d4ac:	08015264 	.word	0x08015264
 800d4b0:	08014ac0 	.word	0x08014ac0

0800d4b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d4bc:	f7fa ff0c 	bl	80082d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d4c0:	4b0a      	ldr	r3, [pc, #40]	; (800d4ec <tcpip_tcp_timer+0x38>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <tcpip_tcp_timer+0x1c>
 800d4c8:	4b09      	ldr	r3, [pc, #36]	; (800d4f0 <tcpip_tcp_timer+0x3c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d005      	beq.n	800d4dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	4908      	ldr	r1, [pc, #32]	; (800d4f4 <tcpip_tcp_timer+0x40>)
 800d4d4:	20fa      	movs	r0, #250	; 0xfa
 800d4d6:	f000 f8f3 	bl	800d6c0 <sys_timeout>
 800d4da:	e003      	b.n	800d4e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d4dc:	4b06      	ldr	r3, [pc, #24]	; (800d4f8 <tcpip_tcp_timer+0x44>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	601a      	str	r2, [r3, #0]
  }
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	2000a7bc 	.word	0x2000a7bc
 800d4f0:	2000a7c0 	.word	0x2000a7c0
 800d4f4:	0800d4b5 	.word	0x0800d4b5
 800d4f8:	2000a808 	.word	0x2000a808

0800d4fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <tcp_timer_needed+0x30>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10f      	bne.n	800d528 <tcp_timer_needed+0x2c>
 800d508:	4b09      	ldr	r3, [pc, #36]	; (800d530 <tcp_timer_needed+0x34>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d103      	bne.n	800d518 <tcp_timer_needed+0x1c>
 800d510:	4b08      	ldr	r3, [pc, #32]	; (800d534 <tcp_timer_needed+0x38>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d007      	beq.n	800d528 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <tcp_timer_needed+0x30>)
 800d51a:	2201      	movs	r2, #1
 800d51c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d51e:	2200      	movs	r2, #0
 800d520:	4905      	ldr	r1, [pc, #20]	; (800d538 <tcp_timer_needed+0x3c>)
 800d522:	20fa      	movs	r0, #250	; 0xfa
 800d524:	f000 f8cc 	bl	800d6c0 <sys_timeout>
  }
}
 800d528:	bf00      	nop
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	2000a808 	.word	0x2000a808
 800d530:	2000a7bc 	.word	0x2000a7bc
 800d534:	2000a7c0 	.word	0x2000a7c0
 800d538:	0800d4b5 	.word	0x0800d4b5

0800d53c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d548:	2006      	movs	r0, #6
 800d54a:	f7f9 fd0b 	bl	8006f64 <memp_malloc>
 800d54e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d109      	bne.n	800d56a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d151      	bne.n	800d600 <sys_timeout_abs+0xc4>
 800d55c:	4b2a      	ldr	r3, [pc, #168]	; (800d608 <sys_timeout_abs+0xcc>)
 800d55e:	22be      	movs	r2, #190	; 0xbe
 800d560:	492a      	ldr	r1, [pc, #168]	; (800d60c <sys_timeout_abs+0xd0>)
 800d562:	482b      	ldr	r0, [pc, #172]	; (800d610 <sys_timeout_abs+0xd4>)
 800d564:	f005 f80a 	bl	801257c <iprintf>
    return;
 800d568:	e04a      	b.n	800d600 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d582:	4b24      	ldr	r3, [pc, #144]	; (800d614 <sys_timeout_abs+0xd8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d103      	bne.n	800d592 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d58a:	4a22      	ldr	r2, [pc, #136]	; (800d614 <sys_timeout_abs+0xd8>)
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6013      	str	r3, [r2, #0]
    return;
 800d590:	e037      	b.n	800d602 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	4b1f      	ldr	r3, [pc, #124]	; (800d614 <sys_timeout_abs+0xd8>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	0fdb      	lsrs	r3, r3, #31
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d5aa:	4b1a      	ldr	r3, [pc, #104]	; (800d614 <sys_timeout_abs+0xd8>)
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d5b2:	4a18      	ldr	r2, [pc, #96]	; (800d614 <sys_timeout_abs+0xd8>)
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	e023      	b.n	800d602 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d5ba:	4b16      	ldr	r3, [pc, #88]	; (800d614 <sys_timeout_abs+0xd8>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	617b      	str	r3, [r7, #20]
 800d5c0:	e01a      	b.n	800d5f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00b      	beq.n	800d5e2 <sys_timeout_abs+0xa6>
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	685a      	ldr	r2, [r3, #4]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	0fdb      	lsrs	r3, r3, #31
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d007      	beq.n	800d5f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	601a      	str	r2, [r3, #0]
        break;
 800d5f0:	e007      	b.n	800d602 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1e1      	bne.n	800d5c2 <sys_timeout_abs+0x86>
 800d5fe:	e000      	b.n	800d602 <sys_timeout_abs+0xc6>
    return;
 800d600:	bf00      	nop
      }
    }
  }
}
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	08015288 	.word	0x08015288
 800d60c:	080152bc 	.word	0x080152bc
 800d610:	080152fc 	.word	0x080152fc
 800d614:	2000a800 	.word	0x2000a800

0800d618 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	4798      	blx	r3

  now = sys_now();
 800d62a:	f7f8 fe59 	bl	80062e0 <sys_now>
 800d62e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <lwip_cyclic_timer+0x5c>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4413      	add	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	0fdb      	lsrs	r3, r3, #31
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d009      	beq.n	800d662 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	4413      	add	r3, r2
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	4907      	ldr	r1, [pc, #28]	; (800d678 <lwip_cyclic_timer+0x60>)
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff ff6e 	bl	800d53c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d660:	e004      	b.n	800d66c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	4904      	ldr	r1, [pc, #16]	; (800d678 <lwip_cyclic_timer+0x60>)
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f7ff ff68 	bl	800d53c <sys_timeout_abs>
}
 800d66c:	bf00      	nop
 800d66e:	3718      	adds	r7, #24
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	2000a804 	.word	0x2000a804
 800d678:	0800d619 	.word	0x0800d619

0800d67c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d682:	2301      	movs	r3, #1
 800d684:	607b      	str	r3, [r7, #4]
 800d686:	e00e      	b.n	800d6a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d688:	4a0b      	ldr	r2, [pc, #44]	; (800d6b8 <sys_timeouts_init+0x3c>)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	4a08      	ldr	r2, [pc, #32]	; (800d6b8 <sys_timeouts_init+0x3c>)
 800d696:	4413      	add	r3, r2
 800d698:	461a      	mov	r2, r3
 800d69a:	4908      	ldr	r1, [pc, #32]	; (800d6bc <sys_timeouts_init+0x40>)
 800d69c:	f000 f810 	bl	800d6c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	607b      	str	r3, [r7, #4]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b04      	cmp	r3, #4
 800d6aa:	d9ed      	bls.n	800d688 <sys_timeouts_init+0xc>
  }
}
 800d6ac:	bf00      	nop
 800d6ae:	bf00      	nop
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	08016214 	.word	0x08016214
 800d6bc:	0800d619 	.word	0x0800d619

0800d6c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d2:	d306      	bcc.n	800d6e2 <sys_timeout+0x22>
 800d6d4:	4b0a      	ldr	r3, [pc, #40]	; (800d700 <sys_timeout+0x40>)
 800d6d6:	f240 1229 	movw	r2, #297	; 0x129
 800d6da:	490a      	ldr	r1, [pc, #40]	; (800d704 <sys_timeout+0x44>)
 800d6dc:	480a      	ldr	r0, [pc, #40]	; (800d708 <sys_timeout+0x48>)
 800d6de:	f004 ff4d 	bl	801257c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d6e2:	f7f8 fdfd 	bl	80062e0 <sys_now>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	68b9      	ldr	r1, [r7, #8]
 800d6f2:	6978      	ldr	r0, [r7, #20]
 800d6f4:	f7ff ff22 	bl	800d53c <sys_timeout_abs>
#endif
}
 800d6f8:	bf00      	nop
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	08015288 	.word	0x08015288
 800d704:	08015324 	.word	0x08015324
 800d708:	080152fc 	.word	0x080152fc

0800d70c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d710:	f004 fe34 	bl	801237c <rand>
 800d714:	4603      	mov	r3, r0
 800d716:	b29b      	uxth	r3, r3
 800d718:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d722:	b29a      	uxth	r2, r3
 800d724:	4b01      	ldr	r3, [pc, #4]	; (800d72c <udp_init+0x20>)
 800d726:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d728:	bf00      	nop
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	20000028 	.word	0x20000028

0800d730 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d736:	2300      	movs	r3, #0
 800d738:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d73a:	4b17      	ldr	r3, [pc, #92]	; (800d798 <udp_new_port+0x68>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	1c5a      	adds	r2, r3, #1
 800d740:	b291      	uxth	r1, r2
 800d742:	4a15      	ldr	r2, [pc, #84]	; (800d798 <udp_new_port+0x68>)
 800d744:	8011      	strh	r1, [r2, #0]
 800d746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d103      	bne.n	800d756 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d74e:	4b12      	ldr	r3, [pc, #72]	; (800d798 <udp_new_port+0x68>)
 800d750:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d754:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d756:	4b11      	ldr	r3, [pc, #68]	; (800d79c <udp_new_port+0x6c>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	603b      	str	r3, [r7, #0]
 800d75c:	e011      	b.n	800d782 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	8a5a      	ldrh	r2, [r3, #18]
 800d762:	4b0d      	ldr	r3, [pc, #52]	; (800d798 <udp_new_port+0x68>)
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d108      	bne.n	800d77c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d76a:	88fb      	ldrh	r3, [r7, #6]
 800d76c:	3301      	adds	r3, #1
 800d76e:	80fb      	strh	r3, [r7, #6]
 800d770:	88fb      	ldrh	r3, [r7, #6]
 800d772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d776:	d3e0      	bcc.n	800d73a <udp_new_port+0xa>
        return 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	e007      	b.n	800d78c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	603b      	str	r3, [r7, #0]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1ea      	bne.n	800d75e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d788:	4b03      	ldr	r3, [pc, #12]	; (800d798 <udp_new_port+0x68>)
 800d78a:	881b      	ldrh	r3, [r3, #0]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	20000028 	.word	0x20000028
 800d79c:	2000a80c 	.word	0x2000a80c

0800d7a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d105      	bne.n	800d7c0 <udp_input_local_match+0x20>
 800d7b4:	4b27      	ldr	r3, [pc, #156]	; (800d854 <udp_input_local_match+0xb4>)
 800d7b6:	2287      	movs	r2, #135	; 0x87
 800d7b8:	4927      	ldr	r1, [pc, #156]	; (800d858 <udp_input_local_match+0xb8>)
 800d7ba:	4828      	ldr	r0, [pc, #160]	; (800d85c <udp_input_local_match+0xbc>)
 800d7bc:	f004 fede 	bl	801257c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d105      	bne.n	800d7d2 <udp_input_local_match+0x32>
 800d7c6:	4b23      	ldr	r3, [pc, #140]	; (800d854 <udp_input_local_match+0xb4>)
 800d7c8:	2288      	movs	r2, #136	; 0x88
 800d7ca:	4925      	ldr	r1, [pc, #148]	; (800d860 <udp_input_local_match+0xc0>)
 800d7cc:	4823      	ldr	r0, [pc, #140]	; (800d85c <udp_input_local_match+0xbc>)
 800d7ce:	f004 fed5 	bl	801257c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	7a1b      	ldrb	r3, [r3, #8]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00b      	beq.n	800d7f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	7a1a      	ldrb	r2, [r3, #8]
 800d7de:	4b21      	ldr	r3, [pc, #132]	; (800d864 <udp_input_local_match+0xc4>)
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d001      	beq.n	800d7f2 <udp_input_local_match+0x52>
    return 0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e02b      	b.n	800d84a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d7f2:	79fb      	ldrb	r3, [r7, #7]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d018      	beq.n	800d82a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d013      	beq.n	800d826 <udp_input_local_match+0x86>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00f      	beq.n	800d826 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d806:	4b17      	ldr	r3, [pc, #92]	; (800d864 <udp_input_local_match+0xc4>)
 800d808:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d80a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d80e:	d00a      	beq.n	800d826 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	4b13      	ldr	r3, [pc, #76]	; (800d864 <udp_input_local_match+0xc4>)
 800d816:	695b      	ldr	r3, [r3, #20]
 800d818:	405a      	eors	r2, r3
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	3308      	adds	r3, #8
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d822:	2b00      	cmp	r3, #0
 800d824:	d110      	bne.n	800d848 <udp_input_local_match+0xa8>
          return 1;
 800d826:	2301      	movs	r3, #1
 800d828:	e00f      	b.n	800d84a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d009      	beq.n	800d844 <udp_input_local_match+0xa4>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d005      	beq.n	800d844 <udp_input_local_match+0xa4>
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	4b09      	ldr	r3, [pc, #36]	; (800d864 <udp_input_local_match+0xc4>)
 800d83e:	695b      	ldr	r3, [r3, #20]
 800d840:	429a      	cmp	r2, r3
 800d842:	d101      	bne.n	800d848 <udp_input_local_match+0xa8>
        return 1;
 800d844:	2301      	movs	r3, #1
 800d846:	e000      	b.n	800d84a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	08015370 	.word	0x08015370
 800d858:	080153a0 	.word	0x080153a0
 800d85c:	080153c4 	.word	0x080153c4
 800d860:	080153ec 	.word	0x080153ec
 800d864:	20005060 	.word	0x20005060

0800d868 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b08d      	sub	sp, #52	; 0x34
 800d86c:	af02      	add	r7, sp, #8
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d105      	bne.n	800d888 <udp_input+0x20>
 800d87c:	4b7c      	ldr	r3, [pc, #496]	; (800da70 <udp_input+0x208>)
 800d87e:	22cf      	movs	r2, #207	; 0xcf
 800d880:	497c      	ldr	r1, [pc, #496]	; (800da74 <udp_input+0x20c>)
 800d882:	487d      	ldr	r0, [pc, #500]	; (800da78 <udp_input+0x210>)
 800d884:	f004 fe7a 	bl	801257c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d105      	bne.n	800d89a <udp_input+0x32>
 800d88e:	4b78      	ldr	r3, [pc, #480]	; (800da70 <udp_input+0x208>)
 800d890:	22d0      	movs	r2, #208	; 0xd0
 800d892:	497a      	ldr	r1, [pc, #488]	; (800da7c <udp_input+0x214>)
 800d894:	4878      	ldr	r0, [pc, #480]	; (800da78 <udp_input+0x210>)
 800d896:	f004 fe71 	bl	801257c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	895b      	ldrh	r3, [r3, #10]
 800d89e:	2b07      	cmp	r3, #7
 800d8a0:	d803      	bhi.n	800d8aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fa fa30 	bl	8007d08 <pbuf_free>
    goto end;
 800d8a8:	e0de      	b.n	800da68 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d8b0:	4b73      	ldr	r3, [pc, #460]	; (800da80 <udp_input+0x218>)
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	4a72      	ldr	r2, [pc, #456]	; (800da80 <udp_input+0x218>)
 800d8b6:	6812      	ldr	r2, [r2, #0]
 800d8b8:	4611      	mov	r1, r2
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f003 fe08 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7f8 fed2 	bl	8006674 <lwip_htons>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	885b      	ldrh	r3, [r3, #2]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7f8 feca 	bl	8006674 <lwip_htons>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8f0:	4b64      	ldr	r3, [pc, #400]	; (800da84 <udp_input+0x21c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d8f6:	e054      	b.n	800d9a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	8a5b      	ldrh	r3, [r3, #18]
 800d8fc:	89fa      	ldrh	r2, [r7, #14]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d14a      	bne.n	800d998 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d902:	7cfb      	ldrb	r3, [r7, #19]
 800d904:	461a      	mov	r2, r3
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d90a:	f7ff ff49 	bl	800d7a0 <udp_input_local_match>
 800d90e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d910:	2b00      	cmp	r3, #0
 800d912:	d041      	beq.n	800d998 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	7c1b      	ldrb	r3, [r3, #16]
 800d918:	f003 0304 	and.w	r3, r3, #4
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d11d      	bne.n	800d95c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d102      	bne.n	800d92c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	61fb      	str	r3, [r7, #28]
 800d92a:	e017      	b.n	800d95c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d92c:	7cfb      	ldrb	r3, [r7, #19]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d014      	beq.n	800d95c <udp_input+0xf4>
 800d932:	4b53      	ldr	r3, [pc, #332]	; (800da80 <udp_input+0x218>)
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d93a:	d10f      	bne.n	800d95c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	3304      	adds	r3, #4
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	429a      	cmp	r2, r3
 800d948:	d008      	beq.n	800d95c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	3304      	adds	r3, #4
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	429a      	cmp	r2, r3
 800d956:	d101      	bne.n	800d95c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	8a9b      	ldrh	r3, [r3, #20]
 800d960:	8a3a      	ldrh	r2, [r7, #16]
 800d962:	429a      	cmp	r2, r3
 800d964:	d118      	bne.n	800d998 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d968:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d005      	beq.n	800d97a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	4b43      	ldr	r3, [pc, #268]	; (800da80 <udp_input+0x218>)
 800d974:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d976:	429a      	cmp	r2, r3
 800d978:	d10e      	bne.n	800d998 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d014      	beq.n	800d9aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	68da      	ldr	r2, [r3, #12]
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d988:	4b3e      	ldr	r3, [pc, #248]	; (800da84 <udp_input+0x21c>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d990:	4a3c      	ldr	r2, [pc, #240]	; (800da84 <udp_input+0x21c>)
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d996:	e008      	b.n	800d9aa <udp_input+0x142>
      }
    }

    prev = pcb;
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1a7      	bne.n	800d8f8 <udp_input+0x90>
 800d9a8:	e000      	b.n	800d9ac <udp_input+0x144>
        break;
 800d9aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d101      	bne.n	800d9b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <udp_input+0x15a>
    for_us = 1;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	76fb      	strb	r3, [r7, #27]
 800d9c0:	e00a      	b.n	800d9d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	4b2d      	ldr	r3, [pc, #180]	; (800da80 <udp_input+0x218>)
 800d9ca:	695b      	ldr	r3, [r3, #20]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	bf0c      	ite	eq
 800d9d0:	2301      	moveq	r3, #1
 800d9d2:	2300      	movne	r3, #0
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d9d8:	7efb      	ldrb	r3, [r7, #27]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d041      	beq.n	800da62 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d9de:	2108      	movs	r1, #8
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7fa f90b 	bl	8007bfc <pbuf_remove_header>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00a      	beq.n	800da02 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d9ec:	4b20      	ldr	r3, [pc, #128]	; (800da70 <udp_input+0x208>)
 800d9ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d9f2:	4925      	ldr	r1, [pc, #148]	; (800da88 <udp_input+0x220>)
 800d9f4:	4820      	ldr	r0, [pc, #128]	; (800da78 <udp_input+0x210>)
 800d9f6:	f004 fdc1 	bl	801257c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7fa f984 	bl	8007d08 <pbuf_free>
      goto end;
 800da00:	e032      	b.n	800da68 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	2b00      	cmp	r3, #0
 800da06:	d012      	beq.n	800da2e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00a      	beq.n	800da26 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	699c      	ldr	r4, [r3, #24]
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	69d8      	ldr	r0, [r3, #28]
 800da18:	8a3b      	ldrh	r3, [r7, #16]
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	4b1b      	ldr	r3, [pc, #108]	; (800da8c <udp_input+0x224>)
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da22:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800da24:	e021      	b.n	800da6a <udp_input+0x202>
        pbuf_free(p);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7fa f96e 	bl	8007d08 <pbuf_free>
        goto end;
 800da2c:	e01c      	b.n	800da68 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800da2e:	7cfb      	ldrb	r3, [r7, #19]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d112      	bne.n	800da5a <udp_input+0x1f2>
 800da34:	4b12      	ldr	r3, [pc, #72]	; (800da80 <udp_input+0x218>)
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da3c:	2be0      	cmp	r3, #224	; 0xe0
 800da3e:	d00c      	beq.n	800da5a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <udp_input+0x218>)
 800da42:	899b      	ldrh	r3, [r3, #12]
 800da44:	3308      	adds	r3, #8
 800da46:	b29b      	uxth	r3, r3
 800da48:	b21b      	sxth	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7fa f948 	bl	8007ce2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800da52:	2103      	movs	r1, #3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f003 f9fd 	bl	8010e54 <icmp_dest_unreach>
      pbuf_free(p);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7fa f954 	bl	8007d08 <pbuf_free>
  return;
 800da60:	e003      	b.n	800da6a <udp_input+0x202>
    pbuf_free(p);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7fa f950 	bl	8007d08 <pbuf_free>
  return;
 800da68:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800da6a:	372c      	adds	r7, #44	; 0x2c
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd90      	pop	{r4, r7, pc}
 800da70:	08015370 	.word	0x08015370
 800da74:	08015414 	.word	0x08015414
 800da78:	080153c4 	.word	0x080153c4
 800da7c:	0801542c 	.word	0x0801542c
 800da80:	20005060 	.word	0x20005060
 800da84:	2000a80c 	.word	0x2000a80c
 800da88:	08015448 	.word	0x08015448
 800da8c:	20005070 	.word	0x20005070

0800da90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b088      	sub	sp, #32
 800da94:	af02      	add	r7, sp, #8
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
 800da9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d109      	bne.n	800dab8 <udp_sendto_if+0x28>
 800daa4:	4b2e      	ldr	r3, [pc, #184]	; (800db60 <udp_sendto_if+0xd0>)
 800daa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800daaa:	492e      	ldr	r1, [pc, #184]	; (800db64 <udp_sendto_if+0xd4>)
 800daac:	482e      	ldr	r0, [pc, #184]	; (800db68 <udp_sendto_if+0xd8>)
 800daae:	f004 fd65 	bl	801257c <iprintf>
 800dab2:	f06f 030f 	mvn.w	r3, #15
 800dab6:	e04f      	b.n	800db58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d109      	bne.n	800dad2 <udp_sendto_if+0x42>
 800dabe:	4b28      	ldr	r3, [pc, #160]	; (800db60 <udp_sendto_if+0xd0>)
 800dac0:	f240 2281 	movw	r2, #641	; 0x281
 800dac4:	4929      	ldr	r1, [pc, #164]	; (800db6c <udp_sendto_if+0xdc>)
 800dac6:	4828      	ldr	r0, [pc, #160]	; (800db68 <udp_sendto_if+0xd8>)
 800dac8:	f004 fd58 	bl	801257c <iprintf>
 800dacc:	f06f 030f 	mvn.w	r3, #15
 800dad0:	e042      	b.n	800db58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d109      	bne.n	800daec <udp_sendto_if+0x5c>
 800dad8:	4b21      	ldr	r3, [pc, #132]	; (800db60 <udp_sendto_if+0xd0>)
 800dada:	f240 2282 	movw	r2, #642	; 0x282
 800dade:	4924      	ldr	r1, [pc, #144]	; (800db70 <udp_sendto_if+0xe0>)
 800dae0:	4821      	ldr	r0, [pc, #132]	; (800db68 <udp_sendto_if+0xd8>)
 800dae2:	f004 fd4b 	bl	801257c <iprintf>
 800dae6:	f06f 030f 	mvn.w	r3, #15
 800daea:	e035      	b.n	800db58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d109      	bne.n	800db06 <udp_sendto_if+0x76>
 800daf2:	4b1b      	ldr	r3, [pc, #108]	; (800db60 <udp_sendto_if+0xd0>)
 800daf4:	f240 2283 	movw	r2, #643	; 0x283
 800daf8:	491e      	ldr	r1, [pc, #120]	; (800db74 <udp_sendto_if+0xe4>)
 800dafa:	481b      	ldr	r0, [pc, #108]	; (800db68 <udp_sendto_if+0xd8>)
 800dafc:	f004 fd3e 	bl	801257c <iprintf>
 800db00:	f06f 030f 	mvn.w	r3, #15
 800db04:	e028      	b.n	800db58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d009      	beq.n	800db20 <udp_sendto_if+0x90>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d005      	beq.n	800db20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db1c:	2be0      	cmp	r3, #224	; 0xe0
 800db1e:	d103      	bne.n	800db28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800db20:	6a3b      	ldr	r3, [r7, #32]
 800db22:	3304      	adds	r3, #4
 800db24:	617b      	str	r3, [r7, #20]
 800db26:	e00b      	b.n	800db40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	6a3b      	ldr	r3, [r7, #32]
 800db2e:	3304      	adds	r3, #4
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	429a      	cmp	r2, r3
 800db34:	d002      	beq.n	800db3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800db36:	f06f 0303 	mvn.w	r3, #3
 800db3a:	e00d      	b.n	800db58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800db40:	887a      	ldrh	r2, [r7, #2]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	4613      	mov	r3, r2
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	68b9      	ldr	r1, [r7, #8]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 f811 	bl	800db78 <udp_sendto_if_src>
 800db56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	08015370 	.word	0x08015370
 800db64:	080154e4 	.word	0x080154e4
 800db68:	080153c4 	.word	0x080153c4
 800db6c:	08015500 	.word	0x08015500
 800db70:	0801551c 	.word	0x0801551c
 800db74:	0801553c 	.word	0x0801553c

0800db78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b08c      	sub	sp, #48	; 0x30
 800db7c:	af04      	add	r7, sp, #16
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d109      	bne.n	800dba0 <udp_sendto_if_src+0x28>
 800db8c:	4b65      	ldr	r3, [pc, #404]	; (800dd24 <udp_sendto_if_src+0x1ac>)
 800db8e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800db92:	4965      	ldr	r1, [pc, #404]	; (800dd28 <udp_sendto_if_src+0x1b0>)
 800db94:	4865      	ldr	r0, [pc, #404]	; (800dd2c <udp_sendto_if_src+0x1b4>)
 800db96:	f004 fcf1 	bl	801257c <iprintf>
 800db9a:	f06f 030f 	mvn.w	r3, #15
 800db9e:	e0bc      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d109      	bne.n	800dbba <udp_sendto_if_src+0x42>
 800dba6:	4b5f      	ldr	r3, [pc, #380]	; (800dd24 <udp_sendto_if_src+0x1ac>)
 800dba8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dbac:	4960      	ldr	r1, [pc, #384]	; (800dd30 <udp_sendto_if_src+0x1b8>)
 800dbae:	485f      	ldr	r0, [pc, #380]	; (800dd2c <udp_sendto_if_src+0x1b4>)
 800dbb0:	f004 fce4 	bl	801257c <iprintf>
 800dbb4:	f06f 030f 	mvn.w	r3, #15
 800dbb8:	e0af      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d109      	bne.n	800dbd4 <udp_sendto_if_src+0x5c>
 800dbc0:	4b58      	ldr	r3, [pc, #352]	; (800dd24 <udp_sendto_if_src+0x1ac>)
 800dbc2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800dbc6:	495b      	ldr	r1, [pc, #364]	; (800dd34 <udp_sendto_if_src+0x1bc>)
 800dbc8:	4858      	ldr	r0, [pc, #352]	; (800dd2c <udp_sendto_if_src+0x1b4>)
 800dbca:	f004 fcd7 	bl	801257c <iprintf>
 800dbce:	f06f 030f 	mvn.w	r3, #15
 800dbd2:	e0a2      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800dbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d109      	bne.n	800dbee <udp_sendto_if_src+0x76>
 800dbda:	4b52      	ldr	r3, [pc, #328]	; (800dd24 <udp_sendto_if_src+0x1ac>)
 800dbdc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800dbe0:	4955      	ldr	r1, [pc, #340]	; (800dd38 <udp_sendto_if_src+0x1c0>)
 800dbe2:	4852      	ldr	r0, [pc, #328]	; (800dd2c <udp_sendto_if_src+0x1b4>)
 800dbe4:	f004 fcca 	bl	801257c <iprintf>
 800dbe8:	f06f 030f 	mvn.w	r3, #15
 800dbec:	e095      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d109      	bne.n	800dc08 <udp_sendto_if_src+0x90>
 800dbf4:	4b4b      	ldr	r3, [pc, #300]	; (800dd24 <udp_sendto_if_src+0x1ac>)
 800dbf6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800dbfa:	4950      	ldr	r1, [pc, #320]	; (800dd3c <udp_sendto_if_src+0x1c4>)
 800dbfc:	484b      	ldr	r0, [pc, #300]	; (800dd2c <udp_sendto_if_src+0x1b4>)
 800dbfe:	f004 fcbd 	bl	801257c <iprintf>
 800dc02:	f06f 030f 	mvn.w	r3, #15
 800dc06:	e088      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8a5b      	ldrh	r3, [r3, #18]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10f      	bne.n	800dc30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dc10:	68f9      	ldr	r1, [r7, #12]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	8a5b      	ldrh	r3, [r3, #18]
 800dc16:	461a      	mov	r2, r3
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f000 f893 	bl	800dd44 <udp_bind>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800dc22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800dc2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc2e:	e074      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	891b      	ldrh	r3, [r3, #8]
 800dc34:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d902      	bls.n	800dc42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800dc3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc40:	e06b      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800dc42:	2108      	movs	r1, #8
 800dc44:	68b8      	ldr	r0, [r7, #8]
 800dc46:	f7f9 ffc9 	bl	8007bdc <pbuf_add_header>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d015      	beq.n	800dc7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800dc50:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc54:	2108      	movs	r1, #8
 800dc56:	2022      	movs	r0, #34	; 0x22
 800dc58:	f7f9 fd72 	bl	8007740 <pbuf_alloc>
 800dc5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800dc64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc68:	e057      	b.n	800dd1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	891b      	ldrh	r3, [r3, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d006      	beq.n	800dc80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800dc72:	68b9      	ldr	r1, [r7, #8]
 800dc74:	69f8      	ldr	r0, [r7, #28]
 800dc76:	f7fa f95f 	bl	8007f38 <pbuf_chain>
 800dc7a:	e001      	b.n	800dc80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	895b      	ldrh	r3, [r3, #10]
 800dc84:	2b07      	cmp	r3, #7
 800dc86:	d806      	bhi.n	800dc96 <udp_sendto_if_src+0x11e>
 800dc88:	4b26      	ldr	r3, [pc, #152]	; (800dd24 <udp_sendto_if_src+0x1ac>)
 800dc8a:	f240 320d 	movw	r2, #781	; 0x30d
 800dc8e:	492c      	ldr	r1, [pc, #176]	; (800dd40 <udp_sendto_if_src+0x1c8>)
 800dc90:	4826      	ldr	r0, [pc, #152]	; (800dd2c <udp_sendto_if_src+0x1b4>)
 800dc92:	f004 fc73 	bl	801257c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	8a5b      	ldrh	r3, [r3, #18]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7f8 fce7 	bl	8006674 <lwip_htons>
 800dca6:	4603      	mov	r3, r0
 800dca8:	461a      	mov	r2, r3
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800dcae:	887b      	ldrh	r3, [r7, #2]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f8 fcdf 	bl	8006674 <lwip_htons>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	461a      	mov	r2, r3
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	719a      	strb	r2, [r3, #6]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	891b      	ldrh	r3, [r3, #8]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7f8 fcd1 	bl	8006674 <lwip_htons>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800dcda:	2311      	movs	r3, #17
 800dcdc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	7adb      	ldrb	r3, [r3, #11]
 800dce2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	7a9b      	ldrb	r3, [r3, #10]
 800dce8:	7cb9      	ldrb	r1, [r7, #18]
 800dcea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcec:	9202      	str	r2, [sp, #8]
 800dcee:	7cfa      	ldrb	r2, [r7, #19]
 800dcf0:	9201      	str	r2, [sp, #4]
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcfa:	69f8      	ldr	r0, [r7, #28]
 800dcfc:	f003 fb3a 	bl	8011374 <ip4_output_if_src>
 800dd00:	4603      	mov	r3, r0
 800dd02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800dd04:	69fa      	ldr	r2, [r7, #28]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d004      	beq.n	800dd16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800dd0c:	69f8      	ldr	r0, [r7, #28]
 800dd0e:	f7f9 fffb 	bl	8007d08 <pbuf_free>
    q = NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800dd16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	08015370 	.word	0x08015370
 800dd28:	0801555c 	.word	0x0801555c
 800dd2c:	080153c4 	.word	0x080153c4
 800dd30:	0801557c 	.word	0x0801557c
 800dd34:	0801559c 	.word	0x0801559c
 800dd38:	080155c0 	.word	0x080155c0
 800dd3c:	080155e4 	.word	0x080155e4
 800dd40:	08015608 	.word	0x08015608

0800dd44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800dd58:	4b39      	ldr	r3, [pc, #228]	; (800de40 <udp_bind+0xfc>)
 800dd5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d109      	bne.n	800dd76 <udp_bind+0x32>
 800dd62:	4b38      	ldr	r3, [pc, #224]	; (800de44 <udp_bind+0x100>)
 800dd64:	f240 32b7 	movw	r2, #951	; 0x3b7
 800dd68:	4937      	ldr	r1, [pc, #220]	; (800de48 <udp_bind+0x104>)
 800dd6a:	4838      	ldr	r0, [pc, #224]	; (800de4c <udp_bind+0x108>)
 800dd6c:	f004 fc06 	bl	801257c <iprintf>
 800dd70:	f06f 030f 	mvn.w	r3, #15
 800dd74:	e060      	b.n	800de38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd7a:	4b35      	ldr	r3, [pc, #212]	; (800de50 <udp_bind+0x10c>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	617b      	str	r3, [r7, #20]
 800dd80:	e009      	b.n	800dd96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d102      	bne.n	800dd90 <udp_bind+0x4c>
      rebind = 1;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	74fb      	strb	r3, [r7, #19]
      break;
 800dd8e:	e005      	b.n	800dd9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	617b      	str	r3, [r7, #20]
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1f2      	bne.n	800dd82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800dd9c:	88fb      	ldrh	r3, [r7, #6]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d109      	bne.n	800ddb6 <udp_bind+0x72>
    port = udp_new_port();
 800dda2:	f7ff fcc5 	bl	800d730 <udp_new_port>
 800dda6:	4603      	mov	r3, r0
 800dda8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ddaa:	88fb      	ldrh	r3, [r7, #6]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d12c      	bne.n	800de0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ddb0:	f06f 0307 	mvn.w	r3, #7
 800ddb4:	e040      	b.n	800de38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ddb6:	4b26      	ldr	r3, [pc, #152]	; (800de50 <udp_bind+0x10c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	e022      	b.n	800de04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d01b      	beq.n	800ddfe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	8a5b      	ldrh	r3, [r3, #18]
 800ddca:	88fa      	ldrh	r2, [r7, #6]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d116      	bne.n	800ddfe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d00d      	beq.n	800ddf8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00a      	beq.n	800ddf8 <udp_bind+0xb4>
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d006      	beq.n	800ddf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ddea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d003      	beq.n	800ddf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d102      	bne.n	800ddfe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ddf8:	f06f 0307 	mvn.w	r3, #7
 800ddfc:	e01c      	b.n	800de38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1d9      	bne.n	800ddbe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <udp_bind+0xd2>
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	e000      	b.n	800de18 <udp_bind+0xd4>
 800de16:	2300      	movs	r3, #0
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	88fa      	ldrh	r2, [r7, #6]
 800de20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800de22:	7cfb      	ldrb	r3, [r7, #19]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d106      	bne.n	800de36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800de28:	4b09      	ldr	r3, [pc, #36]	; (800de50 <udp_bind+0x10c>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800de30:	4a07      	ldr	r2, [pc, #28]	; (800de50 <udp_bind+0x10c>)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3718      	adds	r7, #24
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	0801623c 	.word	0x0801623c
 800de44:	08015370 	.word	0x08015370
 800de48:	08015638 	.word	0x08015638
 800de4c:	080153c4 	.word	0x080153c4
 800de50:	2000a80c 	.word	0x2000a80c

0800de54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4613      	mov	r3, r2
 800de60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d109      	bne.n	800de7c <udp_connect+0x28>
 800de68:	4b2c      	ldr	r3, [pc, #176]	; (800df1c <udp_connect+0xc8>)
 800de6a:	f240 4235 	movw	r2, #1077	; 0x435
 800de6e:	492c      	ldr	r1, [pc, #176]	; (800df20 <udp_connect+0xcc>)
 800de70:	482c      	ldr	r0, [pc, #176]	; (800df24 <udp_connect+0xd0>)
 800de72:	f004 fb83 	bl	801257c <iprintf>
 800de76:	f06f 030f 	mvn.w	r3, #15
 800de7a:	e04b      	b.n	800df14 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d109      	bne.n	800de96 <udp_connect+0x42>
 800de82:	4b26      	ldr	r3, [pc, #152]	; (800df1c <udp_connect+0xc8>)
 800de84:	f240 4236 	movw	r2, #1078	; 0x436
 800de88:	4927      	ldr	r1, [pc, #156]	; (800df28 <udp_connect+0xd4>)
 800de8a:	4826      	ldr	r0, [pc, #152]	; (800df24 <udp_connect+0xd0>)
 800de8c:	f004 fb76 	bl	801257c <iprintf>
 800de90:	f06f 030f 	mvn.w	r3, #15
 800de94:	e03e      	b.n	800df14 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	8a5b      	ldrh	r3, [r3, #18]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10f      	bne.n	800debe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800de9e:	68f9      	ldr	r1, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	8a5b      	ldrh	r3, [r3, #18]
 800dea4:	461a      	mov	r2, r3
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f7ff ff4c 	bl	800dd44 <udp_bind>
 800deac:	4603      	mov	r3, r0
 800deae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800deb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <udp_connect+0x6a>
      return err;
 800deb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800debc:	e02a      	b.n	800df14 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <udp_connect+0x76>
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	e000      	b.n	800decc <udp_connect+0x78>
 800deca:	2300      	movs	r3, #0
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	88fa      	ldrh	r2, [r7, #6]
 800ded4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	7c1b      	ldrb	r3, [r3, #16]
 800deda:	f043 0304 	orr.w	r3, r3, #4
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dee4:	4b11      	ldr	r3, [pc, #68]	; (800df2c <udp_connect+0xd8>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	617b      	str	r3, [r7, #20]
 800deea:	e008      	b.n	800defe <udp_connect+0xaa>
    if (pcb == ipcb) {
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	429a      	cmp	r2, r3
 800def2:	d101      	bne.n	800def8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	e00d      	b.n	800df14 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1f3      	bne.n	800deec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800df04:	4b09      	ldr	r3, [pc, #36]	; (800df2c <udp_connect+0xd8>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800df0c:	4a07      	ldr	r2, [pc, #28]	; (800df2c <udp_connect+0xd8>)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3718      	adds	r7, #24
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	08015370 	.word	0x08015370
 800df20:	08015650 	.word	0x08015650
 800df24:	080153c4 	.word	0x080153c4
 800df28:	0801566c 	.word	0x0801566c
 800df2c:	2000a80c 	.word	0x2000a80c

0800df30 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d107      	bne.n	800df52 <udp_recv+0x22>
 800df42:	4b08      	ldr	r3, [pc, #32]	; (800df64 <udp_recv+0x34>)
 800df44:	f240 428a 	movw	r2, #1162	; 0x48a
 800df48:	4907      	ldr	r1, [pc, #28]	; (800df68 <udp_recv+0x38>)
 800df4a:	4808      	ldr	r0, [pc, #32]	; (800df6c <udp_recv+0x3c>)
 800df4c:	f004 fb16 	bl	801257c <iprintf>
 800df50:	e005      	b.n	800df5e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	61da      	str	r2, [r3, #28]
}
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	08015370 	.word	0x08015370
 800df68:	080156a4 	.word	0x080156a4
 800df6c:	080153c4 	.word	0x080153c4

0800df70 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d107      	bne.n	800df8e <udp_remove+0x1e>
 800df7e:	4b19      	ldr	r3, [pc, #100]	; (800dfe4 <udp_remove+0x74>)
 800df80:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800df84:	4918      	ldr	r1, [pc, #96]	; (800dfe8 <udp_remove+0x78>)
 800df86:	4819      	ldr	r0, [pc, #100]	; (800dfec <udp_remove+0x7c>)
 800df88:	f004 faf8 	bl	801257c <iprintf>
 800df8c:	e026      	b.n	800dfdc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800df8e:	4b18      	ldr	r3, [pc, #96]	; (800dff0 <udp_remove+0x80>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	429a      	cmp	r2, r3
 800df96:	d105      	bne.n	800dfa4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800df98:	4b15      	ldr	r3, [pc, #84]	; (800dff0 <udp_remove+0x80>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	4a14      	ldr	r2, [pc, #80]	; (800dff0 <udp_remove+0x80>)
 800dfa0:	6013      	str	r3, [r2, #0]
 800dfa2:	e017      	b.n	800dfd4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dfa4:	4b12      	ldr	r3, [pc, #72]	; (800dff0 <udp_remove+0x80>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	60fb      	str	r3, [r7, #12]
 800dfaa:	e010      	b.n	800dfce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d009      	beq.n	800dfc8 <udp_remove+0x58>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d104      	bne.n	800dfc8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	68da      	ldr	r2, [r3, #12]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	60da      	str	r2, [r3, #12]
        break;
 800dfc6:	e005      	b.n	800dfd4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1eb      	bne.n	800dfac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	f7f9 f834 	bl	8007044 <memp_free>
}
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	08015370 	.word	0x08015370
 800dfe8:	080156bc 	.word	0x080156bc
 800dfec:	080153c4 	.word	0x080153c4
 800dff0:	2000a80c 	.word	0x2000a80c

0800dff4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dffa:	2000      	movs	r0, #0
 800dffc:	f7f8 ffb2 	bl	8006f64 <memp_malloc>
 800e000:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d007      	beq.n	800e018 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e008:	2220      	movs	r2, #32
 800e00a:	2100      	movs	r1, #0
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f004 fb1a 	bl	8012646 <memset>
    pcb->ttl = UDP_TTL;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	22ff      	movs	r2, #255	; 0xff
 800e016:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e018:	687b      	ldr	r3, [r7, #4]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
	...

0800e024 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e024:	b480      	push	{r7}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01e      	beq.n	800e072 <udp_netif_ip_addr_changed+0x4e>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01a      	beq.n	800e072 <udp_netif_ip_addr_changed+0x4e>
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d017      	beq.n	800e072 <udp_netif_ip_addr_changed+0x4e>
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d013      	beq.n	800e072 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e04a:	4b0d      	ldr	r3, [pc, #52]	; (800e080 <udp_netif_ip_addr_changed+0x5c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	e00c      	b.n	800e06c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d103      	bne.n	800e066 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1ef      	bne.n	800e052 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e072:	bf00      	nop
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	2000a80c 	.word	0x2000a80c

0800e084 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e088:	4b20      	ldr	r3, [pc, #128]	; (800e10c <dhcp_inc_pcb_refcount+0x88>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d133      	bne.n	800e0f8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e090:	4b1f      	ldr	r3, [pc, #124]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d005      	beq.n	800e0a4 <dhcp_inc_pcb_refcount+0x20>
 800e098:	4b1e      	ldr	r3, [pc, #120]	; (800e114 <dhcp_inc_pcb_refcount+0x90>)
 800e09a:	22e5      	movs	r2, #229	; 0xe5
 800e09c:	491e      	ldr	r1, [pc, #120]	; (800e118 <dhcp_inc_pcb_refcount+0x94>)
 800e09e:	481f      	ldr	r0, [pc, #124]	; (800e11c <dhcp_inc_pcb_refcount+0x98>)
 800e0a0:	f004 fa6c 	bl	801257c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e0a4:	f7ff ffa6 	bl	800dff4 <udp_new>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	4a19      	ldr	r2, [pc, #100]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e0ac:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e0ae:	4b18      	ldr	r3, [pc, #96]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d102      	bne.n	800e0bc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0ba:	e024      	b.n	800e106 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e0bc:	4b14      	ldr	r3, [pc, #80]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	7a5a      	ldrb	r2, [r3, #9]
 800e0c2:	4b13      	ldr	r3, [pc, #76]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f042 0220 	orr.w	r2, r2, #32
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e0ce:	4b10      	ldr	r3, [pc, #64]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2244      	movs	r2, #68	; 0x44
 800e0d4:	4912      	ldr	r1, [pc, #72]	; (800e120 <dhcp_inc_pcb_refcount+0x9c>)
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff fe34 	bl	800dd44 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e0dc:	4b0c      	ldr	r3, [pc, #48]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2243      	movs	r2, #67	; 0x43
 800e0e2:	490f      	ldr	r1, [pc, #60]	; (800e120 <dhcp_inc_pcb_refcount+0x9c>)
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7ff feb5 	bl	800de54 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e0ea:	4b09      	ldr	r3, [pc, #36]	; (800e110 <dhcp_inc_pcb_refcount+0x8c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	490c      	ldr	r1, [pc, #48]	; (800e124 <dhcp_inc_pcb_refcount+0xa0>)
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff ff1c 	bl	800df30 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e0f8:	4b04      	ldr	r3, [pc, #16]	; (800e10c <dhcp_inc_pcb_refcount+0x88>)
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	4b02      	ldr	r3, [pc, #8]	; (800e10c <dhcp_inc_pcb_refcount+0x88>)
 800e102:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	2000a83c 	.word	0x2000a83c
 800e110:	2000a838 	.word	0x2000a838
 800e114:	080156d4 	.word	0x080156d4
 800e118:	0801570c 	.word	0x0801570c
 800e11c:	08015734 	.word	0x08015734
 800e120:	0801623c 	.word	0x0801623c
 800e124:	0800f9bd 	.word	0x0800f9bd

0800e128 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e12c:	4b0e      	ldr	r3, [pc, #56]	; (800e168 <dhcp_dec_pcb_refcount+0x40>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d105      	bne.n	800e140 <dhcp_dec_pcb_refcount+0x18>
 800e134:	4b0d      	ldr	r3, [pc, #52]	; (800e16c <dhcp_dec_pcb_refcount+0x44>)
 800e136:	22ff      	movs	r2, #255	; 0xff
 800e138:	490d      	ldr	r1, [pc, #52]	; (800e170 <dhcp_dec_pcb_refcount+0x48>)
 800e13a:	480e      	ldr	r0, [pc, #56]	; (800e174 <dhcp_dec_pcb_refcount+0x4c>)
 800e13c:	f004 fa1e 	bl	801257c <iprintf>
  dhcp_pcb_refcount--;
 800e140:	4b09      	ldr	r3, [pc, #36]	; (800e168 <dhcp_dec_pcb_refcount+0x40>)
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	3b01      	subs	r3, #1
 800e146:	b2da      	uxtb	r2, r3
 800e148:	4b07      	ldr	r3, [pc, #28]	; (800e168 <dhcp_dec_pcb_refcount+0x40>)
 800e14a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e14c:	4b06      	ldr	r3, [pc, #24]	; (800e168 <dhcp_dec_pcb_refcount+0x40>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d107      	bne.n	800e164 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e154:	4b08      	ldr	r3, [pc, #32]	; (800e178 <dhcp_dec_pcb_refcount+0x50>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff ff09 	bl	800df70 <udp_remove>
    dhcp_pcb = NULL;
 800e15e:	4b06      	ldr	r3, [pc, #24]	; (800e178 <dhcp_dec_pcb_refcount+0x50>)
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]
  }
}
 800e164:	bf00      	nop
 800e166:	bd80      	pop	{r7, pc}
 800e168:	2000a83c 	.word	0x2000a83c
 800e16c:	080156d4 	.word	0x080156d4
 800e170:	0801575c 	.word	0x0801575c
 800e174:	08015734 	.word	0x08015734
 800e178:	2000a838 	.word	0x2000a838

0800e17c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e188:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e18a:	210c      	movs	r1, #12
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f001 f857 	bl	800f240 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e192:	4b06      	ldr	r3, [pc, #24]	; (800e1ac <dhcp_handle_nak+0x30>)
 800e194:	4a05      	ldr	r2, [pc, #20]	; (800e1ac <dhcp_handle_nak+0x30>)
 800e196:	4905      	ldr	r1, [pc, #20]	; (800e1ac <dhcp_handle_nak+0x30>)
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7f9 f8f5 	bl	8007388 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fc4a 	bl	800ea38 <dhcp_discover>
}
 800e1a4:	bf00      	nop
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	0801623c 	.word	0x0801623c

0800e1b0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1bc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e1be:	2108      	movs	r1, #8
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f001 f83d 	bl	800f240 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	331c      	adds	r3, #28
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f002 fb3e 	bl	8010850 <etharp_query>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	799b      	ldrb	r3, [r3, #6]
 800e1dc:	2bff      	cmp	r3, #255	; 0xff
 800e1de:	d005      	beq.n	800e1ec <dhcp_check+0x3c>
    dhcp->tries++;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	799b      	ldrb	r3, [r3, #6]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e1ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e1f0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e1f2:	893b      	ldrh	r3, [r7, #8]
 800e1f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e1f8:	4a06      	ldr	r2, [pc, #24]	; (800e214 <dhcp_check+0x64>)
 800e1fa:	fb82 1203 	smull	r1, r2, r2, r3
 800e1fe:	1152      	asrs	r2, r2, #5
 800e200:	17db      	asrs	r3, r3, #31
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	b29a      	uxth	r2, r3
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e20a:	bf00      	nop
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	10624dd3 	.word	0x10624dd3

0800e218 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e226:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e228:	4b0c      	ldr	r3, [pc, #48]	; (800e25c <dhcp_handle_offer+0x44>)
 800e22a:	789b      	ldrb	r3, [r3, #2]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d011      	beq.n	800e254 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e236:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <dhcp_handle_offer+0x48>)
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7f8 fa2f 	bl	800669e <lwip_htonl>
 800e240:	4602      	mov	r2, r0
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	691a      	ldr	r2, [r3, #16]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 f808 	bl	800e264 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e254:	bf00      	nop
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	2000a830 	.word	0x2000a830
 800e260:	2000a810 	.word	0x2000a810

0800e264 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e264:	b5b0      	push	{r4, r5, r7, lr}
 800e266:	b08a      	sub	sp, #40	; 0x28
 800e268:	af02      	add	r7, sp, #8
 800e26a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d109      	bne.n	800e286 <dhcp_select+0x22>
 800e272:	4b71      	ldr	r3, [pc, #452]	; (800e438 <dhcp_select+0x1d4>)
 800e274:	f240 1277 	movw	r2, #375	; 0x177
 800e278:	4970      	ldr	r1, [pc, #448]	; (800e43c <dhcp_select+0x1d8>)
 800e27a:	4871      	ldr	r0, [pc, #452]	; (800e440 <dhcp_select+0x1dc>)
 800e27c:	f004 f97e 	bl	801257c <iprintf>
 800e280:	f06f 030f 	mvn.w	r3, #15
 800e284:	e0d3      	b.n	800e42e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d109      	bne.n	800e2a6 <dhcp_select+0x42>
 800e292:	4b69      	ldr	r3, [pc, #420]	; (800e438 <dhcp_select+0x1d4>)
 800e294:	f240 1279 	movw	r2, #377	; 0x179
 800e298:	496a      	ldr	r1, [pc, #424]	; (800e444 <dhcp_select+0x1e0>)
 800e29a:	4869      	ldr	r0, [pc, #420]	; (800e440 <dhcp_select+0x1dc>)
 800e29c:	f004 f96e 	bl	801257c <iprintf>
 800e2a0:	f06f 0305 	mvn.w	r3, #5
 800e2a4:	e0c3      	b.n	800e42e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	69b8      	ldr	r0, [r7, #24]
 800e2aa:	f000 ffc9 	bl	800f240 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e2ae:	f107 030c 	add.w	r3, r7, #12
 800e2b2:	2203      	movs	r2, #3
 800e2b4:	69b9      	ldr	r1, [r7, #24]
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f001 fc4e 	bl	800fb58 <dhcp_create_msg>
 800e2bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f000 8085 	beq.w	800e3d0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e2cc:	89b8      	ldrh	r0, [r7, #12]
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	2239      	movs	r2, #57	; 0x39
 800e2d8:	f000 ffcc 	bl	800f274 <dhcp_option>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e2e0:	89b8      	ldrh	r0, [r7, #12]
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	f001 f81b 	bl	800f328 <dhcp_option_short>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e2f6:	89b8      	ldrh	r0, [r7, #12]
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e2fe:	2304      	movs	r3, #4
 800e300:	2232      	movs	r2, #50	; 0x32
 800e302:	f000 ffb7 	bl	800f274 <dhcp_option>
 800e306:	4603      	mov	r3, r0
 800e308:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e30a:	89bc      	ldrh	r4, [r7, #12]
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	69db      	ldr	r3, [r3, #28]
 800e316:	4618      	mov	r0, r3
 800e318:	f7f8 f9c1 	bl	800669e <lwip_htonl>
 800e31c:	4603      	mov	r3, r0
 800e31e:	461a      	mov	r2, r3
 800e320:	4629      	mov	r1, r5
 800e322:	4620      	mov	r0, r4
 800e324:	f001 f832 	bl	800f38c <dhcp_option_long>
 800e328:	4603      	mov	r3, r0
 800e32a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e32c:	89b8      	ldrh	r0, [r7, #12]
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e334:	2304      	movs	r3, #4
 800e336:	2236      	movs	r2, #54	; 0x36
 800e338:	f000 ff9c 	bl	800f274 <dhcp_option>
 800e33c:	4603      	mov	r3, r0
 800e33e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e340:	89bc      	ldrh	r4, [r7, #12]
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7f8 f9a6 	bl	800669e <lwip_htonl>
 800e352:	4603      	mov	r3, r0
 800e354:	461a      	mov	r2, r3
 800e356:	4629      	mov	r1, r5
 800e358:	4620      	mov	r0, r4
 800e35a:	f001 f817 	bl	800f38c <dhcp_option_long>
 800e35e:	4603      	mov	r3, r0
 800e360:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e362:	89b8      	ldrh	r0, [r7, #12]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e36a:	2303      	movs	r3, #3
 800e36c:	2237      	movs	r2, #55	; 0x37
 800e36e:	f000 ff81 	bl	800f274 <dhcp_option>
 800e372:	4603      	mov	r3, r0
 800e374:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e376:	2300      	movs	r3, #0
 800e378:	77bb      	strb	r3, [r7, #30]
 800e37a:	e00e      	b.n	800e39a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e37c:	89b8      	ldrh	r0, [r7, #12]
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e384:	7fbb      	ldrb	r3, [r7, #30]
 800e386:	4a30      	ldr	r2, [pc, #192]	; (800e448 <dhcp_select+0x1e4>)
 800e388:	5cd3      	ldrb	r3, [r2, r3]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f000 ffa6 	bl	800f2dc <dhcp_option_byte>
 800e390:	4603      	mov	r3, r0
 800e392:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e394:	7fbb      	ldrb	r3, [r7, #30]
 800e396:	3301      	adds	r3, #1
 800e398:	77bb      	strb	r3, [r7, #30]
 800e39a:	7fbb      	ldrb	r3, [r7, #30]
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d9ed      	bls.n	800e37c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e3a0:	89b8      	ldrh	r0, [r7, #12]
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	33f0      	adds	r3, #240	; 0xf0
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	f001 fcab 	bl	800fd04 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e3ae:	4b27      	ldr	r3, [pc, #156]	; (800e44c <dhcp_select+0x1e8>)
 800e3b0:	6818      	ldr	r0, [r3, #0]
 800e3b2:	4b27      	ldr	r3, [pc, #156]	; (800e450 <dhcp_select+0x1ec>)
 800e3b4:	9301      	str	r3, [sp, #4]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	2343      	movs	r3, #67	; 0x43
 800e3bc:	4a25      	ldr	r2, [pc, #148]	; (800e454 <dhcp_select+0x1f0>)
 800e3be:	6979      	ldr	r1, [r7, #20]
 800e3c0:	f7ff fbda 	bl	800db78 <udp_sendto_if_src>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e3c8:	6978      	ldr	r0, [r7, #20]
 800e3ca:	f7f9 fc9d 	bl	8007d08 <pbuf_free>
 800e3ce:	e001      	b.n	800e3d4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e3d0:	23ff      	movs	r3, #255	; 0xff
 800e3d2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	799b      	ldrb	r3, [r3, #6]
 800e3d8:	2bff      	cmp	r3, #255	; 0xff
 800e3da:	d005      	beq.n	800e3e8 <dhcp_select+0x184>
    dhcp->tries++;
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	799b      	ldrb	r3, [r3, #6]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	b2da      	uxtb	r2, r3
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	799b      	ldrb	r3, [r3, #6]
 800e3ec:	2b05      	cmp	r3, #5
 800e3ee:	d80d      	bhi.n	800e40c <dhcp_select+0x1a8>
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	799b      	ldrb	r3, [r3, #6]
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	4093      	lsls	r3, r2
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	0152      	lsls	r2, r2, #5
 800e400:	1ad2      	subs	r2, r2, r3
 800e402:	0092      	lsls	r2, r2, #2
 800e404:	4413      	add	r3, r2
 800e406:	00db      	lsls	r3, r3, #3
 800e408:	b29b      	uxth	r3, r3
 800e40a:	e001      	b.n	800e410 <dhcp_select+0x1ac>
 800e40c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e410:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e412:	89fb      	ldrh	r3, [r7, #14]
 800e414:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e418:	4a0f      	ldr	r2, [pc, #60]	; (800e458 <dhcp_select+0x1f4>)
 800e41a:	fb82 1203 	smull	r1, r2, r2, r3
 800e41e:	1152      	asrs	r2, r2, #5
 800e420:	17db      	asrs	r3, r3, #31
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	b29a      	uxth	r2, r3
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e42a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3720      	adds	r7, #32
 800e432:	46bd      	mov	sp, r7
 800e434:	bdb0      	pop	{r4, r5, r7, pc}
 800e436:	bf00      	nop
 800e438:	080156d4 	.word	0x080156d4
 800e43c:	08015780 	.word	0x08015780
 800e440:	08015734 	.word	0x08015734
 800e444:	0801579c 	.word	0x0801579c
 800e448:	2000002c 	.word	0x2000002c
 800e44c:	2000a838 	.word	0x2000a838
 800e450:	0801623c 	.word	0x0801623c
 800e454:	08016240 	.word	0x08016240
 800e458:	10624dd3 	.word	0x10624dd3

0800e45c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800e462:	4b27      	ldr	r3, [pc, #156]	; (800e500 <dhcp_coarse_tmr+0xa4>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	607b      	str	r3, [r7, #4]
 800e468:	e042      	b.n	800e4f0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d039      	beq.n	800e4ea <dhcp_coarse_tmr+0x8e>
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	795b      	ldrb	r3, [r3, #5]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d035      	beq.n	800e4ea <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	8a9b      	ldrh	r3, [r3, #20]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d012      	beq.n	800e4ac <dhcp_coarse_tmr+0x50>
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	8a5b      	ldrh	r3, [r3, #18]
 800e48a:	3301      	adds	r3, #1
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	825a      	strh	r2, [r3, #18]
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	8a5a      	ldrh	r2, [r3, #18]
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	8a9b      	ldrh	r3, [r3, #20]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d106      	bne.n	800e4ac <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 fe34 	bl	800f10c <dhcp_release_and_stop>
        dhcp_start(netif);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f96b 	bl	800e780 <dhcp_start>
 800e4aa:	e01e      	b.n	800e4ea <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	8a1b      	ldrh	r3, [r3, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00b      	beq.n	800e4cc <dhcp_coarse_tmr+0x70>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	8a1b      	ldrh	r3, [r3, #16]
 800e4b8:	1e5a      	subs	r2, r3, #1
 800e4ba:	b291      	uxth	r1, r2
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	8211      	strh	r1, [r2, #16]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d103      	bne.n	800e4cc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 f8c7 	bl	800e658 <dhcp_t2_timeout>
 800e4ca:	e00e      	b.n	800e4ea <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	89db      	ldrh	r3, [r3, #14]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00a      	beq.n	800e4ea <dhcp_coarse_tmr+0x8e>
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	89db      	ldrh	r3, [r3, #14]
 800e4d8:	1e5a      	subs	r2, r3, #1
 800e4da:	b291      	uxth	r1, r2
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	81d1      	strh	r1, [r2, #14]
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d102      	bne.n	800e4ea <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 f888 	bl	800e5fa <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	607b      	str	r3, [r7, #4]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1b9      	bne.n	800e46a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800e4f6:	bf00      	nop
 800e4f8:	bf00      	nop
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	2000a7a4 	.word	0x2000a7a4

0800e504 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800e50a:	4b16      	ldr	r3, [pc, #88]	; (800e564 <dhcp_fine_tmr+0x60>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	607b      	str	r3, [r7, #4]
 800e510:	e020      	b.n	800e554 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e516:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d017      	beq.n	800e54e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	891b      	ldrh	r3, [r3, #8]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d906      	bls.n	800e534 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	891b      	ldrh	r3, [r3, #8]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	811a      	strh	r2, [r3, #8]
 800e532:	e00c      	b.n	800e54e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	891b      	ldrh	r3, [r3, #8]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d108      	bne.n	800e54e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	891b      	ldrh	r3, [r3, #8]
 800e540:	3b01      	subs	r3, #1
 800e542:	b29a      	uxth	r2, r3
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f80d 	bl	800e568 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	607b      	str	r3, [r7, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1db      	bne.n	800e512 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800e55a:	bf00      	nop
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}
 800e564:	2000a7a4 	.word	0x2000a7a4

0800e568 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e574:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	795b      	ldrb	r3, [r3, #5]
 800e57a:	2b0c      	cmp	r3, #12
 800e57c:	d003      	beq.n	800e586 <dhcp_timeout+0x1e>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	795b      	ldrb	r3, [r3, #5]
 800e582:	2b06      	cmp	r3, #6
 800e584:	d103      	bne.n	800e58e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 fa56 	bl	800ea38 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e58c:	e031      	b.n	800e5f2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	795b      	ldrb	r3, [r3, #5]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d10e      	bne.n	800e5b4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	799b      	ldrb	r3, [r3, #6]
 800e59a:	2b05      	cmp	r3, #5
 800e59c:	d803      	bhi.n	800e5a6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fe60 	bl	800e264 <dhcp_select>
}
 800e5a4:	e025      	b.n	800e5f2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fdb0 	bl	800f10c <dhcp_release_and_stop>
      dhcp_start(netif);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f8e7 	bl	800e780 <dhcp_start>
}
 800e5b2:	e01e      	b.n	800e5f2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	795b      	ldrb	r3, [r3, #5]
 800e5b8:	2b08      	cmp	r3, #8
 800e5ba:	d10b      	bne.n	800e5d4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	799b      	ldrb	r3, [r3, #6]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d803      	bhi.n	800e5cc <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff fdf3 	bl	800e1b0 <dhcp_check>
}
 800e5ca:	e012      	b.n	800e5f2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 fad5 	bl	800eb7c <dhcp_bind>
}
 800e5d2:	e00e      	b.n	800e5f2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	795b      	ldrb	r3, [r3, #5]
 800e5d8:	2b03      	cmp	r3, #3
 800e5da:	d10a      	bne.n	800e5f2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	799b      	ldrb	r3, [r3, #6]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d803      	bhi.n	800e5ec <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fcdb 	bl	800efa0 <dhcp_reboot>
}
 800e5ea:	e002      	b.n	800e5f2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fa23 	bl	800ea38 <dhcp_discover>
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b084      	sub	sp, #16
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e606:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	795b      	ldrb	r3, [r3, #5]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d007      	beq.n	800e620 <dhcp_t1_timeout+0x26>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	795b      	ldrb	r3, [r3, #5]
 800e614:	2b0a      	cmp	r3, #10
 800e616:	d003      	beq.n	800e620 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e61c:	2b05      	cmp	r3, #5
 800e61e:	d117      	bne.n	800e650 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fb85 	bl	800ed30 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	899b      	ldrh	r3, [r3, #12]
 800e62a:	461a      	mov	r2, r3
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	8a5b      	ldrh	r3, [r3, #18]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	2b01      	cmp	r3, #1
 800e634:	dd0c      	ble.n	800e650 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	899b      	ldrh	r3, [r3, #12]
 800e63a:	461a      	mov	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	8a5b      	ldrh	r3, [r3, #18]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	da00      	bge.n	800e648 <dhcp_t1_timeout+0x4e>
 800e646:	3301      	adds	r3, #1
 800e648:	105b      	asrs	r3, r3, #1
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800e650:	bf00      	nop
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e664:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	795b      	ldrb	r3, [r3, #5]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d00b      	beq.n	800e686 <dhcp_t2_timeout+0x2e>
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	795b      	ldrb	r3, [r3, #5]
 800e672:	2b0a      	cmp	r3, #10
 800e674:	d007      	beq.n	800e686 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e67a:	2b05      	cmp	r3, #5
 800e67c:	d003      	beq.n	800e686 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	795b      	ldrb	r3, [r3, #5]
 800e682:	2b04      	cmp	r3, #4
 800e684:	d117      	bne.n	800e6b6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 fbee 	bl	800ee68 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	8a9b      	ldrh	r3, [r3, #20]
 800e690:	461a      	mov	r2, r3
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	8a5b      	ldrh	r3, [r3, #18]
 800e696:	1ad3      	subs	r3, r2, r3
 800e698:	2b01      	cmp	r3, #1
 800e69a:	dd0c      	ble.n	800e6b6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	8a9b      	ldrh	r3, [r3, #20]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	8a5b      	ldrh	r3, [r3, #18]
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	da00      	bge.n	800e6ae <dhcp_t2_timeout+0x56>
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	105b      	asrs	r3, r3, #1
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800e6b6:	bf00      	nop
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
	...

0800e6c0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ce:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e6dc:	4b26      	ldr	r3, [pc, #152]	; (800e778 <dhcp_handle_ack+0xb8>)
 800e6de:	78db      	ldrb	r3, [r3, #3]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d003      	beq.n	800e6ec <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e6e4:	4b25      	ldr	r3, [pc, #148]	; (800e77c <dhcp_handle_ack+0xbc>)
 800e6e6:	68da      	ldr	r2, [r3, #12]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e6ec:	4b22      	ldr	r3, [pc, #136]	; (800e778 <dhcp_handle_ack+0xb8>)
 800e6ee:	791b      	ldrb	r3, [r3, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d004      	beq.n	800e6fe <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e6f4:	4b21      	ldr	r3, [pc, #132]	; (800e77c <dhcp_handle_ack+0xbc>)
 800e6f6:	691a      	ldr	r2, [r3, #16]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	62da      	str	r2, [r3, #44]	; 0x2c
 800e6fc:	e004      	b.n	800e708 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e702:	085a      	lsrs	r2, r3, #1
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e708:	4b1b      	ldr	r3, [pc, #108]	; (800e778 <dhcp_handle_ack+0xb8>)
 800e70a:	795b      	ldrb	r3, [r3, #5]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d004      	beq.n	800e71a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e710:	4b1a      	ldr	r3, [pc, #104]	; (800e77c <dhcp_handle_ack+0xbc>)
 800e712:	695a      	ldr	r2, [r3, #20]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	631a      	str	r2, [r3, #48]	; 0x30
 800e718:	e007      	b.n	800e72a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e71e:	4613      	mov	r3, r2
 800e720:	00db      	lsls	r3, r3, #3
 800e722:	1a9b      	subs	r3, r3, r2
 800e724:	08da      	lsrs	r2, r3, #3
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	691a      	ldr	r2, [r3, #16]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e732:	4b11      	ldr	r3, [pc, #68]	; (800e778 <dhcp_handle_ack+0xb8>)
 800e734:	799b      	ldrb	r3, [r3, #6]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00b      	beq.n	800e752 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e73a:	4b10      	ldr	r3, [pc, #64]	; (800e77c <dhcp_handle_ack+0xbc>)
 800e73c:	699b      	ldr	r3, [r3, #24]
 800e73e:	4618      	mov	r0, r3
 800e740:	f7f7 ffad 	bl	800669e <lwip_htonl>
 800e744:	4602      	mov	r2, r0
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2201      	movs	r2, #1
 800e74e:	71da      	strb	r2, [r3, #7]
 800e750:	e002      	b.n	800e758 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e758:	4b07      	ldr	r3, [pc, #28]	; (800e778 <dhcp_handle_ack+0xb8>)
 800e75a:	79db      	ldrb	r3, [r3, #7]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d007      	beq.n	800e770 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800e760:	4b06      	ldr	r3, [pc, #24]	; (800e77c <dhcp_handle_ack+0xbc>)
 800e762:	69db      	ldr	r3, [r3, #28]
 800e764:	4618      	mov	r0, r3
 800e766:	f7f7 ff9a 	bl	800669e <lwip_htonl>
 800e76a:	4602      	mov	r2, r0
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800e770:	bf00      	nop
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	2000a830 	.word	0x2000a830
 800e77c:	2000a810 	.word	0x2000a810

0800e780 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d109      	bne.n	800e7a2 <dhcp_start+0x22>
 800e78e:	4b37      	ldr	r3, [pc, #220]	; (800e86c <dhcp_start+0xec>)
 800e790:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e794:	4936      	ldr	r1, [pc, #216]	; (800e870 <dhcp_start+0xf0>)
 800e796:	4837      	ldr	r0, [pc, #220]	; (800e874 <dhcp_start+0xf4>)
 800e798:	f003 fef0 	bl	801257c <iprintf>
 800e79c:	f06f 030f 	mvn.w	r3, #15
 800e7a0:	e060      	b.n	800e864 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7a8:	f003 0301 	and.w	r3, r3, #1
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d109      	bne.n	800e7c4 <dhcp_start+0x44>
 800e7b0:	4b2e      	ldr	r3, [pc, #184]	; (800e86c <dhcp_start+0xec>)
 800e7b2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e7b6:	4930      	ldr	r1, [pc, #192]	; (800e878 <dhcp_start+0xf8>)
 800e7b8:	482e      	ldr	r0, [pc, #184]	; (800e874 <dhcp_start+0xf4>)
 800e7ba:	f003 fedf 	bl	801257c <iprintf>
 800e7be:	f06f 030f 	mvn.w	r3, #15
 800e7c2:	e04f      	b.n	800e864 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7ce:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e7d2:	d202      	bcs.n	800e7da <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800e7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7d8:	e044      	b.n	800e864 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10d      	bne.n	800e7fc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e7e0:	2034      	movs	r0, #52	; 0x34
 800e7e2:	f7f8 fa2f 	bl	8006c44 <mem_malloc>
 800e7e6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d102      	bne.n	800e7f4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800e7ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7f2:	e037      	b.n	800e864 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	625a      	str	r2, [r3, #36]	; 0x24
 800e7fa:	e005      	b.n	800e808 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	791b      	ldrb	r3, [r3, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e804:	f7ff fc90 	bl	800e128 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800e808:	2234      	movs	r2, #52	; 0x34
 800e80a:	2100      	movs	r1, #0
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f003 ff1a 	bl	8012646 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e812:	f7ff fc37 	bl	800e084 <dhcp_inc_pcb_refcount>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <dhcp_start+0xa2>
    return ERR_MEM;
 800e81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e820:	e020      	b.n	800e864 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2201      	movs	r2, #1
 800e826:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e82e:	f003 0304 	and.w	r3, r3, #4
 800e832:	2b00      	cmp	r3, #0
 800e834:	d105      	bne.n	800e842 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800e836:	2102      	movs	r1, #2
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f000 fd01 	bl	800f240 <dhcp_set_state>
    return ERR_OK;
 800e83e:	2300      	movs	r3, #0
 800e840:	e010      	b.n	800e864 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 f8f8 	bl	800ea38 <dhcp_discover>
 800e848:	4603      	mov	r3, r0
 800e84a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800e84c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d005      	beq.n	800e860 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fc59 	bl	800f10c <dhcp_release_and_stop>
    return ERR_MEM;
 800e85a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e85e:	e001      	b.n	800e864 <dhcp_start+0xe4>
  }
  return result;
 800e860:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	080156d4 	.word	0x080156d4
 800e870:	080157b8 	.word	0x080157b8
 800e874:	08015734 	.word	0x08015734
 800e878:	080157fc 	.word	0x080157fc

0800e87c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e888:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d025      	beq.n	800e8dc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	795b      	ldrb	r3, [r3, #5]
 800e894:	2b0a      	cmp	r3, #10
 800e896:	d008      	beq.n	800e8aa <dhcp_network_changed+0x2e>
 800e898:	2b0a      	cmp	r3, #10
 800e89a:	dc0d      	bgt.n	800e8b8 <dhcp_network_changed+0x3c>
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d01f      	beq.n	800e8e0 <dhcp_network_changed+0x64>
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	db09      	blt.n	800e8b8 <dhcp_network_changed+0x3c>
 800e8a4:	3b03      	subs	r3, #3
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d806      	bhi.n	800e8b8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 fb75 	bl	800efa0 <dhcp_reboot>
      break;
 800e8b6:	e014      	b.n	800e8e2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	795b      	ldrb	r3, [r3, #5]
 800e8bc:	2b0c      	cmp	r3, #12
 800e8be:	d906      	bls.n	800e8ce <dhcp_network_changed+0x52>
 800e8c0:	4b09      	ldr	r3, [pc, #36]	; (800e8e8 <dhcp_network_changed+0x6c>)
 800e8c2:	f240 326d 	movw	r2, #877	; 0x36d
 800e8c6:	4909      	ldr	r1, [pc, #36]	; (800e8ec <dhcp_network_changed+0x70>)
 800e8c8:	4809      	ldr	r0, [pc, #36]	; (800e8f0 <dhcp_network_changed+0x74>)
 800e8ca:	f003 fe57 	bl	801257c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f8af 	bl	800ea38 <dhcp_discover>
      break;
 800e8da:	e002      	b.n	800e8e2 <dhcp_network_changed+0x66>
    return;
 800e8dc:	bf00      	nop
 800e8de:	e000      	b.n	800e8e2 <dhcp_network_changed+0x66>
      break;
 800e8e0:	bf00      	nop
  }
}
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	080156d4 	.word	0x080156d4
 800e8ec:	08015820 	.word	0x08015820
 800e8f0:	08015734 	.word	0x08015734

0800e8f4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d107      	bne.n	800e914 <dhcp_arp_reply+0x20>
 800e904:	4b0e      	ldr	r3, [pc, #56]	; (800e940 <dhcp_arp_reply+0x4c>)
 800e906:	f240 328b 	movw	r2, #907	; 0x38b
 800e90a:	490e      	ldr	r1, [pc, #56]	; (800e944 <dhcp_arp_reply+0x50>)
 800e90c:	480e      	ldr	r0, [pc, #56]	; (800e948 <dhcp_arp_reply+0x54>)
 800e90e:	f003 fe35 	bl	801257c <iprintf>
 800e912:	e012      	b.n	800e93a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e918:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00c      	beq.n	800e93a <dhcp_arp_reply+0x46>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	795b      	ldrb	r3, [r3, #5]
 800e924:	2b08      	cmp	r3, #8
 800e926:	d108      	bne.n	800e93a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	69db      	ldr	r3, [r3, #28]
 800e930:	429a      	cmp	r2, r3
 800e932:	d102      	bne.n	800e93a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 f809 	bl	800e94c <dhcp_decline>
    }
  }
}
 800e93a:	3710      	adds	r7, #16
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	080156d4 	.word	0x080156d4
 800e944:	080157b8 	.word	0x080157b8
 800e948:	08015734 	.word	0x08015734

0800e94c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800e94c:	b5b0      	push	{r4, r5, r7, lr}
 800e94e:	b08a      	sub	sp, #40	; 0x28
 800e950:	af02      	add	r7, sp, #8
 800e952:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e958:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e95a:	210c      	movs	r1, #12
 800e95c:	69b8      	ldr	r0, [r7, #24]
 800e95e:	f000 fc6f 	bl	800f240 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800e962:	f107 030c 	add.w	r3, r7, #12
 800e966:	2204      	movs	r2, #4
 800e968:	69b9      	ldr	r1, [r7, #24]
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f001 f8f4 	bl	800fb58 <dhcp_create_msg>
 800e970:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d035      	beq.n	800e9e4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e97e:	89b8      	ldrh	r0, [r7, #12]
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e986:	2304      	movs	r3, #4
 800e988:	2232      	movs	r2, #50	; 0x32
 800e98a:	f000 fc73 	bl	800f274 <dhcp_option>
 800e98e:	4603      	mov	r3, r0
 800e990:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e992:	89bc      	ldrh	r4, [r7, #12]
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	69db      	ldr	r3, [r3, #28]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7f7 fe7d 	bl	800669e <lwip_htonl>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 fcee 	bl	800f38c <dhcp_option_long>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e9b4:	89b8      	ldrh	r0, [r7, #12]
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	33f0      	adds	r3, #240	; 0xf0
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	4619      	mov	r1, r3
 800e9be:	f001 f9a1 	bl	800fd04 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e9c2:	4b19      	ldr	r3, [pc, #100]	; (800ea28 <dhcp_decline+0xdc>)
 800e9c4:	6818      	ldr	r0, [r3, #0]
 800e9c6:	4b19      	ldr	r3, [pc, #100]	; (800ea2c <dhcp_decline+0xe0>)
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	2343      	movs	r3, #67	; 0x43
 800e9d0:	4a17      	ldr	r2, [pc, #92]	; (800ea30 <dhcp_decline+0xe4>)
 800e9d2:	6979      	ldr	r1, [r7, #20]
 800e9d4:	f7ff f8d0 	bl	800db78 <udp_sendto_if_src>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e9dc:	6978      	ldr	r0, [r7, #20]
 800e9de:	f7f9 f993 	bl	8007d08 <pbuf_free>
 800e9e2:	e001      	b.n	800e9e8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e9e4:	23ff      	movs	r3, #255	; 0xff
 800e9e6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	799b      	ldrb	r3, [r3, #6]
 800e9ec:	2bff      	cmp	r3, #255	; 0xff
 800e9ee:	d005      	beq.n	800e9fc <dhcp_decline+0xb0>
    dhcp->tries++;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	799b      	ldrb	r3, [r3, #6]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800e9fc:	f242 7310 	movw	r3, #10000	; 0x2710
 800ea00:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ea02:	89fb      	ldrh	r3, [r7, #14]
 800ea04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ea08:	4a0a      	ldr	r2, [pc, #40]	; (800ea34 <dhcp_decline+0xe8>)
 800ea0a:	fb82 1203 	smull	r1, r2, r2, r3
 800ea0e:	1152      	asrs	r2, r2, #5
 800ea10:	17db      	asrs	r3, r3, #31
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ea1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3720      	adds	r7, #32
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bdb0      	pop	{r4, r5, r7, pc}
 800ea26:	bf00      	nop
 800ea28:	2000a838 	.word	0x2000a838
 800ea2c:	0801623c 	.word	0x0801623c
 800ea30:	08016240 	.word	0x08016240
 800ea34:	10624dd3 	.word	0x10624dd3

0800ea38 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08a      	sub	sp, #40	; 0x28
 800ea3c:	af02      	add	r7, sp, #8
 800ea3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ea50:	2106      	movs	r1, #6
 800ea52:	69b8      	ldr	r0, [r7, #24]
 800ea54:	f000 fbf4 	bl	800f240 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800ea58:	f107 0308 	add.w	r3, r7, #8
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	69b9      	ldr	r1, [r7, #24]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f001 f879 	bl	800fb58 <dhcp_create_msg>
 800ea66:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d04b      	beq.n	800eb06 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ea74:	8938      	ldrh	r0, [r7, #8]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	2239      	movs	r2, #57	; 0x39
 800ea80:	f000 fbf8 	bl	800f274 <dhcp_option>
 800ea84:	4603      	mov	r3, r0
 800ea86:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ea88:	8938      	ldrh	r0, [r7, #8]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea94:	461a      	mov	r2, r3
 800ea96:	f000 fc47 	bl	800f328 <dhcp_option_short>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ea9e:	8938      	ldrh	r0, [r7, #8]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eaa6:	2303      	movs	r3, #3
 800eaa8:	2237      	movs	r2, #55	; 0x37
 800eaaa:	f000 fbe3 	bl	800f274 <dhcp_option>
 800eaae:	4603      	mov	r3, r0
 800eab0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eab2:	2300      	movs	r3, #0
 800eab4:	77fb      	strb	r3, [r7, #31]
 800eab6:	e00e      	b.n	800ead6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800eab8:	8938      	ldrh	r0, [r7, #8]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eac0:	7ffb      	ldrb	r3, [r7, #31]
 800eac2:	4a29      	ldr	r2, [pc, #164]	; (800eb68 <dhcp_discover+0x130>)
 800eac4:	5cd3      	ldrb	r3, [r2, r3]
 800eac6:	461a      	mov	r2, r3
 800eac8:	f000 fc08 	bl	800f2dc <dhcp_option_byte>
 800eacc:	4603      	mov	r3, r0
 800eace:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ead0:	7ffb      	ldrb	r3, [r7, #31]
 800ead2:	3301      	adds	r3, #1
 800ead4:	77fb      	strb	r3, [r7, #31]
 800ead6:	7ffb      	ldrb	r3, [r7, #31]
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d9ed      	bls.n	800eab8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eadc:	8938      	ldrh	r0, [r7, #8]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	33f0      	adds	r3, #240	; 0xf0
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	4619      	mov	r1, r3
 800eae6:	f001 f90d 	bl	800fd04 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800eaea:	4b20      	ldr	r3, [pc, #128]	; (800eb6c <dhcp_discover+0x134>)
 800eaec:	6818      	ldr	r0, [r3, #0]
 800eaee:	4b20      	ldr	r3, [pc, #128]	; (800eb70 <dhcp_discover+0x138>)
 800eaf0:	9301      	str	r3, [sp, #4]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	2343      	movs	r3, #67	; 0x43
 800eaf8:	4a1e      	ldr	r2, [pc, #120]	; (800eb74 <dhcp_discover+0x13c>)
 800eafa:	6939      	ldr	r1, [r7, #16]
 800eafc:	f7ff f83c 	bl	800db78 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800eb00:	6938      	ldr	r0, [r7, #16]
 800eb02:	f7f9 f901 	bl	8007d08 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	799b      	ldrb	r3, [r3, #6]
 800eb0a:	2bff      	cmp	r3, #255	; 0xff
 800eb0c:	d005      	beq.n	800eb1a <dhcp_discover+0xe2>
    dhcp->tries++;
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	799b      	ldrb	r3, [r3, #6]
 800eb12:	3301      	adds	r3, #1
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	799b      	ldrb	r3, [r3, #6]
 800eb1e:	2b05      	cmp	r3, #5
 800eb20:	d80d      	bhi.n	800eb3e <dhcp_discover+0x106>
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	799b      	ldrb	r3, [r3, #6]
 800eb26:	461a      	mov	r2, r3
 800eb28:	2301      	movs	r3, #1
 800eb2a:	4093      	lsls	r3, r2
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	461a      	mov	r2, r3
 800eb30:	0152      	lsls	r2, r2, #5
 800eb32:	1ad2      	subs	r2, r2, r3
 800eb34:	0092      	lsls	r2, r2, #2
 800eb36:	4413      	add	r3, r2
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	e001      	b.n	800eb42 <dhcp_discover+0x10a>
 800eb3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800eb42:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eb44:	897b      	ldrh	r3, [r7, #10]
 800eb46:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eb4a:	4a0b      	ldr	r2, [pc, #44]	; (800eb78 <dhcp_discover+0x140>)
 800eb4c:	fb82 1203 	smull	r1, r2, r2, r3
 800eb50:	1152      	asrs	r2, r2, #5
 800eb52:	17db      	asrs	r3, r3, #31
 800eb54:	1ad3      	subs	r3, r2, r3
 800eb56:	b29a      	uxth	r2, r3
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800eb5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3720      	adds	r7, #32
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	2000002c 	.word	0x2000002c
 800eb6c:	2000a838 	.word	0x2000a838
 800eb70:	0801623c 	.word	0x0801623c
 800eb74:	08016240 	.word	0x08016240
 800eb78:	10624dd3 	.word	0x10624dd3

0800eb7c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b088      	sub	sp, #32
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d107      	bne.n	800eb9a <dhcp_bind+0x1e>
 800eb8a:	4b64      	ldr	r3, [pc, #400]	; (800ed1c <dhcp_bind+0x1a0>)
 800eb8c:	f240 4215 	movw	r2, #1045	; 0x415
 800eb90:	4963      	ldr	r1, [pc, #396]	; (800ed20 <dhcp_bind+0x1a4>)
 800eb92:	4864      	ldr	r0, [pc, #400]	; (800ed24 <dhcp_bind+0x1a8>)
 800eb94:	f003 fcf2 	bl	801257c <iprintf>
 800eb98:	e0bc      	b.n	800ed14 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d107      	bne.n	800ebb6 <dhcp_bind+0x3a>
 800eba6:	4b5d      	ldr	r3, [pc, #372]	; (800ed1c <dhcp_bind+0x1a0>)
 800eba8:	f240 4217 	movw	r2, #1047	; 0x417
 800ebac:	495e      	ldr	r1, [pc, #376]	; (800ed28 <dhcp_bind+0x1ac>)
 800ebae:	485d      	ldr	r0, [pc, #372]	; (800ed24 <dhcp_bind+0x1a8>)
 800ebb0:	f003 fce4 	bl	801257c <iprintf>
 800ebb4:	e0ae      	b.n	800ed14 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebc4:	d019      	beq.n	800ebfa <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebca:	331e      	adds	r3, #30
 800ebcc:	4a57      	ldr	r2, [pc, #348]	; (800ed2c <dhcp_bind+0x1b0>)
 800ebce:	fba2 2303 	umull	r2, r3, r2, r3
 800ebd2:	095b      	lsrs	r3, r3, #5
 800ebd4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebdc:	d302      	bcc.n	800ebe4 <dhcp_bind+0x68>
      timeout = 0xffff;
 800ebde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebe2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	8a9b      	ldrh	r3, [r3, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d102      	bne.n	800ebfa <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec02:	d01d      	beq.n	800ec40 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec08:	331e      	adds	r3, #30
 800ec0a:	4a48      	ldr	r2, [pc, #288]	; (800ed2c <dhcp_bind+0x1b0>)
 800ec0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ec10:	095b      	lsrs	r3, r3, #5
 800ec12:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec1a:	d302      	bcc.n	800ec22 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ec1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec20:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	895b      	ldrh	r3, [r3, #10]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	2201      	movs	r2, #1
 800ec36:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	895a      	ldrh	r2, [r3, #10]
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec48:	d01d      	beq.n	800ec86 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec4e:	331e      	adds	r3, #30
 800ec50:	4a36      	ldr	r2, [pc, #216]	; (800ed2c <dhcp_bind+0x1b0>)
 800ec52:	fba2 2303 	umull	r2, r3, r2, r3
 800ec56:	095b      	lsrs	r3, r3, #5
 800ec58:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec60:	d302      	bcc.n	800ec68 <dhcp_bind+0xec>
      timeout = 0xffff;
 800ec62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec66:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	899b      	ldrh	r3, [r3, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d102      	bne.n	800ec7e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	899a      	ldrh	r2, [r3, #12]
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	895a      	ldrh	r2, [r3, #10]
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	899b      	ldrh	r3, [r3, #12]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d306      	bcc.n	800eca0 <dhcp_bind+0x124>
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	899b      	ldrh	r3, [r3, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d002      	beq.n	800eca0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	79db      	ldrb	r3, [r3, #7]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d003      	beq.n	800ecb0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	6a1b      	ldr	r3, [r3, #32]
 800ecac:	613b      	str	r3, [r7, #16]
 800ecae:	e014      	b.n	800ecda <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	331c      	adds	r3, #28
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800ecb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	db02      	blt.n	800ecc6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800ecc0:	23ff      	movs	r3, #255	; 0xff
 800ecc2:	613b      	str	r3, [r7, #16]
 800ecc4:	e009      	b.n	800ecda <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	2bbf      	cmp	r3, #191	; 0xbf
 800ecca:	d903      	bls.n	800ecd4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800eccc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ecd0:	613b      	str	r3, [r7, #16]
 800ecd2:	e002      	b.n	800ecda <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800ecd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ecd8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecde:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d108      	bne.n	800ecf8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	69da      	ldr	r2, [r3, #28]
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	4013      	ands	r3, r2
 800ecee:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ecf6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ecf8:	210a      	movs	r1, #10
 800ecfa:	69b8      	ldr	r0, [r7, #24]
 800ecfc:	f000 faa0 	bl	800f240 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	f103 011c 	add.w	r1, r3, #28
 800ed06:	f107 030c 	add.w	r3, r7, #12
 800ed0a:	f107 0210 	add.w	r2, r7, #16
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7f8 fb3a 	bl	8007388 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ed14:	3720      	adds	r7, #32
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	080156d4 	.word	0x080156d4
 800ed20:	08015834 	.word	0x08015834
 800ed24:	08015734 	.word	0x08015734
 800ed28:	08015850 	.word	0x08015850
 800ed2c:	88888889 	.word	0x88888889

0800ed30 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08a      	sub	sp, #40	; 0x28
 800ed34:	af02      	add	r7, sp, #8
 800ed36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed3c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800ed3e:	2105      	movs	r1, #5
 800ed40:	69b8      	ldr	r0, [r7, #24]
 800ed42:	f000 fa7d 	bl	800f240 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ed46:	f107 030c 	add.w	r3, r7, #12
 800ed4a:	2203      	movs	r2, #3
 800ed4c:	69b9      	ldr	r1, [r7, #24]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 ff02 	bl	800fb58 <dhcp_create_msg>
 800ed54:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d04e      	beq.n	800edfa <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ed62:	89b8      	ldrh	r0, [r7, #12]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	2239      	movs	r2, #57	; 0x39
 800ed6e:	f000 fa81 	bl	800f274 <dhcp_option>
 800ed72:	4603      	mov	r3, r0
 800ed74:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ed76:	89b8      	ldrh	r0, [r7, #12]
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed82:	461a      	mov	r2, r3
 800ed84:	f000 fad0 	bl	800f328 <dhcp_option_short>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ed8c:	89b8      	ldrh	r0, [r7, #12]
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed94:	2303      	movs	r3, #3
 800ed96:	2237      	movs	r2, #55	; 0x37
 800ed98:	f000 fa6c 	bl	800f274 <dhcp_option>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eda0:	2300      	movs	r3, #0
 800eda2:	77bb      	strb	r3, [r7, #30]
 800eda4:	e00e      	b.n	800edc4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800eda6:	89b8      	ldrh	r0, [r7, #12]
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800edae:	7fbb      	ldrb	r3, [r7, #30]
 800edb0:	4a2a      	ldr	r2, [pc, #168]	; (800ee5c <dhcp_renew+0x12c>)
 800edb2:	5cd3      	ldrb	r3, [r2, r3]
 800edb4:	461a      	mov	r2, r3
 800edb6:	f000 fa91 	bl	800f2dc <dhcp_option_byte>
 800edba:	4603      	mov	r3, r0
 800edbc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800edbe:	7fbb      	ldrb	r3, [r7, #30]
 800edc0:	3301      	adds	r3, #1
 800edc2:	77bb      	strb	r3, [r7, #30]
 800edc4:	7fbb      	ldrb	r3, [r7, #30]
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	d9ed      	bls.n	800eda6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800edca:	89b8      	ldrh	r0, [r7, #12]
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	33f0      	adds	r3, #240	; 0xf0
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	4619      	mov	r1, r3
 800edd4:	f000 ff96 	bl	800fd04 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800edd8:	4b21      	ldr	r3, [pc, #132]	; (800ee60 <dhcp_renew+0x130>)
 800edda:	6818      	ldr	r0, [r3, #0]
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	f103 0218 	add.w	r2, r3, #24
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	2343      	movs	r3, #67	; 0x43
 800ede8:	6979      	ldr	r1, [r7, #20]
 800edea:	f7fe fe51 	bl	800da90 <udp_sendto_if>
 800edee:	4603      	mov	r3, r0
 800edf0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800edf2:	6978      	ldr	r0, [r7, #20]
 800edf4:	f7f8 ff88 	bl	8007d08 <pbuf_free>
 800edf8:	e001      	b.n	800edfe <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800edfa:	23ff      	movs	r3, #255	; 0xff
 800edfc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	799b      	ldrb	r3, [r3, #6]
 800ee02:	2bff      	cmp	r3, #255	; 0xff
 800ee04:	d005      	beq.n	800ee12 <dhcp_renew+0xe2>
    dhcp->tries++;
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	799b      	ldrb	r3, [r3, #6]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	b2da      	uxtb	r2, r3
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	799b      	ldrb	r3, [r3, #6]
 800ee16:	2b09      	cmp	r3, #9
 800ee18:	d80a      	bhi.n	800ee30 <dhcp_renew+0x100>
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	799b      	ldrb	r3, [r3, #6]
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	461a      	mov	r2, r3
 800ee22:	0152      	lsls	r2, r2, #5
 800ee24:	1ad2      	subs	r2, r2, r3
 800ee26:	0092      	lsls	r2, r2, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	011b      	lsls	r3, r3, #4
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	e001      	b.n	800ee34 <dhcp_renew+0x104>
 800ee30:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ee34:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ee36:	89fb      	ldrh	r3, [r7, #14]
 800ee38:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ee3c:	4a09      	ldr	r2, [pc, #36]	; (800ee64 <dhcp_renew+0x134>)
 800ee3e:	fb82 1203 	smull	r1, r2, r2, r3
 800ee42:	1152      	asrs	r2, r2, #5
 800ee44:	17db      	asrs	r3, r3, #31
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ee4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3720      	adds	r7, #32
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	2000002c 	.word	0x2000002c
 800ee60:	2000a838 	.word	0x2000a838
 800ee64:	10624dd3 	.word	0x10624dd3

0800ee68 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08a      	sub	sp, #40	; 0x28
 800ee6c:	af02      	add	r7, sp, #8
 800ee6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee74:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800ee76:	2104      	movs	r1, #4
 800ee78:	69b8      	ldr	r0, [r7, #24]
 800ee7a:	f000 f9e1 	bl	800f240 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ee7e:	f107 030c 	add.w	r3, r7, #12
 800ee82:	2203      	movs	r2, #3
 800ee84:	69b9      	ldr	r1, [r7, #24]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 fe66 	bl	800fb58 <dhcp_create_msg>
 800ee8c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d04c      	beq.n	800ef2e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ee9a:	89b8      	ldrh	r0, [r7, #12]
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eea2:	2302      	movs	r3, #2
 800eea4:	2239      	movs	r2, #57	; 0x39
 800eea6:	f000 f9e5 	bl	800f274 <dhcp_option>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800eeae:	89b8      	ldrh	r0, [r7, #12]
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eeba:	461a      	mov	r2, r3
 800eebc:	f000 fa34 	bl	800f328 <dhcp_option_short>
 800eec0:	4603      	mov	r3, r0
 800eec2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800eec4:	89b8      	ldrh	r0, [r7, #12]
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eecc:	2303      	movs	r3, #3
 800eece:	2237      	movs	r2, #55	; 0x37
 800eed0:	f000 f9d0 	bl	800f274 <dhcp_option>
 800eed4:	4603      	mov	r3, r0
 800eed6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eed8:	2300      	movs	r3, #0
 800eeda:	77bb      	strb	r3, [r7, #30]
 800eedc:	e00e      	b.n	800eefc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800eede:	89b8      	ldrh	r0, [r7, #12]
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eee6:	7fbb      	ldrb	r3, [r7, #30]
 800eee8:	4a29      	ldr	r2, [pc, #164]	; (800ef90 <dhcp_rebind+0x128>)
 800eeea:	5cd3      	ldrb	r3, [r2, r3]
 800eeec:	461a      	mov	r2, r3
 800eeee:	f000 f9f5 	bl	800f2dc <dhcp_option_byte>
 800eef2:	4603      	mov	r3, r0
 800eef4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eef6:	7fbb      	ldrb	r3, [r7, #30]
 800eef8:	3301      	adds	r3, #1
 800eefa:	77bb      	strb	r3, [r7, #30]
 800eefc:	7fbb      	ldrb	r3, [r7, #30]
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d9ed      	bls.n	800eede <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ef02:	89b8      	ldrh	r0, [r7, #12]
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	33f0      	adds	r3, #240	; 0xf0
 800ef08:	697a      	ldr	r2, [r7, #20]
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	f000 fefa 	bl	800fd04 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ef10:	4b20      	ldr	r3, [pc, #128]	; (800ef94 <dhcp_rebind+0x12c>)
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	2343      	movs	r3, #67	; 0x43
 800ef1a:	4a1f      	ldr	r2, [pc, #124]	; (800ef98 <dhcp_rebind+0x130>)
 800ef1c:	6979      	ldr	r1, [r7, #20]
 800ef1e:	f7fe fdb7 	bl	800da90 <udp_sendto_if>
 800ef22:	4603      	mov	r3, r0
 800ef24:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ef26:	6978      	ldr	r0, [r7, #20]
 800ef28:	f7f8 feee 	bl	8007d08 <pbuf_free>
 800ef2c:	e001      	b.n	800ef32 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ef2e:	23ff      	movs	r3, #255	; 0xff
 800ef30:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	799b      	ldrb	r3, [r3, #6]
 800ef36:	2bff      	cmp	r3, #255	; 0xff
 800ef38:	d005      	beq.n	800ef46 <dhcp_rebind+0xde>
    dhcp->tries++;
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	799b      	ldrb	r3, [r3, #6]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	799b      	ldrb	r3, [r3, #6]
 800ef4a:	2b09      	cmp	r3, #9
 800ef4c:	d80a      	bhi.n	800ef64 <dhcp_rebind+0xfc>
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	799b      	ldrb	r3, [r3, #6]
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	461a      	mov	r2, r3
 800ef56:	0152      	lsls	r2, r2, #5
 800ef58:	1ad2      	subs	r2, r2, r3
 800ef5a:	0092      	lsls	r2, r2, #2
 800ef5c:	4413      	add	r3, r2
 800ef5e:	00db      	lsls	r3, r3, #3
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	e001      	b.n	800ef68 <dhcp_rebind+0x100>
 800ef64:	f242 7310 	movw	r3, #10000	; 0x2710
 800ef68:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ef6a:	89fb      	ldrh	r3, [r7, #14]
 800ef6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ef70:	4a0a      	ldr	r2, [pc, #40]	; (800ef9c <dhcp_rebind+0x134>)
 800ef72:	fb82 1203 	smull	r1, r2, r2, r3
 800ef76:	1152      	asrs	r2, r2, #5
 800ef78:	17db      	asrs	r3, r3, #31
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ef82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3720      	adds	r7, #32
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	2000002c 	.word	0x2000002c
 800ef94:	2000a838 	.word	0x2000a838
 800ef98:	08016240 	.word	0x08016240
 800ef9c:	10624dd3 	.word	0x10624dd3

0800efa0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800efa0:	b5b0      	push	{r4, r5, r7, lr}
 800efa2:	b08a      	sub	sp, #40	; 0x28
 800efa4:	af02      	add	r7, sp, #8
 800efa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800efae:	2103      	movs	r1, #3
 800efb0:	69b8      	ldr	r0, [r7, #24]
 800efb2:	f000 f945 	bl	800f240 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800efb6:	f107 030c 	add.w	r3, r7, #12
 800efba:	2203      	movs	r2, #3
 800efbc:	69b9      	ldr	r1, [r7, #24]
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 fdca 	bl	800fb58 <dhcp_create_msg>
 800efc4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d066      	beq.n	800f09a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800efd2:	89b8      	ldrh	r0, [r7, #12]
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800efda:	2302      	movs	r3, #2
 800efdc:	2239      	movs	r2, #57	; 0x39
 800efde:	f000 f949 	bl	800f274 <dhcp_option>
 800efe2:	4603      	mov	r3, r0
 800efe4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800efe6:	89b8      	ldrh	r0, [r7, #12]
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	33f0      	adds	r3, #240	; 0xf0
 800efec:	f44f 7210 	mov.w	r2, #576	; 0x240
 800eff0:	4619      	mov	r1, r3
 800eff2:	f000 f999 	bl	800f328 <dhcp_option_short>
 800eff6:	4603      	mov	r3, r0
 800eff8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800effa:	89b8      	ldrh	r0, [r7, #12]
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f002:	2304      	movs	r3, #4
 800f004:	2232      	movs	r2, #50	; 0x32
 800f006:	f000 f935 	bl	800f274 <dhcp_option>
 800f00a:	4603      	mov	r3, r0
 800f00c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f00e:	89bc      	ldrh	r4, [r7, #12]
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	69db      	ldr	r3, [r3, #28]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7f7 fb3f 	bl	800669e <lwip_htonl>
 800f020:	4603      	mov	r3, r0
 800f022:	461a      	mov	r2, r3
 800f024:	4629      	mov	r1, r5
 800f026:	4620      	mov	r0, r4
 800f028:	f000 f9b0 	bl	800f38c <dhcp_option_long>
 800f02c:	4603      	mov	r3, r0
 800f02e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f030:	89b8      	ldrh	r0, [r7, #12]
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f038:	2303      	movs	r3, #3
 800f03a:	2237      	movs	r2, #55	; 0x37
 800f03c:	f000 f91a 	bl	800f274 <dhcp_option>
 800f040:	4603      	mov	r3, r0
 800f042:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f044:	2300      	movs	r3, #0
 800f046:	77bb      	strb	r3, [r7, #30]
 800f048:	e00e      	b.n	800f068 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f04a:	89b8      	ldrh	r0, [r7, #12]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f052:	7fbb      	ldrb	r3, [r7, #30]
 800f054:	4a29      	ldr	r2, [pc, #164]	; (800f0fc <dhcp_reboot+0x15c>)
 800f056:	5cd3      	ldrb	r3, [r2, r3]
 800f058:	461a      	mov	r2, r3
 800f05a:	f000 f93f 	bl	800f2dc <dhcp_option_byte>
 800f05e:	4603      	mov	r3, r0
 800f060:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f062:	7fbb      	ldrb	r3, [r7, #30]
 800f064:	3301      	adds	r3, #1
 800f066:	77bb      	strb	r3, [r7, #30]
 800f068:	7fbb      	ldrb	r3, [r7, #30]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d9ed      	bls.n	800f04a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f06e:	89b8      	ldrh	r0, [r7, #12]
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	33f0      	adds	r3, #240	; 0xf0
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	4619      	mov	r1, r3
 800f078:	f000 fe44 	bl	800fd04 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f07c:	4b20      	ldr	r3, [pc, #128]	; (800f100 <dhcp_reboot+0x160>)
 800f07e:	6818      	ldr	r0, [r3, #0]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	9300      	str	r3, [sp, #0]
 800f084:	2343      	movs	r3, #67	; 0x43
 800f086:	4a1f      	ldr	r2, [pc, #124]	; (800f104 <dhcp_reboot+0x164>)
 800f088:	6979      	ldr	r1, [r7, #20]
 800f08a:	f7fe fd01 	bl	800da90 <udp_sendto_if>
 800f08e:	4603      	mov	r3, r0
 800f090:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f092:	6978      	ldr	r0, [r7, #20]
 800f094:	f7f8 fe38 	bl	8007d08 <pbuf_free>
 800f098:	e001      	b.n	800f09e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f09a:	23ff      	movs	r3, #255	; 0xff
 800f09c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	799b      	ldrb	r3, [r3, #6]
 800f0a2:	2bff      	cmp	r3, #255	; 0xff
 800f0a4:	d005      	beq.n	800f0b2 <dhcp_reboot+0x112>
    dhcp->tries++;
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	799b      	ldrb	r3, [r3, #6]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	799b      	ldrb	r3, [r3, #6]
 800f0b6:	2b09      	cmp	r3, #9
 800f0b8:	d80a      	bhi.n	800f0d0 <dhcp_reboot+0x130>
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	799b      	ldrb	r3, [r3, #6]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	0152      	lsls	r2, r2, #5
 800f0c4:	1ad2      	subs	r2, r2, r3
 800f0c6:	0092      	lsls	r2, r2, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	00db      	lsls	r3, r3, #3
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	e001      	b.n	800f0d4 <dhcp_reboot+0x134>
 800f0d0:	f242 7310 	movw	r3, #10000	; 0x2710
 800f0d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f0d6:	89fb      	ldrh	r3, [r7, #14]
 800f0d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0dc:	4a0a      	ldr	r2, [pc, #40]	; (800f108 <dhcp_reboot+0x168>)
 800f0de:	fb82 1203 	smull	r1, r2, r2, r3
 800f0e2:	1152      	asrs	r2, r2, #5
 800f0e4:	17db      	asrs	r3, r3, #31
 800f0e6:	1ad3      	subs	r3, r2, r3
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	2000002c 	.word	0x2000002c
 800f100:	2000a838 	.word	0x2000a838
 800f104:	08016240 	.word	0x08016240
 800f108:	10624dd3 	.word	0x10624dd3

0800f10c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f10c:	b5b0      	push	{r4, r5, r7, lr}
 800f10e:	b08a      	sub	sp, #40	; 0x28
 800f110:	af02      	add	r7, sp, #8
 800f112:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f118:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 8084 	beq.w	800f22a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	795b      	ldrb	r3, [r3, #5]
 800f126:	2b00      	cmp	r3, #0
 800f128:	f000 8081 	beq.w	800f22e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	699b      	ldr	r3, [r3, #24]
 800f130:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	2200      	movs	r2, #0
 800f136:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	2200      	movs	r2, #0
 800f13c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	2200      	movs	r2, #0
 800f142:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	2200      	movs	r2, #0
 800f148:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	2200      	movs	r2, #0
 800f14e:	631a      	str	r2, [r3, #48]	; 0x30
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	62da      	str	r2, [r3, #44]	; 0x2c
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	2200      	movs	r2, #0
 800f164:	829a      	strh	r2, [r3, #20]
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	8a9a      	ldrh	r2, [r3, #20]
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	825a      	strh	r2, [r3, #18]
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	8a5a      	ldrh	r2, [r3, #18]
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	821a      	strh	r2, [r3, #16]
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	8a1a      	ldrh	r2, [r3, #16]
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 fdee 	bl	800fd60 <dhcp_supplied_address>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d03b      	beq.n	800f202 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f18a:	f107 030e 	add.w	r3, r7, #14
 800f18e:	2207      	movs	r2, #7
 800f190:	69f9      	ldr	r1, [r7, #28]
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 fce0 	bl	800fb58 <dhcp_create_msg>
 800f198:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d030      	beq.n	800f202 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f1a6:	89f8      	ldrh	r0, [r7, #14]
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1ae:	2304      	movs	r3, #4
 800f1b0:	2236      	movs	r2, #54	; 0x36
 800f1b2:	f000 f85f 	bl	800f274 <dhcp_option>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f1ba:	89fc      	ldrh	r4, [r7, #14]
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7f7 fa6a 	bl	800669e <lwip_htonl>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f000 f8db 	bl	800f38c <dhcp_option_long>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f1da:	89f8      	ldrh	r0, [r7, #14]
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	33f0      	adds	r3, #240	; 0xf0
 800f1e0:	69ba      	ldr	r2, [r7, #24]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	f000 fd8e 	bl	800fd04 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f1e8:	4b13      	ldr	r3, [pc, #76]	; (800f238 <dhcp_release_and_stop+0x12c>)
 800f1ea:	6818      	ldr	r0, [r3, #0]
 800f1ec:	f107 0210 	add.w	r2, r7, #16
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	2343      	movs	r3, #67	; 0x43
 800f1f6:	69b9      	ldr	r1, [r7, #24]
 800f1f8:	f7fe fc4a 	bl	800da90 <udp_sendto_if>
      pbuf_free(p_out);
 800f1fc:	69b8      	ldr	r0, [r7, #24]
 800f1fe:	f7f8 fd83 	bl	8007d08 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f202:	4b0e      	ldr	r3, [pc, #56]	; (800f23c <dhcp_release_and_stop+0x130>)
 800f204:	4a0d      	ldr	r2, [pc, #52]	; (800f23c <dhcp_release_and_stop+0x130>)
 800f206:	490d      	ldr	r1, [pc, #52]	; (800f23c <dhcp_release_and_stop+0x130>)
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7f8 f8bd 	bl	8007388 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f20e:	2100      	movs	r1, #0
 800f210:	69f8      	ldr	r0, [r7, #28]
 800f212:	f000 f815 	bl	800f240 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	791b      	ldrb	r3, [r3, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d008      	beq.n	800f230 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f21e:	f7fe ff83 	bl	800e128 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	2200      	movs	r2, #0
 800f226:	711a      	strb	r2, [r3, #4]
 800f228:	e002      	b.n	800f230 <dhcp_release_and_stop+0x124>
    return;
 800f22a:	bf00      	nop
 800f22c:	e000      	b.n	800f230 <dhcp_release_and_stop+0x124>
    return;
 800f22e:	bf00      	nop
  }
}
 800f230:	3720      	adds	r7, #32
 800f232:	46bd      	mov	sp, r7
 800f234:	bdb0      	pop	{r4, r5, r7, pc}
 800f236:	bf00      	nop
 800f238:	2000a838 	.word	0x2000a838
 800f23c:	0801623c 	.word	0x0801623c

0800f240 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	795b      	ldrb	r3, [r3, #5]
 800f250:	78fa      	ldrb	r2, [r7, #3]
 800f252:	429a      	cmp	r2, r3
 800f254:	d008      	beq.n	800f268 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	78fa      	ldrb	r2, [r7, #3]
 800f25a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2200      	movs	r2, #0
 800f266:	811a      	strh	r2, [r3, #8]
  }
}
 800f268:	bf00      	nop
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6039      	str	r1, [r7, #0]
 800f27c:	4611      	mov	r1, r2
 800f27e:	461a      	mov	r2, r3
 800f280:	4603      	mov	r3, r0
 800f282:	80fb      	strh	r3, [r7, #6]
 800f284:	460b      	mov	r3, r1
 800f286:	717b      	strb	r3, [r7, #5]
 800f288:	4613      	mov	r3, r2
 800f28a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f28c:	88fa      	ldrh	r2, [r7, #6]
 800f28e:	793b      	ldrb	r3, [r7, #4]
 800f290:	4413      	add	r3, r2
 800f292:	3302      	adds	r3, #2
 800f294:	2b44      	cmp	r3, #68	; 0x44
 800f296:	d906      	bls.n	800f2a6 <dhcp_option+0x32>
 800f298:	4b0d      	ldr	r3, [pc, #52]	; (800f2d0 <dhcp_option+0x5c>)
 800f29a:	f240 529a 	movw	r2, #1434	; 0x59a
 800f29e:	490d      	ldr	r1, [pc, #52]	; (800f2d4 <dhcp_option+0x60>)
 800f2a0:	480d      	ldr	r0, [pc, #52]	; (800f2d8 <dhcp_option+0x64>)
 800f2a2:	f003 f96b 	bl	801257c <iprintf>
  options[options_out_len++] = option_type;
 800f2a6:	88fb      	ldrh	r3, [r7, #6]
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	80fa      	strh	r2, [r7, #6]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	797a      	ldrb	r2, [r7, #5]
 800f2b4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f2b6:	88fb      	ldrh	r3, [r7, #6]
 800f2b8:	1c5a      	adds	r2, r3, #1
 800f2ba:	80fa      	strh	r2, [r7, #6]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	793a      	ldrb	r2, [r7, #4]
 800f2c4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f2c6:	88fb      	ldrh	r3, [r7, #6]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	080156d4 	.word	0x080156d4
 800f2d4:	08015868 	.word	0x08015868
 800f2d8:	08015734 	.word	0x08015734

0800f2dc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	6039      	str	r1, [r7, #0]
 800f2e6:	80fb      	strh	r3, [r7, #6]
 800f2e8:	4613      	mov	r3, r2
 800f2ea:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f2ec:	88fb      	ldrh	r3, [r7, #6]
 800f2ee:	2b43      	cmp	r3, #67	; 0x43
 800f2f0:	d906      	bls.n	800f300 <dhcp_option_byte+0x24>
 800f2f2:	4b0a      	ldr	r3, [pc, #40]	; (800f31c <dhcp_option_byte+0x40>)
 800f2f4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f2f8:	4909      	ldr	r1, [pc, #36]	; (800f320 <dhcp_option_byte+0x44>)
 800f2fa:	480a      	ldr	r0, [pc, #40]	; (800f324 <dhcp_option_byte+0x48>)
 800f2fc:	f003 f93e 	bl	801257c <iprintf>
  options[options_out_len++] = value;
 800f300:	88fb      	ldrh	r3, [r7, #6]
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	80fa      	strh	r2, [r7, #6]
 800f306:	461a      	mov	r2, r3
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	4413      	add	r3, r2
 800f30c:	797a      	ldrb	r2, [r7, #5]
 800f30e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f310:	88fb      	ldrh	r3, [r7, #6]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	080156d4 	.word	0x080156d4
 800f320:	080158ac 	.word	0x080158ac
 800f324:	08015734 	.word	0x08015734

0800f328 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4603      	mov	r3, r0
 800f330:	6039      	str	r1, [r7, #0]
 800f332:	80fb      	strh	r3, [r7, #6]
 800f334:	4613      	mov	r3, r2
 800f336:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f338:	88fb      	ldrh	r3, [r7, #6]
 800f33a:	3302      	adds	r3, #2
 800f33c:	2b44      	cmp	r3, #68	; 0x44
 800f33e:	d906      	bls.n	800f34e <dhcp_option_short+0x26>
 800f340:	4b0f      	ldr	r3, [pc, #60]	; (800f380 <dhcp_option_short+0x58>)
 800f342:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f346:	490f      	ldr	r1, [pc, #60]	; (800f384 <dhcp_option_short+0x5c>)
 800f348:	480f      	ldr	r0, [pc, #60]	; (800f388 <dhcp_option_short+0x60>)
 800f34a:	f003 f917 	bl	801257c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f34e:	88bb      	ldrh	r3, [r7, #4]
 800f350:	0a1b      	lsrs	r3, r3, #8
 800f352:	b29a      	uxth	r2, r3
 800f354:	88fb      	ldrh	r3, [r7, #6]
 800f356:	1c59      	adds	r1, r3, #1
 800f358:	80f9      	strh	r1, [r7, #6]
 800f35a:	4619      	mov	r1, r3
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	440b      	add	r3, r1
 800f360:	b2d2      	uxtb	r2, r2
 800f362:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f364:	88fb      	ldrh	r3, [r7, #6]
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	80fa      	strh	r2, [r7, #6]
 800f36a:	461a      	mov	r2, r3
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	4413      	add	r3, r2
 800f370:	88ba      	ldrh	r2, [r7, #4]
 800f372:	b2d2      	uxtb	r2, r2
 800f374:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f376:	88fb      	ldrh	r3, [r7, #6]
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	080156d4 	.word	0x080156d4
 800f384:	080158e4 	.word	0x080158e4
 800f388:	08015734 	.word	0x08015734

0800f38c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	4603      	mov	r3, r0
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f39a:	89fb      	ldrh	r3, [r7, #14]
 800f39c:	3304      	adds	r3, #4
 800f39e:	2b44      	cmp	r3, #68	; 0x44
 800f3a0:	d906      	bls.n	800f3b0 <dhcp_option_long+0x24>
 800f3a2:	4b19      	ldr	r3, [pc, #100]	; (800f408 <dhcp_option_long+0x7c>)
 800f3a4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800f3a8:	4918      	ldr	r1, [pc, #96]	; (800f40c <dhcp_option_long+0x80>)
 800f3aa:	4819      	ldr	r0, [pc, #100]	; (800f410 <dhcp_option_long+0x84>)
 800f3ac:	f003 f8e6 	bl	801257c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	0e1a      	lsrs	r2, r3, #24
 800f3b4:	89fb      	ldrh	r3, [r7, #14]
 800f3b6:	1c59      	adds	r1, r3, #1
 800f3b8:	81f9      	strh	r1, [r7, #14]
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	440b      	add	r3, r1
 800f3c0:	b2d2      	uxtb	r2, r2
 800f3c2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	0c1a      	lsrs	r2, r3, #16
 800f3c8:	89fb      	ldrh	r3, [r7, #14]
 800f3ca:	1c59      	adds	r1, r3, #1
 800f3cc:	81f9      	strh	r1, [r7, #14]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	440b      	add	r3, r1
 800f3d4:	b2d2      	uxtb	r2, r2
 800f3d6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	0a1a      	lsrs	r2, r3, #8
 800f3dc:	89fb      	ldrh	r3, [r7, #14]
 800f3de:	1c59      	adds	r1, r3, #1
 800f3e0:	81f9      	strh	r1, [r7, #14]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	440b      	add	r3, r1
 800f3e8:	b2d2      	uxtb	r2, r2
 800f3ea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f3ec:	89fb      	ldrh	r3, [r7, #14]
 800f3ee:	1c5a      	adds	r2, r3, #1
 800f3f0:	81fa      	strh	r2, [r7, #14]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	b2d2      	uxtb	r2, r2
 800f3fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f3fe:	89fb      	ldrh	r3, [r7, #14]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	080156d4 	.word	0x080156d4
 800f40c:	08015920 	.word	0x08015920
 800f410:	08015734 	.word	0x08015734

0800f414 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b090      	sub	sp, #64	; 0x40
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f426:	2208      	movs	r2, #8
 800f428:	2100      	movs	r1, #0
 800f42a:	48b5      	ldr	r0, [pc, #724]	; (800f700 <dhcp_parse_reply+0x2ec>)
 800f42c:	f003 f90b 	bl	8012646 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	895b      	ldrh	r3, [r3, #10]
 800f434:	2b2b      	cmp	r3, #43	; 0x2b
 800f436:	d802      	bhi.n	800f43e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f438:	f06f 0301 	mvn.w	r3, #1
 800f43c:	e2a7      	b.n	800f98e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f444:	23f0      	movs	r3, #240	; 0xf0
 800f446:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	891b      	ldrh	r3, [r3, #8]
 800f44c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f452:	e00c      	b.n	800f46e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	895b      	ldrh	r3, [r3, #10]
 800f458:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f460:	895b      	ldrh	r3, [r3, #10]
 800f462:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800f468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	2b00      	cmp	r3, #0
 800f472:	d004      	beq.n	800f47e <dhcp_parse_reply+0x6a>
 800f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f476:	895b      	ldrh	r3, [r3, #10]
 800f478:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d2ea      	bcs.n	800f454 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800f47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f480:	2b00      	cmp	r3, #0
 800f482:	d102      	bne.n	800f48a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800f484:	f06f 0301 	mvn.w	r3, #1
 800f488:	e281      	b.n	800f98e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800f48a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f48c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800f48e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f490:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800f492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f498:	e239      	b.n	800f90e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800f49a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f49c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f49e:	4413      	add	r3, r2
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800f4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4ae:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800f4b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4b2:	3302      	adds	r3, #2
 800f4b4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800f4b6:	8bfa      	ldrh	r2, [r7, #30]
 800f4b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d202      	bcs.n	800f4c4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800f4be:	f06f 0301 	mvn.w	r3, #1
 800f4c2:	e264      	b.n	800f98e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f4c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ca:	8952      	ldrh	r2, [r2, #10]
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	da07      	bge.n	800f4e0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800f4d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f4d6:	4413      	add	r3, r2
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f4de:	e00b      	b.n	800f4f8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d004      	beq.n	800f4f2 <dhcp_parse_reply+0xde>
 800f4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	e000      	b.n	800f4f4 <dhcp_parse_reply+0xe0>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800f500:	7dfb      	ldrb	r3, [r7, #23]
 800f502:	2b3b      	cmp	r3, #59	; 0x3b
 800f504:	f200 812c 	bhi.w	800f760 <dhcp_parse_reply+0x34c>
 800f508:	a201      	add	r2, pc, #4	; (adr r2, 800f510 <dhcp_parse_reply+0xfc>)
 800f50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f50e:	bf00      	nop
 800f510:	0800f601 	.word	0x0800f601
 800f514:	0800f611 	.word	0x0800f611
 800f518:	0800f761 	.word	0x0800f761
 800f51c:	0800f633 	.word	0x0800f633
 800f520:	0800f761 	.word	0x0800f761
 800f524:	0800f761 	.word	0x0800f761
 800f528:	0800f761 	.word	0x0800f761
 800f52c:	0800f761 	.word	0x0800f761
 800f530:	0800f761 	.word	0x0800f761
 800f534:	0800f761 	.word	0x0800f761
 800f538:	0800f761 	.word	0x0800f761
 800f53c:	0800f761 	.word	0x0800f761
 800f540:	0800f761 	.word	0x0800f761
 800f544:	0800f761 	.word	0x0800f761
 800f548:	0800f761 	.word	0x0800f761
 800f54c:	0800f761 	.word	0x0800f761
 800f550:	0800f761 	.word	0x0800f761
 800f554:	0800f761 	.word	0x0800f761
 800f558:	0800f761 	.word	0x0800f761
 800f55c:	0800f761 	.word	0x0800f761
 800f560:	0800f761 	.word	0x0800f761
 800f564:	0800f761 	.word	0x0800f761
 800f568:	0800f761 	.word	0x0800f761
 800f56c:	0800f761 	.word	0x0800f761
 800f570:	0800f761 	.word	0x0800f761
 800f574:	0800f761 	.word	0x0800f761
 800f578:	0800f761 	.word	0x0800f761
 800f57c:	0800f761 	.word	0x0800f761
 800f580:	0800f761 	.word	0x0800f761
 800f584:	0800f761 	.word	0x0800f761
 800f588:	0800f761 	.word	0x0800f761
 800f58c:	0800f761 	.word	0x0800f761
 800f590:	0800f761 	.word	0x0800f761
 800f594:	0800f761 	.word	0x0800f761
 800f598:	0800f761 	.word	0x0800f761
 800f59c:	0800f761 	.word	0x0800f761
 800f5a0:	0800f761 	.word	0x0800f761
 800f5a4:	0800f761 	.word	0x0800f761
 800f5a8:	0800f761 	.word	0x0800f761
 800f5ac:	0800f761 	.word	0x0800f761
 800f5b0:	0800f761 	.word	0x0800f761
 800f5b4:	0800f761 	.word	0x0800f761
 800f5b8:	0800f761 	.word	0x0800f761
 800f5bc:	0800f761 	.word	0x0800f761
 800f5c0:	0800f761 	.word	0x0800f761
 800f5c4:	0800f761 	.word	0x0800f761
 800f5c8:	0800f761 	.word	0x0800f761
 800f5cc:	0800f761 	.word	0x0800f761
 800f5d0:	0800f761 	.word	0x0800f761
 800f5d4:	0800f761 	.word	0x0800f761
 800f5d8:	0800f761 	.word	0x0800f761
 800f5dc:	0800f65f 	.word	0x0800f65f
 800f5e0:	0800f681 	.word	0x0800f681
 800f5e4:	0800f6bd 	.word	0x0800f6bd
 800f5e8:	0800f6df 	.word	0x0800f6df
 800f5ec:	0800f761 	.word	0x0800f761
 800f5f0:	0800f761 	.word	0x0800f761
 800f5f4:	0800f761 	.word	0x0800f761
 800f5f8:	0800f71d 	.word	0x0800f71d
 800f5fc:	0800f73f 	.word	0x0800f73f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f60a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800f60e:	e0ab      	b.n	800f768 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f614:	2b04      	cmp	r3, #4
 800f616:	d009      	beq.n	800f62c <dhcp_parse_reply+0x218>
 800f618:	4b3a      	ldr	r3, [pc, #232]	; (800f704 <dhcp_parse_reply+0x2f0>)
 800f61a:	f240 622e 	movw	r2, #1582	; 0x62e
 800f61e:	493a      	ldr	r1, [pc, #232]	; (800f708 <dhcp_parse_reply+0x2f4>)
 800f620:	483a      	ldr	r0, [pc, #232]	; (800f70c <dhcp_parse_reply+0x2f8>)
 800f622:	f002 ffab 	bl	801257c <iprintf>
 800f626:	f06f 0305 	mvn.w	r3, #5
 800f62a:	e1b0      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f62c:	2306      	movs	r3, #6
 800f62e:	623b      	str	r3, [r7, #32]
        break;
 800f630:	e09a      	b.n	800f768 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f632:	2304      	movs	r3, #4
 800f634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f638:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f63c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f640:	429a      	cmp	r2, r3
 800f642:	d209      	bcs.n	800f658 <dhcp_parse_reply+0x244>
 800f644:	4b2f      	ldr	r3, [pc, #188]	; (800f704 <dhcp_parse_reply+0x2f0>)
 800f646:	f240 6233 	movw	r2, #1587	; 0x633
 800f64a:	4931      	ldr	r1, [pc, #196]	; (800f710 <dhcp_parse_reply+0x2fc>)
 800f64c:	482f      	ldr	r0, [pc, #188]	; (800f70c <dhcp_parse_reply+0x2f8>)
 800f64e:	f002 ff95 	bl	801257c <iprintf>
 800f652:	f06f 0305 	mvn.w	r3, #5
 800f656:	e19a      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f658:	2307      	movs	r3, #7
 800f65a:	623b      	str	r3, [r7, #32]
        break;
 800f65c:	e084      	b.n	800f768 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f65e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f662:	2b04      	cmp	r3, #4
 800f664:	d009      	beq.n	800f67a <dhcp_parse_reply+0x266>
 800f666:	4b27      	ldr	r3, [pc, #156]	; (800f704 <dhcp_parse_reply+0x2f0>)
 800f668:	f240 6241 	movw	r2, #1601	; 0x641
 800f66c:	4926      	ldr	r1, [pc, #152]	; (800f708 <dhcp_parse_reply+0x2f4>)
 800f66e:	4827      	ldr	r0, [pc, #156]	; (800f70c <dhcp_parse_reply+0x2f8>)
 800f670:	f002 ff84 	bl	801257c <iprintf>
 800f674:	f06f 0305 	mvn.w	r3, #5
 800f678:	e189      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f67a:	2303      	movs	r3, #3
 800f67c:	623b      	str	r3, [r7, #32]
        break;
 800f67e:	e073      	b.n	800f768 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f684:	2b01      	cmp	r3, #1
 800f686:	d009      	beq.n	800f69c <dhcp_parse_reply+0x288>
 800f688:	4b1e      	ldr	r3, [pc, #120]	; (800f704 <dhcp_parse_reply+0x2f0>)
 800f68a:	f240 624f 	movw	r2, #1615	; 0x64f
 800f68e:	4921      	ldr	r1, [pc, #132]	; (800f714 <dhcp_parse_reply+0x300>)
 800f690:	481e      	ldr	r0, [pc, #120]	; (800f70c <dhcp_parse_reply+0x2f8>)
 800f692:	f002 ff73 	bl	801257c <iprintf>
 800f696:	f06f 0305 	mvn.w	r3, #5
 800f69a:	e178      	b.n	800f98e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f69c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f69e:	2bf0      	cmp	r3, #240	; 0xf0
 800f6a0:	d009      	beq.n	800f6b6 <dhcp_parse_reply+0x2a2>
 800f6a2:	4b18      	ldr	r3, [pc, #96]	; (800f704 <dhcp_parse_reply+0x2f0>)
 800f6a4:	f240 6251 	movw	r2, #1617	; 0x651
 800f6a8:	491b      	ldr	r1, [pc, #108]	; (800f718 <dhcp_parse_reply+0x304>)
 800f6aa:	4818      	ldr	r0, [pc, #96]	; (800f70c <dhcp_parse_reply+0x2f8>)
 800f6ac:	f002 ff66 	bl	801257c <iprintf>
 800f6b0:	f06f 0305 	mvn.w	r3, #5
 800f6b4:	e16b      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	623b      	str	r3, [r7, #32]
        break;
 800f6ba:	e055      	b.n	800f768 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d009      	beq.n	800f6d8 <dhcp_parse_reply+0x2c4>
 800f6c4:	4b0f      	ldr	r3, [pc, #60]	; (800f704 <dhcp_parse_reply+0x2f0>)
 800f6c6:	f240 6255 	movw	r2, #1621	; 0x655
 800f6ca:	4912      	ldr	r1, [pc, #72]	; (800f714 <dhcp_parse_reply+0x300>)
 800f6cc:	480f      	ldr	r0, [pc, #60]	; (800f70c <dhcp_parse_reply+0x2f8>)
 800f6ce:	f002 ff55 	bl	801257c <iprintf>
 800f6d2:	f06f 0305 	mvn.w	r3, #5
 800f6d6:	e15a      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	623b      	str	r3, [r7, #32]
        break;
 800f6dc:	e044      	b.n	800f768 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f6de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6e2:	2b04      	cmp	r3, #4
 800f6e4:	d009      	beq.n	800f6fa <dhcp_parse_reply+0x2e6>
 800f6e6:	4b07      	ldr	r3, [pc, #28]	; (800f704 <dhcp_parse_reply+0x2f0>)
 800f6e8:	f240 6259 	movw	r2, #1625	; 0x659
 800f6ec:	4906      	ldr	r1, [pc, #24]	; (800f708 <dhcp_parse_reply+0x2f4>)
 800f6ee:	4807      	ldr	r0, [pc, #28]	; (800f70c <dhcp_parse_reply+0x2f8>)
 800f6f0:	f002 ff44 	bl	801257c <iprintf>
 800f6f4:	f06f 0305 	mvn.w	r3, #5
 800f6f8:	e149      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f6fa:	2302      	movs	r3, #2
 800f6fc:	623b      	str	r3, [r7, #32]
        break;
 800f6fe:	e033      	b.n	800f768 <dhcp_parse_reply+0x354>
 800f700:	2000a830 	.word	0x2000a830
 800f704:	080156d4 	.word	0x080156d4
 800f708:	0801595c 	.word	0x0801595c
 800f70c:	08015734 	.word	0x08015734
 800f710:	08015968 	.word	0x08015968
 800f714:	0801597c 	.word	0x0801597c
 800f718:	08015988 	.word	0x08015988
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f720:	2b04      	cmp	r3, #4
 800f722:	d009      	beq.n	800f738 <dhcp_parse_reply+0x324>
 800f724:	4b9c      	ldr	r3, [pc, #624]	; (800f998 <dhcp_parse_reply+0x584>)
 800f726:	f240 625d 	movw	r2, #1629	; 0x65d
 800f72a:	499c      	ldr	r1, [pc, #624]	; (800f99c <dhcp_parse_reply+0x588>)
 800f72c:	489c      	ldr	r0, [pc, #624]	; (800f9a0 <dhcp_parse_reply+0x58c>)
 800f72e:	f002 ff25 	bl	801257c <iprintf>
 800f732:	f06f 0305 	mvn.w	r3, #5
 800f736:	e12a      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f738:	2304      	movs	r3, #4
 800f73a:	623b      	str	r3, [r7, #32]
        break;
 800f73c:	e014      	b.n	800f768 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f742:	2b04      	cmp	r3, #4
 800f744:	d009      	beq.n	800f75a <dhcp_parse_reply+0x346>
 800f746:	4b94      	ldr	r3, [pc, #592]	; (800f998 <dhcp_parse_reply+0x584>)
 800f748:	f240 6261 	movw	r2, #1633	; 0x661
 800f74c:	4993      	ldr	r1, [pc, #588]	; (800f99c <dhcp_parse_reply+0x588>)
 800f74e:	4894      	ldr	r0, [pc, #592]	; (800f9a0 <dhcp_parse_reply+0x58c>)
 800f750:	f002 ff14 	bl	801257c <iprintf>
 800f754:	f06f 0305 	mvn.w	r3, #5
 800f758:	e119      	b.n	800f98e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f75a:	2305      	movs	r3, #5
 800f75c:	623b      	str	r3, [r7, #32]
        break;
 800f75e:	e003      	b.n	800f768 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800f760:	2300      	movs	r3, #0
 800f762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800f766:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800f768:	7dfb      	ldrb	r3, [r7, #23]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d103      	bne.n	800f776 <dhcp_parse_reply+0x362>
      offset++;
 800f76e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f770:	3301      	adds	r3, #1
 800f772:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f774:	e0a1      	b.n	800f8ba <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800f776:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f77c:	4413      	add	r3, r2
 800f77e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800f782:	4293      	cmp	r3, r2
 800f784:	dd02      	ble.n	800f78c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800f786:	f06f 0301 	mvn.w	r3, #1
 800f78a:	e100      	b.n	800f98e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800f78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f790:	b29a      	uxth	r2, r3
 800f792:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f794:	4413      	add	r3, r2
 800f796:	b29b      	uxth	r3, r3
 800f798:	3302      	adds	r3, #2
 800f79a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800f79c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 808a 	beq.w	800f8ba <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f7aa:	6a3b      	ldr	r3, [r7, #32]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	db02      	blt.n	800f7b6 <dhcp_parse_reply+0x3a2>
 800f7b0:	6a3b      	ldr	r3, [r7, #32]
 800f7b2:	2b07      	cmp	r3, #7
 800f7b4:	dd06      	ble.n	800f7c4 <dhcp_parse_reply+0x3b0>
 800f7b6:	4b78      	ldr	r3, [pc, #480]	; (800f998 <dhcp_parse_reply+0x584>)
 800f7b8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f7bc:	4979      	ldr	r1, [pc, #484]	; (800f9a4 <dhcp_parse_reply+0x590>)
 800f7be:	4878      	ldr	r0, [pc, #480]	; (800f9a0 <dhcp_parse_reply+0x58c>)
 800f7c0:	f002 fedc 	bl	801257c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800f7c4:	4a78      	ldr	r2, [pc, #480]	; (800f9a8 <dhcp_parse_reply+0x594>)
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d174      	bne.n	800f8ba <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800f7d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7d4:	2b04      	cmp	r3, #4
 800f7d6:	bf28      	it	cs
 800f7d8:	2304      	movcs	r3, #4
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f7de:	8bfb      	ldrh	r3, [r7, #30]
 800f7e0:	8aba      	ldrh	r2, [r7, #20]
 800f7e2:	f107 0108 	add.w	r1, r7, #8
 800f7e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7e8:	f7f8 fc88 	bl	80080fc <pbuf_copy_partial>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	8abb      	ldrh	r3, [r7, #20]
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d002      	beq.n	800f7fc <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800f7f6:	f06f 0301 	mvn.w	r3, #1
 800f7fa:	e0c8      	b.n	800f98e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800f7fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f800:	2b04      	cmp	r3, #4
 800f802:	d933      	bls.n	800f86c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f808:	f003 0303 	and.w	r3, r3, #3
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d009      	beq.n	800f826 <dhcp_parse_reply+0x412>
 800f812:	4b61      	ldr	r3, [pc, #388]	; (800f998 <dhcp_parse_reply+0x584>)
 800f814:	f240 6281 	movw	r2, #1665	; 0x681
 800f818:	4964      	ldr	r1, [pc, #400]	; (800f9ac <dhcp_parse_reply+0x598>)
 800f81a:	4861      	ldr	r0, [pc, #388]	; (800f9a0 <dhcp_parse_reply+0x58c>)
 800f81c:	f002 feae 	bl	801257c <iprintf>
 800f820:	f06f 0305 	mvn.w	r3, #5
 800f824:	e0b3      	b.n	800f98e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800f826:	4a60      	ldr	r2, [pc, #384]	; (800f9a8 <dhcp_parse_reply+0x594>)
 800f828:	6a3b      	ldr	r3, [r7, #32]
 800f82a:	4413      	add	r3, r2
 800f82c:	2201      	movs	r2, #1
 800f82e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	4618      	mov	r0, r3
 800f834:	f7f6 ff33 	bl	800669e <lwip_htonl>
 800f838:	4602      	mov	r2, r0
 800f83a:	495d      	ldr	r1, [pc, #372]	; (800f9b0 <dhcp_parse_reply+0x59c>)
 800f83c:	6a3b      	ldr	r3, [r7, #32]
 800f83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800f842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f846:	3b04      	subs	r3, #4
 800f848:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800f84c:	8bfb      	ldrh	r3, [r7, #30]
 800f84e:	3304      	adds	r3, #4
 800f850:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800f852:	8a7a      	ldrh	r2, [r7, #18]
 800f854:	8bfb      	ldrh	r3, [r7, #30]
 800f856:	429a      	cmp	r2, r3
 800f858:	d202      	bcs.n	800f860 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800f85a:	f06f 0301 	mvn.w	r3, #1
 800f85e:	e096      	b.n	800f98e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800f860:	8a7b      	ldrh	r3, [r7, #18]
 800f862:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800f864:	6a3b      	ldr	r3, [r7, #32]
 800f866:	3301      	adds	r3, #1
 800f868:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800f86a:	e79e      	b.n	800f7aa <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800f86c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f870:	2b04      	cmp	r3, #4
 800f872:	d106      	bne.n	800f882 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	4618      	mov	r0, r3
 800f878:	f7f6 ff11 	bl	800669e <lwip_htonl>
 800f87c:	4603      	mov	r3, r0
 800f87e:	60bb      	str	r3, [r7, #8]
 800f880:	e011      	b.n	800f8a6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800f882:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f886:	2b01      	cmp	r3, #1
 800f888:	d009      	beq.n	800f89e <dhcp_parse_reply+0x48a>
 800f88a:	4b43      	ldr	r3, [pc, #268]	; (800f998 <dhcp_parse_reply+0x584>)
 800f88c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800f890:	4948      	ldr	r1, [pc, #288]	; (800f9b4 <dhcp_parse_reply+0x5a0>)
 800f892:	4843      	ldr	r0, [pc, #268]	; (800f9a0 <dhcp_parse_reply+0x58c>)
 800f894:	f002 fe72 	bl	801257c <iprintf>
 800f898:	f06f 0305 	mvn.w	r3, #5
 800f89c:	e077      	b.n	800f98e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800f89e:	f107 0308 	add.w	r3, r7, #8
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800f8a6:	4a40      	ldr	r2, [pc, #256]	; (800f9a8 <dhcp_parse_reply+0x594>)
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	493f      	ldr	r1, [pc, #252]	; (800f9b0 <dhcp_parse_reply+0x59c>)
 800f8b4:	6a3b      	ldr	r3, [r7, #32]
 800f8b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	895b      	ldrh	r3, [r3, #10]
 800f8be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d324      	bcc.n	800f90e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	895b      	ldrh	r3, [r3, #10]
 800f8c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	895b      	ldrh	r3, [r3, #10]
 800f8d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f8d4:	1ad3      	subs	r3, r2, r3
 800f8d6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800f8d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f8da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d213      	bcs.n	800f908 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d109      	bne.n	800f900 <dhcp_parse_reply+0x4ec>
 800f8ec:	4b2a      	ldr	r3, [pc, #168]	; (800f998 <dhcp_parse_reply+0x584>)
 800f8ee:	f240 629d 	movw	r2, #1693	; 0x69d
 800f8f2:	4931      	ldr	r1, [pc, #196]	; (800f9b8 <dhcp_parse_reply+0x5a4>)
 800f8f4:	482a      	ldr	r0, [pc, #168]	; (800f9a0 <dhcp_parse_reply+0x58c>)
 800f8f6:	f002 fe41 	bl	801257c <iprintf>
 800f8fa:	f06f 0305 	mvn.w	r3, #5
 800f8fe:	e046      	b.n	800f98e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800f900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f906:	e002      	b.n	800f90e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800f908:	f06f 0301 	mvn.w	r3, #1
 800f90c:	e03f      	b.n	800f98e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f910:	2b00      	cmp	r3, #0
 800f912:	d00a      	beq.n	800f92a <dhcp_parse_reply+0x516>
 800f914:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f916:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f918:	429a      	cmp	r2, r3
 800f91a:	d206      	bcs.n	800f92a <dhcp_parse_reply+0x516>
 800f91c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f91e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f920:	4413      	add	r3, r2
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2bff      	cmp	r3, #255	; 0xff
 800f926:	f47f adb8 	bne.w	800f49a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800f92a:	4b1f      	ldr	r3, [pc, #124]	; (800f9a8 <dhcp_parse_reply+0x594>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d018      	beq.n	800f964 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f932:	4b1f      	ldr	r3, [pc, #124]	; (800f9b0 <dhcp_parse_reply+0x59c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f938:	4b1b      	ldr	r3, [pc, #108]	; (800f9a8 <dhcp_parse_reply+0x594>)
 800f93a:	2200      	movs	r2, #0
 800f93c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d102      	bne.n	800f94a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800f944:	2301      	movs	r3, #1
 800f946:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f948:	e00c      	b.n	800f964 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2b02      	cmp	r3, #2
 800f94e:	d102      	bne.n	800f956 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800f950:	2301      	movs	r3, #1
 800f952:	62bb      	str	r3, [r7, #40]	; 0x28
 800f954:	e006      	b.n	800f964 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2b03      	cmp	r3, #3
 800f95a:	d103      	bne.n	800f964 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800f95c:	2301      	movs	r3, #1
 800f95e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800f960:	2301      	movs	r3, #1
 800f962:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	2b00      	cmp	r3, #0
 800f968:	d006      	beq.n	800f978 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800f96a:	2300      	movs	r3, #0
 800f96c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800f96e:	236c      	movs	r3, #108	; 0x6c
 800f970:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800f972:	23ec      	movs	r3, #236	; 0xec
 800f974:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800f976:	e56a      	b.n	800f44e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d006      	beq.n	800f98c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800f97e:	2300      	movs	r3, #0
 800f980:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800f982:	232c      	movs	r3, #44	; 0x2c
 800f984:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800f986:	236c      	movs	r3, #108	; 0x6c
 800f988:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800f98a:	e560      	b.n	800f44e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3740      	adds	r7, #64	; 0x40
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	080156d4 	.word	0x080156d4
 800f99c:	0801595c 	.word	0x0801595c
 800f9a0:	08015734 	.word	0x08015734
 800f9a4:	080159a0 	.word	0x080159a0
 800f9a8:	2000a830 	.word	0x2000a830
 800f9ac:	080159b4 	.word	0x080159b4
 800f9b0:	2000a810 	.word	0x2000a810
 800f9b4:	080159cc 	.word	0x080159cc
 800f9b8:	080159e0 	.word	0x080159e0

0800f9bc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08a      	sub	sp, #40	; 0x28
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
 800f9c8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800f9ca:	4b60      	ldr	r3, [pc, #384]	; (800fb4c <dhcp_recv+0x190>)
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f000 809d 	beq.w	800fb1e <dhcp_recv+0x162>
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	791b      	ldrb	r3, [r3, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 8098 	beq.w	800fb1e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	895b      	ldrh	r3, [r3, #10]
 800f9f2:	2b2b      	cmp	r3, #43	; 0x2b
 800f9f4:	f240 8095 	bls.w	800fb22 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	f040 8092 	bne.w	800fb26 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fa02:	2300      	movs	r3, #0
 800fa04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa08:	e012      	b.n	800fa30 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800fa0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa0e:	6a3a      	ldr	r2, [r7, #32]
 800fa10:	4413      	add	r3, r2
 800fa12:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fa16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa1a:	69b9      	ldr	r1, [r7, #24]
 800fa1c:	440b      	add	r3, r1
 800fa1e:	7f1b      	ldrb	r3, [r3, #28]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	f040 8082 	bne.w	800fb2a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fa26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d203      	bcs.n	800fa46 <dhcp_recv+0x8a>
 800fa3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa42:	2b05      	cmp	r3, #5
 800fa44:	d9e1      	bls.n	800fa0a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7f6 fe27 	bl	800669e <lwip_htonl>
 800fa50:	4602      	mov	r2, r0
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d169      	bne.n	800fb2e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800fa5a:	69f9      	ldr	r1, [r7, #28]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7ff fcd9 	bl	800f414 <dhcp_parse_reply>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d164      	bne.n	800fb32 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800fa68:	4b39      	ldr	r3, [pc, #228]	; (800fb50 <dhcp_recv+0x194>)
 800fa6a:	785b      	ldrb	r3, [r3, #1]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d062      	beq.n	800fb36 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800fa76:	4b37      	ldr	r3, [pc, #220]	; (800fb54 <dhcp_recv+0x198>)
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800fa7c:	7cfb      	ldrb	r3, [r7, #19]
 800fa7e:	2b05      	cmp	r3, #5
 800fa80:	d12a      	bne.n	800fad8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	795b      	ldrb	r3, [r3, #5]
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d112      	bne.n	800fab0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800fa8a:	6979      	ldr	r1, [r7, #20]
 800fa8c:	6a38      	ldr	r0, [r7, #32]
 800fa8e:	f7fe fe17 	bl	800e6c0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa98:	f003 0308 	and.w	r3, r3, #8
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d003      	beq.n	800faa8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800faa0:	6a38      	ldr	r0, [r7, #32]
 800faa2:	f7fe fb85 	bl	800e1b0 <dhcp_check>
 800faa6:	e049      	b.n	800fb3c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800faa8:	6a38      	ldr	r0, [r7, #32]
 800faaa:	f7ff f867 	bl	800eb7c <dhcp_bind>
 800faae:	e045      	b.n	800fb3c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	795b      	ldrb	r3, [r3, #5]
 800fab4:	2b03      	cmp	r3, #3
 800fab6:	d007      	beq.n	800fac8 <dhcp_recv+0x10c>
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	795b      	ldrb	r3, [r3, #5]
 800fabc:	2b04      	cmp	r3, #4
 800fabe:	d003      	beq.n	800fac8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fac4:	2b05      	cmp	r3, #5
 800fac6:	d139      	bne.n	800fb3c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800fac8:	6979      	ldr	r1, [r7, #20]
 800faca:	6a38      	ldr	r0, [r7, #32]
 800facc:	f7fe fdf8 	bl	800e6c0 <dhcp_handle_ack>
      dhcp_bind(netif);
 800fad0:	6a38      	ldr	r0, [r7, #32]
 800fad2:	f7ff f853 	bl	800eb7c <dhcp_bind>
 800fad6:	e031      	b.n	800fb3c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800fad8:	7cfb      	ldrb	r3, [r7, #19]
 800fada:	2b06      	cmp	r3, #6
 800fadc:	d113      	bne.n	800fb06 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800fae2:	2b03      	cmp	r3, #3
 800fae4:	d00b      	beq.n	800fafe <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	795b      	ldrb	r3, [r3, #5]
 800faea:	2b01      	cmp	r3, #1
 800faec:	d007      	beq.n	800fafe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800faf2:	2b04      	cmp	r3, #4
 800faf4:	d003      	beq.n	800fafe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	795b      	ldrb	r3, [r3, #5]
 800fafa:	2b05      	cmp	r3, #5
 800fafc:	d103      	bne.n	800fb06 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800fafe:	6a38      	ldr	r0, [r7, #32]
 800fb00:	f7fe fb3c 	bl	800e17c <dhcp_handle_nak>
 800fb04:	e01a      	b.n	800fb3c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800fb06:	7cfb      	ldrb	r3, [r7, #19]
 800fb08:	2b02      	cmp	r3, #2
 800fb0a:	d116      	bne.n	800fb3a <dhcp_recv+0x17e>
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	795b      	ldrb	r3, [r3, #5]
 800fb10:	2b06      	cmp	r3, #6
 800fb12:	d112      	bne.n	800fb3a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800fb14:	6979      	ldr	r1, [r7, #20]
 800fb16:	6a38      	ldr	r0, [r7, #32]
 800fb18:	f7fe fb7e 	bl	800e218 <dhcp_handle_offer>
 800fb1c:	e00e      	b.n	800fb3c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fb1e:	bf00      	nop
 800fb20:	e00c      	b.n	800fb3c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fb22:	bf00      	nop
 800fb24:	e00a      	b.n	800fb3c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fb26:	bf00      	nop
 800fb28:	e008      	b.n	800fb3c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800fb2a:	bf00      	nop
 800fb2c:	e006      	b.n	800fb3c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fb2e:	bf00      	nop
 800fb30:	e004      	b.n	800fb3c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fb32:	bf00      	nop
 800fb34:	e002      	b.n	800fb3c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800fb36:	bf00      	nop
 800fb38:	e000      	b.n	800fb3c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800fb3a:	bf00      	nop
  pbuf_free(p);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7f8 f8e3 	bl	8007d08 <pbuf_free>
}
 800fb42:	bf00      	nop
 800fb44:	3728      	adds	r7, #40	; 0x28
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	20005060 	.word	0x20005060
 800fb50:	2000a830 	.word	0x2000a830
 800fb54:	2000a810 	.word	0x2000a810

0800fb58 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b088      	sub	sp, #32
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	603b      	str	r3, [r7, #0]
 800fb64:	4613      	mov	r3, r2
 800fb66:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d108      	bne.n	800fb80 <dhcp_create_msg+0x28>
 800fb6e:	4b5f      	ldr	r3, [pc, #380]	; (800fcec <dhcp_create_msg+0x194>)
 800fb70:	f240 7269 	movw	r2, #1897	; 0x769
 800fb74:	495e      	ldr	r1, [pc, #376]	; (800fcf0 <dhcp_create_msg+0x198>)
 800fb76:	485f      	ldr	r0, [pc, #380]	; (800fcf4 <dhcp_create_msg+0x19c>)
 800fb78:	f002 fd00 	bl	801257c <iprintf>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	e0b1      	b.n	800fce4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d108      	bne.n	800fb98 <dhcp_create_msg+0x40>
 800fb86:	4b59      	ldr	r3, [pc, #356]	; (800fcec <dhcp_create_msg+0x194>)
 800fb88:	f240 726a 	movw	r2, #1898	; 0x76a
 800fb8c:	495a      	ldr	r1, [pc, #360]	; (800fcf8 <dhcp_create_msg+0x1a0>)
 800fb8e:	4859      	ldr	r0, [pc, #356]	; (800fcf4 <dhcp_create_msg+0x19c>)
 800fb90:	f002 fcf4 	bl	801257c <iprintf>
 800fb94:	2300      	movs	r3, #0
 800fb96:	e0a5      	b.n	800fce4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fb98:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb9c:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fba0:	2036      	movs	r0, #54	; 0x36
 800fba2:	f7f7 fdcd 	bl	8007740 <pbuf_alloc>
 800fba6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d101      	bne.n	800fbb2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	e098      	b.n	800fce4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	895b      	ldrh	r3, [r3, #10]
 800fbb6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fbba:	d206      	bcs.n	800fbca <dhcp_create_msg+0x72>
 800fbbc:	4b4b      	ldr	r3, [pc, #300]	; (800fcec <dhcp_create_msg+0x194>)
 800fbbe:	f240 7271 	movw	r2, #1905	; 0x771
 800fbc2:	494e      	ldr	r1, [pc, #312]	; (800fcfc <dhcp_create_msg+0x1a4>)
 800fbc4:	484b      	ldr	r0, [pc, #300]	; (800fcf4 <dhcp_create_msg+0x19c>)
 800fbc6:	f002 fcd9 	bl	801257c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	2b03      	cmp	r3, #3
 800fbce:	d103      	bne.n	800fbd8 <dhcp_create_msg+0x80>
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	795b      	ldrb	r3, [r3, #5]
 800fbd4:	2b03      	cmp	r3, #3
 800fbd6:	d10d      	bne.n	800fbf4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	799b      	ldrb	r3, [r3, #6]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d105      	bne.n	800fbec <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800fbe0:	f002 fbcc 	bl	801237c <rand>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	4b45      	ldr	r3, [pc, #276]	; (800fd00 <dhcp_create_msg+0x1a8>)
 800fbea:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fbec:	4b44      	ldr	r3, [pc, #272]	; (800fd00 <dhcp_create_msg+0x1a8>)
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800fbfa:	f44f 729a 	mov.w	r2, #308	; 0x134
 800fbfe:	2100      	movs	r1, #0
 800fc00:	6978      	ldr	r0, [r7, #20]
 800fc02:	f002 fd20 	bl	8012646 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	2201      	movs	r2, #1
 800fc0a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f6 fd3c 	bl	800669e <lwip_htonl>
 800fc26:	4602      	mov	r2, r0
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	2b08      	cmp	r3, #8
 800fc30:	d010      	beq.n	800fc54 <dhcp_create_msg+0xfc>
 800fc32:	79fb      	ldrb	r3, [r7, #7]
 800fc34:	2b04      	cmp	r3, #4
 800fc36:	d00d      	beq.n	800fc54 <dhcp_create_msg+0xfc>
 800fc38:	79fb      	ldrb	r3, [r7, #7]
 800fc3a:	2b07      	cmp	r3, #7
 800fc3c:	d00a      	beq.n	800fc54 <dhcp_create_msg+0xfc>
 800fc3e:	79fb      	ldrb	r3, [r7, #7]
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	d10c      	bne.n	800fc5e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800fc48:	2b05      	cmp	r3, #5
 800fc4a:	d003      	beq.n	800fc54 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	795b      	ldrb	r3, [r3, #5]
 800fc50:	2b04      	cmp	r3, #4
 800fc52:	d104      	bne.n	800fc5e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	3304      	adds	r3, #4
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fc5e:	2300      	movs	r3, #0
 800fc60:	83fb      	strh	r3, [r7, #30]
 800fc62:	e00c      	b.n	800fc7e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800fc64:	8bfa      	ldrh	r2, [r7, #30]
 800fc66:	8bfb      	ldrh	r3, [r7, #30]
 800fc68:	68f9      	ldr	r1, [r7, #12]
 800fc6a:	440a      	add	r2, r1
 800fc6c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	4413      	add	r3, r2
 800fc74:	460a      	mov	r2, r1
 800fc76:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fc78:	8bfb      	ldrh	r3, [r7, #30]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	83fb      	strh	r3, [r7, #30]
 800fc7e:	8bfb      	ldrh	r3, [r7, #30]
 800fc80:	2b05      	cmp	r3, #5
 800fc82:	d9ef      	bls.n	800fc64 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fc8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800fc90:	2200      	movs	r2, #0
 800fc92:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800fc96:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fca0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800fca4:	2200      	movs	r2, #0
 800fca6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fcaa:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	2235      	movs	r2, #53	; 0x35
 800fcb8:	2000      	movs	r0, #0
 800fcba:	f7ff fadb 	bl	800f274 <dhcp_option>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcc8:	79fa      	ldrb	r2, [r7, #7]
 800fcca:	8a7b      	ldrh	r3, [r7, #18]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7ff fb05 	bl	800f2dc <dhcp_option_byte>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d002      	beq.n	800fce2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	8a7a      	ldrh	r2, [r7, #18]
 800fce0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800fce2:	69bb      	ldr	r3, [r7, #24]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3720      	adds	r7, #32
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	080156d4 	.word	0x080156d4
 800fcf0:	080159f4 	.word	0x080159f4
 800fcf4:	08015734 	.word	0x08015734
 800fcf8:	08015a14 	.word	0x08015a14
 800fcfc:	08015a34 	.word	0x08015a34
 800fd00:	2000a840 	.word	0x2000a840

0800fd04 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
 800fd10:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800fd12:	89fb      	ldrh	r3, [r7, #14]
 800fd14:	1c5a      	adds	r2, r3, #1
 800fd16:	81fa      	strh	r2, [r7, #14]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	22ff      	movs	r2, #255	; 0xff
 800fd20:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800fd22:	e007      	b.n	800fd34 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800fd24:	89fb      	ldrh	r3, [r7, #14]
 800fd26:	1c5a      	adds	r2, r3, #1
 800fd28:	81fa      	strh	r2, [r7, #14]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	4413      	add	r3, r2
 800fd30:	2200      	movs	r2, #0
 800fd32:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800fd34:	89fb      	ldrh	r3, [r7, #14]
 800fd36:	2b43      	cmp	r3, #67	; 0x43
 800fd38:	d904      	bls.n	800fd44 <dhcp_option_trailer+0x40>
 800fd3a:	89fb      	ldrh	r3, [r7, #14]
 800fd3c:	f003 0303 	and.w	r3, r3, #3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d002      	beq.n	800fd4a <dhcp_option_trailer+0x46>
 800fd44:	89fb      	ldrh	r3, [r7, #14]
 800fd46:	2b43      	cmp	r3, #67	; 0x43
 800fd48:	d9ec      	bls.n	800fd24 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800fd4a:	89fb      	ldrh	r3, [r7, #14]
 800fd4c:	33f0      	adds	r3, #240	; 0xf0
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	4619      	mov	r1, r3
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7f7 fe52 	bl	80079fc <pbuf_realloc>
}
 800fd58:	bf00      	nop
 800fd5a:	3710      	adds	r7, #16
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b085      	sub	sp, #20
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d017      	beq.n	800fd9e <dhcp_supplied_address+0x3e>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d013      	beq.n	800fd9e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	795b      	ldrb	r3, [r3, #5]
 800fd80:	2b0a      	cmp	r3, #10
 800fd82:	d007      	beq.n	800fd94 <dhcp_supplied_address+0x34>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	795b      	ldrb	r3, [r3, #5]
 800fd88:	2b05      	cmp	r3, #5
 800fd8a:	d003      	beq.n	800fd94 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800fd90:	2b04      	cmp	r3, #4
 800fd92:	d101      	bne.n	800fd98 <dhcp_supplied_address+0x38>
 800fd94:	2301      	movs	r3, #1
 800fd96:	e000      	b.n	800fd9a <dhcp_supplied_address+0x3a>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	e000      	b.n	800fda0 <dhcp_supplied_address+0x40>
  }
  return 0;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3714      	adds	r7, #20
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fdb4:	4915      	ldr	r1, [pc, #84]	; (800fe0c <etharp_free_entry+0x60>)
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	4413      	add	r3, r2
 800fdbe:	00db      	lsls	r3, r3, #3
 800fdc0:	440b      	add	r3, r1
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d013      	beq.n	800fdf0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fdc8:	4910      	ldr	r1, [pc, #64]	; (800fe0c <etharp_free_entry+0x60>)
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	4613      	mov	r3, r2
 800fdce:	005b      	lsls	r3, r3, #1
 800fdd0:	4413      	add	r3, r2
 800fdd2:	00db      	lsls	r3, r3, #3
 800fdd4:	440b      	add	r3, r1
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7f7 ff95 	bl	8007d08 <pbuf_free>
    arp_table[i].q = NULL;
 800fdde:	490b      	ldr	r1, [pc, #44]	; (800fe0c <etharp_free_entry+0x60>)
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	4613      	mov	r3, r2
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	4413      	add	r3, r2
 800fde8:	00db      	lsls	r3, r3, #3
 800fdea:	440b      	add	r3, r1
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fdf0:	4906      	ldr	r1, [pc, #24]	; (800fe0c <etharp_free_entry+0x60>)
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	005b      	lsls	r3, r3, #1
 800fdf8:	4413      	add	r3, r2
 800fdfa:	00db      	lsls	r3, r3, #3
 800fdfc:	440b      	add	r3, r1
 800fdfe:	3314      	adds	r3, #20
 800fe00:	2200      	movs	r2, #0
 800fe02:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fe04:	bf00      	nop
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	2000a844 	.word	0x2000a844

0800fe10 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe16:	2300      	movs	r3, #0
 800fe18:	607b      	str	r3, [r7, #4]
 800fe1a:	e096      	b.n	800ff4a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fe1c:	494f      	ldr	r1, [pc, #316]	; (800ff5c <etharp_tmr+0x14c>)
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	4613      	mov	r3, r2
 800fe22:	005b      	lsls	r3, r3, #1
 800fe24:	4413      	add	r3, r2
 800fe26:	00db      	lsls	r3, r3, #3
 800fe28:	440b      	add	r3, r1
 800fe2a:	3314      	adds	r3, #20
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fe30:	78fb      	ldrb	r3, [r7, #3]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f000 8086 	beq.w	800ff44 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fe38:	4948      	ldr	r1, [pc, #288]	; (800ff5c <etharp_tmr+0x14c>)
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	005b      	lsls	r3, r3, #1
 800fe40:	4413      	add	r3, r2
 800fe42:	00db      	lsls	r3, r3, #3
 800fe44:	440b      	add	r3, r1
 800fe46:	3312      	adds	r3, #18
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	b298      	uxth	r0, r3
 800fe4e:	4943      	ldr	r1, [pc, #268]	; (800ff5c <etharp_tmr+0x14c>)
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	4613      	mov	r3, r2
 800fe54:	005b      	lsls	r3, r3, #1
 800fe56:	4413      	add	r3, r2
 800fe58:	00db      	lsls	r3, r3, #3
 800fe5a:	440b      	add	r3, r1
 800fe5c:	3312      	adds	r3, #18
 800fe5e:	4602      	mov	r2, r0
 800fe60:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fe62:	493e      	ldr	r1, [pc, #248]	; (800ff5c <etharp_tmr+0x14c>)
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4613      	mov	r3, r2
 800fe68:	005b      	lsls	r3, r3, #1
 800fe6a:	4413      	add	r3, r2
 800fe6c:	00db      	lsls	r3, r3, #3
 800fe6e:	440b      	add	r3, r1
 800fe70:	3312      	adds	r3, #18
 800fe72:	881b      	ldrh	r3, [r3, #0]
 800fe74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fe78:	d215      	bcs.n	800fea6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fe7a:	4938      	ldr	r1, [pc, #224]	; (800ff5c <etharp_tmr+0x14c>)
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	4413      	add	r3, r2
 800fe84:	00db      	lsls	r3, r3, #3
 800fe86:	440b      	add	r3, r1
 800fe88:	3314      	adds	r3, #20
 800fe8a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d10e      	bne.n	800feae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fe90:	4932      	ldr	r1, [pc, #200]	; (800ff5c <etharp_tmr+0x14c>)
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	4613      	mov	r3, r2
 800fe96:	005b      	lsls	r3, r3, #1
 800fe98:	4413      	add	r3, r2
 800fe9a:	00db      	lsls	r3, r3, #3
 800fe9c:	440b      	add	r3, r1
 800fe9e:	3312      	adds	r3, #18
 800fea0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fea2:	2b04      	cmp	r3, #4
 800fea4:	d903      	bls.n	800feae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff ff80 	bl	800fdac <etharp_free_entry>
 800feac:	e04a      	b.n	800ff44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800feae:	492b      	ldr	r1, [pc, #172]	; (800ff5c <etharp_tmr+0x14c>)
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	4613      	mov	r3, r2
 800feb4:	005b      	lsls	r3, r3, #1
 800feb6:	4413      	add	r3, r2
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	440b      	add	r3, r1
 800febc:	3314      	adds	r3, #20
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d10a      	bne.n	800feda <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fec4:	4925      	ldr	r1, [pc, #148]	; (800ff5c <etharp_tmr+0x14c>)
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	4613      	mov	r3, r2
 800feca:	005b      	lsls	r3, r3, #1
 800fecc:	4413      	add	r3, r2
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	440b      	add	r3, r1
 800fed2:	3314      	adds	r3, #20
 800fed4:	2204      	movs	r2, #4
 800fed6:	701a      	strb	r2, [r3, #0]
 800fed8:	e034      	b.n	800ff44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800feda:	4920      	ldr	r1, [pc, #128]	; (800ff5c <etharp_tmr+0x14c>)
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	4613      	mov	r3, r2
 800fee0:	005b      	lsls	r3, r3, #1
 800fee2:	4413      	add	r3, r2
 800fee4:	00db      	lsls	r3, r3, #3
 800fee6:	440b      	add	r3, r1
 800fee8:	3314      	adds	r3, #20
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	2b04      	cmp	r3, #4
 800feee:	d10a      	bne.n	800ff06 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fef0:	491a      	ldr	r1, [pc, #104]	; (800ff5c <etharp_tmr+0x14c>)
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	4613      	mov	r3, r2
 800fef6:	005b      	lsls	r3, r3, #1
 800fef8:	4413      	add	r3, r2
 800fefa:	00db      	lsls	r3, r3, #3
 800fefc:	440b      	add	r3, r1
 800fefe:	3314      	adds	r3, #20
 800ff00:	2202      	movs	r2, #2
 800ff02:	701a      	strb	r2, [r3, #0]
 800ff04:	e01e      	b.n	800ff44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ff06:	4915      	ldr	r1, [pc, #84]	; (800ff5c <etharp_tmr+0x14c>)
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	4413      	add	r3, r2
 800ff10:	00db      	lsls	r3, r3, #3
 800ff12:	440b      	add	r3, r1
 800ff14:	3314      	adds	r3, #20
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d113      	bne.n	800ff44 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ff1c:	490f      	ldr	r1, [pc, #60]	; (800ff5c <etharp_tmr+0x14c>)
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	4613      	mov	r3, r2
 800ff22:	005b      	lsls	r3, r3, #1
 800ff24:	4413      	add	r3, r2
 800ff26:	00db      	lsls	r3, r3, #3
 800ff28:	440b      	add	r3, r1
 800ff2a:	3308      	adds	r3, #8
 800ff2c:	6818      	ldr	r0, [r3, #0]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	4613      	mov	r3, r2
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	4413      	add	r3, r2
 800ff36:	00db      	lsls	r3, r3, #3
 800ff38:	4a08      	ldr	r2, [pc, #32]	; (800ff5c <etharp_tmr+0x14c>)
 800ff3a:	4413      	add	r3, r2
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	4619      	mov	r1, r3
 800ff40:	f000 fe72 	bl	8010c28 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	3301      	adds	r3, #1
 800ff48:	607b      	str	r3, [r7, #4]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b09      	cmp	r3, #9
 800ff4e:	f77f af65 	ble.w	800fe1c <etharp_tmr+0xc>
      }
    }
  }
}
 800ff52:	bf00      	nop
 800ff54:	bf00      	nop
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	2000a844 	.word	0x2000a844

0800ff60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b08a      	sub	sp, #40	; 0x28
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	460b      	mov	r3, r1
 800ff6a:	607a      	str	r2, [r7, #4]
 800ff6c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ff6e:	230a      	movs	r3, #10
 800ff70:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ff72:	230a      	movs	r3, #10
 800ff74:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ff76:	230a      	movs	r3, #10
 800ff78:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ff7e:	230a      	movs	r3, #10
 800ff80:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ff82:	2300      	movs	r3, #0
 800ff84:	83bb      	strh	r3, [r7, #28]
 800ff86:	2300      	movs	r3, #0
 800ff88:	837b      	strh	r3, [r7, #26]
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff8e:	2300      	movs	r3, #0
 800ff90:	843b      	strh	r3, [r7, #32]
 800ff92:	e0ae      	b.n	80100f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ff94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff98:	49a6      	ldr	r1, [pc, #664]	; (8010234 <etharp_find_entry+0x2d4>)
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	005b      	lsls	r3, r3, #1
 800ff9e:	4413      	add	r3, r2
 800ffa0:	00db      	lsls	r3, r3, #3
 800ffa2:	440b      	add	r3, r1
 800ffa4:	3314      	adds	r3, #20
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ffaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ffae:	2b0a      	cmp	r3, #10
 800ffb0:	d105      	bne.n	800ffbe <etharp_find_entry+0x5e>
 800ffb2:	7dfb      	ldrb	r3, [r7, #23]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ffb8:	8c3b      	ldrh	r3, [r7, #32]
 800ffba:	847b      	strh	r3, [r7, #34]	; 0x22
 800ffbc:	e095      	b.n	80100ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ffbe:	7dfb      	ldrb	r3, [r7, #23]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	f000 8092 	beq.w	80100ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d009      	beq.n	800ffe0 <etharp_find_entry+0x80>
 800ffcc:	7dfb      	ldrb	r3, [r7, #23]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d806      	bhi.n	800ffe0 <etharp_find_entry+0x80>
 800ffd2:	4b99      	ldr	r3, [pc, #612]	; (8010238 <etharp_find_entry+0x2d8>)
 800ffd4:	f240 1223 	movw	r2, #291	; 0x123
 800ffd8:	4998      	ldr	r1, [pc, #608]	; (801023c <etharp_find_entry+0x2dc>)
 800ffda:	4899      	ldr	r0, [pc, #612]	; (8010240 <etharp_find_entry+0x2e0>)
 800ffdc:	f002 face 	bl	801257c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d020      	beq.n	8010028 <etharp_find_entry+0xc8>
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6819      	ldr	r1, [r3, #0]
 800ffea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffee:	4891      	ldr	r0, [pc, #580]	; (8010234 <etharp_find_entry+0x2d4>)
 800fff0:	4613      	mov	r3, r2
 800fff2:	005b      	lsls	r3, r3, #1
 800fff4:	4413      	add	r3, r2
 800fff6:	00db      	lsls	r3, r3, #3
 800fff8:	4403      	add	r3, r0
 800fffa:	3304      	adds	r3, #4
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4299      	cmp	r1, r3
 8010000:	d112      	bne.n	8010028 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00c      	beq.n	8010022 <etharp_find_entry+0xc2>
 8010008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801000c:	4989      	ldr	r1, [pc, #548]	; (8010234 <etharp_find_entry+0x2d4>)
 801000e:	4613      	mov	r3, r2
 8010010:	005b      	lsls	r3, r3, #1
 8010012:	4413      	add	r3, r2
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	440b      	add	r3, r1
 8010018:	3308      	adds	r3, #8
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	429a      	cmp	r2, r3
 8010020:	d102      	bne.n	8010028 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010022:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010026:	e100      	b.n	801022a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010028:	7dfb      	ldrb	r3, [r7, #23]
 801002a:	2b01      	cmp	r3, #1
 801002c:	d140      	bne.n	80100b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801002e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010032:	4980      	ldr	r1, [pc, #512]	; (8010234 <etharp_find_entry+0x2d4>)
 8010034:	4613      	mov	r3, r2
 8010036:	005b      	lsls	r3, r3, #1
 8010038:	4413      	add	r3, r2
 801003a:	00db      	lsls	r3, r3, #3
 801003c:	440b      	add	r3, r1
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d01a      	beq.n	801007a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010044:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010048:	497a      	ldr	r1, [pc, #488]	; (8010234 <etharp_find_entry+0x2d4>)
 801004a:	4613      	mov	r3, r2
 801004c:	005b      	lsls	r3, r3, #1
 801004e:	4413      	add	r3, r2
 8010050:	00db      	lsls	r3, r3, #3
 8010052:	440b      	add	r3, r1
 8010054:	3312      	adds	r3, #18
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	8bba      	ldrh	r2, [r7, #28]
 801005a:	429a      	cmp	r2, r3
 801005c:	d845      	bhi.n	80100ea <etharp_find_entry+0x18a>
            old_queue = i;
 801005e:	8c3b      	ldrh	r3, [r7, #32]
 8010060:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010066:	4973      	ldr	r1, [pc, #460]	; (8010234 <etharp_find_entry+0x2d4>)
 8010068:	4613      	mov	r3, r2
 801006a:	005b      	lsls	r3, r3, #1
 801006c:	4413      	add	r3, r2
 801006e:	00db      	lsls	r3, r3, #3
 8010070:	440b      	add	r3, r1
 8010072:	3312      	adds	r3, #18
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	83bb      	strh	r3, [r7, #28]
 8010078:	e037      	b.n	80100ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801007a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801007e:	496d      	ldr	r1, [pc, #436]	; (8010234 <etharp_find_entry+0x2d4>)
 8010080:	4613      	mov	r3, r2
 8010082:	005b      	lsls	r3, r3, #1
 8010084:	4413      	add	r3, r2
 8010086:	00db      	lsls	r3, r3, #3
 8010088:	440b      	add	r3, r1
 801008a:	3312      	adds	r3, #18
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	8b7a      	ldrh	r2, [r7, #26]
 8010090:	429a      	cmp	r2, r3
 8010092:	d82a      	bhi.n	80100ea <etharp_find_entry+0x18a>
            old_pending = i;
 8010094:	8c3b      	ldrh	r3, [r7, #32]
 8010096:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801009c:	4965      	ldr	r1, [pc, #404]	; (8010234 <etharp_find_entry+0x2d4>)
 801009e:	4613      	mov	r3, r2
 80100a0:	005b      	lsls	r3, r3, #1
 80100a2:	4413      	add	r3, r2
 80100a4:	00db      	lsls	r3, r3, #3
 80100a6:	440b      	add	r3, r1
 80100a8:	3312      	adds	r3, #18
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	837b      	strh	r3, [r7, #26]
 80100ae:	e01c      	b.n	80100ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80100b0:	7dfb      	ldrb	r3, [r7, #23]
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d919      	bls.n	80100ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80100b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100ba:	495e      	ldr	r1, [pc, #376]	; (8010234 <etharp_find_entry+0x2d4>)
 80100bc:	4613      	mov	r3, r2
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	4413      	add	r3, r2
 80100c2:	00db      	lsls	r3, r3, #3
 80100c4:	440b      	add	r3, r1
 80100c6:	3312      	adds	r3, #18
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	8b3a      	ldrh	r2, [r7, #24]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d80c      	bhi.n	80100ea <etharp_find_entry+0x18a>
            old_stable = i;
 80100d0:	8c3b      	ldrh	r3, [r7, #32]
 80100d2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80100d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100d8:	4956      	ldr	r1, [pc, #344]	; (8010234 <etharp_find_entry+0x2d4>)
 80100da:	4613      	mov	r3, r2
 80100dc:	005b      	lsls	r3, r3, #1
 80100de:	4413      	add	r3, r2
 80100e0:	00db      	lsls	r3, r3, #3
 80100e2:	440b      	add	r3, r1
 80100e4:	3312      	adds	r3, #18
 80100e6:	881b      	ldrh	r3, [r3, #0]
 80100e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100ea:	8c3b      	ldrh	r3, [r7, #32]
 80100ec:	3301      	adds	r3, #1
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	843b      	strh	r3, [r7, #32]
 80100f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80100f6:	2b09      	cmp	r3, #9
 80100f8:	f77f af4c 	ble.w	800ff94 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80100fc:	7afb      	ldrb	r3, [r7, #11]
 80100fe:	f003 0302 	and.w	r3, r3, #2
 8010102:	2b00      	cmp	r3, #0
 8010104:	d108      	bne.n	8010118 <etharp_find_entry+0x1b8>
 8010106:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801010a:	2b0a      	cmp	r3, #10
 801010c:	d107      	bne.n	801011e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801010e:	7afb      	ldrb	r3, [r7, #11]
 8010110:	f003 0301 	and.w	r3, r3, #1
 8010114:	2b00      	cmp	r3, #0
 8010116:	d102      	bne.n	801011e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801011c:	e085      	b.n	801022a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801011e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010122:	2b09      	cmp	r3, #9
 8010124:	dc02      	bgt.n	801012c <etharp_find_entry+0x1cc>
    i = empty;
 8010126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010128:	843b      	strh	r3, [r7, #32]
 801012a:	e039      	b.n	80101a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801012c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010130:	2b09      	cmp	r3, #9
 8010132:	dc14      	bgt.n	801015e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010136:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801013c:	493d      	ldr	r1, [pc, #244]	; (8010234 <etharp_find_entry+0x2d4>)
 801013e:	4613      	mov	r3, r2
 8010140:	005b      	lsls	r3, r3, #1
 8010142:	4413      	add	r3, r2
 8010144:	00db      	lsls	r3, r3, #3
 8010146:	440b      	add	r3, r1
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d018      	beq.n	8010180 <etharp_find_entry+0x220>
 801014e:	4b3a      	ldr	r3, [pc, #232]	; (8010238 <etharp_find_entry+0x2d8>)
 8010150:	f240 126d 	movw	r2, #365	; 0x16d
 8010154:	493b      	ldr	r1, [pc, #236]	; (8010244 <etharp_find_entry+0x2e4>)
 8010156:	483a      	ldr	r0, [pc, #232]	; (8010240 <etharp_find_entry+0x2e0>)
 8010158:	f002 fa10 	bl	801257c <iprintf>
 801015c:	e010      	b.n	8010180 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801015e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010162:	2b09      	cmp	r3, #9
 8010164:	dc02      	bgt.n	801016c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010166:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010168:	843b      	strh	r3, [r7, #32]
 801016a:	e009      	b.n	8010180 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801016c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010170:	2b09      	cmp	r3, #9
 8010172:	dc02      	bgt.n	801017a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010174:	8bfb      	ldrh	r3, [r7, #30]
 8010176:	843b      	strh	r3, [r7, #32]
 8010178:	e002      	b.n	8010180 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801017a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801017e:	e054      	b.n	801022a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010180:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010184:	2b09      	cmp	r3, #9
 8010186:	dd06      	ble.n	8010196 <etharp_find_entry+0x236>
 8010188:	4b2b      	ldr	r3, [pc, #172]	; (8010238 <etharp_find_entry+0x2d8>)
 801018a:	f240 127f 	movw	r2, #383	; 0x17f
 801018e:	492e      	ldr	r1, [pc, #184]	; (8010248 <etharp_find_entry+0x2e8>)
 8010190:	482b      	ldr	r0, [pc, #172]	; (8010240 <etharp_find_entry+0x2e0>)
 8010192:	f002 f9f3 	bl	801257c <iprintf>
    etharp_free_entry(i);
 8010196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801019a:	4618      	mov	r0, r3
 801019c:	f7ff fe06 	bl	800fdac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80101a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80101a4:	2b09      	cmp	r3, #9
 80101a6:	dd06      	ble.n	80101b6 <etharp_find_entry+0x256>
 80101a8:	4b23      	ldr	r3, [pc, #140]	; (8010238 <etharp_find_entry+0x2d8>)
 80101aa:	f240 1283 	movw	r2, #387	; 0x183
 80101ae:	4926      	ldr	r1, [pc, #152]	; (8010248 <etharp_find_entry+0x2e8>)
 80101b0:	4823      	ldr	r0, [pc, #140]	; (8010240 <etharp_find_entry+0x2e0>)
 80101b2:	f002 f9e3 	bl	801257c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80101b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101ba:	491e      	ldr	r1, [pc, #120]	; (8010234 <etharp_find_entry+0x2d4>)
 80101bc:	4613      	mov	r3, r2
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	4413      	add	r3, r2
 80101c2:	00db      	lsls	r3, r3, #3
 80101c4:	440b      	add	r3, r1
 80101c6:	3314      	adds	r3, #20
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d006      	beq.n	80101dc <etharp_find_entry+0x27c>
 80101ce:	4b1a      	ldr	r3, [pc, #104]	; (8010238 <etharp_find_entry+0x2d8>)
 80101d0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80101d4:	491d      	ldr	r1, [pc, #116]	; (801024c <etharp_find_entry+0x2ec>)
 80101d6:	481a      	ldr	r0, [pc, #104]	; (8010240 <etharp_find_entry+0x2e0>)
 80101d8:	f002 f9d0 	bl	801257c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00b      	beq.n	80101fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80101e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6819      	ldr	r1, [r3, #0]
 80101ea:	4812      	ldr	r0, [pc, #72]	; (8010234 <etharp_find_entry+0x2d4>)
 80101ec:	4613      	mov	r3, r2
 80101ee:	005b      	lsls	r3, r3, #1
 80101f0:	4413      	add	r3, r2
 80101f2:	00db      	lsls	r3, r3, #3
 80101f4:	4403      	add	r3, r0
 80101f6:	3304      	adds	r3, #4
 80101f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80101fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101fe:	490d      	ldr	r1, [pc, #52]	; (8010234 <etharp_find_entry+0x2d4>)
 8010200:	4613      	mov	r3, r2
 8010202:	005b      	lsls	r3, r3, #1
 8010204:	4413      	add	r3, r2
 8010206:	00db      	lsls	r3, r3, #3
 8010208:	440b      	add	r3, r1
 801020a:	3312      	adds	r3, #18
 801020c:	2200      	movs	r2, #0
 801020e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010210:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010214:	4907      	ldr	r1, [pc, #28]	; (8010234 <etharp_find_entry+0x2d4>)
 8010216:	4613      	mov	r3, r2
 8010218:	005b      	lsls	r3, r3, #1
 801021a:	4413      	add	r3, r2
 801021c:	00db      	lsls	r3, r3, #3
 801021e:	440b      	add	r3, r1
 8010220:	3308      	adds	r3, #8
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010226:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3728      	adds	r7, #40	; 0x28
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	2000a844 	.word	0x2000a844
 8010238:	08015a74 	.word	0x08015a74
 801023c:	08015aac 	.word	0x08015aac
 8010240:	08015aec 	.word	0x08015aec
 8010244:	08015b14 	.word	0x08015b14
 8010248:	08015b2c 	.word	0x08015b2c
 801024c:	08015b40 	.word	0x08015b40

08010250 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af02      	add	r7, sp, #8
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	607a      	str	r2, [r7, #4]
 801025c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010264:	2b06      	cmp	r3, #6
 8010266:	d006      	beq.n	8010276 <etharp_update_arp_entry+0x26>
 8010268:	4b48      	ldr	r3, [pc, #288]	; (801038c <etharp_update_arp_entry+0x13c>)
 801026a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801026e:	4948      	ldr	r1, [pc, #288]	; (8010390 <etharp_update_arp_entry+0x140>)
 8010270:	4848      	ldr	r0, [pc, #288]	; (8010394 <etharp_update_arp_entry+0x144>)
 8010272:	f002 f983 	bl	801257c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d012      	beq.n	80102a2 <etharp_update_arp_entry+0x52>
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00e      	beq.n	80102a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	68f9      	ldr	r1, [r7, #12]
 801028a:	4618      	mov	r0, r3
 801028c:	f001 f920 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 8010290:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010292:	2b00      	cmp	r3, #0
 8010294:	d105      	bne.n	80102a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801029e:	2be0      	cmp	r3, #224	; 0xe0
 80102a0:	d102      	bne.n	80102a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80102a2:	f06f 030f 	mvn.w	r3, #15
 80102a6:	e06c      	b.n	8010382 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80102a8:	78fb      	ldrb	r3, [r7, #3]
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	4619      	mov	r1, r3
 80102ae:	68b8      	ldr	r0, [r7, #8]
 80102b0:	f7ff fe56 	bl	800ff60 <etharp_find_entry>
 80102b4:	4603      	mov	r3, r0
 80102b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80102b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	da02      	bge.n	80102c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80102c0:	8afb      	ldrh	r3, [r7, #22]
 80102c2:	b25b      	sxtb	r3, r3
 80102c4:	e05d      	b.n	8010382 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80102c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102ca:	4933      	ldr	r1, [pc, #204]	; (8010398 <etharp_update_arp_entry+0x148>)
 80102cc:	4613      	mov	r3, r2
 80102ce:	005b      	lsls	r3, r3, #1
 80102d0:	4413      	add	r3, r2
 80102d2:	00db      	lsls	r3, r3, #3
 80102d4:	440b      	add	r3, r1
 80102d6:	3314      	adds	r3, #20
 80102d8:	2202      	movs	r2, #2
 80102da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80102dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102e0:	492d      	ldr	r1, [pc, #180]	; (8010398 <etharp_update_arp_entry+0x148>)
 80102e2:	4613      	mov	r3, r2
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	4413      	add	r3, r2
 80102e8:	00db      	lsls	r3, r3, #3
 80102ea:	440b      	add	r3, r1
 80102ec:	3308      	adds	r3, #8
 80102ee:	68fa      	ldr	r2, [r7, #12]
 80102f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80102f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102f6:	4613      	mov	r3, r2
 80102f8:	005b      	lsls	r3, r3, #1
 80102fa:	4413      	add	r3, r2
 80102fc:	00db      	lsls	r3, r3, #3
 80102fe:	3308      	adds	r3, #8
 8010300:	4a25      	ldr	r2, [pc, #148]	; (8010398 <etharp_update_arp_entry+0x148>)
 8010302:	4413      	add	r3, r2
 8010304:	3304      	adds	r3, #4
 8010306:	2206      	movs	r2, #6
 8010308:	6879      	ldr	r1, [r7, #4]
 801030a:	4618      	mov	r0, r3
 801030c:	f002 fa11 	bl	8012732 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010310:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010314:	4920      	ldr	r1, [pc, #128]	; (8010398 <etharp_update_arp_entry+0x148>)
 8010316:	4613      	mov	r3, r2
 8010318:	005b      	lsls	r3, r3, #1
 801031a:	4413      	add	r3, r2
 801031c:	00db      	lsls	r3, r3, #3
 801031e:	440b      	add	r3, r1
 8010320:	3312      	adds	r3, #18
 8010322:	2200      	movs	r2, #0
 8010324:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010326:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801032a:	491b      	ldr	r1, [pc, #108]	; (8010398 <etharp_update_arp_entry+0x148>)
 801032c:	4613      	mov	r3, r2
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	4413      	add	r3, r2
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	440b      	add	r3, r1
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d021      	beq.n	8010380 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801033c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010340:	4915      	ldr	r1, [pc, #84]	; (8010398 <etharp_update_arp_entry+0x148>)
 8010342:	4613      	mov	r3, r2
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	4413      	add	r3, r2
 8010348:	00db      	lsls	r3, r3, #3
 801034a:	440b      	add	r3, r1
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010350:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010354:	4910      	ldr	r1, [pc, #64]	; (8010398 <etharp_update_arp_entry+0x148>)
 8010356:	4613      	mov	r3, r2
 8010358:	005b      	lsls	r3, r3, #1
 801035a:	4413      	add	r3, r2
 801035c:	00db      	lsls	r3, r3, #3
 801035e:	440b      	add	r3, r1
 8010360:	2200      	movs	r2, #0
 8010362:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801036a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801036e:	9300      	str	r3, [sp, #0]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6939      	ldr	r1, [r7, #16]
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f001 ffb9 	bl	80122ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801037a:	6938      	ldr	r0, [r7, #16]
 801037c:	f7f7 fcc4 	bl	8007d08 <pbuf_free>
  }
  return ERR_OK;
 8010380:	2300      	movs	r3, #0
}
 8010382:	4618      	mov	r0, r3
 8010384:	3718      	adds	r7, #24
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	08015a74 	.word	0x08015a74
 8010390:	08015b6c 	.word	0x08015b6c
 8010394:	08015aec 	.word	0x08015aec
 8010398:	2000a844 	.word	0x2000a844

0801039c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103a4:	2300      	movs	r3, #0
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	e01e      	b.n	80103e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80103aa:	4913      	ldr	r1, [pc, #76]	; (80103f8 <etharp_cleanup_netif+0x5c>)
 80103ac:	68fa      	ldr	r2, [r7, #12]
 80103ae:	4613      	mov	r3, r2
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	4413      	add	r3, r2
 80103b4:	00db      	lsls	r3, r3, #3
 80103b6:	440b      	add	r3, r1
 80103b8:	3314      	adds	r3, #20
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80103be:	7afb      	ldrb	r3, [r7, #11]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00e      	beq.n	80103e2 <etharp_cleanup_netif+0x46>
 80103c4:	490c      	ldr	r1, [pc, #48]	; (80103f8 <etharp_cleanup_netif+0x5c>)
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	4613      	mov	r3, r2
 80103ca:	005b      	lsls	r3, r3, #1
 80103cc:	4413      	add	r3, r2
 80103ce:	00db      	lsls	r3, r3, #3
 80103d0:	440b      	add	r3, r1
 80103d2:	3308      	adds	r3, #8
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	429a      	cmp	r2, r3
 80103da:	d102      	bne.n	80103e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f7ff fce5 	bl	800fdac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	3301      	adds	r3, #1
 80103e6:	60fb      	str	r3, [r7, #12]
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b09      	cmp	r3, #9
 80103ec:	dddd      	ble.n	80103aa <etharp_cleanup_netif+0xe>
    }
  }
}
 80103ee:	bf00      	nop
 80103f0:	bf00      	nop
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	2000a844 	.word	0x2000a844

080103fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80103fc:	b5b0      	push	{r4, r5, r7, lr}
 80103fe:	b08a      	sub	sp, #40	; 0x28
 8010400:	af04      	add	r7, sp, #16
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d107      	bne.n	801041c <etharp_input+0x20>
 801040c:	4b3f      	ldr	r3, [pc, #252]	; (801050c <etharp_input+0x110>)
 801040e:	f240 228a 	movw	r2, #650	; 0x28a
 8010412:	493f      	ldr	r1, [pc, #252]	; (8010510 <etharp_input+0x114>)
 8010414:	483f      	ldr	r0, [pc, #252]	; (8010514 <etharp_input+0x118>)
 8010416:	f002 f8b1 	bl	801257c <iprintf>
 801041a:	e074      	b.n	8010506 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	881b      	ldrh	r3, [r3, #0]
 8010426:	b29b      	uxth	r3, r3
 8010428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801042c:	d10c      	bne.n	8010448 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010432:	2b06      	cmp	r3, #6
 8010434:	d108      	bne.n	8010448 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801043a:	2b04      	cmp	r3, #4
 801043c:	d104      	bne.n	8010448 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	885b      	ldrh	r3, [r3, #2]
 8010442:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010444:	2b08      	cmp	r3, #8
 8010446:	d003      	beq.n	8010450 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f7f7 fc5d 	bl	8007d08 <pbuf_free>
    return;
 801044e:	e05a      	b.n	8010506 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	330e      	adds	r3, #14
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	3318      	adds	r3, #24
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	3304      	adds	r3, #4
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d102      	bne.n	8010470 <etharp_input+0x74>
    for_us = 0;
 801046a:	2300      	movs	r3, #0
 801046c:	75fb      	strb	r3, [r7, #23]
 801046e:	e009      	b.n	8010484 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	3304      	adds	r3, #4
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	429a      	cmp	r2, r3
 801047a:	bf0c      	ite	eq
 801047c:	2301      	moveq	r3, #1
 801047e:	2300      	movne	r3, #0
 8010480:	b2db      	uxtb	r3, r3
 8010482:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	f103 0208 	add.w	r2, r3, #8
 801048a:	7dfb      	ldrb	r3, [r7, #23]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d001      	beq.n	8010494 <etharp_input+0x98>
 8010490:	2301      	movs	r3, #1
 8010492:	e000      	b.n	8010496 <etharp_input+0x9a>
 8010494:	2302      	movs	r3, #2
 8010496:	f107 010c 	add.w	r1, r7, #12
 801049a:	6838      	ldr	r0, [r7, #0]
 801049c:	f7ff fed8 	bl	8010250 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	88db      	ldrh	r3, [r3, #6]
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104aa:	d003      	beq.n	80104b4 <etharp_input+0xb8>
 80104ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104b0:	d01e      	beq.n	80104f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80104b2:	e025      	b.n	8010500 <etharp_input+0x104>
      if (for_us) {
 80104b4:	7dfb      	ldrb	r3, [r7, #23]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d021      	beq.n	80104fe <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80104d4:	2102      	movs	r1, #2
 80104d6:	9103      	str	r1, [sp, #12]
 80104d8:	f107 010c 	add.w	r1, r7, #12
 80104dc:	9102      	str	r1, [sp, #8]
 80104de:	9201      	str	r2, [sp, #4]
 80104e0:	9300      	str	r3, [sp, #0]
 80104e2:	462b      	mov	r3, r5
 80104e4:	4622      	mov	r2, r4
 80104e6:	4601      	mov	r1, r0
 80104e8:	6838      	ldr	r0, [r7, #0]
 80104ea:	f000 faef 	bl	8010acc <etharp_raw>
      break;
 80104ee:	e006      	b.n	80104fe <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80104f0:	f107 030c 	add.w	r3, r7, #12
 80104f4:	4619      	mov	r1, r3
 80104f6:	6838      	ldr	r0, [r7, #0]
 80104f8:	f7fe f9fc 	bl	800e8f4 <dhcp_arp_reply>
      break;
 80104fc:	e000      	b.n	8010500 <etharp_input+0x104>
      break;
 80104fe:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7f7 fc01 	bl	8007d08 <pbuf_free>
}
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bdb0      	pop	{r4, r5, r7, pc}
 801050c:	08015a74 	.word	0x08015a74
 8010510:	08015bc4 	.word	0x08015bc4
 8010514:	08015aec 	.word	0x08015aec

08010518 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b086      	sub	sp, #24
 801051c:	af02      	add	r7, sp, #8
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	4613      	mov	r3, r2
 8010524:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010526:	79fa      	ldrb	r2, [r7, #7]
 8010528:	4944      	ldr	r1, [pc, #272]	; (801063c <etharp_output_to_arp_index+0x124>)
 801052a:	4613      	mov	r3, r2
 801052c:	005b      	lsls	r3, r3, #1
 801052e:	4413      	add	r3, r2
 8010530:	00db      	lsls	r3, r3, #3
 8010532:	440b      	add	r3, r1
 8010534:	3314      	adds	r3, #20
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	2b01      	cmp	r3, #1
 801053a:	d806      	bhi.n	801054a <etharp_output_to_arp_index+0x32>
 801053c:	4b40      	ldr	r3, [pc, #256]	; (8010640 <etharp_output_to_arp_index+0x128>)
 801053e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010542:	4940      	ldr	r1, [pc, #256]	; (8010644 <etharp_output_to_arp_index+0x12c>)
 8010544:	4840      	ldr	r0, [pc, #256]	; (8010648 <etharp_output_to_arp_index+0x130>)
 8010546:	f002 f819 	bl	801257c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801054a:	79fa      	ldrb	r2, [r7, #7]
 801054c:	493b      	ldr	r1, [pc, #236]	; (801063c <etharp_output_to_arp_index+0x124>)
 801054e:	4613      	mov	r3, r2
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4413      	add	r3, r2
 8010554:	00db      	lsls	r3, r3, #3
 8010556:	440b      	add	r3, r1
 8010558:	3314      	adds	r3, #20
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	2b02      	cmp	r3, #2
 801055e:	d153      	bne.n	8010608 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010560:	79fa      	ldrb	r2, [r7, #7]
 8010562:	4936      	ldr	r1, [pc, #216]	; (801063c <etharp_output_to_arp_index+0x124>)
 8010564:	4613      	mov	r3, r2
 8010566:	005b      	lsls	r3, r3, #1
 8010568:	4413      	add	r3, r2
 801056a:	00db      	lsls	r3, r3, #3
 801056c:	440b      	add	r3, r1
 801056e:	3312      	adds	r3, #18
 8010570:	881b      	ldrh	r3, [r3, #0]
 8010572:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010576:	d919      	bls.n	80105ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010578:	79fa      	ldrb	r2, [r7, #7]
 801057a:	4613      	mov	r3, r2
 801057c:	005b      	lsls	r3, r3, #1
 801057e:	4413      	add	r3, r2
 8010580:	00db      	lsls	r3, r3, #3
 8010582:	4a2e      	ldr	r2, [pc, #184]	; (801063c <etharp_output_to_arp_index+0x124>)
 8010584:	4413      	add	r3, r2
 8010586:	3304      	adds	r3, #4
 8010588:	4619      	mov	r1, r3
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f000 fb4c 	bl	8010c28 <etharp_request>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d138      	bne.n	8010608 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010596:	79fa      	ldrb	r2, [r7, #7]
 8010598:	4928      	ldr	r1, [pc, #160]	; (801063c <etharp_output_to_arp_index+0x124>)
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	440b      	add	r3, r1
 80105a4:	3314      	adds	r3, #20
 80105a6:	2203      	movs	r2, #3
 80105a8:	701a      	strb	r2, [r3, #0]
 80105aa:	e02d      	b.n	8010608 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80105ac:	79fa      	ldrb	r2, [r7, #7]
 80105ae:	4923      	ldr	r1, [pc, #140]	; (801063c <etharp_output_to_arp_index+0x124>)
 80105b0:	4613      	mov	r3, r2
 80105b2:	005b      	lsls	r3, r3, #1
 80105b4:	4413      	add	r3, r2
 80105b6:	00db      	lsls	r3, r3, #3
 80105b8:	440b      	add	r3, r1
 80105ba:	3312      	adds	r3, #18
 80105bc:	881b      	ldrh	r3, [r3, #0]
 80105be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80105c2:	d321      	bcc.n	8010608 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80105c4:	79fa      	ldrb	r2, [r7, #7]
 80105c6:	4613      	mov	r3, r2
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	00db      	lsls	r3, r3, #3
 80105ce:	4a1b      	ldr	r2, [pc, #108]	; (801063c <etharp_output_to_arp_index+0x124>)
 80105d0:	4413      	add	r3, r2
 80105d2:	1d19      	adds	r1, r3, #4
 80105d4:	79fa      	ldrb	r2, [r7, #7]
 80105d6:	4613      	mov	r3, r2
 80105d8:	005b      	lsls	r3, r3, #1
 80105da:	4413      	add	r3, r2
 80105dc:	00db      	lsls	r3, r3, #3
 80105de:	3308      	adds	r3, #8
 80105e0:	4a16      	ldr	r2, [pc, #88]	; (801063c <etharp_output_to_arp_index+0x124>)
 80105e2:	4413      	add	r3, r2
 80105e4:	3304      	adds	r3, #4
 80105e6:	461a      	mov	r2, r3
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	f000 fafb 	bl	8010be4 <etharp_request_dst>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d109      	bne.n	8010608 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80105f4:	79fa      	ldrb	r2, [r7, #7]
 80105f6:	4911      	ldr	r1, [pc, #68]	; (801063c <etharp_output_to_arp_index+0x124>)
 80105f8:	4613      	mov	r3, r2
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	4413      	add	r3, r2
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	440b      	add	r3, r1
 8010602:	3314      	adds	r3, #20
 8010604:	2203      	movs	r2, #3
 8010606:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801060e:	79fa      	ldrb	r2, [r7, #7]
 8010610:	4613      	mov	r3, r2
 8010612:	005b      	lsls	r3, r3, #1
 8010614:	4413      	add	r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	3308      	adds	r3, #8
 801061a:	4a08      	ldr	r2, [pc, #32]	; (801063c <etharp_output_to_arp_index+0x124>)
 801061c:	4413      	add	r3, r2
 801061e:	3304      	adds	r3, #4
 8010620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010624:	9200      	str	r2, [sp, #0]
 8010626:	460a      	mov	r2, r1
 8010628:	68b9      	ldr	r1, [r7, #8]
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f001 fe5e 	bl	80122ec <ethernet_output>
 8010630:	4603      	mov	r3, r0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	2000a844 	.word	0x2000a844
 8010640:	08015a74 	.word	0x08015a74
 8010644:	08015be4 	.word	0x08015be4
 8010648:	08015aec 	.word	0x08015aec

0801064c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b08a      	sub	sp, #40	; 0x28
 8010650:	af02      	add	r7, sp, #8
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d106      	bne.n	8010670 <etharp_output+0x24>
 8010662:	4b73      	ldr	r3, [pc, #460]	; (8010830 <etharp_output+0x1e4>)
 8010664:	f240 321e 	movw	r2, #798	; 0x31e
 8010668:	4972      	ldr	r1, [pc, #456]	; (8010834 <etharp_output+0x1e8>)
 801066a:	4873      	ldr	r0, [pc, #460]	; (8010838 <etharp_output+0x1ec>)
 801066c:	f001 ff86 	bl	801257c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d106      	bne.n	8010684 <etharp_output+0x38>
 8010676:	4b6e      	ldr	r3, [pc, #440]	; (8010830 <etharp_output+0x1e4>)
 8010678:	f240 321f 	movw	r2, #799	; 0x31f
 801067c:	496f      	ldr	r1, [pc, #444]	; (801083c <etharp_output+0x1f0>)
 801067e:	486e      	ldr	r0, [pc, #440]	; (8010838 <etharp_output+0x1ec>)
 8010680:	f001 ff7c 	bl	801257c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d106      	bne.n	8010698 <etharp_output+0x4c>
 801068a:	4b69      	ldr	r3, [pc, #420]	; (8010830 <etharp_output+0x1e4>)
 801068c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010690:	496b      	ldr	r1, [pc, #428]	; (8010840 <etharp_output+0x1f4>)
 8010692:	4869      	ldr	r0, [pc, #420]	; (8010838 <etharp_output+0x1ec>)
 8010694:	f001 ff72 	bl	801257c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	68f9      	ldr	r1, [r7, #12]
 801069e:	4618      	mov	r0, r3
 80106a0:	f000 ff16 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d002      	beq.n	80106b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80106aa:	4b66      	ldr	r3, [pc, #408]	; (8010844 <etharp_output+0x1f8>)
 80106ac:	61fb      	str	r3, [r7, #28]
 80106ae:	e0af      	b.n	8010810 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106b8:	2be0      	cmp	r3, #224	; 0xe0
 80106ba:	d118      	bne.n	80106ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80106bc:	2301      	movs	r3, #1
 80106be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80106c0:	2300      	movs	r3, #0
 80106c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80106c4:	235e      	movs	r3, #94	; 0x5e
 80106c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	3301      	adds	r3, #1
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	3302      	adds	r3, #2
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	3303      	adds	r3, #3
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80106e6:	f107 0310 	add.w	r3, r7, #16
 80106ea:	61fb      	str	r3, [r7, #28]
 80106ec:	e090      	b.n	8010810 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	3304      	adds	r3, #4
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	405a      	eors	r2, r3
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	3308      	adds	r3, #8
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4013      	ands	r3, r2
 8010702:	2b00      	cmp	r3, #0
 8010704:	d012      	beq.n	801072c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801070c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010710:	4293      	cmp	r3, r2
 8010712:	d00b      	beq.n	801072c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	330c      	adds	r3, #12
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d003      	beq.n	8010726 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	330c      	adds	r3, #12
 8010722:	61bb      	str	r3, [r7, #24]
 8010724:	e002      	b.n	801072c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010726:	f06f 0303 	mvn.w	r3, #3
 801072a:	e07d      	b.n	8010828 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801072c:	4b46      	ldr	r3, [pc, #280]	; (8010848 <etharp_output+0x1fc>)
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	4619      	mov	r1, r3
 8010732:	4a46      	ldr	r2, [pc, #280]	; (801084c <etharp_output+0x200>)
 8010734:	460b      	mov	r3, r1
 8010736:	005b      	lsls	r3, r3, #1
 8010738:	440b      	add	r3, r1
 801073a:	00db      	lsls	r3, r3, #3
 801073c:	4413      	add	r3, r2
 801073e:	3314      	adds	r3, #20
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	2b01      	cmp	r3, #1
 8010744:	d925      	bls.n	8010792 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010746:	4b40      	ldr	r3, [pc, #256]	; (8010848 <etharp_output+0x1fc>)
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	4619      	mov	r1, r3
 801074c:	4a3f      	ldr	r2, [pc, #252]	; (801084c <etharp_output+0x200>)
 801074e:	460b      	mov	r3, r1
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	440b      	add	r3, r1
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	4413      	add	r3, r2
 8010758:	3308      	adds	r3, #8
 801075a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801075c:	68fa      	ldr	r2, [r7, #12]
 801075e:	429a      	cmp	r2, r3
 8010760:	d117      	bne.n	8010792 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010762:	69bb      	ldr	r3, [r7, #24]
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	4b38      	ldr	r3, [pc, #224]	; (8010848 <etharp_output+0x1fc>)
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	4618      	mov	r0, r3
 801076c:	4937      	ldr	r1, [pc, #220]	; (801084c <etharp_output+0x200>)
 801076e:	4603      	mov	r3, r0
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	4403      	add	r3, r0
 8010774:	00db      	lsls	r3, r3, #3
 8010776:	440b      	add	r3, r1
 8010778:	3304      	adds	r3, #4
 801077a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801077c:	429a      	cmp	r2, r3
 801077e:	d108      	bne.n	8010792 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010780:	4b31      	ldr	r3, [pc, #196]	; (8010848 <etharp_output+0x1fc>)
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	461a      	mov	r2, r3
 8010786:	68b9      	ldr	r1, [r7, #8]
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f7ff fec5 	bl	8010518 <etharp_output_to_arp_index>
 801078e:	4603      	mov	r3, r0
 8010790:	e04a      	b.n	8010828 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010792:	2300      	movs	r3, #0
 8010794:	75fb      	strb	r3, [r7, #23]
 8010796:	e031      	b.n	80107fc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010798:	7dfa      	ldrb	r2, [r7, #23]
 801079a:	492c      	ldr	r1, [pc, #176]	; (801084c <etharp_output+0x200>)
 801079c:	4613      	mov	r3, r2
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	4413      	add	r3, r2
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	440b      	add	r3, r1
 80107a6:	3314      	adds	r3, #20
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d923      	bls.n	80107f6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80107ae:	7dfa      	ldrb	r2, [r7, #23]
 80107b0:	4926      	ldr	r1, [pc, #152]	; (801084c <etharp_output+0x200>)
 80107b2:	4613      	mov	r3, r2
 80107b4:	005b      	lsls	r3, r3, #1
 80107b6:	4413      	add	r3, r2
 80107b8:	00db      	lsls	r3, r3, #3
 80107ba:	440b      	add	r3, r1
 80107bc:	3308      	adds	r3, #8
 80107be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d117      	bne.n	80107f6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80107c6:	69bb      	ldr	r3, [r7, #24]
 80107c8:	6819      	ldr	r1, [r3, #0]
 80107ca:	7dfa      	ldrb	r2, [r7, #23]
 80107cc:	481f      	ldr	r0, [pc, #124]	; (801084c <etharp_output+0x200>)
 80107ce:	4613      	mov	r3, r2
 80107d0:	005b      	lsls	r3, r3, #1
 80107d2:	4413      	add	r3, r2
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	4403      	add	r3, r0
 80107d8:	3304      	adds	r3, #4
 80107da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80107dc:	4299      	cmp	r1, r3
 80107de:	d10a      	bne.n	80107f6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80107e0:	4a19      	ldr	r2, [pc, #100]	; (8010848 <etharp_output+0x1fc>)
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80107e6:	7dfb      	ldrb	r3, [r7, #23]
 80107e8:	461a      	mov	r2, r3
 80107ea:	68b9      	ldr	r1, [r7, #8]
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f7ff fe93 	bl	8010518 <etharp_output_to_arp_index>
 80107f2:	4603      	mov	r3, r0
 80107f4:	e018      	b.n	8010828 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80107f6:	7dfb      	ldrb	r3, [r7, #23]
 80107f8:	3301      	adds	r3, #1
 80107fa:	75fb      	strb	r3, [r7, #23]
 80107fc:	7dfb      	ldrb	r3, [r7, #23]
 80107fe:	2b09      	cmp	r3, #9
 8010800:	d9ca      	bls.n	8010798 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010802:	68ba      	ldr	r2, [r7, #8]
 8010804:	69b9      	ldr	r1, [r7, #24]
 8010806:	68f8      	ldr	r0, [r7, #12]
 8010808:	f000 f822 	bl	8010850 <etharp_query>
 801080c:	4603      	mov	r3, r0
 801080e:	e00b      	b.n	8010828 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801081a:	9300      	str	r3, [sp, #0]
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	68b9      	ldr	r1, [r7, #8]
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f001 fd63 	bl	80122ec <ethernet_output>
 8010826:	4603      	mov	r3, r0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3720      	adds	r7, #32
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	08015a74 	.word	0x08015a74
 8010834:	08015bc4 	.word	0x08015bc4
 8010838:	08015aec 	.word	0x08015aec
 801083c:	08015c14 	.word	0x08015c14
 8010840:	08015bb4 	.word	0x08015bb4
 8010844:	08016244 	.word	0x08016244
 8010848:	2000a934 	.word	0x2000a934
 801084c:	2000a844 	.word	0x2000a844

08010850 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b08c      	sub	sp, #48	; 0x30
 8010854:	af02      	add	r7, sp, #8
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	332a      	adds	r3, #42	; 0x2a
 8010860:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010862:	23ff      	movs	r3, #255	; 0xff
 8010864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010868:	2300      	movs	r3, #0
 801086a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68f9      	ldr	r1, [r7, #12]
 8010872:	4618      	mov	r0, r3
 8010874:	f000 fe2c 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d10c      	bne.n	8010898 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010886:	2be0      	cmp	r3, #224	; 0xe0
 8010888:	d006      	beq.n	8010898 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d003      	beq.n	8010898 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d102      	bne.n	801089e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010898:	f06f 030f 	mvn.w	r3, #15
 801089c:	e101      	b.n	8010aa2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	2101      	movs	r1, #1
 80108a2:	68b8      	ldr	r0, [r7, #8]
 80108a4:	f7ff fb5c 	bl	800ff60 <etharp_find_entry>
 80108a8:	4603      	mov	r3, r0
 80108aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80108ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	da02      	bge.n	80108ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80108b4:	8a7b      	ldrh	r3, [r7, #18]
 80108b6:	b25b      	sxtb	r3, r3
 80108b8:	e0f3      	b.n	8010aa2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80108ba:	8a7b      	ldrh	r3, [r7, #18]
 80108bc:	2b7e      	cmp	r3, #126	; 0x7e
 80108be:	d906      	bls.n	80108ce <etharp_query+0x7e>
 80108c0:	4b7a      	ldr	r3, [pc, #488]	; (8010aac <etharp_query+0x25c>)
 80108c2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80108c6:	497a      	ldr	r1, [pc, #488]	; (8010ab0 <etharp_query+0x260>)
 80108c8:	487a      	ldr	r0, [pc, #488]	; (8010ab4 <etharp_query+0x264>)
 80108ca:	f001 fe57 	bl	801257c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80108ce:	8a7b      	ldrh	r3, [r7, #18]
 80108d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80108d2:	7c7a      	ldrb	r2, [r7, #17]
 80108d4:	4978      	ldr	r1, [pc, #480]	; (8010ab8 <etharp_query+0x268>)
 80108d6:	4613      	mov	r3, r2
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	4413      	add	r3, r2
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	440b      	add	r3, r1
 80108e0:	3314      	adds	r3, #20
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d115      	bne.n	8010914 <etharp_query+0xc4>
    is_new_entry = 1;
 80108e8:	2301      	movs	r3, #1
 80108ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80108ec:	7c7a      	ldrb	r2, [r7, #17]
 80108ee:	4972      	ldr	r1, [pc, #456]	; (8010ab8 <etharp_query+0x268>)
 80108f0:	4613      	mov	r3, r2
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	4413      	add	r3, r2
 80108f6:	00db      	lsls	r3, r3, #3
 80108f8:	440b      	add	r3, r1
 80108fa:	3314      	adds	r3, #20
 80108fc:	2201      	movs	r2, #1
 80108fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010900:	7c7a      	ldrb	r2, [r7, #17]
 8010902:	496d      	ldr	r1, [pc, #436]	; (8010ab8 <etharp_query+0x268>)
 8010904:	4613      	mov	r3, r2
 8010906:	005b      	lsls	r3, r3, #1
 8010908:	4413      	add	r3, r2
 801090a:	00db      	lsls	r3, r3, #3
 801090c:	440b      	add	r3, r1
 801090e:	3308      	adds	r3, #8
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010914:	7c7a      	ldrb	r2, [r7, #17]
 8010916:	4968      	ldr	r1, [pc, #416]	; (8010ab8 <etharp_query+0x268>)
 8010918:	4613      	mov	r3, r2
 801091a:	005b      	lsls	r3, r3, #1
 801091c:	4413      	add	r3, r2
 801091e:	00db      	lsls	r3, r3, #3
 8010920:	440b      	add	r3, r1
 8010922:	3314      	adds	r3, #20
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b01      	cmp	r3, #1
 8010928:	d011      	beq.n	801094e <etharp_query+0xfe>
 801092a:	7c7a      	ldrb	r2, [r7, #17]
 801092c:	4962      	ldr	r1, [pc, #392]	; (8010ab8 <etharp_query+0x268>)
 801092e:	4613      	mov	r3, r2
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	4413      	add	r3, r2
 8010934:	00db      	lsls	r3, r3, #3
 8010936:	440b      	add	r3, r1
 8010938:	3314      	adds	r3, #20
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	2b01      	cmp	r3, #1
 801093e:	d806      	bhi.n	801094e <etharp_query+0xfe>
 8010940:	4b5a      	ldr	r3, [pc, #360]	; (8010aac <etharp_query+0x25c>)
 8010942:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010946:	495d      	ldr	r1, [pc, #372]	; (8010abc <etharp_query+0x26c>)
 8010948:	485a      	ldr	r0, [pc, #360]	; (8010ab4 <etharp_query+0x264>)
 801094a:	f001 fe17 	bl	801257c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801094e:	6a3b      	ldr	r3, [r7, #32]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d102      	bne.n	801095a <etharp_query+0x10a>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d10c      	bne.n	8010974 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801095a:	68b9      	ldr	r1, [r7, #8]
 801095c:	68f8      	ldr	r0, [r7, #12]
 801095e:	f000 f963 	bl	8010c28 <etharp_request>
 8010962:	4603      	mov	r3, r0
 8010964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d102      	bne.n	8010974 <etharp_query+0x124>
      return result;
 801096e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010972:	e096      	b.n	8010aa2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d106      	bne.n	8010988 <etharp_query+0x138>
 801097a:	4b4c      	ldr	r3, [pc, #304]	; (8010aac <etharp_query+0x25c>)
 801097c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010980:	494f      	ldr	r1, [pc, #316]	; (8010ac0 <etharp_query+0x270>)
 8010982:	484c      	ldr	r0, [pc, #304]	; (8010ab4 <etharp_query+0x264>)
 8010984:	f001 fdfa 	bl	801257c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010988:	7c7a      	ldrb	r2, [r7, #17]
 801098a:	494b      	ldr	r1, [pc, #300]	; (8010ab8 <etharp_query+0x268>)
 801098c:	4613      	mov	r3, r2
 801098e:	005b      	lsls	r3, r3, #1
 8010990:	4413      	add	r3, r2
 8010992:	00db      	lsls	r3, r3, #3
 8010994:	440b      	add	r3, r1
 8010996:	3314      	adds	r3, #20
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	2b01      	cmp	r3, #1
 801099c:	d917      	bls.n	80109ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801099e:	4a49      	ldr	r2, [pc, #292]	; (8010ac4 <etharp_query+0x274>)
 80109a0:	7c7b      	ldrb	r3, [r7, #17]
 80109a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80109a4:	7c7a      	ldrb	r2, [r7, #17]
 80109a6:	4613      	mov	r3, r2
 80109a8:	005b      	lsls	r3, r3, #1
 80109aa:	4413      	add	r3, r2
 80109ac:	00db      	lsls	r3, r3, #3
 80109ae:	3308      	adds	r3, #8
 80109b0:	4a41      	ldr	r2, [pc, #260]	; (8010ab8 <etharp_query+0x268>)
 80109b2:	4413      	add	r3, r2
 80109b4:	3304      	adds	r3, #4
 80109b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80109ba:	9200      	str	r2, [sp, #0]
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	6879      	ldr	r1, [r7, #4]
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f001 fc93 	bl	80122ec <ethernet_output>
 80109c6:	4603      	mov	r3, r0
 80109c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109cc:	e067      	b.n	8010a9e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80109ce:	7c7a      	ldrb	r2, [r7, #17]
 80109d0:	4939      	ldr	r1, [pc, #228]	; (8010ab8 <etharp_query+0x268>)
 80109d2:	4613      	mov	r3, r2
 80109d4:	005b      	lsls	r3, r3, #1
 80109d6:	4413      	add	r3, r2
 80109d8:	00db      	lsls	r3, r3, #3
 80109da:	440b      	add	r3, r1
 80109dc:	3314      	adds	r3, #20
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d15c      	bne.n	8010a9e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80109e4:	2300      	movs	r3, #0
 80109e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80109ec:	e01c      	b.n	8010a28 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	895a      	ldrh	r2, [r3, #10]
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	891b      	ldrh	r3, [r3, #8]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d10a      	bne.n	8010a10 <etharp_query+0x1c0>
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d006      	beq.n	8010a10 <etharp_query+0x1c0>
 8010a02:	4b2a      	ldr	r3, [pc, #168]	; (8010aac <etharp_query+0x25c>)
 8010a04:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010a08:	492f      	ldr	r1, [pc, #188]	; (8010ac8 <etharp_query+0x278>)
 8010a0a:	482a      	ldr	r0, [pc, #168]	; (8010ab4 <etharp_query+0x264>)
 8010a0c:	f001 fdb6 	bl	801257c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	7b1b      	ldrb	r3, [r3, #12]
 8010a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d002      	beq.n	8010a22 <etharp_query+0x1d2>
        copy_needed = 1;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	61bb      	str	r3, [r7, #24]
        break;
 8010a20:	e005      	b.n	8010a2e <etharp_query+0x1de>
      }
      p = p->next;
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d1df      	bne.n	80109ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010a2e:	69bb      	ldr	r3, [r7, #24]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d007      	beq.n	8010a44 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010a3a:	200e      	movs	r0, #14
 8010a3c:	f7f7 fbd0 	bl	80081e0 <pbuf_clone>
 8010a40:	61f8      	str	r0, [r7, #28]
 8010a42:	e004      	b.n	8010a4e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010a48:	69f8      	ldr	r0, [r7, #28]
 8010a4a:	f7f7 f9fd 	bl	8007e48 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d021      	beq.n	8010a98 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010a54:	7c7a      	ldrb	r2, [r7, #17]
 8010a56:	4918      	ldr	r1, [pc, #96]	; (8010ab8 <etharp_query+0x268>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	4413      	add	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	440b      	add	r3, r1
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00a      	beq.n	8010a7e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010a68:	7c7a      	ldrb	r2, [r7, #17]
 8010a6a:	4913      	ldr	r1, [pc, #76]	; (8010ab8 <etharp_query+0x268>)
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	440b      	add	r3, r1
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7f7 f945 	bl	8007d08 <pbuf_free>
      }
      arp_table[i].q = p;
 8010a7e:	7c7a      	ldrb	r2, [r7, #17]
 8010a80:	490d      	ldr	r1, [pc, #52]	; (8010ab8 <etharp_query+0x268>)
 8010a82:	4613      	mov	r3, r2
 8010a84:	005b      	lsls	r3, r3, #1
 8010a86:	4413      	add	r3, r2
 8010a88:	00db      	lsls	r3, r3, #3
 8010a8a:	440b      	add	r3, r1
 8010a8c:	69fa      	ldr	r2, [r7, #28]
 8010a8e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a96:	e002      	b.n	8010a9e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010a98:	23ff      	movs	r3, #255	; 0xff
 8010a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010a9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3728      	adds	r7, #40	; 0x28
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	08015a74 	.word	0x08015a74
 8010ab0:	08015c20 	.word	0x08015c20
 8010ab4:	08015aec 	.word	0x08015aec
 8010ab8:	2000a844 	.word	0x2000a844
 8010abc:	08015c30 	.word	0x08015c30
 8010ac0:	08015c14 	.word	0x08015c14
 8010ac4:	2000a934 	.word	0x2000a934
 8010ac8:	08015c58 	.word	0x08015c58

08010acc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b08a      	sub	sp, #40	; 0x28
 8010ad0:	af02      	add	r7, sp, #8
 8010ad2:	60f8      	str	r0, [r7, #12]
 8010ad4:	60b9      	str	r1, [r7, #8]
 8010ad6:	607a      	str	r2, [r7, #4]
 8010ad8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010ada:	2300      	movs	r3, #0
 8010adc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d106      	bne.n	8010af2 <etharp_raw+0x26>
 8010ae4:	4b3a      	ldr	r3, [pc, #232]	; (8010bd0 <etharp_raw+0x104>)
 8010ae6:	f240 4257 	movw	r2, #1111	; 0x457
 8010aea:	493a      	ldr	r1, [pc, #232]	; (8010bd4 <etharp_raw+0x108>)
 8010aec:	483a      	ldr	r0, [pc, #232]	; (8010bd8 <etharp_raw+0x10c>)
 8010aee:	f001 fd45 	bl	801257c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010af2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010af6:	211c      	movs	r1, #28
 8010af8:	200e      	movs	r0, #14
 8010afa:	f7f6 fe21 	bl	8007740 <pbuf_alloc>
 8010afe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010b00:	69bb      	ldr	r3, [r7, #24]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d102      	bne.n	8010b0c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b0a:	e05d      	b.n	8010bc8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	895b      	ldrh	r3, [r3, #10]
 8010b10:	2b1b      	cmp	r3, #27
 8010b12:	d806      	bhi.n	8010b22 <etharp_raw+0x56>
 8010b14:	4b2e      	ldr	r3, [pc, #184]	; (8010bd0 <etharp_raw+0x104>)
 8010b16:	f240 4262 	movw	r2, #1122	; 0x462
 8010b1a:	4930      	ldr	r1, [pc, #192]	; (8010bdc <etharp_raw+0x110>)
 8010b1c:	482e      	ldr	r0, [pc, #184]	; (8010bd8 <etharp_raw+0x10c>)
 8010b1e:	f001 fd2d 	bl	801257c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010b22:	69bb      	ldr	r3, [r7, #24]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010b28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7f5 fda2 	bl	8006674 <lwip_htons>
 8010b30:	4603      	mov	r3, r0
 8010b32:	461a      	mov	r2, r3
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b3e:	2b06      	cmp	r3, #6
 8010b40:	d006      	beq.n	8010b50 <etharp_raw+0x84>
 8010b42:	4b23      	ldr	r3, [pc, #140]	; (8010bd0 <etharp_raw+0x104>)
 8010b44:	f240 4269 	movw	r2, #1129	; 0x469
 8010b48:	4925      	ldr	r1, [pc, #148]	; (8010be0 <etharp_raw+0x114>)
 8010b4a:	4823      	ldr	r0, [pc, #140]	; (8010bd8 <etharp_raw+0x10c>)
 8010b4c:	f001 fd16 	bl	801257c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	3308      	adds	r3, #8
 8010b54:	2206      	movs	r2, #6
 8010b56:	6839      	ldr	r1, [r7, #0]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f001 fdea 	bl	8012732 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	3312      	adds	r3, #18
 8010b62:	2206      	movs	r2, #6
 8010b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b66:	4618      	mov	r0, r3
 8010b68:	f001 fde3 	bl	8012732 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	330e      	adds	r3, #14
 8010b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b72:	6812      	ldr	r2, [r2, #0]
 8010b74:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	3318      	adds	r3, #24
 8010b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b7c:	6812      	ldr	r2, [r2, #0]
 8010b7e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	2200      	movs	r2, #0
 8010b84:	701a      	strb	r2, [r3, #0]
 8010b86:	2200      	movs	r2, #0
 8010b88:	f042 0201 	orr.w	r2, r2, #1
 8010b8c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f042 0208 	orr.w	r2, r2, #8
 8010b96:	709a      	strb	r2, [r3, #2]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	2206      	movs	r2, #6
 8010ba0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	2204      	movs	r2, #4
 8010ba6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010ba8:	f640 0306 	movw	r3, #2054	; 0x806
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	68ba      	ldr	r2, [r7, #8]
 8010bb2:	69b9      	ldr	r1, [r7, #24]
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f001 fb99 	bl	80122ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010bba:	69b8      	ldr	r0, [r7, #24]
 8010bbc:	f7f7 f8a4 	bl	8007d08 <pbuf_free>
  p = NULL;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010bc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3720      	adds	r7, #32
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	08015a74 	.word	0x08015a74
 8010bd4:	08015bc4 	.word	0x08015bc4
 8010bd8:	08015aec 	.word	0x08015aec
 8010bdc:	08015c74 	.word	0x08015c74
 8010be0:	08015ca8 	.word	0x08015ca8

08010be4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af04      	add	r7, sp, #16
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010c00:	2201      	movs	r2, #1
 8010c02:	9203      	str	r2, [sp, #12]
 8010c04:	68ba      	ldr	r2, [r7, #8]
 8010c06:	9202      	str	r2, [sp, #8]
 8010c08:	4a06      	ldr	r2, [pc, #24]	; (8010c24 <etharp_request_dst+0x40>)
 8010c0a:	9201      	str	r2, [sp, #4]
 8010c0c:	9300      	str	r3, [sp, #0]
 8010c0e:	4603      	mov	r3, r0
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7ff ff5a 	bl	8010acc <etharp_raw>
 8010c18:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	0801624c 	.word	0x0801624c

08010c28 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010c32:	4a05      	ldr	r2, [pc, #20]	; (8010c48 <etharp_request+0x20>)
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7ff ffd4 	bl	8010be4 <etharp_request_dst>
 8010c3c:	4603      	mov	r3, r0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	08016244 	.word	0x08016244

08010c4c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b08e      	sub	sp, #56	; 0x38
 8010c50:	af04      	add	r7, sp, #16
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010c56:	4b79      	ldr	r3, [pc, #484]	; (8010e3c <icmp_input+0x1f0>)
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	f003 030f 	and.w	r3, r3, #15
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c6e:	2b13      	cmp	r3, #19
 8010c70:	f240 80cd 	bls.w	8010e0e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	895b      	ldrh	r3, [r3, #10]
 8010c78:	2b03      	cmp	r3, #3
 8010c7a:	f240 80ca 	bls.w	8010e12 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010c88:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f000 80b7 	beq.w	8010e00 <icmp_input+0x1b4>
 8010c92:	2b08      	cmp	r3, #8
 8010c94:	f040 80b7 	bne.w	8010e06 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010c98:	4b69      	ldr	r3, [pc, #420]	; (8010e40 <icmp_input+0x1f4>)
 8010c9a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010c9c:	4b67      	ldr	r3, [pc, #412]	; (8010e3c <icmp_input+0x1f0>)
 8010c9e:	695b      	ldr	r3, [r3, #20]
 8010ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ca4:	2be0      	cmp	r3, #224	; 0xe0
 8010ca6:	f000 80bb 	beq.w	8010e20 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010caa:	4b64      	ldr	r3, [pc, #400]	; (8010e3c <icmp_input+0x1f0>)
 8010cac:	695b      	ldr	r3, [r3, #20]
 8010cae:	4a63      	ldr	r2, [pc, #396]	; (8010e3c <icmp_input+0x1f0>)
 8010cb0:	6812      	ldr	r2, [r2, #0]
 8010cb2:	4611      	mov	r1, r2
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f000 fc0b 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f040 80b1 	bne.w	8010e24 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	891b      	ldrh	r3, [r3, #8]
 8010cc6:	2b07      	cmp	r3, #7
 8010cc8:	f240 80a5 	bls.w	8010e16 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cce:	330e      	adds	r3, #14
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7f6 ff82 	bl	8007bdc <pbuf_add_header>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d04b      	beq.n	8010d76 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	891a      	ldrh	r2, [r3, #8]
 8010ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ce4:	4413      	add	r3, r2
 8010ce6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	891b      	ldrh	r3, [r3, #8]
 8010cec:	8b7a      	ldrh	r2, [r7, #26]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	f0c0 809a 	bcc.w	8010e28 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010cf4:	8b7b      	ldrh	r3, [r7, #26]
 8010cf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	200e      	movs	r0, #14
 8010cfe:	f7f6 fd1f 	bl	8007740 <pbuf_alloc>
 8010d02:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f000 8090 	beq.w	8010e2c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	895b      	ldrh	r3, [r3, #10]
 8010d10:	461a      	mov	r2, r3
 8010d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d14:	3308      	adds	r3, #8
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d203      	bcs.n	8010d22 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010d1a:	6978      	ldr	r0, [r7, #20]
 8010d1c:	f7f6 fff4 	bl	8007d08 <pbuf_free>
          goto icmperr;
 8010d20:	e085      	b.n	8010e2e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f001 fd01 	bl	8012732 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d32:	4619      	mov	r1, r3
 8010d34:	6978      	ldr	r0, [r7, #20]
 8010d36:	f7f6 ff61 	bl	8007bfc <pbuf_remove_header>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d009      	beq.n	8010d54 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010d40:	4b40      	ldr	r3, [pc, #256]	; (8010e44 <icmp_input+0x1f8>)
 8010d42:	22b6      	movs	r2, #182	; 0xb6
 8010d44:	4940      	ldr	r1, [pc, #256]	; (8010e48 <icmp_input+0x1fc>)
 8010d46:	4841      	ldr	r0, [pc, #260]	; (8010e4c <icmp_input+0x200>)
 8010d48:	f001 fc18 	bl	801257c <iprintf>
          pbuf_free(r);
 8010d4c:	6978      	ldr	r0, [r7, #20]
 8010d4e:	f7f6 ffdb 	bl	8007d08 <pbuf_free>
          goto icmperr;
 8010d52:	e06c      	b.n	8010e2e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010d54:	6879      	ldr	r1, [r7, #4]
 8010d56:	6978      	ldr	r0, [r7, #20]
 8010d58:	f7f7 f8fe 	bl	8007f58 <pbuf_copy>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d003      	beq.n	8010d6a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010d62:	6978      	ldr	r0, [r7, #20]
 8010d64:	f7f6 ffd0 	bl	8007d08 <pbuf_free>
          goto icmperr;
 8010d68:	e061      	b.n	8010e2e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f7f6 ffcc 	bl	8007d08 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	607b      	str	r3, [r7, #4]
 8010d74:	e00f      	b.n	8010d96 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d78:	330e      	adds	r3, #14
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7f6 ff3d 	bl	8007bfc <pbuf_remove_header>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d006      	beq.n	8010d96 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010d88:	4b2e      	ldr	r3, [pc, #184]	; (8010e44 <icmp_input+0x1f8>)
 8010d8a:	22c7      	movs	r2, #199	; 0xc7
 8010d8c:	4930      	ldr	r1, [pc, #192]	; (8010e50 <icmp_input+0x204>)
 8010d8e:	482f      	ldr	r0, [pc, #188]	; (8010e4c <icmp_input+0x200>)
 8010d90:	f001 fbf4 	bl	801257c <iprintf>
          goto icmperr;
 8010d94:	e04b      	b.n	8010e2e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d9e:	4619      	mov	r1, r3
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7f6 ff1b 	bl	8007bdc <pbuf_add_header>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d12b      	bne.n	8010e04 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	685b      	ldr	r3, [r3, #4]
 8010db0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010db2:	69fb      	ldr	r3, [r7, #28]
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010dba:	4b20      	ldr	r3, [pc, #128]	; (8010e3c <icmp_input+0x1f0>)
 8010dbc:	691a      	ldr	r2, [r3, #16]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	709a      	strb	r2, [r3, #2]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	22ff      	movs	r2, #255	; 0xff
 8010dd6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	729a      	strb	r2, [r3, #10]
 8010dde:	2200      	movs	r2, #0
 8010de0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	9302      	str	r3, [sp, #8]
 8010de6:	2301      	movs	r3, #1
 8010de8:	9301      	str	r3, [sp, #4]
 8010dea:	2300      	movs	r3, #0
 8010dec:	9300      	str	r3, [sp, #0]
 8010dee:	23ff      	movs	r3, #255	; 0xff
 8010df0:	2200      	movs	r2, #0
 8010df2:	69f9      	ldr	r1, [r7, #28]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 fa93 	bl	8011320 <ip4_output_if>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010dfe:	e001      	b.n	8010e04 <icmp_input+0x1b8>
      break;
 8010e00:	bf00      	nop
 8010e02:	e000      	b.n	8010e06 <icmp_input+0x1ba>
      break;
 8010e04:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f7f6 ff7e 	bl	8007d08 <pbuf_free>
  return;
 8010e0c:	e013      	b.n	8010e36 <icmp_input+0x1ea>
    goto lenerr;
 8010e0e:	bf00      	nop
 8010e10:	e002      	b.n	8010e18 <icmp_input+0x1cc>
    goto lenerr;
 8010e12:	bf00      	nop
 8010e14:	e000      	b.n	8010e18 <icmp_input+0x1cc>
        goto lenerr;
 8010e16:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7f6 ff75 	bl	8007d08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010e1e:	e00a      	b.n	8010e36 <icmp_input+0x1ea>
        goto icmperr;
 8010e20:	bf00      	nop
 8010e22:	e004      	b.n	8010e2e <icmp_input+0x1e2>
        goto icmperr;
 8010e24:	bf00      	nop
 8010e26:	e002      	b.n	8010e2e <icmp_input+0x1e2>
          goto icmperr;
 8010e28:	bf00      	nop
 8010e2a:	e000      	b.n	8010e2e <icmp_input+0x1e2>
          goto icmperr;
 8010e2c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7f6 ff6a 	bl	8007d08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010e34:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010e36:	3728      	adds	r7, #40	; 0x28
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	20005060 	.word	0x20005060
 8010e40:	20005074 	.word	0x20005074
 8010e44:	08015cec 	.word	0x08015cec
 8010e48:	08015d24 	.word	0x08015d24
 8010e4c:	08015d5c 	.word	0x08015d5c
 8010e50:	08015d84 	.word	0x08015d84

08010e54 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010e60:	78fb      	ldrb	r3, [r7, #3]
 8010e62:	461a      	mov	r2, r3
 8010e64:	2103      	movs	r1, #3
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 f814 	bl	8010e94 <icmp_send_response>
}
 8010e6c:	bf00      	nop
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010e80:	78fb      	ldrb	r3, [r7, #3]
 8010e82:	461a      	mov	r2, r3
 8010e84:	210b      	movs	r1, #11
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 f804 	bl	8010e94 <icmp_send_response>
}
 8010e8c:	bf00      	nop
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b08c      	sub	sp, #48	; 0x30
 8010e98:	af04      	add	r7, sp, #16
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
 8010ea0:	4613      	mov	r3, r2
 8010ea2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ea8:	2124      	movs	r1, #36	; 0x24
 8010eaa:	2022      	movs	r0, #34	; 0x22
 8010eac:	f7f6 fc48 	bl	8007740 <pbuf_alloc>
 8010eb0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d04c      	beq.n	8010f52 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	895b      	ldrh	r3, [r3, #10]
 8010ebc:	2b23      	cmp	r3, #35	; 0x23
 8010ebe:	d806      	bhi.n	8010ece <icmp_send_response+0x3a>
 8010ec0:	4b26      	ldr	r3, [pc, #152]	; (8010f5c <icmp_send_response+0xc8>)
 8010ec2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010ec6:	4926      	ldr	r1, [pc, #152]	; (8010f60 <icmp_send_response+0xcc>)
 8010ec8:	4826      	ldr	r0, [pc, #152]	; (8010f64 <icmp_send_response+0xd0>)
 8010eca:	f001 fb57 	bl	801257c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	78fa      	ldrb	r2, [r7, #3]
 8010ede:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	78ba      	ldrb	r2, [r7, #2]
 8010ee4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	711a      	strb	r2, [r3, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	719a      	strb	r2, [r3, #6]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	f103 0008 	add.w	r0, r3, #8
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	221c      	movs	r2, #28
 8010f08:	4619      	mov	r1, r3
 8010f0a:	f001 fc12 	bl	8012732 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010f14:	f107 030c 	add.w	r3, r7, #12
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f000 f825 	bl	8010f68 <ip4_route>
 8010f1e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d011      	beq.n	8010f4a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	709a      	strb	r2, [r3, #2]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010f30:	f107 020c 	add.w	r2, r7, #12
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	9302      	str	r3, [sp, #8]
 8010f38:	2301      	movs	r3, #1
 8010f3a:	9301      	str	r3, [sp, #4]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	23ff      	movs	r3, #255	; 0xff
 8010f42:	2100      	movs	r1, #0
 8010f44:	69f8      	ldr	r0, [r7, #28]
 8010f46:	f000 f9eb 	bl	8011320 <ip4_output_if>
  }
  pbuf_free(q);
 8010f4a:	69f8      	ldr	r0, [r7, #28]
 8010f4c:	f7f6 fedc 	bl	8007d08 <pbuf_free>
 8010f50:	e000      	b.n	8010f54 <icmp_send_response+0xc0>
    return;
 8010f52:	bf00      	nop
}
 8010f54:	3720      	adds	r7, #32
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	08015cec 	.word	0x08015cec
 8010f60:	08015db8 	.word	0x08015db8
 8010f64:	08015d5c 	.word	0x08015d5c

08010f68 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010f70:	4b33      	ldr	r3, [pc, #204]	; (8011040 <ip4_route+0xd8>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	60fb      	str	r3, [r7, #12]
 8010f76:	e036      	b.n	8010fe6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f7e:	f003 0301 	and.w	r3, r3, #1
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d02b      	beq.n	8010fe0 <ip4_route+0x78>
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f8e:	089b      	lsrs	r3, r3, #2
 8010f90:	f003 0301 	and.w	r3, r3, #1
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d022      	beq.n	8010fe0 <ip4_route+0x78>
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	3304      	adds	r3, #4
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d01d      	beq.n	8010fe0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	3304      	adds	r3, #4
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	405a      	eors	r2, r3
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	4013      	ands	r3, r2
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d101      	bne.n	8010fc0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	e038      	b.n	8011032 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010fc6:	f003 0302 	and.w	r3, r3, #2
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d108      	bne.n	8010fe0 <ip4_route+0x78>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	330c      	adds	r3, #12
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d101      	bne.n	8010fe0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	e028      	b.n	8011032 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	60fb      	str	r3, [r7, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d1c5      	bne.n	8010f78 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010fec:	4b15      	ldr	r3, [pc, #84]	; (8011044 <ip4_route+0xdc>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d01a      	beq.n	801102a <ip4_route+0xc2>
 8010ff4:	4b13      	ldr	r3, [pc, #76]	; (8011044 <ip4_route+0xdc>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ffc:	f003 0301 	and.w	r3, r3, #1
 8011000:	2b00      	cmp	r3, #0
 8011002:	d012      	beq.n	801102a <ip4_route+0xc2>
 8011004:	4b0f      	ldr	r3, [pc, #60]	; (8011044 <ip4_route+0xdc>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801100c:	f003 0304 	and.w	r3, r3, #4
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00a      	beq.n	801102a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011014:	4b0b      	ldr	r3, [pc, #44]	; (8011044 <ip4_route+0xdc>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	3304      	adds	r3, #4
 801101a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801101c:	2b00      	cmp	r3, #0
 801101e:	d004      	beq.n	801102a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	b2db      	uxtb	r3, r3
 8011026:	2b7f      	cmp	r3, #127	; 0x7f
 8011028:	d101      	bne.n	801102e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801102a:	2300      	movs	r3, #0
 801102c:	e001      	b.n	8011032 <ip4_route+0xca>
  }

  return netif_default;
 801102e:	4b05      	ldr	r3, [pc, #20]	; (8011044 <ip4_route+0xdc>)
 8011030:	681b      	ldr	r3, [r3, #0]
}
 8011032:	4618      	mov	r0, r3
 8011034:	3714      	adds	r7, #20
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr
 801103e:	bf00      	nop
 8011040:	2000a7a4 	.word	0x2000a7a4
 8011044:	2000a7a8 	.word	0x2000a7a8

08011048 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011056:	f003 0301 	and.w	r3, r3, #1
 801105a:	b2db      	uxtb	r3, r3
 801105c:	2b00      	cmp	r3, #0
 801105e:	d016      	beq.n	801108e <ip4_input_accept+0x46>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	3304      	adds	r3, #4
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d011      	beq.n	801108e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801106a:	4b0b      	ldr	r3, [pc, #44]	; (8011098 <ip4_input_accept+0x50>)
 801106c:	695a      	ldr	r2, [r3, #20]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	3304      	adds	r3, #4
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	429a      	cmp	r2, r3
 8011076:	d008      	beq.n	801108a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011078:	4b07      	ldr	r3, [pc, #28]	; (8011098 <ip4_input_accept+0x50>)
 801107a:	695b      	ldr	r3, [r3, #20]
 801107c:	6879      	ldr	r1, [r7, #4]
 801107e:	4618      	mov	r0, r3
 8011080:	f000 fa26 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 8011084:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011086:	2b00      	cmp	r3, #0
 8011088:	d001      	beq.n	801108e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801108a:	2301      	movs	r3, #1
 801108c:	e000      	b.n	8011090 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	20005060 	.word	0x20005060

0801109c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80110a6:	2301      	movs	r3, #1
 80110a8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80110b0:	69fb      	ldr	r3, [r7, #28]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	091b      	lsrs	r3, r3, #4
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	2b04      	cmp	r3, #4
 80110ba:	d004      	beq.n	80110c6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f7f6 fe23 	bl	8007d08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80110c2:	2300      	movs	r3, #0
 80110c4:	e123      	b.n	801130e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	f003 030f 	and.w	r3, r3, #15
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	009b      	lsls	r3, r3, #2
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	885b      	ldrh	r3, [r3, #2]
 80110da:	b29b      	uxth	r3, r3
 80110dc:	4618      	mov	r0, r3
 80110de:	f7f5 fac9 	bl	8006674 <lwip_htons>
 80110e2:	4603      	mov	r3, r0
 80110e4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	891b      	ldrh	r3, [r3, #8]
 80110ea:	8a3a      	ldrh	r2, [r7, #16]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d204      	bcs.n	80110fa <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80110f0:	8a3b      	ldrh	r3, [r7, #16]
 80110f2:	4619      	mov	r1, r3
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7f6 fc81 	bl	80079fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	895b      	ldrh	r3, [r3, #10]
 80110fe:	8a7a      	ldrh	r2, [r7, #18]
 8011100:	429a      	cmp	r2, r3
 8011102:	d807      	bhi.n	8011114 <ip4_input+0x78>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	891b      	ldrh	r3, [r3, #8]
 8011108:	8a3a      	ldrh	r2, [r7, #16]
 801110a:	429a      	cmp	r2, r3
 801110c:	d802      	bhi.n	8011114 <ip4_input+0x78>
 801110e:	8a7b      	ldrh	r3, [r7, #18]
 8011110:	2b13      	cmp	r3, #19
 8011112:	d804      	bhi.n	801111e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f7f6 fdf7 	bl	8007d08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801111a:	2300      	movs	r3, #0
 801111c:	e0f7      	b.n	801130e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	691b      	ldr	r3, [r3, #16]
 8011122:	4a7d      	ldr	r2, [pc, #500]	; (8011318 <ip4_input+0x27c>)
 8011124:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	68db      	ldr	r3, [r3, #12]
 801112a:	4a7b      	ldr	r2, [pc, #492]	; (8011318 <ip4_input+0x27c>)
 801112c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801112e:	4b7a      	ldr	r3, [pc, #488]	; (8011318 <ip4_input+0x27c>)
 8011130:	695b      	ldr	r3, [r3, #20]
 8011132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011136:	2be0      	cmp	r3, #224	; 0xe0
 8011138:	d112      	bne.n	8011160 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011140:	f003 0301 	and.w	r3, r3, #1
 8011144:	b2db      	uxtb	r3, r3
 8011146:	2b00      	cmp	r3, #0
 8011148:	d007      	beq.n	801115a <ip4_input+0xbe>
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	3304      	adds	r3, #4
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d002      	beq.n	801115a <ip4_input+0xbe>
      netif = inp;
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	61bb      	str	r3, [r7, #24]
 8011158:	e02a      	b.n	80111b0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801115a:	2300      	movs	r3, #0
 801115c:	61bb      	str	r3, [r7, #24]
 801115e:	e027      	b.n	80111b0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011160:	6838      	ldr	r0, [r7, #0]
 8011162:	f7ff ff71 	bl	8011048 <ip4_input_accept>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <ip4_input+0xd6>
      netif = inp;
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	61bb      	str	r3, [r7, #24]
 8011170:	e01e      	b.n	80111b0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011172:	2300      	movs	r3, #0
 8011174:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011176:	4b68      	ldr	r3, [pc, #416]	; (8011318 <ip4_input+0x27c>)
 8011178:	695b      	ldr	r3, [r3, #20]
 801117a:	b2db      	uxtb	r3, r3
 801117c:	2b7f      	cmp	r3, #127	; 0x7f
 801117e:	d017      	beq.n	80111b0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011180:	4b66      	ldr	r3, [pc, #408]	; (801131c <ip4_input+0x280>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	61bb      	str	r3, [r7, #24]
 8011186:	e00e      	b.n	80111a6 <ip4_input+0x10a>
          if (netif == inp) {
 8011188:	69ba      	ldr	r2, [r7, #24]
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	429a      	cmp	r2, r3
 801118e:	d006      	beq.n	801119e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011190:	69b8      	ldr	r0, [r7, #24]
 8011192:	f7ff ff59 	bl	8011048 <ip4_input_accept>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d108      	bne.n	80111ae <ip4_input+0x112>
 801119c:	e000      	b.n	80111a0 <ip4_input+0x104>
            continue;
 801119e:	bf00      	nop
        NETIF_FOREACH(netif) {
 80111a0:	69bb      	ldr	r3, [r7, #24]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	61bb      	str	r3, [r7, #24]
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1ed      	bne.n	8011188 <ip4_input+0xec>
 80111ac:	e000      	b.n	80111b0 <ip4_input+0x114>
            break;
 80111ae:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d111      	bne.n	80111da <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	7a5b      	ldrb	r3, [r3, #9]
 80111ba:	2b11      	cmp	r3, #17
 80111bc:	d10d      	bne.n	80111da <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80111be:	8a7b      	ldrh	r3, [r7, #18]
 80111c0:	69fa      	ldr	r2, [r7, #28]
 80111c2:	4413      	add	r3, r2
 80111c4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	885b      	ldrh	r3, [r3, #2]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80111d0:	d103      	bne.n	80111da <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d017      	beq.n	8011210 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80111e0:	4b4d      	ldr	r3, [pc, #308]	; (8011318 <ip4_input+0x27c>)
 80111e2:	691b      	ldr	r3, [r3, #16]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d013      	beq.n	8011210 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80111e8:	4b4b      	ldr	r3, [pc, #300]	; (8011318 <ip4_input+0x27c>)
 80111ea:	691b      	ldr	r3, [r3, #16]
 80111ec:	6839      	ldr	r1, [r7, #0]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 f96e 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d105      	bne.n	8011206 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80111fa:	4b47      	ldr	r3, [pc, #284]	; (8011318 <ip4_input+0x27c>)
 80111fc:	691b      	ldr	r3, [r3, #16]
 80111fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011202:	2be0      	cmp	r3, #224	; 0xe0
 8011204:	d104      	bne.n	8011210 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7f6 fd7e 	bl	8007d08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801120c:	2300      	movs	r3, #0
 801120e:	e07e      	b.n	801130e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d104      	bne.n	8011220 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f7f6 fd76 	bl	8007d08 <pbuf_free>
    return ERR_OK;
 801121c:	2300      	movs	r3, #0
 801121e:	e076      	b.n	801130e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	88db      	ldrh	r3, [r3, #6]
 8011224:	b29b      	uxth	r3, r3
 8011226:	461a      	mov	r2, r3
 8011228:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801122c:	4013      	ands	r3, r2
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00b      	beq.n	801124a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 fc92 	bl	8011b5c <ip4_reass>
 8011238:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d101      	bne.n	8011244 <ip4_input+0x1a8>
      return ERR_OK;
 8011240:	2300      	movs	r3, #0
 8011242:	e064      	b.n	801130e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801124a:	4a33      	ldr	r2, [pc, #204]	; (8011318 <ip4_input+0x27c>)
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011250:	4a31      	ldr	r2, [pc, #196]	; (8011318 <ip4_input+0x27c>)
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011256:	4a30      	ldr	r2, [pc, #192]	; (8011318 <ip4_input+0x27c>)
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	f003 030f 	and.w	r3, r3, #15
 8011264:	b2db      	uxtb	r3, r3
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	b2db      	uxtb	r3, r3
 801126a:	b29a      	uxth	r2, r3
 801126c:	4b2a      	ldr	r3, [pc, #168]	; (8011318 <ip4_input+0x27c>)
 801126e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011270:	8a7b      	ldrh	r3, [r7, #18]
 8011272:	4619      	mov	r1, r3
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7f6 fcc1 	bl	8007bfc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	7a5b      	ldrb	r3, [r3, #9]
 801127e:	2b11      	cmp	r3, #17
 8011280:	d006      	beq.n	8011290 <ip4_input+0x1f4>
 8011282:	2b11      	cmp	r3, #17
 8011284:	dc13      	bgt.n	80112ae <ip4_input+0x212>
 8011286:	2b01      	cmp	r3, #1
 8011288:	d00c      	beq.n	80112a4 <ip4_input+0x208>
 801128a:	2b06      	cmp	r3, #6
 801128c:	d005      	beq.n	801129a <ip4_input+0x1fe>
 801128e:	e00e      	b.n	80112ae <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011290:	6839      	ldr	r1, [r7, #0]
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7fc fae8 	bl	800d868 <udp_input>
        break;
 8011298:	e026      	b.n	80112e8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801129a:	6839      	ldr	r1, [r7, #0]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7f8 fb6b 	bl	8009978 <tcp_input>
        break;
 80112a2:	e021      	b.n	80112e8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80112a4:	6839      	ldr	r1, [r7, #0]
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f7ff fcd0 	bl	8010c4c <icmp_input>
        break;
 80112ac:	e01c      	b.n	80112e8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80112ae:	4b1a      	ldr	r3, [pc, #104]	; (8011318 <ip4_input+0x27c>)
 80112b0:	695b      	ldr	r3, [r3, #20]
 80112b2:	69b9      	ldr	r1, [r7, #24]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f000 f90b 	bl	80114d0 <ip4_addr_isbroadcast_u32>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10f      	bne.n	80112e0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80112c0:	4b15      	ldr	r3, [pc, #84]	; (8011318 <ip4_input+0x27c>)
 80112c2:	695b      	ldr	r3, [r3, #20]
 80112c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80112c8:	2be0      	cmp	r3, #224	; 0xe0
 80112ca:	d009      	beq.n	80112e0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80112cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80112d0:	4619      	mov	r1, r3
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7f6 fd05 	bl	8007ce2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80112d8:	2102      	movs	r1, #2
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f7ff fdba 	bl	8010e54 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7f6 fd11 	bl	8007d08 <pbuf_free>
        break;
 80112e6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80112e8:	4b0b      	ldr	r3, [pc, #44]	; (8011318 <ip4_input+0x27c>)
 80112ea:	2200      	movs	r2, #0
 80112ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80112ee:	4b0a      	ldr	r3, [pc, #40]	; (8011318 <ip4_input+0x27c>)
 80112f0:	2200      	movs	r2, #0
 80112f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80112f4:	4b08      	ldr	r3, [pc, #32]	; (8011318 <ip4_input+0x27c>)
 80112f6:	2200      	movs	r2, #0
 80112f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80112fa:	4b07      	ldr	r3, [pc, #28]	; (8011318 <ip4_input+0x27c>)
 80112fc:	2200      	movs	r2, #0
 80112fe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <ip4_input+0x27c>)
 8011302:	2200      	movs	r2, #0
 8011304:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011306:	4b04      	ldr	r3, [pc, #16]	; (8011318 <ip4_input+0x27c>)
 8011308:	2200      	movs	r2, #0
 801130a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3720      	adds	r7, #32
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20005060 	.word	0x20005060
 801131c:	2000a7a4 	.word	0x2000a7a4

08011320 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b08a      	sub	sp, #40	; 0x28
 8011324:	af04      	add	r7, sp, #16
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
 801132c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d009      	beq.n	801134c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d003      	beq.n	8011346 <ip4_output_if+0x26>
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d102      	bne.n	801134c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011348:	3304      	adds	r3, #4
 801134a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801134c:	78fa      	ldrb	r2, [r7, #3]
 801134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011350:	9302      	str	r3, [sp, #8]
 8011352:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f897 3020 	ldrb.w	r3, [r7, #32]
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	4613      	mov	r3, r2
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	6979      	ldr	r1, [r7, #20]
 8011364:	68f8      	ldr	r0, [r7, #12]
 8011366:	f000 f805 	bl	8011374 <ip4_output_if_src>
 801136a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801136c:	4618      	mov	r0, r3
 801136e:	3718      	adds	r7, #24
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b088      	sub	sp, #32
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
 8011380:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	7b9b      	ldrb	r3, [r3, #14]
 8011386:	2b01      	cmp	r3, #1
 8011388:	d006      	beq.n	8011398 <ip4_output_if_src+0x24>
 801138a:	4b4b      	ldr	r3, [pc, #300]	; (80114b8 <ip4_output_if_src+0x144>)
 801138c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011390:	494a      	ldr	r1, [pc, #296]	; (80114bc <ip4_output_if_src+0x148>)
 8011392:	484b      	ldr	r0, [pc, #300]	; (80114c0 <ip4_output_if_src+0x14c>)
 8011394:	f001 f8f2 	bl	801257c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d060      	beq.n	8011460 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801139e:	2314      	movs	r3, #20
 80113a0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80113a2:	2114      	movs	r1, #20
 80113a4:	68f8      	ldr	r0, [r7, #12]
 80113a6:	f7f6 fc19 	bl	8007bdc <pbuf_add_header>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d002      	beq.n	80113b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80113b0:	f06f 0301 	mvn.w	r3, #1
 80113b4:	e07c      	b.n	80114b0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	895b      	ldrh	r3, [r3, #10]
 80113c0:	2b13      	cmp	r3, #19
 80113c2:	d806      	bhi.n	80113d2 <ip4_output_if_src+0x5e>
 80113c4:	4b3c      	ldr	r3, [pc, #240]	; (80114b8 <ip4_output_if_src+0x144>)
 80113c6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80113ca:	493e      	ldr	r1, [pc, #248]	; (80114c4 <ip4_output_if_src+0x150>)
 80113cc:	483c      	ldr	r0, [pc, #240]	; (80114c0 <ip4_output_if_src+0x14c>)
 80113ce:	f001 f8d5 	bl	801257c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	78fa      	ldrb	r2, [r7, #3]
 80113d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80113de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80113e8:	8b7b      	ldrh	r3, [r7, #26]
 80113ea:	089b      	lsrs	r3, r3, #2
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113f4:	b2da      	uxtb	r2, r3
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011400:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	891b      	ldrh	r3, [r3, #8]
 8011406:	4618      	mov	r0, r3
 8011408:	f7f5 f934 	bl	8006674 <lwip_htons>
 801140c:	4603      	mov	r3, r0
 801140e:	461a      	mov	r2, r3
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	2200      	movs	r2, #0
 8011418:	719a      	strb	r2, [r3, #6]
 801141a:	2200      	movs	r2, #0
 801141c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801141e:	4b2a      	ldr	r3, [pc, #168]	; (80114c8 <ip4_output_if_src+0x154>)
 8011420:	881b      	ldrh	r3, [r3, #0]
 8011422:	4618      	mov	r0, r3
 8011424:	f7f5 f926 	bl	8006674 <lwip_htons>
 8011428:	4603      	mov	r3, r0
 801142a:	461a      	mov	r2, r3
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011430:	4b25      	ldr	r3, [pc, #148]	; (80114c8 <ip4_output_if_src+0x154>)
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	3301      	adds	r3, #1
 8011436:	b29a      	uxth	r2, r3
 8011438:	4b23      	ldr	r3, [pc, #140]	; (80114c8 <ip4_output_if_src+0x154>)
 801143a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d104      	bne.n	801144c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011442:	4b22      	ldr	r3, [pc, #136]	; (80114cc <ip4_output_if_src+0x158>)
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	60da      	str	r2, [r3, #12]
 801144a:	e003      	b.n	8011454 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	2200      	movs	r2, #0
 8011458:	729a      	strb	r2, [r3, #10]
 801145a:	2200      	movs	r2, #0
 801145c:	72da      	strb	r2, [r3, #11]
 801145e:	e00f      	b.n	8011480 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	895b      	ldrh	r3, [r3, #10]
 8011464:	2b13      	cmp	r3, #19
 8011466:	d802      	bhi.n	801146e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011468:	f06f 0301 	mvn.w	r3, #1
 801146c:	e020      	b.n	80114b0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801147a:	f107 0314 	add.w	r3, r7, #20
 801147e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00c      	beq.n	80114a2 <ip4_output_if_src+0x12e>
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	891a      	ldrh	r2, [r3, #8]
 801148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011490:	429a      	cmp	r2, r3
 8011492:	d906      	bls.n	80114a2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f000 fd53 	bl	8011f44 <ip4_frag>
 801149e:	4603      	mov	r3, r0
 80114a0:	e006      	b.n	80114b0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80114a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a4:	695b      	ldr	r3, [r3, #20]
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	68f9      	ldr	r1, [r7, #12]
 80114aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114ac:	4798      	blx	r3
 80114ae:	4603      	mov	r3, r0
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3720      	adds	r7, #32
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	08015de4 	.word	0x08015de4
 80114bc:	08015e18 	.word	0x08015e18
 80114c0:	08015e24 	.word	0x08015e24
 80114c4:	08015e4c 	.word	0x08015e4c
 80114c8:	2000a936 	.word	0x2000a936
 80114cc:	0801623c 	.word	0x0801623c

080114d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b085      	sub	sp, #20
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114e4:	d002      	beq.n	80114ec <ip4_addr_isbroadcast_u32+0x1c>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d101      	bne.n	80114f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80114ec:	2301      	movs	r3, #1
 80114ee:	e02a      	b.n	8011546 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114f6:	f003 0302 	and.w	r3, r3, #2
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d101      	bne.n	8011502 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80114fe:	2300      	movs	r3, #0
 8011500:	e021      	b.n	8011546 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	3304      	adds	r3, #4
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	687a      	ldr	r2, [r7, #4]
 801150a:	429a      	cmp	r2, r3
 801150c:	d101      	bne.n	8011512 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801150e:	2300      	movs	r3, #0
 8011510:	e019      	b.n	8011546 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011512:	68fa      	ldr	r2, [r7, #12]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	3304      	adds	r3, #4
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	405a      	eors	r2, r3
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	3308      	adds	r3, #8
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	4013      	ands	r3, r2
 8011524:	2b00      	cmp	r3, #0
 8011526:	d10d      	bne.n	8011544 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	3308      	adds	r3, #8
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	43da      	mvns	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	3308      	adds	r3, #8
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801153c:	429a      	cmp	r2, r3
 801153e:	d101      	bne.n	8011544 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011540:	2301      	movs	r3, #1
 8011542:	e000      	b.n	8011546 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011544:	2300      	movs	r3, #0
  }
}
 8011546:	4618      	mov	r0, r3
 8011548:	3714      	adds	r7, #20
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
	...

08011554 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801155a:	2300      	movs	r3, #0
 801155c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801155e:	4b12      	ldr	r3, [pc, #72]	; (80115a8 <ip_reass_tmr+0x54>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011564:	e018      	b.n	8011598 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	7fdb      	ldrb	r3, [r3, #31]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00b      	beq.n	8011586 <ip_reass_tmr+0x32>
      r->timer--;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	7fdb      	ldrb	r3, [r3, #31]
 8011572:	3b01      	subs	r3, #1
 8011574:	b2da      	uxtb	r2, r3
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	60fb      	str	r3, [r7, #12]
 8011584:	e008      	b.n	8011598 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011590:	68b9      	ldr	r1, [r7, #8]
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f000 f80a 	bl	80115ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1e3      	bne.n	8011566 <ip_reass_tmr+0x12>
    }
  }
}
 801159e:	bf00      	nop
 80115a0:	bf00      	nop
 80115a2:	3710      	adds	r7, #16
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	2000a938 	.word	0x2000a938

080115ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b088      	sub	sp, #32
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80115ba:	683a      	ldr	r2, [r7, #0]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d105      	bne.n	80115ce <ip_reass_free_complete_datagram+0x22>
 80115c2:	4b45      	ldr	r3, [pc, #276]	; (80116d8 <ip_reass_free_complete_datagram+0x12c>)
 80115c4:	22ab      	movs	r2, #171	; 0xab
 80115c6:	4945      	ldr	r1, [pc, #276]	; (80116dc <ip_reass_free_complete_datagram+0x130>)
 80115c8:	4845      	ldr	r0, [pc, #276]	; (80116e0 <ip_reass_free_complete_datagram+0x134>)
 80115ca:	f000 ffd7 	bl	801257c <iprintf>
  if (prev != NULL) {
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00a      	beq.n	80115ea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d005      	beq.n	80115ea <ip_reass_free_complete_datagram+0x3e>
 80115de:	4b3e      	ldr	r3, [pc, #248]	; (80116d8 <ip_reass_free_complete_datagram+0x12c>)
 80115e0:	22ad      	movs	r2, #173	; 0xad
 80115e2:	4940      	ldr	r1, [pc, #256]	; (80116e4 <ip_reass_free_complete_datagram+0x138>)
 80115e4:	483e      	ldr	r0, [pc, #248]	; (80116e0 <ip_reass_free_complete_datagram+0x134>)
 80115e6:	f000 ffc9 	bl	801257c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	889b      	ldrh	r3, [r3, #4]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d12a      	bne.n	8011652 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	6858      	ldr	r0, [r3, #4]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	3308      	adds	r3, #8
 8011612:	2214      	movs	r2, #20
 8011614:	4619      	mov	r1, r3
 8011616:	f001 f88c 	bl	8012732 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801161a:	2101      	movs	r1, #1
 801161c:	69b8      	ldr	r0, [r7, #24]
 801161e:	f7ff fc29 	bl	8010e74 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011622:	69b8      	ldr	r0, [r7, #24]
 8011624:	f7f6 fbf8 	bl	8007e18 <pbuf_clen>
 8011628:	4603      	mov	r3, r0
 801162a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801162c:	8bfa      	ldrh	r2, [r7, #30]
 801162e:	8a7b      	ldrh	r3, [r7, #18]
 8011630:	4413      	add	r3, r2
 8011632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011636:	db05      	blt.n	8011644 <ip_reass_free_complete_datagram+0x98>
 8011638:	4b27      	ldr	r3, [pc, #156]	; (80116d8 <ip_reass_free_complete_datagram+0x12c>)
 801163a:	22bc      	movs	r2, #188	; 0xbc
 801163c:	492a      	ldr	r1, [pc, #168]	; (80116e8 <ip_reass_free_complete_datagram+0x13c>)
 801163e:	4828      	ldr	r0, [pc, #160]	; (80116e0 <ip_reass_free_complete_datagram+0x134>)
 8011640:	f000 ff9c 	bl	801257c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011644:	8bfa      	ldrh	r2, [r7, #30]
 8011646:	8a7b      	ldrh	r3, [r7, #18]
 8011648:	4413      	add	r3, r2
 801164a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801164c:	69b8      	ldr	r0, [r7, #24]
 801164e:	f7f6 fb5b 	bl	8007d08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011658:	e01f      	b.n	801169a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801166a:	68f8      	ldr	r0, [r7, #12]
 801166c:	f7f6 fbd4 	bl	8007e18 <pbuf_clen>
 8011670:	4603      	mov	r3, r0
 8011672:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011674:	8bfa      	ldrh	r2, [r7, #30]
 8011676:	8a7b      	ldrh	r3, [r7, #18]
 8011678:	4413      	add	r3, r2
 801167a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801167e:	db05      	blt.n	801168c <ip_reass_free_complete_datagram+0xe0>
 8011680:	4b15      	ldr	r3, [pc, #84]	; (80116d8 <ip_reass_free_complete_datagram+0x12c>)
 8011682:	22cc      	movs	r2, #204	; 0xcc
 8011684:	4918      	ldr	r1, [pc, #96]	; (80116e8 <ip_reass_free_complete_datagram+0x13c>)
 8011686:	4816      	ldr	r0, [pc, #88]	; (80116e0 <ip_reass_free_complete_datagram+0x134>)
 8011688:	f000 ff78 	bl	801257c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801168c:	8bfa      	ldrh	r2, [r7, #30]
 801168e:	8a7b      	ldrh	r3, [r7, #18]
 8011690:	4413      	add	r3, r2
 8011692:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011694:	68f8      	ldr	r0, [r7, #12]
 8011696:	f7f6 fb37 	bl	8007d08 <pbuf_free>
  while (p != NULL) {
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d1dc      	bne.n	801165a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80116a0:	6839      	ldr	r1, [r7, #0]
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 f8c2 	bl	801182c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80116a8:	4b10      	ldr	r3, [pc, #64]	; (80116ec <ip_reass_free_complete_datagram+0x140>)
 80116aa:	881b      	ldrh	r3, [r3, #0]
 80116ac:	8bfa      	ldrh	r2, [r7, #30]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d905      	bls.n	80116be <ip_reass_free_complete_datagram+0x112>
 80116b2:	4b09      	ldr	r3, [pc, #36]	; (80116d8 <ip_reass_free_complete_datagram+0x12c>)
 80116b4:	22d2      	movs	r2, #210	; 0xd2
 80116b6:	490e      	ldr	r1, [pc, #56]	; (80116f0 <ip_reass_free_complete_datagram+0x144>)
 80116b8:	4809      	ldr	r0, [pc, #36]	; (80116e0 <ip_reass_free_complete_datagram+0x134>)
 80116ba:	f000 ff5f 	bl	801257c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80116be:	4b0b      	ldr	r3, [pc, #44]	; (80116ec <ip_reass_free_complete_datagram+0x140>)
 80116c0:	881a      	ldrh	r2, [r3, #0]
 80116c2:	8bfb      	ldrh	r3, [r7, #30]
 80116c4:	1ad3      	subs	r3, r2, r3
 80116c6:	b29a      	uxth	r2, r3
 80116c8:	4b08      	ldr	r3, [pc, #32]	; (80116ec <ip_reass_free_complete_datagram+0x140>)
 80116ca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80116cc:	8bfb      	ldrh	r3, [r7, #30]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3720      	adds	r7, #32
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	08015e7c 	.word	0x08015e7c
 80116dc:	08015eb8 	.word	0x08015eb8
 80116e0:	08015ec4 	.word	0x08015ec4
 80116e4:	08015eec 	.word	0x08015eec
 80116e8:	08015f00 	.word	0x08015f00
 80116ec:	2000a93c 	.word	0x2000a93c
 80116f0:	08015f20 	.word	0x08015f20

080116f4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b08a      	sub	sp, #40	; 0x28
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80116fe:	2300      	movs	r3, #0
 8011700:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011702:	2300      	movs	r3, #0
 8011704:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011706:	2300      	movs	r3, #0
 8011708:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801170a:	2300      	movs	r3, #0
 801170c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801170e:	2300      	movs	r3, #0
 8011710:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011712:	4b28      	ldr	r3, [pc, #160]	; (80117b4 <ip_reass_remove_oldest_datagram+0xc0>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011718:	e030      	b.n	801177c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171c:	695a      	ldr	r2, [r3, #20]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	429a      	cmp	r2, r3
 8011724:	d10c      	bne.n	8011740 <ip_reass_remove_oldest_datagram+0x4c>
 8011726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011728:	699a      	ldr	r2, [r3, #24]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	429a      	cmp	r2, r3
 8011730:	d106      	bne.n	8011740 <ip_reass_remove_oldest_datagram+0x4c>
 8011732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011734:	899a      	ldrh	r2, [r3, #12]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	889b      	ldrh	r3, [r3, #4]
 801173a:	b29b      	uxth	r3, r3
 801173c:	429a      	cmp	r2, r3
 801173e:	d014      	beq.n	801176a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	3301      	adds	r3, #1
 8011744:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011746:	6a3b      	ldr	r3, [r7, #32]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d104      	bne.n	8011756 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	61bb      	str	r3, [r7, #24]
 8011754:	e009      	b.n	801176a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011758:	7fda      	ldrb	r2, [r3, #31]
 801175a:	6a3b      	ldr	r3, [r7, #32]
 801175c:	7fdb      	ldrb	r3, [r3, #31]
 801175e:	429a      	cmp	r2, r3
 8011760:	d803      	bhi.n	801176a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011764:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d001      	beq.n	8011776 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011774:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177e:	2b00      	cmp	r3, #0
 8011780:	d1cb      	bne.n	801171a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d008      	beq.n	801179a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011788:	69b9      	ldr	r1, [r7, #24]
 801178a:	6a38      	ldr	r0, [r7, #32]
 801178c:	f7ff ff0e 	bl	80115ac <ip_reass_free_complete_datagram>
 8011790:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011792:	697a      	ldr	r2, [r7, #20]
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	4413      	add	r3, r2
 8011798:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801179a:	697a      	ldr	r2, [r7, #20]
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	429a      	cmp	r2, r3
 80117a0:	da02      	bge.n	80117a8 <ip_reass_remove_oldest_datagram+0xb4>
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	dcac      	bgt.n	8011702 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80117a8:	697b      	ldr	r3, [r7, #20]
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3728      	adds	r7, #40	; 0x28
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	2000a938 	.word	0x2000a938

080117b8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80117c2:	2004      	movs	r0, #4
 80117c4:	f7f5 fbce 	bl	8006f64 <memp_malloc>
 80117c8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d110      	bne.n	80117f2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80117d0:	6839      	ldr	r1, [r7, #0]
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7ff ff8e 	bl	80116f4 <ip_reass_remove_oldest_datagram>
 80117d8:	4602      	mov	r2, r0
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	4293      	cmp	r3, r2
 80117de:	dc03      	bgt.n	80117e8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80117e0:	2004      	movs	r0, #4
 80117e2:	f7f5 fbbf 	bl	8006f64 <memp_malloc>
 80117e6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80117ee:	2300      	movs	r3, #0
 80117f0:	e016      	b.n	8011820 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80117f2:	2220      	movs	r2, #32
 80117f4:	2100      	movs	r1, #0
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f000 ff25 	bl	8012646 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	220f      	movs	r2, #15
 8011800:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011802:	4b09      	ldr	r3, [pc, #36]	; (8011828 <ip_reass_enqueue_new_datagram+0x70>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801180a:	4a07      	ldr	r2, [pc, #28]	; (8011828 <ip_reass_enqueue_new_datagram+0x70>)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	3308      	adds	r3, #8
 8011814:	2214      	movs	r2, #20
 8011816:	6879      	ldr	r1, [r7, #4]
 8011818:	4618      	mov	r0, r3
 801181a:	f000 ff8a 	bl	8012732 <memcpy>
  return ipr;
 801181e:	68fb      	ldr	r3, [r7, #12]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}
 8011828:	2000a938 	.word	0x2000a938

0801182c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011836:	4b10      	ldr	r3, [pc, #64]	; (8011878 <ip_reass_dequeue_datagram+0x4c>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	429a      	cmp	r2, r3
 801183e:	d104      	bne.n	801184a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a0c      	ldr	r2, [pc, #48]	; (8011878 <ip_reass_dequeue_datagram+0x4c>)
 8011846:	6013      	str	r3, [r2, #0]
 8011848:	e00d      	b.n	8011866 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d106      	bne.n	801185e <ip_reass_dequeue_datagram+0x32>
 8011850:	4b0a      	ldr	r3, [pc, #40]	; (801187c <ip_reass_dequeue_datagram+0x50>)
 8011852:	f240 1245 	movw	r2, #325	; 0x145
 8011856:	490a      	ldr	r1, [pc, #40]	; (8011880 <ip_reass_dequeue_datagram+0x54>)
 8011858:	480a      	ldr	r0, [pc, #40]	; (8011884 <ip_reass_dequeue_datagram+0x58>)
 801185a:	f000 fe8f 	bl	801257c <iprintf>
    prev->next = ipr->next;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011866:	6879      	ldr	r1, [r7, #4]
 8011868:	2004      	movs	r0, #4
 801186a:	f7f5 fbeb 	bl	8007044 <memp_free>
}
 801186e:	bf00      	nop
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	2000a938 	.word	0x2000a938
 801187c:	08015e7c 	.word	0x08015e7c
 8011880:	08015f44 	.word	0x08015f44
 8011884:	08015ec4 	.word	0x08015ec4

08011888 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b08c      	sub	sp, #48	; 0x30
 801188c:	af00      	add	r7, sp, #0
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011894:	2300      	movs	r3, #0
 8011896:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011898:	2301      	movs	r3, #1
 801189a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	885b      	ldrh	r3, [r3, #2]
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7f4 fee3 	bl	8006674 <lwip_htons>
 80118ae:	4603      	mov	r3, r0
 80118b0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	f003 030f 	and.w	r3, r3, #15
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80118c0:	7e7b      	ldrb	r3, [r7, #25]
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	8b7a      	ldrh	r2, [r7, #26]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d202      	bcs.n	80118d0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ce:	e135      	b.n	8011b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80118d0:	7e7b      	ldrb	r3, [r7, #25]
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	8b7a      	ldrh	r2, [r7, #26]
 80118d6:	1ad3      	subs	r3, r2, r3
 80118d8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	88db      	ldrh	r3, [r3, #6]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7f4 fec7 	bl	8006674 <lwip_htons>
 80118e6:	4603      	mov	r3, r0
 80118e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80118f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	2200      	movs	r2, #0
 8011900:	705a      	strb	r2, [r3, #1]
 8011902:	2200      	movs	r2, #0
 8011904:	709a      	strb	r2, [r3, #2]
 8011906:	2200      	movs	r2, #0
 8011908:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190c:	8afa      	ldrh	r2, [r7, #22]
 801190e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011910:	8afa      	ldrh	r2, [r7, #22]
 8011912:	8b7b      	ldrh	r3, [r7, #26]
 8011914:	4413      	add	r3, r2
 8011916:	b29a      	uxth	r2, r3
 8011918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191e:	88db      	ldrh	r3, [r3, #6]
 8011920:	b29b      	uxth	r3, r3
 8011922:	8afa      	ldrh	r2, [r7, #22]
 8011924:	429a      	cmp	r2, r3
 8011926:	d902      	bls.n	801192e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801192c:	e106      	b.n	8011b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	627b      	str	r3, [r7, #36]	; 0x24
 8011934:	e068      	b.n	8011a08 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193e:	889b      	ldrh	r3, [r3, #4]
 8011940:	b29a      	uxth	r2, r3
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	889b      	ldrh	r3, [r3, #4]
 8011946:	b29b      	uxth	r3, r3
 8011948:	429a      	cmp	r2, r3
 801194a:	d235      	bcs.n	80119b8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011950:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011954:	2b00      	cmp	r3, #0
 8011956:	d020      	beq.n	801199a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195a:	889b      	ldrh	r3, [r3, #4]
 801195c:	b29a      	uxth	r2, r3
 801195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011960:	88db      	ldrh	r3, [r3, #6]
 8011962:	b29b      	uxth	r3, r3
 8011964:	429a      	cmp	r2, r3
 8011966:	d307      	bcc.n	8011978 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196a:	88db      	ldrh	r3, [r3, #6]
 801196c:	b29a      	uxth	r2, r3
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	889b      	ldrh	r3, [r3, #4]
 8011972:	b29b      	uxth	r3, r3
 8011974:	429a      	cmp	r2, r3
 8011976:	d902      	bls.n	801197e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801197c:	e0de      	b.n	8011b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011980:	68ba      	ldr	r2, [r7, #8]
 8011982:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011986:	88db      	ldrh	r3, [r3, #6]
 8011988:	b29a      	uxth	r2, r3
 801198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198c:	889b      	ldrh	r3, [r3, #4]
 801198e:	b29b      	uxth	r3, r3
 8011990:	429a      	cmp	r2, r3
 8011992:	d03d      	beq.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011994:	2300      	movs	r3, #0
 8011996:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011998:	e03a      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199c:	88db      	ldrh	r3, [r3, #6]
 801199e:	b29a      	uxth	r2, r3
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	889b      	ldrh	r3, [r3, #4]
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d902      	bls.n	80119b0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80119aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119ae:	e0c5      	b.n	8011b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	68ba      	ldr	r2, [r7, #8]
 80119b4:	605a      	str	r2, [r3, #4]
      break;
 80119b6:	e02b      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80119b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ba:	889b      	ldrh	r3, [r3, #4]
 80119bc:	b29a      	uxth	r2, r3
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	889b      	ldrh	r3, [r3, #4]
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d102      	bne.n	80119ce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80119c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119cc:	e0b6      	b.n	8011b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d0:	889b      	ldrh	r3, [r3, #4]
 80119d2:	b29a      	uxth	r2, r3
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	88db      	ldrh	r3, [r3, #6]
 80119d8:	b29b      	uxth	r3, r3
 80119da:	429a      	cmp	r2, r3
 80119dc:	d202      	bcs.n	80119e4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80119de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119e2:	e0ab      	b.n	8011b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80119e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d009      	beq.n	80119fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80119ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ec:	88db      	ldrh	r3, [r3, #6]
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	889b      	ldrh	r3, [r3, #4]
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d001      	beq.n	80119fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d193      	bne.n	8011936 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011a0e:	e000      	b.n	8011a12 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011a10:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d12d      	bne.n	8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d01c      	beq.n	8011a58 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a20:	88db      	ldrh	r3, [r3, #6]
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a26:	889b      	ldrh	r3, [r3, #4]
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d906      	bls.n	8011a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011a2e:	4b45      	ldr	r3, [pc, #276]	; (8011b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a30:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011a34:	4944      	ldr	r1, [pc, #272]	; (8011b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011a36:	4845      	ldr	r0, [pc, #276]	; (8011b4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a38:	f000 fda0 	bl	801257c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a44:	88db      	ldrh	r3, [r3, #6]
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4a:	889b      	ldrh	r3, [r3, #4]
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d010      	beq.n	8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011a52:	2300      	movs	r3, #0
 8011a54:	623b      	str	r3, [r7, #32]
 8011a56:	e00d      	b.n	8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d006      	beq.n	8011a6e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011a60:	4b38      	ldr	r3, [pc, #224]	; (8011b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a62:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011a66:	493a      	ldr	r1, [pc, #232]	; (8011b50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011a68:	4838      	ldr	r0, [pc, #224]	; (8011b4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a6a:	f000 fd87 	bl	801257c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	68ba      	ldr	r2, [r7, #8]
 8011a72:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d105      	bne.n	8011a86 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	7f9b      	ldrb	r3, [r3, #30]
 8011a7e:	f003 0301 	and.w	r3, r3, #1
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d059      	beq.n	8011b3a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011a86:	6a3b      	ldr	r3, [r7, #32]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d04f      	beq.n	8011b2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d006      	beq.n	8011aa2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	889b      	ldrh	r3, [r3, #4]
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d002      	beq.n	8011aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	623b      	str	r3, [r7, #32]
 8011aa6:	e041      	b.n	8011b2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011ab2:	e012      	b.n	8011ada <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011abc:	88db      	ldrh	r3, [r3, #6]
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac2:	889b      	ldrh	r3, [r3, #4]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d002      	beq.n	8011ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	623b      	str	r3, [r7, #32]
            break;
 8011ace:	e007      	b.n	8011ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d1e9      	bne.n	8011ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011ae0:	6a3b      	ldr	r3, [r7, #32]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d022      	beq.n	8011b2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d106      	bne.n	8011afc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011aee:	4b15      	ldr	r3, [pc, #84]	; (8011b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011af0:	f240 12df 	movw	r2, #479	; 0x1df
 8011af4:	4917      	ldr	r1, [pc, #92]	; (8011b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011af6:	4815      	ldr	r0, [pc, #84]	; (8011b4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011af8:	f000 fd40 	bl	801257c <iprintf>
          LWIP_ASSERT("sanity check",
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d106      	bne.n	8011b16 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011b08:	4b0e      	ldr	r3, [pc, #56]	; (8011b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011b0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011b0e:	4911      	ldr	r1, [pc, #68]	; (8011b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011b10:	480e      	ldr	r0, [pc, #56]	; (8011b4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011b12:	f000 fd33 	bl	801257c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d006      	beq.n	8011b2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011b1e:	4b09      	ldr	r3, [pc, #36]	; (8011b44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011b20:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011b24:	490c      	ldr	r1, [pc, #48]	; (8011b58 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011b26:	4809      	ldr	r0, [pc, #36]	; (8011b4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011b28:	f000 fd28 	bl	801257c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	bf14      	ite	ne
 8011b32:	2301      	movne	r3, #1
 8011b34:	2300      	moveq	r3, #0
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	e000      	b.n	8011b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011b3a:	2300      	movs	r3, #0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3730      	adds	r7, #48	; 0x30
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	08015e7c 	.word	0x08015e7c
 8011b48:	08015f60 	.word	0x08015f60
 8011b4c:	08015ec4 	.word	0x08015ec4
 8011b50:	08015f80 	.word	0x08015f80
 8011b54:	08015fb8 	.word	0x08015fb8
 8011b58:	08015fc8 	.word	0x08015fc8

08011b5c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08e      	sub	sp, #56	; 0x38
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	f003 030f 	and.w	r3, r3, #15
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	2b14      	cmp	r3, #20
 8011b7a:	f040 8171 	bne.w	8011e60 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b80:	88db      	ldrh	r3, [r3, #6]
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7f4 fd75 	bl	8006674 <lwip_htons>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	00db      	lsls	r3, r3, #3
 8011b94:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b98:	885b      	ldrh	r3, [r3, #2]
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7f4 fd69 	bl	8006674 <lwip_htons>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	f003 030f 	and.w	r3, r3, #15
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	f0c0 8150 	bcc.w	8011e64 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011bcc:	1ad3      	subs	r3, r2, r3
 8011bce:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f7f6 f921 	bl	8007e18 <pbuf_clen>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011bda:	4b8c      	ldr	r3, [pc, #560]	; (8011e0c <ip4_reass+0x2b0>)
 8011bdc:	881b      	ldrh	r3, [r3, #0]
 8011bde:	461a      	mov	r2, r3
 8011be0:	8c3b      	ldrh	r3, [r7, #32]
 8011be2:	4413      	add	r3, r2
 8011be4:	2b0a      	cmp	r3, #10
 8011be6:	dd10      	ble.n	8011c0a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011be8:	8c3b      	ldrh	r3, [r7, #32]
 8011bea:	4619      	mov	r1, r3
 8011bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bee:	f7ff fd81 	bl	80116f4 <ip_reass_remove_oldest_datagram>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	f000 8137 	beq.w	8011e68 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011bfa:	4b84      	ldr	r3, [pc, #528]	; (8011e0c <ip4_reass+0x2b0>)
 8011bfc:	881b      	ldrh	r3, [r3, #0]
 8011bfe:	461a      	mov	r2, r3
 8011c00:	8c3b      	ldrh	r3, [r7, #32]
 8011c02:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011c04:	2b0a      	cmp	r3, #10
 8011c06:	f300 812f 	bgt.w	8011e68 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011c0a:	4b81      	ldr	r3, [pc, #516]	; (8011e10 <ip4_reass+0x2b4>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8011c10:	e015      	b.n	8011c3e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c14:	695a      	ldr	r2, [r3, #20]
 8011c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d10c      	bne.n	8011c38 <ip4_reass+0xdc>
 8011c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c20:	699a      	ldr	r2, [r3, #24]
 8011c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c24:	691b      	ldr	r3, [r3, #16]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d106      	bne.n	8011c38 <ip4_reass+0xdc>
 8011c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c2c:	899a      	ldrh	r2, [r3, #12]
 8011c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c30:	889b      	ldrh	r3, [r3, #4]
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d006      	beq.n	8011c46 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8011c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d1e6      	bne.n	8011c12 <ip4_reass+0xb6>
 8011c44:	e000      	b.n	8011c48 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011c46:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d109      	bne.n	8011c62 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011c4e:	8c3b      	ldrh	r3, [r7, #32]
 8011c50:	4619      	mov	r1, r3
 8011c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c54:	f7ff fdb0 	bl	80117b8 <ip_reass_enqueue_new_datagram>
 8011c58:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d11c      	bne.n	8011c9a <ip4_reass+0x13e>
      goto nullreturn;
 8011c60:	e105      	b.n	8011e6e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c64:	88db      	ldrh	r3, [r3, #6]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7f4 fd03 	bl	8006674 <lwip_htons>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d110      	bne.n	8011c9a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c7a:	89db      	ldrh	r3, [r3, #14]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7f4 fcf9 	bl	8006674 <lwip_htons>
 8011c82:	4603      	mov	r3, r0
 8011c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d006      	beq.n	8011c9a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c8e:	3308      	adds	r3, #8
 8011c90:	2214      	movs	r2, #20
 8011c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c94:	4618      	mov	r0, r3
 8011c96:	f000 fd4c 	bl	8012732 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c9c:	88db      	ldrh	r3, [r3, #6]
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	f003 0320 	and.w	r3, r3, #32
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	bf0c      	ite	eq
 8011ca8:	2301      	moveq	r3, #1
 8011caa:	2300      	movne	r3, #0
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00e      	beq.n	8011cd4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011cb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011cba:	4413      	add	r3, r2
 8011cbc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011cbe:	8b7a      	ldrh	r2, [r7, #26]
 8011cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	f0c0 80a0 	bcc.w	8011e08 <ip4_reass+0x2ac>
 8011cc8:	8b7b      	ldrh	r3, [r7, #26]
 8011cca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	f200 809a 	bhi.w	8011e08 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011cd4:	69fa      	ldr	r2, [r7, #28]
 8011cd6:	6879      	ldr	r1, [r7, #4]
 8011cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cda:	f7ff fdd5 	bl	8011888 <ip_reass_chain_frag_into_datagram_and_validate>
 8011cde:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ce6:	f000 809b 	beq.w	8011e20 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011cea:	4b48      	ldr	r3, [pc, #288]	; (8011e0c <ip4_reass+0x2b0>)
 8011cec:	881a      	ldrh	r2, [r3, #0]
 8011cee:	8c3b      	ldrh	r3, [r7, #32]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	4b45      	ldr	r3, [pc, #276]	; (8011e0c <ip4_reass+0x2b0>)
 8011cf6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d00d      	beq.n	8011d1a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011cfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d02:	4413      	add	r3, r2
 8011d04:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d08:	8a7a      	ldrh	r2, [r7, #18]
 8011d0a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0e:	7f9b      	ldrb	r3, [r3, #30]
 8011d10:	f043 0301 	orr.w	r3, r3, #1
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d18:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d171      	bne.n	8011e04 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d22:	8b9b      	ldrh	r3, [r3, #28]
 8011d24:	3314      	adds	r3, #20
 8011d26:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3c:	3308      	adds	r3, #8
 8011d3e:	2214      	movs	r2, #20
 8011d40:	4619      	mov	r1, r3
 8011d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d44:	f000 fcf5 	bl	8012732 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011d48:	8a3b      	ldrh	r3, [r7, #16]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7f4 fc92 	bl	8006674 <lwip_htons>
 8011d50:	4603      	mov	r3, r0
 8011d52:	461a      	mov	r2, r3
 8011d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d56:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	719a      	strb	r2, [r3, #6]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d64:	2200      	movs	r2, #0
 8011d66:	729a      	strb	r2, [r3, #10]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011d72:	e00d      	b.n	8011d90 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011d7a:	2114      	movs	r1, #20
 8011d7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d7e:	f7f5 ff3d 	bl	8007bfc <pbuf_remove_header>
      pbuf_cat(p, r);
 8011d82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f7f6 f881 	bl	8007e8c <pbuf_cat>
      r = iprh->next_pbuf;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d1ee      	bne.n	8011d74 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011d96:	4b1e      	ldr	r3, [pc, #120]	; (8011e10 <ip4_reass+0x2b4>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d102      	bne.n	8011da6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011da0:	2300      	movs	r3, #0
 8011da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011da4:	e010      	b.n	8011dc8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011da6:	4b1a      	ldr	r3, [pc, #104]	; (8011e10 <ip4_reass+0x2b4>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dac:	e007      	b.n	8011dbe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d006      	beq.n	8011dc6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1f4      	bne.n	8011dae <ip4_reass+0x252>
 8011dc4:	e000      	b.n	8011dc8 <ip4_reass+0x26c>
          break;
 8011dc6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dcc:	f7ff fd2e 	bl	801182c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f7f6 f821 	bl	8007e18 <pbuf_clen>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011dda:	4b0c      	ldr	r3, [pc, #48]	; (8011e0c <ip4_reass+0x2b0>)
 8011ddc:	881b      	ldrh	r3, [r3, #0]
 8011dde:	8c3a      	ldrh	r2, [r7, #32]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d906      	bls.n	8011df2 <ip4_reass+0x296>
 8011de4:	4b0b      	ldr	r3, [pc, #44]	; (8011e14 <ip4_reass+0x2b8>)
 8011de6:	f240 229b 	movw	r2, #667	; 0x29b
 8011dea:	490b      	ldr	r1, [pc, #44]	; (8011e18 <ip4_reass+0x2bc>)
 8011dec:	480b      	ldr	r0, [pc, #44]	; (8011e1c <ip4_reass+0x2c0>)
 8011dee:	f000 fbc5 	bl	801257c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011df2:	4b06      	ldr	r3, [pc, #24]	; (8011e0c <ip4_reass+0x2b0>)
 8011df4:	881a      	ldrh	r2, [r3, #0]
 8011df6:	8c3b      	ldrh	r3, [r7, #32]
 8011df8:	1ad3      	subs	r3, r2, r3
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	4b03      	ldr	r3, [pc, #12]	; (8011e0c <ip4_reass+0x2b0>)
 8011dfe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	e038      	b.n	8011e76 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011e04:	2300      	movs	r3, #0
 8011e06:	e036      	b.n	8011e76 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011e08:	bf00      	nop
 8011e0a:	e00a      	b.n	8011e22 <ip4_reass+0x2c6>
 8011e0c:	2000a93c 	.word	0x2000a93c
 8011e10:	2000a938 	.word	0x2000a938
 8011e14:	08015e7c 	.word	0x08015e7c
 8011e18:	08015fec 	.word	0x08015fec
 8011e1c:	08015ec4 	.word	0x08015ec4
    goto nullreturn_ipr;
 8011e20:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d106      	bne.n	8011e36 <ip4_reass+0x2da>
 8011e28:	4b15      	ldr	r3, [pc, #84]	; (8011e80 <ip4_reass+0x324>)
 8011e2a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011e2e:	4915      	ldr	r1, [pc, #84]	; (8011e84 <ip4_reass+0x328>)
 8011e30:	4815      	ldr	r0, [pc, #84]	; (8011e88 <ip4_reass+0x32c>)
 8011e32:	f000 fba3 	bl	801257c <iprintf>
  if (ipr->p == NULL) {
 8011e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d116      	bne.n	8011e6c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011e3e:	4b13      	ldr	r3, [pc, #76]	; (8011e8c <ip4_reass+0x330>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d006      	beq.n	8011e56 <ip4_reass+0x2fa>
 8011e48:	4b0d      	ldr	r3, [pc, #52]	; (8011e80 <ip4_reass+0x324>)
 8011e4a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011e4e:	4910      	ldr	r1, [pc, #64]	; (8011e90 <ip4_reass+0x334>)
 8011e50:	480d      	ldr	r0, [pc, #52]	; (8011e88 <ip4_reass+0x32c>)
 8011e52:	f000 fb93 	bl	801257c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011e56:	2100      	movs	r1, #0
 8011e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e5a:	f7ff fce7 	bl	801182c <ip_reass_dequeue_datagram>
 8011e5e:	e006      	b.n	8011e6e <ip4_reass+0x312>
    goto nullreturn;
 8011e60:	bf00      	nop
 8011e62:	e004      	b.n	8011e6e <ip4_reass+0x312>
    goto nullreturn;
 8011e64:	bf00      	nop
 8011e66:	e002      	b.n	8011e6e <ip4_reass+0x312>
      goto nullreturn;
 8011e68:	bf00      	nop
 8011e6a:	e000      	b.n	8011e6e <ip4_reass+0x312>
  }

nullreturn:
 8011e6c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7f5 ff4a 	bl	8007d08 <pbuf_free>
  return NULL;
 8011e74:	2300      	movs	r3, #0
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3738      	adds	r7, #56	; 0x38
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	08015e7c 	.word	0x08015e7c
 8011e84:	08016008 	.word	0x08016008
 8011e88:	08015ec4 	.word	0x08015ec4
 8011e8c:	2000a938 	.word	0x2000a938
 8011e90:	08016014 	.word	0x08016014

08011e94 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011e98:	2005      	movs	r0, #5
 8011e9a:	f7f5 f863 	bl	8006f64 <memp_malloc>
 8011e9e:	4603      	mov	r3, r0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d106      	bne.n	8011ec0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011eb2:	4b07      	ldr	r3, [pc, #28]	; (8011ed0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011eb4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011eb8:	4906      	ldr	r1, [pc, #24]	; (8011ed4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011eba:	4807      	ldr	r0, [pc, #28]	; (8011ed8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011ebc:	f000 fb5e 	bl	801257c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011ec0:	6879      	ldr	r1, [r7, #4]
 8011ec2:	2005      	movs	r0, #5
 8011ec4:	f7f5 f8be 	bl	8007044 <memp_free>
}
 8011ec8:	bf00      	nop
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	08015e7c 	.word	0x08015e7c
 8011ed4:	08016034 	.word	0x08016034
 8011ed8:	08015ec4 	.word	0x08015ec4

08011edc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d106      	bne.n	8011efc <ipfrag_free_pbuf_custom+0x20>
 8011eee:	4b11      	ldr	r3, [pc, #68]	; (8011f34 <ipfrag_free_pbuf_custom+0x58>)
 8011ef0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011ef4:	4910      	ldr	r1, [pc, #64]	; (8011f38 <ipfrag_free_pbuf_custom+0x5c>)
 8011ef6:	4811      	ldr	r0, [pc, #68]	; (8011f3c <ipfrag_free_pbuf_custom+0x60>)
 8011ef8:	f000 fb40 	bl	801257c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d006      	beq.n	8011f12 <ipfrag_free_pbuf_custom+0x36>
 8011f04:	4b0b      	ldr	r3, [pc, #44]	; (8011f34 <ipfrag_free_pbuf_custom+0x58>)
 8011f06:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011f0a:	490d      	ldr	r1, [pc, #52]	; (8011f40 <ipfrag_free_pbuf_custom+0x64>)
 8011f0c:	480b      	ldr	r0, [pc, #44]	; (8011f3c <ipfrag_free_pbuf_custom+0x60>)
 8011f0e:	f000 fb35 	bl	801257c <iprintf>
  if (pcr->original != NULL) {
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	695b      	ldr	r3, [r3, #20]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d004      	beq.n	8011f24 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	695b      	ldr	r3, [r3, #20]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7f5 fef2 	bl	8007d08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011f24:	68f8      	ldr	r0, [r7, #12]
 8011f26:	f7ff ffbd 	bl	8011ea4 <ip_frag_free_pbuf_custom_ref>
}
 8011f2a:	bf00      	nop
 8011f2c:	3710      	adds	r7, #16
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	08015e7c 	.word	0x08015e7c
 8011f38:	08016040 	.word	0x08016040
 8011f3c:	08015ec4 	.word	0x08015ec4
 8011f40:	0801604c 	.word	0x0801604c

08011f44 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b094      	sub	sp, #80	; 0x50
 8011f48:	af02      	add	r7, sp, #8
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011f50:	2300      	movs	r3, #0
 8011f52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f5a:	3b14      	subs	r3, #20
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	da00      	bge.n	8011f62 <ip4_frag+0x1e>
 8011f60:	3307      	adds	r3, #7
 8011f62:	10db      	asrs	r3, r3, #3
 8011f64:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011f66:	2314      	movs	r3, #20
 8011f68:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f72:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	f003 030f 	and.w	r3, r3, #15
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b14      	cmp	r3, #20
 8011f84:	d002      	beq.n	8011f8c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011f86:	f06f 0305 	mvn.w	r3, #5
 8011f8a:	e110      	b.n	80121ae <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	895b      	ldrh	r3, [r3, #10]
 8011f90:	2b13      	cmp	r3, #19
 8011f92:	d809      	bhi.n	8011fa8 <ip4_frag+0x64>
 8011f94:	4b88      	ldr	r3, [pc, #544]	; (80121b8 <ip4_frag+0x274>)
 8011f96:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011f9a:	4988      	ldr	r1, [pc, #544]	; (80121bc <ip4_frag+0x278>)
 8011f9c:	4888      	ldr	r0, [pc, #544]	; (80121c0 <ip4_frag+0x27c>)
 8011f9e:	f000 faed 	bl	801257c <iprintf>
 8011fa2:	f06f 0305 	mvn.w	r3, #5
 8011fa6:	e102      	b.n	80121ae <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	88db      	ldrh	r3, [r3, #6]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7f4 fb60 	bl	8006674 <lwip_htons>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011fb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011fba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011fbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011fc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	891b      	ldrh	r3, [r3, #8]
 8011fce:	3b14      	subs	r3, #20
 8011fd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011fd4:	e0e1      	b.n	801219a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011fd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	bf28      	it	cs
 8011fe4:	4613      	movcs	r3, r2
 8011fe6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011fe8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fec:	2114      	movs	r1, #20
 8011fee:	200e      	movs	r0, #14
 8011ff0:	f7f5 fba6 	bl	8007740 <pbuf_alloc>
 8011ff4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 80d5 	beq.w	80121a8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012000:	895b      	ldrh	r3, [r3, #10]
 8012002:	2b13      	cmp	r3, #19
 8012004:	d806      	bhi.n	8012014 <ip4_frag+0xd0>
 8012006:	4b6c      	ldr	r3, [pc, #432]	; (80121b8 <ip4_frag+0x274>)
 8012008:	f44f 7249 	mov.w	r2, #804	; 0x324
 801200c:	496d      	ldr	r1, [pc, #436]	; (80121c4 <ip4_frag+0x280>)
 801200e:	486c      	ldr	r0, [pc, #432]	; (80121c0 <ip4_frag+0x27c>)
 8012010:	f000 fab4 	bl	801257c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012016:	685b      	ldr	r3, [r3, #4]
 8012018:	2214      	movs	r2, #20
 801201a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801201c:	4618      	mov	r0, r3
 801201e:	f000 fb88 	bl	8012732 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012028:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801202a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801202e:	e064      	b.n	80120fa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	895a      	ldrh	r2, [r3, #10]
 8012034:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012036:	1ad3      	subs	r3, r2, r3
 8012038:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	895b      	ldrh	r3, [r3, #10]
 801203e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012040:	429a      	cmp	r2, r3
 8012042:	d906      	bls.n	8012052 <ip4_frag+0x10e>
 8012044:	4b5c      	ldr	r3, [pc, #368]	; (80121b8 <ip4_frag+0x274>)
 8012046:	f240 322d 	movw	r2, #813	; 0x32d
 801204a:	495f      	ldr	r1, [pc, #380]	; (80121c8 <ip4_frag+0x284>)
 801204c:	485c      	ldr	r0, [pc, #368]	; (80121c0 <ip4_frag+0x27c>)
 801204e:	f000 fa95 	bl	801257c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012052:	8bfa      	ldrh	r2, [r7, #30]
 8012054:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012058:	4293      	cmp	r3, r2
 801205a:	bf28      	it	cs
 801205c:	4613      	movcs	r3, r2
 801205e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012062:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012066:	2b00      	cmp	r3, #0
 8012068:	d105      	bne.n	8012076 <ip4_frag+0x132>
        poff = 0;
 801206a:	2300      	movs	r3, #0
 801206c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	60fb      	str	r3, [r7, #12]
        continue;
 8012074:	e041      	b.n	80120fa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012076:	f7ff ff0d 	bl	8011e94 <ip_frag_alloc_pbuf_custom_ref>
 801207a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d103      	bne.n	801208a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012084:	f7f5 fe40 	bl	8007d08 <pbuf_free>
        goto memerr;
 8012088:	e08f      	b.n	80121aa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801208a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012090:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012092:	4413      	add	r3, r2
 8012094:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012098:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801209c:	9201      	str	r2, [sp, #4]
 801209e:	9300      	str	r3, [sp, #0]
 80120a0:	4603      	mov	r3, r0
 80120a2:	2241      	movs	r2, #65	; 0x41
 80120a4:	2000      	movs	r0, #0
 80120a6:	f7f5 fc75 	bl	8007994 <pbuf_alloced_custom>
 80120aa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d106      	bne.n	80120c0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80120b2:	69b8      	ldr	r0, [r7, #24]
 80120b4:	f7ff fef6 	bl	8011ea4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80120b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ba:	f7f5 fe25 	bl	8007d08 <pbuf_free>
        goto memerr;
 80120be:	e074      	b.n	80121aa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f7f5 fec1 	bl	8007e48 <pbuf_ref>
      pcr->original = p;
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	68fa      	ldr	r2, [r7, #12]
 80120ca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	4a3f      	ldr	r2, [pc, #252]	; (80121cc <ip4_frag+0x288>)
 80120d0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80120d2:	6979      	ldr	r1, [r7, #20]
 80120d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120d6:	f7f5 fed9 	bl	8007e8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80120da:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80120de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80120e2:	1ad3      	subs	r3, r2, r3
 80120e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80120e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d004      	beq.n	80120fa <ip4_frag+0x1b6>
        poff = 0;
 80120f0:	2300      	movs	r3, #0
 80120f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80120fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d196      	bne.n	8012030 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012102:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012104:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012108:	4413      	add	r3, r2
 801210a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012110:	f1a3 0213 	sub.w	r2, r3, #19
 8012114:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012118:	429a      	cmp	r2, r3
 801211a:	bfcc      	ite	gt
 801211c:	2301      	movgt	r3, #1
 801211e:	2300      	movle	r3, #0
 8012120:	b2db      	uxtb	r3, r3
 8012122:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012124:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801212c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d002      	beq.n	801213a <ip4_frag+0x1f6>
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	2b00      	cmp	r3, #0
 8012138:	d003      	beq.n	8012142 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801213a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801213c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012140:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012142:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012144:	4618      	mov	r0, r3
 8012146:	f7f4 fa95 	bl	8006674 <lwip_htons>
 801214a:	4603      	mov	r3, r0
 801214c:	461a      	mov	r2, r3
 801214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012150:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012154:	3314      	adds	r3, #20
 8012156:	b29b      	uxth	r3, r3
 8012158:	4618      	mov	r0, r3
 801215a:	f7f4 fa8b 	bl	8006674 <lwip_htons>
 801215e:	4603      	mov	r3, r0
 8012160:	461a      	mov	r2, r3
 8012162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012164:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012168:	2200      	movs	r2, #0
 801216a:	729a      	strb	r2, [r3, #10]
 801216c:	2200      	movs	r2, #0
 801216e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	695b      	ldr	r3, [r3, #20]
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012178:	68b8      	ldr	r0, [r7, #8]
 801217a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801217c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801217e:	f7f5 fdc3 	bl	8007d08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012182:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012188:	1ad3      	subs	r3, r2, r3
 801218a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801218e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012192:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012194:	4413      	add	r3, r2
 8012196:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801219a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801219e:	2b00      	cmp	r3, #0
 80121a0:	f47f af19 	bne.w	8011fd6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80121a4:	2300      	movs	r3, #0
 80121a6:	e002      	b.n	80121ae <ip4_frag+0x26a>
      goto memerr;
 80121a8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80121aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3748      	adds	r7, #72	; 0x48
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
 80121b6:	bf00      	nop
 80121b8:	08015e7c 	.word	0x08015e7c
 80121bc:	08016058 	.word	0x08016058
 80121c0:	08015ec4 	.word	0x08015ec4
 80121c4:	08016074 	.word	0x08016074
 80121c8:	08016094 	.word	0x08016094
 80121cc:	08011edd 	.word	0x08011edd

080121d0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80121da:	230e      	movs	r3, #14
 80121dc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	895b      	ldrh	r3, [r3, #10]
 80121e2:	2b0e      	cmp	r3, #14
 80121e4:	d96e      	bls.n	80122c4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	7bdb      	ldrb	r3, [r3, #15]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d106      	bne.n	80121fc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121f4:	3301      	adds	r3, #1
 80121f6:	b2da      	uxtb	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	7b1a      	ldrb	r2, [r3, #12]
 8012206:	7b5b      	ldrb	r3, [r3, #13]
 8012208:	021b      	lsls	r3, r3, #8
 801220a:	4313      	orrs	r3, r2
 801220c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	f003 0301 	and.w	r3, r3, #1
 8012216:	2b00      	cmp	r3, #0
 8012218:	d023      	beq.n	8012262 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	2b01      	cmp	r3, #1
 8012220:	d10f      	bne.n	8012242 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	785b      	ldrb	r3, [r3, #1]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d11b      	bne.n	8012262 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801222e:	2b5e      	cmp	r3, #94	; 0x5e
 8012230:	d117      	bne.n	8012262 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	7b5b      	ldrb	r3, [r3, #13]
 8012236:	f043 0310 	orr.w	r3, r3, #16
 801223a:	b2da      	uxtb	r2, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	735a      	strb	r2, [r3, #13]
 8012240:	e00f      	b.n	8012262 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	2206      	movs	r2, #6
 8012246:	4928      	ldr	r1, [pc, #160]	; (80122e8 <ethernet_input+0x118>)
 8012248:	4618      	mov	r0, r3
 801224a:	f000 f9ec 	bl	8012626 <memcmp>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d106      	bne.n	8012262 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	7b5b      	ldrb	r3, [r3, #13]
 8012258:	f043 0308 	orr.w	r3, r3, #8
 801225c:	b2da      	uxtb	r2, r3
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012262:	89fb      	ldrh	r3, [r7, #14]
 8012264:	2b08      	cmp	r3, #8
 8012266:	d003      	beq.n	8012270 <ethernet_input+0xa0>
 8012268:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801226c:	d014      	beq.n	8012298 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801226e:	e032      	b.n	80122d6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012276:	f003 0308 	and.w	r3, r3, #8
 801227a:	2b00      	cmp	r3, #0
 801227c:	d024      	beq.n	80122c8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801227e:	8afb      	ldrh	r3, [r7, #22]
 8012280:	4619      	mov	r1, r3
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f7f5 fcba 	bl	8007bfc <pbuf_remove_header>
 8012288:	4603      	mov	r3, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d11e      	bne.n	80122cc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801228e:	6839      	ldr	r1, [r7, #0]
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7fe ff03 	bl	801109c <ip4_input>
      break;
 8012296:	e013      	b.n	80122c0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801229e:	f003 0308 	and.w	r3, r3, #8
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d014      	beq.n	80122d0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80122a6:	8afb      	ldrh	r3, [r7, #22]
 80122a8:	4619      	mov	r1, r3
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7f5 fca6 	bl	8007bfc <pbuf_remove_header>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d10e      	bne.n	80122d4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f7fe f89f 	bl	80103fc <etharp_input>
      break;
 80122be:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80122c0:	2300      	movs	r3, #0
 80122c2:	e00c      	b.n	80122de <ethernet_input+0x10e>
    goto free_and_return;
 80122c4:	bf00      	nop
 80122c6:	e006      	b.n	80122d6 <ethernet_input+0x106>
        goto free_and_return;
 80122c8:	bf00      	nop
 80122ca:	e004      	b.n	80122d6 <ethernet_input+0x106>
        goto free_and_return;
 80122cc:	bf00      	nop
 80122ce:	e002      	b.n	80122d6 <ethernet_input+0x106>
        goto free_and_return;
 80122d0:	bf00      	nop
 80122d2:	e000      	b.n	80122d6 <ethernet_input+0x106>
        goto free_and_return;
 80122d4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7f5 fd16 	bl	8007d08 <pbuf_free>
  return ERR_OK;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3718      	adds	r7, #24
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	08016244 	.word	0x08016244

080122ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b086      	sub	sp, #24
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	607a      	str	r2, [r7, #4]
 80122f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80122fa:	8c3b      	ldrh	r3, [r7, #32]
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7f4 f9b9 	bl	8006674 <lwip_htons>
 8012302:	4603      	mov	r3, r0
 8012304:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012306:	210e      	movs	r1, #14
 8012308:	68b8      	ldr	r0, [r7, #8]
 801230a:	f7f5 fc67 	bl	8007bdc <pbuf_add_header>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d125      	bne.n	8012360 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	8afa      	ldrh	r2, [r7, #22]
 801231e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	2206      	movs	r2, #6
 8012324:	6839      	ldr	r1, [r7, #0]
 8012326:	4618      	mov	r0, r3
 8012328:	f000 fa03 	bl	8012732 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	3306      	adds	r3, #6
 8012330:	2206      	movs	r2, #6
 8012332:	6879      	ldr	r1, [r7, #4]
 8012334:	4618      	mov	r0, r3
 8012336:	f000 f9fc 	bl	8012732 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012340:	2b06      	cmp	r3, #6
 8012342:	d006      	beq.n	8012352 <ethernet_output+0x66>
 8012344:	4b0a      	ldr	r3, [pc, #40]	; (8012370 <ethernet_output+0x84>)
 8012346:	f44f 7299 	mov.w	r2, #306	; 0x132
 801234a:	490a      	ldr	r1, [pc, #40]	; (8012374 <ethernet_output+0x88>)
 801234c:	480a      	ldr	r0, [pc, #40]	; (8012378 <ethernet_output+0x8c>)
 801234e:	f000 f915 	bl	801257c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	699b      	ldr	r3, [r3, #24]
 8012356:	68b9      	ldr	r1, [r7, #8]
 8012358:	68f8      	ldr	r0, [r7, #12]
 801235a:	4798      	blx	r3
 801235c:	4603      	mov	r3, r0
 801235e:	e002      	b.n	8012366 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012360:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012362:	f06f 0301 	mvn.w	r3, #1
}
 8012366:	4618      	mov	r0, r3
 8012368:	3718      	adds	r7, #24
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	080160a4 	.word	0x080160a4
 8012374:	080160dc 	.word	0x080160dc
 8012378:	08016110 	.word	0x08016110

0801237c <rand>:
 801237c:	4b16      	ldr	r3, [pc, #88]	; (80123d8 <rand+0x5c>)
 801237e:	b510      	push	{r4, lr}
 8012380:	681c      	ldr	r4, [r3, #0]
 8012382:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012384:	b9b3      	cbnz	r3, 80123b4 <rand+0x38>
 8012386:	2018      	movs	r0, #24
 8012388:	f000 fa4c 	bl	8012824 <malloc>
 801238c:	4602      	mov	r2, r0
 801238e:	6320      	str	r0, [r4, #48]	; 0x30
 8012390:	b920      	cbnz	r0, 801239c <rand+0x20>
 8012392:	4b12      	ldr	r3, [pc, #72]	; (80123dc <rand+0x60>)
 8012394:	4812      	ldr	r0, [pc, #72]	; (80123e0 <rand+0x64>)
 8012396:	2152      	movs	r1, #82	; 0x52
 8012398:	f000 f9da 	bl	8012750 <__assert_func>
 801239c:	4911      	ldr	r1, [pc, #68]	; (80123e4 <rand+0x68>)
 801239e:	4b12      	ldr	r3, [pc, #72]	; (80123e8 <rand+0x6c>)
 80123a0:	e9c0 1300 	strd	r1, r3, [r0]
 80123a4:	4b11      	ldr	r3, [pc, #68]	; (80123ec <rand+0x70>)
 80123a6:	6083      	str	r3, [r0, #8]
 80123a8:	230b      	movs	r3, #11
 80123aa:	8183      	strh	r3, [r0, #12]
 80123ac:	2100      	movs	r1, #0
 80123ae:	2001      	movs	r0, #1
 80123b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80123b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80123b6:	480e      	ldr	r0, [pc, #56]	; (80123f0 <rand+0x74>)
 80123b8:	690b      	ldr	r3, [r1, #16]
 80123ba:	694c      	ldr	r4, [r1, #20]
 80123bc:	4a0d      	ldr	r2, [pc, #52]	; (80123f4 <rand+0x78>)
 80123be:	4358      	muls	r0, r3
 80123c0:	fb02 0004 	mla	r0, r2, r4, r0
 80123c4:	fba3 3202 	umull	r3, r2, r3, r2
 80123c8:	3301      	adds	r3, #1
 80123ca:	eb40 0002 	adc.w	r0, r0, r2
 80123ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80123d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80123d6:	bd10      	pop	{r4, pc}
 80123d8:	20000088 	.word	0x20000088
 80123dc:	08016252 	.word	0x08016252
 80123e0:	08016269 	.word	0x08016269
 80123e4:	abcd330e 	.word	0xabcd330e
 80123e8:	e66d1234 	.word	0xe66d1234
 80123ec:	0005deec 	.word	0x0005deec
 80123f0:	5851f42d 	.word	0x5851f42d
 80123f4:	4c957f2d 	.word	0x4c957f2d

080123f8 <std>:
 80123f8:	2300      	movs	r3, #0
 80123fa:	b510      	push	{r4, lr}
 80123fc:	4604      	mov	r4, r0
 80123fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012406:	6083      	str	r3, [r0, #8]
 8012408:	8181      	strh	r1, [r0, #12]
 801240a:	6643      	str	r3, [r0, #100]	; 0x64
 801240c:	81c2      	strh	r2, [r0, #14]
 801240e:	6183      	str	r3, [r0, #24]
 8012410:	4619      	mov	r1, r3
 8012412:	2208      	movs	r2, #8
 8012414:	305c      	adds	r0, #92	; 0x5c
 8012416:	f000 f916 	bl	8012646 <memset>
 801241a:	4b0d      	ldr	r3, [pc, #52]	; (8012450 <std+0x58>)
 801241c:	6263      	str	r3, [r4, #36]	; 0x24
 801241e:	4b0d      	ldr	r3, [pc, #52]	; (8012454 <std+0x5c>)
 8012420:	62a3      	str	r3, [r4, #40]	; 0x28
 8012422:	4b0d      	ldr	r3, [pc, #52]	; (8012458 <std+0x60>)
 8012424:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012426:	4b0d      	ldr	r3, [pc, #52]	; (801245c <std+0x64>)
 8012428:	6323      	str	r3, [r4, #48]	; 0x30
 801242a:	4b0d      	ldr	r3, [pc, #52]	; (8012460 <std+0x68>)
 801242c:	6224      	str	r4, [r4, #32]
 801242e:	429c      	cmp	r4, r3
 8012430:	d006      	beq.n	8012440 <std+0x48>
 8012432:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012436:	4294      	cmp	r4, r2
 8012438:	d002      	beq.n	8012440 <std+0x48>
 801243a:	33d0      	adds	r3, #208	; 0xd0
 801243c:	429c      	cmp	r4, r3
 801243e:	d105      	bne.n	801244c <std+0x54>
 8012440:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012448:	f000 b970 	b.w	801272c <__retarget_lock_init_recursive>
 801244c:	bd10      	pop	{r4, pc}
 801244e:	bf00      	nop
 8012450:	080125a1 	.word	0x080125a1
 8012454:	080125c3 	.word	0x080125c3
 8012458:	080125fb 	.word	0x080125fb
 801245c:	0801261f 	.word	0x0801261f
 8012460:	2000a940 	.word	0x2000a940

08012464 <stdio_exit_handler>:
 8012464:	4a02      	ldr	r2, [pc, #8]	; (8012470 <stdio_exit_handler+0xc>)
 8012466:	4903      	ldr	r1, [pc, #12]	; (8012474 <stdio_exit_handler+0x10>)
 8012468:	4803      	ldr	r0, [pc, #12]	; (8012478 <stdio_exit_handler+0x14>)
 801246a:	f000 b869 	b.w	8012540 <_fwalk_sglue>
 801246e:	bf00      	nop
 8012470:	20000030 	.word	0x20000030
 8012474:	08013041 	.word	0x08013041
 8012478:	2000003c 	.word	0x2000003c

0801247c <cleanup_stdio>:
 801247c:	6841      	ldr	r1, [r0, #4]
 801247e:	4b0c      	ldr	r3, [pc, #48]	; (80124b0 <cleanup_stdio+0x34>)
 8012480:	4299      	cmp	r1, r3
 8012482:	b510      	push	{r4, lr}
 8012484:	4604      	mov	r4, r0
 8012486:	d001      	beq.n	801248c <cleanup_stdio+0x10>
 8012488:	f000 fdda 	bl	8013040 <_fflush_r>
 801248c:	68a1      	ldr	r1, [r4, #8]
 801248e:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <cleanup_stdio+0x38>)
 8012490:	4299      	cmp	r1, r3
 8012492:	d002      	beq.n	801249a <cleanup_stdio+0x1e>
 8012494:	4620      	mov	r0, r4
 8012496:	f000 fdd3 	bl	8013040 <_fflush_r>
 801249a:	68e1      	ldr	r1, [r4, #12]
 801249c:	4b06      	ldr	r3, [pc, #24]	; (80124b8 <cleanup_stdio+0x3c>)
 801249e:	4299      	cmp	r1, r3
 80124a0:	d004      	beq.n	80124ac <cleanup_stdio+0x30>
 80124a2:	4620      	mov	r0, r4
 80124a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124a8:	f000 bdca 	b.w	8013040 <_fflush_r>
 80124ac:	bd10      	pop	{r4, pc}
 80124ae:	bf00      	nop
 80124b0:	2000a940 	.word	0x2000a940
 80124b4:	2000a9a8 	.word	0x2000a9a8
 80124b8:	2000aa10 	.word	0x2000aa10

080124bc <global_stdio_init.part.0>:
 80124bc:	b510      	push	{r4, lr}
 80124be:	4b0b      	ldr	r3, [pc, #44]	; (80124ec <global_stdio_init.part.0+0x30>)
 80124c0:	4c0b      	ldr	r4, [pc, #44]	; (80124f0 <global_stdio_init.part.0+0x34>)
 80124c2:	4a0c      	ldr	r2, [pc, #48]	; (80124f4 <global_stdio_init.part.0+0x38>)
 80124c4:	601a      	str	r2, [r3, #0]
 80124c6:	4620      	mov	r0, r4
 80124c8:	2200      	movs	r2, #0
 80124ca:	2104      	movs	r1, #4
 80124cc:	f7ff ff94 	bl	80123f8 <std>
 80124d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80124d4:	2201      	movs	r2, #1
 80124d6:	2109      	movs	r1, #9
 80124d8:	f7ff ff8e 	bl	80123f8 <std>
 80124dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80124e0:	2202      	movs	r2, #2
 80124e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124e6:	2112      	movs	r1, #18
 80124e8:	f7ff bf86 	b.w	80123f8 <std>
 80124ec:	2000aa78 	.word	0x2000aa78
 80124f0:	2000a940 	.word	0x2000a940
 80124f4:	08012465 	.word	0x08012465

080124f8 <__sfp_lock_acquire>:
 80124f8:	4801      	ldr	r0, [pc, #4]	; (8012500 <__sfp_lock_acquire+0x8>)
 80124fa:	f000 b918 	b.w	801272e <__retarget_lock_acquire_recursive>
 80124fe:	bf00      	nop
 8012500:	2000aa81 	.word	0x2000aa81

08012504 <__sfp_lock_release>:
 8012504:	4801      	ldr	r0, [pc, #4]	; (801250c <__sfp_lock_release+0x8>)
 8012506:	f000 b913 	b.w	8012730 <__retarget_lock_release_recursive>
 801250a:	bf00      	nop
 801250c:	2000aa81 	.word	0x2000aa81

08012510 <__sinit>:
 8012510:	b510      	push	{r4, lr}
 8012512:	4604      	mov	r4, r0
 8012514:	f7ff fff0 	bl	80124f8 <__sfp_lock_acquire>
 8012518:	6a23      	ldr	r3, [r4, #32]
 801251a:	b11b      	cbz	r3, 8012524 <__sinit+0x14>
 801251c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012520:	f7ff bff0 	b.w	8012504 <__sfp_lock_release>
 8012524:	4b04      	ldr	r3, [pc, #16]	; (8012538 <__sinit+0x28>)
 8012526:	6223      	str	r3, [r4, #32]
 8012528:	4b04      	ldr	r3, [pc, #16]	; (801253c <__sinit+0x2c>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d1f5      	bne.n	801251c <__sinit+0xc>
 8012530:	f7ff ffc4 	bl	80124bc <global_stdio_init.part.0>
 8012534:	e7f2      	b.n	801251c <__sinit+0xc>
 8012536:	bf00      	nop
 8012538:	0801247d 	.word	0x0801247d
 801253c:	2000aa78 	.word	0x2000aa78

08012540 <_fwalk_sglue>:
 8012540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012544:	4607      	mov	r7, r0
 8012546:	4688      	mov	r8, r1
 8012548:	4614      	mov	r4, r2
 801254a:	2600      	movs	r6, #0
 801254c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012550:	f1b9 0901 	subs.w	r9, r9, #1
 8012554:	d505      	bpl.n	8012562 <_fwalk_sglue+0x22>
 8012556:	6824      	ldr	r4, [r4, #0]
 8012558:	2c00      	cmp	r4, #0
 801255a:	d1f7      	bne.n	801254c <_fwalk_sglue+0xc>
 801255c:	4630      	mov	r0, r6
 801255e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012562:	89ab      	ldrh	r3, [r5, #12]
 8012564:	2b01      	cmp	r3, #1
 8012566:	d907      	bls.n	8012578 <_fwalk_sglue+0x38>
 8012568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801256c:	3301      	adds	r3, #1
 801256e:	d003      	beq.n	8012578 <_fwalk_sglue+0x38>
 8012570:	4629      	mov	r1, r5
 8012572:	4638      	mov	r0, r7
 8012574:	47c0      	blx	r8
 8012576:	4306      	orrs	r6, r0
 8012578:	3568      	adds	r5, #104	; 0x68
 801257a:	e7e9      	b.n	8012550 <_fwalk_sglue+0x10>

0801257c <iprintf>:
 801257c:	b40f      	push	{r0, r1, r2, r3}
 801257e:	b507      	push	{r0, r1, r2, lr}
 8012580:	4906      	ldr	r1, [pc, #24]	; (801259c <iprintf+0x20>)
 8012582:	ab04      	add	r3, sp, #16
 8012584:	6808      	ldr	r0, [r1, #0]
 8012586:	f853 2b04 	ldr.w	r2, [r3], #4
 801258a:	6881      	ldr	r1, [r0, #8]
 801258c:	9301      	str	r3, [sp, #4]
 801258e:	f000 fa27 	bl	80129e0 <_vfiprintf_r>
 8012592:	b003      	add	sp, #12
 8012594:	f85d eb04 	ldr.w	lr, [sp], #4
 8012598:	b004      	add	sp, #16
 801259a:	4770      	bx	lr
 801259c:	20000088 	.word	0x20000088

080125a0 <__sread>:
 80125a0:	b510      	push	{r4, lr}
 80125a2:	460c      	mov	r4, r1
 80125a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125a8:	f000 f878 	bl	801269c <_read_r>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	bfab      	itete	ge
 80125b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125b2:	89a3      	ldrhlt	r3, [r4, #12]
 80125b4:	181b      	addge	r3, r3, r0
 80125b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125ba:	bfac      	ite	ge
 80125bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80125be:	81a3      	strhlt	r3, [r4, #12]
 80125c0:	bd10      	pop	{r4, pc}

080125c2 <__swrite>:
 80125c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125c6:	461f      	mov	r7, r3
 80125c8:	898b      	ldrh	r3, [r1, #12]
 80125ca:	05db      	lsls	r3, r3, #23
 80125cc:	4605      	mov	r5, r0
 80125ce:	460c      	mov	r4, r1
 80125d0:	4616      	mov	r6, r2
 80125d2:	d505      	bpl.n	80125e0 <__swrite+0x1e>
 80125d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d8:	2302      	movs	r3, #2
 80125da:	2200      	movs	r2, #0
 80125dc:	f000 f84c 	bl	8012678 <_lseek_r>
 80125e0:	89a3      	ldrh	r3, [r4, #12]
 80125e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125ea:	81a3      	strh	r3, [r4, #12]
 80125ec:	4632      	mov	r2, r6
 80125ee:	463b      	mov	r3, r7
 80125f0:	4628      	mov	r0, r5
 80125f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125f6:	f000 b863 	b.w	80126c0 <_write_r>

080125fa <__sseek>:
 80125fa:	b510      	push	{r4, lr}
 80125fc:	460c      	mov	r4, r1
 80125fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012602:	f000 f839 	bl	8012678 <_lseek_r>
 8012606:	1c43      	adds	r3, r0, #1
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	bf15      	itete	ne
 801260c:	6560      	strne	r0, [r4, #84]	; 0x54
 801260e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012616:	81a3      	strheq	r3, [r4, #12]
 8012618:	bf18      	it	ne
 801261a:	81a3      	strhne	r3, [r4, #12]
 801261c:	bd10      	pop	{r4, pc}

0801261e <__sclose>:
 801261e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012622:	f000 b819 	b.w	8012658 <_close_r>

08012626 <memcmp>:
 8012626:	b510      	push	{r4, lr}
 8012628:	3901      	subs	r1, #1
 801262a:	4402      	add	r2, r0
 801262c:	4290      	cmp	r0, r2
 801262e:	d101      	bne.n	8012634 <memcmp+0xe>
 8012630:	2000      	movs	r0, #0
 8012632:	e005      	b.n	8012640 <memcmp+0x1a>
 8012634:	7803      	ldrb	r3, [r0, #0]
 8012636:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801263a:	42a3      	cmp	r3, r4
 801263c:	d001      	beq.n	8012642 <memcmp+0x1c>
 801263e:	1b18      	subs	r0, r3, r4
 8012640:	bd10      	pop	{r4, pc}
 8012642:	3001      	adds	r0, #1
 8012644:	e7f2      	b.n	801262c <memcmp+0x6>

08012646 <memset>:
 8012646:	4402      	add	r2, r0
 8012648:	4603      	mov	r3, r0
 801264a:	4293      	cmp	r3, r2
 801264c:	d100      	bne.n	8012650 <memset+0xa>
 801264e:	4770      	bx	lr
 8012650:	f803 1b01 	strb.w	r1, [r3], #1
 8012654:	e7f9      	b.n	801264a <memset+0x4>
	...

08012658 <_close_r>:
 8012658:	b538      	push	{r3, r4, r5, lr}
 801265a:	4d06      	ldr	r5, [pc, #24]	; (8012674 <_close_r+0x1c>)
 801265c:	2300      	movs	r3, #0
 801265e:	4604      	mov	r4, r0
 8012660:	4608      	mov	r0, r1
 8012662:	602b      	str	r3, [r5, #0]
 8012664:	f7ef f855 	bl	8001712 <_close>
 8012668:	1c43      	adds	r3, r0, #1
 801266a:	d102      	bne.n	8012672 <_close_r+0x1a>
 801266c:	682b      	ldr	r3, [r5, #0]
 801266e:	b103      	cbz	r3, 8012672 <_close_r+0x1a>
 8012670:	6023      	str	r3, [r4, #0]
 8012672:	bd38      	pop	{r3, r4, r5, pc}
 8012674:	2000aa7c 	.word	0x2000aa7c

08012678 <_lseek_r>:
 8012678:	b538      	push	{r3, r4, r5, lr}
 801267a:	4d07      	ldr	r5, [pc, #28]	; (8012698 <_lseek_r+0x20>)
 801267c:	4604      	mov	r4, r0
 801267e:	4608      	mov	r0, r1
 8012680:	4611      	mov	r1, r2
 8012682:	2200      	movs	r2, #0
 8012684:	602a      	str	r2, [r5, #0]
 8012686:	461a      	mov	r2, r3
 8012688:	f7ef f86a 	bl	8001760 <_lseek>
 801268c:	1c43      	adds	r3, r0, #1
 801268e:	d102      	bne.n	8012696 <_lseek_r+0x1e>
 8012690:	682b      	ldr	r3, [r5, #0]
 8012692:	b103      	cbz	r3, 8012696 <_lseek_r+0x1e>
 8012694:	6023      	str	r3, [r4, #0]
 8012696:	bd38      	pop	{r3, r4, r5, pc}
 8012698:	2000aa7c 	.word	0x2000aa7c

0801269c <_read_r>:
 801269c:	b538      	push	{r3, r4, r5, lr}
 801269e:	4d07      	ldr	r5, [pc, #28]	; (80126bc <_read_r+0x20>)
 80126a0:	4604      	mov	r4, r0
 80126a2:	4608      	mov	r0, r1
 80126a4:	4611      	mov	r1, r2
 80126a6:	2200      	movs	r2, #0
 80126a8:	602a      	str	r2, [r5, #0]
 80126aa:	461a      	mov	r2, r3
 80126ac:	f7ee fff8 	bl	80016a0 <_read>
 80126b0:	1c43      	adds	r3, r0, #1
 80126b2:	d102      	bne.n	80126ba <_read_r+0x1e>
 80126b4:	682b      	ldr	r3, [r5, #0]
 80126b6:	b103      	cbz	r3, 80126ba <_read_r+0x1e>
 80126b8:	6023      	str	r3, [r4, #0]
 80126ba:	bd38      	pop	{r3, r4, r5, pc}
 80126bc:	2000aa7c 	.word	0x2000aa7c

080126c0 <_write_r>:
 80126c0:	b538      	push	{r3, r4, r5, lr}
 80126c2:	4d07      	ldr	r5, [pc, #28]	; (80126e0 <_write_r+0x20>)
 80126c4:	4604      	mov	r4, r0
 80126c6:	4608      	mov	r0, r1
 80126c8:	4611      	mov	r1, r2
 80126ca:	2200      	movs	r2, #0
 80126cc:	602a      	str	r2, [r5, #0]
 80126ce:	461a      	mov	r2, r3
 80126d0:	f7ef f803 	bl	80016da <_write>
 80126d4:	1c43      	adds	r3, r0, #1
 80126d6:	d102      	bne.n	80126de <_write_r+0x1e>
 80126d8:	682b      	ldr	r3, [r5, #0]
 80126da:	b103      	cbz	r3, 80126de <_write_r+0x1e>
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	bd38      	pop	{r3, r4, r5, pc}
 80126e0:	2000aa7c 	.word	0x2000aa7c

080126e4 <__libc_init_array>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	4d0d      	ldr	r5, [pc, #52]	; (801271c <__libc_init_array+0x38>)
 80126e8:	4c0d      	ldr	r4, [pc, #52]	; (8012720 <__libc_init_array+0x3c>)
 80126ea:	1b64      	subs	r4, r4, r5
 80126ec:	10a4      	asrs	r4, r4, #2
 80126ee:	2600      	movs	r6, #0
 80126f0:	42a6      	cmp	r6, r4
 80126f2:	d109      	bne.n	8012708 <__libc_init_array+0x24>
 80126f4:	4d0b      	ldr	r5, [pc, #44]	; (8012724 <__libc_init_array+0x40>)
 80126f6:	4c0c      	ldr	r4, [pc, #48]	; (8012728 <__libc_init_array+0x44>)
 80126f8:	f000 fe52 	bl	80133a0 <_init>
 80126fc:	1b64      	subs	r4, r4, r5
 80126fe:	10a4      	asrs	r4, r4, #2
 8012700:	2600      	movs	r6, #0
 8012702:	42a6      	cmp	r6, r4
 8012704:	d105      	bne.n	8012712 <__libc_init_array+0x2e>
 8012706:	bd70      	pop	{r4, r5, r6, pc}
 8012708:	f855 3b04 	ldr.w	r3, [r5], #4
 801270c:	4798      	blx	r3
 801270e:	3601      	adds	r6, #1
 8012710:	e7ee      	b.n	80126f0 <__libc_init_array+0xc>
 8012712:	f855 3b04 	ldr.w	r3, [r5], #4
 8012716:	4798      	blx	r3
 8012718:	3601      	adds	r6, #1
 801271a:	e7f2      	b.n	8012702 <__libc_init_array+0x1e>
 801271c:	08016338 	.word	0x08016338
 8012720:	08016338 	.word	0x08016338
 8012724:	08016338 	.word	0x08016338
 8012728:	0801633c 	.word	0x0801633c

0801272c <__retarget_lock_init_recursive>:
 801272c:	4770      	bx	lr

0801272e <__retarget_lock_acquire_recursive>:
 801272e:	4770      	bx	lr

08012730 <__retarget_lock_release_recursive>:
 8012730:	4770      	bx	lr

08012732 <memcpy>:
 8012732:	440a      	add	r2, r1
 8012734:	4291      	cmp	r1, r2
 8012736:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801273a:	d100      	bne.n	801273e <memcpy+0xc>
 801273c:	4770      	bx	lr
 801273e:	b510      	push	{r4, lr}
 8012740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012748:	4291      	cmp	r1, r2
 801274a:	d1f9      	bne.n	8012740 <memcpy+0xe>
 801274c:	bd10      	pop	{r4, pc}
	...

08012750 <__assert_func>:
 8012750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012752:	4614      	mov	r4, r2
 8012754:	461a      	mov	r2, r3
 8012756:	4b09      	ldr	r3, [pc, #36]	; (801277c <__assert_func+0x2c>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4605      	mov	r5, r0
 801275c:	68d8      	ldr	r0, [r3, #12]
 801275e:	b14c      	cbz	r4, 8012774 <__assert_func+0x24>
 8012760:	4b07      	ldr	r3, [pc, #28]	; (8012780 <__assert_func+0x30>)
 8012762:	9100      	str	r1, [sp, #0]
 8012764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012768:	4906      	ldr	r1, [pc, #24]	; (8012784 <__assert_func+0x34>)
 801276a:	462b      	mov	r3, r5
 801276c:	f000 fc90 	bl	8013090 <fiprintf>
 8012770:	f000 fd46 	bl	8013200 <abort>
 8012774:	4b04      	ldr	r3, [pc, #16]	; (8012788 <__assert_func+0x38>)
 8012776:	461c      	mov	r4, r3
 8012778:	e7f3      	b.n	8012762 <__assert_func+0x12>
 801277a:	bf00      	nop
 801277c:	20000088 	.word	0x20000088
 8012780:	080162c1 	.word	0x080162c1
 8012784:	080162ce 	.word	0x080162ce
 8012788:	080162fc 	.word	0x080162fc

0801278c <_free_r>:
 801278c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801278e:	2900      	cmp	r1, #0
 8012790:	d044      	beq.n	801281c <_free_r+0x90>
 8012792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012796:	9001      	str	r0, [sp, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	f1a1 0404 	sub.w	r4, r1, #4
 801279e:	bfb8      	it	lt
 80127a0:	18e4      	addlt	r4, r4, r3
 80127a2:	f000 f8e7 	bl	8012974 <__malloc_lock>
 80127a6:	4a1e      	ldr	r2, [pc, #120]	; (8012820 <_free_r+0x94>)
 80127a8:	9801      	ldr	r0, [sp, #4]
 80127aa:	6813      	ldr	r3, [r2, #0]
 80127ac:	b933      	cbnz	r3, 80127bc <_free_r+0x30>
 80127ae:	6063      	str	r3, [r4, #4]
 80127b0:	6014      	str	r4, [r2, #0]
 80127b2:	b003      	add	sp, #12
 80127b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127b8:	f000 b8e2 	b.w	8012980 <__malloc_unlock>
 80127bc:	42a3      	cmp	r3, r4
 80127be:	d908      	bls.n	80127d2 <_free_r+0x46>
 80127c0:	6825      	ldr	r5, [r4, #0]
 80127c2:	1961      	adds	r1, r4, r5
 80127c4:	428b      	cmp	r3, r1
 80127c6:	bf01      	itttt	eq
 80127c8:	6819      	ldreq	r1, [r3, #0]
 80127ca:	685b      	ldreq	r3, [r3, #4]
 80127cc:	1949      	addeq	r1, r1, r5
 80127ce:	6021      	streq	r1, [r4, #0]
 80127d0:	e7ed      	b.n	80127ae <_free_r+0x22>
 80127d2:	461a      	mov	r2, r3
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	b10b      	cbz	r3, 80127dc <_free_r+0x50>
 80127d8:	42a3      	cmp	r3, r4
 80127da:	d9fa      	bls.n	80127d2 <_free_r+0x46>
 80127dc:	6811      	ldr	r1, [r2, #0]
 80127de:	1855      	adds	r5, r2, r1
 80127e0:	42a5      	cmp	r5, r4
 80127e2:	d10b      	bne.n	80127fc <_free_r+0x70>
 80127e4:	6824      	ldr	r4, [r4, #0]
 80127e6:	4421      	add	r1, r4
 80127e8:	1854      	adds	r4, r2, r1
 80127ea:	42a3      	cmp	r3, r4
 80127ec:	6011      	str	r1, [r2, #0]
 80127ee:	d1e0      	bne.n	80127b2 <_free_r+0x26>
 80127f0:	681c      	ldr	r4, [r3, #0]
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	6053      	str	r3, [r2, #4]
 80127f6:	440c      	add	r4, r1
 80127f8:	6014      	str	r4, [r2, #0]
 80127fa:	e7da      	b.n	80127b2 <_free_r+0x26>
 80127fc:	d902      	bls.n	8012804 <_free_r+0x78>
 80127fe:	230c      	movs	r3, #12
 8012800:	6003      	str	r3, [r0, #0]
 8012802:	e7d6      	b.n	80127b2 <_free_r+0x26>
 8012804:	6825      	ldr	r5, [r4, #0]
 8012806:	1961      	adds	r1, r4, r5
 8012808:	428b      	cmp	r3, r1
 801280a:	bf04      	itt	eq
 801280c:	6819      	ldreq	r1, [r3, #0]
 801280e:	685b      	ldreq	r3, [r3, #4]
 8012810:	6063      	str	r3, [r4, #4]
 8012812:	bf04      	itt	eq
 8012814:	1949      	addeq	r1, r1, r5
 8012816:	6021      	streq	r1, [r4, #0]
 8012818:	6054      	str	r4, [r2, #4]
 801281a:	e7ca      	b.n	80127b2 <_free_r+0x26>
 801281c:	b003      	add	sp, #12
 801281e:	bd30      	pop	{r4, r5, pc}
 8012820:	2000aa84 	.word	0x2000aa84

08012824 <malloc>:
 8012824:	4b02      	ldr	r3, [pc, #8]	; (8012830 <malloc+0xc>)
 8012826:	4601      	mov	r1, r0
 8012828:	6818      	ldr	r0, [r3, #0]
 801282a:	f000 b823 	b.w	8012874 <_malloc_r>
 801282e:	bf00      	nop
 8012830:	20000088 	.word	0x20000088

08012834 <sbrk_aligned>:
 8012834:	b570      	push	{r4, r5, r6, lr}
 8012836:	4e0e      	ldr	r6, [pc, #56]	; (8012870 <sbrk_aligned+0x3c>)
 8012838:	460c      	mov	r4, r1
 801283a:	6831      	ldr	r1, [r6, #0]
 801283c:	4605      	mov	r5, r0
 801283e:	b911      	cbnz	r1, 8012846 <sbrk_aligned+0x12>
 8012840:	f000 fcce 	bl	80131e0 <_sbrk_r>
 8012844:	6030      	str	r0, [r6, #0]
 8012846:	4621      	mov	r1, r4
 8012848:	4628      	mov	r0, r5
 801284a:	f000 fcc9 	bl	80131e0 <_sbrk_r>
 801284e:	1c43      	adds	r3, r0, #1
 8012850:	d00a      	beq.n	8012868 <sbrk_aligned+0x34>
 8012852:	1cc4      	adds	r4, r0, #3
 8012854:	f024 0403 	bic.w	r4, r4, #3
 8012858:	42a0      	cmp	r0, r4
 801285a:	d007      	beq.n	801286c <sbrk_aligned+0x38>
 801285c:	1a21      	subs	r1, r4, r0
 801285e:	4628      	mov	r0, r5
 8012860:	f000 fcbe 	bl	80131e0 <_sbrk_r>
 8012864:	3001      	adds	r0, #1
 8012866:	d101      	bne.n	801286c <sbrk_aligned+0x38>
 8012868:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801286c:	4620      	mov	r0, r4
 801286e:	bd70      	pop	{r4, r5, r6, pc}
 8012870:	2000aa88 	.word	0x2000aa88

08012874 <_malloc_r>:
 8012874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012878:	1ccd      	adds	r5, r1, #3
 801287a:	f025 0503 	bic.w	r5, r5, #3
 801287e:	3508      	adds	r5, #8
 8012880:	2d0c      	cmp	r5, #12
 8012882:	bf38      	it	cc
 8012884:	250c      	movcc	r5, #12
 8012886:	2d00      	cmp	r5, #0
 8012888:	4607      	mov	r7, r0
 801288a:	db01      	blt.n	8012890 <_malloc_r+0x1c>
 801288c:	42a9      	cmp	r1, r5
 801288e:	d905      	bls.n	801289c <_malloc_r+0x28>
 8012890:	230c      	movs	r3, #12
 8012892:	603b      	str	r3, [r7, #0]
 8012894:	2600      	movs	r6, #0
 8012896:	4630      	mov	r0, r6
 8012898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801289c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012970 <_malloc_r+0xfc>
 80128a0:	f000 f868 	bl	8012974 <__malloc_lock>
 80128a4:	f8d8 3000 	ldr.w	r3, [r8]
 80128a8:	461c      	mov	r4, r3
 80128aa:	bb5c      	cbnz	r4, 8012904 <_malloc_r+0x90>
 80128ac:	4629      	mov	r1, r5
 80128ae:	4638      	mov	r0, r7
 80128b0:	f7ff ffc0 	bl	8012834 <sbrk_aligned>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	4604      	mov	r4, r0
 80128b8:	d155      	bne.n	8012966 <_malloc_r+0xf2>
 80128ba:	f8d8 4000 	ldr.w	r4, [r8]
 80128be:	4626      	mov	r6, r4
 80128c0:	2e00      	cmp	r6, #0
 80128c2:	d145      	bne.n	8012950 <_malloc_r+0xdc>
 80128c4:	2c00      	cmp	r4, #0
 80128c6:	d048      	beq.n	801295a <_malloc_r+0xe6>
 80128c8:	6823      	ldr	r3, [r4, #0]
 80128ca:	4631      	mov	r1, r6
 80128cc:	4638      	mov	r0, r7
 80128ce:	eb04 0903 	add.w	r9, r4, r3
 80128d2:	f000 fc85 	bl	80131e0 <_sbrk_r>
 80128d6:	4581      	cmp	r9, r0
 80128d8:	d13f      	bne.n	801295a <_malloc_r+0xe6>
 80128da:	6821      	ldr	r1, [r4, #0]
 80128dc:	1a6d      	subs	r5, r5, r1
 80128de:	4629      	mov	r1, r5
 80128e0:	4638      	mov	r0, r7
 80128e2:	f7ff ffa7 	bl	8012834 <sbrk_aligned>
 80128e6:	3001      	adds	r0, #1
 80128e8:	d037      	beq.n	801295a <_malloc_r+0xe6>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	442b      	add	r3, r5
 80128ee:	6023      	str	r3, [r4, #0]
 80128f0:	f8d8 3000 	ldr.w	r3, [r8]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d038      	beq.n	801296a <_malloc_r+0xf6>
 80128f8:	685a      	ldr	r2, [r3, #4]
 80128fa:	42a2      	cmp	r2, r4
 80128fc:	d12b      	bne.n	8012956 <_malloc_r+0xe2>
 80128fe:	2200      	movs	r2, #0
 8012900:	605a      	str	r2, [r3, #4]
 8012902:	e00f      	b.n	8012924 <_malloc_r+0xb0>
 8012904:	6822      	ldr	r2, [r4, #0]
 8012906:	1b52      	subs	r2, r2, r5
 8012908:	d41f      	bmi.n	801294a <_malloc_r+0xd6>
 801290a:	2a0b      	cmp	r2, #11
 801290c:	d917      	bls.n	801293e <_malloc_r+0xca>
 801290e:	1961      	adds	r1, r4, r5
 8012910:	42a3      	cmp	r3, r4
 8012912:	6025      	str	r5, [r4, #0]
 8012914:	bf18      	it	ne
 8012916:	6059      	strne	r1, [r3, #4]
 8012918:	6863      	ldr	r3, [r4, #4]
 801291a:	bf08      	it	eq
 801291c:	f8c8 1000 	streq.w	r1, [r8]
 8012920:	5162      	str	r2, [r4, r5]
 8012922:	604b      	str	r3, [r1, #4]
 8012924:	4638      	mov	r0, r7
 8012926:	f104 060b 	add.w	r6, r4, #11
 801292a:	f000 f829 	bl	8012980 <__malloc_unlock>
 801292e:	f026 0607 	bic.w	r6, r6, #7
 8012932:	1d23      	adds	r3, r4, #4
 8012934:	1af2      	subs	r2, r6, r3
 8012936:	d0ae      	beq.n	8012896 <_malloc_r+0x22>
 8012938:	1b9b      	subs	r3, r3, r6
 801293a:	50a3      	str	r3, [r4, r2]
 801293c:	e7ab      	b.n	8012896 <_malloc_r+0x22>
 801293e:	42a3      	cmp	r3, r4
 8012940:	6862      	ldr	r2, [r4, #4]
 8012942:	d1dd      	bne.n	8012900 <_malloc_r+0x8c>
 8012944:	f8c8 2000 	str.w	r2, [r8]
 8012948:	e7ec      	b.n	8012924 <_malloc_r+0xb0>
 801294a:	4623      	mov	r3, r4
 801294c:	6864      	ldr	r4, [r4, #4]
 801294e:	e7ac      	b.n	80128aa <_malloc_r+0x36>
 8012950:	4634      	mov	r4, r6
 8012952:	6876      	ldr	r6, [r6, #4]
 8012954:	e7b4      	b.n	80128c0 <_malloc_r+0x4c>
 8012956:	4613      	mov	r3, r2
 8012958:	e7cc      	b.n	80128f4 <_malloc_r+0x80>
 801295a:	230c      	movs	r3, #12
 801295c:	603b      	str	r3, [r7, #0]
 801295e:	4638      	mov	r0, r7
 8012960:	f000 f80e 	bl	8012980 <__malloc_unlock>
 8012964:	e797      	b.n	8012896 <_malloc_r+0x22>
 8012966:	6025      	str	r5, [r4, #0]
 8012968:	e7dc      	b.n	8012924 <_malloc_r+0xb0>
 801296a:	605b      	str	r3, [r3, #4]
 801296c:	deff      	udf	#255	; 0xff
 801296e:	bf00      	nop
 8012970:	2000aa84 	.word	0x2000aa84

08012974 <__malloc_lock>:
 8012974:	4801      	ldr	r0, [pc, #4]	; (801297c <__malloc_lock+0x8>)
 8012976:	f7ff beda 	b.w	801272e <__retarget_lock_acquire_recursive>
 801297a:	bf00      	nop
 801297c:	2000aa80 	.word	0x2000aa80

08012980 <__malloc_unlock>:
 8012980:	4801      	ldr	r0, [pc, #4]	; (8012988 <__malloc_unlock+0x8>)
 8012982:	f7ff bed5 	b.w	8012730 <__retarget_lock_release_recursive>
 8012986:	bf00      	nop
 8012988:	2000aa80 	.word	0x2000aa80

0801298c <__sfputc_r>:
 801298c:	6893      	ldr	r3, [r2, #8]
 801298e:	3b01      	subs	r3, #1
 8012990:	2b00      	cmp	r3, #0
 8012992:	b410      	push	{r4}
 8012994:	6093      	str	r3, [r2, #8]
 8012996:	da08      	bge.n	80129aa <__sfputc_r+0x1e>
 8012998:	6994      	ldr	r4, [r2, #24]
 801299a:	42a3      	cmp	r3, r4
 801299c:	db01      	blt.n	80129a2 <__sfputc_r+0x16>
 801299e:	290a      	cmp	r1, #10
 80129a0:	d103      	bne.n	80129aa <__sfputc_r+0x1e>
 80129a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129a6:	f000 bb85 	b.w	80130b4 <__swbuf_r>
 80129aa:	6813      	ldr	r3, [r2, #0]
 80129ac:	1c58      	adds	r0, r3, #1
 80129ae:	6010      	str	r0, [r2, #0]
 80129b0:	7019      	strb	r1, [r3, #0]
 80129b2:	4608      	mov	r0, r1
 80129b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129b8:	4770      	bx	lr

080129ba <__sfputs_r>:
 80129ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129bc:	4606      	mov	r6, r0
 80129be:	460f      	mov	r7, r1
 80129c0:	4614      	mov	r4, r2
 80129c2:	18d5      	adds	r5, r2, r3
 80129c4:	42ac      	cmp	r4, r5
 80129c6:	d101      	bne.n	80129cc <__sfputs_r+0x12>
 80129c8:	2000      	movs	r0, #0
 80129ca:	e007      	b.n	80129dc <__sfputs_r+0x22>
 80129cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129d0:	463a      	mov	r2, r7
 80129d2:	4630      	mov	r0, r6
 80129d4:	f7ff ffda 	bl	801298c <__sfputc_r>
 80129d8:	1c43      	adds	r3, r0, #1
 80129da:	d1f3      	bne.n	80129c4 <__sfputs_r+0xa>
 80129dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129e0 <_vfiprintf_r>:
 80129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	460d      	mov	r5, r1
 80129e6:	b09d      	sub	sp, #116	; 0x74
 80129e8:	4614      	mov	r4, r2
 80129ea:	4698      	mov	r8, r3
 80129ec:	4606      	mov	r6, r0
 80129ee:	b118      	cbz	r0, 80129f8 <_vfiprintf_r+0x18>
 80129f0:	6a03      	ldr	r3, [r0, #32]
 80129f2:	b90b      	cbnz	r3, 80129f8 <_vfiprintf_r+0x18>
 80129f4:	f7ff fd8c 	bl	8012510 <__sinit>
 80129f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129fa:	07d9      	lsls	r1, r3, #31
 80129fc:	d405      	bmi.n	8012a0a <_vfiprintf_r+0x2a>
 80129fe:	89ab      	ldrh	r3, [r5, #12]
 8012a00:	059a      	lsls	r2, r3, #22
 8012a02:	d402      	bmi.n	8012a0a <_vfiprintf_r+0x2a>
 8012a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a06:	f7ff fe92 	bl	801272e <__retarget_lock_acquire_recursive>
 8012a0a:	89ab      	ldrh	r3, [r5, #12]
 8012a0c:	071b      	lsls	r3, r3, #28
 8012a0e:	d501      	bpl.n	8012a14 <_vfiprintf_r+0x34>
 8012a10:	692b      	ldr	r3, [r5, #16]
 8012a12:	b99b      	cbnz	r3, 8012a3c <_vfiprintf_r+0x5c>
 8012a14:	4629      	mov	r1, r5
 8012a16:	4630      	mov	r0, r6
 8012a18:	f000 fb8a 	bl	8013130 <__swsetup_r>
 8012a1c:	b170      	cbz	r0, 8012a3c <_vfiprintf_r+0x5c>
 8012a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a20:	07dc      	lsls	r4, r3, #31
 8012a22:	d504      	bpl.n	8012a2e <_vfiprintf_r+0x4e>
 8012a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a28:	b01d      	add	sp, #116	; 0x74
 8012a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a2e:	89ab      	ldrh	r3, [r5, #12]
 8012a30:	0598      	lsls	r0, r3, #22
 8012a32:	d4f7      	bmi.n	8012a24 <_vfiprintf_r+0x44>
 8012a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a36:	f7ff fe7b 	bl	8012730 <__retarget_lock_release_recursive>
 8012a3a:	e7f3      	b.n	8012a24 <_vfiprintf_r+0x44>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8012a40:	2320      	movs	r3, #32
 8012a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a4a:	2330      	movs	r3, #48	; 0x30
 8012a4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012c00 <_vfiprintf_r+0x220>
 8012a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a54:	f04f 0901 	mov.w	r9, #1
 8012a58:	4623      	mov	r3, r4
 8012a5a:	469a      	mov	sl, r3
 8012a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a60:	b10a      	cbz	r2, 8012a66 <_vfiprintf_r+0x86>
 8012a62:	2a25      	cmp	r2, #37	; 0x25
 8012a64:	d1f9      	bne.n	8012a5a <_vfiprintf_r+0x7a>
 8012a66:	ebba 0b04 	subs.w	fp, sl, r4
 8012a6a:	d00b      	beq.n	8012a84 <_vfiprintf_r+0xa4>
 8012a6c:	465b      	mov	r3, fp
 8012a6e:	4622      	mov	r2, r4
 8012a70:	4629      	mov	r1, r5
 8012a72:	4630      	mov	r0, r6
 8012a74:	f7ff ffa1 	bl	80129ba <__sfputs_r>
 8012a78:	3001      	adds	r0, #1
 8012a7a:	f000 80a9 	beq.w	8012bd0 <_vfiprintf_r+0x1f0>
 8012a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a80:	445a      	add	r2, fp
 8012a82:	9209      	str	r2, [sp, #36]	; 0x24
 8012a84:	f89a 3000 	ldrb.w	r3, [sl]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f000 80a1 	beq.w	8012bd0 <_vfiprintf_r+0x1f0>
 8012a8e:	2300      	movs	r3, #0
 8012a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a98:	f10a 0a01 	add.w	sl, sl, #1
 8012a9c:	9304      	str	r3, [sp, #16]
 8012a9e:	9307      	str	r3, [sp, #28]
 8012aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8012aa6:	4654      	mov	r4, sl
 8012aa8:	2205      	movs	r2, #5
 8012aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aae:	4854      	ldr	r0, [pc, #336]	; (8012c00 <_vfiprintf_r+0x220>)
 8012ab0:	f7ed fbc6 	bl	8000240 <memchr>
 8012ab4:	9a04      	ldr	r2, [sp, #16]
 8012ab6:	b9d8      	cbnz	r0, 8012af0 <_vfiprintf_r+0x110>
 8012ab8:	06d1      	lsls	r1, r2, #27
 8012aba:	bf44      	itt	mi
 8012abc:	2320      	movmi	r3, #32
 8012abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ac2:	0713      	lsls	r3, r2, #28
 8012ac4:	bf44      	itt	mi
 8012ac6:	232b      	movmi	r3, #43	; 0x2b
 8012ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012acc:	f89a 3000 	ldrb.w	r3, [sl]
 8012ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ad2:	d015      	beq.n	8012b00 <_vfiprintf_r+0x120>
 8012ad4:	9a07      	ldr	r2, [sp, #28]
 8012ad6:	4654      	mov	r4, sl
 8012ad8:	2000      	movs	r0, #0
 8012ada:	f04f 0c0a 	mov.w	ip, #10
 8012ade:	4621      	mov	r1, r4
 8012ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ae4:	3b30      	subs	r3, #48	; 0x30
 8012ae6:	2b09      	cmp	r3, #9
 8012ae8:	d94d      	bls.n	8012b86 <_vfiprintf_r+0x1a6>
 8012aea:	b1b0      	cbz	r0, 8012b1a <_vfiprintf_r+0x13a>
 8012aec:	9207      	str	r2, [sp, #28]
 8012aee:	e014      	b.n	8012b1a <_vfiprintf_r+0x13a>
 8012af0:	eba0 0308 	sub.w	r3, r0, r8
 8012af4:	fa09 f303 	lsl.w	r3, r9, r3
 8012af8:	4313      	orrs	r3, r2
 8012afa:	9304      	str	r3, [sp, #16]
 8012afc:	46a2      	mov	sl, r4
 8012afe:	e7d2      	b.n	8012aa6 <_vfiprintf_r+0xc6>
 8012b00:	9b03      	ldr	r3, [sp, #12]
 8012b02:	1d19      	adds	r1, r3, #4
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	9103      	str	r1, [sp, #12]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	bfbb      	ittet	lt
 8012b0c:	425b      	neglt	r3, r3
 8012b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8012b12:	9307      	strge	r3, [sp, #28]
 8012b14:	9307      	strlt	r3, [sp, #28]
 8012b16:	bfb8      	it	lt
 8012b18:	9204      	strlt	r2, [sp, #16]
 8012b1a:	7823      	ldrb	r3, [r4, #0]
 8012b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b1e:	d10c      	bne.n	8012b3a <_vfiprintf_r+0x15a>
 8012b20:	7863      	ldrb	r3, [r4, #1]
 8012b22:	2b2a      	cmp	r3, #42	; 0x2a
 8012b24:	d134      	bne.n	8012b90 <_vfiprintf_r+0x1b0>
 8012b26:	9b03      	ldr	r3, [sp, #12]
 8012b28:	1d1a      	adds	r2, r3, #4
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	9203      	str	r2, [sp, #12]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	bfb8      	it	lt
 8012b32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012b36:	3402      	adds	r4, #2
 8012b38:	9305      	str	r3, [sp, #20]
 8012b3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012c10 <_vfiprintf_r+0x230>
 8012b3e:	7821      	ldrb	r1, [r4, #0]
 8012b40:	2203      	movs	r2, #3
 8012b42:	4650      	mov	r0, sl
 8012b44:	f7ed fb7c 	bl	8000240 <memchr>
 8012b48:	b138      	cbz	r0, 8012b5a <_vfiprintf_r+0x17a>
 8012b4a:	9b04      	ldr	r3, [sp, #16]
 8012b4c:	eba0 000a 	sub.w	r0, r0, sl
 8012b50:	2240      	movs	r2, #64	; 0x40
 8012b52:	4082      	lsls	r2, r0
 8012b54:	4313      	orrs	r3, r2
 8012b56:	3401      	adds	r4, #1
 8012b58:	9304      	str	r3, [sp, #16]
 8012b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b5e:	4829      	ldr	r0, [pc, #164]	; (8012c04 <_vfiprintf_r+0x224>)
 8012b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b64:	2206      	movs	r2, #6
 8012b66:	f7ed fb6b 	bl	8000240 <memchr>
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	d03f      	beq.n	8012bee <_vfiprintf_r+0x20e>
 8012b6e:	4b26      	ldr	r3, [pc, #152]	; (8012c08 <_vfiprintf_r+0x228>)
 8012b70:	bb1b      	cbnz	r3, 8012bba <_vfiprintf_r+0x1da>
 8012b72:	9b03      	ldr	r3, [sp, #12]
 8012b74:	3307      	adds	r3, #7
 8012b76:	f023 0307 	bic.w	r3, r3, #7
 8012b7a:	3308      	adds	r3, #8
 8012b7c:	9303      	str	r3, [sp, #12]
 8012b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b80:	443b      	add	r3, r7
 8012b82:	9309      	str	r3, [sp, #36]	; 0x24
 8012b84:	e768      	b.n	8012a58 <_vfiprintf_r+0x78>
 8012b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b8a:	460c      	mov	r4, r1
 8012b8c:	2001      	movs	r0, #1
 8012b8e:	e7a6      	b.n	8012ade <_vfiprintf_r+0xfe>
 8012b90:	2300      	movs	r3, #0
 8012b92:	3401      	adds	r4, #1
 8012b94:	9305      	str	r3, [sp, #20]
 8012b96:	4619      	mov	r1, r3
 8012b98:	f04f 0c0a 	mov.w	ip, #10
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ba2:	3a30      	subs	r2, #48	; 0x30
 8012ba4:	2a09      	cmp	r2, #9
 8012ba6:	d903      	bls.n	8012bb0 <_vfiprintf_r+0x1d0>
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d0c6      	beq.n	8012b3a <_vfiprintf_r+0x15a>
 8012bac:	9105      	str	r1, [sp, #20]
 8012bae:	e7c4      	b.n	8012b3a <_vfiprintf_r+0x15a>
 8012bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e7f0      	b.n	8012b9c <_vfiprintf_r+0x1bc>
 8012bba:	ab03      	add	r3, sp, #12
 8012bbc:	9300      	str	r3, [sp, #0]
 8012bbe:	462a      	mov	r2, r5
 8012bc0:	4b12      	ldr	r3, [pc, #72]	; (8012c0c <_vfiprintf_r+0x22c>)
 8012bc2:	a904      	add	r1, sp, #16
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f3af 8000 	nop.w
 8012bca:	4607      	mov	r7, r0
 8012bcc:	1c78      	adds	r0, r7, #1
 8012bce:	d1d6      	bne.n	8012b7e <_vfiprintf_r+0x19e>
 8012bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bd2:	07d9      	lsls	r1, r3, #31
 8012bd4:	d405      	bmi.n	8012be2 <_vfiprintf_r+0x202>
 8012bd6:	89ab      	ldrh	r3, [r5, #12]
 8012bd8:	059a      	lsls	r2, r3, #22
 8012bda:	d402      	bmi.n	8012be2 <_vfiprintf_r+0x202>
 8012bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bde:	f7ff fda7 	bl	8012730 <__retarget_lock_release_recursive>
 8012be2:	89ab      	ldrh	r3, [r5, #12]
 8012be4:	065b      	lsls	r3, r3, #25
 8012be6:	f53f af1d 	bmi.w	8012a24 <_vfiprintf_r+0x44>
 8012bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bec:	e71c      	b.n	8012a28 <_vfiprintf_r+0x48>
 8012bee:	ab03      	add	r3, sp, #12
 8012bf0:	9300      	str	r3, [sp, #0]
 8012bf2:	462a      	mov	r2, r5
 8012bf4:	4b05      	ldr	r3, [pc, #20]	; (8012c0c <_vfiprintf_r+0x22c>)
 8012bf6:	a904      	add	r1, sp, #16
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	f000 f879 	bl	8012cf0 <_printf_i>
 8012bfe:	e7e4      	b.n	8012bca <_vfiprintf_r+0x1ea>
 8012c00:	080162fd 	.word	0x080162fd
 8012c04:	08016307 	.word	0x08016307
 8012c08:	00000000 	.word	0x00000000
 8012c0c:	080129bb 	.word	0x080129bb
 8012c10:	08016303 	.word	0x08016303

08012c14 <_printf_common>:
 8012c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c18:	4616      	mov	r6, r2
 8012c1a:	4699      	mov	r9, r3
 8012c1c:	688a      	ldr	r2, [r1, #8]
 8012c1e:	690b      	ldr	r3, [r1, #16]
 8012c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c24:	4293      	cmp	r3, r2
 8012c26:	bfb8      	it	lt
 8012c28:	4613      	movlt	r3, r2
 8012c2a:	6033      	str	r3, [r6, #0]
 8012c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c30:	4607      	mov	r7, r0
 8012c32:	460c      	mov	r4, r1
 8012c34:	b10a      	cbz	r2, 8012c3a <_printf_common+0x26>
 8012c36:	3301      	adds	r3, #1
 8012c38:	6033      	str	r3, [r6, #0]
 8012c3a:	6823      	ldr	r3, [r4, #0]
 8012c3c:	0699      	lsls	r1, r3, #26
 8012c3e:	bf42      	ittt	mi
 8012c40:	6833      	ldrmi	r3, [r6, #0]
 8012c42:	3302      	addmi	r3, #2
 8012c44:	6033      	strmi	r3, [r6, #0]
 8012c46:	6825      	ldr	r5, [r4, #0]
 8012c48:	f015 0506 	ands.w	r5, r5, #6
 8012c4c:	d106      	bne.n	8012c5c <_printf_common+0x48>
 8012c4e:	f104 0a19 	add.w	sl, r4, #25
 8012c52:	68e3      	ldr	r3, [r4, #12]
 8012c54:	6832      	ldr	r2, [r6, #0]
 8012c56:	1a9b      	subs	r3, r3, r2
 8012c58:	42ab      	cmp	r3, r5
 8012c5a:	dc26      	bgt.n	8012caa <_printf_common+0x96>
 8012c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012c60:	1e13      	subs	r3, r2, #0
 8012c62:	6822      	ldr	r2, [r4, #0]
 8012c64:	bf18      	it	ne
 8012c66:	2301      	movne	r3, #1
 8012c68:	0692      	lsls	r2, r2, #26
 8012c6a:	d42b      	bmi.n	8012cc4 <_printf_common+0xb0>
 8012c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c70:	4649      	mov	r1, r9
 8012c72:	4638      	mov	r0, r7
 8012c74:	47c0      	blx	r8
 8012c76:	3001      	adds	r0, #1
 8012c78:	d01e      	beq.n	8012cb8 <_printf_common+0xa4>
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	6922      	ldr	r2, [r4, #16]
 8012c7e:	f003 0306 	and.w	r3, r3, #6
 8012c82:	2b04      	cmp	r3, #4
 8012c84:	bf02      	ittt	eq
 8012c86:	68e5      	ldreq	r5, [r4, #12]
 8012c88:	6833      	ldreq	r3, [r6, #0]
 8012c8a:	1aed      	subeq	r5, r5, r3
 8012c8c:	68a3      	ldr	r3, [r4, #8]
 8012c8e:	bf0c      	ite	eq
 8012c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c94:	2500      	movne	r5, #0
 8012c96:	4293      	cmp	r3, r2
 8012c98:	bfc4      	itt	gt
 8012c9a:	1a9b      	subgt	r3, r3, r2
 8012c9c:	18ed      	addgt	r5, r5, r3
 8012c9e:	2600      	movs	r6, #0
 8012ca0:	341a      	adds	r4, #26
 8012ca2:	42b5      	cmp	r5, r6
 8012ca4:	d11a      	bne.n	8012cdc <_printf_common+0xc8>
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	e008      	b.n	8012cbc <_printf_common+0xa8>
 8012caa:	2301      	movs	r3, #1
 8012cac:	4652      	mov	r2, sl
 8012cae:	4649      	mov	r1, r9
 8012cb0:	4638      	mov	r0, r7
 8012cb2:	47c0      	blx	r8
 8012cb4:	3001      	adds	r0, #1
 8012cb6:	d103      	bne.n	8012cc0 <_printf_common+0xac>
 8012cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cc0:	3501      	adds	r5, #1
 8012cc2:	e7c6      	b.n	8012c52 <_printf_common+0x3e>
 8012cc4:	18e1      	adds	r1, r4, r3
 8012cc6:	1c5a      	adds	r2, r3, #1
 8012cc8:	2030      	movs	r0, #48	; 0x30
 8012cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012cce:	4422      	add	r2, r4
 8012cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012cd8:	3302      	adds	r3, #2
 8012cda:	e7c7      	b.n	8012c6c <_printf_common+0x58>
 8012cdc:	2301      	movs	r3, #1
 8012cde:	4622      	mov	r2, r4
 8012ce0:	4649      	mov	r1, r9
 8012ce2:	4638      	mov	r0, r7
 8012ce4:	47c0      	blx	r8
 8012ce6:	3001      	adds	r0, #1
 8012ce8:	d0e6      	beq.n	8012cb8 <_printf_common+0xa4>
 8012cea:	3601      	adds	r6, #1
 8012cec:	e7d9      	b.n	8012ca2 <_printf_common+0x8e>
	...

08012cf0 <_printf_i>:
 8012cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf4:	7e0f      	ldrb	r7, [r1, #24]
 8012cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012cf8:	2f78      	cmp	r7, #120	; 0x78
 8012cfa:	4691      	mov	r9, r2
 8012cfc:	4680      	mov	r8, r0
 8012cfe:	460c      	mov	r4, r1
 8012d00:	469a      	mov	sl, r3
 8012d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012d06:	d807      	bhi.n	8012d18 <_printf_i+0x28>
 8012d08:	2f62      	cmp	r7, #98	; 0x62
 8012d0a:	d80a      	bhi.n	8012d22 <_printf_i+0x32>
 8012d0c:	2f00      	cmp	r7, #0
 8012d0e:	f000 80d4 	beq.w	8012eba <_printf_i+0x1ca>
 8012d12:	2f58      	cmp	r7, #88	; 0x58
 8012d14:	f000 80c0 	beq.w	8012e98 <_printf_i+0x1a8>
 8012d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012d20:	e03a      	b.n	8012d98 <_printf_i+0xa8>
 8012d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012d26:	2b15      	cmp	r3, #21
 8012d28:	d8f6      	bhi.n	8012d18 <_printf_i+0x28>
 8012d2a:	a101      	add	r1, pc, #4	; (adr r1, 8012d30 <_printf_i+0x40>)
 8012d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d30:	08012d89 	.word	0x08012d89
 8012d34:	08012d9d 	.word	0x08012d9d
 8012d38:	08012d19 	.word	0x08012d19
 8012d3c:	08012d19 	.word	0x08012d19
 8012d40:	08012d19 	.word	0x08012d19
 8012d44:	08012d19 	.word	0x08012d19
 8012d48:	08012d9d 	.word	0x08012d9d
 8012d4c:	08012d19 	.word	0x08012d19
 8012d50:	08012d19 	.word	0x08012d19
 8012d54:	08012d19 	.word	0x08012d19
 8012d58:	08012d19 	.word	0x08012d19
 8012d5c:	08012ea1 	.word	0x08012ea1
 8012d60:	08012dc9 	.word	0x08012dc9
 8012d64:	08012e5b 	.word	0x08012e5b
 8012d68:	08012d19 	.word	0x08012d19
 8012d6c:	08012d19 	.word	0x08012d19
 8012d70:	08012ec3 	.word	0x08012ec3
 8012d74:	08012d19 	.word	0x08012d19
 8012d78:	08012dc9 	.word	0x08012dc9
 8012d7c:	08012d19 	.word	0x08012d19
 8012d80:	08012d19 	.word	0x08012d19
 8012d84:	08012e63 	.word	0x08012e63
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	1d1a      	adds	r2, r3, #4
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	602a      	str	r2, [r5, #0]
 8012d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d98:	2301      	movs	r3, #1
 8012d9a:	e09f      	b.n	8012edc <_printf_i+0x1ec>
 8012d9c:	6820      	ldr	r0, [r4, #0]
 8012d9e:	682b      	ldr	r3, [r5, #0]
 8012da0:	0607      	lsls	r7, r0, #24
 8012da2:	f103 0104 	add.w	r1, r3, #4
 8012da6:	6029      	str	r1, [r5, #0]
 8012da8:	d501      	bpl.n	8012dae <_printf_i+0xbe>
 8012daa:	681e      	ldr	r6, [r3, #0]
 8012dac:	e003      	b.n	8012db6 <_printf_i+0xc6>
 8012dae:	0646      	lsls	r6, r0, #25
 8012db0:	d5fb      	bpl.n	8012daa <_printf_i+0xba>
 8012db2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012db6:	2e00      	cmp	r6, #0
 8012db8:	da03      	bge.n	8012dc2 <_printf_i+0xd2>
 8012dba:	232d      	movs	r3, #45	; 0x2d
 8012dbc:	4276      	negs	r6, r6
 8012dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012dc2:	485a      	ldr	r0, [pc, #360]	; (8012f2c <_printf_i+0x23c>)
 8012dc4:	230a      	movs	r3, #10
 8012dc6:	e012      	b.n	8012dee <_printf_i+0xfe>
 8012dc8:	682b      	ldr	r3, [r5, #0]
 8012dca:	6820      	ldr	r0, [r4, #0]
 8012dcc:	1d19      	adds	r1, r3, #4
 8012dce:	6029      	str	r1, [r5, #0]
 8012dd0:	0605      	lsls	r5, r0, #24
 8012dd2:	d501      	bpl.n	8012dd8 <_printf_i+0xe8>
 8012dd4:	681e      	ldr	r6, [r3, #0]
 8012dd6:	e002      	b.n	8012dde <_printf_i+0xee>
 8012dd8:	0641      	lsls	r1, r0, #25
 8012dda:	d5fb      	bpl.n	8012dd4 <_printf_i+0xe4>
 8012ddc:	881e      	ldrh	r6, [r3, #0]
 8012dde:	4853      	ldr	r0, [pc, #332]	; (8012f2c <_printf_i+0x23c>)
 8012de0:	2f6f      	cmp	r7, #111	; 0x6f
 8012de2:	bf0c      	ite	eq
 8012de4:	2308      	moveq	r3, #8
 8012de6:	230a      	movne	r3, #10
 8012de8:	2100      	movs	r1, #0
 8012dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012dee:	6865      	ldr	r5, [r4, #4]
 8012df0:	60a5      	str	r5, [r4, #8]
 8012df2:	2d00      	cmp	r5, #0
 8012df4:	bfa2      	ittt	ge
 8012df6:	6821      	ldrge	r1, [r4, #0]
 8012df8:	f021 0104 	bicge.w	r1, r1, #4
 8012dfc:	6021      	strge	r1, [r4, #0]
 8012dfe:	b90e      	cbnz	r6, 8012e04 <_printf_i+0x114>
 8012e00:	2d00      	cmp	r5, #0
 8012e02:	d04b      	beq.n	8012e9c <_printf_i+0x1ac>
 8012e04:	4615      	mov	r5, r2
 8012e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8012e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8012e0e:	5dc7      	ldrb	r7, [r0, r7]
 8012e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012e14:	4637      	mov	r7, r6
 8012e16:	42bb      	cmp	r3, r7
 8012e18:	460e      	mov	r6, r1
 8012e1a:	d9f4      	bls.n	8012e06 <_printf_i+0x116>
 8012e1c:	2b08      	cmp	r3, #8
 8012e1e:	d10b      	bne.n	8012e38 <_printf_i+0x148>
 8012e20:	6823      	ldr	r3, [r4, #0]
 8012e22:	07de      	lsls	r6, r3, #31
 8012e24:	d508      	bpl.n	8012e38 <_printf_i+0x148>
 8012e26:	6923      	ldr	r3, [r4, #16]
 8012e28:	6861      	ldr	r1, [r4, #4]
 8012e2a:	4299      	cmp	r1, r3
 8012e2c:	bfde      	ittt	le
 8012e2e:	2330      	movle	r3, #48	; 0x30
 8012e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012e38:	1b52      	subs	r2, r2, r5
 8012e3a:	6122      	str	r2, [r4, #16]
 8012e3c:	f8cd a000 	str.w	sl, [sp]
 8012e40:	464b      	mov	r3, r9
 8012e42:	aa03      	add	r2, sp, #12
 8012e44:	4621      	mov	r1, r4
 8012e46:	4640      	mov	r0, r8
 8012e48:	f7ff fee4 	bl	8012c14 <_printf_common>
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	d14a      	bne.n	8012ee6 <_printf_i+0x1f6>
 8012e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e54:	b004      	add	sp, #16
 8012e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	f043 0320 	orr.w	r3, r3, #32
 8012e60:	6023      	str	r3, [r4, #0]
 8012e62:	4833      	ldr	r0, [pc, #204]	; (8012f30 <_printf_i+0x240>)
 8012e64:	2778      	movs	r7, #120	; 0x78
 8012e66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012e6a:	6823      	ldr	r3, [r4, #0]
 8012e6c:	6829      	ldr	r1, [r5, #0]
 8012e6e:	061f      	lsls	r7, r3, #24
 8012e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8012e74:	d402      	bmi.n	8012e7c <_printf_i+0x18c>
 8012e76:	065f      	lsls	r7, r3, #25
 8012e78:	bf48      	it	mi
 8012e7a:	b2b6      	uxthmi	r6, r6
 8012e7c:	07df      	lsls	r7, r3, #31
 8012e7e:	bf48      	it	mi
 8012e80:	f043 0320 	orrmi.w	r3, r3, #32
 8012e84:	6029      	str	r1, [r5, #0]
 8012e86:	bf48      	it	mi
 8012e88:	6023      	strmi	r3, [r4, #0]
 8012e8a:	b91e      	cbnz	r6, 8012e94 <_printf_i+0x1a4>
 8012e8c:	6823      	ldr	r3, [r4, #0]
 8012e8e:	f023 0320 	bic.w	r3, r3, #32
 8012e92:	6023      	str	r3, [r4, #0]
 8012e94:	2310      	movs	r3, #16
 8012e96:	e7a7      	b.n	8012de8 <_printf_i+0xf8>
 8012e98:	4824      	ldr	r0, [pc, #144]	; (8012f2c <_printf_i+0x23c>)
 8012e9a:	e7e4      	b.n	8012e66 <_printf_i+0x176>
 8012e9c:	4615      	mov	r5, r2
 8012e9e:	e7bd      	b.n	8012e1c <_printf_i+0x12c>
 8012ea0:	682b      	ldr	r3, [r5, #0]
 8012ea2:	6826      	ldr	r6, [r4, #0]
 8012ea4:	6961      	ldr	r1, [r4, #20]
 8012ea6:	1d18      	adds	r0, r3, #4
 8012ea8:	6028      	str	r0, [r5, #0]
 8012eaa:	0635      	lsls	r5, r6, #24
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	d501      	bpl.n	8012eb4 <_printf_i+0x1c4>
 8012eb0:	6019      	str	r1, [r3, #0]
 8012eb2:	e002      	b.n	8012eba <_printf_i+0x1ca>
 8012eb4:	0670      	lsls	r0, r6, #25
 8012eb6:	d5fb      	bpl.n	8012eb0 <_printf_i+0x1c0>
 8012eb8:	8019      	strh	r1, [r3, #0]
 8012eba:	2300      	movs	r3, #0
 8012ebc:	6123      	str	r3, [r4, #16]
 8012ebe:	4615      	mov	r5, r2
 8012ec0:	e7bc      	b.n	8012e3c <_printf_i+0x14c>
 8012ec2:	682b      	ldr	r3, [r5, #0]
 8012ec4:	1d1a      	adds	r2, r3, #4
 8012ec6:	602a      	str	r2, [r5, #0]
 8012ec8:	681d      	ldr	r5, [r3, #0]
 8012eca:	6862      	ldr	r2, [r4, #4]
 8012ecc:	2100      	movs	r1, #0
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f7ed f9b6 	bl	8000240 <memchr>
 8012ed4:	b108      	cbz	r0, 8012eda <_printf_i+0x1ea>
 8012ed6:	1b40      	subs	r0, r0, r5
 8012ed8:	6060      	str	r0, [r4, #4]
 8012eda:	6863      	ldr	r3, [r4, #4]
 8012edc:	6123      	str	r3, [r4, #16]
 8012ede:	2300      	movs	r3, #0
 8012ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ee4:	e7aa      	b.n	8012e3c <_printf_i+0x14c>
 8012ee6:	6923      	ldr	r3, [r4, #16]
 8012ee8:	462a      	mov	r2, r5
 8012eea:	4649      	mov	r1, r9
 8012eec:	4640      	mov	r0, r8
 8012eee:	47d0      	blx	sl
 8012ef0:	3001      	adds	r0, #1
 8012ef2:	d0ad      	beq.n	8012e50 <_printf_i+0x160>
 8012ef4:	6823      	ldr	r3, [r4, #0]
 8012ef6:	079b      	lsls	r3, r3, #30
 8012ef8:	d413      	bmi.n	8012f22 <_printf_i+0x232>
 8012efa:	68e0      	ldr	r0, [r4, #12]
 8012efc:	9b03      	ldr	r3, [sp, #12]
 8012efe:	4298      	cmp	r0, r3
 8012f00:	bfb8      	it	lt
 8012f02:	4618      	movlt	r0, r3
 8012f04:	e7a6      	b.n	8012e54 <_printf_i+0x164>
 8012f06:	2301      	movs	r3, #1
 8012f08:	4632      	mov	r2, r6
 8012f0a:	4649      	mov	r1, r9
 8012f0c:	4640      	mov	r0, r8
 8012f0e:	47d0      	blx	sl
 8012f10:	3001      	adds	r0, #1
 8012f12:	d09d      	beq.n	8012e50 <_printf_i+0x160>
 8012f14:	3501      	adds	r5, #1
 8012f16:	68e3      	ldr	r3, [r4, #12]
 8012f18:	9903      	ldr	r1, [sp, #12]
 8012f1a:	1a5b      	subs	r3, r3, r1
 8012f1c:	42ab      	cmp	r3, r5
 8012f1e:	dcf2      	bgt.n	8012f06 <_printf_i+0x216>
 8012f20:	e7eb      	b.n	8012efa <_printf_i+0x20a>
 8012f22:	2500      	movs	r5, #0
 8012f24:	f104 0619 	add.w	r6, r4, #25
 8012f28:	e7f5      	b.n	8012f16 <_printf_i+0x226>
 8012f2a:	bf00      	nop
 8012f2c:	0801630e 	.word	0x0801630e
 8012f30:	0801631f 	.word	0x0801631f

08012f34 <__sflush_r>:
 8012f34:	898a      	ldrh	r2, [r1, #12]
 8012f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f3a:	4605      	mov	r5, r0
 8012f3c:	0710      	lsls	r0, r2, #28
 8012f3e:	460c      	mov	r4, r1
 8012f40:	d458      	bmi.n	8012ff4 <__sflush_r+0xc0>
 8012f42:	684b      	ldr	r3, [r1, #4]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	dc05      	bgt.n	8012f54 <__sflush_r+0x20>
 8012f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	dc02      	bgt.n	8012f54 <__sflush_r+0x20>
 8012f4e:	2000      	movs	r0, #0
 8012f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f56:	2e00      	cmp	r6, #0
 8012f58:	d0f9      	beq.n	8012f4e <__sflush_r+0x1a>
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f60:	682f      	ldr	r7, [r5, #0]
 8012f62:	6a21      	ldr	r1, [r4, #32]
 8012f64:	602b      	str	r3, [r5, #0]
 8012f66:	d032      	beq.n	8012fce <__sflush_r+0x9a>
 8012f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f6a:	89a3      	ldrh	r3, [r4, #12]
 8012f6c:	075a      	lsls	r2, r3, #29
 8012f6e:	d505      	bpl.n	8012f7c <__sflush_r+0x48>
 8012f70:	6863      	ldr	r3, [r4, #4]
 8012f72:	1ac0      	subs	r0, r0, r3
 8012f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f76:	b10b      	cbz	r3, 8012f7c <__sflush_r+0x48>
 8012f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f7a:	1ac0      	subs	r0, r0, r3
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4602      	mov	r2, r0
 8012f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f82:	6a21      	ldr	r1, [r4, #32]
 8012f84:	4628      	mov	r0, r5
 8012f86:	47b0      	blx	r6
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	89a3      	ldrh	r3, [r4, #12]
 8012f8c:	d106      	bne.n	8012f9c <__sflush_r+0x68>
 8012f8e:	6829      	ldr	r1, [r5, #0]
 8012f90:	291d      	cmp	r1, #29
 8012f92:	d82b      	bhi.n	8012fec <__sflush_r+0xb8>
 8012f94:	4a29      	ldr	r2, [pc, #164]	; (801303c <__sflush_r+0x108>)
 8012f96:	410a      	asrs	r2, r1
 8012f98:	07d6      	lsls	r6, r2, #31
 8012f9a:	d427      	bmi.n	8012fec <__sflush_r+0xb8>
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	6062      	str	r2, [r4, #4]
 8012fa0:	04d9      	lsls	r1, r3, #19
 8012fa2:	6922      	ldr	r2, [r4, #16]
 8012fa4:	6022      	str	r2, [r4, #0]
 8012fa6:	d504      	bpl.n	8012fb2 <__sflush_r+0x7e>
 8012fa8:	1c42      	adds	r2, r0, #1
 8012faa:	d101      	bne.n	8012fb0 <__sflush_r+0x7c>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	b903      	cbnz	r3, 8012fb2 <__sflush_r+0x7e>
 8012fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8012fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fb4:	602f      	str	r7, [r5, #0]
 8012fb6:	2900      	cmp	r1, #0
 8012fb8:	d0c9      	beq.n	8012f4e <__sflush_r+0x1a>
 8012fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fbe:	4299      	cmp	r1, r3
 8012fc0:	d002      	beq.n	8012fc8 <__sflush_r+0x94>
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f7ff fbe2 	bl	801278c <_free_r>
 8012fc8:	2000      	movs	r0, #0
 8012fca:	6360      	str	r0, [r4, #52]	; 0x34
 8012fcc:	e7c0      	b.n	8012f50 <__sflush_r+0x1c>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	47b0      	blx	r6
 8012fd4:	1c41      	adds	r1, r0, #1
 8012fd6:	d1c8      	bne.n	8012f6a <__sflush_r+0x36>
 8012fd8:	682b      	ldr	r3, [r5, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d0c5      	beq.n	8012f6a <__sflush_r+0x36>
 8012fde:	2b1d      	cmp	r3, #29
 8012fe0:	d001      	beq.n	8012fe6 <__sflush_r+0xb2>
 8012fe2:	2b16      	cmp	r3, #22
 8012fe4:	d101      	bne.n	8012fea <__sflush_r+0xb6>
 8012fe6:	602f      	str	r7, [r5, #0]
 8012fe8:	e7b1      	b.n	8012f4e <__sflush_r+0x1a>
 8012fea:	89a3      	ldrh	r3, [r4, #12]
 8012fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ff0:	81a3      	strh	r3, [r4, #12]
 8012ff2:	e7ad      	b.n	8012f50 <__sflush_r+0x1c>
 8012ff4:	690f      	ldr	r7, [r1, #16]
 8012ff6:	2f00      	cmp	r7, #0
 8012ff8:	d0a9      	beq.n	8012f4e <__sflush_r+0x1a>
 8012ffa:	0793      	lsls	r3, r2, #30
 8012ffc:	680e      	ldr	r6, [r1, #0]
 8012ffe:	bf08      	it	eq
 8013000:	694b      	ldreq	r3, [r1, #20]
 8013002:	600f      	str	r7, [r1, #0]
 8013004:	bf18      	it	ne
 8013006:	2300      	movne	r3, #0
 8013008:	eba6 0807 	sub.w	r8, r6, r7
 801300c:	608b      	str	r3, [r1, #8]
 801300e:	f1b8 0f00 	cmp.w	r8, #0
 8013012:	dd9c      	ble.n	8012f4e <__sflush_r+0x1a>
 8013014:	6a21      	ldr	r1, [r4, #32]
 8013016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013018:	4643      	mov	r3, r8
 801301a:	463a      	mov	r2, r7
 801301c:	4628      	mov	r0, r5
 801301e:	47b0      	blx	r6
 8013020:	2800      	cmp	r0, #0
 8013022:	dc06      	bgt.n	8013032 <__sflush_r+0xfe>
 8013024:	89a3      	ldrh	r3, [r4, #12]
 8013026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801302a:	81a3      	strh	r3, [r4, #12]
 801302c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013030:	e78e      	b.n	8012f50 <__sflush_r+0x1c>
 8013032:	4407      	add	r7, r0
 8013034:	eba8 0800 	sub.w	r8, r8, r0
 8013038:	e7e9      	b.n	801300e <__sflush_r+0xda>
 801303a:	bf00      	nop
 801303c:	dfbffffe 	.word	0xdfbffffe

08013040 <_fflush_r>:
 8013040:	b538      	push	{r3, r4, r5, lr}
 8013042:	690b      	ldr	r3, [r1, #16]
 8013044:	4605      	mov	r5, r0
 8013046:	460c      	mov	r4, r1
 8013048:	b913      	cbnz	r3, 8013050 <_fflush_r+0x10>
 801304a:	2500      	movs	r5, #0
 801304c:	4628      	mov	r0, r5
 801304e:	bd38      	pop	{r3, r4, r5, pc}
 8013050:	b118      	cbz	r0, 801305a <_fflush_r+0x1a>
 8013052:	6a03      	ldr	r3, [r0, #32]
 8013054:	b90b      	cbnz	r3, 801305a <_fflush_r+0x1a>
 8013056:	f7ff fa5b 	bl	8012510 <__sinit>
 801305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d0f3      	beq.n	801304a <_fflush_r+0xa>
 8013062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013064:	07d0      	lsls	r0, r2, #31
 8013066:	d404      	bmi.n	8013072 <_fflush_r+0x32>
 8013068:	0599      	lsls	r1, r3, #22
 801306a:	d402      	bmi.n	8013072 <_fflush_r+0x32>
 801306c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801306e:	f7ff fb5e 	bl	801272e <__retarget_lock_acquire_recursive>
 8013072:	4628      	mov	r0, r5
 8013074:	4621      	mov	r1, r4
 8013076:	f7ff ff5d 	bl	8012f34 <__sflush_r>
 801307a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801307c:	07da      	lsls	r2, r3, #31
 801307e:	4605      	mov	r5, r0
 8013080:	d4e4      	bmi.n	801304c <_fflush_r+0xc>
 8013082:	89a3      	ldrh	r3, [r4, #12]
 8013084:	059b      	lsls	r3, r3, #22
 8013086:	d4e1      	bmi.n	801304c <_fflush_r+0xc>
 8013088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801308a:	f7ff fb51 	bl	8012730 <__retarget_lock_release_recursive>
 801308e:	e7dd      	b.n	801304c <_fflush_r+0xc>

08013090 <fiprintf>:
 8013090:	b40e      	push	{r1, r2, r3}
 8013092:	b503      	push	{r0, r1, lr}
 8013094:	4601      	mov	r1, r0
 8013096:	ab03      	add	r3, sp, #12
 8013098:	4805      	ldr	r0, [pc, #20]	; (80130b0 <fiprintf+0x20>)
 801309a:	f853 2b04 	ldr.w	r2, [r3], #4
 801309e:	6800      	ldr	r0, [r0, #0]
 80130a0:	9301      	str	r3, [sp, #4]
 80130a2:	f7ff fc9d 	bl	80129e0 <_vfiprintf_r>
 80130a6:	b002      	add	sp, #8
 80130a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80130ac:	b003      	add	sp, #12
 80130ae:	4770      	bx	lr
 80130b0:	20000088 	.word	0x20000088

080130b4 <__swbuf_r>:
 80130b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130b6:	460e      	mov	r6, r1
 80130b8:	4614      	mov	r4, r2
 80130ba:	4605      	mov	r5, r0
 80130bc:	b118      	cbz	r0, 80130c6 <__swbuf_r+0x12>
 80130be:	6a03      	ldr	r3, [r0, #32]
 80130c0:	b90b      	cbnz	r3, 80130c6 <__swbuf_r+0x12>
 80130c2:	f7ff fa25 	bl	8012510 <__sinit>
 80130c6:	69a3      	ldr	r3, [r4, #24]
 80130c8:	60a3      	str	r3, [r4, #8]
 80130ca:	89a3      	ldrh	r3, [r4, #12]
 80130cc:	071a      	lsls	r2, r3, #28
 80130ce:	d525      	bpl.n	801311c <__swbuf_r+0x68>
 80130d0:	6923      	ldr	r3, [r4, #16]
 80130d2:	b31b      	cbz	r3, 801311c <__swbuf_r+0x68>
 80130d4:	6823      	ldr	r3, [r4, #0]
 80130d6:	6922      	ldr	r2, [r4, #16]
 80130d8:	1a98      	subs	r0, r3, r2
 80130da:	6963      	ldr	r3, [r4, #20]
 80130dc:	b2f6      	uxtb	r6, r6
 80130de:	4283      	cmp	r3, r0
 80130e0:	4637      	mov	r7, r6
 80130e2:	dc04      	bgt.n	80130ee <__swbuf_r+0x3a>
 80130e4:	4621      	mov	r1, r4
 80130e6:	4628      	mov	r0, r5
 80130e8:	f7ff ffaa 	bl	8013040 <_fflush_r>
 80130ec:	b9e0      	cbnz	r0, 8013128 <__swbuf_r+0x74>
 80130ee:	68a3      	ldr	r3, [r4, #8]
 80130f0:	3b01      	subs	r3, #1
 80130f2:	60a3      	str	r3, [r4, #8]
 80130f4:	6823      	ldr	r3, [r4, #0]
 80130f6:	1c5a      	adds	r2, r3, #1
 80130f8:	6022      	str	r2, [r4, #0]
 80130fa:	701e      	strb	r6, [r3, #0]
 80130fc:	6962      	ldr	r2, [r4, #20]
 80130fe:	1c43      	adds	r3, r0, #1
 8013100:	429a      	cmp	r2, r3
 8013102:	d004      	beq.n	801310e <__swbuf_r+0x5a>
 8013104:	89a3      	ldrh	r3, [r4, #12]
 8013106:	07db      	lsls	r3, r3, #31
 8013108:	d506      	bpl.n	8013118 <__swbuf_r+0x64>
 801310a:	2e0a      	cmp	r6, #10
 801310c:	d104      	bne.n	8013118 <__swbuf_r+0x64>
 801310e:	4621      	mov	r1, r4
 8013110:	4628      	mov	r0, r5
 8013112:	f7ff ff95 	bl	8013040 <_fflush_r>
 8013116:	b938      	cbnz	r0, 8013128 <__swbuf_r+0x74>
 8013118:	4638      	mov	r0, r7
 801311a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801311c:	4621      	mov	r1, r4
 801311e:	4628      	mov	r0, r5
 8013120:	f000 f806 	bl	8013130 <__swsetup_r>
 8013124:	2800      	cmp	r0, #0
 8013126:	d0d5      	beq.n	80130d4 <__swbuf_r+0x20>
 8013128:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801312c:	e7f4      	b.n	8013118 <__swbuf_r+0x64>
	...

08013130 <__swsetup_r>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4b2a      	ldr	r3, [pc, #168]	; (80131dc <__swsetup_r+0xac>)
 8013134:	4605      	mov	r5, r0
 8013136:	6818      	ldr	r0, [r3, #0]
 8013138:	460c      	mov	r4, r1
 801313a:	b118      	cbz	r0, 8013144 <__swsetup_r+0x14>
 801313c:	6a03      	ldr	r3, [r0, #32]
 801313e:	b90b      	cbnz	r3, 8013144 <__swsetup_r+0x14>
 8013140:	f7ff f9e6 	bl	8012510 <__sinit>
 8013144:	89a3      	ldrh	r3, [r4, #12]
 8013146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801314a:	0718      	lsls	r0, r3, #28
 801314c:	d422      	bmi.n	8013194 <__swsetup_r+0x64>
 801314e:	06d9      	lsls	r1, r3, #27
 8013150:	d407      	bmi.n	8013162 <__swsetup_r+0x32>
 8013152:	2309      	movs	r3, #9
 8013154:	602b      	str	r3, [r5, #0]
 8013156:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801315a:	81a3      	strh	r3, [r4, #12]
 801315c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013160:	e034      	b.n	80131cc <__swsetup_r+0x9c>
 8013162:	0758      	lsls	r0, r3, #29
 8013164:	d512      	bpl.n	801318c <__swsetup_r+0x5c>
 8013166:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013168:	b141      	cbz	r1, 801317c <__swsetup_r+0x4c>
 801316a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801316e:	4299      	cmp	r1, r3
 8013170:	d002      	beq.n	8013178 <__swsetup_r+0x48>
 8013172:	4628      	mov	r0, r5
 8013174:	f7ff fb0a 	bl	801278c <_free_r>
 8013178:	2300      	movs	r3, #0
 801317a:	6363      	str	r3, [r4, #52]	; 0x34
 801317c:	89a3      	ldrh	r3, [r4, #12]
 801317e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013182:	81a3      	strh	r3, [r4, #12]
 8013184:	2300      	movs	r3, #0
 8013186:	6063      	str	r3, [r4, #4]
 8013188:	6923      	ldr	r3, [r4, #16]
 801318a:	6023      	str	r3, [r4, #0]
 801318c:	89a3      	ldrh	r3, [r4, #12]
 801318e:	f043 0308 	orr.w	r3, r3, #8
 8013192:	81a3      	strh	r3, [r4, #12]
 8013194:	6923      	ldr	r3, [r4, #16]
 8013196:	b94b      	cbnz	r3, 80131ac <__swsetup_r+0x7c>
 8013198:	89a3      	ldrh	r3, [r4, #12]
 801319a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801319e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131a2:	d003      	beq.n	80131ac <__swsetup_r+0x7c>
 80131a4:	4621      	mov	r1, r4
 80131a6:	4628      	mov	r0, r5
 80131a8:	f000 f857 	bl	801325a <__smakebuf_r>
 80131ac:	89a0      	ldrh	r0, [r4, #12]
 80131ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131b2:	f010 0301 	ands.w	r3, r0, #1
 80131b6:	d00a      	beq.n	80131ce <__swsetup_r+0x9e>
 80131b8:	2300      	movs	r3, #0
 80131ba:	60a3      	str	r3, [r4, #8]
 80131bc:	6963      	ldr	r3, [r4, #20]
 80131be:	425b      	negs	r3, r3
 80131c0:	61a3      	str	r3, [r4, #24]
 80131c2:	6923      	ldr	r3, [r4, #16]
 80131c4:	b943      	cbnz	r3, 80131d8 <__swsetup_r+0xa8>
 80131c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80131ca:	d1c4      	bne.n	8013156 <__swsetup_r+0x26>
 80131cc:	bd38      	pop	{r3, r4, r5, pc}
 80131ce:	0781      	lsls	r1, r0, #30
 80131d0:	bf58      	it	pl
 80131d2:	6963      	ldrpl	r3, [r4, #20]
 80131d4:	60a3      	str	r3, [r4, #8]
 80131d6:	e7f4      	b.n	80131c2 <__swsetup_r+0x92>
 80131d8:	2000      	movs	r0, #0
 80131da:	e7f7      	b.n	80131cc <__swsetup_r+0x9c>
 80131dc:	20000088 	.word	0x20000088

080131e0 <_sbrk_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	4d06      	ldr	r5, [pc, #24]	; (80131fc <_sbrk_r+0x1c>)
 80131e4:	2300      	movs	r3, #0
 80131e6:	4604      	mov	r4, r0
 80131e8:	4608      	mov	r0, r1
 80131ea:	602b      	str	r3, [r5, #0]
 80131ec:	f7ee fac6 	bl	800177c <_sbrk>
 80131f0:	1c43      	adds	r3, r0, #1
 80131f2:	d102      	bne.n	80131fa <_sbrk_r+0x1a>
 80131f4:	682b      	ldr	r3, [r5, #0]
 80131f6:	b103      	cbz	r3, 80131fa <_sbrk_r+0x1a>
 80131f8:	6023      	str	r3, [r4, #0]
 80131fa:	bd38      	pop	{r3, r4, r5, pc}
 80131fc:	2000aa7c 	.word	0x2000aa7c

08013200 <abort>:
 8013200:	b508      	push	{r3, lr}
 8013202:	2006      	movs	r0, #6
 8013204:	f000 f88e 	bl	8013324 <raise>
 8013208:	2001      	movs	r0, #1
 801320a:	f7ee fa3f 	bl	800168c <_exit>

0801320e <__swhatbuf_r>:
 801320e:	b570      	push	{r4, r5, r6, lr}
 8013210:	460c      	mov	r4, r1
 8013212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013216:	2900      	cmp	r1, #0
 8013218:	b096      	sub	sp, #88	; 0x58
 801321a:	4615      	mov	r5, r2
 801321c:	461e      	mov	r6, r3
 801321e:	da0d      	bge.n	801323c <__swhatbuf_r+0x2e>
 8013220:	89a3      	ldrh	r3, [r4, #12]
 8013222:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013226:	f04f 0100 	mov.w	r1, #0
 801322a:	bf0c      	ite	eq
 801322c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013230:	2340      	movne	r3, #64	; 0x40
 8013232:	2000      	movs	r0, #0
 8013234:	6031      	str	r1, [r6, #0]
 8013236:	602b      	str	r3, [r5, #0]
 8013238:	b016      	add	sp, #88	; 0x58
 801323a:	bd70      	pop	{r4, r5, r6, pc}
 801323c:	466a      	mov	r2, sp
 801323e:	f000 f879 	bl	8013334 <_fstat_r>
 8013242:	2800      	cmp	r0, #0
 8013244:	dbec      	blt.n	8013220 <__swhatbuf_r+0x12>
 8013246:	9901      	ldr	r1, [sp, #4]
 8013248:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801324c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013250:	4259      	negs	r1, r3
 8013252:	4159      	adcs	r1, r3
 8013254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013258:	e7eb      	b.n	8013232 <__swhatbuf_r+0x24>

0801325a <__smakebuf_r>:
 801325a:	898b      	ldrh	r3, [r1, #12]
 801325c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801325e:	079d      	lsls	r5, r3, #30
 8013260:	4606      	mov	r6, r0
 8013262:	460c      	mov	r4, r1
 8013264:	d507      	bpl.n	8013276 <__smakebuf_r+0x1c>
 8013266:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801326a:	6023      	str	r3, [r4, #0]
 801326c:	6123      	str	r3, [r4, #16]
 801326e:	2301      	movs	r3, #1
 8013270:	6163      	str	r3, [r4, #20]
 8013272:	b002      	add	sp, #8
 8013274:	bd70      	pop	{r4, r5, r6, pc}
 8013276:	ab01      	add	r3, sp, #4
 8013278:	466a      	mov	r2, sp
 801327a:	f7ff ffc8 	bl	801320e <__swhatbuf_r>
 801327e:	9900      	ldr	r1, [sp, #0]
 8013280:	4605      	mov	r5, r0
 8013282:	4630      	mov	r0, r6
 8013284:	f7ff faf6 	bl	8012874 <_malloc_r>
 8013288:	b948      	cbnz	r0, 801329e <__smakebuf_r+0x44>
 801328a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801328e:	059a      	lsls	r2, r3, #22
 8013290:	d4ef      	bmi.n	8013272 <__smakebuf_r+0x18>
 8013292:	f023 0303 	bic.w	r3, r3, #3
 8013296:	f043 0302 	orr.w	r3, r3, #2
 801329a:	81a3      	strh	r3, [r4, #12]
 801329c:	e7e3      	b.n	8013266 <__smakebuf_r+0xc>
 801329e:	89a3      	ldrh	r3, [r4, #12]
 80132a0:	6020      	str	r0, [r4, #0]
 80132a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132a6:	81a3      	strh	r3, [r4, #12]
 80132a8:	9b00      	ldr	r3, [sp, #0]
 80132aa:	6163      	str	r3, [r4, #20]
 80132ac:	9b01      	ldr	r3, [sp, #4]
 80132ae:	6120      	str	r0, [r4, #16]
 80132b0:	b15b      	cbz	r3, 80132ca <__smakebuf_r+0x70>
 80132b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132b6:	4630      	mov	r0, r6
 80132b8:	f000 f84e 	bl	8013358 <_isatty_r>
 80132bc:	b128      	cbz	r0, 80132ca <__smakebuf_r+0x70>
 80132be:	89a3      	ldrh	r3, [r4, #12]
 80132c0:	f023 0303 	bic.w	r3, r3, #3
 80132c4:	f043 0301 	orr.w	r3, r3, #1
 80132c8:	81a3      	strh	r3, [r4, #12]
 80132ca:	89a3      	ldrh	r3, [r4, #12]
 80132cc:	431d      	orrs	r5, r3
 80132ce:	81a5      	strh	r5, [r4, #12]
 80132d0:	e7cf      	b.n	8013272 <__smakebuf_r+0x18>

080132d2 <_raise_r>:
 80132d2:	291f      	cmp	r1, #31
 80132d4:	b538      	push	{r3, r4, r5, lr}
 80132d6:	4604      	mov	r4, r0
 80132d8:	460d      	mov	r5, r1
 80132da:	d904      	bls.n	80132e6 <_raise_r+0x14>
 80132dc:	2316      	movs	r3, #22
 80132de:	6003      	str	r3, [r0, #0]
 80132e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132e4:	bd38      	pop	{r3, r4, r5, pc}
 80132e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80132e8:	b112      	cbz	r2, 80132f0 <_raise_r+0x1e>
 80132ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80132ee:	b94b      	cbnz	r3, 8013304 <_raise_r+0x32>
 80132f0:	4620      	mov	r0, r4
 80132f2:	f000 f853 	bl	801339c <_getpid_r>
 80132f6:	462a      	mov	r2, r5
 80132f8:	4601      	mov	r1, r0
 80132fa:	4620      	mov	r0, r4
 80132fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013300:	f000 b83a 	b.w	8013378 <_kill_r>
 8013304:	2b01      	cmp	r3, #1
 8013306:	d00a      	beq.n	801331e <_raise_r+0x4c>
 8013308:	1c59      	adds	r1, r3, #1
 801330a:	d103      	bne.n	8013314 <_raise_r+0x42>
 801330c:	2316      	movs	r3, #22
 801330e:	6003      	str	r3, [r0, #0]
 8013310:	2001      	movs	r0, #1
 8013312:	e7e7      	b.n	80132e4 <_raise_r+0x12>
 8013314:	2400      	movs	r4, #0
 8013316:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801331a:	4628      	mov	r0, r5
 801331c:	4798      	blx	r3
 801331e:	2000      	movs	r0, #0
 8013320:	e7e0      	b.n	80132e4 <_raise_r+0x12>
	...

08013324 <raise>:
 8013324:	4b02      	ldr	r3, [pc, #8]	; (8013330 <raise+0xc>)
 8013326:	4601      	mov	r1, r0
 8013328:	6818      	ldr	r0, [r3, #0]
 801332a:	f7ff bfd2 	b.w	80132d2 <_raise_r>
 801332e:	bf00      	nop
 8013330:	20000088 	.word	0x20000088

08013334 <_fstat_r>:
 8013334:	b538      	push	{r3, r4, r5, lr}
 8013336:	4d07      	ldr	r5, [pc, #28]	; (8013354 <_fstat_r+0x20>)
 8013338:	2300      	movs	r3, #0
 801333a:	4604      	mov	r4, r0
 801333c:	4608      	mov	r0, r1
 801333e:	4611      	mov	r1, r2
 8013340:	602b      	str	r3, [r5, #0]
 8013342:	f7ee f9f2 	bl	800172a <_fstat>
 8013346:	1c43      	adds	r3, r0, #1
 8013348:	d102      	bne.n	8013350 <_fstat_r+0x1c>
 801334a:	682b      	ldr	r3, [r5, #0]
 801334c:	b103      	cbz	r3, 8013350 <_fstat_r+0x1c>
 801334e:	6023      	str	r3, [r4, #0]
 8013350:	bd38      	pop	{r3, r4, r5, pc}
 8013352:	bf00      	nop
 8013354:	2000aa7c 	.word	0x2000aa7c

08013358 <_isatty_r>:
 8013358:	b538      	push	{r3, r4, r5, lr}
 801335a:	4d06      	ldr	r5, [pc, #24]	; (8013374 <_isatty_r+0x1c>)
 801335c:	2300      	movs	r3, #0
 801335e:	4604      	mov	r4, r0
 8013360:	4608      	mov	r0, r1
 8013362:	602b      	str	r3, [r5, #0]
 8013364:	f7ee f9f1 	bl	800174a <_isatty>
 8013368:	1c43      	adds	r3, r0, #1
 801336a:	d102      	bne.n	8013372 <_isatty_r+0x1a>
 801336c:	682b      	ldr	r3, [r5, #0]
 801336e:	b103      	cbz	r3, 8013372 <_isatty_r+0x1a>
 8013370:	6023      	str	r3, [r4, #0]
 8013372:	bd38      	pop	{r3, r4, r5, pc}
 8013374:	2000aa7c 	.word	0x2000aa7c

08013378 <_kill_r>:
 8013378:	b538      	push	{r3, r4, r5, lr}
 801337a:	4d07      	ldr	r5, [pc, #28]	; (8013398 <_kill_r+0x20>)
 801337c:	2300      	movs	r3, #0
 801337e:	4604      	mov	r4, r0
 8013380:	4608      	mov	r0, r1
 8013382:	4611      	mov	r1, r2
 8013384:	602b      	str	r3, [r5, #0]
 8013386:	f7ee f96f 	bl	8001668 <_kill>
 801338a:	1c43      	adds	r3, r0, #1
 801338c:	d102      	bne.n	8013394 <_kill_r+0x1c>
 801338e:	682b      	ldr	r3, [r5, #0]
 8013390:	b103      	cbz	r3, 8013394 <_kill_r+0x1c>
 8013392:	6023      	str	r3, [r4, #0]
 8013394:	bd38      	pop	{r3, r4, r5, pc}
 8013396:	bf00      	nop
 8013398:	2000aa7c 	.word	0x2000aa7c

0801339c <_getpid_r>:
 801339c:	f7ee b95c 	b.w	8001658 <_getpid>

080133a0 <_init>:
 80133a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133a2:	bf00      	nop
 80133a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133a6:	bc08      	pop	{r3}
 80133a8:	469e      	mov	lr, r3
 80133aa:	4770      	bx	lr

080133ac <_fini>:
 80133ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ae:	bf00      	nop
 80133b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133b2:	bc08      	pop	{r3}
 80133b4:	469e      	mov	lr, r3
 80133b6:	4770      	bx	lr
