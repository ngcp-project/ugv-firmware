
intro_azure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08010bdc  08010bdc  00020bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010da8  08010da8  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08010da8  08010da8  00020da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010db0  08010db0  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010db0  08010db0  00020db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010db4  08010db4  00020db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08010db8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000ec  08010ea4  000300ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000018c  08010f44  0003018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001823c  2000022c  08010fe4  0003022c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20018468  08010fe4  00038468  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003025a  2**0
                  CONTENTS, READONLY
 15 .debug_info   000b2fd4  00000000  00000000  0003029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000fbc7  00000000  00000000  000e3271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002200  00000000  00000000  000f2e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000177c  00000000  00000000  000f5038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003b620  00000000  00000000  000f67b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00047a55  00000000  00000000  00131dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001175cc  00000000  00000000  00179829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006dd8  00000000  00000000  00290df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ed  00000000  00000000  00297bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	08010bc4 	.word	0x08010bc4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	08010bc4 	.word	0x08010bc4

08000240 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000240:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000242:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000246:	4919      	ldr	r1, [pc, #100]	; (80002ac <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000248:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800024c:	4818      	ldr	r0, [pc, #96]	; (80002b0 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024e:	4917      	ldr	r1, [pc, #92]	; (80002ac <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000250:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000252:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000256:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000258:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800025c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800025e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000262:	4915      	ldr	r1, [pc, #84]	; (80002b8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000264:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000266:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800026a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800026c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000270:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000274:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000278:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	490f      	ldr	r1, [pc, #60]	; (80002bc <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800027e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000282:	4770      	bx	lr

08000284 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_BadHandler>

08000288 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_HardfaultHandler>

0800028c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800028c:	f7ff bffe 	b.w	800028c <__tx_SVCallHandler>

08000290 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000290:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000296:	4770      	bx	lr

08000298 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000298:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800029a:	f000 f891 	bl	80003c0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800029e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80002a2:	4770      	bx	lr

080002a4 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002a4:	f7ff bffe 	b.w	80002a4 <__tx_NMIHandler>

080002a8 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002a8:	f7ff bffe 	b.w	80002a8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ac:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002b0:	20017d0c 	.word	0x20017d0c
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002b4:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002b8:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002bc:	40ff0000 	.word	0x40ff0000

080002c0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002c0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002c4:	4a2a      	ldr	r2, [pc, #168]	; (8000370 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002c6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002c8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002cc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002d0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002d4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002de:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002e2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002e6:	f3bf 8f6f 	isb	sy

080002ea <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ea:	e7fe      	b.n	80002ea <__tx_wait_here>

080002ec <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ec:	4821      	ldr	r0, [pc, #132]	; (8000374 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ee:	4a22      	ldr	r2, [pc, #136]	; (8000378 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002f0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002f4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002f6:	b191      	cbz	r1, 800031e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002f8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002fa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002fe:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000302:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000306:	d101      	bne.n	800030c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000308:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800030c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030c:	4c1b      	ldr	r4, [pc, #108]	; (800037c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800030e:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000312:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000314:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000318:	b10d      	cbz	r5, 800031e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800031a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800031c:	6023      	str	r3, [r4, #0]

0800031e <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800031e:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000320:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000322:	b1b1      	cbz	r1, 8000352 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000324:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000326:	b662      	cpsie	i

08000328 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000328:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032a:	4c14      	ldr	r4, [pc, #80]	; (800037c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800032c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800032e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000332:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000334:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000336:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800033a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800033e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000342:	d101      	bne.n	8000348 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000344:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000348 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000348:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800034c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000350:	4770      	bx	lr

08000352 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000352:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000354:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000356:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000358:	b909      	cbnz	r1, 800035e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800035a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800035c:	e7f9      	b.n	8000352 <__tx_ts_wait>

0800035e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800035e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000362:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000366:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800036c:	e7dc      	b.n	8000328 <__tx_ts_restore>

0800036e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800036e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000370:	20017dac 	.word	0x20017dac
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000374:	20017d10 	.word	0x20017d10
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000378:	20017d14 	.word	0x20017d14
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800037c:	20018318 	.word	0x20018318

08000380 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000380:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000382:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000386:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800038a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800038e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000390:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000394:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000396:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000398:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800039a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800039c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800039e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003a0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003a2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003a4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003a6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003ac:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 80003b2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003b4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003ba:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003bc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003be:	4770      	bx	lr

080003c0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003c0:	4922      	ldr	r1, [pc, #136]	; (800044c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003c2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003c4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003c8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003ca:	4b21      	ldr	r3, [pc, #132]	; (8000450 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003cc:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ce:	b13a      	cbz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003d0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003d4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003d6:	b91a      	cbnz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003da:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003de:	6018      	str	r0, [r3, #0]

080003e0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003e0:	491d      	ldr	r1, [pc, #116]	; (8000458 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003e2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003e4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003e6:	b122      	cbz	r2, 80003f2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ea:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ee:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003f0:	e008      	b.n	8000404 <__tx_timer_done>

080003f2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003f2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003f8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003fa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003fc:	d101      	bne.n	8000402 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000400:	6818      	ldr	r0, [r3, #0]

08000402 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000402:	6008      	str	r0, [r1, #0]

08000404 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000406:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000408:	b912      	cbnz	r2, 8000410 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800040a:	4914      	ldr	r1, [pc, #80]	; (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800040c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800040e:	b1d0      	cbz	r0, 8000446 <__tx_timer_nothing_expired>

08000410 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000410:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000414:	4911      	ldr	r1, [pc, #68]	; (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000416:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000418:	b108      	cbz	r0, 800041e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800041a:	f00e fc2f 	bl	800ec7c <_tx_timer_expiration_process>

0800041e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000422:	b172      	cbz	r2, 8000442 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000424:	f00e fac4 	bl	800e9b0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	480f      	ldr	r0, [pc, #60]	; (8000468 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800042a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800042c:	b949      	cbnz	r1, 8000442 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000430:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000434:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000436:	480f      	ldr	r0, [pc, #60]	; (8000474 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800043c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800043e:	d000      	beq.n	8000442 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000440:	6002      	str	r2, [r0, #0]

08000442 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000446 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000446:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800044a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800044c:	20017db8 	.word	0x20017db8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000450:	20018318 	.word	0x20018318
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000454:	20017dbc 	.word	0x20017dbc
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000458:	20017e48 	.word	0x20017e48
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800045c:	20017e4c 	.word	0x20017e4c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000460:	20017e44 	.word	0x20017e44
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000464:	20017e40 	.word	0x20017e40
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000468:	20017dac 	.word	0x20017dac
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800046c:	20017d10 	.word	0x20017d10
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000470:	20017d14 	.word	0x20017d14
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000474:	e000ed04 	.word	0xe000ed04
	...

08000480 <memchr>:
 8000480:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000484:	2a10      	cmp	r2, #16
 8000486:	db2b      	blt.n	80004e0 <memchr+0x60>
 8000488:	f010 0f07 	tst.w	r0, #7
 800048c:	d008      	beq.n	80004a0 <memchr+0x20>
 800048e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000492:	3a01      	subs	r2, #1
 8000494:	428b      	cmp	r3, r1
 8000496:	d02d      	beq.n	80004f4 <memchr+0x74>
 8000498:	f010 0f07 	tst.w	r0, #7
 800049c:	b342      	cbz	r2, 80004f0 <memchr+0x70>
 800049e:	d1f6      	bne.n	800048e <memchr+0xe>
 80004a0:	b4f0      	push	{r4, r5, r6, r7}
 80004a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004aa:	f022 0407 	bic.w	r4, r2, #7
 80004ae:	f07f 0700 	mvns.w	r7, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004b8:	3c08      	subs	r4, #8
 80004ba:	ea85 0501 	eor.w	r5, r5, r1
 80004be:	ea86 0601 	eor.w	r6, r6, r1
 80004c2:	fa85 f547 	uadd8	r5, r5, r7
 80004c6:	faa3 f587 	sel	r5, r3, r7
 80004ca:	fa86 f647 	uadd8	r6, r6, r7
 80004ce:	faa5 f687 	sel	r6, r5, r7
 80004d2:	b98e      	cbnz	r6, 80004f8 <memchr+0x78>
 80004d4:	d1ee      	bne.n	80004b4 <memchr+0x34>
 80004d6:	bcf0      	pop	{r4, r5, r6, r7}
 80004d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004dc:	f002 0207 	and.w	r2, r2, #7
 80004e0:	b132      	cbz	r2, 80004f0 <memchr+0x70>
 80004e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004e6:	3a01      	subs	r2, #1
 80004e8:	ea83 0301 	eor.w	r3, r3, r1
 80004ec:	b113      	cbz	r3, 80004f4 <memchr+0x74>
 80004ee:	d1f8      	bne.n	80004e2 <memchr+0x62>
 80004f0:	2000      	movs	r0, #0
 80004f2:	4770      	bx	lr
 80004f4:	3801      	subs	r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	2d00      	cmp	r5, #0
 80004fa:	bf06      	itte	eq
 80004fc:	4635      	moveq	r5, r6
 80004fe:	3803      	subeq	r0, #3
 8000500:	3807      	subne	r0, #7
 8000502:	f015 0f01 	tst.w	r5, #1
 8000506:	d107      	bne.n	8000518 <memchr+0x98>
 8000508:	3001      	adds	r0, #1
 800050a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800050e:	bf02      	ittt	eq
 8000510:	3001      	addeq	r0, #1
 8000512:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000516:	3001      	addeq	r0, #1
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	3801      	subs	r0, #1
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <__aeabi_uldivmod>:
 8000520:	b953      	cbnz	r3, 8000538 <__aeabi_uldivmod+0x18>
 8000522:	b94a      	cbnz	r2, 8000538 <__aeabi_uldivmod+0x18>
 8000524:	2900      	cmp	r1, #0
 8000526:	bf08      	it	eq
 8000528:	2800      	cmpeq	r0, #0
 800052a:	bf1c      	itt	ne
 800052c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000530:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000534:	f000 b970 	b.w	8000818 <__aeabi_idiv0>
 8000538:	f1ad 0c08 	sub.w	ip, sp, #8
 800053c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000540:	f000 f806 	bl	8000550 <__udivmoddi4>
 8000544:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800054c:	b004      	add	sp, #16
 800054e:	4770      	bx	lr

08000550 <__udivmoddi4>:
 8000550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000554:	9e08      	ldr	r6, [sp, #32]
 8000556:	460d      	mov	r5, r1
 8000558:	4604      	mov	r4, r0
 800055a:	460f      	mov	r7, r1
 800055c:	2b00      	cmp	r3, #0
 800055e:	d14a      	bne.n	80005f6 <__udivmoddi4+0xa6>
 8000560:	428a      	cmp	r2, r1
 8000562:	4694      	mov	ip, r2
 8000564:	d965      	bls.n	8000632 <__udivmoddi4+0xe2>
 8000566:	fab2 f382 	clz	r3, r2
 800056a:	b143      	cbz	r3, 800057e <__udivmoddi4+0x2e>
 800056c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000570:	f1c3 0220 	rsb	r2, r3, #32
 8000574:	409f      	lsls	r7, r3
 8000576:	fa20 f202 	lsr.w	r2, r0, r2
 800057a:	4317      	orrs	r7, r2
 800057c:	409c      	lsls	r4, r3
 800057e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000582:	fa1f f58c 	uxth.w	r5, ip
 8000586:	fbb7 f1fe 	udiv	r1, r7, lr
 800058a:	0c22      	lsrs	r2, r4, #16
 800058c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000590:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000594:	fb01 f005 	mul.w	r0, r1, r5
 8000598:	4290      	cmp	r0, r2
 800059a:	d90a      	bls.n	80005b2 <__udivmoddi4+0x62>
 800059c:	eb1c 0202 	adds.w	r2, ip, r2
 80005a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80005a4:	f080 811c 	bcs.w	80007e0 <__udivmoddi4+0x290>
 80005a8:	4290      	cmp	r0, r2
 80005aa:	f240 8119 	bls.w	80007e0 <__udivmoddi4+0x290>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4462      	add	r2, ip
 80005b2:	1a12      	subs	r2, r2, r0
 80005b4:	b2a4      	uxth	r4, r4
 80005b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80005ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80005be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005c2:	fb00 f505 	mul.w	r5, r0, r5
 80005c6:	42a5      	cmp	r5, r4
 80005c8:	d90a      	bls.n	80005e0 <__udivmoddi4+0x90>
 80005ca:	eb1c 0404 	adds.w	r4, ip, r4
 80005ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80005d2:	f080 8107 	bcs.w	80007e4 <__udivmoddi4+0x294>
 80005d6:	42a5      	cmp	r5, r4
 80005d8:	f240 8104 	bls.w	80007e4 <__udivmoddi4+0x294>
 80005dc:	4464      	add	r4, ip
 80005de:	3802      	subs	r0, #2
 80005e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005e4:	1b64      	subs	r4, r4, r5
 80005e6:	2100      	movs	r1, #0
 80005e8:	b11e      	cbz	r6, 80005f2 <__udivmoddi4+0xa2>
 80005ea:	40dc      	lsrs	r4, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	e9c6 4300 	strd	r4, r3, [r6]
 80005f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0xbc>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	f000 80ed 	beq.w	80007da <__udivmoddi4+0x28a>
 8000600:	2100      	movs	r1, #0
 8000602:	e9c6 0500 	strd	r0, r5, [r6]
 8000606:	4608      	mov	r0, r1
 8000608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060c:	fab3 f183 	clz	r1, r3
 8000610:	2900      	cmp	r1, #0
 8000612:	d149      	bne.n	80006a8 <__udivmoddi4+0x158>
 8000614:	42ab      	cmp	r3, r5
 8000616:	d302      	bcc.n	800061e <__udivmoddi4+0xce>
 8000618:	4282      	cmp	r2, r0
 800061a:	f200 80f8 	bhi.w	800080e <__udivmoddi4+0x2be>
 800061e:	1a84      	subs	r4, r0, r2
 8000620:	eb65 0203 	sbc.w	r2, r5, r3
 8000624:	2001      	movs	r0, #1
 8000626:	4617      	mov	r7, r2
 8000628:	2e00      	cmp	r6, #0
 800062a:	d0e2      	beq.n	80005f2 <__udivmoddi4+0xa2>
 800062c:	e9c6 4700 	strd	r4, r7, [r6]
 8000630:	e7df      	b.n	80005f2 <__udivmoddi4+0xa2>
 8000632:	b902      	cbnz	r2, 8000636 <__udivmoddi4+0xe6>
 8000634:	deff      	udf	#255	; 0xff
 8000636:	fab2 f382 	clz	r3, r2
 800063a:	2b00      	cmp	r3, #0
 800063c:	f040 8090 	bne.w	8000760 <__udivmoddi4+0x210>
 8000640:	1a8a      	subs	r2, r1, r2
 8000642:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000646:	fa1f fe8c 	uxth.w	lr, ip
 800064a:	2101      	movs	r1, #1
 800064c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000650:	fb07 2015 	mls	r0, r7, r5, r2
 8000654:	0c22      	lsrs	r2, r4, #16
 8000656:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800065a:	fb0e f005 	mul.w	r0, lr, r5
 800065e:	4290      	cmp	r0, r2
 8000660:	d908      	bls.n	8000674 <__udivmoddi4+0x124>
 8000662:	eb1c 0202 	adds.w	r2, ip, r2
 8000666:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800066a:	d202      	bcs.n	8000672 <__udivmoddi4+0x122>
 800066c:	4290      	cmp	r0, r2
 800066e:	f200 80cb 	bhi.w	8000808 <__udivmoddi4+0x2b8>
 8000672:	4645      	mov	r5, r8
 8000674:	1a12      	subs	r2, r2, r0
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb2 f0f7 	udiv	r0, r2, r7
 800067c:	fb07 2210 	mls	r2, r7, r0, r2
 8000680:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000684:	fb0e fe00 	mul.w	lr, lr, r0
 8000688:	45a6      	cmp	lr, r4
 800068a:	d908      	bls.n	800069e <__udivmoddi4+0x14e>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000694:	d202      	bcs.n	800069c <__udivmoddi4+0x14c>
 8000696:	45a6      	cmp	lr, r4
 8000698:	f200 80bb 	bhi.w	8000812 <__udivmoddi4+0x2c2>
 800069c:	4610      	mov	r0, r2
 800069e:	eba4 040e 	sub.w	r4, r4, lr
 80006a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80006a6:	e79f      	b.n	80005e8 <__udivmoddi4+0x98>
 80006a8:	f1c1 0720 	rsb	r7, r1, #32
 80006ac:	408b      	lsls	r3, r1
 80006ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80006b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80006b6:	fa05 f401 	lsl.w	r4, r5, r1
 80006ba:	fa20 f307 	lsr.w	r3, r0, r7
 80006be:	40fd      	lsrs	r5, r7
 80006c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006c4:	4323      	orrs	r3, r4
 80006c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80006ca:	fa1f fe8c 	uxth.w	lr, ip
 80006ce:	fb09 5518 	mls	r5, r9, r8, r5
 80006d2:	0c1c      	lsrs	r4, r3, #16
 80006d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006d8:	fb08 f50e 	mul.w	r5, r8, lr
 80006dc:	42a5      	cmp	r5, r4
 80006de:	fa02 f201 	lsl.w	r2, r2, r1
 80006e2:	fa00 f001 	lsl.w	r0, r0, r1
 80006e6:	d90b      	bls.n	8000700 <__udivmoddi4+0x1b0>
 80006e8:	eb1c 0404 	adds.w	r4, ip, r4
 80006ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80006f0:	f080 8088 	bcs.w	8000804 <__udivmoddi4+0x2b4>
 80006f4:	42a5      	cmp	r5, r4
 80006f6:	f240 8085 	bls.w	8000804 <__udivmoddi4+0x2b4>
 80006fa:	f1a8 0802 	sub.w	r8, r8, #2
 80006fe:	4464      	add	r4, ip
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	b29d      	uxth	r5, r3
 8000704:	fbb4 f3f9 	udiv	r3, r4, r9
 8000708:	fb09 4413 	mls	r4, r9, r3, r4
 800070c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000710:	fb03 fe0e 	mul.w	lr, r3, lr
 8000714:	45a6      	cmp	lr, r4
 8000716:	d908      	bls.n	800072a <__udivmoddi4+0x1da>
 8000718:	eb1c 0404 	adds.w	r4, ip, r4
 800071c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000720:	d26c      	bcs.n	80007fc <__udivmoddi4+0x2ac>
 8000722:	45a6      	cmp	lr, r4
 8000724:	d96a      	bls.n	80007fc <__udivmoddi4+0x2ac>
 8000726:	3b02      	subs	r3, #2
 8000728:	4464      	add	r4, ip
 800072a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800072e:	fba3 9502 	umull	r9, r5, r3, r2
 8000732:	eba4 040e 	sub.w	r4, r4, lr
 8000736:	42ac      	cmp	r4, r5
 8000738:	46c8      	mov	r8, r9
 800073a:	46ae      	mov	lr, r5
 800073c:	d356      	bcc.n	80007ec <__udivmoddi4+0x29c>
 800073e:	d053      	beq.n	80007e8 <__udivmoddi4+0x298>
 8000740:	b156      	cbz	r6, 8000758 <__udivmoddi4+0x208>
 8000742:	ebb0 0208 	subs.w	r2, r0, r8
 8000746:	eb64 040e 	sbc.w	r4, r4, lr
 800074a:	fa04 f707 	lsl.w	r7, r4, r7
 800074e:	40ca      	lsrs	r2, r1
 8000750:	40cc      	lsrs	r4, r1
 8000752:	4317      	orrs	r7, r2
 8000754:	e9c6 7400 	strd	r7, r4, [r6]
 8000758:	4618      	mov	r0, r3
 800075a:	2100      	movs	r1, #0
 800075c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000760:	f1c3 0120 	rsb	r1, r3, #32
 8000764:	fa02 fc03 	lsl.w	ip, r2, r3
 8000768:	fa20 f201 	lsr.w	r2, r0, r1
 800076c:	fa25 f101 	lsr.w	r1, r5, r1
 8000770:	409d      	lsls	r5, r3
 8000772:	432a      	orrs	r2, r5
 8000774:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000780:	fb07 1510 	mls	r5, r7, r0, r1
 8000784:	0c11      	lsrs	r1, r2, #16
 8000786:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800078a:	fb00 f50e 	mul.w	r5, r0, lr
 800078e:	428d      	cmp	r5, r1
 8000790:	fa04 f403 	lsl.w	r4, r4, r3
 8000794:	d908      	bls.n	80007a8 <__udivmoddi4+0x258>
 8000796:	eb1c 0101 	adds.w	r1, ip, r1
 800079a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800079e:	d22f      	bcs.n	8000800 <__udivmoddi4+0x2b0>
 80007a0:	428d      	cmp	r5, r1
 80007a2:	d92d      	bls.n	8000800 <__udivmoddi4+0x2b0>
 80007a4:	3802      	subs	r0, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1b49      	subs	r1, r1, r5
 80007aa:	b292      	uxth	r2, r2
 80007ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80007b0:	fb07 1115 	mls	r1, r7, r5, r1
 80007b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007b8:	fb05 f10e 	mul.w	r1, r5, lr
 80007bc:	4291      	cmp	r1, r2
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x282>
 80007c0:	eb1c 0202 	adds.w	r2, ip, r2
 80007c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80007c8:	d216      	bcs.n	80007f8 <__udivmoddi4+0x2a8>
 80007ca:	4291      	cmp	r1, r2
 80007cc:	d914      	bls.n	80007f8 <__udivmoddi4+0x2a8>
 80007ce:	3d02      	subs	r5, #2
 80007d0:	4462      	add	r2, ip
 80007d2:	1a52      	subs	r2, r2, r1
 80007d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80007d8:	e738      	b.n	800064c <__udivmoddi4+0xfc>
 80007da:	4631      	mov	r1, r6
 80007dc:	4630      	mov	r0, r6
 80007de:	e708      	b.n	80005f2 <__udivmoddi4+0xa2>
 80007e0:	4639      	mov	r1, r7
 80007e2:	e6e6      	b.n	80005b2 <__udivmoddi4+0x62>
 80007e4:	4610      	mov	r0, r2
 80007e6:	e6fb      	b.n	80005e0 <__udivmoddi4+0x90>
 80007e8:	4548      	cmp	r0, r9
 80007ea:	d2a9      	bcs.n	8000740 <__udivmoddi4+0x1f0>
 80007ec:	ebb9 0802 	subs.w	r8, r9, r2
 80007f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007f4:	3b01      	subs	r3, #1
 80007f6:	e7a3      	b.n	8000740 <__udivmoddi4+0x1f0>
 80007f8:	4645      	mov	r5, r8
 80007fa:	e7ea      	b.n	80007d2 <__udivmoddi4+0x282>
 80007fc:	462b      	mov	r3, r5
 80007fe:	e794      	b.n	800072a <__udivmoddi4+0x1da>
 8000800:	4640      	mov	r0, r8
 8000802:	e7d1      	b.n	80007a8 <__udivmoddi4+0x258>
 8000804:	46d0      	mov	r8, sl
 8000806:	e77b      	b.n	8000700 <__udivmoddi4+0x1b0>
 8000808:	3d02      	subs	r5, #2
 800080a:	4462      	add	r2, ip
 800080c:	e732      	b.n	8000674 <__udivmoddi4+0x124>
 800080e:	4608      	mov	r0, r1
 8000810:	e70a      	b.n	8000628 <__udivmoddi4+0xd8>
 8000812:	4464      	add	r4, ip
 8000814:	3802      	subs	r0, #2
 8000816:	e742      	b.n	800069e <__udivmoddi4+0x14e>

08000818 <__aeabi_idiv0>:
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000824:	2334      	movs	r3, #52	; 0x34
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800082c:	4a10      	ldr	r2, [pc, #64]	; (8000870 <tx_application_define+0x54>)
 800082e:	4911      	ldr	r1, [pc, #68]	; (8000874 <tx_application_define+0x58>)
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <tx_application_define+0x5c>)
 8000832:	f00e fc59 	bl	800f0e8 <_txe_byte_pool_create>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d104      	bne.n	8000846 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <tx_application_define+0x5c>)
 800083e:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f000 f821 	bl	8000888 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000846:	2334      	movs	r3, #52	; 0x34
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <tx_application_define+0x60>)
 8000850:	490b      	ldr	r1, [pc, #44]	; (8000880 <tx_application_define+0x64>)
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <tx_application_define+0x68>)
 8000854:	f00e fc48 	bl	800f0e8 <_txe_byte_pool_create>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d104      	bne.n	8000868 <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <tx_application_define+0x68>)
 8000860:	60fb      	str	r3, [r7, #12]

    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f00f f9aa 	bl	800fbbc <MX_NetXDuo_Init>

    /* USER CODE END MX_NetXDuo_Init_Success */

  }

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000248 	.word	0x20000248
 8000874:	08010bdc 	.word	0x08010bdc
 8000878:	2000a248 	.word	0x2000a248
 800087c:	2000a27c 	.word	0x2000a27c
 8000880:	08010bf0 	.word	0x08010bf0
 8000884:	2001427c 	.word	0x2001427c

08000888 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af08      	add	r7, sp, #32
 800088e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN App_ThreadX_Init */
//  tx_thread_create(&thread_ptr, "my_thread", my_thread_entry, 0x1234, thread_stack,
//		  THREAD_STACK_SIZE, 15, 13, 1, TX_AUTO_START);
  UINT status;

  tx_thread_create(&my_thread, "my_thread", my_dhcp_thread_entry, 0,
 8000898:	23b0      	movs	r3, #176	; 0xb0
 800089a:	9306      	str	r3, [sp, #24]
 800089c:	2301      	movs	r3, #1
 800089e:	9305      	str	r3, [sp, #20]
 80008a0:	2300      	movs	r3, #0
 80008a2:	9304      	str	r3, [sp, #16]
 80008a4:	2302      	movs	r3, #2
 80008a6:	9303      	str	r3, [sp, #12]
 80008a8:	2302      	movs	r3, #2
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <App_ThreadX_Init+0xd8>)
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2300      	movs	r3, #0
 80008b8:	4a2a      	ldr	r2, [pc, #168]	; (8000964 <App_ThreadX_Init+0xdc>)
 80008ba:	492b      	ldr	r1, [pc, #172]	; (8000968 <App_ThreadX_Init+0xe0>)
 80008bc:	482b      	ldr	r0, [pc, #172]	; (800096c <App_ThreadX_Init+0xe4>)
 80008be:	f00e ff39 	bl	800f734 <_txe_thread_create>
//  byte_pool = byte_pool + DEMO_STACK_SIZE;
//  memory_ptr = memory_ptr + DEMO_STACK_SIZE;


  // initialize the NetX duo system
  nx_system_initialize();
 80008c2:	f00a f92d 	bl	800ab20 <_nx_system_initialize>

  //Create a packet pool
//  status = nx_packet_pool_create(&my_pool, "NetX Main Packet Pool",
//		  1024, byte_pool, 64000);
  status = nx_packet_pool_create(&my_pool, "NetX Main Packet Pool",
 80008c6:	233c      	movs	r3, #60	; 0x3c
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <App_ThreadX_Init+0xe8>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	4927      	ldr	r1, [pc, #156]	; (8000974 <App_ThreadX_Init+0xec>)
 80008d6:	4828      	ldr	r0, [pc, #160]	; (8000978 <App_ThreadX_Init+0xf0>)
 80008d8:	f00b fd78 	bl	800c3cc <_nxe_packet_pool_create>
 80008dc:	60f8      	str	r0, [r7, #12]

//  byte_pool = byte_pool + 1024;
//  memory_ptr += 1024;

  // Check for pool creation error
  if (status)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d005      	beq.n	80008f0 <App_ThreadX_Init+0x68>
	  error_counter++;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <App_ThreadX_Init+0xf4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <App_ThreadX_Init+0xf4>)
 80008ee:	701a      	strb	r2, [r3, #0]

  //Create an IP instance without an IP address
  status = nx_ip_create(&my_ip, "My NetX IP Instance", IP_ADDRESS(0,0,0,0),
 80008f0:	f240 73bc 	movw	r3, #1980	; 0x7bc
 80008f4:	9305      	str	r3, [sp, #20]
 80008f6:	2301      	movs	r3, #1
 80008f8:	9304      	str	r3, [sp, #16]
 80008fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fe:	9303      	str	r3, [sp, #12]
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <App_ThreadX_Init+0xf8>)
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <App_ThreadX_Init+0xfc>)
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <App_ThreadX_Init+0xf0>)
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8000910:	2200      	movs	r2, #0
 8000912:	491d      	ldr	r1, [pc, #116]	; (8000988 <App_ThreadX_Init+0x100>)
 8000914:	481d      	ldr	r0, [pc, #116]	; (800098c <App_ThreadX_Init+0x104>)
 8000916:	f00b fbfd 	bl	800c114 <_nxe_ip_create>
 800091a:	60f8      	str	r0, [r7, #12]
//  	  byte_pool = byte_pool + DEMO_STACK_SIZE;

//  memory_ptr += 1024;

  //Enable ARP supply ARP cache memory for my IP instance
  status = nx_arp_enable(&my_ip, (void *)thread_stack4, 1024);
 800091c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000920:	491b      	ldr	r1, [pc, #108]	; (8000990 <App_ThreadX_Init+0x108>)
 8000922:	481a      	ldr	r0, [pc, #104]	; (800098c <App_ThreadX_Init+0x104>)
 8000924:	f00b fb66 	bl	800bff4 <_nxe_arp_enable>
 8000928:	60f8      	str	r0, [r7, #12]
//  byte_pool = byte_pool + 1024;
//  memory_ptr += 1024;


  //Check for ARP errors
  if (status)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <App_ThreadX_Init+0xb4>
	  error_counter++;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <App_ThreadX_Init+0xf4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <App_ThreadX_Init+0xf4>)
 800093a:	701a      	strb	r2, [r3, #0]

  //Enable UDP
  status = nx_udp_enable(&my_ip);
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <App_ThreadX_Init+0x104>)
 800093e:	f00b fe7f 	bl	800c640 <_nxe_udp_enable>
 8000942:	60f8      	str	r0, [r7, #12]
  if (status)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d005      	beq.n	8000956 <App_ThreadX_Init+0xce>
	  error_counter++;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <App_ThreadX_Init+0xf4>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <App_ThreadX_Init+0xf4>)
 8000954:	701a      	strb	r2, [r3, #0]
//		  THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);
//  tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000956:	697b      	ldr	r3, [r7, #20]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200142b0 	.word	0x200142b0
 8000964:	080009a1 	.word	0x080009a1
 8000968:	08010c04 	.word	0x08010c04
 800096c:	200152b8 	.word	0x200152b8
 8000970:	200146b0 	.word	0x200146b0
 8000974:	08010c10 	.word	0x08010c10
 8000978:	20015368 	.word	0x20015368
 800097c:	20017ab4 	.word	0x20017ab4
 8000980:	20014ab0 	.word	0x20014ab0
 8000984:	080063bd 	.word	0x080063bd
 8000988:	08010c28 	.word	0x08010c28
 800098c:	200153a4 	.word	0x200153a4
 8000990:	20014eb0 	.word	0x20014eb0

08000994 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
//	&EthPool, nx_stm32_eth_driver, pointer, IP_MEMORY_SIZE, DEFAULT_PRIORITY);

	//nx_udp_enable()
  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000998:	f00c fb2c 	bl	800cff4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <my_dhcp_thread_entry>:

/* USER CODE BEGIN 1 */

void my_dhcp_thread_entry(ULONG thread_input)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

	// Wait for link to come up
	do
	{
		//Get link status
		status = nx_ip_status_check(&my_ip, NX_IP_LINK_ENABLED,
 80009a8:	f107 0208 	add.w	r2, r7, #8
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	2104      	movs	r1, #4
 80009b0:	4826      	ldr	r0, [pc, #152]	; (8000a4c <my_dhcp_thread_entry+0xac>)
 80009b2:	f00b fc7f 	bl	800c2b4 <_nxe_ip_status_check>
 80009b6:	4603      	mov	r3, r0
 80009b8:	60fb      	str	r3, [r7, #12]
				&actual_status, 100);
	}while (status != NX_SUCCESS);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f3      	bne.n	80009a8 <my_dhcp_thread_entry+0x8>

	//Create DHCP instance
	status = nx_dhcp_create(&my_dhcp, &my_ip, "My DHCP");
 80009c0:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <my_dhcp_thread_entry+0xb0>)
 80009c2:	4922      	ldr	r1, [pc, #136]	; (8000a4c <my_dhcp_thread_entry+0xac>)
 80009c4:	4823      	ldr	r0, [pc, #140]	; (8000a54 <my_dhcp_thread_entry+0xb4>)
 80009c6:	f003 fbd7 	bl	8004178 <_nxe_dhcp_create>
 80009ca:	4603      	mov	r3, r0
 80009cc:	60fb      	str	r3, [r7, #12]

	if (status)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d005      	beq.n	80009e0 <my_dhcp_thread_entry+0x40>
		error_counter++;
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <my_dhcp_thread_entry+0xb8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <my_dhcp_thread_entry+0xb8>)
 80009de:	701a      	strb	r2, [r3, #0]

	//Start DHCP Client
	nx_dhcp_start(&my_dhcp);
 80009e0:	481c      	ldr	r0, [pc, #112]	; (8000a54 <my_dhcp_thread_entry+0xb4>)
 80009e2:	f003 fdb9 	bl	8004558 <_nxe_dhcp_start>

	if (status)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d005      	beq.n	80009f8 <my_dhcp_thread_entry+0x58>
		error_counter++;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <my_dhcp_thread_entry+0xb8>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <my_dhcp_thread_entry+0xb8>)
 80009f6:	701a      	strb	r2, [r3, #0]

	status = nx_ip_status_check(&my_ip, NX_IP_ADDRESS_RESOLVED,
 80009f8:	f107 020c 	add.w	r2, r7, #12
 80009fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a00:	2102      	movs	r1, #2
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <my_dhcp_thread_entry+0xac>)
 8000a04:	f00b fc56 	bl	800c2b4 <_nxe_ip_status_check>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	60fb      	str	r3, [r7, #12]
			(ULONG *) &status, 10000);

    /* Check to see if we have a valid IP address.  */
    if (status)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00a      	beq.n	8000a28 <my_dhcp_thread_entry+0x88>
    {
      error_counter++;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <my_dhcp_thread_entry+0xb8>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <my_dhcp_thread_entry+0xb8>)
 8000a1c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <my_dhcp_thread_entry+0xbc>)
 8000a22:	f002 fb7a 	bl	800311a <HAL_GPIO_TogglePin>
 8000a26:	e00e      	b.n	8000a46 <my_dhcp_thread_entry+0xa6>

      return;
    }
    else
    {
    	status = nx_ip_address_get(&my_ip, &ip_address, &network_mask);
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <my_dhcp_thread_entry+0xc0>)
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <my_dhcp_thread_entry+0xc4>)
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <my_dhcp_thread_entry+0xac>)
 8000a2e:	f00b fb2d 	bl	800c08c <_nxe_ip_address_get>
 8000a32:	4603      	mov	r3, r0
 8000a34:	60fb      	str	r3, [r7, #12]


  /* Yes, a valid IP address is now on lease…  All NetX Duo
        services are available.*/
        if (!status)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <my_dhcp_thread_entry+0xa6>
        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <my_dhcp_thread_entry+0xbc>)
 8000a42:	f002 fb6a 	bl	800311a <HAL_GPIO_TogglePin>
    }

}
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200153a4 	.word	0x200153a4
 8000a50:	08010c3c 	.word	0x08010c3c
 8000a54:	20015b60 	.word	0x20015b60
 8000a58:	20017ab4 	.word	0x20017ab4
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	200152b4 	.word	0x200152b4
 8000a64:	200152b0 	.word	0x200152b0

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fdae 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f808 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 f8c2 	bl	8000bfc <MX_GPIO_Init>
  MX_ETH_Init();
 8000a78:	f000 f872 	bl	8000b60 <MX_ETH_Init>
//  /* start DHCP client */
//  ret = nx_dhcp_start(&DhcpClient);

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a7c:	f7ff ff8a 	bl	8000994 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <main+0x18>
	...

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2234      	movs	r2, #52	; 0x34
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00f f9e5 	bl	800fe62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <SystemClock_Config+0xd4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <SystemClock_Config+0xd4>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xd4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SystemClock_Config+0xd8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <SystemClock_Config+0xd8>)
 8000ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <SystemClock_Config+0xd8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aec:	2308      	movs	r3, #8
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000af0:	23d8      	movs	r3, #216	; 0xd8
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fb73 	bl	80031f0 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b10:	f000 f95a 	bl	8000dc8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b14:	f002 fb1c 	bl	8003150 <HAL_PWREx_EnableOverDrive>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 f953 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	2107      	movs	r1, #7
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 fe03 	bl	800374c <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b4c:	f000 f93c 	bl	8000dc8 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3750      	adds	r7, #80	; 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b66:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <MX_ETH_Init+0x88>)
 8000b68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b78:	22e1      	movs	r2, #225	; 0xe1
 8000b7a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_ETH_Init+0x8c>)
 8000b92:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b9a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_ETH_Init+0x84>)
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <MX_ETH_Init+0x90>)
 8000ba0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_ETH_Init+0x84>)
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_ETH_Init+0x94>)
 8000ba6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_ETH_Init+0x84>)
 8000baa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000bae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_ETH_Init+0x84>)
 8000bb2:	f000 fe3f 	bl	8001834 <HAL_ETH_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000bbc:	f000 f904 	bl	8000dc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bc0:	2238      	movs	r2, #56	; 0x38
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bc6:	f00f f94c 	bl	800fe62 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bcc:	2221      	movs	r2, #33	; 0x21
 8000bce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bd2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000bd6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_ETH_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20017af0 	.word	0x20017af0
 8000be8:	40028000 	.word	0x40028000
 8000bec:	20017ba0 	.word	0x20017ba0
 8000bf0:	2000018c 	.word	0x2000018c
 8000bf4:	200000ec 	.word	0x200000ec
 8000bf8:	20017ab8 	.word	0x20017ab8

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b5e      	ldr	r3, [pc, #376]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a5d      	ldr	r2, [pc, #372]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b5b      	ldr	r3, [pc, #364]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a57      	ldr	r2, [pc, #348]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a51      	ldr	r2, [pc, #324]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b43      	ldr	r3, [pc, #268]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <MX_GPIO_Init+0x190>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ca8:	4839      	ldr	r0, [pc, #228]	; (8000d90 <MX_GPIO_Init+0x194>)
 8000caa:	f002 fa1d 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	4838      	ldr	r0, [pc, #224]	; (8000d94 <MX_GPIO_Init+0x198>)
 8000cb4:	f002 fa18 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4832      	ldr	r0, [pc, #200]	; (8000d98 <MX_GPIO_Init+0x19c>)
 8000cd0:	f002 f85e 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cd4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4828      	ldr	r0, [pc, #160]	; (8000d90 <MX_GPIO_Init+0x194>)
 8000cee:	f002 f84f 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d04:	2307      	movs	r3, #7
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4823      	ldr	r0, [pc, #140]	; (8000d9c <MX_GPIO_Init+0x1a0>)
 8000d10:	f002 f83e 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481a      	ldr	r0, [pc, #104]	; (8000d94 <MX_GPIO_Init+0x198>)
 8000d2c:	f002 f830 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <MX_GPIO_Init+0x198>)
 8000d44:	f002 f824 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <MX_GPIO_Init+0x1a4>)
 8000d66:	f002 f813 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <MX_GPIO_Init+0x1a4>)
 8000d80:	f002 f806 	bl	8002d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d84:	bf00      	nop
 8000d86:	3730      	adds	r7, #48	; 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020c00 	.word	0x40020c00
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db6:	f000 fc17 	bl	80015e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40001000 	.word	0x40001000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_MspInit+0x44>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x44>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x44>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x44>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x44>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <HAL_ETH_MspInit+0x178>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	f040 80a6 	bne.w	8000f8c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e40:	4b55      	ldr	r3, [pc, #340]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a54      	ldr	r2, [pc, #336]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e54:	623b      	str	r3, [r7, #32]
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	4b4f      	ldr	r3, [pc, #316]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a4e      	ldr	r2, [pc, #312]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	4b49      	ldr	r3, [pc, #292]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a48      	ldr	r2, [pc, #288]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a3c      	ldr	r2, [pc, #240]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eda:	6313      	str	r3, [r2, #48]	; 0x30
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <HAL_ETH_MspInit+0x17c>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ee8:	2332      	movs	r3, #50	; 0x32
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4826      	ldr	r0, [pc, #152]	; (8000f9c <HAL_ETH_MspInit+0x180>)
 8000f04:	f001 ff44 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f08:	2386      	movs	r3, #134	; 0x86
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f18:	230b      	movs	r3, #11
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <HAL_ETH_MspInit+0x184>)
 8000f24:	f001 ff34 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <HAL_ETH_MspInit+0x188>)
 8000f46:	f001 ff23 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5c:	230b      	movs	r3, #11
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_ETH_MspInit+0x18c>)
 8000f68:	f001 ff12 	bl	8002d90 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	203d      	movs	r0, #61	; 0x3d
 8000f72:	f000 fc35 	bl	80017e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000f76:	203d      	movs	r0, #61	; 0x3d
 8000f78:	f000 fc4e 	bl	8001818 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	203e      	movs	r0, #62	; 0x3e
 8000f82:	f000 fc2d 	bl	80017e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000f86:	203e      	movs	r0, #62	; 0x3e
 8000f88:	f000 fc46 	bl	8001818 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40028000 	.word	0x40028000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021800 	.word	0x40021800

08000fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_InitTick+0xe0>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a32      	ldr	r2, [pc, #200]	; (800108c <HAL_InitTick+0xe0>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_InitTick+0xe0>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd4:	f107 0210 	add.w	r2, r7, #16
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fdc4 	bl	8003b6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d103      	bne.n	8000ff6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fee:	f002 fda9 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8000ff2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ff4:	e004      	b.n	8001000 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ff6:	f002 fda5 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <HAL_InitTick+0xe4>)
 8001004:	fba2 2303 	umull	r2, r3, r2, r3
 8001008:	0c9b      	lsrs	r3, r3, #18
 800100a:	3b01      	subs	r3, #1
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_InitTick+0xe8>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <HAL_InitTick+0xec>)
 8001012:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <HAL_InitTick+0xe8>)
 8001016:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_InitTick+0xe8>)
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_InitTick+0xe8>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_InitTick+0xe8>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_InitTick+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001034:	4817      	ldr	r0, [pc, #92]	; (8001094 <HAL_InitTick+0xe8>)
 8001036:	f002 fdcb 	bl	8003bd0 <HAL_TIM_Base_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001044:	2b00      	cmp	r3, #0
 8001046:	d11b      	bne.n	8001080 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <HAL_InitTick+0xe8>)
 800104a:	f002 fe23 	bl	8003c94 <HAL_TIM_Base_Start_IT>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001058:	2b00      	cmp	r3, #0
 800105a:	d111      	bne.n	8001080 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800105c:	2036      	movs	r0, #54	; 0x36
 800105e:	f000 fbdb 	bl	8001818 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d808      	bhi.n	800107a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2036      	movs	r0, #54	; 0x36
 800106e:	f000 fbb7 	bl	80017e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_InitTick+0xf0>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e002      	b.n	8001080 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001080:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001084:	4618      	mov	r0, r3
 8001086:	3738      	adds	r7, #56	; 0x38
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	431bde83 	.word	0x431bde83
 8001094:	20017ba8 	.word	0x20017ba8
 8001098:	40001000 	.word	0x40001000
 800109c:	20000004 	.word	0x20000004

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM6_DAC_IRQHandler+0x10>)
 80010d2:	f002 fe57 	bl	8003d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20017ba8 	.word	0x20017ba8

080010e0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <ETH_IRQHandler+0x10>)
 80010e6:	f000 ff0b 	bl	8001f00 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20017af0 	.word	0x20017af0

080010f4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <ETH_WKUP_IRQHandler+0x10>)
 80010fa:	f000 ff01 	bl	8001f00 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20017af0 	.word	0x20017af0

08001108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return 1;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_kill>:

int _kill(int pid, int sig)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001122:	f00e feed 	bl	800ff00 <__errno>
 8001126:	4603      	mov	r3, r0
 8001128:	2216      	movs	r2, #22
 800112a:	601a      	str	r2, [r3, #0]
  return -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_exit>:

void _exit (int status)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffe7 	bl	8001118 <_kill>
  while (1) {}    /* Make sure we hang here */
 800114a:	e7fe      	b.n	800114a <_exit+0x12>

0800114c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	4601      	mov	r1, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	b2ca      	uxtb	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf0      	blt.n	800115e <_read+0x12>
  }

  return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e009      	b.n	80011ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	60ba      	str	r2, [r7, #8]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf1      	blt.n	8001198 <_write+0x12>
  }
  return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_close>:

int _close(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e6:	605a      	str	r2, [r3, #4]
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_isatty>:

int _isatty(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f00e fe52 	bl	800ff00 <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20080000 	.word	0x20080000
 8001288:	00000400 	.word	0x00000400
 800128c:	20017bf4 	.word	0x20017bf4
 8001290:	20018468 	.word	0x20018468

08001294 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f00e fe11 	bl	800ff0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fbbd 	bl	8000a68 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80012fc:	08010db8 	.word	0x08010db8
  ldr r2, =_sbss
 8001300:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8001304:	20018468 	.word	0x20018468

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>

0800130a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <LAN8742_RegisterBusIO+0x28>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <LAN8742_RegisterBusIO+0x28>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <LAN8742_RegisterBusIO+0x28>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	e014      	b.n	8001362 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d17c      	bne.n	8001488 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e01c      	b.n	80013e2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	f107 0208 	add.w	r2, r7, #8
 80013b0:	2112      	movs	r1, #18
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	4798      	blx	r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da03      	bge.n	80013c4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80013bc:	f06f 0304 	mvn.w	r3, #4
 80013c0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80013c2:	e00b      	b.n	80013dc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d105      	bne.n	80013dc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
         break;
 80013da:	e005      	b.n	80013e8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d9df      	bls.n	80013a8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b1f      	cmp	r3, #31
 80013ee:	d902      	bls.n	80013f6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013f0:	f06f 0302 	mvn.w	r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d145      	bne.n	8001488 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6810      	ldr	r0, [r2, #0]
 8001404:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001408:	2100      	movs	r1, #0
 800140a:	4798      	blx	r3
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	db37      	blt.n	8001482 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6810      	ldr	r0, [r2, #0]
 800141a:	f107 0208 	add.w	r2, r7, #8
 800141e:	2100      	movs	r1, #0
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	db28      	blt.n	800147a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4798      	blx	r3
 800142e:	4603      	mov	r3, r0
 8001430:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001432:	e01c      	b.n	800146e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4798      	blx	r3
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001446:	d80e      	bhi.n	8001466 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6810      	ldr	r0, [r2, #0]
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	2100      	movs	r1, #0
 8001456:	4798      	blx	r3
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	da07      	bge.n	800146e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800145e:	f06f 0304 	mvn.w	r3, #4
 8001462:	613b      	str	r3, [r7, #16]
                 break;
 8001464:	e010      	b.n	8001488 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001466:	f06f 0301 	mvn.w	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
               break;
 800146c:	e00c      	b.n	8001488 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1dd      	bne.n	8001434 <LAN8742_Init+0xc6>
 8001478:	e006      	b.n	8001488 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800147a:	f06f 0304 	mvn.w	r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e002      	b.n	8001488 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001482:	f06f 0303 	mvn.w	r3, #3
 8001486:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d112      	bne.n	80014b4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4798      	blx	r3
 8001494:	4603      	mov	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001498:	bf00      	nop
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4798      	blx	r3
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014ac:	d9f5      	bls.n	800149a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014b4:	693b      	ldr	r3, [r7, #16]
 }
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6810      	ldr	r0, [r2, #0]
 80014d2:	f107 020c 	add.w	r2, r7, #12
 80014d6:	2101      	movs	r1, #1
 80014d8:	4798      	blx	r3
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da02      	bge.n	80014e6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014e0:	f06f 0304 	mvn.w	r3, #4
 80014e4:	e06e      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6810      	ldr	r0, [r2, #0]
 80014ee:	f107 020c 	add.w	r2, r7, #12
 80014f2:	2101      	movs	r1, #1
 80014f4:	4798      	blx	r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da02      	bge.n	8001502 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014fc:	f06f 0304 	mvn.w	r3, #4
 8001500:	e060      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800150c:	2301      	movs	r3, #1
 800150e:	e059      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6810      	ldr	r0, [r2, #0]
 8001518:	f107 020c 	add.w	r2, r7, #12
 800151c:	2100      	movs	r1, #0
 800151e:	4798      	blx	r3
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	da02      	bge.n	800152c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001526:	f06f 0304 	mvn.w	r3, #4
 800152a:	e04b      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11b      	bne.n	800156e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <LAN8742_GetLinkState+0x90>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800154a:	2302      	movs	r3, #2
 800154c:	e03a      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001558:	2303      	movs	r3, #3
 800155a:	e033      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001566:	2304      	movs	r3, #4
 8001568:	e02c      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800156a:	2305      	movs	r3, #5
 800156c:	e02a      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6810      	ldr	r0, [r2, #0]
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	211f      	movs	r1, #31
 800157c:	4798      	blx	r3
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001584:	f06f 0304 	mvn.w	r3, #4
 8001588:	e01c      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001594:	2306      	movs	r3, #6
 8001596:	e015      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 031c 	and.w	r3, r3, #28
 800159e:	2b18      	cmp	r3, #24
 80015a0:	d101      	bne.n	80015a6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015a2:	2302      	movs	r3, #2
 80015a4:	e00e      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d101      	bne.n	80015b4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e007      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 031c 	and.w	r3, r3, #28
 80015ba:	2b14      	cmp	r3, #20
 80015bc:	d101      	bne.n	80015c2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015be:	2304      	movs	r3, #4
 80015c0:	e000      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015c2:	2305      	movs	r3, #5
    }				
  }
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f8fa 	bl	80017ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f7ff fce8 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fbfa 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	20017bf8 	.word	0x20017bf8

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20017bf8 	.word	0x20017bf8

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	4313      	orrs	r3, r2
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x40>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	05fa0000 	.word	0x05fa0000

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff4c 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f2:	f7ff ff61 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 80017f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f7ff ffb1 	bl	8001764 <NVIC_EncodePriority>
 8001802:	4602      	mov	r2, r0
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff80 	bl	8001710 <__NVIC_SetPriority>
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff54 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e086      	b.n	8001954 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800184c:	2b00      	cmp	r3, #0
 800184e:	d106      	bne.n	800185e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2223      	movs	r2, #35	; 0x23
 8001854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fadf 	bl	8000e1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_ETH_Init+0x128>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a3e      	ldr	r2, [pc, #248]	; (800195c <HAL_ETH_Init+0x128>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b3c      	ldr	r3, [pc, #240]	; (800195c <HAL_ETH_Init+0x128>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001876:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <HAL_ETH_Init+0x12c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a39      	ldr	r2, [pc, #228]	; (8001960 <HAL_ETH_Init+0x12c>)
 800187c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001880:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_ETH_Init+0x12c>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	4935      	ldr	r1, [pc, #212]	; (8001960 <HAL_ETH_Init+0x12c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <HAL_ETH_Init+0x12c>)
 8001892:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ac:	f7ff feb0 	bl	8001610 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018b2:	e011      	b.n	80018d8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018b4:	f7ff feac 	bl	8001610 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018c2:	d909      	bls.n	80018d8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	22e0      	movs	r2, #224	; 0xe0
 80018d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e03d      	b.n	8001954 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1e4      	bne.n	80018b4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 ff94 	bl	8002818 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f001 f83f 	bl	8002974 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 f895 	bl	8002a26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	461a      	mov	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fffd 	bl	8002904 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_ETH_Init+0x130>)
 8001928:	430b      	orrs	r3, r1
 800192a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800193e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2210      	movs	r2, #16
 800194e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	40013800 	.word	0x40013800
 8001964:	00020060 	.word	0x00020060

08001968 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001976:	2b10      	cmp	r3, #16
 8001978:	d15f      	bne.n	8001a3a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2223      	movs	r2, #35	; 0x23
 800197e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2204      	movs	r2, #4
 800198c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f9ce 	bl	8001d30 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fe43 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019c0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fdb8 	bl	8002550 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0208 	orr.w	r2, r2, #8
 80019ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fe15 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0204 	orr.w	r2, r2, #4
 8001a14:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1e:	69d9      	ldr	r1, [r3, #28]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_ETH_Start_IT+0xdc>)
 8001a26:	430b      	orrs	r3, r1
 8001a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a2c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2223      	movs	r2, #35	; 0x23
 8001a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
  }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	0001a0c1 	.word	0x0001a0c1

08001a48 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a56:	2b23      	cmp	r3, #35	; 0x23
 8001a58:	d14a      	bne.n	8001af0 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2223      	movs	r2, #35	; 0x23
 8001a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a78:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	f023 0302 	bic.w	r3, r3, #2
 8001a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a90:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0204 	bic.w	r2, r2, #4
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff fdbc 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fd49 	bl	8002550 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0208 	bic.w	r2, r2, #8
 8001acc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fda6 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e045      	b.n	8001baa <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b24:	2b23      	cmp	r3, #35	; 0x23
 8001b26:	d13f      	bne.n	8001ba8 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001b30:	2201      	movs	r2, #1
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 ffe5 	bl	8002b04 <ETH_Prepare_Tx_Descriptors>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d009      	beq.n	8001b54 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e02a      	b.n	8001baa <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b54:	f3bf 8f4f 	dsb	sy
}
 8001b58:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d904      	bls.n	8001b76 <HAL_ETH_Transmit_IT+0x7c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	1f1a      	subs	r2, r3, #4
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b90:	461a      	mov	r2, r3
 8001b92:	2304      	movs	r3, #4
 8001b94:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b088      	sub	sp, #32
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0a4      	b.n	8001d28 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001be4:	2b23      	cmp	r3, #35	; 0x23
 8001be6:	d001      	beq.n	8001bec <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e09d      	b.n	8001d28 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	3212      	adds	r2, #18
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c02:	f1c3 0304 	rsb	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c08:	e066      	b.n	8001cd8 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d103      	bne.n	8001c3a <HAL_ETH_ReadData+0x88>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d03c      	beq.n	8001cb4 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c5c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f005 f89e 	bl	8006dd4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	441a      	add	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d902      	bls.n	8001cc6 <HAL_ETH_ReadData+0x114>
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	3212      	adds	r2, #18
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db06      	blt.n	8001cee <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d202      	bcs.n	8001cee <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001ce8:	7cfb      	ldrb	r3, [r7, #19]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d08d      	beq.n	8001c0a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	441a      	add	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f814 	bl	8001d30 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d0e:	7cfb      	ldrb	r3, [r7, #19]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d108      	bne.n	8001d26 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d44:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	3212      	adds	r2, #18
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d56:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001d58:	e042      	b.n	8001de0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d112      	bne.n	8001d88 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 f808 	bl	8006d7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	74fb      	strb	r3, [r7, #19]
 8001d76:	e007      	b.n	8001d88 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	461a      	mov	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d028      	beq.n	8001de0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <ETH_UpdateDescriptor+0x104>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	6053      	str	r3, [r2, #4]
 8001da2:	e005      	b.n	8001db0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d902      	bls.n	8001dce <ETH_UpdateDescriptor+0x9e>
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	3212      	adds	r2, #18
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <ETH_UpdateDescriptor+0xbc>
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1b6      	bne.n	8001d5a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d01a      	beq.n	8001e2c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e00:	f3bf 8f5f 	dmb	sy
}
 8001e04:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	18ca      	adds	r2, r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	80004000 	.word	0x80004000

08001e38 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3318      	adds	r3, #24
 8001e44:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e56:	e047      	b.n	8001ee8 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	3304      	adds	r3, #4
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10a      	bne.n	8001e88 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3301      	adds	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d902      	bls.n	8001e84 <HAL_ETH_ReleaseTxPacket+0x4c>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	3b04      	subs	r3, #4
 8001e82:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d02c      	beq.n	8001ee8 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68d9      	ldr	r1, [r3, #12]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db1f      	blt.n	8001ee4 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 ff2d 	bl	8006d10 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d902      	bls.n	8001ed6 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ee2:	e001      	b.n	8001ee8 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_ETH_ReleaseTxPacket+0xbc>
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1b1      	bne.n	8001e58 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001f28:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_ETH_IRQHandler+0x158>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <HAL_ETH_IRQHandler+0x56>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_ETH_IRQHandler+0x15c>)
 8001f4e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f004 ff6d 	bl	8006e30 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00f      	beq.n	8001f80 <HAL_ETH_IRQHandler+0x80>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	461a      	mov	r2, r3
 8001f74:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001f78:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f004 ff74 	bl	8006e68 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d042      	beq.n	8002010 <HAL_ETH_IRQHandler+0x110>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03d      	beq.n	8002010 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f043 0208 	orr.w	r2, r3, #8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01a      	beq.n	8001fe4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_ETH_IRQHandler+0x160>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001fd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fd8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	22e0      	movs	r2, #224	; 0xe0
 8001fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001fe2:	e012      	b.n	800200a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	461a      	mov	r2, r3
 8002004:	f248 6380 	movw	r3, #34432	; 0x8680
 8002008:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f82a 	bl	8002064 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00e      	beq.n	8002038 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f824 	bl	8002078 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_ETH_IRQHandler+0x158>)
 8002044:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002048:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f81e 	bl	800208c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40013c00 	.word	0x40013c00
 800205c:	00010040 	.word	0x00010040
 8002060:	007e2000 	.word	0x007e2000

08002064 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 031c 	and.w	r3, r3, #28
 80020bc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	02db      	lsls	r3, r3, #11
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f023 0302 	bic.w	r3, r3, #2
 80020de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80020f0:	f7ff fa8e 	bl	8001610 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020f6:	e00d      	b.n	8002114 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80020f8:	f7ff fa8a 	bl	8001610 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d301      	bcc.n	800210c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e010      	b.n	800212e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ec      	bne.n	80020f8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 031c 	and.w	r3, r3, #28
 8002152:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	02db      	lsls	r3, r3, #11
 8002158:	b29b      	uxth	r3, r3
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	019b      	lsls	r3, r3, #6
 8002164:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002190:	f7ff fa3e 	bl	8001610 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002196:	e00d      	b.n	80021b4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002198:	f7ff fa3a 	bl	8001610 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a6:	d301      	bcc.n	80021ac <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e009      	b.n	80021c0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ec      	bne.n	8002198 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0e6      	b.n	80023aa <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf0c      	ite	eq
 800229a:	2301      	moveq	r3, #1
 800229c:	2300      	movne	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	b29a      	uxth	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	bf14      	ite	ne
 800237e:	2301      	movne	r3, #1
 8002380:	2300      	moveq	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00b      	b.n	80023e2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d105      	bne.n	80023e0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8e0 	bl	800259c <ETH_SetMACConfig>

    return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e000      	b.n	80023e2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
  }
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00b      	b.n	8002416 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002404:	2b10      	cmp	r3, #16
 8002406:	d105      	bne.n	8002414 <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f97a 	bl	8002704 <ETH_SetDMAConfig>

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 031c 	bic.w	r3, r3, #28
 8002436:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002438:	f001 fb78 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 800243c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d804      	bhi.n	8002450 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e019      	b.n	8002484 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a11      	ldr	r2, [pc, #68]	; (8002498 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d204      	bcs.n	8002462 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 030c 	orr.w	r3, r3, #12
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e010      	b.n	8002484 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d90c      	bls.n	8002484 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0x80>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d804      	bhi.n	800247c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e003      	b.n	8002484 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f043 0310 	orr.w	r3, r3, #16
 8002482:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	611a      	str	r2, [r3, #16]
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	02160ebf 	.word	0x02160ebf
 8002498:	03938700 	.word	0x03938700
 800249c:	05f5e0ff 	.word	0x05f5e0ff
 80024a0:	08f0d17f 	.word	0x08f0d17f

080024a4 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e044      	b.n	8002542 <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	78db      	ldrb	r3, [r3, #3]
 80024c2:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024c4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	791b      	ldrb	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024cc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7a1b      	ldrb	r3, [r3, #8]
 80024d2:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024d4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	795b      	ldrb	r3, [r3, #5]
 80024da:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024dc:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	7a52      	ldrb	r2, [r2, #9]
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ETH_SetMACFilterConfig+0x46>
 80024e6:	2220      	movs	r2, #32
 80024e8:	e000      	b.n	80024ec <HAL_ETH_SetMACFilterConfig+0x48>
 80024ea:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80024ec:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	79db      	ldrb	r3, [r3, #7]
 80024f2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80024f4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	799b      	ldrb	r3, [r3, #6]
 80024fa:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80024fc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	789b      	ldrb	r3, [r3, #2]
 8002502:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002504:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 800250c:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_ETH_SetMACFilterConfig+0xa8>)
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	430b      	orrs	r3, r1
 8002528:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff f878 	bl	8001628 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	7ffff800 	.word	0x7ffff800

08002550 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002572:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002580:	2001      	movs	r0, #1
 8002582:	f7ff f851 	bl	8001628 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002590:	6193      	str	r3, [r2, #24]
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <ETH_SetMACConfig+0x164>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7b9b      	ldrb	r3, [r3, #14]
 80025ba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	7c12      	ldrb	r2, [r2, #16]
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d102      	bne.n	80025ca <ETH_SetMACConfig+0x2e>
 80025c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025c8:	e000      	b.n	80025cc <ETH_SetMACConfig+0x30>
 80025ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	7c52      	ldrb	r2, [r2, #17]
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d102      	bne.n	80025dc <ETH_SetMACConfig+0x40>
 80025d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025da:	e000      	b.n	80025de <ETH_SetMACConfig+0x42>
 80025dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7fdb      	ldrb	r3, [r3, #31]
 80025ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	7f92      	ldrb	r2, [r2, #30]
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	d102      	bne.n	8002602 <ETH_SetMACConfig+0x66>
 80025fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002600:	e000      	b.n	8002604 <ETH_SetMACConfig+0x68>
 8002602:	2200      	movs	r2, #0
                        macconf->Speed |
 8002604:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	7f1b      	ldrb	r3, [r3, #28]
 800260a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800260c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002612:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	791b      	ldrb	r3, [r3, #4]
 8002618:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800261a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002622:	2a00      	cmp	r2, #0
 8002624:	d102      	bne.n	800262c <ETH_SetMACConfig+0x90>
 8002626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262a:	e000      	b.n	800262e <ETH_SetMACConfig+0x92>
 800262c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800262e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	7bdb      	ldrb	r3, [r3, #15]
 8002634:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002636:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800263c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002644:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002646:	4313      	orrs	r3, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800265e:	2001      	movs	r0, #1
 8002660:	f7fe ffe2 	bl	8001628 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	f64f 7341 	movw	r3, #65345	; 0xff41
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002682:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800268a:	2a00      	cmp	r2, #0
 800268c:	d101      	bne.n	8002692 <ETH_SetMACConfig+0xf6>
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	e000      	b.n	8002694 <ETH_SetMACConfig+0xf8>
 8002692:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002694:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800269a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80026a2:	2a01      	cmp	r2, #1
 80026a4:	d101      	bne.n	80026aa <ETH_SetMACConfig+0x10e>
 80026a6:	2208      	movs	r2, #8
 80026a8:	e000      	b.n	80026ac <ETH_SetMACConfig+0x110>
 80026aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80026b4:	2a01      	cmp	r2, #1
 80026b6:	d101      	bne.n	80026bc <ETH_SetMACConfig+0x120>
 80026b8:	2204      	movs	r2, #4
 80026ba:	e000      	b.n	80026be <ETH_SetMACConfig+0x122>
 80026bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80026c6:	2a01      	cmp	r2, #1
 80026c8:	d101      	bne.n	80026ce <ETH_SetMACConfig+0x132>
 80026ca:	2202      	movs	r2, #2
 80026cc:	e000      	b.n	80026d0 <ETH_SetMACConfig+0x134>
 80026ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026d0:	4313      	orrs	r3, r2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7fe ff9d 	bl	8001628 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	fd20810f 	.word	0xfd20810f

08002704 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <ETH_SetDMAConfig+0x110>)
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7b1b      	ldrb	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <ETH_SetDMAConfig+0x2c>
 800272a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800272e:	e000      	b.n	8002732 <ETH_SetDMAConfig+0x2e>
 8002730:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7b5b      	ldrb	r3, [r3, #13]
 8002736:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002738:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	7f52      	ldrb	r2, [r2, #29]
 800273e:	2a00      	cmp	r2, #0
 8002740:	d102      	bne.n	8002748 <ETH_SetDMAConfig+0x44>
 8002742:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002746:	e000      	b.n	800274a <ETH_SetDMAConfig+0x46>
 8002748:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800274a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7b9b      	ldrb	r3, [r3, #14]
 8002750:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002752:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002758:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7f1b      	ldrb	r3, [r3, #28]
 800275e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002760:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	7f9b      	ldrb	r3, [r3, #30]
 8002766:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002768:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800276e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002776:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002778:	4313      	orrs	r3, r2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800279a:	2001      	movs	r0, #1
 800279c:	f7fe ff44 	bl	8001628 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	791b      	ldrb	r3, [r3, #4]
 80027b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f7fe ff15 	bl	8001628 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	f8de3f23 	.word	0xf8de3f23

08002818 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0a6      	sub	sp, #152	; 0x98
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800282c:	2300      	movs	r3, #0
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800285a:	2300      	movs	r3, #0
 800285c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002864:	2300      	movs	r3, #0
 8002866:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002892:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fe7f 	bl	800259c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800289e:	2301      	movs	r3, #1
 80028a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028d8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028de:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff05 	bl	8002704 <ETH_SetDMAConfig>
}
 80028fa:	bf00      	nop
 80028fc:	3798      	adds	r7, #152	; 0x98
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3305      	adds	r3, #5
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	3204      	adds	r2, #4
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <ETH_MACAddressConfig+0x68>)
 8002926:	4413      	add	r3, r2
 8002928:	461a      	mov	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3303      	adds	r3, #3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061a      	lsls	r2, r3, #24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3302      	adds	r3, #2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	4313      	orrs	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <ETH_MACAddressConfig+0x6c>)
 8002956:	4413      	add	r3, r2
 8002958:	461a      	mov	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6013      	str	r3, [r2, #0]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40028040 	.word	0x40028040
 8002970:	40028044 	.word	0x40028044

08002974 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e03e      	b.n	8002a00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	3206      	adds	r2, #6
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d80c      	bhi.n	80029e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68d9      	ldr	r1, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	e004      	b.n	80029ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d9bd      	bls.n	8002982 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e048      	b.n	8002ac6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6919      	ldr	r1, [r3, #16]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	3212      	adds	r2, #18
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d80c      	bhi.n	8002ab6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6919      	ldr	r1, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e004      	b.n	8002ac0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d9b3      	bls.n	8002a34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b091      	sub	sp, #68	; 0x44
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3318      	adds	r3, #24
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b46:	d007      	beq.n	8002b58 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e111      	b.n	8002d80 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	3301      	adds	r3, #1
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4b86      	ldr	r3, [pc, #536]	; (8002d8c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	6852      	ldr	r2, [r2, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002bde:	e082      	b.n	8002ce6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e005      	b.n	8002c0c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0e:	3301      	adds	r3, #1
 8002c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d902      	bls.n	8002c1e <ETH_Prepare_Tx_Descriptors+0x11a>
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c34:	d007      	beq.n	8002c46 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d029      	beq.n	8002c9a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c58:	e019      	b.n	8002c8e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c5a:	f3bf 8f5f 	dmb	sy
}
 8002c5e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d902      	bls.n	8002c7e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d3e1      	bcc.n	8002c5a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c96:	2302      	movs	r3, #2
 8002c98:	e072      	b.n	8002d80 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	3301      	adds	r3, #1
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	6852      	ldr	r2, [r2, #4]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002cd4:	f3bf 8f5f 	dmb	sy
}
 8002cd8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f47f af78 	bne.w	8002be0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e005      	b.n	8002d10 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	6a3a      	ldr	r2, [r7, #32]
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002d26:	f3bf 8f5f 	dmb	sy
}
 8002d2a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	3304      	adds	r3, #4
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	613b      	str	r3, [r7, #16]
  return(result);
 8002d54:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	4413      	add	r3, r2
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f383 8810 	msr	PRIMASK, r3
}
 8002d7c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3744      	adds	r7, #68	; 0x44
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	ffffe000 	.word	0xffffe000

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e175      	b.n	800309c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002db0:	2201      	movs	r2, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	f040 8164 	bne.w	8003096 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d005      	beq.n	8002de6 <HAL_GPIO_Init+0x56>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d130      	bne.n	8002e48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0201 	and.w	r2, r3, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d017      	beq.n	8002e84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d123      	bne.n	8002ed8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	08da      	lsrs	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0203 	and.w	r2, r3, #3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80be 	beq.w	8003096 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1a:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <HAL_GPIO_Init+0x324>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	4a65      	ldr	r2, [pc, #404]	; (80030b4 <HAL_GPIO_Init+0x324>)
 8002f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f24:	6453      	str	r3, [r2, #68]	; 0x44
 8002f26:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <HAL_GPIO_Init+0x324>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f32:	4a61      	ldr	r2, [pc, #388]	; (80030b8 <HAL_GPIO_Init+0x328>)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	220f      	movs	r2, #15
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a58      	ldr	r2, [pc, #352]	; (80030bc <HAL_GPIO_Init+0x32c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d037      	beq.n	8002fce <HAL_GPIO_Init+0x23e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d031      	beq.n	8002fca <HAL_GPIO_Init+0x23a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a56      	ldr	r2, [pc, #344]	; (80030c4 <HAL_GPIO_Init+0x334>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_GPIO_Init+0x236>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a55      	ldr	r2, [pc, #340]	; (80030c8 <HAL_GPIO_Init+0x338>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d025      	beq.n	8002fc2 <HAL_GPIO_Init+0x232>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a54      	ldr	r2, [pc, #336]	; (80030cc <HAL_GPIO_Init+0x33c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <HAL_GPIO_Init+0x22e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a53      	ldr	r2, [pc, #332]	; (80030d0 <HAL_GPIO_Init+0x340>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x22a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_GPIO_Init+0x344>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x226>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a51      	ldr	r2, [pc, #324]	; (80030d8 <HAL_GPIO_Init+0x348>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x222>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a50      	ldr	r2, [pc, #320]	; (80030dc <HAL_GPIO_Init+0x34c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x21e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4f      	ldr	r2, [pc, #316]	; (80030e0 <HAL_GPIO_Init+0x350>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x21a>
 8002fa6:	2309      	movs	r3, #9
 8002fa8:	e012      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002faa:	230a      	movs	r3, #10
 8002fac:	e010      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	e00e      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fb2:	2307      	movs	r3, #7
 8002fb4:	e00c      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	e00a      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fba:	2305      	movs	r3, #5
 8002fbc:	e008      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e004      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e002      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_GPIO_Init+0x240>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f002 0203 	and.w	r2, r2, #3
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	4093      	lsls	r3, r2
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fe0:	4935      	ldr	r1, [pc, #212]	; (80030b8 <HAL_GPIO_Init+0x328>)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <HAL_GPIO_Init+0x354>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003012:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_GPIO_Init+0x354>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003018:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <HAL_GPIO_Init+0x354>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_GPIO_Init+0x354>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_GPIO_Init+0x354>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_GPIO_Init+0x354>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_GPIO_Init+0x354>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_GPIO_Init+0x354>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	f67f ae86 	bls.w	8002db0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3724      	adds	r7, #36	; 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021400 	.word	0x40021400
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40022400 	.word	0x40022400
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800312c:	887a      	ldrh	r2, [r7, #2]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4013      	ands	r3, r2
 8003132:	041a      	lsls	r2, r3, #16
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43d9      	mvns	r1, r3
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	400b      	ands	r3, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800317e:	f7fe fa47 	bl	8001610 <HAL_GetTick>
 8003182:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003184:	e009      	b.n	800319a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003186:	f7fe fa43 	bl	8001610 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003194:	d901      	bls.n	800319a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e022      	b.n	80031e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a6:	d1ee      	bne.n	8003186 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b4:	f7fe fa2c 	bl	8001610 <HAL_GetTick>
 80031b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031ba:	e009      	b.n	80031d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031bc:	f7fe fa28 	bl	8001610 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ca:	d901      	bls.n	80031d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e007      	b.n	80031e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031dc:	d1ee      	bne.n	80031bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40007000 	.word	0x40007000

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e29b      	b.n	800373e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8087 	beq.w	8003322 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003214:	4b96      	ldr	r3, [pc, #600]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b04      	cmp	r3, #4
 800321e:	d00c      	beq.n	800323a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003220:	4b93      	ldr	r3, [pc, #588]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d112      	bne.n	8003252 <HAL_RCC_OscConfig+0x62>
 800322c:	4b90      	ldr	r3, [pc, #576]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003238:	d10b      	bne.n	8003252 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323a:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d06c      	beq.n	8003320 <HAL_RCC_OscConfig+0x130>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d168      	bne.n	8003320 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e275      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x7a>
 800325c:	4b84      	ldr	r3, [pc, #528]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a83      	ldr	r2, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e02e      	b.n	80032c8 <HAL_RCC_OscConfig+0xd8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x9c>
 8003272:	4b7f      	ldr	r3, [pc, #508]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a7e      	ldr	r2, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a7b      	ldr	r2, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0xd8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0xc0>
 8003296:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b73      	ldr	r3, [pc, #460]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a72      	ldr	r2, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xd8>
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a6b      	ldr	r2, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe f99e 	bl	8001610 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe f99a 	bl	8001610 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e229      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe8>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe f98a 	bl	8001610 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe f986 	bl	8001610 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e215      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x110>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d069      	beq.n	8003402 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333a:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d11c      	bne.n	8003380 <HAL_RCC_OscConfig+0x190>
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d116      	bne.n	8003380 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x17a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e1e9      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	493d      	ldr	r1, [pc, #244]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	e040      	b.n	8003402 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a38      	ldr	r2, [pc, #224]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe f93c 	bl	8001610 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fe f938 	bl	8001610 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1c7      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4929      	ldr	r1, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
 80033ce:	e018      	b.n	8003402 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe f918 	bl	8001610 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe f914 	bl	8001610 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1a3      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d038      	beq.n	8003480 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d019      	beq.n	800344a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe f8f5 	bl	8001610 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe f8f1 	bl	8001610 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e180      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x23a>
 8003448:	e01a      	b.n	8003480 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800344c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe f8db 	bl	8001610 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345e:	f7fe f8d7 	bl	8001610 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d903      	bls.n	8003474 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e166      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
 8003470:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b92      	ldr	r3, [pc, #584]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ee      	bne.n	800345e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a4 	beq.w	80035d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b8c      	ldr	r3, [pc, #560]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a88      	ldr	r2, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b86      	ldr	r3, [pc, #536]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b6:	4b83      	ldr	r3, [pc, #524]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034c2:	4b80      	ldr	r3, [pc, #512]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fe f89f 	bl	8001610 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fe f89b 	bl	8001610 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b64      	cmp	r3, #100	; 0x64
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e12a      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e8:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x31a>
 80034fc:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a6f      	ldr	r2, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	e02d      	b.n	8003566 <HAL_RCC_OscConfig+0x376>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x33c>
 8003512:	4b6b      	ldr	r3, [pc, #428]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a6a      	ldr	r2, [pc, #424]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	4b68      	ldr	r3, [pc, #416]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a67      	ldr	r2, [pc, #412]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	e01c      	b.n	8003566 <HAL_RCC_OscConfig+0x376>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x35e>
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a61      	ldr	r2, [pc, #388]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a5e      	ldr	r2, [pc, #376]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0x376>
 800354e:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a5b      	ldr	r2, [pc, #364]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a58      	ldr	r2, [pc, #352]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d015      	beq.n	800359a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe f84f 	bl	8001610 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe f84b 	bl	8001610 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0d8      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ee      	beq.n	8003576 <HAL_RCC_OscConfig+0x386>
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fe f839 	bl	8001610 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe f835 	bl	8001610 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0c2      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80ae 	beq.w	800373c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e0:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d06d      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d14b      	bne.n	800368c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe f806 	bl	8001610 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe f802 	bl	8001610 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e091      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	071b      	lsls	r3, r3, #28
 8003652:	491b      	ldr	r1, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd ffd4 	bl	8001610 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fd ffd0 	bl	8001610 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e05f      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x47c>
 800368a:	e057      	b.n	800373c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd ffba 	bl	8001610 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fd ffb6 	bl	8001610 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e045      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4b0>
 80036be:	e03d      	b.n	800373c <HAL_RCC_OscConfig+0x54c>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x558>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d030      	beq.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d129      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d122      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003700:	4293      	cmp	r3, r2
 8003702:	d119      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d10f      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0d0      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d910      	bls.n	8003794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 020f 	bic.w	r2, r3, #15
 800377a:	4965      	ldr	r1, [pc, #404]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ac:	4b59      	ldr	r3, [pc, #356]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a52      	ldr	r2, [pc, #328]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	494d      	ldr	r1, [pc, #308]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d040      	beq.n	8003870 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d115      	bne.n	800382e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e073      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e06b      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4936      	ldr	r1, [pc, #216]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fd fee6 	bl	8001610 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	e00a      	b.n	800385e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7fd fee2 	bl	8001610 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e053      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 020c 	and.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1eb      	bne.n	8003848 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d210      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 020f 	bic.w	r2, r3, #15
 8003886:	4922      	ldr	r1, [pc, #136]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e032      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4916      	ldr	r1, [pc, #88]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038de:	f000 f821 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490a      	ldr	r1, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x1cc>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x1d0>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x1d4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fb54 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023c00 	.word	0x40023c00
 8003914:	40023800 	.word	0x40023800
 8003918:	08010cb0 	.word	0x08010cb0
 800391c:	20000000 	.word	0x20000000
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003928:	b094      	sub	sp, #80	; 0x50
 800392a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
 8003930:	2300      	movs	r3, #0
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003934:	2300      	movs	r3, #0
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393c:	4b79      	ldr	r3, [pc, #484]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b08      	cmp	r3, #8
 8003946:	d00d      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x40>
 8003948:	2b08      	cmp	r3, #8
 800394a:	f200 80e1 	bhi.w	8003b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x34>
 8003952:	2b04      	cmp	r3, #4
 8003954:	d003      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0x3a>
 8003956:	e0db      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b73      	ldr	r3, [pc, #460]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800395a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800395c:	e0db      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800395e:	4b72      	ldr	r3, [pc, #456]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003962:	e0d8      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003964:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800396e:	4b6d      	ldr	r3, [pc, #436]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397a:	4b6a      	ldr	r3, [pc, #424]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	099b      	lsrs	r3, r3, #6
 8003980:	2200      	movs	r2, #0
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
 8003984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398c:	633b      	str	r3, [r7, #48]	; 0x30
 800398e:	2300      	movs	r3, #0
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003996:	4622      	mov	r2, r4
 8003998:	462b      	mov	r3, r5
 800399a:	f04f 0000 	mov.w	r0, #0
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	0159      	lsls	r1, r3, #5
 80039a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a8:	0150      	lsls	r0, r2, #5
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4621      	mov	r1, r4
 80039b0:	1a51      	subs	r1, r2, r1
 80039b2:	6139      	str	r1, [r7, #16]
 80039b4:	4629      	mov	r1, r5
 80039b6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c8:	4659      	mov	r1, fp
 80039ca:	018b      	lsls	r3, r1, #6
 80039cc:	4651      	mov	r1, sl
 80039ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039d2:	4651      	mov	r1, sl
 80039d4:	018a      	lsls	r2, r1, #6
 80039d6:	4651      	mov	r1, sl
 80039d8:	ebb2 0801 	subs.w	r8, r2, r1
 80039dc:	4659      	mov	r1, fp
 80039de:	eb63 0901 	sbc.w	r9, r3, r1
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039f6:	4690      	mov	r8, r2
 80039f8:	4699      	mov	r9, r3
 80039fa:	4623      	mov	r3, r4
 80039fc:	eb18 0303 	adds.w	r3, r8, r3
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	462b      	mov	r3, r5
 8003a04:	eb49 0303 	adc.w	r3, r9, r3
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a16:	4629      	mov	r1, r5
 8003a18:	028b      	lsls	r3, r1, #10
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a20:	4621      	mov	r1, r4
 8003a22:	028a      	lsls	r2, r1, #10
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a34:	f7fc fd74 	bl	8000520 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a40:	e058      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a42:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	f04f 0000 	mov.w	r0, #0
 8003a64:	f04f 0100 	mov.w	r1, #0
 8003a68:	0159      	lsls	r1, r3, #5
 8003a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6e:	0150      	lsls	r0, r2, #5
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4641      	mov	r1, r8
 8003a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a94:	ebb2 040a 	subs.w	r4, r2, sl
 8003a98:	eb63 050b 	sbc.w	r5, r3, fp
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	00eb      	lsls	r3, r5, #3
 8003aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aaa:	00e2      	lsls	r2, r4, #3
 8003aac:	4614      	mov	r4, r2
 8003aae:	461d      	mov	r5, r3
 8003ab0:	4643      	mov	r3, r8
 8003ab2:	18e3      	adds	r3, r4, r3
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	eb45 0303 	adc.w	r3, r5, r3
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aca:	4629      	mov	r1, r5
 8003acc:	028b      	lsls	r3, r1, #10
 8003ace:	4621      	mov	r1, r4
 8003ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	028a      	lsls	r2, r1, #10
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ade:	2200      	movs	r2, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	61fa      	str	r2, [r7, #28]
 8003ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae8:	f7fc fd1a 	bl	8000520 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4613      	mov	r3, r2
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3750      	adds	r7, #80	; 0x50
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	00f42400 	.word	0x00f42400

08003b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000000 	.word	0x20000000

08003b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b48:	f7ff fff0 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0a9b      	lsrs	r3, r3, #10
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	08010cc0 	.word	0x08010cc0

08003b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	220f      	movs	r2, #15
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_RCC_GetClockConfig+0x60>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 020f 	and.w	r2, r3, #15
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40023c00 	.word	0x40023c00

08003bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e049      	b.n	8003c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f841 	bl	8003c7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f000 f9e8 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d001      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e054      	b.n	8003d56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d022      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x80>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d01d      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x80>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d018      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x80>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x80>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00e      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x80>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <HAL_TIM_Base_Start_IT+0xe0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x80>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x80>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_TIM_Base_Start_IT+0xe8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d115      	bne.n	8003d40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_TIM_Base_Start_IT+0xec>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b06      	cmp	r3, #6
 8003d24:	d015      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0xbe>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d011      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	e008      	b.n	8003d52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e000      	b.n	8003d54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800
 8003d70:	40000c00 	.word	0x40000c00
 8003d74:	40010400 	.word	0x40010400
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40001800 	.word	0x40001800
 8003d80:	00010007 	.word	0x00010007

08003d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d020      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0202 	mvn.w	r2, #2
 8003db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f8e9 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8db 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f8ec 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d020      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0204 	mvn.w	r2, #4
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8c3 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8b5 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f8c6 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d020      	beq.n	8003e80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01b      	beq.n	8003e80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0208 	mvn.w	r2, #8
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2204      	movs	r2, #4
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f89d 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f88f 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f8a0 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d020      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01b      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0210 	mvn.w	r2, #16
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f877 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f869 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f87a 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0201 	mvn.w	r2, #1
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fc ff5a 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f919 	bl	8004150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00c      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f911 	bl	8004164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f834 	bl	8003fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0220 	mvn.w	r2, #32
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8d9 	bl	800413c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a46      	ldr	r2, [pc, #280]	; (8004110 <TIM_Base_SetConfig+0x12c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a43      	ldr	r2, [pc, #268]	; (8004114 <TIM_Base_SetConfig+0x130>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a42      	ldr	r2, [pc, #264]	; (8004118 <TIM_Base_SetConfig+0x134>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a41      	ldr	r2, [pc, #260]	; (800411c <TIM_Base_SetConfig+0x138>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a40      	ldr	r2, [pc, #256]	; (8004120 <TIM_Base_SetConfig+0x13c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a35      	ldr	r2, [pc, #212]	; (8004110 <TIM_Base_SetConfig+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d027      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a32      	ldr	r2, [pc, #200]	; (8004114 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d023      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a31      	ldr	r2, [pc, #196]	; (8004118 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a30      	ldr	r2, [pc, #192]	; (800411c <TIM_Base_SetConfig+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2f      	ldr	r2, [pc, #188]	; (8004120 <TIM_Base_SetConfig+0x13c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <TIM_Base_SetConfig+0x140>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <TIM_Base_SetConfig+0x144>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2c      	ldr	r2, [pc, #176]	; (800412c <TIM_Base_SetConfig+0x148>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <TIM_Base_SetConfig+0x14c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <TIM_Base_SetConfig+0x150>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <TIM_Base_SetConfig+0x154>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a10      	ldr	r2, [pc, #64]	; (8004110 <TIM_Base_SetConfig+0x12c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <TIM_Base_SetConfig+0x13c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]
  }
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800
 8004130:	40001800 	.word	0x40001800
 8004134:	40001c00 	.word	0x40001c00
 8004138:	40002000 	.word	0x40002000

0800413c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_nxe_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (dhcp_ptr == NX_NULL))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <_nxe_dhcp_create+0x22>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <_nxe_dhcp_create+0x3c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d102      	bne.n	800419a <_nxe_dhcp_create+0x22>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <_nxe_dhcp_create+0x26>
    {
    
        return(NX_PTR_ERROR);
 800419a:	2307      	movs	r3, #7
 800419c:	e006      	b.n	80041ac <_nxe_dhcp_create+0x34>
    }

    /* Call actual DHCP create service.  */
    status =  _nx_dhcp_create(dhcp_ptr, ip_ptr, name_ptr);
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f808 	bl	80041b8 <_nx_dhcp_create>
 80041a8:	6178      	str	r0, [r7, #20]

    /* Return status.  */
    return(status);
 80041aa:	697b      	ldr	r3, [r7, #20]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	49502020 	.word	0x49502020

080041b8 <_nx_dhcp_create>:
/*                                            multiple client instances,  */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b092      	sub	sp, #72	; 0x48
 80041bc:	af08      	add	r7, sp, #32
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
            return (NX_DHCP_INVALID_NAME);
    }
#endif /* NX_DHCP_CLIENT_ENABLE_HOST_NAME_CHECK  */

    /* Initialize the DHCP control block to zero.  */
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 80041c4:	f641 7254 	movw	r2, #8020	; 0x1f54
 80041c8:	2100      	movs	r1, #0
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f00b fe49 	bl	800fe62 <memset>
    
    /* Save the IP pointer.  */
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	609a      	str	r2, [r3, #8]

    /* Save the DHCP name.  */
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	605a      	str	r2, [r3, #4]
        /* Invalid payload, return error status.  */
        return(NX_DHCP_INVALID_PAYLOAD);
    }

    /* Create the pool and check the status */
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f103 000c 	add.w	r0, r3, #12
                                    dhcp_ptr -> nx_dhcp_pool_area, NX_DHCP_PACKET_POOL_SIZE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3348      	adds	r3, #72	; 0x48
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 80041e6:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 80041ea:	9200      	str	r2, [sp, #0]
 80041ec:	f44f 7214 	mov.w	r2, #592	; 0x250
 80041f0:	498b      	ldr	r1, [pc, #556]	; (8004420 <_nx_dhcp_create+0x268>)
 80041f2:	f006 f9d7 	bl	800a5a4 <_nx_packet_pool_create>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Determine if it was successful.  */
    if (status != NX_SUCCESS)
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <_nx_dhcp_create+0x4a>
    {

        /* No, return error status.  */
        return(status);
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	e109      	b.n	8004416 <_nx_dhcp_create+0x25e>
    }

    /* Set an internal packet pool pointer to the newly created packet pool. */
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f103 020c 	add.w	r2, r3, #12
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8c3 2bd8 	str.w	r2, [r3, #3032]	; 0xbd8
#endif /* NX_DHCP_CLIENT_SEND_MAX_DHCP_MESSAGE_OPTION  */

#endif /* NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL  */

    /* Create the Socket and check the status */
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f603 31dc 	addw	r1, r3, #3036	; 0xbdc
 8004214:	2304      	movs	r3, #4
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	2300      	movs	r3, #0
 8004224:	4a7e      	ldr	r2, [pc, #504]	; (8004420 <_nx_dhcp_create+0x268>)
 8004226:	68b8      	ldr	r0, [r7, #8]
 8004228:	f007 f97a 	bl	800b520 <_nx_udp_socket_create>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24
                                  NX_DHCP_TYPE_OF_SERVICE, NX_DHCP_FRAGMENT_OPTION, NX_DHCP_TIME_TO_LIVE, NX_DHCP_QUEUE_DEPTH);

    /* Was the socket creation successful?  */
    if (status != NX_SUCCESS)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <_nx_dhcp_create+0x8c>
    {

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800423a:	4618      	mov	r0, r3
 800423c:	f006 fa82 	bl	800a744 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	e0e8      	b.n	8004416 <_nx_dhcp_create+0x25e>
    }


    /* Set the UDP socket receive callback function.  */
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800424a:	4976      	ldr	r1, [pc, #472]	; (8004424 <_nx_dhcp_create+0x26c>)
 800424c:	4618      	mov	r0, r3
 800424e:	f007 fba9 	bl	800b9a4 <_nx_udp_socket_receive_notify>
 8004252:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check status.  */
    if (status != NX_SUCCESS) 
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <_nx_dhcp_create+0xba>
    {


#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8004260:	4618      	mov	r0, r3
 8004262:	f006 fa6f 	bl	800a744 <_nx_packet_pool_delete>
#endif

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800426c:	4618      	mov	r0, r3
 800426e:	f007 f9e7 	bl	800b640 <_nx_udp_socket_delete>
    }

    dhcp_ptr -> nx_dhcp_socket.nx_udp_socket_reserved_ptr = (VOID*)dhcp_ptr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50

    /* Create the ThreadX activity timeout timer.  This will be used to periodically check to see if
       a client connection has gone silent and needs to be terminated.  */
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f641 505c 	movw	r0, #7516	; 0x1d5c
 8004280:	4418      	add	r0, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	222c      	movs	r2, #44	; 0x2c
 8004286:	9203      	str	r2, [sp, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	9202      	str	r2, [sp, #8]
 800428c:	2264      	movs	r2, #100	; 0x64
 800428e:	9201      	str	r2, [sp, #4]
 8004290:	2264      	movs	r2, #100	; 0x64
 8004292:	9200      	str	r2, [sp, #0]
 8004294:	4a64      	ldr	r2, [pc, #400]	; (8004428 <_nx_dhcp_create+0x270>)
 8004296:	4965      	ldr	r1, [pc, #404]	; (800442c <_nx_dhcp_create+0x274>)
 8004298:	f00b fba6 	bl	800f9e8 <_txe_timer_create>
 800429c:	6278      	str	r0, [r7, #36]	; 0x24
                              (NX_DHCP_TIME_INTERVAL), TX_NO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_timer), dhcp_ptr)

    /* Determine if the semaphore creation was successful.  */
    if (status != TX_SUCCESS)
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00d      	beq.n	80042c0 <_nx_dhcp_create+0x108>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80042aa:	4618      	mov	r0, r3
 80042ac:	f007 f9c8 	bl	800b640 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80042b6:	4618      	mov	r0, r3
 80042b8:	f006 fa44 	bl	800a744 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	e0aa      	b.n	8004416 <_nx_dhcp_create+0x25e>
    }

    /* Create the DHCP mutex.  */
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f641 5004 	movw	r0, #7428	; 0x1d04
 80042c6:	4418      	add	r0, r3
 80042c8:	2334      	movs	r3, #52	; 0x34
 80042ca:	2200      	movs	r2, #0
 80042cc:	4954      	ldr	r1, [pc, #336]	; (8004420 <_nx_dhcp_create+0x268>)
 80042ce:	f00b f8c1 	bl	800f454 <_txe_mutex_create>
 80042d2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Determine if the semaphore creation was successful.  */
    if (status != TX_SUCCESS)
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d014      	beq.n	8004304 <_nx_dhcp_create+0x14c>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80042e0:	4618      	mov	r0, r3
 80042e2:	f007 f9ad 	bl	800b640 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80042ec:	4618      	mov	r0, r3
 80042ee:	f006 fa29 	bl	800a744 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80042f8:	4413      	add	r3, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f00b fc20 	bl	800fb40 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	e088      	b.n	8004416 <_nx_dhcp_create+0x25e>
    }

    /* Create the DHCP processing thread.  */
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f603 5304 	addw	r3, r3, #3332	; 0xd04
 8004312:	21b0      	movs	r1, #176	; 0xb0
 8004314:	9106      	str	r1, [sp, #24]
 8004316:	2100      	movs	r1, #0
 8004318:	9105      	str	r1, [sp, #20]
 800431a:	2101      	movs	r1, #1
 800431c:	9104      	str	r1, [sp, #16]
 800431e:	2103      	movs	r1, #3
 8004320:	9103      	str	r1, [sp, #12]
 8004322:	2103      	movs	r1, #3
 8004324:	9102      	str	r1, [sp, #8]
 8004326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800432a:	9101      	str	r1, [sp, #4]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	4a3f      	ldr	r2, [pc, #252]	; (8004430 <_nx_dhcp_create+0x278>)
 8004332:	493b      	ldr	r1, [pc, #236]	; (8004420 <_nx_dhcp_create+0x268>)
 8004334:	f00b f9fe 	bl	800f734 <_txe_thread_create>
 8004338:	6278      	str	r0, [r7, #36]	; 0x24
                                NX_DHCP_THREAD_PRIORITY, NX_DHCP_THREAD_PRIORITY, 1, TX_DONT_START);

    NX_THREAD_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_thread), dhcp_ptr)

    /* Determine if the thread creation was successful.  */
    if (status != TX_SUCCESS)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <_nx_dhcp_create+0x1c0>
    {

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004346:	4413      	add	r3, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f00b f921 	bl	800f590 <_txe_mutex_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8004354:	4618      	mov	r0, r3
 8004356:	f007 f973 	bl	800b640 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8004360:	4618      	mov	r0, r3
 8004362:	f006 f9ef 	bl	800a744 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800436c:	4413      	add	r3, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f00b fbe6 	bl	800fb40 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	e04e      	b.n	8004416 <_nx_dhcp_create+0x25e>
    }

    /* Create a DHCP event flag group. .  */
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	f641 5338 	movw	r3, #7480	; 0x1d38
 800437e:	4413      	add	r3, r2
 8004380:	2224      	movs	r2, #36	; 0x24
 8004382:	492c      	ldr	r1, [pc, #176]	; (8004434 <_nx_dhcp_create+0x27c>)
 8004384:	4618      	mov	r0, r3
 8004386:	f00a ff4f 	bl	800f228 <_txe_event_flags_create>
 800438a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for error. */
    if (status != TX_SUCCESS)
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d021      	beq.n	80043d6 <_nx_dhcp_create+0x21e>
    {

        /* Delete the thread.  */
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8004398:	4618      	mov	r0, r3
 800439a:	f00b fabd 	bl	800f918 <_txe_thread_delete>

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	f641 5304 	movw	r3, #7428	; 0x1d04
 80043a4:	4413      	add	r3, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00b f8f2 	bl	800f590 <_txe_mutex_delete>

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80043b2:	4413      	add	r3, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f00b fbc3 	bl	800fb40 <_txe_timer_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80043c0:	4618      	mov	r0, r3
 80043c2:	f007 f93d 	bl	800b640 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 f9b9 	bl	800a744 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	e01f      	b.n	8004416 <_nx_dhcp_create+0x25e>
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80043d6:	f3ef 8310 	mrs	r3, PRIMASK
 80043da:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 80043dc:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80043de:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80043e0:	b672      	cpsid	i
#endif
    return(int_posture);
 80043e2:	697b      	ldr	r3, [r7, #20]
    }

    /* Otherwise, the DHCP initialization was successful.  Place the
       DHCP control block on the list of created DHCP instances.  */
    TX_DISABLE
 80043e4:	623b      	str	r3, [r7, #32]

    /* Update the dhcp structure ID.  */
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a13      	ldr	r2, [pc, #76]	; (8004438 <_nx_dhcp_create+0x280>)
 80043ea:	601a      	str	r2, [r3, #0]

    /* Setup this DHCP's created links.  */
    dhcp_ptr -> nx_dhcp_created_next = _nx_dhcp_created_ptr;
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <_nx_dhcp_create+0x284>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043f6:	f8c2 3f4c 	str.w	r3, [r2, #3916]	; 0xf4c

    /* Place the new DHCP control block on the head of created DHCPs.  */
    _nx_dhcp_created_ptr = dhcp_ptr;
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <_nx_dhcp_create+0x284>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Default enable DHCP on the primary interface (0).  */
    _nx_dhcp_interface_enable(dhcp_ptr, 0);
 800440c:	2100      	movs	r1, #0
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fa09 	bl	8004826 <_nx_dhcp_interface_enable>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3728      	adds	r7, #40	; 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	08010c44 	.word	0x08010c44
 8004424:	08004961 	.word	0x08004961
 8004428:	08004989 	.word	0x08004989
 800442c:	08010c58 	.word	0x08010c58
 8004430:	080049af 	.word	0x080049af
 8004434:	08010c6c 	.word	0x08010c6c
 8004438:	44484350 	.word	0x44484350
 800443c:	20017bfc 	.word	0x20017bfc

08004440 <_nx_dhcp_interface_reinitialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_reinitialize(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

UINT                      status;
ULONG                     ip_address;
ULONG                     network_mask;
ULONG                     gateway_address;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]

  
    /* Obtain DHCP Client protection mutex. */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004454:	4413      	add	r3, r2
 8004456:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800445a:	4618      	mov	r0, r3
 800445c:	f00b f8d6 	bl	800f60c <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8004460:	f107 030c 	add.w	r3, r7, #12
 8004464:	461a      	mov	r2, r3
 8004466:	6839      	ldr	r1, [r7, #0]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f001 fe96 	bl	800619a <_nx_dhcp_interface_record_find>
 800446e:	61f8      	str	r0, [r7, #28]

    /* Check status.  */
    if (status)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <_nx_dhcp_interface_reinitialize+0x48>
    {

        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	f641 5304 	movw	r3, #7428	; 0x1d04
 800447c:	4413      	add	r3, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f00b f91e 	bl	800f6c0 <_txe_mutex_put>
        return(status);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	e063      	b.n	8004550 <_nx_dhcp_interface_reinitialize+0x110>
    }

    /* Check if have IP address.  */
    if (interface_record -> nx_dhcp_ip_address)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d018      	beq.n	80044c2 <_nx_dhcp_interface_reinitialize+0x82>
    {

        /* Get the IP address.  */
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6898      	ldr	r0, [r3, #8]
 8004494:	f107 0314 	add.w	r3, r7, #20
 8004498:	f107 0218 	add.w	r2, r7, #24
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	f004 fbe1 	bl	8008c64 <_nx_ip_interface_address_get>
 80044a2:	61f8      	str	r0, [r7, #28]

        /* Check if the IP address is set by DHCP.  */
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <_nx_dhcp_interface_reinitialize+0x82>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d106      	bne.n	80044c2 <_nx_dhcp_interface_reinitialize+0x82>
        {

            /* Clear the IP address.  */
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6898      	ldr	r0, [r3, #8]
 80044b8:	2300      	movs	r3, #0
 80044ba:	2200      	movs	r2, #0
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	f004 fc0f 	bl	8008ce0 <_nx_ip_interface_address_set>
        }
    }

    /* Check if have gateway address.  */
    if (interface_record -> nx_dhcp_gateway_address)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d015      	beq.n	80044f6 <_nx_dhcp_interface_reinitialize+0xb6>
    {

        /* Get the gateway address.  */
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f107 0210 	add.w	r2, r7, #16
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f004 fa59 	bl	800898c <_nx_ip_gateway_address_get>
 80044da:	61f8      	str	r0, [r7, #28]

        /* Check status.  */
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <_nx_dhcp_interface_reinitialize+0xb6>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d104      	bne.n	80044f6 <_nx_dhcp_interface_reinitialize+0xb6>
        {

            /* Clear the Gateway/Router IP address.  */
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 fa20 	bl	8008936 <_nx_ip_gateway_address_clear>
        }
    }

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS; 
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	615a      	str	r2, [r3, #20]

    /* Clear these DHCP Client network values too.*/
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]

    /* Clear the flag to skip the discovery step. The host application must
       call the nx_dhcp_request_ip_address to reset the flag and the requested IP address. */
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
                                                             
    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset the seconds field for starting the DHCP request process. */
    interface_record -> nx_dhcp_seconds = 0;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]

    /* Reset the timeout and retransmission interval.  */
    interface_record -> nx_dhcp_timeout = 0;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DHCP state to the initial state.  */
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	705a      	strb	r2, [r3, #1]

    /* Release the mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004546:	4413      	add	r3, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f00b f8b9 	bl	800f6c0 <_txe_mutex_put>
    return NX_SUCCESS;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_nxe_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_start(NX_DHCP *dhcp_ptr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <_nxe_dhcp_start+0x18>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <_nxe_dhcp_start+0x58>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d001      	beq.n	8004574 <_nxe_dhcp_start+0x1c>
        return(NX_PTR_ERROR);
 8004570:	2307      	movs	r3, #7
 8004572:	e018      	b.n	80045a6 <_nxe_dhcp_start+0x4e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004574:	f3ef 8305 	mrs	r3, IPSR
 8004578:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800457a:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <_nxe_dhcp_start+0x5c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <_nxe_dhcp_start+0x40>
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <_nxe_dhcp_start+0x60>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <_nxe_dhcp_start+0x40>
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <_nxe_dhcp_start+0x60>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <_nxe_dhcp_start+0x64>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d101      	bne.n	800459c <_nxe_dhcp_start+0x44>
 8004598:	2311      	movs	r3, #17
 800459a:	e004      	b.n	80045a6 <_nxe_dhcp_start+0x4e>

    /* Call actual DHCP start service.  */
    status =  _nx_dhcp_start(dhcp_ptr);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f80f 	bl	80045c0 <_nx_dhcp_start>
 80045a2:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 80045a4:	68fb      	ldr	r3, [r7, #12]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	44484350 	.word	0x44484350
 80045b4:	2000008c 	.word	0x2000008c
 80045b8:	20017d10 	.word	0x20017d10
 80045bc:	20017e5c 	.word	0x20017e5c

080045c0 <_nx_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_start(NX_DHCP *dhcp_ptr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

UINT    status;
UINT    interfaces_started = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
UINT    i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	f641 5304 	movw	r3, #7428	; 0x1d04
 80045d2:	4413      	add	r3, r2
 80045d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045d8:	4618      	mov	r0, r3
 80045da:	f00b f817 	bl	800f60c <_txe_mutex_get>

    /* Check all interfaces to find out which need to start the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	e028      	b.n	8004636 <_nx_dhcp_start+0x76>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	441a      	add	r2, r3
 80045f2:	f641 5388 	movw	r3, #7560	; 0x1d88
 80045f6:	4413      	add	r3, r2
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d118      	bne.n	8004630 <_nx_dhcp_start+0x70>
        {

            /* Start DHCP on this interface.   */
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	441a      	add	r2, r3
 800460c:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8004610:	4413      	add	r3, r2
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f828 	bl	800466c <_nx_dhcp_interface_start>
 800461c:	60f8      	str	r0, [r7, #12]
             /* Note, not all interfaces are enabled to run, so
                status may not be successful. Skip to the next
                interface. */

             /* Check status.  */
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <_nx_dhcp_start+0x6a>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b93      	cmp	r3, #147	; 0x93
 8004628:	d102      	bne.n	8004630 <_nx_dhcp_start+0x70>
             {
                 interfaces_started++;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	3301      	adds	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3301      	adds	r3, #1
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0d3      	beq.n	80045e4 <_nx_dhcp_start+0x24>
             }
        }
    }

    /* Check if any interfaces started DHCP. */
    if (interfaces_started == 0) 
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <_nx_dhcp_start+0x94>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004648:	4413      	add	r3, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f00b f838 	bl	800f6c0 <_txe_mutex_put>

        /* Unable to start any interfaces. */
        return NX_DHCP_NO_INTERFACES_STARTED;
 8004650:	23a6      	movs	r3, #166	; 0xa6
 8004652:	e007      	b.n	8004664 <_nx_dhcp_start+0xa4>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	f641 5304 	movw	r3, #7428	; 0x1d04
 800465a:	4413      	add	r3, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f00b f82f 	bl	800f6c0 <_txe_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);  
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_nx_dhcp_interface_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_start(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]

UINT    i;
UINT    status;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]

    
    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004680:	4413      	add	r3, r2
 8004682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004686:	4618      	mov	r0, r3
 8004688:	f00a ffc0 	bl	800f60c <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	461a      	mov	r2, r3
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f001 fd80 	bl	800619a <_nx_dhcp_interface_record_find>
 800469a:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <_nx_dhcp_interface_start+0x48>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	f641 5304 	movw	r3, #7428	; 0x1d04
 80046a8:	4413      	add	r3, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f00b f808 	bl	800f6c0 <_txe_mutex_put>

        return(status);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	e0b4      	b.n	800481e <_nx_dhcp_interface_start+0x1b2>
    }

    /* Check if DHCP is already started.  */
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <_nx_dhcp_interface_start+0x62>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f641 5304 	movw	r3, #7428	; 0x1d04
 80046c2:	4413      	add	r3, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f00a fffb 	bl	800f6c0 <_txe_mutex_put>
        return(NX_DHCP_ALREADY_STARTED); 
 80046ca:	2393      	movs	r3, #147	; 0x93
 80046cc:	e0a7      	b.n	800481e <_nx_dhcp_interface_start+0x1b2>
    }
                                   
    /* Check if other interface are working.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e01c      	b.n	800470e <_nx_dhcp_interface_start+0xa2>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	441a      	add	r2, r3
 80046e2:	f641 5388 	movw	r3, #7560	; 0x1d88
 80046e6:	4413      	add	r3, r2
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <_nx_dhcp_interface_start+0x9c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	441a      	add	r2, r3
 80046fc:	f641 5389 	movw	r3, #7561	; 0x1d89
 8004700:	4413      	add	r3, r2
 8004702:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <_nx_dhcp_interface_start+0xaa>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0df      	beq.n	80046d4 <_nx_dhcp_interface_start+0x68>
 8004714:	e000      	b.n	8004718 <_nx_dhcp_interface_start+0xac>
        {

            /* Yes, other interface have started DHCP.  */
            break;
 8004716:	bf00      	nop
        }
    }

    /* Check if any interfaces have started DHCP.  */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d14b      	bne.n	80047b6 <_nx_dhcp_interface_start+0x14a>
    {

        /* Bind the UDP socket to the DHCP Client port.  */
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8004724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004728:	2144      	movs	r1, #68	; 0x44
 800472a:	4618      	mov	r0, r3
 800472c:	f006 fdca 	bl	800b2c4 <_nx_udp_socket_bind>
 8004730:	6138      	str	r0, [r7, #16]

        /* Check for error */
        if (status != NX_SUCCESS)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <_nx_dhcp_interface_start+0xde>
        {

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	f641 5304 	movw	r3, #7428	; 0x1d04
 800473e:	4413      	add	r3, r2
 8004740:	4618      	mov	r0, r3
 8004742:	f00a ffbd 	bl	800f6c0 <_txe_mutex_put>
            return(status);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	e069      	b.n	800481e <_nx_dhcp_interface_start+0x1b2>
        }

        /* Resume the DHCP processing thread.  */
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8004750:	4618      	mov	r0, r3
 8004752:	f00b f90d 	bl	800f970 <_txe_thread_resume>
 8004756:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d011      	beq.n	8004782 <_nx_dhcp_interface_start+0x116>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b19      	cmp	r3, #25
 8004762:	d00e      	beq.n	8004782 <_nx_dhcp_interface_start+0x116>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800476a:	4618      	mov	r0, r3
 800476c:	f007 f970 	bl	800ba50 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004776:	4413      	add	r3, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f00a ffa1 	bl	800f6c0 <_txe_mutex_put>
            return(status);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	e04d      	b.n	800481e <_nx_dhcp_interface_start+0x1b2>
        }

        /* Activate DHCP Timer.  */
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8004788:	4413      	add	r3, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f00b f90e 	bl	800f9ac <_txe_timer_activate>
 8004790:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if (status != NX_SUCCESS)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <_nx_dhcp_interface_start+0x14a>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800479e:	4618      	mov	r0, r3
 80047a0:	f007 f956 	bl	800ba50 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	f641 5304 	movw	r3, #7428	; 0x1d04
 80047aa:	4413      	add	r3, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f00a ff87 	bl	800f6c0 <_txe_mutex_put>
            return(status);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	e033      	b.n	800481e <_nx_dhcp_interface_start+0x1b2>
        }
    }

    /* Start DHCP service for this interface record.  */
    /* Start the DHCP protocol again by setting the state back to INIT. */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2202      	movs	r2, #2
 80047ba:	705a      	strb	r2, [r3, #1]
    /* The client begins in INIT state and forms a DHCPDISCOVER message.
       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
       RFC2131, Section4.4.1, Page36.  */

    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2264      	movs	r2, #100	; 0x64
 80047c0:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the application has specified a routine for DHCP state change notification.  */
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ce:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <_nx_dhcp_interface_start+0x17e>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047dc:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	7852      	ldrb	r2, [r2, #1]
 80047e4:	4611      	mov	r1, r2
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
    }

    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <_nx_dhcp_interface_start+0x1a2>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fe:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	69d1      	ldr	r1, [r2, #28]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	7852      	ldrb	r2, [r2, #1]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004814:	4413      	add	r3, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f00a ff52 	bl	800f6c0 <_txe_mutex_put>

    return NX_SUCCESS;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <_nx_dhcp_interface_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_enable(NX_DHCP *dhcp_ptr, UINT iface_index)   
{
 8004826:	b590      	push	{r4, r7, lr}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
UINT                      i;
ULONG                     client_physical_lsw, client_physical_msw;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	f641 5304 	movw	r3, #7428	; 0x1d04
 800483a:	4413      	add	r3, r2
 800483c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004840:	4618      	mov	r0, r3
 8004842:	f00a fee3 	bl	800f60c <_txe_mutex_get>

    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e034      	b.n	80048b6 <_nx_dhcp_interface_enable+0x90>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	441a      	add	r2, r3
 800485a:	f641 5388 	movw	r3, #7560	; 0x1d88
 800485e:	4413      	add	r3, r2
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d116      	bne.n	8004894 <_nx_dhcp_interface_enable+0x6e>
        {

            /* Check if the interface is already enabled. */
            if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	441a      	add	r2, r3
 8004874:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8004878:	4413      	add	r3, r2
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d116      	bne.n	80048b0 <_nx_dhcp_interface_enable+0x8a>
            {

                /* Release the DHCP mutex.  */
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004888:	4413      	add	r3, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f00a ff18 	bl	800f6c0 <_txe_mutex_put>
                 return(NX_DHCP_INTERFACE_ALREADY_ENABLED);
 8004890:	23a3      	movs	r3, #163	; 0xa3
 8004892:	e061      	b.n	8004958 <_nx_dhcp_interface_enable+0x132>
        }
        else
        {

            /* Yes, we found an available record.  */
            if (interface_record == NX_NULL)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <_nx_dhcp_interface_enable+0x8a>
                interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80048a0:	fb03 f202 	mul.w	r2, r3, r2
 80048a4:	f641 5388 	movw	r3, #7560	; 0x1d88
 80048a8:	4413      	add	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3301      	adds	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0c7      	beq.n	800484c <_nx_dhcp_interface_enable+0x26>
        }
    }

    /* Check if we found an valid DHCP interface record.  */
    if (interface_record == NX_NULL)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <_nx_dhcp_interface_enable+0xae>
    {

        /* No, release the mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	f641 5304 	movw	r3, #7428	; 0x1d04
 80048c8:	4413      	add	r3, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f00a fef8 	bl	800f6c0 <_txe_mutex_put>
        return(NX_DHCP_NO_RECORDS_AVAILABLE);
 80048d0:	23a7      	movs	r3, #167	; 0xa7
 80048d2:	e041      	b.n	8004958 <_nx_dhcp_interface_enable+0x132>
    }

    /* Set this record as valid.  */
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]

    /* Set interface index. */  
    interface_record -> nx_dhcp_interface_index = iface_index;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	61da      	str	r2, [r3, #28]

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2200      	movs	r2, #0
 80048e4:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2200      	movs	r2, #0
 80048ea:	615a      	str	r2, [r3, #20]

    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2200      	movs	r2, #0
 80048f0:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Get the client MAC address from the device interface. */
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	214c      	movs	r1, #76	; 0x4c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
    client_physical_lsw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	214c      	movs	r1, #76	; 0x4c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60bb      	str	r3, [r7, #8]

    /* Generate a 'unique' client transaction ID from the MAC address for each message to the server. */
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	ea82 0403 	eor.w	r4, r2, r3
 8004934:	f00b f952 	bl	800fbdc <rand>
 8004938:	4603      	mov	r3, r0
 800493a:	ea84 0203 	eor.w	r2, r4, r3
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	605a      	str	r2, [r3, #4]

    /* Clear the timeout.  */
    interface_record -> nx_dhcp_timeout = 0;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2200      	movs	r2, #0
 8004946:	621a      	str	r2, [r3, #32]

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	f641 5304 	movw	r3, #7428	; 0x1d04
 800494e:	4413      	add	r3, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f00a feb5 	bl	800f6c0 <_txe_mutex_put>
    return(NX_SUCCESS); 
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}

08004960 <_nx_dhcp_udp_receive_notify>:
/*                                            multiple client instances,  */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_udp_receive_notify(NX_UDP_SOCKET *socket_ptr)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

NX_DHCP *dhcp_ptr;

    dhcp_ptr = (NX_DHCP *)(socket_ptr -> nx_udp_socket_reserved_ptr);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	60fb      	str	r3, [r7, #12]

    /* Set the data received event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f641 5338 	movw	r3, #7480	; 0x1d38
 8004974:	4413      	add	r3, r2
 8004976:	2200      	movs	r2, #0
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f00a fd3c 	bl	800f3f8 <_txe_event_flags_set>
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_nx_dhcp_timeout_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_entry(ULONG dhcp)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

NX_DHCP     *dhcp_ptr;


    /* Setup DHCP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

    /* Set the data event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f641 5338 	movw	r3, #7480	; 0x1d38
 800499a:	4413      	add	r3, r2
 800499c:	2200      	movs	r2, #0
 800499e:	2102      	movs	r1, #2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f00a fd29 	bl	800f3f8 <_txe_event_flags_set>
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_nx_dhcp_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_thread_entry(ULONG dhcp_instance)
{
 80049ae:	b590      	push	{r4, r7, lr}
 80049b0:	b08f      	sub	sp, #60	; 0x3c
 80049b2:	af02      	add	r7, sp, #8
 80049b4:	6078      	str	r0, [r7, #4]
UINT                      status;
UINT                      iface_index;
UINT                      source_port;
ULONG                     source_ip_address;
UINT                      protocol;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]

    /* Setup the DHCP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp_instance)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Obtain the DHCP mutex before processing an.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80049be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c0:	f641 5304 	movw	r3, #7428	; 0x1d04
 80049c4:	4413      	add	r3, r2
 80049c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049ca:	4618      	mov	r0, r3
 80049cc:	f00a fe1e 	bl	800f60c <_txe_mutex_get>
    /* Enter the DHCP Client task loop.  */
    do
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80049d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d2:	f641 5304 	movw	r3, #7428	; 0x1d04
 80049d6:	4413      	add	r3, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f00a fe71 	bl	800f6c0 <_txe_mutex_put>

        /* Wait for a DHCP client activity.  */
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	f641 5038 	movw	r0, #7480	; 0x1d38
 80049e4:	4418      	add	r0, r3
 80049e6:	f107 0320 	add.w	r3, r7, #32
 80049ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049ee:	9200      	str	r2, [sp, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049f6:	f00a fca9 	bl	800f34c <_txe_event_flags_get>
                           TX_OR_CLEAR, &events, TX_WAIT_FOREVER);

        /* Obtain the DHCP mutex before processing an.  */
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80049fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fc:	f641 5304 	movw	r3, #7428	; 0x1d04
 8004a00:	4413      	add	r3, r2
 8004a02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a06:	4618      	mov	r0, r3
 8004a08:	f00a fe00 	bl	800f60c <_txe_mutex_get>

        /* Check for DHCP data received event.  */
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d03a      	beq.n	8004a8c <_nx_dhcp_thread_entry+0xde>
            /* Loop to receive DHCP message.  */
            while(1)
            {

                /* Check for an incoming DHCP packet with non blocking option. */
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8004a1c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004a20:	2200      	movs	r2, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f006 fe6c 	bl	800b700 <_nx_udp_socket_receive>
 8004a28:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check for packet receive errors. */
                if (status != NX_SUCCESS)
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d12c      	bne.n	8004a8a <_nx_dhcp_thread_entry+0xdc>
                {
                    break;
                }

                /* Find the source IP address, port, interface this packet is on. */
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 8004a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a32:	f107 0418 	add.w	r4, r7, #24
 8004a36:	f107 0210 	add.w	r2, r7, #16
 8004a3a:	f107 0114 	add.w	r1, r7, #20
 8004a3e:	f107 031c 	add.w	r3, r7, #28
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	4623      	mov	r3, r4
 8004a46:	f006 f9be 	bl	800adc6 <_nx_udp_packet_info_extract>
 8004a4a:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS) 
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <_nx_dhcp_thread_entry+0xae>
                {

                    nx_packet_release(packet_ptr); 
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	4618      	mov	r0, r3
 8004a56:	f005 ff11 	bl	800a87c <_nx_packet_release>
                    continue;
 8004a5a:	e015      	b.n	8004a88 <_nx_dhcp_thread_entry+0xda>
                }

                /* Find the interface record.  */
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f107 020c 	add.w	r2, r7, #12
 8004a62:	4619      	mov	r1, r3
 8004a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a66:	f001 fb98 	bl	800619a <_nx_dhcp_interface_record_find>
 8004a6a:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS)
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <_nx_dhcp_thread_entry+0xce>
                {

                    /* Release the original packet . */
                    nx_packet_release(packet_ptr);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	4618      	mov	r0, r3
 8004a76:	f005 ff01 	bl	800a87c <_nx_packet_release>
                    continue;
 8004a7a:	e005      	b.n	8004a88 <_nx_dhcp_thread_entry+0xda>
                }
                
                /* Process DHCP packet.  */
                _nx_dhcp_packet_process(dhcp_ptr, interface_record, packet_ptr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	4619      	mov	r1, r3
 8004a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a84:	f000 f80c 	bl	8004aa0 <_nx_dhcp_packet_process>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8004a88:	e7c5      	b.n	8004a16 <_nx_dhcp_thread_entry+0x68>
                    break;
 8004a8a:	bf00      	nop
            }
        }

        /* Timer event.  */
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d09c      	beq.n	80049d0 <_nx_dhcp_thread_entry+0x22>
        {
            _nx_dhcp_timeout_process(dhcp_ptr);
 8004a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a98:	f000 fa64 	bl	8004f64 <_nx_dhcp_timeout_process>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8004a9c:	e798      	b.n	80049d0 <_nx_dhcp_thread_entry+0x22>
	...

08004aa0 <_nx_dhcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_dhcp_packet_process(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, NX_PACKET *packet_ptr)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b094      	sub	sp, #80	; 0x50
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
#ifdef NX_DHCP_CLIENT_SEND_ARP_PROBE
ULONG       probing_delay;
#endif

    /* Set the IP pointer and interface index.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
    iface_index = interface_record -> nx_dhcp_interface_index;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2bf0      	cmp	r3, #240	; 0xf0
 8004abe:	d803      	bhi.n	8004ac8 <_nx_dhcp_packet_process+0x28>
    {

        /* Release the packet. */
        nx_packet_release(packet_ptr);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f005 fedb 	bl	800a87c <_nx_packet_release>

        /* Return.  */
        return;
 8004ac6:	e24a      	b.n	8004f5e <_nx_dhcp_packet_process+0x4be>
    }

    /* Copy the received packet (datagram) over to a packet from the DHCP Client pool and release
       the packet back to receive packet pool as soon as possible. */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 8004ace:	f107 0118 	add.w	r1, r7, #24
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	222c      	movs	r2, #44	; 0x2c
 8004ad6:	f005 fa6d 	bl	8009fb4 <_nx_packet_allocate>
 8004ada:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if (status != NX_SUCCESS)
 8004adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <_nx_dhcp_packet_process+0x4a>
    {

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f005 feca 	bl	800a87c <_nx_packet_release>

        /* Error allocating packet, return error status.  */
        return;
 8004ae8:	e239      	b.n	8004f5e <_nx_dhcp_packet_process+0x4be>
    }

    /* Verify the incoming packet does not exceed our DHCP Client packet payload. */
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d207      	bcs.n	8004b0e <_nx_dhcp_packet_process+0x6e>
    {

        /* Release the newly allocated packet . */
        nx_packet_release(new_packet_ptr);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f005 febb 	bl	800a87c <_nx_packet_release>
        
        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f005 feb8 	bl	800a87c <_nx_packet_release>

        return;
 8004b0c:	e227      	b.n	8004f5e <_nx_dhcp_packet_process+0x4be>
    }

    /* Initialize the offset to the beginning of the packet buffer. */
    offset = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	63bb      	str	r3, [r7, #56]	; 0x38
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b1a:	f107 0310 	add.w	r3, r7, #16
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	460b      	mov	r3, r1
 8004b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f005 fc5a 	bl	800a3de <_nx_packet_data_extract_offset>
 8004b2a:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <_nx_dhcp_packet_process+0x98>
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <_nx_dhcp_packet_process+0xa8>
    {

        /* Release the allocated packet we'll never send. */
        nx_packet_release(new_packet_ptr);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f005 fe9e 	bl	800a87c <_nx_packet_release>

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f005 fe9b 	bl	800a87c <_nx_packet_release>

        /* Error extracting packet buffer, return error status.  */
        return;
 8004b46:	e20a      	b.n	8004f5e <_nx_dhcp_packet_process+0x4be>
    }

    /* Update the new packet with the bytes copied.  For chained packets, this will reflect the total
       'datagram' length. */
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24


    /* Now we can release the original packet. */
    nx_packet_release(packet_ptr);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f005 fe94 	bl	800a87c <_nx_packet_release>

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8004b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b58:	214c      	movs	r1, #76	; 0x4c
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8004b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6c:	214c      	movs	r1, #76	; 0x4c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Set work_ptr.  */
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	331c      	adds	r3, #28
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the target MAC address in the DHCP message.  */
    packet_client_mac_msw = (((ULONG)work_ptr[0]) << 8) | ((ULONG)work_ptr[1]);
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b8c:	3201      	adds	r2, #1
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	3302      	adds	r3, #2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	061a      	lsls	r2, r3, #24
                            (((ULONG)work_ptr[3]) << 16) |
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	3303      	adds	r3, #3
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	041b      	lsls	r3, r3, #16
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8004ba4:	431a      	orrs	r2, r3
                            (((ULONG)work_ptr[4]) << 8) |
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	3304      	adds	r3, #4
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	021b      	lsls	r3, r3, #8
                            (((ULONG)work_ptr[3]) << 16) |
 8004bae:	4313      	orrs	r3, r2
                            ((ULONG)work_ptr[5]);
 8004bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb2:	3205      	adds	r2, #5
 8004bb4:	7812      	ldrb	r2, [r2, #0]
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Determine if the  MAC address matches ours.  */
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 8004bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d103      	bne.n	8004bca <_nx_dhcp_packet_process+0x12a>
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d004      	beq.n	8004bd4 <_nx_dhcp_packet_process+0x134>
    {

        /* Release the allocated packet. */
        nx_packet_release(new_packet_ptr);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f005 fe55 	bl	800a87c <_nx_packet_release>
        return;
 8004bd2:	e1c4      	b.n	8004f5e <_nx_dhcp_packet_process+0x4be>
    }

    /* Check if XIDs match.  */
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2104      	movs	r1, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 fa6d 	bl	80060bc <_nx_dhcp_get_data>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d004      	beq.n	8004bf6 <_nx_dhcp_packet_process+0x156>
    {

        /* Release the original packet . */
        nx_packet_release(new_packet_ptr);
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f005 fe44 	bl	800a87c <_nx_packet_release>

        /* Error with XID data, return error status.  */
        return;
 8004bf4:	e1b3      	b.n	8004f5e <_nx_dhcp_packet_process+0x4be>
    }

    /* Save the original state for the state change callback; after this point we will likely change it. */                          
    original_state  = interface_record -> nx_dhcp_state;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	623b      	str	r3, [r7, #32]

    /* The action depends on the current state of the dhcp client. */
    switch (interface_record -> nx_dhcp_state)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	3b03      	subs	r3, #3
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	f200 816c 	bhi.w	8004ee0 <_nx_dhcp_packet_process+0x440>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <_nx_dhcp_packet_process+0x170>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c25 	.word	0x08004c25
 8004c14:	08004cb1 	.word	0x08004cb1
 8004c18:	08004ee1 	.word	0x08004ee1
 8004c1c:	08004d79 	.word	0x08004d79
 8004c20:	08004e2f 	.word	0x08004e2f

        case NX_DHCP_STATE_SELECTING:
        {
    
            /* Set up a buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	61fb      	str	r3, [r7, #28]

            /* Get what type of DHCP message it is. */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f107 0214 	add.w	r2, r7, #20
 8004c32:	2135      	movs	r1, #53	; 0x35
 8004c34:	69f8      	ldr	r0, [r7, #28]
 8004c36:	f001 f892 	bl	8005d5e <_nx_dhcp_get_option_value>
 8004c3a:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Determine if it is an Offer.  */        
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 8004c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f040 8150 	bne.w	8004ee4 <_nx_dhcp_packet_process+0x444>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	f040 814c 	bne.w	8004ee4 <_nx_dhcp_packet_process+0x444>
            {

                /* Yes, a valid Offer is received!  */

                /* Increment the number of offers received.  */
                interface_record -> nx_dhcp_offers_received++;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

                /* Update the DHCP Client interface parameters (IP address, server IP, lease, renewal and rebind times */
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 ff5b 	bl	8005b1e <_nx_dhcp_extract_information>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 813c 	bne.w	8004ee8 <_nx_dhcp_packet_process+0x448>
                    break;

                /* Send the DHCP Request to accept the offer.  */
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8004c70:	2203      	movs	r2, #3
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fb29 	bl	80052cc <_nx_dhcp_send_request_internal>

                /* Reset the initial timeout to NX_DHCP_MIN_RETRANS_TIMEOUT seconds  */
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	621a      	str	r2, [r3, #32]

                /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f968 	bl	8005f64 <_nx_dhcp_add_randomize>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	621a      	str	r2, [r3, #32]

                /* Check if the timeout is zero.  */
                if (interface_record -> nx_dhcp_timeout == 0)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <_nx_dhcp_packet_process+0x208>
                    interface_record -> nx_dhcp_timeout = 1;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	621a      	str	r2, [r3, #32]

                /* Update the state to Requesting state.  */
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2204      	movs	r2, #4
 8004cac:	705a      	strb	r2, [r3, #1]
           }

           /* Let the timeout processing handle retransmissions. We're done here */
           break;
 8004cae:	e119      	b.n	8004ee4 <_nx_dhcp_packet_process+0x444>
            /* Also initialize status to success since we won't make the get option call. */               
            status = NX_SUCCESS;
#endif

            /* Setup buffer pointer.  */
            buffer = new_packet_ptr -> nx_packet_prepend_ptr;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	61fb      	str	r3, [r7, #28]

#ifndef NX_DHCP_ENABLE_BOOTP
            /* There is a valid DHCP response, see if it is an ACK.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f107 0214 	add.w	r2, r7, #20
 8004cbe:	2135      	movs	r1, #53	; 0x35
 8004cc0:	69f8      	ldr	r0, [r7, #28]
 8004cc2:	f001 f84c 	bl	8005d5e <_nx_dhcp_get_option_value>
 8004cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
            /* Proceed to processing the server response?   */
            if (status == NX_SUCCESS)
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f040 810e 	bne.w	8004eec <_nx_dhcp_packet_process+0x44c>
            {

                /* Yes, check and see if it is an ACK back to our previous request.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d12d      	bne.n	8004d32 <_nx_dhcp_packet_process+0x292>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Either we got an ACK or we are using BOOTP.  */

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 ff16 	bl	8005b1e <_nx_dhcp_extract_information>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 80fb 	bne.w	8004ef0 <_nx_dhcp_packet_process+0x450>
                    /* Setup the handler to indicate the we want collision notification.  */
                    ip_ptr -> nx_ip_interface[iface_index].nx_interface_ip_conflict_notify_handler = _nx_dhcp_ip_conflict;

#else    /* NX_DHCP_CLIENT_SEND_ARP_PROBE not defined: */

                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d06:	f003 ffeb 	bl	8008ce0 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <_nx_dhcp_packet_process+0x282>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f003 fe59 	bl	80089d4 <_nx_ip_gateway_address_set>
                    }

                    /* No ARP probe performed. OK to change to the Bound state.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2205      	movs	r2, #5
 8004d26:	705a      	strb	r2, [r3, #1]
#ifdef NX_DHCP_ENABLE_BOOTP
                    /* BOOTP does not use timeouts.  For the life of this DHCP Client application, keep the same IP address. */
                    interface_record -> nx_dhcp_timeout = NX_WAIT_FOREVER; 
#else
                    /* Set the renewal time received from the server.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	621a      	str	r2, [r3, #32]
#endif /* NX_DHCP_ENABLE_BOOTP  */

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE*/

                    break;
 8004d30:	e0e7      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
                }
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	f040 80d9 	bne.w	8004eec <_nx_dhcp_packet_process+0x44c>
                {
                                                 
                    /* Increment the number of NACKs received.  */
                    interface_record -> nx_dhcp_nacks_received++;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

                    /* Reinitialize DHCP.  */
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff fb76 	bl	8004440 <_nx_dhcp_interface_reinitialize>

                    /* Restart DHCP service for this interface record.  */

                    /* Start the DHCP protocol again by setting the state back to INIT. */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2202      	movs	r2, #2
 8004d58:	705a      	strb	r2, [r3, #1]
                    /* The client begins in INIT state and forms a DHCPDISCOVER message.
                       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                       RFC2131, Section4.4.1, Page36.  */

                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2264      	movs	r2, #100	; 0x64
 8004d5e:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Check if the timeout is less than 1 second.  */
                    if (interface_record -> nx_dhcp_timeout < NX_IP_PERIODIC_RATE)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	2b63      	cmp	r3, #99	; 0x63
 8004d6c:	f200 80be 	bhi.w	8004eec <_nx_dhcp_packet_process+0x44c>
                        interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2264      	movs	r2, #100	; 0x64
 8004d74:	621a      	str	r2, [r3, #32]
                }
            }
            break;
 8004d76:	e0b9      	b.n	8004eec <_nx_dhcp_packet_process+0x44c>

        case NX_DHCP_STATE_RENEWING:
        {

            /* Setup the buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	61fb      	str	r3, [r7, #28]

            /* Check the server response if it accepts are renewal.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f107 0214 	add.w	r2, r7, #20
 8004d86:	2135      	movs	r1, #53	; 0x35
 8004d88:	69f8      	ldr	r0, [r7, #28]
 8004d8a:	f000 ffe8 	bl	8005d5e <_nx_dhcp_get_option_value>
 8004d8e:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Was the option retrieved?  */
            if (status == NX_SUCCESS)
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 80ae 	bne.w	8004ef4 <_nx_dhcp_packet_process+0x454>
            {

                /* Yes, Check for an ACK.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d12d      	bne.n	8004dfa <_nx_dhcp_packet_process+0x35a>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 feb2 	bl	8005b1e <_nx_dhcp_extract_information>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 809b 	bne.w	8004ef8 <_nx_dhcp_packet_process+0x458>
                        break;
                    
                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dcc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004dce:	f003 ff87 	bl	8008ce0 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <_nx_dhcp_packet_process+0x34a>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f003 fdf5 	bl	80089d4 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state*/
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	621a      	str	r2, [r3, #32]

                    /* Change the state back to bound.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2205      	movs	r2, #5
 8004df6:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8004df8:	e07c      	b.n	8004ef4 <_nx_dhcp_packet_process+0x454>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b06      	cmp	r3, #6
 8004dfe:	d179      	bne.n	8004ef4 <_nx_dhcp_packet_process+0x454>
                    interface_record -> nx_dhcp_nacks_received++;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4619      	mov	r1, r3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff fb13 	bl	8004440 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2264      	movs	r2, #100	; 0x64
 8004e24:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8004e2c:	e062      	b.n	8004ef4 <_nx_dhcp_packet_process+0x454>

        case NX_DHCP_STATE_REBINDING:
        {

            /* Setup buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	61fb      	str	r3, [r7, #28]

            /* There is a valid DHCP response, pickup the type of response.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f107 0214 	add.w	r2, r7, #20
 8004e3c:	2135      	movs	r1, #53	; 0x35
 8004e3e:	69f8      	ldr	r0, [r7, #28]
 8004e40:	f000 ff8d 	bl	8005d5e <_nx_dhcp_get_option_value>
 8004e44:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Valid response?  */
            if (status == NX_SUCCESS)
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d157      	bne.n	8004efc <_nx_dhcp_packet_process+0x45c>
            {

                /* Is it an ACK response?  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d12c      	bne.n	8004eac <_nx_dhcp_packet_process+0x40c>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fe58 	bl	8005b1e <_nx_dhcp_extract_information>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d145      	bne.n	8004f00 <_nx_dhcp_packet_process+0x460>
                        break;

                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004e80:	f003 ff2e 	bl	8008ce0 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <_nx_dhcp_packet_process+0x3fc>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f003 fd9c 	bl	80089d4 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	621a      	str	r2, [r3, #32]

                    /* Change to bound state.  */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8004eaa:	e027      	b.n	8004efc <_nx_dhcp_packet_process+0x45c>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d124      	bne.n	8004efc <_nx_dhcp_packet_process+0x45c>
                    interface_record -> nx_dhcp_nacks_received++;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff faba 	bl	8004440 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2264      	movs	r2, #100	; 0x64
 8004ed6:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2200      	movs	r2, #0
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8004ede:	e00d      	b.n	8004efc <_nx_dhcp_packet_process+0x45c>
        }

        default:
            break;
 8004ee0:	bf00      	nop
 8004ee2:	e00e      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
           break;
 8004ee4:	bf00      	nop
 8004ee6:	e00c      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
                    break;
 8004ee8:	bf00      	nop
 8004eea:	e00a      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
            break;
 8004eec:	bf00      	nop
 8004eee:	e008      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
                        break;
 8004ef0:	bf00      	nop
 8004ef2:	e006      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
            break;
 8004ef4:	bf00      	nop
 8004ef6:	e004      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
                        break;
 8004ef8:	bf00      	nop
 8004efa:	e002      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
            break;
 8004efc:	bf00      	nop
 8004efe:	e000      	b.n	8004f02 <_nx_dhcp_packet_process+0x462>
                        break;
 8004f00:	bf00      	nop

    } /* End of switch case */

    /* Release the packet.  */
    nx_packet_release(new_packet_ptr);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f005 fcb9 	bl	800a87c <_nx_packet_release>

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <_nx_dhcp_packet_process+0x4bc>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1c:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <_nx_dhcp_packet_process+0x498>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2a:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	7852      	ldrb	r2, [r2, #1]
 8004f32:	4611      	mov	r1, r2
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3e:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <_nx_dhcp_packet_process+0x4bc>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4c:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	69d1      	ldr	r1, [r2, #28]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	7852      	ldrb	r2, [r2, #1]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	4798      	blx	r3
        }
    }

    return;
 8004f5c:	bf00      	nop
}
 8004f5e:	3748      	adds	r7, #72	; 0x48
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_nx_dhcp_timeout_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_process(NX_DHCP *dhcp_ptr)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

UINT            i;
UINT            original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE  */

    /* Update the timeout on both interfaces. Check what needs to be done
       if a timeout expires, based on Client state. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e1a0      	b.n	80052b8 <_nx_dhcp_timeout_process+0x354>
    {

         /* Check if the DHCP Client is active on this interface. */      
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	f641 5388 	movw	r3, #7560	; 0x1d88
 8004f88:	4413      	add	r3, r2
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 818f 	beq.w	80052b0 <_nx_dhcp_timeout_process+0x34c>
             continue;

         /* Set the interface reocrd pointer.  */
         interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004f98:	fb03 f202 	mul.w	r2, r3, r2
 8004f9c:	f641 5388 	movw	r3, #7560	; 0x1d88
 8004fa0:	4413      	add	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

         /* Update the count.  */
         interface_record -> nx_dhcp_seconds ++;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	609a      	str	r2, [r3, #8]

        /* Check the timer.  */
        if (interface_record -> nx_dhcp_timeout != 0)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 817b 	beq.w	80052b2 <_nx_dhcp_timeout_process+0x34e>
        {

            /* Apply the timer interval to the current DHCP Client timeout.  */
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	2b64      	cmp	r3, #100	; 0x64
 8004fc2:	d906      	bls.n	8004fd2 <_nx_dhcp_timeout_process+0x6e>
            {

                /* Update the timeout.  */
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	621a      	str	r2, [r3, #32]
 8004fd0:	e16f      	b.n	80052b2 <_nx_dhcp_timeout_process+0x34e>
            }
            else
            {

                /* The DHCP Client timeout has expired. */
                interface_record -> nx_dhcp_timeout = 0; 
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	621a      	str	r2, [r3, #32]

                /* Save the current state for state change callback. */
                original_state = interface_record -> nx_dhcp_state;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	60fb      	str	r3, [r7, #12]

                /* Process according to what state the Client is in. */
                switch (interface_record -> nx_dhcp_state)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	3b02      	subs	r3, #2
 8004fe4:	2b07      	cmp	r3, #7
 8004fe6:	f200 8132 	bhi.w	800524e <_nx_dhcp_timeout_process+0x2ea>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <_nx_dhcp_timeout_process+0x8c>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005095 	.word	0x08005095
 8004ff8:	080050d9 	.word	0x080050d9
 8004ffc:	0800511d 	.word	0x0800511d
 8005000:	0800515b 	.word	0x0800515b
 8005004:	080051e1 	.word	0x080051e1
 8005008:	0800524f 	.word	0x0800524f
 800500c:	0800524f 	.word	0x0800524f

                    case NX_DHCP_STATE_INIT:
                    {

                        /* Reset the seconds field for starting the DHCP address acquistiion. */
                        interface_record -> nx_dhcp_seconds = 0;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2200      	movs	r2, #0
 8005014:	609a      	str	r2, [r3, #8]
                        /* Initial state when there is no address.  Send a DHCPDISCOVER message
                           to find a DHCP server and switch to the SELECTING state.
                           Initial timeout is NX_DHCP_MIN_RETRANS_TIMEOUT seconds. */
#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Only if the DHCP Client is requesting an IP address and is configured to skip the Discovery message. */
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00c      	beq.n	8005038 <_nx_dhcp_timeout_process+0xd4>
                            (interface_record -> nx_dhcp_skip_discovery))
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <_nx_dhcp_timeout_process+0xd4>
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005026:	2203      	movs	r2, #3
 8005028:	6939      	ldr	r1, [r7, #16]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f94e 	bl	80052cc <_nx_dhcp_send_request_internal>

                            /* And change to the Requesting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2204      	movs	r2, #4
 8005034:	705a      	strb	r2, [r3, #1]
 8005036:	e007      	b.n	8005048 <_nx_dhcp_timeout_process+0xe4>
                        }
                        else
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8005038:	2201      	movs	r2, #1
 800503a:	6939      	ldr	r1, [r7, #16]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f945 	bl	80052cc <_nx_dhcp_send_request_internal>

                            /* And change to the Selecting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2203      	movs	r2, #3
 8005046:	705a      	strb	r2, [r3, #1]
                        /* And change to the Requesting state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
#endif

                        /* Check if the retransmission interval is zero.  */
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <_nx_dhcp_timeout_process+0xf6>
                        {

                            /* Set the interval to min retransmission timeout.  */
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
 8005058:	e007      	b.n	800506a <_nx_dhcp_timeout_process+0x106>
                        }
                        else
                        {

                            /* Record the retransmission interval for next retransmission.  */
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ffae 	bl	8005fc0 <_nx_dhcp_update_timeout>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
                        }

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 ff74 	bl	8005f64 <_nx_dhcp_add_randomize>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 80e3 	bne.w	8005252 <_nx_dhcp_timeout_process+0x2ee>
                            interface_record -> nx_dhcp_timeout = 1;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2201      	movs	r2, #1
 8005090:	621a      	str	r2, [r3, #32]

                        break;
 8005092:	e0de      	b.n	8005252 <_nx_dhcp_timeout_process+0x2ee>
                    case NX_DHCP_STATE_SELECTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Retransmit the Discover message.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8005094:	2201      	movs	r2, #1
 8005096:	6939      	ldr	r1, [r7, #16]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f917 	bl	80052cc <_nx_dhcp_send_request_internal>
                        /* Retransmit the BOOTP Request message.  */ 
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif

                        /* Update the retransmision interval.   */
                        interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 ff8c 	bl	8005fc0 <_nx_dhcp_update_timeout>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 ff52 	bl	8005f64 <_nx_dhcp_add_randomize>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 80c3 	bne.w	8005256 <_nx_dhcp_timeout_process+0x2f2>
                            interface_record -> nx_dhcp_timeout = 1;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2201      	movs	r2, #1
 80050d4:	621a      	str	r2, [r3, #32]

                        break;
 80050d6:	e0be      	b.n	8005256 <_nx_dhcp_timeout_process+0x2f2>
                    case NX_DHCP_STATE_REQUESTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Send a DHCP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80050d8:	2203      	movs	r2, #3
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8f5 	bl	80052cc <_nx_dhcp_send_request_internal>
                        /* Send a BOOTP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif
                                                
                        /* Update the retransmision interval.   */
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 ff6a 	bl	8005fc0 <_nx_dhcp_update_timeout>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Reset the timeout for next retransmision. */
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 ff30 	bl	8005f64 <_nx_dhcp_add_randomize>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 80a3 	bne.w	800525a <_nx_dhcp_timeout_process+0x2f6>
                            interface_record -> nx_dhcp_timeout = 1;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2201      	movs	r2, #1
 8005118:	621a      	str	r2, [r3, #32]

                        break;
 800511a:	e09e      	b.n	800525a <_nx_dhcp_timeout_process+0x2f6>

                    case NX_DHCP_STATE_BOUND:
                    {

                        /* Reset the seconds field for starting the DHCP request process. */
                        interface_record -> nx_dhcp_seconds = 0;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]

                        /* The lease has timed out. Time to renew.  */

                        /* And change to the Renewing state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2206      	movs	r2, #6
 8005126:	705a      	strb	r2, [r3, #1]

                        /* Send the renewal request.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005128:	2203      	movs	r2, #3
 800512a:	6939      	ldr	r1, [r7, #16]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f8cd 	bl	80052cc <_nx_dhcp_send_request_internal>

                        /* Set the time remaining based on RFC 2131 when T1 expires. */
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	1ad2      	subs	r2, r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	4618      	mov	r0, r3
 8005146:	f000 ff52 	bl	8005fee <_nx_dhcp_update_renewal_timeout>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	621a      	str	r2, [r3, #32]

                        /* Record the retransmission interval.  */
                        interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24

                        break;
 8005158:	e080      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>

                    case NX_DHCP_STATE_RENEWING:
                    {

                        /* Check if we have reached the end of the renewal time.  */
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	429a      	cmp	r2, r3
 8005164:	d307      	bcc.n	8005176 <_nx_dhcp_timeout_process+0x212>
                        {
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
 8005174:	e002      	b.n	800517c <_nx_dhcp_timeout_process+0x218>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_renewal_remain_time = 0;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2200      	movs	r2, #0
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	4618      	mov	r0, r3
 8005182:	f000 ff34 	bl	8005fee <_nx_dhcp_update_renewal_timeout>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11b      	bne.n	80051cc <_nx_dhcp_timeout_process+0x268>
                        {

                            /* And change to the Rebinding state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2207      	movs	r2, #7
 8005198:	705a      	strb	r2, [r3, #1]

                            /* Send the rebind request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800519a:	2203      	movs	r2, #3
 800519c:	6939      	ldr	r1, [r7, #16]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f894 	bl	80052cc <_nx_dhcp_send_request_internal>

                            /* Calculate the rebind time based on the RFC 2131. */
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ac:	1ad2      	subs	r2, r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	63da      	str	r2, [r3, #60]	; 0x3c
                                                                                        
                            /* Calculate the timeout for the response.  */
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff19 	bl	8005fee <_nx_dhcp_update_renewal_timeout>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6a1a      	ldr	r2, [r3, #32]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }

                        break;
 80051ca:	e047      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80051cc:	2203      	movs	r2, #3
 80051ce:	6939      	ldr	r1, [r7, #16]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f87b 	bl	80052cc <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 80051de:	e03d      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>
                    {

                        /* No response yet, the response must have timed out, 
                            update the timeout and check if we have reached the 
                            end of the rebinding time.  */
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d307      	bcc.n	80051fc <_nx_dhcp_timeout_process+0x298>
                        {
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1ad2      	subs	r2, r2, r3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80051fa:	e002      	b.n	8005202 <_nx_dhcp_timeout_process+0x29e>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_rebind_remain_time = 0;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2200      	movs	r2, #0
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fef1 	bl	8005fee <_nx_dhcp_update_renewal_timeout>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <_nx_dhcp_timeout_process+0x2d6>
                        {

                            /* Timeout. Restart DHCP service for this interface record.  */

                            /* Reinitialize DHCP.  */
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff f90d 	bl	8004440 <_nx_dhcp_interface_reinitialize>

                            /* Start the DHCP protocol again by setting the state back to INIT. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2202      	movs	r2, #2
 800522a:	705a      	strb	r2, [r3, #1]
                            /* The client begins in INIT state and forms a DHCPDISCOVER message.
                               The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                               RFC2131, Section4.4.1, Page36.  */

                            /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2264      	movs	r2, #100	; 0x64
 8005230:	621a      	str	r2, [r3, #32]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2200      	movs	r2, #0
 8005236:	625a      	str	r2, [r3, #36]	; 0x24
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }
                        break;
 8005238:	e010      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800523a:	2203      	movs	r2, #3
 800523c:	6939      	ldr	r1, [r7, #16]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f844 	bl	80052cc <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	6a1a      	ldr	r2, [r3, #32]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 800524c:	e006      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>
                    }

                    default:
                    {

                        break;
 800524e:	bf00      	nop
 8005250:	e004      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <_nx_dhcp_timeout_process+0x2f8>
                        break;
 800525a:	bf00      	nop
                    }
                }

                /* Check if the state is changed.  */
                if (original_state != interface_record -> nx_dhcp_state)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	461a      	mov	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4293      	cmp	r3, r2
 8005266:	d024      	beq.n	80052b2 <_nx_dhcp_timeout_process+0x34e>
                {

                    /* Determine if the application has specified a routine for DHCP state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526e:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <_nx_dhcp_timeout_process+0x326>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527c:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	7852      	ldrb	r2, [r2, #1]
 8005284:	4611      	mov	r1, r2
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
                    }

                    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <_nx_dhcp_timeout_process+0x34e>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529e:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	69d1      	ldr	r1, [r2, #28]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	7852      	ldrb	r2, [r2, #1]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
 80052ae:	e000      	b.n	80052b2 <_nx_dhcp_timeout_process+0x34e>
             continue;
 80052b0:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	3301      	adds	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f43f ae5b 	beq.w	8004f76 <_nx_dhcp_timeout_process+0x12>

            } /* End of switch statement. */ 
        }

    } /* Try the next interface record.  */ 
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop

080052cc <_nx_dhcp_send_request_internal>:
/*                                            option in parameter request,*/
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b093      	sub	sp, #76	; 0x4c
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
ULONG           targetIP;
UINT            status;
ULONG           dhcp_client_mac_msw;
ULONG           dhcp_client_mac_lsw;
UINT            iface_index;
UINT            index = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
UINT            user_option_length;
UINT            name_length;


    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 80052e8:	f107 0120 	add.w	r1, r7, #32
 80052ec:	2300      	movs	r3, #0
 80052ee:	222c      	movs	r2, #44	; 0x2c
 80052f0:	f004 fe60 	bl	8009fb4 <_nx_packet_allocate>
 80052f4:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <_nx_dhcp_send_request_internal+0x42>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

        /* Return status.  */
        return(status);
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	e29a      	b.n	8005844 <_nx_dhcp_send_request_internal+0x578>
    }

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	214c      	movs	r1, #76	; 0x4c
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	633b      	str	r3, [r7, #48]	; 0x30
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	214c      	movs	r1, #76	; 0x4c
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	4413      	add	r3, r2
 8005332:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Setup the buffer pointer.  */
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Clear the buffer out... just in case.  */
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8005340:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005344:	2100      	movs	r1, #0
 8005346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005348:	f00a fd8b 	bl	800fe62 <memset>
    
    /* Setup the standard BootP fields.  */
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HTYPE] =     NX_BOOTP_TYPE_ETHERNET;     
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	3301      	adds	r3, #1
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HLEN] =      NX_BOOTP_HLEN_ETHERNET;
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	3302      	adds	r3, #2
 800535e:	2206      	movs	r2, #6
 8005360:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HOPS] =      0;
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	3303      	adds	r3, #3
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	332c      	adds	r3, #44	; 0x2c
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	336c      	adds	r3, #108	; 0x6c
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]

    /* Setup the 'Xid' field.  */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	1d18      	adds	r0, r3, #4
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	461a      	mov	r2, r3
 8005384:	2104      	movs	r1, #4
 8005386:	f000 feb5 	bl	80060f4 <_nx_dhcp_store_data>

    /* Set the 'secs' field according to RFC2131, Secion4.4.1, Page37, Table5. */ 
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d002      	beq.n	8005396 <_nx_dhcp_send_request_internal+0xca>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b07      	cmp	r3, #7
 8005394:	d107      	bne.n	80053a6 <_nx_dhcp_send_request_internal+0xda>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, 0);
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	3308      	adds	r3, #8
 800539a:	2200      	movs	r2, #0
 800539c:	2102      	movs	r1, #2
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fea8 	bl	80060f4 <_nx_dhcp_store_data>
 80053a4:	e008      	b.n	80053b8 <_nx_dhcp_send_request_internal+0xec>
    }
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	f103 0008 	add.w	r0, r3, #8
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	461a      	mov	r2, r3
 80053b2:	2102      	movs	r1, #2
 80053b4:	f000 fe9e 	bl	80060f4 <_nx_dhcp_store_data>
    }

    /* Set the broadcast flag according to RFC2131, Secion4.4.1, Page38, Table5.  */

    /* Set the broadcast flag to 0 for DHCP Decline and DHCP Release.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d002      	beq.n	80053c4 <_nx_dhcp_send_request_internal+0xf8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d107      	bne.n	80053d4 <_nx_dhcp_send_request_internal+0x108>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	330a      	adds	r3, #10
 80053c8:	2200      	movs	r2, #0
 80053ca:	2101      	movs	r1, #1
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fe91 	bl	80060f4 <_nx_dhcp_store_data>
 80053d2:	e012      	b.n	80053fa <_nx_dhcp_send_request_internal+0x12e>
    }

    /* Set the 'broadcast' flag according to user requirement for DHCP Discover, DHCP Request and DHCP Inform.  */
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <_nx_dhcp_send_request_internal+0x120>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	330a      	adds	r3, #10
 80053e0:	2200      	movs	r2, #0
 80053e2:	2101      	movs	r1, #1
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fe85 	bl	80060f4 <_nx_dhcp_store_data>
 80053ea:	e006      	b.n	80053fa <_nx_dhcp_send_request_internal+0x12e>
    }
    else
    {

        /* Request the response be sent broadcast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_BROADCAST);
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	330a      	adds	r3, #10
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	2101      	movs	r1, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fe7d 	bl	80060f4 <_nx_dhcp_store_data>
    }

    /* RFC 2131 4.4.1: Do not set the Client IP ("ciaddr" field) address...*/
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d007      	beq.n	8005410 <_nx_dhcp_send_request_internal+0x144>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, NX_BOOTP_NO_ADDRESS);
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	330c      	adds	r3, #12
 8005404:	2200      	movs	r2, #0
 8005406:	2104      	movs	r1, #4
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fe73 	bl	80060f4 <_nx_dhcp_store_data>
 800540e:	e008      	b.n	8005422 <_nx_dhcp_send_request_internal+0x156>
    }
    /* ...unless this is an INFORM REQUEST message. */
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	f103 000c 	add.w	r0, r3, #12
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	461a      	mov	r2, r3
 800541c:	2104      	movs	r1, #4
 800541e:	f000 fe69 	bl	80060f4 <_nx_dhcp_store_data>
    }

    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_YOUR_IP, 4, NX_BOOTP_NO_ADDRESS);   
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	3310      	adds	r3, #16
 8005426:	2200      	movs	r2, #0
 8005428:	2104      	movs	r1, #4
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fe62 	bl	80060f4 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SERVER_IP, 4, NX_BOOTP_NO_ADDRESS); 
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	3314      	adds	r3, #20
 8005434:	2200      	movs	r2, #0
 8005436:	2104      	movs	r1, #4
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fe5b 	bl	80060f4 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_GATEWAY_IP, 4, NX_BOOTP_NO_ADDRESS);
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	3318      	adds	r3, #24
 8005442:	2200      	movs	r2, #0
 8005444:	2104      	movs	r1, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fe54 	bl	80060f4 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW, 2, dhcp_client_mac_msw);
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	331c      	adds	r3, #28
 8005450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005452:	2102      	movs	r1, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fe4d 	bl	80060f4 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW + 2, 4, dhcp_client_mac_lsw);
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	331e      	adds	r3, #30
 800545e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005460:	2104      	movs	r1, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fe46 	bl	80060f4 <_nx_dhcp_store_data>

#ifndef NX_DHCP_ENABLE_BOOTP        
    /* Update the index.  */
    index = NX_BOOTP_OFFSET_OPTIONS; 
 8005468:	23f0      	movs	r3, #240	; 0xf0
 800546a:	61fb      	str	r3, [r7, #28]

    /*  A BOOTP Client should not request DHCP option data. */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_VENDOR, 4, NX_BOOTP_MAGIC_COOKIE);
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	33ec      	adds	r3, #236	; 0xec
 8005470:	4aa5      	ldr	r2, [pc, #660]	; (8005708 <_nx_dhcp_send_request_internal+0x43c>)
 8005472:	2104      	movs	r1, #4
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fe3d 	bl	80060f4 <_nx_dhcp_store_data>

    /* Add the actual DHCP request.  */
    _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, NX_DHCP_OPTION_DHCP_TYPE_SIZE, dhcp_message_type, &index);
 800547a:	f107 031c 	add.w	r3, r7, #28
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	2135      	movs	r1, #53	; 0x35
 8005486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005488:	f000 fcab 	bl	8005de2 <_nx_dhcp_add_option_value>
#endif

    /* Determine if any additional options need to be added relative to the DHCP message type.
       RFC 2131, Table 5: Fields and options used by DHCP Clients.  */
    switch (dhcp_message_type)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3b01      	subs	r3, #1
 8005490:	2b07      	cmp	r3, #7
 8005492:	f200 8155 	bhi.w	8005740 <_nx_dhcp_send_request_internal+0x474>
 8005496:	a201      	add	r2, pc, #4	; (adr r2, 800549c <_nx_dhcp_send_request_internal+0x1d0>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054bd 	.word	0x080054bd
 80054a0:	08005741 	.word	0x08005741
 80054a4:	08005557 	.word	0x08005557
 80054a8:	08005665 	.word	0x08005665
 80054ac:	08005741 	.word	0x08005741
 80054b0:	08005741 	.word	0x08005741
 80054b4:	080056a5 	.word	0x080056a5
 80054b8:	080056dd 	.word	0x080056dd

        case NX_DHCP_TYPE_DHCPDISCOVER:


            /* Determine if we have a valid IP address.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00f      	beq.n	80054e4 <_nx_dhcp_send_request_internal+0x218>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054cc:	d00a      	beq.n	80054e4 <_nx_dhcp_send_request_internal+0x218>
            {

                /* Add a IP request option if we have a valid IP address */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	f107 031c 	add.w	r3, r7, #28
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	2204      	movs	r2, #4
 80054dc:	2132      	movs	r1, #50	; 0x32
 80054de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e0:	f000 fc7f 	bl	8005de2 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add an option request for an infinite lease.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 80054e4:	f107 031c 	add.w	r3, r7, #28
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ee:	2204      	movs	r2, #4
 80054f0:	2133      	movs	r1, #51	; 0x33
 80054f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f4:	f000 fc75 	bl	8005de2 <_nx_dhcp_add_option_value>

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <_nx_dhcp_send_request_internal+0x26c>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f107 0114 	add.w	r1, r7, #20
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	4618      	mov	r0, r3
 800550c:	f006 fc0a 	bl	800bd24 <_nx_utility_string_length_check>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <_nx_dhcp_send_request_internal+0x256>
                {
                    nx_packet_release(packet_ptr);
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	4618      	mov	r0, r3
 800551a:	f005 f9af 	bl	800a87c <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 800551e:	23a8      	movs	r3, #168	; 0xa8
 8005520:	e190      	b.n	8005844 <_nx_dhcp_send_request_internal+0x578>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8005522:	697a      	ldr	r2, [r7, #20]
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6859      	ldr	r1, [r3, #4]
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8005528:	f107 031c 	add.w	r3, r7, #28
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	460b      	mov	r3, r1
 8005530:	210c      	movs	r1, #12
 8005532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005534:	f000 fc88 	bl	8005e48 <_nx_dhcp_add_option_string>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 8005538:	f107 031c 	add.w	r3, r7, #28
 800553c:	461a      	mov	r2, r3
 800553e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fcb5 	bl	8005eb0 <_nx_dhcp_add_option_parameter_request>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Discovery messages sent.  */
            interface_record -> nx_dhcp_discoveries_sent++;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8005554:	e0f5      	b.n	8005742 <_nx_dhcp_send_request_internal+0x476>
      
        case NX_DHCP_TYPE_DHCPREQUEST:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01b      	beq.n	8005596 <_nx_dhcp_send_request_internal+0x2ca>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f107 0114 	add.w	r1, r7, #20
 8005566:	22ff      	movs	r2, #255	; 0xff
 8005568:	4618      	mov	r0, r3
 800556a:	f006 fbdb 	bl	800bd24 <_nx_utility_string_length_check>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <_nx_dhcp_send_request_internal+0x2b4>
                {
                    nx_packet_release(packet_ptr);
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	4618      	mov	r0, r3
 8005578:	f005 f980 	bl	800a87c <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 800557c:	23a8      	movs	r3, #168	; 0xa8
 800557e:	e161      	b.n	8005844 <_nx_dhcp_send_request_internal+0x578>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	f107 031c 	add.w	r3, r7, #28
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	460b      	mov	r3, r1
 800558e:	210c      	movs	r1, #12
 8005590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005592:	f000 fc59 	bl	8005e48 <_nx_dhcp_add_option_string>
            }

            /* Determine if we have a valid IP address. Must not include if Renewing or Rebinding RCV 2131 4.3.2.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <_nx_dhcp_send_request_internal+0x302>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a6:	d012      	beq.n	80055ce <_nx_dhcp_send_request_internal+0x302>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 80055ac:	2b06      	cmp	r3, #6
 80055ae:	d00e      	beq.n	80055ce <_nx_dhcp_send_request_internal+0x302>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	d00a      	beq.n	80055ce <_nx_dhcp_send_request_internal+0x302>
            {

                /* Add an IP request option if we have a valid IP address.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	f107 031c 	add.w	r3, r7, #28
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	2204      	movs	r2, #4
 80055c6:	2132      	movs	r1, #50	; 0x32
 80055c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ca:	f000 fc0a 	bl	8005de2 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add a request for an infinite lease if we haven't already set the timers.  */
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <_nx_dhcp_send_request_internal+0x312>
                (interface_record -> nx_dhcp_renewal_time == 0))
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <_nx_dhcp_send_request_internal+0x326>
            {

                /* Add the infinite lease option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 80055de:	f107 031c 	add.w	r3, r7, #28
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055e8:	2204      	movs	r2, #4
 80055ea:	2133      	movs	r1, #51	; 0x33
 80055ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ee:	f000 fbf8 	bl	8005de2 <_nx_dhcp_add_option_value>
            }

            /* Should add server ID if not renewing.  */
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d014      	beq.n	8005624 <_nx_dhcp_send_request_internal+0x358>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	785b      	ldrb	r3, [r3, #1]
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 80055fe:	2b07      	cmp	r3, #7
 8005600:	d010      	beq.n	8005624 <_nx_dhcp_send_request_internal+0x358>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	695b      	ldr	r3, [r3, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800560a:	d00b      	beq.n	8005624 <_nx_dhcp_send_request_internal+0x358>
               )
            {

                /* Add Server identifier option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	f107 031c 	add.w	r3, r7, #28
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	4613      	mov	r3, r2
 8005618:	2204      	movs	r2, #4
 800561a:	2136      	movs	r1, #54	; 0x36
 800561c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561e:	f000 fbe0 	bl	8005de2 <_nx_dhcp_add_option_value>
 8005622:	e010      	b.n	8005646 <_nx_dhcp_send_request_internal+0x37a>
                                          interface_record -> nx_dhcp_server_ip, &index);
            }
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b06      	cmp	r3, #6
 800562a:	d003      	beq.n	8005634 <_nx_dhcp_send_request_internal+0x368>
                     (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	785b      	ldrb	r3, [r3, #1]
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8005630:	2b07      	cmp	r3, #7
 8005632:	d108      	bne.n	8005646 <_nx_dhcp_send_request_internal+0x37a>

            {

                /* Ensure the renewal message fields are correct.  */
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	f103 000c 	add.w	r0, r3, #12
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	461a      	mov	r2, r3
 8005640:	2104      	movs	r1, #4
 8005642:	f000 fd57 	bl	80060f4 <_nx_dhcp_store_data>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 8005646:	f107 031c 	add.w	r3, r7, #28
 800564a:	461a      	mov	r2, r3
 800564c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fc2e 	bl	8005eb0 <_nx_dhcp_add_option_parameter_request>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Request messages sent.  */
            interface_record -> nx_dhcp_requests_sent++;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 8005662:	e06e      	b.n	8005742 <_nx_dhcp_send_request_internal+0x476>

        case NX_DHCP_TYPE_DHCPDECLINE:      

            /* Does the Client have a nonzero requested address it is declining? */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00f      	beq.n	800568c <_nx_dhcp_send_request_internal+0x3c0>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005674:	d00a      	beq.n	800568c <_nx_dhcp_send_request_internal+0x3c0>
            {

                /* Yes; add Request IP address option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	f107 031c 	add.w	r3, r7, #28
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	2204      	movs	r2, #4
 8005684:	2132      	movs	r1, #50	; 0x32
 8005686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005688:	f000 fbab 	bl	8005de2 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }     

            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	695a      	ldr	r2, [r3, #20]
 8005690:	f107 031c 	add.w	r3, r7, #28
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	2204      	movs	r2, #4
 800569a:	2136      	movs	r1, #54	; 0x36
 800569c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569e:	f000 fba0 	bl	8005de2 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            break;
 80056a2:	e04e      	b.n	8005742 <_nx_dhcp_send_request_internal+0x476>

        case NX_DHCP_TYPE_DHCPRELEASE:       

            /* Added the 'ciaddr', Indicate the IP address being released.  */
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	f103 000c 	add.w	r0, r3, #12
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	461a      	mov	r2, r3
 80056b0:	2104      	movs	r1, #4
 80056b2:	f000 fd1f 	bl	80060f4 <_nx_dhcp_store_data>
                                       
            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	695a      	ldr	r2, [r3, #20]
 80056ba:	f107 031c 	add.w	r3, r7, #28
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	2204      	movs	r2, #4
 80056c4:	2136      	movs	r1, #54	; 0x36
 80056c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c8:	f000 fb8b 	bl	8005de2 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            /* Increment the number of Release messages sent.  */
            interface_record -> nx_dhcp_releases_sent++;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            break;
 80056da:	e032      	b.n	8005742 <_nx_dhcp_send_request_internal+0x476>

        case NX_DHCP_TYPE_DHCPINFORM:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01e      	beq.n	8005722 <_nx_dhcp_send_request_internal+0x456>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f107 0114 	add.w	r1, r7, #20
 80056ec:	22ff      	movs	r2, #255	; 0xff
 80056ee:	4618      	mov	r0, r3
 80056f0:	f006 fb18 	bl	800bd24 <_nx_utility_string_length_check>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <_nx_dhcp_send_request_internal+0x440>
                {
                    nx_packet_release(packet_ptr);
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f005 f8bd 	bl	800a87c <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8005702:	23a8      	movs	r3, #168	; 0xa8
 8005704:	e09e      	b.n	8005844 <_nx_dhcp_send_request_internal+0x578>
 8005706:	bf00      	nop
 8005708:	63825363 	.word	0x63825363
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6859      	ldr	r1, [r3, #4]
 8005712:	f107 031c 	add.w	r3, r7, #28
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	460b      	mov	r3, r1
 800571a:	210c      	movs	r1, #12
 800571c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800571e:	f000 fb93 	bl	8005e48 <_nx_dhcp_add_option_string>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 8005722:	f107 031c 	add.w	r3, r7, #28
 8005726:	461a      	mov	r2, r3
 8005728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fbc0 	bl	8005eb0 <_nx_dhcp_add_option_parameter_request>

            /* Increment the number of Inform messages sent.  */
            interface_record -> nx_dhcp_informs_sent++;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

            break;
 800573e:	e000      	b.n	8005742 <_nx_dhcp_send_request_internal+0x476>

        default:
            break;
 8005740:	bf00      	nop
    }

    /* Add any user supplied options to the buffer.  */
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005748:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	; 0xf48
 800574c:	2b00      	cmp	r3, #0
 800574e:	d024      	beq.n	800579a <_nx_dhcp_send_request_internal+0x4ce>
    {

        /* Set the pointer for adding user option.  */
        user_option_ptr = buffer + index;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005754:	4413      	add	r3, r2
 8005756:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the available length for user options. Minus 1 to add the END option.  */
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	61bb      	str	r3, [r7, #24]

        /* Add the specific DHCP option user wanted.  */
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576a:	f8d3 4f48 	ldr.w	r4, [r3, #3912]	; 0xf48
 800576e:	f107 0318 	add.w	r3, r7, #24
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	47a0      	blx	r4
 800577e:	4603      	mov	r3, r0
 8005780:	2b01      	cmp	r3, #1
 8005782:	d104      	bne.n	800578e <_nx_dhcp_send_request_internal+0x4c2>
        {

            /* Update the index to include the user options.  */
            index += user_option_length;
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	4413      	add	r3, r2
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e005      	b.n	800579a <_nx_dhcp_send_request_internal+0x4ce>
        }
        else
        {

            /* Invalid user options. Release the packet.  */
            nx_packet_release(packet_ptr);
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	4618      	mov	r0, r3
 8005792:	f005 f873 	bl	800a87c <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 8005796:	239f      	movs	r3, #159	; 0x9f
 8005798:	e054      	b.n	8005844 <_nx_dhcp_send_request_internal+0x578>
        }
    }

    /* Setup the packet pointers.  */
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80057ac:	60da      	str	r2, [r3, #12]

#ifndef NX_DHCP_ENABLE_BOOTP

    /* Added the END option.  */
    *(buffer + index) = NX_DHCP_OPTION_END;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b2:	4413      	add	r3, r2
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	701a      	strb	r2, [r3, #0]
    index ++;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3301      	adds	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]

    /* Check the option length.  */
    if (index > NX_BOOTP_OFFSET_END)
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80057c4:	d908      	bls.n	80057d8 <_nx_dhcp_send_request_internal+0x50c>
    {
        packet_ptr -> nx_packet_length = index;
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	6899      	ldr	r1, [r3, #8]
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	440a      	add	r2, r1
 80057d6:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Set the target address according to RFC2131, Section4.3.6, Page33, Table4 and Section4.4.4, Page40.  
       DHCP Request for renewing and DHCP Release message must be unicast.  */
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d103      	bne.n	80057e6 <_nx_dhcp_send_request_internal+0x51a>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d002      	beq.n	80057ec <_nx_dhcp_send_request_internal+0x520>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b07      	cmp	r3, #7
 80057ea:	d103      	bne.n	80057f4 <_nx_dhcp_send_request_internal+0x528>
        (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
    {

        /* Use the current server's IP address.  */
        targetIP = interface_record -> nx_dhcp_server_ip;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	e002      	b.n	80057fa <_nx_dhcp_send_request_internal+0x52e>
    }
    else
    {

        /* Set the server target IP address to broadcast.  */
        targetIP = NX_BOOTP_BC_ADDRESS;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* DHCP messages broadcast by a client prior to that client obtaining
       its IP address must have the source address field in the IP header
       set to 0. RFC2131, Section4.1, Page23.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d006      	beq.n	800580e <_nx_dhcp_send_request_internal+0x542>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d10b      	bne.n	800581e <_nx_dhcp_send_request_internal+0x552>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b04      	cmp	r3, #4
 800580c:	d807      	bhi.n	800581e <_nx_dhcp_send_request_internal+0x552>
    {

        /* Call function to send the special packet with zero source address.*/
        status = _nx_dhcp_client_send_with_zero_source_address(dhcp_ptr, iface_index, packet_ptr);
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	461a      	mov	r2, r3
 8005812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f819 	bl	800584c <_nx_dhcp_client_send_with_zero_source_address>
 800581a:	63b8      	str	r0, [r7, #56]	; 0x38
 800581c:	e00a      	b.n	8005834 <_nx_dhcp_send_request_internal+0x568>
    }
    else
    {

        /* Send the packet.  */
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 8005824:	6a39      	ldr	r1, [r7, #32]
 8005826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2343      	movs	r3, #67	; 0x43
 800582c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800582e:	f006 f8ee 	bl	800ba0e <_nx_udp_socket_source_send>
 8005832:	63b8      	str	r0, [r7, #56]	; 0x38
    }

    /* If an error is detected, release the packet. */
    if (status != NX_SUCCESS)
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <_nx_dhcp_send_request_internal+0x576>
    {

        /* Release the packet.  */
        nx_packet_release(packet_ptr);
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	4618      	mov	r0, r3
 800583e:	f005 f81d 	bl	800a87c <_nx_packet_release>
    }

    /* Return completion status.  */
    return(status);
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005844:	4618      	mov	r0, r3
 8005846:	3744      	adds	r7, #68	; 0x44
 8005848:	46bd      	mov	sp, r7
 800584a:	bd90      	pop	{r4, r7, pc}

0800584c <_nx_dhcp_client_send_with_zero_source_address>:
/*                                            supported new ip filter,    */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_client_send_with_zero_source_address(NX_DHCP *dhcp_ptr, UINT iface_index, NX_PACKET *packet_ptr)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b098      	sub	sp, #96	; 0x60
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
ULONG           checksum;
ULONG           val;
NX_IP_DRIVER    driver_request;
      
    /* Set up the pointer to the associated IP instance.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set up the pointer to the associated socket.  */
    socket_ptr = &dhcp_ptr -> nx_dhcp_socket;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005864:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Set up the pointer to the interface.  */
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	224c      	movs	r2, #76	; 0x4c
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8005872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set up the address.  */
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 8005880:	2300      	movs	r3, #0
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8005884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005888:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the interface.  */
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 800588a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588c:	791b      	ldrb	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <_nx_dhcp_client_send_with_zero_source_address+0x4e>
 8005892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005894:	799b      	ldrb	r3, [r3, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <_nx_dhcp_client_send_with_zero_source_address+0x52>
    {

        /* None found; return the error status. */
        return(NX_INVALID_INTERFACE);
 800589a:	234c      	movs	r3, #76	; 0x4c
 800589c:	e13b      	b.n	8005b16 <_nx_dhcp_client_send_with_zero_source_address+0x2ca>
    }

    /* Build UDP header.  */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f1a3 0208 	sub.w	r2, r3, #8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2204      	movs	r2, #4
 80058ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    
#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 80058b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 80058c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	441a      	add	r2, r3
 80058cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058da:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 80058dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	441a      	add	r2, r3
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f103 0208 	add.w	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    udp_header_ptr =  (NX_UDP_HEADER *) packet_ptr -> nx_packet_prepend_ptr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80058fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	f043 0243 	orr.w	r2, r3, #67	; 0x43
 8005906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005908:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	041a      	lsls	r2, r3, #16
 8005910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005912:	605a      	str	r2, [r3, #4]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8005914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	ba1a      	rev	r2, r3
 800591a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800591e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	ba1a      	rev	r2, r3
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	605a      	str	r2, [r3, #4]

#ifdef NX_DISABLE_UDP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_UDP_TX_CHECKSUM */
    compute_checksum = 1;
 8005928:	2301      	movs	r3, #1
 800592a:	643b      	str	r3, [r7, #64]	; 0x40
        compute_checksum = 0;
    else
        compute_checksum = 1;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 800592c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d027      	beq.n	8005982 <_nx_dhcp_client_send_with_zero_source_address+0x136>
    {
        /* Yes, we need to compute the UDP checksum.  */
        checksum = _nx_ip_checksum_compute(packet_ptr,
                                           NX_PROTOCOL_UDP,
                                           (UINT)packet_ptr -> nx_packet_length,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr,
 8005936:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800593a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	460b      	mov	r3, r1
 8005942:	2111      	movs	r1, #17
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f002 fa98 	bl	8007e7a <_nx_ip_checksum_compute>
 800594a:	4603      	mov	r3, r0
 800594c:	657b      	str	r3, [r7, #84]	; 0x54
                                           &ip_src_addr,
                                           &ip_dest_addr);

        checksum = ~checksum & NX_LOWER_16_MASK;
 800594e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005950:	43db      	mvns	r3, r3
 8005952:	b29b      	uxth	r3, r3
 8005954:	657b      	str	r3, [r7, #84]	; 0x54

        /* If the computed checksum is zero, it will be transmitted as all ones. */
        /* RFC 768, page 2. */
        if (checksum == 0)
 8005956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <_nx_dhcp_client_send_with_zero_source_address+0x116>
            checksum = 0xFFFF;
 800595c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005960:	657b      	str	r3, [r7, #84]	; 0x54

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8005962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	ba1a      	rev	r2, r3
 8005968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596a:	605a      	str	r2, [r3, #4]

        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005972:	431a      	orrs	r2, r3
 8005974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005976:	605a      	str	r2, [r3, #4]

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8005978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	ba1a      	rev	r2, r3
 800597e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005980:	605a      	str	r2, [r3, #4]
        /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8005982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005984:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800598c:	4618      	mov	r0, r3
 800598e:	f009 fe3d 	bl	800f60c <_txe_mutex_get>

    /* Build the IP header.  */

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f1a3 0214 	sub.w	r2, r3, #20
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f103 0214 	add.w	r2, r3, #20
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the IP header pointer.  */
    ip_header_ptr =  (NX_IPV4_HEADER *) packet_ptr -> nx_packet_prepend_ptr; 
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Build the first 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 80059c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80059ca:	1c59      	adds	r1, r3, #1
 80059cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059ce:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 80059d2:	041a      	lsls	r2, r3, #16
 80059d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	431a      	orrs	r2, r3
 80059da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059dc:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	061b      	lsls	r3, r3, #24
 80059e4:	f443 1288 	orr.w	r2, r3, #1114112	; 0x110000
 80059e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ea:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  ip_src_addr;
 80059ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f0:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 80059f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	611a      	str	r2, [r3, #16]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 80059f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	ba1a      	rev	r2, r3
 80059fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a00:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	ba1a      	rev	r2, r3
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	ba1a      	rev	r2, r3
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8005a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	ba1a      	rev	r2, r3
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8005a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	ba1a      	rev	r2, r3
 8005a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a28:	611a      	str	r2, [r3, #16]
     
#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_IP_TX_CHECKSUM */
    compute_checksum = 1;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
        compute_checksum = 0;
    else
        compute_checksum = 1;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d018      	beq.n	8005a66 <_nx_dhcp_client_send_with_zero_source_address+0x21a>
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 8005a34:	2300      	movs	r3, #0
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2214      	movs	r2, #20
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f002 fa1b 	bl	8007e7a <_nx_ip_checksum_compute>
 8005a44:	4603      	mov	r3, r0
 8005a46:	657b      	str	r3, [r7, #84]	; 0x54

        val = (ULONG)(~checksum);
 8005a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38
        val = val & NX_LOWER_16_MASK;
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	ba1b      	rev	r3, r3
 8005a58:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	431a      	orrs	r2, r3
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	609a      	str	r2, [r3, #8]
        }
    }
#endif /* NX_ENABLE_IP_PACKET_FILTER */

    /* Build the driver request.  */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8005a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8005a74:	2304      	movs	r3, #4
 8005a76:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8005a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a7c:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a82:	61fb      	str	r3, [r7, #28]

    /* Determine if fragmentation is needed.  */
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d925      	bls.n	8005ade <_nx_dhcp_client_send_with_zero_source_address+0x292>
    {

#ifndef NX_DISABLE_FRAGMENTATION
        /* Check the DF bit flag.  */
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 8005a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d013      	beq.n	8005ac4 <_nx_dhcp_client_send_with_zero_source_address+0x278>
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa4:	d00e      	beq.n	8005ac4 <_nx_dhcp_client_send_with_zero_source_address+0x278>
        {

            /* Fragmentation is needed, call the IP fragment processing routine.  */
            (ip_ptr -> nx_ip_fragment_processing) (&driver_request);
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005aac:	f107 0210 	add.w	r2, r7, #16
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8005ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005aba:	4618      	mov	r0, r3
 8005abc:	f009 fe00 	bl	800f6c0 <_txe_mutex_put>

            /* Return a successful status.  */
            return(NX_SUCCESS);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e028      	b.n	8005b16 <_nx_dhcp_client_send_with_zero_source_address+0x2ca>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8005ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8005ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f009 fdf3 	bl	800f6c0 <_txe_mutex_put>

            /* Return a not successful status.  */
            return(NX_NOT_SUCCESSFUL);
 8005ada:	2343      	movs	r3, #67	; 0x43
 8005adc:	e01b      	b.n	8005b16 <_nx_dhcp_client_send_with_zero_source_address+0x2ca>
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 8005ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae6:	615a      	str	r2, [r3, #20]

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - 20;
 8005ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	4413      	add	r3, r2
 8005af2:	f1a3 0214 	sub.w	r2, r3, #20
 8005af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af8:	619a      	str	r2, [r3, #24]
#endif

    /* Broadcast packet.  */
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	f107 0210 	add.w	r2, r7, #16
 8005b04:	4610      	mov	r0, r2
 8005b06:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8005b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f009 fdd6 	bl	800f6c0 <_txe_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3758      	adds	r7, #88	; 0x58
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <_nx_dhcp_extract_information>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]

ULONG       value;


    /* Extract the IP address.  */
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3310      	adds	r3, #16
 8005b30:	2104      	movs	r1, #4
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fac2 	bl	80060bc <_nx_dhcp_get_data>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	617b      	str	r3, [r7, #20]

    /* Determine if it is valid.  */
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01c      	beq.n	8005b7c <_nx_dhcp_extract_information+0x5e>
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8005b42:	697b      	ldr	r3, [r7, #20]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da0b      	bge.n	8005b60 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8005b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b52:	d005      	beq.n	8005b60 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8005b5a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005b5e:	d10d      	bne.n	8005b7c <_nx_dhcp_extract_information+0x5e>
    {

        /* Store the IP address.  */
        interface_record -> nx_dhcp_ip_address =  value;
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	60da      	str	r2, [r3, #12]
        return(NX_DHCP_BAD_IP_ADDRESS);
    }
                       
    /* Determine if there is a subnet mask. Note a DHCP Server receiving a BOOTP request
       may send DHCP option data for subnet masks as per RFC 1534 Section 2.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 8005b66:	f107 0214 	add.w	r2, r7, #20
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f8f5 	bl	8005d5e <_nx_dhcp_get_option_value>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <_nx_dhcp_extract_information+0x62>
 8005b7a:	e012      	b.n	8005ba2 <_nx_dhcp_extract_information+0x84>
        return(NX_DHCP_BAD_IP_ADDRESS);
 8005b7c:	2392      	movs	r3, #146	; 0x92
 8005b7e:	e0ea      	b.n	8005d56 <_nx_dhcp_extract_information+0x238>
    {

        /* Make sure there is a valid IP address too.  */
        if (value != NX_BOOTP_NO_ADDRESS)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <_nx_dhcp_extract_information+0x70>
        {

            interface_record -> nx_dhcp_network_mask =  value;
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	619a      	str	r2, [r3, #24]
 8005b8c:	e009      	b.n	8005ba2 <_nx_dhcp_extract_information+0x84>
        {
            ULONG ip_address;

            /* No valid network mask info supplied; use the current network mask if any. Don't
               care about current IP address for now. */
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6898      	ldr	r0, [r3, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	69d9      	ldr	r1, [r3, #28]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	f107 0210 	add.w	r2, r7, #16
 8005b9e:	f003 f861 	bl	8008c64 <_nx_ip_interface_address_get>
#else  

    /* NX_DHCP_ENABLE_BOOTP  not defined */

    /* Overwrite the server ID if there is a DHCP option for Server ID */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 8005ba2:	f107 0214 	add.w	r2, r7, #20
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2136      	movs	r1, #54	; 0x36
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8d7 	bl	8005d5e <_nx_dhcp_get_option_value>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d117      	bne.n	8005be6 <_nx_dhcp_extract_information+0xc8>
    {

        /* Determine if it is valid.  */
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d012      	beq.n	8005be2 <_nx_dhcp_extract_information+0xc4>
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8005bbc:	697b      	ldr	r3, [r7, #20]
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da0b      	bge.n	8005bda <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8005bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bcc:	d005      	beq.n	8005bda <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8005bd4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005bd8:	d103      	bne.n	8005be2 <_nx_dhcp_extract_information+0xc4>
        {

            /* Store the server IP address.  */
            interface_record -> nx_dhcp_server_ip = value;
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	615a      	str	r2, [r3, #20]
 8005be0:	e001      	b.n	8005be6 <_nx_dhcp_extract_information+0xc8>
        }
        else
        {
            return(NX_DHCP_BAD_IP_ADDRESS);
 8005be2:	2392      	movs	r3, #146	; 0x92
 8005be4:	e0b7      	b.n	8005d56 <_nx_dhcp_extract_information+0x238>
        }
    }

    /* Get the lease time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 8005be6:	f107 0214 	add.w	r2, r7, #20
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2133      	movs	r1, #51	; 0x33
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f8b5 	bl	8005d5e <_nx_dhcp_get_option_value>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d120      	bne.n	8005c3c <_nx_dhcp_extract_information+0x11e>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c00:	d109      	bne.n	8005c16 <_nx_dhcp_extract_information+0xf8>
        {
            /* Store the 'infinite' lease time . */
            interface_record -> nx_dhcp_lease_time = value;
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c
            interface_record -> nx_dhcp_renewal_time = value;
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time = value;
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	635a      	str	r2, [r3, #52]	; 0x34
 8005c14:	e012      	b.n	8005c3c <_nx_dhcp_extract_information+0x11e>
        }
        else
        {            

            /* Store the lease time in timer ticks.  */
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2264      	movs	r2, #100	; 0x64
 8005c1a:	fb03 f202 	mul.w	r2, r3, r2
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	62da      	str	r2, [r3, #44]	; 0x2c
    
            /* Set the renew and rebind times.  */
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	085a      	lsrs	r2, r3, #1
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }
 
    /* Overwrite the renew and rebind times with the specified values if the options are present.  */
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8005c3c:	f107 0214 	add.w	r2, r7, #20
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	213a      	movs	r1, #58	; 0x3a
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f88a 	bl	8005d5e <_nx_dhcp_get_option_value>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d112      	bne.n	8005c76 <_nx_dhcp_extract_information+0x158>
        (value <= interface_record -> nx_dhcp_lease_time))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c54:	697b      	ldr	r3, [r7, #20]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d30d      	bcc.n	8005c76 <_nx_dhcp_extract_information+0x158>
    {       

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c60:	d103      	bne.n	8005c6a <_nx_dhcp_extract_information+0x14c>
        {
            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_renewal_time = value;
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	631a      	str	r2, [r3, #48]	; 0x30
 8005c68:	e005      	b.n	8005c76 <_nx_dhcp_extract_information+0x158>
        }
        else
        {

            /* Store the renewal time in timer ticks  */
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2264      	movs	r2, #100	; 0x64
 8005c6e:	fb03 f202 	mul.w	r2, r3, r2
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
  
    /* Determine if there is a rebind time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 8005c76:	f107 0214 	add.w	r2, r7, #20
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	213b      	movs	r1, #59	; 0x3b
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f86d 	bl	8005d5e <_nx_dhcp_get_option_value>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d119      	bne.n	8005cbe <_nx_dhcp_extract_information+0x1a0>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c90:	d103      	bne.n	8005c9a <_nx_dhcp_extract_information+0x17c>
        {

            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_rebind_time = value;
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	635a      	str	r2, [r3, #52]	; 0x34
 8005c98:	e011      	b.n	8005cbe <_nx_dhcp_extract_information+0x1a0>
        }
        else
        {

            /* Convert to timer ticks. */
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2264      	movs	r2, #100	; 0x64
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	617b      	str	r3, [r7, #20]

            /* Sanity check*/
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d307      	bcc.n	8005cbe <_nx_dhcp_extract_information+0x1a0>
                (value >= interface_record -> nx_dhcp_renewal_time))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb2:	697b      	ldr	r3, [r7, #20]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d802      	bhi.n	8005cbe <_nx_dhcp_extract_information+0x1a0>
            {
        
                /* Store the rebind time.  */
                interface_record -> nx_dhcp_rebind_time =  value;
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	635a      	str	r2, [r3, #52]	; 0x34
            }
        }
    }

    /* Determine if this is an ACK from a server response, which can only happen from a handful of states.  */
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d007      	beq.n	8005cd6 <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d003      	beq.n	8005cd6 <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8005cd2:	2b07      	cmp	r3, #7
 8005cd4:	d121      	bne.n	8005d1a <_nx_dhcp_extract_information+0x1fc>
    {

        /* Determine if the IP gateway/router IP address is present.  */
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 8005cd6:	f107 0214 	add.w	r2, r7, #20
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2103      	movs	r1, #3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f83d 	bl	8005d5e <_nx_dhcp_get_option_value>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d117      	bne.n	8005d1a <_nx_dhcp_extract_information+0x1fc>
        {

            /* Determine if it is valid.  */
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <_nx_dhcp_extract_information+0x1f8>
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8005cf0:	697b      	ldr	r3, [r7, #20]
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da0b      	bge.n	8005d0e <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8005cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d00:	d005      	beq.n	8005d0e <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8005d08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005d0c:	d103      	bne.n	8005d16 <_nx_dhcp_extract_information+0x1f8>
            {

                /* Store the gateway/Router IP address to the Client record.  */
                interface_record -> nx_dhcp_gateway_address = value;
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	611a      	str	r2, [r3, #16]
 8005d14:	e001      	b.n	8005d1a <_nx_dhcp_extract_information+0x1fc>
            }
            else
            {
                return(NX_DHCP_BAD_IP_ADDRESS);
 8005d16:	2392      	movs	r3, #146	; 0x92
 8005d18:	e01d      	b.n	8005d56 <_nx_dhcp_extract_information+0x238>
            }
        }
    }

     /* Check the DHCP options size.  */
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	3bf0      	subs	r3, #240	; 0xf0
 8005d1e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8005d22:	d905      	bls.n	8005d30 <_nx_dhcp_extract_information+0x212>
         interface_record -> nx_dhcp_options_size = NX_DHCP_OPTIONS_BUFFER_SIZE;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005d2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8005d2e:	e005      	b.n	8005d3c <_nx_dhcp_extract_information+0x21e>
     else
         interface_record -> nx_dhcp_options_size = length - NX_BOOTP_OFFSET_OPTIONS;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	f1a3 02f0 	sub.w	r2, r3, #240	; 0xf0
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

     /* Copy the DHCP options into DHCP Client options buffer.  */
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f103 0048 	add.w	r0, r3, #72	; 0x48
            &dhcp_message[NX_BOOTP_OFFSET_OPTIONS], interface_record -> nx_dhcp_options_size);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f00a f903 	bl	800ff5a <memcpy>

#endif  /* NX_DHCP_ENABLE_BOOTP */

    return (NX_SUCCESS);
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <_nx_dhcp_get_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_get_option_value(UCHAR *bootp_message, UINT option, ULONG *value, UINT length)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b088      	sub	sp, #32
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	603b      	str	r3, [r7, #0]
UCHAR *option_message;
UINT   option_length;


    /* Setup buffer pointer.  */
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	33f0      	adds	r3, #240	; 0xf0
 8005d70:	61fb      	str	r3, [r7, #28]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	3bf0      	subs	r3, #240	; 0xf0
 8005d76:	61bb      	str	r3, [r7, #24]

    /* Find the option.  */
    if ((option != NX_DHCP_OPTION_PAD) && (option != NX_DHCP_OPTION_END))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02c      	beq.n	8005dd8 <_nx_dhcp_get_option_value+0x7a>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2bff      	cmp	r3, #255	; 0xff
 8005d82:	d029      	beq.n	8005dd8 <_nx_dhcp_get_option_value+0x7a>
    {

        /* Search the buffer for the option.  */
        data =  _nx_dhcp_search_buffer(option_message, option, option_length);
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	69f8      	ldr	r0, [r7, #28]
 8005d8a:	f000 f94f 	bl	800602c <_nx_dhcp_search_buffer>
 8005d8e:	6178      	str	r0, [r7, #20]

        /* Check to see if the option was found.  */
        if (data != NX_NULL)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d020      	beq.n	8005dd8 <_nx_dhcp_get_option_value+0x7a>
        {

            /* Check for the proper size.  */
            if (*data > 4)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d90f      	bls.n	8005dbe <_nx_dhcp_get_option_value+0x60>
            {

                /* Check for the gateway option.  */
                if (option == NX_DHCP_OPTION_GATEWAYS)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d10a      	bne.n	8005dba <_nx_dhcp_get_option_value+0x5c>
                {

                    /* Pickup the first gateway address.  */
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3301      	adds	r3, #1
 8005da8:	2104      	movs	r1, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f986 	bl	80060bc <_nx_dhcp_get_data>
 8005db0:	4602      	mov	r2, r0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]

                    /* For now, just disregard any additional gateway addresses.  */
                    return(NX_SUCCESS);
 8005db6:	2300      	movs	r3, #0
 8005db8:	e00f      	b.n	8005dda <_nx_dhcp_get_option_value+0x7c>
                }
                else
                {

                    /* Invalid size, return error.  */
                    return(NX_SIZE_ERROR);
 8005dba:	2309      	movs	r3, #9
 8005dbc:	e00d      	b.n	8005dda <_nx_dhcp_get_option_value+0x7c>
            }
            else
            {

                /* Get the actual value.  */
                *value = _nx_dhcp_get_data(data + 1, *data);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f000 f977 	bl	80060bc <_nx_dhcp_get_data>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
                return(NX_SUCCESS);  
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <_nx_dhcp_get_option_value+0x7c>
            }
        }
    }

    /* Return an error if not found.  */
    return(NX_OPTION_ERROR);
 8005dd8:	230a      	movs	r3, #10
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <_nx_dhcp_add_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_add_option_value(UCHAR *bootp_message, UINT option, UINT size, ULONG value, UINT *index)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	603b      	str	r3, [r7, #0]


    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_store_data(bootp_message + (*index), size, value);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f961 	bl	80060f4 <_nx_dhcp_store_data>
    (*index) += size;    
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	441a      	add	r2, r3
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_nx_dhcp_add_option_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_string(UCHAR *bootp_message, UINT option, UINT size, UCHAR *value, UINT *index)
{                                              
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f966 	bl	8006164 <_nx_dhcp_move_string>
    (*index) += size;    
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	441a      	add	r2, r3
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <_nx_dhcp_add_option_parameter_request>:
/*                                                                        */
/*  08-02-2021     Yuxin Zhou               Initial Version 6.1.8         */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_parameter_request(NX_DHCP *dhcp_ptr, UCHAR *bootp_message, UINT *index)
{                                              
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = NX_DHCP_OPTION_DHCP_PARAMETERS;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	2237      	movs	r2, #55	; 0x37
 8005ec6:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)(NX_DHCP_REQUEST_PARAMETER_SIZE + dhcp_ptr -> nx_dhcp_user_request_parameter_size); 
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed8:	f8d3 3f3c 	ldr.w	r3, [r3, #3900]	; 0xf3c
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3203      	adds	r2, #3
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), _nx_dhcp_request_parameters, NX_DHCP_REQUEST_PARAMETER_SIZE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4413      	add	r3, r2
 8005efe:	2203      	movs	r2, #3
 8005f00:	4917      	ldr	r1, [pc, #92]	; (8005f60 <_nx_dhcp_add_option_parameter_request+0xb0>)
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f92e 	bl	8006164 <_nx_dhcp_move_string>
    (*index) += (UINT)NX_DHCP_REQUEST_PARAMETER_SIZE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	1cda      	adds	r2, r3, #3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]

    /* Check if there are additional user options.  */
    if (dhcp_ptr -> nx_dhcp_user_request_parameter_size)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	f8d3 3f3c 	ldr.w	r3, [r3, #3900]	; 0xf3c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01a      	beq.n	8005f56 <_nx_dhcp_add_option_parameter_request+0xa6>
    {
        _nx_dhcp_move_string(bootp_message + (*index), dhcp_ptr -> nx_dhcp_user_request_parameter, dhcp_ptr -> nx_dhcp_user_request_parameter_size);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	18d0      	adds	r0, r2, r3
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f641 7338 	movw	r3, #7992	; 0x1f38
 8005f2e:	4413      	add	r3, r2
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f36:	f8d2 2f3c 	ldr.w	r2, [r2, #3900]	; 0xf3c
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f000 f912 	bl	8006164 <_nx_dhcp_move_string>
        (*index) += (UCHAR)dhcp_ptr -> nx_dhcp_user_request_parameter_size;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f4a:	f8d2 2f3c 	ldr.w	r2, [r2, #3900]	; 0xf3c
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	441a      	add	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
    }

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	2000000c 	.word	0x2000000c

08005f64 <_nx_dhcp_add_randomize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_add_randomize(ULONG timeout)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
ULONG adjustment;

    /* Uniform random number chosen from the range -1 to +1 second as recommended by RFC2131, Section4.1, Page24. */

    /* Calculate random time adjustment in timer ticks from the range 0 to NX_IP_PERIODIC_RATE * 2.  */
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8005f6c:	f009 fe36 	bl	800fbdc <rand>
 8005f70:	4603      	mov	r3, r0
 8005f72:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <_nx_dhcp_add_randomize+0x58>)
 8005f74:	fba2 1203 	umull	r1, r2, r2, r3
 8005f78:	0852      	lsrs	r2, r2, #1
 8005f7a:	21c9      	movs	r1, #201	; 0xc9
 8005f7c:	fb01 f202 	mul.w	r2, r1, r2
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

    /* Check for adjustment.  */
    if (adjustment < NX_IP_PERIODIC_RATE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b63      	cmp	r3, #99	; 0x63
 8005f88:	d80e      	bhi.n	8005fa8 <_nx_dhcp_add_randomize+0x44>
    {

        /* Updated timeout, minus NX_IP_PERIODIC_RATE - adjustment.  */

        /* Check for timeout.  */
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d905      	bls.n	8005fa2 <_nx_dhcp_add_randomize+0x3e>
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3b64      	subs	r3, #100	; 0x64
 8005f9e:	607b      	str	r3, [r7, #4]
 8005fa0:	e007      	b.n	8005fb2 <_nx_dhcp_add_randomize+0x4e>
        else
            timeout = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	e004      	b.n	8005fb2 <_nx_dhcp_add_randomize+0x4e>
    }
    else
    {

        /* Updated timeout, add adjustment- NX_IP_PERIODIC_RATE.  */
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	3b64      	subs	r3, #100	; 0x64
 8005fb0:	607b      	str	r3, [r7, #4]
    }

    return timeout;
 8005fb2:	687b      	ldr	r3, [r7, #4]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	028c1979 	.word	0x028c1979

08005fc0 <_nx_dhcp_update_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_timeout(ULONG timeout)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

    /* Timed out, double the timeout, limited to NX_DHCP_MAX_RETRANS_TIMEOUT */
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8005fd0:	d303      	bcc.n	8005fda <_nx_dhcp_update_timeout+0x1a>
    {

        /* Set the timeout as NX_DHCP_MAX_RETRANS_TIMEOUT.  */
        timeout = NX_DHCP_MAX_RETRANS_TIMEOUT;  
 8005fd2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	e002      	b.n	8005fe0 <_nx_dhcp_update_timeout+0x20>
    }
    else
    {

        /* Double timeout value.  */
        timeout = timeout * 2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	607b      	str	r3, [r7, #4]
    }

    /* Return the sequence timeout.  */
    return(timeout);
 8005fe0:	687b      	ldr	r3, [r7, #4]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <_nx_dhcp_update_renewal_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_renewal_timeout(ULONG timeout)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]

    /* check if the timeout is non zero */
    if (timeout != 0)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d010      	beq.n	800601e <_nx_dhcp_update_renewal_timeout+0x30>
    {

        /* Timed out, halve the timeout, limited to NX_DHCP_MIN_RENEW_TIMEOUT or
          the remaining timeout if it is less than NX_DHCP_MIN_RENEW_TIMEOUT */
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f241 7270 	movw	r2, #6000	; 0x1770
 8006002:	4293      	cmp	r3, r2
 8006004:	d90b      	bls.n	800601e <_nx_dhcp_update_renewal_timeout+0x30>
        {

            /* Timeout can still decrease, either
               force it to the minimum or halve it */
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800600c:	4293      	cmp	r3, r2
 800600e:	d903      	bls.n	8006018 <_nx_dhcp_update_renewal_timeout+0x2a>
            {

                /* Halve timeout.  */
                timeout = timeout / 2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	607b      	str	r3, [r7, #4]
 8006016:	e002      	b.n	800601e <_nx_dhcp_update_renewal_timeout+0x30>
            }
            else
            {

                /* set timeout to minimum.  */
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 8006018:	f241 7370 	movw	r3, #6000	; 0x1770
 800601c:	607b      	str	r3, [r7, #4]
            }
        }
    }

    /* Return the sequence timeout.  */
    return(timeout);
 800601e:	687b      	ldr	r3, [r7, #4]
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <_nx_dhcp_search_buffer>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UCHAR  *_nx_dhcp_search_buffer(UCHAR *option_message, UINT option, UINT length)
{
 800602c:	b480      	push	{r7}
 800602e:	b089      	sub	sp, #36	; 0x24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
UCHAR   *data;
UINT    i;
UINT    size;

    /* Setup buffer pointer.  */
    data = option_message;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	61fb      	str	r3, [r7, #28]
    i = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	61bb      	str	r3, [r7, #24]

    /* Search as long as there are valid options.   */
    while (i < length - 1)
 8006040:	e030      	b.n	80060a4 <_nx_dhcp_search_buffer+0x78>
    {

        /* Simply skip any padding */
        if (*data == NX_DHCP_OPTION_PAD)
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <_nx_dhcp_search_buffer+0x2c>
        {

            data++;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3301      	adds	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
            i++;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	3301      	adds	r3, #1
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e025      	b.n	80060a4 <_nx_dhcp_search_buffer+0x78>
        }

        /* On a match, return a pointer to the size.  */
        else if (*data == option)
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4293      	cmp	r3, r2
 8006062:	d10f      	bne.n	8006084 <_nx_dhcp_search_buffer+0x58>
        {

            size = *(data + 1);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3301      	adds	r3, #1
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	617b      	str	r3, [r7, #20]

            /* Check if the option data is in the packet.  */
            if ((i + size + 1) > length)
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	4413      	add	r3, r2
 8006072:	3301      	adds	r3, #1
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d201      	bcs.n	800607e <_nx_dhcp_search_buffer+0x52>
                return(NX_NULL);
 800607a:	2300      	movs	r3, #0
 800607c:	e018      	b.n	80060b0 <_nx_dhcp_search_buffer+0x84>

            /* Return a pointer to the option size byte.  */
            return(data + 1);
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3301      	adds	r3, #1
 8006082:	e015      	b.n	80060b0 <_nx_dhcp_search_buffer+0x84>

        /* Otherwise skip the option by adding the size to the pointer.  */
        else
        {

            size = *(++data);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	617b      	str	r3, [r7, #20]

            /* skip the data plus the size byte */
            data += size + 1;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3301      	adds	r3, #1
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	61fb      	str	r3, [r7, #28]
            i += size + 1;
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	4413      	add	r3, r2
 80060a0:	3301      	adds	r3, #1
 80060a2:	61bb      	str	r3, [r7, #24]
    while (i < length - 1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d3c9      	bcc.n	8006042 <_nx_dhcp_search_buffer+0x16>
        }
    }

    /* Return NULL to indicate the option was not found.  */
    return(NX_NULL);
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3724      	adds	r7, #36	; 0x24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <_nx_dhcp_get_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG  _nx_dhcp_get_data(UCHAR *data, UINT size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]

ULONG   value = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]

   
    /* Process the data retrieval request.  */
    while (size-- > 0)
 80060ca:	e007      	b.n	80060dc <_nx_dhcp_get_data+0x20>
    {

        /* Build return value.  */
        value = (value << 8) | *data++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	1c59      	adds	r1, r3, #1
 80060d4:	6079      	str	r1, [r7, #4]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
    while (size-- > 0)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	603a      	str	r2, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f2      	bne.n	80060cc <_nx_dhcp_get_data+0x10>
    }

    /* Return value.  */
    return(value);
 80060e6:	68fb      	ldr	r3, [r7, #12]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <_nx_dhcp_store_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_store_data(UCHAR *data, UINT size, ULONG value)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]

    /* Make sure that data is left justified.  */
    switch (size)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b03      	cmp	r3, #3
 8006104:	d011      	beq.n	800612a <_nx_dhcp_store_data+0x36>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d812      	bhi.n	8006132 <_nx_dhcp_store_data+0x3e>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d003      	beq.n	800611a <_nx_dhcp_store_data+0x26>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d004      	beq.n	8006122 <_nx_dhcp_store_data+0x2e>
      
            value <<= 8;
            break;

        default:
            break;
 8006118:	e00b      	b.n	8006132 <_nx_dhcp_store_data+0x3e>
            value <<= 24;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	061b      	lsls	r3, r3, #24
 800611e:	607b      	str	r3, [r7, #4]
            break;
 8006120:	e008      	b.n	8006134 <_nx_dhcp_store_data+0x40>
            value <<= 16;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	607b      	str	r3, [r7, #4]
            break;
 8006128:	e004      	b.n	8006134 <_nx_dhcp_store_data+0x40>
            value <<= 8;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	607b      	str	r3, [r7, #4]
            break;
 8006130:	e000      	b.n	8006134 <_nx_dhcp_store_data+0x40>
            break;
 8006132:	bf00      	nop
    }

    /* Store the value.  */
    while (size-- > 0)
 8006134:	e00a      	b.n	800614c <_nx_dhcp_store_data+0x58>
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	701a      	strb	r2, [r3, #0]
        data++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
        value <<= 8;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	607b      	str	r3, [r7, #4]
    while (size-- > 0)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1e5a      	subs	r2, r3, #1
 8006150:	60ba      	str	r2, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1ef      	bne.n	8006136 <_nx_dhcp_store_data+0x42>
    }
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <_nx_dhcp_move_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 8006170:	e007      	b.n	8006182 <_nx_dhcp_move_string+0x1e>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	1c53      	adds	r3, r2, #1
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	60f9      	str	r1, [r7, #12]
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	701a      	strb	r2, [r3, #0]
    while (size-- > 0)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1e5a      	subs	r2, r3, #1
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f2      	bne.n	8006172 <_nx_dhcp_move_string+0xe>
    }
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <_nx_dhcp_interface_record_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_dhcp_interface_record_find(NX_DHCP *dhcp_ptr, UINT iface_index, NX_DHCP_INTERFACE_RECORD **interface_record)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]

UINT i;

    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e02c      	b.n	8006206 <_nx_dhcp_interface_record_find+0x6c>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	441a      	add	r2, r3
 80061ba:	f641 5388 	movw	r3, #7560	; 0x1d88
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01b      	beq.n	80061fe <_nx_dhcp_interface_record_find+0x64>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80061ce:	fb01 f303 	mul.w	r3, r1, r3
 80061d2:	441a      	add	r2, r3
 80061d4:	f641 53a4 	movw	r3, #7588	; 0x1da4
 80061d8:	4413      	add	r3, r2
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d10e      	bne.n	8006200 <_nx_dhcp_interface_record_find+0x66>
        {

            /* Yes, we found the record.  */
            *interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80061e8:	fb03 f202 	mul.w	r2, r3, r2
 80061ec:	f641 5388 	movw	r3, #7560	; 0x1d88
 80061f0:	4413      	add	r3, r2
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]

            /* Return.  */
            return (NX_SUCCESS);
 80061fa:	2300      	movs	r3, #0
 80061fc:	e007      	b.n	800620e <_nx_dhcp_interface_record_find+0x74>
            continue;
 80061fe:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	3301      	adds	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0cf      	beq.n	80061ac <_nx_dhcp_interface_record_find+0x12>
        }
    }

    /* No matching record found.  */
    return (NX_DHCP_INTERFACE_NOT_ENABLED);
 800620c:	23a4      	movs	r3, #164	; 0xa4
}
 800620e:	4618      	mov	r0, r3
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006226:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006228:	4908      	ldr	r1, [pc, #32]	; (800624c <nx_eth_phy_init+0x30>)
 800622a:	4809      	ldr	r0, [pc, #36]	; (8006250 <nx_eth_phy_init+0x34>)
 800622c:	f7fb f86d 	bl	800130a <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8006230:	4807      	ldr	r0, [pc, #28]	; (8006250 <nx_eth_phy_init+0x34>)
 8006232:	f7fb f89c 	bl	800136e <LAN8742_Init>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8006240:	687b      	ldr	r3, [r7, #4]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000010 	.word	0x20000010
 8006250:	20017c00 	.word	0x20017c00

08006254 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 800625a:	4804      	ldr	r0, [pc, #16]	; (800626c <nx_eth_phy_get_link_state+0x18>)
 800625c:	f7fb f92f 	bl	80014be <LAN8742_GetLinkState>
 8006260:	6078      	str	r0, [r7, #4]

    return linkstate;
 8006262:	687b      	ldr	r3, [r7, #4]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20017c00 	.word	0x20017c00

08006270 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8006274:	4802      	ldr	r0, [pc, #8]	; (8006280 <lan8742_io_init+0x10>)
 8006276:	f7fc f8d3 	bl	8002420 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20017af0 	.word	0x20017af0

08006284 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	68f9      	ldr	r1, [r7, #12]
 80062a6:	4807      	ldr	r0, [pc, #28]	; (80062c4 <lan8742_io_read_reg+0x30>)
 80062a8:	f7fb fefa 	bl	80020a0 <HAL_ETH_ReadPHYRegister>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b6:	e000      	b.n	80062ba <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20017af0 	.word	0x20017af0

080062c8 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	68f9      	ldr	r1, [r7, #12]
 80062da:	4807      	ldr	r0, [pc, #28]	; (80062f8 <lan8742_io_write_reg+0x30>)
 80062dc:	f7fb ff2b 	bl	8002136 <HAL_ETH_WritePHYRegister>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ea:	e000      	b.n	80062ee <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20017af0 	.word	0x20017af0

080062fc <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006300:	f7fb f986 	bl	8001610 <HAL_GetTick>
 8006304:	4603      	mov	r3, r0
}
 8006306:	4618      	mov	r0, r3
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800631e:	2320      	movs	r3, #32
 8006320:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006322:	f3bf 8f4f 	dsb	sy
}
 8006326:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006328:	e00b      	b.n	8006342 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800632a:	4a0d      	ldr	r2, [pc, #52]	; (8006360 <SCB_InvalidateDCache_by_Addr+0x54>)
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	dcf0      	bgt.n	800632a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006348:	f3bf 8f4f 	dsb	sy
}
 800634c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800634e:	f3bf 8f6f 	isb	sy
}
 8006352:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	e000ed00 	.word	0xe000ed00

08006364 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006376:	2320      	movs	r3, #32
 8006378:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800637a:	f3bf 8f4f 	dsb	sy
}
 800637e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006380:	e00b      	b.n	800639a <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8006382:	4a0d      	ldr	r2, [pc, #52]	; (80063b8 <SCB_CleanDCache_by_Addr+0x54>)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dcf0      	bgt.n	8006382 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80063a0:	f3bf 8f4f 	dsb	sy
}
 80063a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80063a6:	f3bf 8f6f 	isb	sy
}
 80063aa:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	e000ed00 	.word	0xe000ed00

080063bc <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b13      	cmp	r3, #19
 80063d0:	d84e      	bhi.n	8006470 <nx_stm32_eth_driver+0xb4>
 80063d2:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <nx_stm32_eth_driver+0x1c>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	08006449 	.word	0x08006449
 80063dc:	08006431 	.word	0x08006431
 80063e0:	08006439 	.word	0x08006439
 80063e4:	08006441 	.word	0x08006441
 80063e8:	08006449 	.word	0x08006449
 80063ec:	08006449 	.word	0x08006449
 80063f0:	08006449 	.word	0x08006449
 80063f4:	08006449 	.word	0x08006449
 80063f8:	08006451 	.word	0x08006451
 80063fc:	08006459 	.word	0x08006459
 8006400:	08006461 	.word	0x08006461
 8006404:	08006471 	.word	0x08006471
 8006408:	08006471 	.word	0x08006471
 800640c:	08006471 	.word	0x08006471
 8006410:	08006471 	.word	0x08006471
 8006414:	08006471 	.word	0x08006471
 8006418:	08006471 	.word	0x08006471
 800641c:	08006471 	.word	0x08006471
 8006420:	08006469 	.word	0x08006469
 8006424:	08006429 	.word	0x08006429
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f82d 	bl	8006488 <_nx_driver_interface_attach>
    break;
 800642e:	e026      	b.n	800647e <nx_stm32_eth_driver+0xc2>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f83d 	bl	80064b0 <_nx_driver_initialize>
      break;
 8006436:	e022      	b.n	800647e <nx_stm32_eth_driver+0xc2>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f89b 	bl	8006574 <_nx_driver_enable>
      break;
 800643e:	e01e      	b.n	800647e <nx_stm32_eth_driver+0xc2>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f91f 	bl	8006684 <_nx_driver_disable>
      break;
 8006446:	e01a      	b.n	800647e <nx_stm32_eth_driver+0xc2>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f945 	bl	80066d8 <_nx_driver_packet_send>
      break;
 800644e:	e016      	b.n	800647e <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa03 	bl	800685c <_nx_driver_multicast_join>
      break;
 8006456:	e012      	b.n	800647e <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa15 	bl	8006888 <_nx_driver_multicast_leave>
      break;
 800645e:	e00e      	b.n	800647e <nx_stm32_eth_driver+0xc2>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fa27 	bl	80068b4 <_nx_driver_get_status>
      break;
 8006466:	e00a      	b.n	800647e <nx_stm32_eth_driver+0xc2>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa39 	bl	80068e0 <_nx_driver_deferred_processing>

      break;
 800646e:	e006      	b.n	800647e <nx_stm32_eth_driver+0xc2>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2244      	movs	r2, #68	; 0x44
 8006474:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	225a      	movs	r2, #90	; 0x5a
 800647a:	605a      	str	r2, [r3, #4]
  }
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop

08006488 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	4a05      	ldr	r2, [pc, #20]	; (80064ac <_nx_driver_interface_attach+0x24>)
 8006496:	60d3      	str	r3, [r2, #12]
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20017c20 	.word	0x20017c20

080064b0 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  NX_INTERFACE    *interface_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	617b      	str	r3, [r7, #20]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	613b      	str	r3, [r7, #16]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 80064c4:	4b29      	ldr	r3, [pc, #164]	; (800656c <_nx_driver_initialize+0xbc>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 80064ca:	4b28      	ldr	r3, [pc, #160]	; (800656c <_nx_driver_initialize+0xbc>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80064d6:	4a25      	ldr	r2, [pc, #148]	; (800656c <_nx_driver_initialize+0xbc>)
 80064d8:	6093      	str	r3, [r2, #8]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 80064da:	4b24      	ldr	r3, [pc, #144]	; (800656c <_nx_driver_initialize+0xbc>)
 80064dc:	2200      	movs	r2, #0
 80064de:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa93 	bl	8006a0c <_nx_driver_hardware_initialize>
 80064e6:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d136      	bne.n	800655c <_nx_driver_initialize+0xac>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	4a1e      	ldr	r2, [pc, #120]	; (800656c <_nx_driver_initialize+0xbc>)
 80064f4:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 80064fe:	4b1c      	ldr	r3, [pc, #112]	; (8006570 <_nx_driver_initialize+0xc0>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <_nx_driver_initialize+0xc0>)
 8006508:	6852      	ldr	r2, [r2, #4]
 800650a:	3201      	adds	r2, #1
 800650c:	7812      	ldrb	r2, [r2, #0]
 800650e:	4313      	orrs	r3, r2
 8006510:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8006516:	4b16      	ldr	r3, [pc, #88]	; (8006570 <_nx_driver_initialize+0xc0>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	3302      	adds	r3, #2
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	061a      	lsls	r2, r3, #24
 8006520:	4b13      	ldr	r3, [pc, #76]	; (8006570 <_nx_driver_initialize+0xc0>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	3303      	adds	r3, #3
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <_nx_driver_initialize+0xc0>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8006536:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8006538:	4a0d      	ldr	r2, [pc, #52]	; (8006570 <_nx_driver_initialize+0xc0>)
 800653a:	6852      	ldr	r2, [r2, #4]
 800653c:	3205      	adds	r2, #5
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8006542:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2201      	movs	r2, #1
 800654c:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 800654e:	4b07      	ldr	r3, [pc, #28]	; (800656c <_nx_driver_initialize+0xbc>)
 8006550:	2203      	movs	r2, #3
 8006552:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 800655a:	e002      	b.n	8006562 <_nx_driver_initialize+0xb2>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	225a      	movs	r2, #90	; 0x5a
 8006560:	605a      	str	r2, [r3, #4]
}
 8006562:	bf00      	nop
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20017c20 	.word	0x20017c20
 8006570:	20017af0 	.word	0x20017af0

08006574 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b0a0      	sub	sp, #128	; 0x80
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8006586:	4b3d      	ldr	r3, [pc, #244]	; (800667c <_nx_driver_enable+0x108>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d803      	bhi.n	8006596 <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	225a      	movs	r2, #90	; 0x5a
 8006592:	605a      	str	r2, [r3, #4]
    return;
 8006594:	e06e      	b.n	8006674 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8006596:	4b39      	ldr	r3, [pc, #228]	; (800667c <_nx_driver_enable+0x108>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b03      	cmp	r3, #3
 800659c:	d903      	bls.n	80065a6 <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2215      	movs	r2, #21
 80065a2:	605a      	str	r2, [r3, #4]
    return;
 80065a4:	e066      	b.n	8006674 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 80065a6:	f7ff fe39 	bl	800621c <nx_eth_phy_init>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	225a      	movs	r2, #90	; 0x5a
 80065b4:	605a      	str	r2, [r3, #4]
    return;
 80065b6:	e05d      	b.n	8006674 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 80065b8:	f7ff fe4c 	bl	8006254 <nx_eth_phy_get_link_state>
 80065bc:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 80065be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	dc03      	bgt.n	80065cc <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	225a      	movs	r2, #90	; 0x5a
 80065c8:	605a      	str	r2, [r3, #4]
    return;
 80065ca:	e053      	b.n	8006674 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 80065cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ce:	3b02      	subs	r3, #2
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d823      	bhi.n	800661c <_nx_driver_enable+0xa8>
 80065d4:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <_nx_driver_enable+0x68>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	080065ed 	.word	0x080065ed
 80065e0:	080065fb 	.word	0x080065fb
 80065e4:	08006607 	.word	0x08006607
 80065e8:	08006613 	.word	0x08006613
    {
    case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80065ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065f0:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 80065f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065f6:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80065f8:	e017      	b.n	800662a <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 80065fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006602:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8006604:	e011      	b.n	800662a <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800660a:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 800660c:	2300      	movs	r3, #0
 800660e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8006610:	e00b      	b.n	800662a <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006612:	2300      	movs	r3, #0
 8006614:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8006616:	2300      	movs	r3, #0
 8006618:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800661a:	e006      	b.n	800662a <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 800661c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006620:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8006622:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006626:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8006628:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	4619      	mov	r1, r3
 8006630:	4813      	ldr	r0, [pc, #76]	; (8006680 <_nx_driver_enable+0x10c>)
 8006632:	f7fb fdc9 	bl	80021c8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006638:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 800663a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800663c:	61fb      	str	r3, [r7, #28]
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 800663e:	f107 0308 	add.w	r3, r7, #8
 8006642:	4619      	mov	r1, r3
 8006644:	480e      	ldr	r0, [pc, #56]	; (8006680 <_nx_driver_enable+0x10c>)
 8006646:	f7fb feb6 	bl	80023b6 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa60 	bl	8006b10 <_nx_driver_hardware_enable>
 8006650:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8006652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8006658:	4b08      	ldr	r3, [pc, #32]	; (800667c <_nx_driver_enable+0x108>)
 800665a:	2204      	movs	r2, #4
 800665c:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8006664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 800666c:	e002      	b.n	8006674 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	225a      	movs	r2, #90	; 0x5a
 8006672:	605a      	str	r2, [r3, #4]
  }
}
 8006674:	3780      	adds	r7, #128	; 0x80
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20017c20 	.word	0x20017c20
 8006680:	20017af0 	.word	0x20017af0

08006684 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <_nx_driver_disable+0x50>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b04      	cmp	r3, #4
 8006698:	d003      	beq.n	80066a2 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	225a      	movs	r2, #90	; 0x5a
 800669e:	605a      	str	r2, [r3, #4]
    return;
 80066a0:	e014      	b.n	80066cc <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa42 	bl	8006b2c <_nx_driver_hardware_disable>
 80066a8:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <_nx_driver_disable+0x50>)
 80066ba:	2203      	movs	r2, #3
 80066bc:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	605a      	str	r2, [r3, #4]
 80066c4:	e002      	b.n	80066cc <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	225a      	movs	r2, #90	; 0x5a
 80066ca:	605a      	str	r2, [r3, #4]
  }
}
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20017c20 	.word	0x20017c20

080066d8 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 80066e6:	4b5c      	ldr	r3, [pc, #368]	; (8006858 <_nx_driver_packet_send+0x180>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d008      	beq.n	8006700 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	225a      	movs	r2, #90	; 0x5a
 80066f2:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3310      	adds	r3, #16
 80066f8:	4618      	mov	r0, r3
 80066fa:	f005 ff69 	bl	800c5d0 <_nxe_packet_transmit_release>
    return;
 80066fe:	e0a7      	b.n	8006850 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 800670a:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 800670c:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 800670e:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	320e      	adds	r2, #14
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	3b02      	subs	r3, #2
 8006720:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	3304      	adds	r3, #4
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68d2      	ldr	r2, [r2, #12]
 8006732:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 800673a:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8006742:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3308      	adds	r3, #8
 8006748:	430a      	orrs	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f8d3 272c 	ldr.w	r2, [r3, #1836]	; 0x72c
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	330c      	adds	r3, #12
 8006756:	0412      	lsls	r2, r2, #16
 8006758:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b05      	cmp	r3, #5
 8006760:	d003      	beq.n	800676a <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8006766:	2b06      	cmp	r3, #6
 8006768:	d10a      	bne.n	8006780 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	330c      	adds	r3, #12
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f103 020c 	add.w	r2, r3, #12
 8006776:	f640 0306 	movw	r3, #2054	; 0x806
 800677a:	430b      	orrs	r3, r1
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e016      	b.n	80067ae <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b07      	cmp	r3, #7
 8006786:	d10a      	bne.n	800679e <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	330c      	adds	r3, #12
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f103 020c 	add.w	r2, r3, #12
 8006794:	f248 0335 	movw	r3, #32821	; 0x8035
 8006798:	430b      	orrs	r3, r1
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	e007      	b.n	80067ae <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	330c      	adds	r3, #12
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	330c      	adds	r3, #12
 80067a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ac:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	ba1a      	rev	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3304      	adds	r3, #4
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	3304      	adds	r3, #4
 80067c2:	ba12      	rev	r2, r2
 80067c4:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3308      	adds	r3, #8
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3308      	adds	r3, #8
 80067d0:	ba12      	rev	r2, r2
 80067d2:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	330c      	adds	r3, #12
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	330c      	adds	r3, #12
 80067de:	ba12      	rev	r2, r2
 80067e0:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d912      	bls.n	8006814 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	320e      	adds	r2, #14
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3a0e      	subs	r2, #14
 8006800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	225a      	movs	r2, #90	; 0x5a
 8006806:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	4618      	mov	r0, r3
 800680e:	f005 fedf 	bl	800c5d0 <_nxe_packet_transmit_release>
    return;
 8006812:	e01d      	b.n	8006850 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f996 	bl	8006b48 <_nx_driver_hardware_packet_send>
 800681c:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	320e      	adds	r2, #14
 800682c:	609a      	str	r2, [r3, #8]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	3a0e      	subs	r2, #14
 8006836:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	225a      	movs	r2, #90	; 0x5a
 800683c:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800683e:	f107 0308 	add.w	r3, r7, #8
 8006842:	4618      	mov	r0, r3
 8006844:	f005 fec4 	bl	800c5d0 <_nxe_packet_transmit_release>
 8006848:	e002      	b.n	8006850 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	605a      	str	r2, [r3, #4]
  }
}
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20017c20 	.word	0x20017c20

0800685c <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f9ff 	bl	8006c68 <_nx_driver_hardware_multicast_join>
 800686a:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	225a      	movs	r2, #90	; 0x5a
 8006876:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8006878:	e002      	b.n	8006880 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	605a      	str	r2, [r3, #4]
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fa05 	bl	8006ca0 <_nx_driver_hardware_multicast_leave>
 8006896:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	225a      	movs	r2, #90	; 0x5a
 80068a2:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80068a4:	e002      	b.n	80068ac <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	605a      	str	r2, [r3, #4]
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa0f 	bl	8006ce0 <_nx_driver_hardware_get_status>
 80068c2:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	225a      	movs	r2, #90	; 0x5a
 80068ce:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80068d0:	e002      	b.n	80068d8 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	605a      	str	r2, [r3, #4]
}
 80068d8:	bf00      	nop
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80068e8:	f3ef 8310 	mrs	r3, PRIMASK
 80068ec:	613b      	str	r3, [r7, #16]
    return(posture);
 80068ee:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80068f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80068f2:	b672      	cpsid	i
    return(int_posture);
 80068f4:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 80068f6:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 80068f8:	4b10      	ldr	r3, [pc, #64]	; (800693c <_nx_driver_deferred_processing+0x5c>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 80068fe:	4b0f      	ldr	r3, [pc, #60]	; (800693c <_nx_driver_deferred_processing+0x5c>)
 8006900:	2200      	movs	r2, #0
 8006902:	611a      	str	r2, [r3, #16]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 800691a:	4809      	ldr	r0, [pc, #36]	; (8006940 <_nx_driver_deferred_processing+0x60>)
 800691c:	f7fb fa8c 	bl	8001e38 <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 800692a:	f000 fa0b 	bl	8006d44 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	605a      	str	r2, [r3, #4]
}
 8006934:	bf00      	nop
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	20017c20 	.word	0x20017c20
 8006940:	20017af0 	.word	0x20017af0

08006944 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	4a2d      	ldr	r2, [pc, #180]	; (8006a08 <_nx_driver_transfer_to_netx+0xc4>)
 8006952:	68d2      	ldr	r2, [r2, #12]
 8006954:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	330c      	adds	r3, #12
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	330d      	adds	r3, #13
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 800696e:	4313      	orrs	r3, r2
 8006970:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 8006972:	89fb      	ldrh	r3, [r7, #14]
 8006974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006978:	d004      	beq.n	8006984 <_nx_driver_transfer_to_netx+0x40>
 800697a:	89fb      	ldrh	r3, [r7, #14]
 800697c:	f248 62dd 	movw	r2, #34525	; 0x86dd
 8006980:	4293      	cmp	r3, r2
 8006982:	d10f      	bne.n	80069a4 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	320e      	adds	r2, #14
 800698c:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	3a0e      	subs	r2, #14
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f002 fb5c 	bl	800905a <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 80069a2:	e02d      	b.n	8006a00 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	f640 0206 	movw	r2, #2054	; 0x806
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d10f      	bne.n	80069ce <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	320e      	adds	r2, #14
 80069b6:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	3a0e      	subs	r2, #14
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fc05 	bl	80071d6 <_nx_arp_packet_deferred_receive>
}
 80069cc:	e018      	b.n	8006a00 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	f248 0235 	movw	r2, #32821	; 0x8035
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d10f      	bne.n	80069f8 <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	320e      	adds	r2, #14
 80069e0:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	3a0e      	subs	r2, #14
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f004 f83f 	bl	800aa74 <_nx_rarp_packet_deferred_receive>
}
 80069f6:	e003      	b.n	8006a00 <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 80069f8:	463b      	mov	r3, r7
 80069fa:	4618      	mov	r0, r3
 80069fc:	f005 fdb0 	bl	800c560 <_nxe_packet_release>
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20017c20 	.word	0x20017c20

08006a0c <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	; 0x38
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 8006a1a:	4b39      	ldr	r3, [pc, #228]	; (8006b00 <_nx_driver_hardware_initialize+0xf4>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 8006a20:	4b37      	ldr	r3, [pc, #220]	; (8006b00 <_nx_driver_hardware_initialize+0xf4>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 8006a26:	4b36      	ldr	r3, [pc, #216]	; (8006b00 <_nx_driver_hardware_initialize+0xf4>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 8006a2c:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <_nx_driver_hardware_initialize+0xf4>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 8006a32:	4b33      	ldr	r3, [pc, #204]	; (8006b00 <_nx_driver_hardware_initialize+0xf4>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 8006a3a:	235a      	movs	r3, #90	; 0x5a
 8006a3c:	e05b      	b.n	8006af6 <_nx_driver_hardware_initialize+0xea>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006a42:	2301      	movs	r3, #1
 8006a44:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a4a:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.SecondPacketOperate = ENABLE;
  dmaDefaultConf.TCPSegmentation = DISABLE;
  dmaDefaultConf.MaximumSegmentSize = 536;
#endif
#ifdef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	763b      	strb	r3, [r7, #24]
  dmaDefaultConf.ReceiveStoreForward =  DISABLE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	767b      	strb	r3, [r7, #25]
  dmaDefaultConf.TransmitStoreForward =  ENABLE;
 8006a66:	2301      	movs	r3, #1
 8006a68:	76bb      	strb	r3, [r7, #26]
  dmaDefaultConf.TransmitThresholdControl =  ENABLE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.ForwardErrorFrames =  DISABLE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  dmaDefaultConf.ReceiveThresholdControl =  DISABLE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	481d      	ldr	r0, [pc, #116]	; (8006b04 <_nx_driver_hardware_initialize+0xf8>)
 8006a90:	f7fb fcab 	bl	80023ea <HAL_ETH_SetDMAConfig>

  FilterConfig.PromiscuousMode = DISABLE;
 8006a94:	4b1c      	ldr	r3, [pc, #112]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]
  FilterConfig.HashUnicast = DISABLE;
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 8006aa0:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 8006aa6:	4b18      	ldr	r3, [pc, #96]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 8006aac:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 8006ab8:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 8006ac4:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 8006aca:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <_nx_driver_hardware_initialize+0xfc>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8006ad6:	2238      	movs	r2, #56	; 0x38
 8006ad8:	2100      	movs	r1, #0
 8006ada:	480c      	ldr	r0, [pc, #48]	; (8006b0c <_nx_driver_hardware_initialize+0x100>)
 8006adc:	f009 f9c1 	bl	800fe62 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <_nx_driver_hardware_initialize+0x100>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <_nx_driver_hardware_initialize+0x100>)
 8006ae8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8006aec:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <_nx_driver_hardware_initialize+0xf4>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3738      	adds	r7, #56	; 0x38
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20017c20 	.word	0x20017c20
 8006b04:	20017af0 	.word	0x20017af0
 8006b08:	20017ca4 	.word	0x20017ca4
 8006b0c:	20017c6c 	.word	0x20017c6c

08006b10 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 8006b18:	4803      	ldr	r0, [pc, #12]	; (8006b28 <_nx_driver_hardware_enable+0x18>)
 8006b1a:	f7fa ff25 	bl	8001968 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20017af0 	.word	0x20017af0

08006b2c <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 8006b34:	4803      	ldr	r0, [pc, #12]	; (8006b44 <_nx_driver_hardware_disable+0x18>)
 8006b36:	f7fa ff87 	bl	8001a48 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20017af0 	.word	0x20017af0

08006b48 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b092      	sub	sp, #72	; 0x48
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	643b      	str	r3, [r7, #64]	; 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006b54:	f107 030c 	add.w	r3, r7, #12
 8006b58:	2230      	movs	r2, #48	; 0x30
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f009 f980 	bl	800fe62 <memset>


  int i = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6a:	e05a      	b.n	8006c22 <_nx_driver_hardware_packet_send+0xda>
  {
    if (i >= ETH_TX_DESC_CNT)
 8006b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d901      	bls.n	8006b76 <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 8006b72:	235a      	movs	r3, #90	; 0x5a
 8006b74:	e06f      	b.n	8006c56 <_nx_driver_hardware_packet_send+0x10e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 8006b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b78:	6899      	ldr	r1, [r3, #8]
 8006b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	3348      	adds	r3, #72	; 0x48
 8006b86:	443b      	add	r3, r7
 8006b88:	3b3c      	subs	r3, #60	; 0x3c
 8006b8a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8006b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	3348      	adds	r3, #72	; 0x48
 8006ba4:	443b      	add	r3, r7
 8006ba6:	3b38      	subs	r3, #56	; 0x38
 8006ba8:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8006baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb8:	4413      	add	r3, r2
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40

    if(i>0)
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dd11      	ble.n	8006be6 <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc4:	1e5a      	subs	r2, r3, #1
 8006bc6:	f107 000c 	add.w	r0, r7, #12
 8006bca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bcc:	460b      	mov	r3, r1
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	440b      	add	r3, r1
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	18c1      	adds	r1, r0, r3
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	3348      	adds	r3, #72	; 0x48
 8006be0:	443b      	add	r3, r7
 8006be2:	3b34      	subs	r3, #52	; 0x34
 8006be4:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 8006be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 8006bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	3348      	adds	r3, #72	; 0x48
 8006bfa:	443b      	add	r3, r7
 8006bfc:	3b34      	subs	r3, #52	; 0x34
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c04:	3301      	adds	r3, #1
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
 8006c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0a:	6918      	ldr	r0, [r3, #16]
 8006c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	4619      	mov	r1, r3
 8006c18:	f7ff fba4 	bl	8006364 <SCB_CleanDCache_by_Addr>
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	647b      	str	r3, [r7, #68]	; 0x44
 8006c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1a1      	bne.n	8006b6c <_nx_driver_hardware_packet_send+0x24>
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
 8006c28:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <_nx_driver_hardware_packet_send+0x118>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	615a      	str	r2, [r3, #20]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 8006c2e:	4a0c      	ldr	r2, [pc, #48]	; (8006c60 <_nx_driver_hardware_packet_send+0x118>)
 8006c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c32:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 8006c34:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <_nx_driver_hardware_packet_send+0x118>)
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 8006c3c:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <_nx_driver_hardware_packet_send+0x118>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 8006c42:	4907      	ldr	r1, [pc, #28]	; (8006c60 <_nx_driver_hardware_packet_send+0x118>)
 8006c44:	4807      	ldr	r0, [pc, #28]	; (8006c64 <_nx_driver_hardware_packet_send+0x11c>)
 8006c46:	f7fa ff58 	bl	8001afa <HAL_ETH_Transmit_IT>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <_nx_driver_hardware_packet_send+0x10c>
  {
    return(NX_DRIVER_ERROR);
 8006c50:	235a      	movs	r3, #90	; 0x5a
 8006c52:	e000      	b.n	8006c56 <_nx_driver_hardware_packet_send+0x10e>
  }

  return(NX_SUCCESS);
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3748      	adds	r7, #72	; 0x48
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20017c6c 	.word	0x20017c6c
 8006c64:	20017af0 	.word	0x20017af0

08006c68 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8006c70:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <_nx_driver_hardware_multicast_join+0x2c>)
 8006c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c74:	3301      	adds	r3, #1
 8006c76:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <_nx_driver_hardware_multicast_join+0x2c>)
 8006c78:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <_nx_driver_hardware_multicast_join+0x30>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8006c80:	4905      	ldr	r1, [pc, #20]	; (8006c98 <_nx_driver_hardware_multicast_join+0x30>)
 8006c82:	4806      	ldr	r0, [pc, #24]	; (8006c9c <_nx_driver_hardware_multicast_join+0x34>)
 8006c84:	f7fb fc0e 	bl	80024a4 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20017c20 	.word	0x20017c20
 8006c98:	20017ca4 	.word	0x20017ca4
 8006c9c:	20017af0 	.word	0x20017af0

08006ca0 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <_nx_driver_hardware_multicast_leave+0x34>)
 8006caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cac:	3b01      	subs	r3, #1
 8006cae:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <_nx_driver_hardware_multicast_leave+0x34>)
 8006cb0:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8006cb2:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <_nx_driver_hardware_multicast_leave+0x34>)
 8006cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <_nx_driver_hardware_multicast_leave+0x38>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8006cc0:	4905      	ldr	r1, [pc, #20]	; (8006cd8 <_nx_driver_hardware_multicast_leave+0x38>)
 8006cc2:	4806      	ldr	r0, [pc, #24]	; (8006cdc <_nx_driver_hardware_multicast_leave+0x3c>)
 8006cc4:	f7fb fbee 	bl	80024a4 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20017c20 	.word	0x20017c20
 8006cd8:	20017ca4 	.word	0x20017ca4
 8006cdc:	20017af0 	.word	0x20017af0

08006ce0 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8006ce8:	f7ff fab4 	bl	8006254 <nx_eth_phy_get_link_state>
 8006cec:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	dc04      	bgt.n	8006cfe <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if phsical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e003      	b.n	8006d06 <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if phsical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	320e      	adds	r2, #14
 8006d24:	609a      	str	r2, [r3, #8]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3a0e      	subs	r2, #14
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	4618      	mov	r0, r3
 8006d36:	f005 fc4b 	bl	800c5d0 <_nxe_packet_transmit_release>
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8006d4a:	e006      	b.n	8006d5a <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <_nx_driver_hardware_packet_received+0x30>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fdf5 	bl	8006944 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4806      	ldr	r0, [pc, #24]	; (8006d78 <_nx_driver_hardware_packet_received+0x34>)
 8006d60:	f7fa ff27 	bl	8001bb2 <HAL_ETH_ReadData>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <_nx_driver_hardware_packet_received+0x8>
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20017c20 	.word	0x20017c20
 8006d78:	20017af0 	.word	0x20017af0

08006d7c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8006d84:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <HAL_ETH_RxAllocateCallback+0x54>)
 8006d86:	6898      	ldr	r0, [r3, #8]
 8006d88:	f107 010c 	add.w	r1, r7, #12
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f005 fad6 	bl	800c340 <_nxe_packet_allocate>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d113      	bne.n	8006dc2 <HAL_ETH_RxAllocateCallback+0x46>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3202      	adds	r2, #2
 8006da2:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6918      	ldr	r0, [r3, #16]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	f7ff faaa 	bl	800630c <SCB_InvalidateDCache_by_Addr>
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 8006dc0:	e002      	b.n	8006dc8 <HAL_ETH_RxAllocateCallback+0x4c>
    *buff = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20017c20 	.word	0x20017c20

08006dd4 <HAL_ETH_RxLinkCallback>:
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/

void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	; 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - sizeof(NX_PACKET);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3b3a      	subs	r3, #58	; 0x3a
 8006dee:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	887b      	ldrh	r3, [r7, #2]
 8006dfa:	441a      	add	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 8006e00:	887a      	ldrh	r2, [r7, #2]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e003      	b.n	8006e1e <HAL_ETH_RxLinkCallback+0x4a>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	3724      	adds	r7, #36	; 0x24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_ETH_RxCpltCallback>:
}
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <HAL_ETH_RxCpltCallback+0x34>)
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <HAL_ETH_RxCpltCallback+0x34>)
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <HAL_ETH_RxCpltCallback+0x34>)
 8006e48:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <HAL_ETH_RxCpltCallback+0x34>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 fb3f 	bl	80084d8 <_nx_ip_driver_deferred_processing>
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20017c20 	.word	0x20017c20

08006e68 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <HAL_ETH_TxCpltCallback+0x34>)
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 8006e76:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <HAL_ETH_TxCpltCallback+0x34>)
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f043 0304 	orr.w	r3, r3, #4
 8006e7e:	4a07      	ldr	r2, [pc, #28]	; (8006e9c <HAL_ETH_TxCpltCallback+0x34>)
 8006e80:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <HAL_ETH_TxCpltCallback+0x34>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fb23 	bl	80084d8 <_nx_ip_driver_deferred_processing>
  }
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20017c20 	.word	0x20017c20

08006ea0 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d050      	beq.n	8006f54 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb6:	613b      	str	r3, [r7, #16]
    return(posture);
 8006eb8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8006eba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ebc:	b672      	cpsid	i
    return(int_posture);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8006ec0:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d104      	bne.n	8006ed6 <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e014      	b.n	8006f00 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d104      	bne.n	8006eec <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	6952      	ldr	r2, [r2, #20]
 8006eea:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	6992      	ldr	r2, [r2, #24]
 8006ef4:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	6952      	ldr	r2, [r2, #20]
 8006efe:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006f0c:	1e5a      	subs	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 8006f2c:	e00f      	b.n	8006f4e <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 8006f48:	6978      	ldr	r0, [r7, #20]
 8006f4a:	f003 fd4d 	bl	800a9e8 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1ec      	bne.n	8006f2e <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	2100      	movs	r1, #0
 8006f70:	68b8      	ldr	r0, [r7, #8]
 8006f72:	f008 ff76 	bl	800fe62 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a2d      	ldr	r2, [pc, #180]	; (8007034 <_nx_arp_enable+0xd4>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	091b      	lsrs	r3, r3, #4
 8006f84:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	e00a      	b.n	8006fa2 <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	3334      	adds	r3, #52	; 0x34
 8006f9a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d3ef      	bcc.n	8006f8c <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
 8006fb6:	e00a      	b.n	8006fce <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	3b34      	subs	r3, #52	; 0x34
 8006fc6:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d3ef      	bcc.n	8006fb8 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2234      	movs	r2, #52	; 0x34
 8006fdc:	fb02 f303 	mul.w	r3, r2, r3
 8006fe0:	3b34      	subs	r3, #52	; 0x34
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	441a      	add	r2, r3
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <_nx_arp_enable+0xd8>)
 800700e:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a09      	ldr	r2, [pc, #36]	; (800703c <_nx_arp_enable+0xdc>)
 8007016:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4a08      	ldr	r2, [pc, #32]	; (8007040 <_nx_arp_enable+0xe0>)
 800701e:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4a07      	ldr	r2, [pc, #28]	; (8007044 <_nx_arp_enable+0xe4>)
 8007026:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800702a:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	4ec4ec4f 	.word	0x4ec4ec4f
 8007038:	08007821 	.word	0x08007821
 800703c:	08007a1b 	.word	0x08007a1b
 8007040:	080076dd 	.word	0x080076dd
 8007044:	08007049 	.word	0x08007049

08007048 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80b4 	beq.w	80071c8 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 800706a:	6a39      	ldr	r1, [r7, #32]
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff ff17 	bl	8006ea0 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007072:	f3ef 8310 	mrs	r3, PRIMASK
 8007076:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007078:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800707a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800707c:	b672      	cpsid	i
    return(int_posture);
 800707e:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8007080:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d014      	beq.n	80070b4 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	6a3a      	ldr	r2, [r7, #32]
 80070a8:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6a3a      	ldr	r2, [r7, #32]
 80070b0:	619a      	str	r2, [r3, #24]
 80070b2:	e00b      	b.n	80070cc <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	6a3a      	ldr	r2, [r7, #32]
 80070c4:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6a3a      	ldr	r2, [r7, #32]
 80070ca:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d141      	bne.n	8007156 <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	6a3a      	ldr	r2, [r7, #32]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d104      	bne.n	80070e6 <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 80070e4:	e009      	b.n	80070fa <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	6a3a      	ldr	r2, [r7, #32]
 80070ec:	6912      	ldr	r2, [r2, #16]
 80070ee:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	6a3a      	ldr	r2, [r7, #32]
 80070f6:	68d2      	ldr	r2, [r2, #12]
 80070f8:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	6a3a      	ldr	r2, [r7, #32]
 800710e:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
 8007118:	e015      	b.n	8007146 <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 26cc 	ldr.w	r2, [r3, #1740]	; 0x6cc
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	6a3a      	ldr	r2, [r7, #32]
 800713a:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 8007142:	6a3a      	ldr	r2, [r7, #32]
 8007144:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007154:	e02c      	b.n	80071b0 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800715c:	6a3a      	ldr	r2, [r7, #32]
 800715e:	429a      	cmp	r2, r3
 8007160:	d01f      	beq.n	80071a2 <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	6912      	ldr	r2, [r2, #16]
 800716a:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	6a3a      	ldr	r2, [r7, #32]
 8007172:	68d2      	ldr	r2, [r2, #12]
 8007174:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	6a3a      	ldr	r2, [r7, #32]
 8007190:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	6a3a      	ldr	r2, [r7, #32]
 8007198:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a3a      	ldr	r2, [r7, #32]
 800719e:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f383 8810 	msr	PRIMASK, r3
}
 80071c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 80071c2:	2300      	movs	r3, #0
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
 80071c6:	e001      	b.n	80071cc <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 80071c8:	2317      	movs	r3, #23
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3728      	adds	r7, #40	; 0x28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b088      	sub	sp, #32
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071e0:	f3ef 8310 	mrs	r3, PRIMASK
 80071e4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80071e6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80071e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80071ea:	b672      	cpsid	i
    return(int_posture);
 80071ec:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80071ee:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d110      	bne.n	800721c <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f383 8810 	msr	PRIMASK, r3
}
 8007212:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8007214:	6838      	ldr	r0, [r7, #0]
 8007216:	f003 fb31 	bl	800a87c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800721a:	e02f      	b.n	800727c <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d011      	beq.n	800724a <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f383 8810 	msr	PRIMASK, r3
}
 8007248:	e018      	b.n	800727c <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2200      	movs	r2, #0
 800725e:	61da      	str	r2, [r3, #28]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f383 8810 	msr	PRIMASK, r3
}
 800726a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007272:	2200      	movs	r2, #0
 8007274:	2110      	movs	r1, #16
 8007276:	4618      	mov	r0, r3
 8007278:	f005 fc66 	bl	800cb48 <_tx_event_flags_set>
    }
}
 800727c:	3720      	adds	r7, #32
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <_nx_arp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007284:	b590      	push	{r4, r7, lr}
 8007286:	b097      	sub	sp, #92	; 0x5c
 8007288:	af02      	add	r7, sp, #8
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 800728e:	2300      	movs	r3, #0
 8007290:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	2b1b      	cmp	r3, #27
 800729a:	d80a      	bhi.n	80072b2 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 80072aa:	6838      	ldr	r0, [r7, #0]
 80072ac:	f003 fae6 	bl	800a87c <_nx_packet_release>

        /* Return to caller.  */
        return;
 80072b0:	e20f      	b.n	80076d2 <_nx_arp_packet_receive+0x44e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80072b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ba:	3304      	adds	r3, #4
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c0:	3304      	adds	r3, #4
 80072c2:	ba12      	rev	r2, r2
 80072c4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80072c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c8:	3308      	adds	r3, #8
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ce:	3308      	adds	r3, #8
 80072d0:	ba12      	rev	r2, r2
 80072d2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80072d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d6:	330c      	adds	r3, #12
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072dc:	330c      	adds	r3, #12
 80072de:	ba12      	rev	r2, r2
 80072e0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80072e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e4:	3310      	adds	r3, #16
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ea:	3310      	adds	r3, #16
 80072ec:	ba12      	rev	r2, r2
 80072ee:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80072f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f2:	3314      	adds	r3, #20
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f8:	3314      	adds	r3, #20
 80072fa:	ba12      	rev	r2, r2
 80072fc:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80072fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007300:	3318      	adds	r3, #24
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007306:	3318      	adds	r3, #24
 8007308:	ba12      	rev	r2, r2
 800730a:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 800730c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730e:	3304      	adds	r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8007316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d00d      	beq.n	8007338 <_nx_arp_packet_receive+0xb4>
 800731c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731e:	2b02      	cmp	r3, #2
 8007320:	d00a      	beq.n	8007338 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8007330:	6838      	ldr	r0, [r7, #0]
 8007332:	f003 faa3 	bl	800a87c <_nx_packet_release>

        /* Return to caller.  */
        return;
 8007336:	e1cc      	b.n	80076d2 <_nx_arp_packet_receive+0x44e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 8007338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733a:	3308      	adds	r3, #8
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8007342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007344:	3308      	adds	r3, #8
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	041a      	lsls	r2, r3, #16
 800734a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734c:	330c      	adds	r3, #12
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	4313      	orrs	r3, r2
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8007356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007358:	330c      	adds	r3, #12
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	041a      	lsls	r2, r3, #16
 800735e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007360:	3310      	adds	r3, #16
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	4313      	orrs	r3, r2
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 800736a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d12e      	bne.n	80073ee <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8007394:	2b00      	cmp	r3, #0
 8007396:	d02a      	beq.n	80073ee <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	429a      	cmp	r2, r3
 80073a0:	d007      	beq.n	80073b2 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d122      	bne.n	80073ee <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d11d      	bne.n	80073ee <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d104      	bne.n	80073c6 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 80073c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d00f      	beq.n	80073e6 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	79db      	ldrb	r3, [r3, #7]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 80073e6:	6838      	ldr	r0, [r7, #0]
 80073e8:	f003 fa48 	bl	800a87c <_nx_packet_release>

        return;
 80073ec:	e171      	b.n	80076d2 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d040      	beq.n	8007476 <_nx_arp_packet_receive+0x1f2>
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d13b      	bne.n	8007476 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007406:	429a      	cmp	r2, r3
 8007408:	d105      	bne.n	8007416 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8007410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007412:	429a      	cmp	r2, r3
 8007414:	d02b      	beq.n	800746e <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	220a      	movs	r2, #10
 8007426:	641a      	str	r2, [r3, #64]	; 0x40

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	461a      	mov	r2, r3
 800742e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f953 	bl	80076dc <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	79db      	ldrb	r3, [r3, #7]
 8007446:	4619      	mov	r1, r3
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3

                return;
 800746c:	e131      	b.n	80076d2 <_nx_arp_packet_receive+0x44e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 800746e:	6838      	ldr	r0, [r7, #0]
 8007470:	f003 fa04 	bl	800a87c <_nx_packet_release>

        return;
 8007474:	e12d      	b.n	80076d2 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8007476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007478:	2b01      	cmp	r3, #1
 800747a:	f040 808f 	bne.w	800759c <_nx_arp_packet_receive+0x318>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007486:	429a      	cmp	r2, r3
 8007488:	f040 8088 	bne.w	800759c <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 80074a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a2:	3304      	adds	r3, #4
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	4b8c      	ldr	r3, [pc, #560]	; (80076d8 <_nx_arp_packet_receive+0x454>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074ac:	3204      	adds	r2, #4
 80074ae:	f043 0302 	orr.w	r3, r3, #2
 80074b2:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 80074c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c6:	3308      	adds	r3, #8
 80074c8:	430a      	orrs	r2, r1
 80074ca:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 80074dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074de:	330c      	adds	r3, #12
 80074e0:	430a      	orrs	r2, r1
 80074e2:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	0419      	lsls	r1, r3, #16
 80074ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ee:	3310      	adds	r3, #16
 80074f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074f2:	430a      	orrs	r2, r1
 80074f4:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 80074f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f8:	3314      	adds	r3, #20
 80074fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fc:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 80074fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007500:	3318      	adds	r3, #24
 8007502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007504:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8007506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007508:	3304      	adds	r3, #4
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750e:	3304      	adds	r3, #4
 8007510:	ba12      	rev	r2, r2
 8007512:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8007514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007516:	3308      	adds	r3, #8
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751c:	3308      	adds	r3, #8
 800751e:	ba12      	rev	r2, r2
 8007520:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8007522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007524:	330c      	adds	r3, #12
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	330c      	adds	r3, #12
 800752c:	ba12      	rev	r2, r2
 800752e:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	3310      	adds	r3, #16
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007538:	3310      	adds	r3, #16
 800753a:	ba12      	rev	r2, r2
 800753c:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800753e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007540:	3314      	adds	r3, #20
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	3314      	adds	r3, #20
 8007548:	ba12      	rev	r2, r2
 800754a:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800754c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754e:	3318      	adds	r3, #24
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007554:	3318      	adds	r3, #24
 8007556:	ba12      	rev	r2, r2
 8007558:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	221c      	movs	r2, #28
 800755e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f103 021c 	add.w	r2, r3, #28
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8007570:	2306      	movs	r3, #6
 8007572:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	f107 0208 	add.w	r2, r7, #8
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800759a:	e00d      	b.n	80075b8 <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 800759c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d105      	bne.n	80075ae <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	671a      	str	r2, [r3, #112]	; 0x70
 80075ac:	e004      	b.n	80075b8 <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	0a1a      	lsrs	r2, r3, #8
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	4413      	add	r3, r2
 80075c0:	f003 031f 	and.w	r3, r3, #31
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d03c      	beq.n	800764a <_nx_arp_packet_receive+0x3c6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	0a1a      	lsrs	r2, r3, #8
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	4413      	add	r3, r2
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e2:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 80075ee:	e02c      	b.n	800764a <_nx_arp_packet_receive+0x3c6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 80075f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d117      	bne.n	800762a <_nx_arp_packet_receive+0x3a6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 80075fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d127      	bne.n	8007652 <_nx_arp_packet_receive+0x3ce>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8007602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007606:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8007608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800760c:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 800760e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007610:	2200      	movs	r2, #0
 8007612:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8007614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007616:	2200      	movs	r2, #0
 8007618:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 800761a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800761c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8007620:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa2c 	bl	8007a80 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8007628:	e014      	b.n	8007654 <_nx_arp_packet_receive+0x3d0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 800762a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007634:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007640:	429a      	cmp	r2, r3
 8007642:	d102      	bne.n	800764a <_nx_arp_packet_receive+0x3c6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8007644:	2300      	movs	r3, #0
 8007646:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8007648:	e004      	b.n	8007654 <_nx_arp_packet_receive+0x3d0>
    while (arp_ptr)
 800764a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1cf      	bne.n	80075f0 <_nx_arp_packet_receive+0x36c>
 8007650:	e000      	b.n	8007654 <_nx_arp_packet_receive+0x3d0>
                break;
 8007652:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8007654:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <_nx_arp_packet_receive+0x3de>
    {
        _nx_packet_release(packet_ptr);
 800765c:	6838      	ldr	r0, [r7, #0]
 800765e:	f003 f90d 	bl	800a87c <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8007662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007664:	2b00      	cmp	r3, #0
 8007666:	d134      	bne.n	80076d2 <_nx_arp_packet_receive+0x44e>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2b00      	cmp	r3, #0
 800766c:	d031      	beq.n	80076d2 <_nx_arp_packet_receive+0x44e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	0a1a      	lsrs	r2, r3, #8
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	4413      	add	r3, r2
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8007682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007684:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 8007688:	0092      	lsls	r2, r2, #2
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	440a      	add	r2, r1
 800768e:	1d11      	adds	r1, r2, #4
 8007690:	2200      	movs	r2, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11a      	bne.n	80076d2 <_nx_arp_packet_receive+0x44e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a0:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 80076ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b2:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 80076b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 80076ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076be:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 80076c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c2:	2200      	movs	r2, #0
 80076c4:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 80076c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c8:	2200      	movs	r2, #0
 80076ca:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 80076cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 80076d2:	3754      	adds	r7, #84	; 0x54
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd90      	pop	{r4, r7, pc}
 80076d8:	ffff0000 	.word	0xffff0000

080076dc <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08e      	sub	sp, #56	; 0x38
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <_nx_arp_packet_send+0x1c>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f2:	f006 fdff 	bl	800e2f4 <_tx_thread_sleep>
 80076f6:	e7fa      	b.n	80076ee <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 80076fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007702:	2300      	movs	r3, #0
 8007704:	222c      	movs	r2, #44	; 0x2c
 8007706:	f002 fc55 	bl	8009fb4 <_nx_packet_allocate>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	f040 8081 	bne.w	8007814 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	221c      	movs	r2, #28
 8007726:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	3a1c      	subs	r2, #28
 8007730:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 800773e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	3304      	adds	r3, #4
 8007744:	4a35      	ldr	r2, [pc, #212]	; (800781c <_nx_arp_packet_send+0x140>)
 8007746:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	3308      	adds	r3, #8
 8007758:	430a      	orrs	r2, r1
 800775a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	330c      	adds	r3, #12
 800776c:	430a      	orrs	r2, r1
 800776e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	695a      	ldr	r2, [r3, #20]
 8007774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007776:	3310      	adds	r3, #16
 8007778:	0412      	lsls	r2, r2, #16
 800777a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 800777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777e:	3314      	adds	r3, #20
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	3318      	adds	r3, #24
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	ba1a      	rev	r2, r3
 8007792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007794:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	3304      	adds	r3, #4
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	3304      	adds	r3, #4
 80077a0:	ba12      	rev	r2, r2
 80077a2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	3308      	adds	r3, #8
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	3308      	adds	r3, #8
 80077ae:	ba12      	rev	r2, r2
 80077b0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80077b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b4:	330c      	adds	r3, #12
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	330c      	adds	r3, #12
 80077bc:	ba12      	rev	r2, r2
 80077be:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	3310      	adds	r3, #16
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	3310      	adds	r3, #16
 80077ca:	ba12      	rev	r2, r2
 80077cc:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	3314      	adds	r3, #20
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	3314      	adds	r3, #20
 80077d8:	ba12      	rev	r2, r2
 80077da:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	3318      	adds	r3, #24
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	3318      	adds	r3, #24
 80077e6:	ba12      	rev	r2, r2
 80077e8:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 80077ee:	2305      	movs	r3, #5
 80077f0:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80077f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077fa:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80077fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007800:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780a:	f107 0210 	add.w	r2, r7, #16
 800780e:	4610      	mov	r0, r2
 8007810:	4798      	blx	r3
 8007812:	e000      	b.n	8007816 <_nx_arp_packet_send+0x13a>
                return;
 8007814:	bf00      	nop
}
 8007816:	3738      	adds	r7, #56	; 0x38
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	06040001 	.word	0x06040001

08007820 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800782e:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8007830:	2300      	movs	r3, #0
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
 8007834:	e0af      	b.n	8007996 <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 80a5 	beq.w	800798a <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f040 809b 	bne.w	800798a <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b12      	cmp	r3, #18
 800785a:	f040 8086 	bne.w	800796a <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800785e:	f3ef 8310 	mrs	r3, PRIMASK
 8007862:	613b      	str	r3, [r7, #16]
    return(posture);
 8007864:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007866:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007868:	b672      	cpsid	i
    return(int_posture);
 800786a:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 800786c:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d028      	beq.n	80078c8 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	6a3a      	ldr	r2, [r7, #32]
 800787c:	429a      	cmp	r2, r3
 800787e:	d104      	bne.n	800788a <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e014      	b.n	80078b4 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6a3a      	ldr	r2, [r7, #32]
 8007892:	429a      	cmp	r2, r3
 8007894:	d104      	bne.n	80078a0 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	6a3a      	ldr	r2, [r7, #32]
 800789c:	6952      	ldr	r2, [r2, #20]
 800789e:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 80078a8:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 80078ae:	6a3a      	ldr	r2, [r7, #32]
 80078b0:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 80078b2:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	2200      	movs	r2, #0
 80078c6:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d02a      	beq.n	8007928 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 80078da:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 80078e0:	6a3a      	ldr	r2, [r7, #32]
 80078e2:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80078e4:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80078ec:	6a3a      	ldr	r2, [r7, #32]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d104      	bne.n	80078fc <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
                        arp_entry -> nx_arp_pool_next =
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800790c:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	6a3a      	ldr	r2, [r7, #32]
 800791c:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8007924:	6a3a      	ldr	r2, [r7, #32]
 8007926:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	; 0x30
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f383 8810 	msr	PRIMASK, r3
}
 800793e:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 8007940:	e00f      	b.n	8007962 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2200      	movs	r2, #0
 8007950:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 800795c:	6978      	ldr	r0, [r7, #20]
 800795e:	f003 f843 	bl	800a9e8 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1ec      	bne.n	8007942 <_nx_arp_periodic_update+0x122>
 8007968:	e00f      	b.n	800798a <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	220a      	movs	r2, #10
 8007978:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	6a19      	ldr	r1, [r3, #32]
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	461a      	mov	r2, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff fea9 	bl	80076dc <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	3301      	adds	r3, #1
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800799c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799e:	429a      	cmp	r2, r3
 80079a0:	f4ff af49 	bcc.w	8007836 <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80079a4:	2300      	movs	r3, #0
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	e02f      	b.n	8007a0a <_nx_arp_periodic_update+0x1ea>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	214c      	movs	r1, #76	; 0x4c
 80079b0:	fb01 f303 	mul.w	r3, r1, r3
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01e      	beq.n	80079fe <_nx_arp_periodic_update+0x1de>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	214c      	movs	r1, #76	; 0x4c
 80079c6:	fb01 f303 	mul.w	r3, r1, r3
 80079ca:	4413      	add	r3, r2
 80079cc:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d015      	beq.n	8007a02 <_nx_arp_periodic_update+0x1e2>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	214c      	movs	r1, #76	; 0x4c
 80079dc:	fb01 f303 	mul.w	r3, r1, r3
 80079e0:	4413      	add	r3, r2
 80079e2:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	204c      	movs	r0, #76	; 0x4c
 80079f0:	fb00 f303 	mul.w	r3, r0, r3
 80079f4:	440b      	add	r3, r1
 80079f6:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	e002      	b.n	8007a04 <_nx_arp_periodic_update+0x1e4>
            continue;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <_nx_arp_periodic_update+0x1e4>
            continue;
 8007a02:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	3301      	adds	r3, #1
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0cc      	beq.n	80079aa <_nx_arp_periodic_update+0x18a>
    }
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	3728      	adds	r7, #40	; 0x28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b088      	sub	sp, #32
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8007a22:	e023      	b.n	8007a6c <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a24:	f3ef 8310 	mrs	r3, PRIMASK
 8007a28:	617b      	str	r3, [r7, #20]
    return(posture);
 8007a2a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007a2c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007a2e:	b672      	cpsid	i
    return(int_posture);
 8007a30:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 8007a32:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007a3a:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	69da      	ldr	r2, [r3, #28]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f383 8810 	msr	PRIMASK, r3
}
 8007a62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8007a64:	69b9      	ldr	r1, [r7, #24]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fc0c 	bl	8007284 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1d6      	bne.n	8007a24 <_nx_arp_queue_process+0xa>
    }
}
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b090      	sub	sp, #64	; 0x40
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a92:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007a98:	b672      	cpsid	i
    return(int_posture);
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 8007a9c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	f383 8810 	msr	PRIMASK, r3
}
 8007abc:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 8007abe:	e04c      	b.n	8007b5a <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007acc:	2200      	movs	r2, #0
 8007ace:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d915      	bls.n	8007b30 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007b14:	f107 0208 	add.w	r2, r7, #8
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	e01d      	b.n	8007b5a <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 8007b28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b2a:	f002 ff5d 	bl	800a9e8 <_nx_packet_transmit_release>
 8007b2e:	e014      	b.n	8007b5a <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	4413      	add	r3, r2
 8007b44:	f1a3 0214 	sub.w	r2, r3, #20
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	f107 0208 	add.w	r2, r7, #8
 8007b56:	4610      	mov	r0, r2
 8007b58:	4798      	blx	r3
    while (queued_list_head)
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1af      	bne.n	8007ac0 <_nx_arp_queue_send+0x40>
        }
    }
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	3740      	adds	r7, #64	; 0x40
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b094      	sub	sp, #80	; 0x50
 8007b6e:	af04      	add	r7, sp, #16
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	603b      	str	r3, [r7, #0]
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	613b      	str	r3, [r7, #16]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8100 	beq.w	8007d88 <_nx_icmpv4_send_error_message+0x21e>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba2:	f000 80f3 	beq.w	8007d8c <_nx_icmpv4_send_error_message+0x222>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8007bae:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8007bb2:	f000 80eb 	beq.w	8007d8c <_nx_icmpv4_send_error_message+0x222>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d10b      	bne.n	8007be0 <_nx_icmpv4_send_error_message+0x76>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	f000 80d8 	beq.w	8007d90 <_nx_icmpv4_send_error_message+0x226>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f040 80d3 	bne.w	8007d94 <_nx_icmpv4_send_error_message+0x22a>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80d0 	beq.w	8007d98 <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8007bfc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007c00:	d304      	bcc.n	8007c0c <_nx_icmpv4_send_error_message+0xa2>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f280 80c6 	bge.w	8007d98 <_nx_icmpv4_send_error_message+0x22e>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c14:	f000 80c0 	beq.w	8007d98 <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8007c20:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8007c24:	f000 80b8 	beq.w	8007d98 <_nx_icmpv4_send_error_message+0x22e>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8007c2e:	f107 0114 	add.w	r1, r7, #20
 8007c32:	2300      	movs	r3, #0
 8007c34:	2224      	movs	r2, #36	; 0x24
 8007c36:	f002 f9bd 	bl	8009fb4 <_nx_packet_allocate>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 80ad 	bne.w	8007d9c <_nx_icmpv4_send_error_message+0x232>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2204      	movs	r2, #4
 8007c46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	623b      	str	r3, [r7, #32]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	0e1b      	lsrs	r3, r3, #24
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0c1b      	lsrs	r3, r3, #16
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	2200      	movs	r2, #0
 8007c68:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	061a      	lsls	r2, r3, #24
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	ba1a      	rev	r2, r3
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	0e1b      	lsrs	r3, r3, #24
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	61fb      	str	r3, [r7, #28]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c94:	3208      	adds	r2, #8
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	6899      	ldr	r1, [r3, #8]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cb6:	e00a      	b.n	8007cce <_nx_icmpv4_send_error_message+0x164>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	ba1a      	rev	r2, r3
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	601a      	str	r2, [r3, #0]
        src_packet++;
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	3301      	adds	r3, #1
 8007ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d9f1      	bls.n	8007cb8 <_nx_icmpv4_send_error_message+0x14e>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8007cda:	e00a      	b.n	8007cf2 <_nx_icmpv4_send_error_message+0x188>
    {

        *dest_packet++ = *src_packet++;
 8007cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cde:	1d13      	adds	r3, r2, #4
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	1d19      	adds	r1, r3, #4
 8007ce6:	6339      	str	r1, [r7, #48]	; 0x30
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8007cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cee:	3b04      	subs	r3, #4
 8007cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1f1      	bne.n	8007cdc <_nx_icmpv4_send_error_message+0x172>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d02:	e00a      	b.n	8007d1a <_nx_icmpv4_send_error_message+0x1b0>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	ba1a      	rev	r2, r3
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	601a      	str	r2, [r3, #0]
        src_packet++;
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d10:	3304      	adds	r3, #4
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	3301      	adds	r3, #1
 8007d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d9f1      	bls.n	8007d04 <_nx_icmpv4_send_error_message+0x19a>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 8007d2e:	f107 0310 	add.w	r3, r7, #16
 8007d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f001 fa8b 	bl	8009250 <_nx_ip_route_find>
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8007d3a:	6978      	ldr	r0, [r7, #20]
                                           (UINT)pkt_ptr -> nx_packet_length,
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8007d40:	2300      	movs	r3, #0
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007d4a:	f000 f896 	bl	8007e7a <_nx_ip_checksum_compute>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	837b      	strh	r3, [r7, #26]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 8007d52:	8b7b      	ldrh	r3, [r7, #26]
 8007d54:	43db      	mvns	r3, r3
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	885b      	ldrh	r3, [r3, #2]
 8007d60:	ba5b      	rev16	r3, r3
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	805a      	strh	r2, [r3, #2]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	9303      	str	r3, [sp, #12]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9302      	str	r3, [sp, #8]
 8007d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	23ff      	movs	r3, #255	; 0xff
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f001 f9ee 	bl	8009162 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8007d86:	e00a      	b.n	8007d9e <_nx_icmpv4_send_error_message+0x234>
        return;
 8007d88:	bf00      	nop
 8007d8a:	e008      	b.n	8007d9e <_nx_icmpv4_send_error_message+0x234>
        return;
 8007d8c:	bf00      	nop
 8007d8e:	e006      	b.n	8007d9e <_nx_icmpv4_send_error_message+0x234>
        return;
 8007d90:	bf00      	nop
 8007d92:	e004      	b.n	8007d9e <_nx_icmpv4_send_error_message+0x234>
        return;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <_nx_icmpv4_send_error_message+0x234>
        return;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <_nx_icmpv4_send_error_message+0x234>
        return;
 8007d9c:	bf00      	nop
}
 8007d9e:	3740      	adds	r7, #64	; 0x40
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4a18      	ldr	r2, [pc, #96]	; (8007e14 <_nx_igmp_multicast_check+0x70>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d101      	bne.n	8007dbc <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8007db8:	2301      	movs	r3, #1
 8007dba:	e025      	b.n	8007e08 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e01e      	b.n	8007e00 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	440b      	add	r3, r1
 8007dd0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d10e      	bne.n	8007dfa <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 8007ddc:	68f9      	ldr	r1, [r7, #12]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8007dee:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d101      	bne.n	8007dfa <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 8007df6:	2301      	movs	r3, #1
 8007df8:	e006      	b.n	8007e08 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b06      	cmp	r3, #6
 8007e04:	d9dd      	bls.n	8007dc2 <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	e0000001 	.word	0xe0000001

08007e18 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f005 face 	bl	800d3d0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e34:	f3ef 8310 	mrs	r3, PRIMASK
 8007e38:	617b      	str	r3, [r7, #20]
    return(posture);
 8007e3a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007e3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e3e:	b672      	cpsid	i
    return(int_posture);
 8007e40:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8007e42:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f383 8810 	msr	PRIMASK, r3
}
 8007e62:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f005 fd36 	bl	800d8dc <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 8007e70:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b08e      	sub	sp, #56	; 0x38
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b11      	cmp	r3, #17
 8007e90:	d002      	beq.n	8007e98 <_nx_ip_checksum_compute+0x1e>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b06      	cmp	r3, #6
 8007e96:	d141      	bne.n	8007f1c <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <_nx_ip_checksum_compute+0x2e>
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <_nx_ip_checksum_compute+0x38>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eac:	f006 fa22 	bl	800e2f4 <_tx_thread_sleep>
 8007eb0:	e7fa      	b.n	8007ea8 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8007eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb8:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec2:	4413      	add	r3, r2
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	3302      	adds	r3, #2
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed0:	4413      	add	r3, r2
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007edc:	4413      	add	r3, r2
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3302      	adds	r3, #2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eea:	4413      	add	r3, r2
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8007eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef8:	0c1a      	lsrs	r2, r3, #16
 8007efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	4413      	add	r3, r2
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	0c1a      	lsrs	r2, r3, #16
 8007f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8007f12:	8b7b      	ldrh	r3, [r7, #26]
 8007f14:	ba5b      	rev16	r3, r3
 8007f16:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8007f18:	8b7b      	ldrh	r3, [r7, #26]
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8007f26:	e058      	b.n	8007fda <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d905      	bls.n	8007f48 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f023 0303 	bic.w	r3, r3, #3
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
 8007f46:	e006      	b.n	8007f56 <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4413      	add	r3, r2
 8007f52:	3b03      	subs	r3, #3
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d91c      	bls.n	8007f9e <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8007f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	3303      	adds	r3, #3
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8007f76:	e00e      	b.n	8007f96 <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f80:	4413      	add	r3, r2
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	0c1b      	lsrs	r3, r3, #16
 8007f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f8c:	4413      	add	r3, r2
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	3304      	adds	r3, #4
 8007f94:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d8ec      	bhi.n	8007f78 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d018      	beq.n	8007fd6 <_nx_ip_checksum_compute+0x15c>
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d014      	beq.n	8007fd6 <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d10a      	bne.n	8007fce <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	4413      	add	r3, r2
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3b02      	subs	r3, #2
 8007fcc:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fd4:	e001      	b.n	8007fda <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1a3      	bne.n	8007f28 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01f      	beq.n	8008026 <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d104      	bne.n	8007ffa <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e00f      	b.n	800801a <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d10c      	bne.n	800801a <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008008:	4413      	add	r3, r2
 800800a:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	3302      	adds	r3, #2
 8008010:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	3301      	adds	r3, #1
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008022:	4413      	add	r3, r2
 8008024:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008028:	0c1a      	lsrs	r2, r3, #16
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	b29b      	uxth	r3, r3
 800802e:	4413      	add	r3, r2
 8008030:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008034:	0c1a      	lsrs	r2, r3, #16
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	b29b      	uxth	r3, r3
 800803a:	4413      	add	r3, r2
 800803c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008040:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8008042:	8b7b      	ldrh	r3, [r7, #26]
 8008044:	ba5b      	rev16	r3, r3
 8008046:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 8008048:	8b7b      	ldrh	r3, [r7, #26]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3738      	adds	r7, #56	; 0x38
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b092      	sub	sp, #72	; 0x48
 8008058:	af06      	add	r7, sp, #24
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8008066:	4b87      	ldr	r3, [pc, #540]	; (8008284 <_nx_ip_create+0x230>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b87      	ldr	r3, [pc, #540]	; (8008288 <_nx_ip_create+0x234>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	431a      	orrs	r2, r3
 8008070:	4b86      	ldr	r3, [pc, #536]	; (800828c <_nx_ip_create+0x238>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8008076:	4b86      	ldr	r3, [pc, #536]	; (8008290 <_nx_ip_create+0x23c>)
 8008078:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800807a:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 800807c:	4b85      	ldr	r3, [pc, #532]	; (8008294 <_nx_ip_create+0x240>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4313      	orrs	r3, r2
 8008082:	4a85      	ldr	r2, [pc, #532]	; (8008298 <_nx_ip_create+0x244>)
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 800808c:	234a      	movs	r3, #74	; 0x4a
 800808e:	e0f5      	b.n	800827c <_nx_ip_create+0x228>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8008090:	f240 72bc 	movw	r2, #1980	; 0x7bc
 8008094:	2100      	movs	r1, #0
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f007 fee3 	bl	800fe62 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	401a      	ands	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080cc:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4a72      	ldr	r2, [pc, #456]	; (800829c <_nx_ip_create+0x248>)
 80080d4:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80080d8:	2300      	movs	r3, #0
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080dc:	e00e      	b.n	80080fc <_nx_ip_create+0xa8>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	b2d8      	uxtb	r0, r3
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	214c      	movs	r1, #76	; 0x4c
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	f203 7323 	addw	r3, r3, #1827	; 0x723
 80080f2:	4602      	mov	r2, r0
 80080f4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	3301      	adds	r3, #1
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d9ed      	bls.n	80080de <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4a66      	ldr	r2, [pc, #408]	; (80082a0 <_nx_ip_create+0x24c>)
 8008106:	f8c3 2768 	str.w	r2, [r3, #1896]	; 0x768


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4a63      	ldr	r2, [pc, #396]	; (80082a4 <_nx_ip_create+0x250>)
 8008116:	f8c3 277c 	str.w	r2, [r3, #1916]	; 0x77c
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8008120:	f8c3 2780 	str.w	r2, [r3, #1920]	; 0x780
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 800812a:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008144:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008162:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800816c:	2200      	movs	r2, #0
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	4618      	mov	r0, r3
 8008172:	f005 f829 	bl	800d1c8 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	4618      	mov	r0, r3
 8008180:	f004 fbb2 	bl	800c8e8 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8008184:	f005 ff14 	bl	800dfb0 <_tx_thread_identify>
 8008188:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <_nx_ip_create+0x14a>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8008190:	f107 0310 	add.w	r3, r7, #16
 8008194:	461a      	mov	r2, r3
 8008196:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800819a:	f005 ff67 	bl	800e06c <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	2301      	movs	r3, #1
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	2301      	movs	r3, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b0:	9303      	str	r3, [sp, #12]
 80081b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b4:	9302      	str	r3, [sp, #8]
 80081b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	4613      	mov	r3, r2
 80081c0:	4a39      	ldr	r2, [pc, #228]	; (80082a8 <_nx_ip_create+0x254>)
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	f005 fdb0 	bl	800dd28 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	9202      	str	r2, [sp, #8]
 80081d4:	2264      	movs	r2, #100	; 0x64
 80081d6:	9201      	str	r2, [sp, #4]
 80081d8:	2264      	movs	r2, #100	; 0x64
 80081da:	9200      	str	r2, [sp, #0]
 80081dc:	4a33      	ldr	r2, [pc, #204]	; (80082ac <_nx_ip_create+0x258>)
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	f006 fca0 	bl	800eb24 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4a32      	ldr	r2, [pc, #200]	; (80082b0 <_nx_ip_create+0x25c>)
 80081e8:	f8c3 27b4 	str.w	r2, [r3, #1972]	; 0x7b4
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081ec:	f3ef 8310 	mrs	r3, PRIMASK
 80081f0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80081f2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80081f4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80081f6:	b672      	cpsid	i
    return(int_posture);
 80081f8:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4a2d      	ldr	r2, [pc, #180]	; (80082b4 <_nx_ip_create+0x260>)
 8008200:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8008202:	4b2d      	ldr	r3, [pc, #180]	; (80082b8 <_nx_ip_create+0x264>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d017      	beq.n	800823a <_nx_ip_create+0x1e6>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 800820a:	4b2b      	ldr	r3, [pc, #172]	; (80082b8 <_nx_ip_create+0x264>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8008212:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8008214:	4b28      	ldr	r3, [pc, #160]	; (80082b8 <_nx_ip_create+0x264>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a3a      	ldr	r2, [r7, #32]
 800822a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 800822e:	4b22      	ldr	r3, [pc, #136]	; (80082b8 <_nx_ip_create+0x264>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 8008238:	e00a      	b.n	8008250 <_nx_ip_create+0x1fc>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 800823a:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <_nx_ip_create+0x264>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8008250:	4b1a      	ldr	r3, [pc, #104]	; (80082bc <_nx_ip_create+0x268>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	4a19      	ldr	r2, [pc, #100]	; (80082bc <_nx_ip_create+0x268>)
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f383 8810 	msr	PRIMASK, r3
}
 8008264:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	2b00      	cmp	r3, #0
 800826a:	d006      	beq.n	800827a <_nx_ip_create+0x226>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f107 0210 	add.w	r2, r7, #16
 8008272:	4619      	mov	r1, r3
 8008274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008276:	f005 fef9 	bl	800e06c <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3730      	adds	r7, #48	; 0x30
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	20017cc4 	.word	0x20017cc4
 8008288:	20017cc8 	.word	0x20017cc8
 800828c:	20017ccc 	.word	0x20017ccc
 8008290:	20017cd0 	.word	0x20017cd0
 8008294:	20017cd4 	.word	0x20017cd4
 8008298:	20000024 	.word	0x20000024
 800829c:	08010c80 	.word	0x08010c80
 80082a0:	08010c84 	.word	0x08010c84
 80082a4:	7f000001 	.word	0x7f000001
 80082a8:	08009571 	.word	0x08009571
 80082ac:	0800922b 	.word	0x0800922b
 80082b0:	08009b09 	.word	0x08009b09
 80082b4:	49502020 	.word	0x49502020
 80082b8:	20017cb4 	.word	0x20017cb4
 80082bc:	20017cb8 	.word	0x20017cb8

080082c0 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08c      	sub	sp, #48	; 0x30
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 37b8 	ldr.w	r3, [r3, #1976]	; 0x7b8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d04e      	beq.n	8008370 <_nx_ip_deferred_link_status_process+0xb0>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80082d2:	2300      	movs	r3, #0
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d6:	e047      	b.n	8008368 <_nx_ip_deferred_link_status_process+0xa8>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	214c      	movs	r1, #76	; 0x4c
 80082de:	fb01 f303 	mul.w	r3, r1, r3
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d039      	beq.n	8008362 <_nx_ip_deferred_link_status_process+0xa2>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	214c      	movs	r1, #76	; 0x4c
 80082f4:	fb01 f303 	mul.w	r3, r1, r3
 80082f8:	4413      	add	r3, r2
 80082fa:	f203 7324 	addw	r3, r3, #1828	; 0x724
 80082fe:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008300:	2b00      	cmp	r3, #0
 8008302:	d02e      	beq.n	8008362 <_nx_ip_deferred_link_status_process+0xa2>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	214c      	movs	r1, #76	; 0x4c
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	4413      	add	r3, r2
 8008310:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 800831c:	230a      	movs	r3, #10
 800831e:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	224c      	movs	r2, #76	; 0x4c
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	3304      	adds	r3, #4
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8008334:	f107 0308 	add.w	r3, r7, #8
 8008338:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	214c      	movs	r1, #76	; 0x4c
 8008340:	fb01 f303 	mul.w	r3, r1, r3
 8008344:	4413      	add	r3, r2
 8008346:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f107 020c 	add.w	r2, r7, #12
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 37b8 	ldr.w	r3, [r3, #1976]	; 0x7b8
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	3301      	adds	r3, #1
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0b4      	beq.n	80082d8 <_nx_ip_deferred_link_status_process+0x18>
 800836e:	e000      	b.n	8008372 <_nx_ip_deferred_link_status_process+0xb2>
        return;
 8008370:	bf00      	nop
        }
    }
}
 8008372:	3730      	adds	r7, #48	; 0x30
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 8008388:	e09a      	b.n	80084c0 <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b32      	cmp	r3, #50	; 0x32
 800838e:	d005      	beq.n	800839c <_nx_ip_dispatch_process+0x24>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b33      	cmp	r3, #51	; 0x33
 8008394:	d104      	bne.n	80083a0 <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 8008396:	2301      	movs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 800839a:	e07d      	b.n	8008498 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 800839c:	2301      	movs	r3, #1
 800839e:	e094      	b.n	80084ca <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b06      	cmp	r3, #6
 80083a4:	d10f      	bne.n	80083c6 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 80083bc:	2300      	movs	r3, #0
 80083be:	e084      	b.n	80084ca <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 80083c0:	2301      	movs	r3, #1
 80083c2:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 80083c4:	e067      	b.n	8008496 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d112      	bne.n	80083f6 <_nx_ip_dispatch_process+0x7e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d10f      	bne.n	80083f6 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	4798      	blx	r3
                    return(0);
 80083ec:	2300      	movs	r3, #0
 80083ee:	e06c      	b.n	80084ca <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80083f0:	2301      	movs	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	e04f      	b.n	8008496 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d112      	bne.n	8008426 <_nx_ip_dispatch_process+0xae>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d10f      	bne.n	8008426 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	4798      	blx	r3
                    return(0);
 800841c:	2300      	movs	r3, #0
 800841e:	e054      	b.n	80084ca <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8008420:	2301      	movs	r3, #1
 8008422:	617b      	str	r3, [r7, #20]
 8008424:	e037      	b.n	8008496 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b11      	cmp	r3, #17
 800842a:	d10f      	bne.n	800844c <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	4798      	blx	r3
                        return(0);
 8008442:	2300      	movs	r3, #0
 8008444:	e041      	b.n	80084ca <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8008446:	2301      	movs	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
            break;
 800844a:	e024      	b.n	8008496 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00c      	beq.n	8008470 <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	0411      	lsls	r1, r2, #16
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <_nx_ip_dispatch_process+0xf8>
                            return(0);
 800846c:	2300      	movs	r3, #0
 800846e:	e02c      	b.n	80084ca <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008476:	2b04      	cmp	r3, #4
 8008478:	d105      	bne.n	8008486 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 800847a:	2300      	movs	r3, #0
 800847c:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <_nx_ip_dispatch_process+0x15c>)
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff fb72 	bl	8007b6a <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]
            break;
 8008494:	e7ff      	b.n	8008496 <_nx_ip_dispatch_process+0x11e>
 8008496:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d010      	beq.n	80084c0 <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	1e5a      	subs	r2, r3, #1
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	1ad2      	subs	r2, r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f43f af61 	beq.w	800838a <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 80084c8:	697b      	ldr	r3, [r7, #20]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	03020000 	.word	0x03020000

080084d8 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80084e6:	2200      	movs	r2, #0
 80084e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80084ec:	4618      	mov	r0, r3
 80084ee:	f004 fb2b 	bl	800cb48 <_tx_event_flags_set>
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b09e      	sub	sp, #120	; 0x78
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 8008508:	2300      	movs	r3, #0
 800850a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 800851c:	2300      	movs	r3, #0
 800851e:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	795b      	ldrb	r3, [r3, #5]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8179 	beq.w	800881e <_nx_ip_driver_packet_send+0x324>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008542:	d00d      	beq.n	8008560 <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008548:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800854a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800854c:	429a      	cmp	r2, r3
 800854e:	d110      	bne.n	8008572 <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 8008550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008552:	43da      	mvns	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	401a      	ands	r2, r3
 8008558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800855a:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 800855c:	429a      	cmp	r2, r3
 800855e:	d108      	bne.n	8008572 <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8008560:	2304      	movs	r3, #4
 8008562:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8008564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008568:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
 8008570:	e167      	b.n	8008842 <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	429a      	cmp	r2, r3
 800857c:	d105      	bne.n	800858a <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	637b      	str	r3, [r7, #52]	; 0x34
 8008588:	e15b      	b.n	8008842 <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008590:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8008594:	d133      	bne.n	80085fe <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 8008596:	2300      	movs	r3, #0
 8008598:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800859a:	e00f      	b.n	80085bc <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 800859c:	68f9      	ldr	r1, [r7, #12]
 800859e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	440b      	add	r3, r1
 80085aa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d006      	beq.n	80085c4 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 80085b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b8:	3301      	adds	r3, #1
 80085ba:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 80085bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085be:	2b06      	cmp	r3, #6
 80085c0:	d9ec      	bls.n	800859c <_nx_ip_driver_packet_send+0xa2>
 80085c2:	e000      	b.n	80085c6 <_nx_ip_driver_packet_send+0xcc>
                    break;
 80085c4:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 80085c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c8:	2b06      	cmp	r3, #6
 80085ca:	d80e      	bhi.n	80085ea <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 80085cc:	68f9      	ldr	r1, [r7, #12]
 80085ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 80085ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085ee:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80085f6:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
 80085fc:	e121      	b.n	8008842 <_nx_ip_driver_packet_send+0x348>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 80085fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008602:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	0a1a      	lsrs	r2, r3, #8
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4413      	add	r3, r2
 800860c:	f003 031f 	and.w	r3, r3, #31
 8008610:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008616:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8008622:	e014      	b.n	800864e <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8008624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	429a      	cmp	r2, r3
 800862c:	d013      	beq.n	8008656 <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008638:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008644:	429a      	cmp	r2, r3
 8008646:	d102      	bne.n	800864e <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 800864c:	e004      	b.n	8008658 <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 800864e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e7      	bne.n	8008624 <_nx_ip_driver_packet_send+0x12a>
 8008654:	e000      	b.n	8008658 <_nx_ip_driver_packet_send+0x15e>
                    break;
 8008656:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 8008658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d023      	beq.n	80086a6 <_nx_ip_driver_packet_send+0x1ac>
 800865e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	4313      	orrs	r3, r2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01c      	beq.n	80086a6 <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8008672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8008674:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8008676:	b672      	cpsid	i
    return(int_posture);
 8008678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 800867a:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800867c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8008682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800868c:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008696:	605a      	str	r2, [r3, #4]
 8008698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800869a:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800869c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869e:	f383 8810 	msr	PRIMASK, r3
}
 80086a2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 80086a4:	e0cd      	b.n	8008842 <_nx_ip_driver_packet_send+0x348>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d910      	bls.n	80086d6 <_nx_ip_driver_packet_send+0x1dc>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <_nx_ip_driver_packet_send+0x1ca>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d008      	beq.n	80086d6 <_nx_ip_driver_packet_send+0x1dc>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 80086ce:	68b8      	ldr	r0, [r7, #8]
 80086d0:	f002 f98a 	bl	800a9e8 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 80086d4:	e12c      	b.n	8008930 <_nx_ip_driver_packet_send+0x436>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 80086d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d052      	beq.n	8008782 <_nx_ip_driver_packet_send+0x288>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80086dc:	f3ef 8310 	mrs	r3, PRIMASK
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 80086e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 80086e4:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 80086e6:	b672      	cpsid	i
    return(int_posture);
 80086e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 80086ea:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2200      	movs	r2, #0
 80086f0:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <_nx_ip_driver_packet_send+0x214>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 80086fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	f383 8810 	msr	PRIMASK, r3
}
 800870a:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 800870c:	e10f      	b.n	800892e <_nx_ip_driver_packet_send+0x434>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 800870e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 8008714:	2301      	movs	r3, #1
 8008716:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8008718:	e005      	b.n	8008726 <_nx_ip_driver_packet_send+0x22c>
                            queued_count++;
 800871a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800871c:	3301      	adds	r3, #1
 800871e:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 8008720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 8008726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1f5      	bne.n	800871a <_nx_ip_driver_packet_send+0x220>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 800872e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8008738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800873a:	2b03      	cmp	r3, #3
 800873c:	d913      	bls.n	8008766 <_nx_ip_driver_packet_send+0x26c>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 800873e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8008744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874a:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 800874c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	655a      	str	r2, [r3, #84]	; 0x54
 8008766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008768:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	f383 8810 	msr	PRIMASK, r3
}
 8008770:	bf00      	nop
                        if (remove_packet)
 8008772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 80da 	beq.w	800892e <_nx_ip_driver_packet_send+0x434>
                            _nx_packet_transmit_release(remove_packet);
 800877a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800877c:	f002 f934 	bl	800a9e8 <_nx_packet_transmit_release>
                return;
 8008780:	e0d5      	b.n	800892e <_nx_ip_driver_packet_send+0x434>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00f      	beq.n	80087ac <_nx_ip_driver_packet_send+0x2b2>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8008792:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008794:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 8008798:	0092      	lsls	r2, r2, #2
 800879a:	68f9      	ldr	r1, [r7, #12]
 800879c:	440a      	add	r2, r1
 800879e:	1d11      	adds	r1, r2, #4
 80087a0:	2200      	movs	r2, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	4798      	blx	r3
 80087a6:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00d      	beq.n	80087c8 <_nx_ip_driver_packet_send+0x2ce>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 80087c0:	68b8      	ldr	r0, [r7, #8]
 80087c2:	f002 f911 	bl	800a9e8 <_nx_packet_transmit_release>
                        return;
 80087c6:	e0b3      	b.n	8008930 <_nx_ip_driver_packet_send+0x436>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087cc:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 80087da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 80087e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e2:	2200      	movs	r2, #0
 80087e4:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	2200      	movs	r2, #0
 80087ea:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 80087ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ee:	220a      	movs	r2, #10
 80087f0:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	2200      	movs	r2, #0
 80087f6:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fe:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2200      	movs	r2, #0
 8008804:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8008806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	4798      	blx	r3
                return;
 800881c:	e087      	b.n	800892e <_nx_ip_driver_packet_send+0x434>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008824:	d302      	bcc.n	800882c <_nx_ip_driver_packet_send+0x332>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8008826:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008828:	2b00      	cmp	r3, #0
 800882a:	da05      	bge.n	8008838 <_nx_ip_driver_packet_send+0x33e>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d104      	bne.n	8008842 <_nx_ip_driver_packet_send+0x348>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 8008838:	2301      	movs	r3, #1
 800883a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 8008842:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008846:	2b01      	cmp	r3, #1
 8008848:	d129      	bne.n	800889e <_nx_ip_driver_packet_send+0x3a4>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8008850:	f107 0114 	add.w	r1, r7, #20
 8008854:	2300      	movs	r3, #0
 8008856:	68b8      	ldr	r0, [r7, #8]
 8008858:	f001 fc74 	bl	800a144 <_nx_packet_copy>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d113      	bne.n	800888a <_nx_ip_driver_packet_send+0x390>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	699a      	ldr	r2, [r3, #24]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	4413      	add	r3, r2
 8008876:	f1a3 0214 	sub.w	r2, r3, #20
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	4619      	mov	r1, r3
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 fbe9 	bl	800905a <_nx_ip_packet_deferred_receive>
 8008888:	e009      	b.n	800889e <_nx_ip_driver_packet_send+0x3a4>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d040      	beq.n	8008926 <_nx_ip_driver_packet_send+0x42c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d919      	bls.n	80088e6 <_nx_ip_driver_packet_send+0x3ec>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <_nx_ip_driver_packet_send+0x3da>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088c2:	d007      	beq.n	80088d4 <_nx_ip_driver_packet_send+0x3da>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088ca:	f107 0218 	add.w	r2, r7, #24
 80088ce:	4610      	mov	r0, r2
 80088d0:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 80088d2:	e02d      	b.n	8008930 <_nx_ip_driver_packet_send+0x436>
                ip_ptr -> nx_ip_send_packets_dropped++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 80088de:	68b8      	ldr	r0, [r7, #8]
 80088e0:	f002 f882 	bl	800a9e8 <_nx_packet_transmit_release>
            return;
 80088e4:	e024      	b.n	8008930 <_nx_ip_driver_packet_send+0x436>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699a      	ldr	r2, [r3, #24]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	4413      	add	r3, r2
 80088fa:	f1a3 0214 	sub.w	r2, r3, #20
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d104      	bne.n	8008916 <_nx_ip_driver_packet_send+0x41c>
 800890c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008910:	f005 fcf0 	bl	800e2f4 <_tx_thread_sleep>
 8008914:	e7fa      	b.n	800890c <_nx_ip_driver_packet_send+0x412>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891c:	f107 0218 	add.w	r2, r7, #24
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	e004      	b.n	8008930 <_nx_ip_driver_packet_send+0x436>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8008926:	68b8      	ldr	r0, [r7, #8]
 8008928:	f002 f85e 	bl	800a9e8 <_nx_packet_transmit_release>
 800892c:	e000      	b.n	8008930 <_nx_ip_driver_packet_send+0x436>
                return;
 800892e:	bf00      	nop
    }
}
 8008930:	3778      	adds	r7, #120	; 0x78
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <_nx_ip_gateway_address_clear>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008948:	4618      	mov	r0, r3
 800894a:	f004 fd41 	bl	800d3d0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800894e:	f3ef 8310 	mrs	r3, PRIMASK
 8008952:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008954:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008956:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008958:	b672      	cpsid	i
    return(int_posture);
 800895a:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts.  */
    TX_DISABLE
 800895c:	617b      	str	r3, [r7, #20]

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	60da      	str	r2, [r3, #12]
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f383 8810 	msr	PRIMASK, r3
}
 8008974:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800897c:	4618      	mov	r0, r3
 800897e:	f004 ffad 	bl	800d8dc <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8008982:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <_nx_ip_gateway_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
UINT status;


    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;
 8008996:	234e      	movs	r3, #78	; 0x4e
 8008998:	60fb      	str	r3, [r7, #12]

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80089a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80089a4:	4618      	mov	r0, r3
 80089a6:	f004 fd13 	bl	800d3d0 <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <_nx_ip_gateway_address_get+0x32>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	601a      	str	r2, [r3, #0]

        status = NX_SUCCESS;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80089c4:	4618      	mov	r0, r3
 80089c6:	f004 ff89 	bl	800d8dc <_tx_mutex_put>

    /* Return completion status.  */
    return(status);
 80089ca:	68fb      	ldr	r3, [r7, #12]
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_nx_ip_gateway_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]

#ifndef NX_DISABLE_IPV4
INT           i;
TX_INTERRUPT_SAVE_AREA

NX_INTERFACE *ip_interface_ptr = NX_NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	61bb      	str	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80089e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80089ec:	4618      	mov	r0, r3
 80089ee:	f004 fcef 	bl	800d3d0 <_tx_mutex_get>

    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
 80089f6:	e02e      	b.n	8008a56 <_nx_ip_gateway_address_set+0x82>
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	214c      	movs	r1, #76	; 0x4c
 80089fe:	fb01 f303 	mul.w	r3, r1, r3
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d020      	beq.n	8008a50 <_nx_ip_gateway_address_set+0x7c>
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	214c      	movs	r1, #76	; 0x4c
 8008a14:	fb01 f303 	mul.w	r3, r1, r3
 8008a18:	4413      	add	r3, r2
 8008a1a:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	401a      	ands	r2, r3
             ip_ptr -> nx_ip_interface[i].nx_interface_ip_network))
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	204c      	movs	r0, #76	; 0x4c
 8008a2a:	fb00 f303 	mul.w	r3, r0, r3
 8008a2e:	440b      	add	r3, r1
 8008a30:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8008a34:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d10a      	bne.n	8008a50 <_nx_ip_gateway_address_set+0x7c>
        {

            /* This is the interface for the gateway.  */
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	224c      	movs	r2, #76	; 0x4c
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
 8008a42:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	61bb      	str	r3, [r7, #24]

            /* Break out of the search. */
            break;
 8008a4e:	e005      	b.n	8008a5c <_nx_ip_gateway_address_set+0x88>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	3301      	adds	r3, #1
 8008a54:	61fb      	str	r3, [r7, #28]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	ddcd      	ble.n	80089f8 <_nx_ip_gateway_address_set+0x24>
        }
    }

    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d107      	bne.n	8008a72 <_nx_ip_gateway_address_set+0x9e>
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f004 ff37 	bl	800d8dc <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 8008a6e:	2321      	movs	r3, #33	; 0x21
 8008a70:	e01a      	b.n	8008aa8 <_nx_ip_gateway_address_set+0xd4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a72:	f3ef 8310 	mrs	r3, PRIMASK
 8008a76:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008a78:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008a7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a7c:	b672      	cpsid	i
    return(int_posture);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8008a80:	617b      	str	r3, [r7, #20]

    /* Setup the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  ip_address;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	60da      	str	r2, [r3, #12]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f383 8810 	msr	PRIMASK, r3
}
 8008a98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f004 ff1b 	bl	800d8dc <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8008aa6:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3720      	adds	r7, #32
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	; 0x28
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac8:	d106      	bne.n	8008ad8 <_nx_ip_header_add+0x28>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d101      	bne.n	8008ad8 <_nx_ip_header_add+0x28>
    {
        router_alert = 4;
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	61fb      	str	r3, [r7, #28]
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	69f9      	ldr	r1, [r7, #28]
 8008ade:	f06f 0313 	mvn.w	r3, #19
 8008ae2:	1a5b      	subs	r3, r3, r1
 8008ae4:	441a      	add	r2, r3
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	f103 0214 	add.w	r2, r3, #20
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d204      	bcs.n	8008b10 <_nx_ip_header_add+0x60>
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b0a:	f005 fbf3 	bl	800e2f4 <_tx_thread_sleep>
 8008b0e:	e7fa      	b.n	8008b06 <_nx_ip_header_add+0x56>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	61bb      	str	r3, [r7, #24]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	4413      	add	r3, r2
 8008b2a:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8008b2c:	3314      	adds	r3, #20
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <_nx_ip_header_add+0x94>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 8008b40:	2300      	movs	r3, #0
 8008b42:	e076      	b.n	8008c32 <_nx_ip_header_add+0x182>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <_nx_ip_header_add+0xae>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	4313      	orrs	r3, r2
 8008b54:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e008      	b.n	8008b70 <_nx_ip_header_add+0xc0>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8008b76:	1c59      	adds	r1, r3, #1
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 8008b7e:	041a      	lsls	r2, r3, #16
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	431a      	orrs	r2, r3
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	061a      	lsls	r2, r3, #24
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <_nx_ip_header_add+0x100>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	3314      	adds	r3, #20
 8008bac:	4a23      	ldr	r2, [pc, #140]	; (8008c3c <_nx_ip_header_add+0x18c>)
 8008bae:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	ba1a      	rev	r2, r3
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	ba1a      	rev	r2, r3
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	ba1a      	rev	r2, r3
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	ba1a      	rev	r2, r3
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	ba1a      	rev	r2, r3
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d008      	beq.n	8008bfa <_nx_ip_header_add+0x14a>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	3314      	adds	r3, #20
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	ba12      	rev	r2, r2
 8008bf8:	601a      	str	r2, [r3, #0]
    if (compute_checksum)
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8008c00:	2300      	movs	r3, #0
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2300      	movs	r3, #0
 8008c06:	2104      	movs	r1, #4
 8008c08:	68b8      	ldr	r0, [r7, #8]
 8008c0a:	f7ff f936 	bl	8007e7a <_nx_ip_checksum_compute>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	617b      	str	r3, [r7, #20]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	43db      	mvns	r3, r3
 8008c16:	613b      	str	r3, [r7, #16]
        val = val & NX_LOWER_16_MASK;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	613b      	str	r3, [r7, #16]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	ba1b      	rev	r3, r3
 8008c22:	613b      	str	r3, [r7, #16]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3720      	adds	r7, #32
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	94040000 	.word	0x94040000

08008c40 <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <_nx_ip_initialize+0x1c>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 8008c4a:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <_nx_ip_initialize+0x20>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
}
 8008c50:	bf00      	nop
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20017cb4 	.word	0x20017cb4
 8008c60:	20017cb8 	.word	0x20017cb8

08008c64 <_nx_ip_interface_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f004 fba7 	bl	800d3d0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c82:	f3ef 8310 	mrs	r3, PRIMASK
 8008c86:	617b      	str	r3, [r7, #20]
    return(posture);
 8008c88:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008c8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c8c:	b672      	cpsid	i
    return(int_posture);
 8008c8e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008c90:	61fb      	str	r3, [r7, #28]


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	214c      	movs	r1, #76	; 0x4c
 8008c98:	fb01 f303 	mul.w	r3, r1, r3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	214c      	movs	r1, #76	; 0x4c
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f383 8810 	msr	PRIMASK, r3
}
 8008cc8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f004 fe03 	bl	800d8dc <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8008cd6:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3720      	adds	r7, #32
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <_nx_ip_interface_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08c      	sub	sp, #48	; 0x30
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f004 fb69 	bl	800d3d0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8008d02:	617b      	str	r3, [r7, #20]
    return(posture);
 8008d04:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008d06:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d08:	b672      	cpsid	i
    return(int_posture);
 8008d0a:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	214c      	movs	r1, #76	; 0x4c
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	62bb      	str	r3, [r7, #40]	; 0x28
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	214c      	movs	r1, #76	; 0x4c
 8008d28:	fb01 f303 	mul.w	r3, r1, r3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the current notification callback and additional information pointers.  */
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3c:	623b      	str	r3, [r7, #32]
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d44:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	214c      	movs	r1, #76	; 0x4c
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	214c      	movs	r1, #76	; 0x4c
 8008d60:	fb01 f303 	mul.w	r3, r1, r3
 8008d64:	4413      	add	r3, r2
 8008d66:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	401a      	ands	r2, r3
 8008d74:	68f9      	ldr	r1, [r7, #12]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	204c      	movs	r0, #76	; 0x4c
 8008d7a:	fb00 f303 	mul.w	r3, r0, r3
 8008d7e:	440b      	add	r3, r1
 8008d80:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8008d84:	601a      	str	r2, [r3, #0]

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	f383 8810 	msr	PRIMASK, r3
}
 8008da0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008da8:	4618      	mov	r0, r3
 8008daa:	f004 fd97 	bl	800d8dc <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <_nx_ip_interface_address_set+0xec>
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d103      	bne.n	8008dc4 <_nx_ip_interface_address_set+0xe4>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d003      	beq.n	8008dcc <_nx_ip_interface_address_set+0xec>
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	69f9      	ldr	r1, [r7, #28]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	4798      	blx	r3
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	214c      	movs	r1, #76	; 0x4c
 8008dd2:	fb01 f303 	mul.w	r3, r1, r3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]

    /* Return completion status.  */
    return(NX_SUCCESS);
 8008de0:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3730      	adds	r7, #48	; 0x30
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <_nx_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                    ULONG *actual_status, ULONG wait_option)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b08e      	sub	sp, #56	; 0x38
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	603b      	str	r3, [r7, #0]
    /* Loop to keep checking for the proper status bits.  */
    for (;;)
    {

        /* Clear the current status.  */
        current_status =  0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	637b      	str	r3, [r7, #52]	; 0x34

        /*  Process according to the status option specified.  */

        if (needed_status & NX_IP_INITIALIZE_DONE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d008      	beq.n	8008e18 <_nx_ip_interface_status_check+0x2e>
        {

            /* Check for initialization complete.  */
            if (ip_ptr -> nx_ip_initialize_done)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <_nx_ip_interface_status_check+0x2e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_INITIALIZE_DONE;
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e12:	f043 0301 	orr.w	r3, r3, #1
 8008e16:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

#ifndef NX_DISABLE_IPV4
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00e      	beq.n	8008e40 <_nx_ip_interface_status_check+0x56>
        {

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	214c      	movs	r1, #76	; 0x4c
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <_nx_ip_interface_status_check+0x56>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 8008e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3a:	f043 0302 	orr.w	r3, r3, #2
 8008e3e:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_ARP_ENABLED)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0308 	and.w	r3, r3, #8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d008      	beq.n	8008e5c <_nx_ip_interface_status_check+0x72>
        {

            /* Check for ARP being enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <_nx_ip_interface_status_check+0x72>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ARP_ENABLED;
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	f043 0308 	orr.w	r3, r3, #8
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_RARP_COMPLETE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00e      	beq.n	8008e84 <_nx_ip_interface_status_check+0x9a>
        {

            /* This is effectively the same as the IP address resolved...  */

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	214c      	movs	r1, #76	; 0x4c
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <_nx_ip_interface_status_check+0x9a>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_IGMP_ENABLED)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d008      	beq.n	8008ea0 <_nx_ip_interface_status_check+0xb6>
        {

            /* Check for IGMP being enabled.  */
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <_nx_ip_interface_status_check+0xb6>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 8008e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        if (needed_status & NX_IP_LINK_ENABLED)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d048      	beq.n	8008f3c <_nx_ip_interface_status_check+0x152>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f004 fa8b 	bl	800d3d0 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8008ebe:	230a      	movs	r3, #10
 8008ec0:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8008ec2:	f107 0310 	add.w	r3, r7, #16
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	224c      	movs	r2, #76	; 0x4c
 8008ecc:	fb02 f303 	mul.w	r3, r2, r3
 8008ed0:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	3304      	adds	r3, #4
 8008eda:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	214c      	movs	r1, #76	; 0x4c
 8008ee2:	fb01 f303 	mul.w	r3, r1, r3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f107 0214 	add.w	r2, r7, #20
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d012      	beq.n	8008f22 <_nx_ip_interface_status_check+0x138>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	2b44      	cmp	r3, #68	; 0x44
 8008f00:	d116      	bne.n	8008f30 <_nx_ip_interface_status_check+0x146>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	214c      	movs	r1, #76	; 0x4c
 8008f08:	fb01 f303 	mul.w	r3, r1, r3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f203 7322 	addw	r3, r3, #1826	; 0x722
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00b      	beq.n	8008f30 <_nx_ip_interface_status_check+0x146>
                    {
                        current_status = current_status | NX_IP_LINK_ENABLED;
 8008f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1a:	f043 0304 	orr.w	r3, r3, #4
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f20:	e006      	b.n	8008f30 <_nx_ip_interface_status_check+0x146>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d103      	bne.n	8008f30 <_nx_ip_interface_status_check+0x146>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 8008f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2a:	f043 0304 	orr.w	r3, r3, #4
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008f36:	4618      	mov	r0, r3
 8008f38:	f004 fcd0 	bl	800d8dc <_tx_mutex_put>
        }

        if (needed_status &  NX_IP_UDP_ENABLED)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <_nx_ip_interface_status_check+0x16e>
        {

            /* Check for UDP being enabled.  */
            if (ip_ptr -> nx_ip_udp_packet_receive)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <_nx_ip_interface_status_check+0x16e>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_UDP_ENABLED;
 8008f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f52:	f043 0310 	orr.w	r3, r3, #16
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_TCP_ENABLED)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d008      	beq.n	8008f74 <_nx_ip_interface_status_check+0x18a>
        {

            /* Check for TCP being enabled.  */
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <_nx_ip_interface_status_check+0x18a>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6e:	f043 0320 	orr.w	r3, r3, #32
 8008f72:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d048      	beq.n	8009010 <_nx_ip_interface_status_check+0x226>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f004 fa21 	bl	800d3d0 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8008f92:	230a      	movs	r3, #10
 8008f94:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8008f96:	f107 0310 	add.w	r3, r7, #16
 8008f9a:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	224c      	movs	r2, #76	; 0x4c
 8008fa0:	fb02 f303 	mul.w	r3, r2, r3
 8008fa4:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	3304      	adds	r3, #4
 8008fae:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	214c      	movs	r1, #76	; 0x4c
 8008fb6:	fb01 f303 	mul.w	r3, r1, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f107 0214 	add.w	r2, r7, #20
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d012      	beq.n	8008ff6 <_nx_ip_interface_status_check+0x20c>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2b44      	cmp	r3, #68	; 0x44
 8008fd4:	d116      	bne.n	8009004 <_nx_ip_interface_status_check+0x21a>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	214c      	movs	r1, #76	; 0x4c
 8008fdc:	fb01 f303 	mul.w	r3, r1, r3
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f203 7322 	addw	r3, r3, #1826	; 0x722
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <_nx_ip_interface_status_check+0x21a>
                    {
                        current_status = current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff4:	e006      	b.n	8009004 <_nx_ip_interface_status_check+0x21a>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d103      	bne.n	8009004 <_nx_ip_interface_status_check+0x21a>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8008ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009002:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800900a:	4618      	mov	r0, r3
 800900c:	f004 fc66 	bl	800d8dc <_tx_mutex_put>
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 8009010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d00f      	beq.n	8009038 <_nx_ip_interface_status_check+0x24e>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 8009018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <_nx_ip_interface_status_check+0x252>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 800901e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009020:	2b01      	cmp	r3, #1
 8009022:	d903      	bls.n	800902c <_nx_ip_interface_status_check+0x242>
            {
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 8009024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009026:	3b01      	subs	r3, #1
 8009028:	643b      	str	r3, [r7, #64]	; 0x40
 800902a:	e001      	b.n	8009030 <_nx_ip_interface_status_check+0x246>
            }
            else
            {
                wait_option = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8009030:	2001      	movs	r0, #1
 8009032:	f005 f95f 	bl	800e2f4 <_tx_thread_sleep>
        current_status =  0;
 8009036:	e6df      	b.n	8008df8 <_nx_ip_interface_status_check+0xe>
            break;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <_nx_ip_interface_status_check+0x254>
        }
        else
        {

            /* Get out of the loop.  */
            break;
 800903c:	bf00      	nop
        }
    }

    /* Place the current status in the return destination.  */
    *actual_status =  current_status;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009042:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_STATUS_CHECK, 0, 0, current_status, 0);

    /* Determine what status to return.  */
    if (needed_status == current_status)
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	429a      	cmp	r2, r3
 800904a:	d101      	bne.n	8009050 <_nx_ip_interface_status_check+0x266>
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 800904c:	2300      	movs	r3, #0
 800904e:	e000      	b.n	8009052 <_nx_ip_interface_status_check+0x268>
    }
    else
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
 8009050:	2343      	movs	r3, #67	; 0x43
    }
}
 8009052:	4618      	mov	r0, r3
 8009054:	3738      	adds	r7, #56	; 0x38
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b088      	sub	sp, #32
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009064:	f3ef 8310 	mrs	r3, PRIMASK
 8009068:	61bb      	str	r3, [r7, #24]
    return(posture);
 800906a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800906c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800906e:	b672      	cpsid	i
    return(int_posture);
 8009070:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009072:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800907a:	2b00      	cmp	r3, #0
 800907c:	d011      	beq.n	80090a2 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f383 8810 	msr	PRIMASK, r3
}
 80090a0:	e019      	b.n	80090d6 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2200      	movs	r2, #0
 80090b6:	61da      	str	r2, [r3, #28]
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f383 8810 	msr	PRIMASK, r3
}
 80090c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80090ca:	2200      	movs	r2, #0
 80090cc:	2108      	movs	r1, #8
 80090ce:	4618      	mov	r0, r3
 80090d0:	f003 fd3a 	bl	800cb48 <_tx_event_flags_set>
    }
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	091b      	lsrs	r3, r3, #4
 8009110:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	7bba      	ldrb	r2, [r7, #14]
 8009116:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b04      	cmp	r3, #4
 8009126:	d10b      	bne.n	8009140 <_nx_ip_packet_receive+0x62>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	4798      	blx	r3
        return;
 800913e:	e00d      	b.n	800915c <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 8009154:	6838      	ldr	r0, [r7, #0]
 8009156:	f001 fb91 	bl	800a87c <_nx_packet_release>

    return;
 800915a:	bf00      	nop
}
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b088      	sub	sp, #32
 8009166:	af04      	add	r7, sp, #16
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
 800916e:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	d114      	bne.n	80091ac <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f1a3 0214 	sub.w	r2, r3, #20
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	f103 0214 	add.w	r2, r3, #20
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 80091a4:	68b8      	ldr	r0, [r7, #8]
 80091a6:	f001 fc1f 	bl	800a9e8 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 80091aa:	e03b      	b.n	8009224 <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	9302      	str	r3, [sp, #8]
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68b9      	ldr	r1, [r7, #8]
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7ff fc72 	bl	8008ab0 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d120      	bne.n	8009214 <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00b      	beq.n	80091f4 <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2200      	movs	r2, #0
 80091e0:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 f82e 	bl	8009250 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <_nx_ip_packet_send+0xa0>
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d108      	bne.n	8009214 <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800920c:	68b8      	ldr	r0, [r7, #8]
 800920e:	f001 fbeb 	bl	800a9e8 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 8009212:	e007      	b.n	8009224 <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff f96b 	bl	80084fa <_nx_ip_driver_packet_send>
}
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800923c:	2200      	movs	r2, #0
 800923e:	2101      	movs	r1, #1
 8009240:	4618      	mov	r0, r3
 8009242:	f003 fc81 	bl	800cb48 <_tx_event_flags_set>
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800926a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800926e:	d003      	beq.n	8009278 <_nx_ip_route_find+0x28>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009276:	d131      	bne.n	80092dc <_nx_ip_route_find+0x8c>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d121      	bne.n	80092ca <_nx_ip_route_find+0x7a>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	e01a      	b.n	80092c2 <_nx_ip_route_find+0x72>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	214c      	movs	r1, #76	; 0x4c
 8009292:	fb01 f303 	mul.w	r3, r1, r3
 8009296:	4413      	add	r3, r2
 8009298:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00c      	beq.n	80092bc <_nx_ip_route_find+0x6c>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	224c      	movs	r2, #76	; 0x4c
 80092a6:	fb02 f303 	mul.w	r3, r2, r3
 80092aa:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	1d1a      	adds	r2, r3, #4
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 80092b8:	2300      	movs	r3, #0
 80092ba:	e13b      	b.n	8009534 <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	3301      	adds	r3, #1
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0e1      	beq.n	800928c <_nx_ip_route_find+0x3c>
 80092c8:	e006      	b.n	80092d8 <_nx_ip_route_find+0x88>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	799b      	ldrb	r3, [r3, #6]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <_nx_ip_route_find+0x88>
        {
            return(NX_SUCCESS);
 80092d4:	2300      	movs	r3, #0
 80092d6:	e12d      	b.n	8009534 <_nx_ip_route_find+0x2e4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 80092d8:	2321      	movs	r3, #33	; 0x21
 80092da:	e12b      	b.n	8009534 <_nx_ip_route_find+0x2e4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	e02a      	b.n	8009338 <_nx_ip_route_find+0xe8>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	224c      	movs	r2, #76	; 0x4c
 80092e6:	fb02 f303 	mul.w	r3, r2, r3
 80092ea:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	3304      	adds	r3, #4
 80092f4:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d019      	beq.n	8009332 <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_link_up) &&
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8009302:	2b00      	cmp	r3, #0
 8009304:	d015      	beq.n	8009332 <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	429a      	cmp	r2, r3
 800930e:	d110      	bne.n	8009332 <_nx_ip_route_find+0xe2>
            ((*ip_interface_ptr == NX_NULL) ||
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8009314:	2b00      	cmp	r3, #0
 8009316:	d004      	beq.n	8009322 <_nx_ip_route_find+0xd2>
             (*ip_interface_ptr == interface_ptr)))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	429a      	cmp	r2, r3
 8009320:	d107      	bne.n	8009332 <_nx_ip_route_find+0xe2>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800932e:	2300      	movs	r3, #0
 8009330:	e100      	b.n	8009534 <_nx_ip_route_find+0x2e4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	3301      	adds	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0d1      	beq.n	80092e2 <_nx_ip_route_find+0x92>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e036      	b.n	80093b2 <_nx_ip_route_find+0x162>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	224c      	movs	r2, #76	; 0x4c
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	3304      	adds	r3, #4
 8009356:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	791b      	ldrb	r3, [r3, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d025      	beq.n	80093ac <_nx_ip_route_find+0x15c>
            (interface_ptr -> nx_interface_link_up) &&
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8009364:	2b00      	cmp	r3, #0
 8009366:	d021      	beq.n	80093ac <_nx_ip_route_find+0x15c>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	401a      	ands	r2, r3
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 8009374:	429a      	cmp	r2, r3
 8009376:	d119      	bne.n	80093ac <_nx_ip_route_find+0x15c>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d103      	bne.n	8009388 <_nx_ip_route_find+0x138>
            {
                *ip_interface_ptr = interface_ptr;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	e00b      	b.n	80093a0 <_nx_ip_route_find+0x150>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d103      	bne.n	8009396 <_nx_ip_route_find+0x146>
            {
                *ip_interface_ptr = interface_ptr;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	e004      	b.n	80093a0 <_nx_ip_route_find+0x150>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	429a      	cmp	r2, r3
 800939e:	d104      	bne.n	80093aa <_nx_ip_route_find+0x15a>
            {
                continue;
            }

            *next_hop_address = destination_address;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 80093a6:	2300      	movs	r3, #0
 80093a8:	e0c4      	b.n	8009534 <_nx_ip_route_find+0x2e4>
                continue;
 80093aa:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	3301      	adds	r3, #1
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d9c5      	bls.n	8009344 <_nx_ip_route_find+0xf4>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	4b61      	ldr	r3, [pc, #388]	; (8009540 <_nx_ip_route_find+0x2f0>)
 80093bc:	4013      	ands	r3, r2
 80093be:	4a61      	ldr	r2, [pc, #388]	; (8009544 <_nx_ip_route_find+0x2f4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d141      	bne.n	8009448 <_nx_ip_route_find+0x1f8>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00e      	beq.n	80093ea <_nx_ip_route_find+0x19a>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	791b      	ldrb	r3, [r3, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d038      	beq.n	8009448 <_nx_ip_route_find+0x1f8>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d033      	beq.n	8009448 <_nx_ip_route_find+0x1f8>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 80093e6:	2300      	movs	r3, #0
 80093e8:	e0a4      	b.n	8009534 <_nx_ip_route_find+0x2e4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80093ea:	2300      	movs	r3, #0
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	e028      	b.n	8009442 <_nx_ip_route_find+0x1f2>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	214c      	movs	r1, #76	; 0x4c
 80093f6:	fb01 f303 	mul.w	r3, r1, r3
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d01a      	beq.n	800943c <_nx_ip_route_find+0x1ec>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	214c      	movs	r1, #76	; 0x4c
 800940c:	fb01 f303 	mul.w	r3, r1, r3
 8009410:	4413      	add	r3, r2
 8009412:	f203 7322 	addw	r3, r3, #1826	; 0x722
 8009416:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00f      	beq.n	800943c <_nx_ip_route_find+0x1ec>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	224c      	movs	r2, #76	; 0x4c
 8009420:	fb02 f303 	mul.w	r3, r2, r3
 8009424:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	1d1a      	adds	r2, r3, #4
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 8009438:	2300      	movs	r3, #0
 800943a:	e07b      	b.n	8009534 <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	3301      	adds	r3, #1
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d9d3      	bls.n	80093f0 <_nx_ip_route_find+0x1a0>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d02b      	beq.n	80094a8 <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface) &&
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8009454:	2b00      	cmp	r3, #0
 8009456:	d027      	beq.n	80094a8 <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 800945e:	2b00      	cmp	r3, #0
 8009460:	d022      	beq.n	80094a8 <_nx_ip_route_find+0x258>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 8009474:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 8009476:	429a      	cmp	r2, r3
 8009478:	d001      	beq.n	800947e <_nx_ip_route_find+0x22e>
        {
            return(NX_IP_ADDRESS_ERROR);
 800947a:	2321      	movs	r3, #33	; 0x21
 800947c:	e05a      	b.n	8009534 <_nx_ip_route_find+0x2e4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d103      	bne.n	800948e <_nx_ip_route_find+0x23e>
        {
            *ip_interface_ptr = interface_ptr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e006      	b.n	800949c <_nx_ip_route_find+0x24c>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	429a      	cmp	r2, r3
 8009496:	d001      	beq.n	800949c <_nx_ip_route_find+0x24c>
        {
            return(NX_IP_ADDRESS_ERROR);
 8009498:	2321      	movs	r3, #33	; 0x21
 800949a:	e04b      	b.n	8009534 <_nx_ip_route_find+0x2e4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 80094a4:	2300      	movs	r3, #0
 80094a6:	e045      	b.n	8009534 <_nx_ip_route_find+0x2e4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d016      	beq.n	80094de <_nx_ip_route_find+0x28e>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	791b      	ldrb	r3, [r3, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d03b      	beq.n	8009532 <_nx_ip_route_find+0x2e2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d036      	beq.n	8009532 <_nx_ip_route_find+0x2e2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	695a      	ldr	r2, [r3, #20]
 80094ca:	4b1d      	ldr	r3, [pc, #116]	; (8009540 <_nx_ip_route_find+0x2f0>)
 80094cc:	4013      	ands	r3, r2
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <_nx_ip_route_find+0x2f4>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d12e      	bne.n	8009532 <_nx_ip_route_find+0x2e2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 80094da:	2300      	movs	r3, #0
 80094dc:	e02a      	b.n	8009534 <_nx_ip_route_find+0x2e4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e023      	b.n	800952c <_nx_ip_route_find+0x2dc>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	224c      	movs	r2, #76	; 0x4c
 80094e8:	fb02 f303 	mul.w	r3, r2, r3
 80094ec:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	3304      	adds	r3, #4
 80094f6:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	791b      	ldrb	r3, [r3, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d012      	beq.n	8009526 <_nx_ip_route_find+0x2d6>
                (interface_ptr -> nx_interface_link_up) &&
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00e      	beq.n	8009526 <_nx_ip_route_find+0x2d6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	695a      	ldr	r2, [r3, #20]
 800950c:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <_nx_ip_route_find+0x2f0>)
 800950e:	4013      	ands	r3, r2
                (interface_ptr -> nx_interface_link_up) &&
 8009510:	4a0c      	ldr	r2, [pc, #48]	; (8009544 <_nx_ip_route_find+0x2f4>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d107      	bne.n	8009526 <_nx_ip_route_find+0x2d6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 8009522:	2300      	movs	r3, #0
 8009524:	e006      	b.n	8009534 <_nx_ip_route_find+0x2e4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	3301      	adds	r3, #1
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d9d8      	bls.n	80094e4 <_nx_ip_route_find+0x294>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 8009532:	2321      	movs	r3, #33	; 0x21
}
 8009534:	4618      	mov	r0, r3
 8009536:	371c      	adds	r7, #28
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	ffff0000 	.word	0xffff0000
 8009544:	a9fe0000 	.word	0xa9fe0000

08009548 <_nx_ip_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_status_check(NX_IP *ip_ptr, ULONG needed_status,
                          ULONG *actual_status, ULONG wait_option)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af02      	add	r7, sp, #8
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
    return(_nx_ip_interface_status_check(ip_ptr, 0, needed_status, actual_status, wait_option));
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	2100      	movs	r1, #0
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f7ff fc42 	bl	8008dea <_nx_ip_interface_status_check>
 8009566:	4603      	mov	r3, r0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b096      	sub	sp, #88	; 0x58
 8009574:	af02      	add	r7, sp, #8
 8009576:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800957c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800957e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009582:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009586:	4618      	mov	r0, r3
 8009588:	f003 ff22 	bl	800d3d0 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 800958c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958e:	2201      	movs	r2, #1
 8009590:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009594:	2300      	movs	r3, #0
 8009596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009598:	e05f      	b.n	800965a <_nx_ip_thread_entry+0xea>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800959a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800959c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959e:	214c      	movs	r1, #76	; 0x4c
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d051      	beq.n	8009654 <_nx_ip_thread_entry+0xe4>
 80095b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b4:	214c      	movs	r1, #76	; 0x4c
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d046      	beq.n	8009654 <_nx_ip_thread_entry+0xe4>
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 80095c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ca:	214c      	movs	r1, #76	; 0x4c
 80095cc:	fb01 f303 	mul.w	r3, r1, r3
 80095d0:	4413      	add	r3, r2
 80095d2:	f203 7322 	addw	r3, r3, #1826	; 0x722
 80095d6:	2201      	movs	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 80095da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 80095de:	2313      	movs	r3, #19
 80095e0:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 80095e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e4:	224c      	movs	r2, #76	; 0x4c
 80095e6:	fb02 f303 	mul.w	r3, r2, r3
 80095ea:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 80095ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095f0:	4413      	add	r3, r2
 80095f2:	3304      	adds	r3, #4
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80095f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095fa:	214c      	movs	r1, #76	; 0x4c
 80095fc:	fb01 f303 	mul.w	r3, r1, r3
 8009600:	4413      	add	r3, r2
 8009602:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f107 0210 	add.w	r2, r7, #16
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 8009610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 8009614:	2301      	movs	r3, #1
 8009616:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8009618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800961a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800961c:	214c      	movs	r1, #76	; 0x4c
 800961e:	fb01 f303 	mul.w	r3, r1, r3
 8009622:	4413      	add	r3, r2
 8009624:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f107 0210 	add.w	r2, r7, #16
 800962e:	4610      	mov	r0, r2
 8009630:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 8009632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009634:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 8009636:	2302      	movs	r3, #2
 8009638:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800963a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800963c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963e:	214c      	movs	r1, #76	; 0x4c
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	4413      	add	r3, r2
 8009646:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f107 0210 	add.w	r2, r7, #16
 8009650:	4610      	mov	r0, r2
 8009652:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009656:	3301      	adds	r3, #1
 8009658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800965a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965c:	2b00      	cmp	r3, #0
 800965e:	d09c      	beq.n	800959a <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009662:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009666:	4618      	mov	r0, r3
 8009668:	f004 f938 	bl	800d8dc <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800966c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966e:	f503 7012 	add.w	r0, r3, #584	; 0x248
 8009672:	f107 030c 	add.w	r3, r7, #12
 8009676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800967a:	9200      	str	r2, [sp, #0]
 800967c:	2201      	movs	r2, #1
 800967e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009682:	f003 f97f 	bl	800c984 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009688:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800968c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009690:	4618      	mov	r0, r3
 8009692:	f003 fe9d 	bl	800d3d0 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f003 0308 	and.w	r3, r3, #8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d031      	beq.n	8009704 <_nx_ip_thread_entry+0x194>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 80096a0:	e023      	b.n	80096ea <_nx_ip_thread_entry+0x17a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096a2:	f3ef 8310 	mrs	r3, PRIMASK
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80096ac:	b672      	cpsid	i
    return(int_posture);
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 80096b0:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 80096b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80096ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096bc:	69da      	ldr	r2, [r3, #28]
 80096be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 80096c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d103      	bne.n	80096d6 <_nx_ip_thread_entry+0x166>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 80096ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 80096d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	f383 8810 	msr	PRIMASK, r3
}
 80096e0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 80096e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80096e6:	f7ff fcfa 	bl	80090de <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 80096ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ec:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1d6      	bne.n	80096a2 <_nx_ip_thread_entry+0x132>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0308 	bic.w	r3, r3, #8
 80096fa:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 812d 	beq.w	800995e <_nx_ip_thread_entry+0x3ee>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00c      	beq.n	8009728 <_nx_ip_thread_entry+0x1b8>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800970e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009710:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8009714:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009716:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800971e:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 811d 	beq.w	8009962 <_nx_ip_thread_entry+0x3f2>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800972e:	2b00      	cmp	r3, #0
 8009730:	d011      	beq.n	8009756 <_nx_ip_thread_entry+0x1e6>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 8009732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009734:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8009738:	2b00      	cmp	r3, #0
 800973a:	d004      	beq.n	8009746 <_nx_ip_thread_entry+0x1d6>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800973c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800973e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8009742:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009744:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800974c:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 8108 	beq.w	8009966 <_nx_ip_thread_entry+0x3f6>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d039      	beq.n	80097d4 <_nx_ip_thread_entry+0x264>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 8009760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009762:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d004      	beq.n	8009774 <_nx_ip_thread_entry+0x204>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 800976a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800976c:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8009770:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009772:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 8009774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009776:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800977a:	2b00      	cmp	r3, #0
 800977c:	d004      	beq.n	8009788 <_nx_ip_thread_entry+0x218>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800977e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009780:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 8009784:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009786:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 8009788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978a:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <_nx_ip_thread_entry+0x22c>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 8009792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009794:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8009798:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800979a:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800979c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800979e:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d004      	beq.n	80097b0 <_nx_ip_thread_entry+0x240>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 80097a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a8:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80097ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097ae:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 80097b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d004      	beq.n	80097c4 <_nx_ip_thread_entry+0x254>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 80097ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097bc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80097c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097c2:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0301 	bic.w	r3, r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 80cb 	beq.w	800996a <_nx_ip_thread_entry+0x3fa>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d009      	beq.n	80097f2 <_nx_ip_thread_entry+0x282>
 80097de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e0:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <_nx_ip_thread_entry+0x282>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 80097e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ea:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80097ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097f0:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f003 0320 	and.w	r3, r3, #32
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <_nx_ip_thread_entry+0x2a0>
 80097fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097fe:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <_nx_ip_thread_entry+0x2a0>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 8009806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009808:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800980c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800980e:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <_nx_ip_thread_entry+0x2b4>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800981a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981c:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8009820:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009822:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800982a:	2b00      	cmp	r3, #0
 800982c:	d033      	beq.n	8009896 <_nx_ip_thread_entry+0x326>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800982e:	2300      	movs	r3, #0
 8009830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009832:	e02d      	b.n	8009890 <_nx_ip_thread_entry+0x320>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 8009834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009838:	214c      	movs	r1, #76	; 0x4c
 800983a:	fb01 f303 	mul.w	r3, r1, r3
 800983e:	4413      	add	r3, r2
 8009840:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d01f      	beq.n	800988a <_nx_ip_thread_entry+0x31a>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800984a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800984c:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800984e:	2308      	movs	r3, #8
 8009850:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 8009852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009856:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 8009858:	4b45      	ldr	r3, [pc, #276]	; (8009970 <_nx_ip_thread_entry+0x400>)
 800985a:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800985c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985e:	224c      	movs	r2, #76	; 0x4c
 8009860:	fb02 f303 	mul.w	r3, r2, r3
 8009864:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800986a:	4413      	add	r3, r2
 800986c:	3304      	adds	r3, #4
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8009870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009874:	214c      	movs	r1, #76	; 0x4c
 8009876:	fb01 f303 	mul.w	r3, r1, r3
 800987a:	4413      	add	r3, r2
 800987c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f107 0210 	add.w	r2, r7, #16
 8009886:	4610      	mov	r0, r2
 8009888:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800988a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800988c:	3301      	adds	r3, #1
 800988e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0ce      	beq.n	8009834 <_nx_ip_thread_entry+0x2c4>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d009      	beq.n	80098b4 <_nx_ip_thread_entry+0x344>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 80098a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098a2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d004      	beq.n	80098b4 <_nx_ip_thread_entry+0x344>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 80098aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ac:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80098b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80098b2:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f003 0304 	and.w	r3, r3, #4
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <_nx_ip_thread_entry+0x358>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 80098be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c0:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 80098c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80098c6:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d031      	beq.n	8009936 <_nx_ip_thread_entry+0x3c6>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098d6:	e02b      	b.n	8009930 <_nx_ip_thread_entry+0x3c0>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 80098d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098dc:	214c      	movs	r1, #76	; 0x4c
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01d      	beq.n	800992a <_nx_ip_thread_entry+0x3ba>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 80098ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f0:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 80098f2:	2312      	movs	r3, #18
 80098f4:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 80098f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f8:	224c      	movs	r2, #76	; 0x4c
 80098fa:	fb02 f303 	mul.w	r3, r2, r3
 80098fe:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009904:	4413      	add	r3, r2
 8009906:	3304      	adds	r3, #4
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800990a:	f107 0308 	add.w	r3, r7, #8
 800990e:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 8009910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009914:	214c      	movs	r1, #76	; 0x4c
 8009916:	fb01 f303 	mul.w	r3, r1, r3
 800991a:	4413      	add	r3, r2
 800991c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f107 0210 	add.w	r2, r7, #16
 8009926:	4610      	mov	r0, r2
 8009928:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800992a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800992c:	3301      	adds	r3, #1
 800992e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0d0      	beq.n	80098d8 <_nx_ip_thread_entry+0x368>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <_nx_ip_thread_entry+0x3da>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 8009940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009942:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 8009946:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009948:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009950:	2b00      	cmp	r3, #0
 8009952:	f43f ae85 	beq.w	8009660 <_nx_ip_thread_entry+0xf0>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 8009956:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009958:	f7fe fcb2 	bl	80082c0 <_nx_ip_deferred_link_status_process>
 800995c:	e680      	b.n	8009660 <_nx_ip_thread_entry+0xf0>
                continue;
 800995e:	bf00      	nop
 8009960:	e67e      	b.n	8009660 <_nx_ip_thread_entry+0xf0>
                continue;
 8009962:	bf00      	nop
 8009964:	e67c      	b.n	8009660 <_nx_ip_thread_entry+0xf0>
                continue;
 8009966:	bf00      	nop
 8009968:	e67a      	b.n	8009660 <_nx_ip_thread_entry+0xf0>
                continue;
 800996a:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800996c:	e678      	b.n	8009660 <_nx_ip_thread_entry+0xf0>
 800996e:	bf00      	nop
 8009970:	5e000001 	.word	0x5e000001

08009974 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 800997e:	2314      	movs	r3, #20
 8009980:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	3314      	adds	r3, #20
 8009996:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	0e1b      	lsrs	r3, r3, #24
 800999e:	f003 030f 	and.w	r3, r3, #15
 80099a2:	3b05      	subs	r3, #5
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 80099aa:	e0a3      	b.n	8009af4 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	2b44      	cmp	r3, #68	; 0x44
 80099b6:	d010      	beq.n	80099da <_nx_ipv4_option_process+0x66>
 80099b8:	2b44      	cmp	r3, #68	; 0x44
 80099ba:	f300 8082 	bgt.w	8009ac2 <_nx_ipv4_option_process+0x14e>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <_nx_ipv4_option_process+0x54>
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d002      	beq.n	80099cc <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 80099c6:	e07c      	b.n	8009ac2 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 80099c8:	2301      	movs	r3, #1
 80099ca:	e099      	b.n	8009b00 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	3301      	adds	r3, #1
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	3301      	adds	r3, #1
 80099d6:	623b      	str	r3, [r7, #32]
            continue;
 80099d8:	e08c      	b.n	8009af4 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	3301      	adds	r3, #1
 80099de:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d90b      	bls.n	80099fe <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	4413      	add	r3, r2
 80099ec:	3302      	adds	r3, #2
 80099ee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe f8b8 	bl	8007b6a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80099fa:	2300      	movs	r3, #0
 80099fc:	e080      	b.n	8009b00 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	785b      	ldrb	r3, [r3, #1]
 8009a02:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	789b      	ldrb	r3, [r3, #2]
 8009a08:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	3303      	adds	r3, #3
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	091b      	lsrs	r3, r3, #4
 8009a12:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	3303      	adds	r3, #3
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	f003 030f 	and.w	r3, r3, #15
 8009a1e:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	2b07      	cmp	r3, #7
 8009a24:	d908      	bls.n	8009a38 <_nx_ipv4_option_process+0xc4>
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	2b28      	cmp	r3, #40	; 0x28
 8009a2a:	d805      	bhi.n	8009a38 <_nx_ipv4_option_process+0xc4>
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3302      	adds	r3, #2
 8009a40:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7fe f88f 	bl	8007b6a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e057      	b.n	8009b00 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 8009a50:	7b7b      	ldrb	r3, [r7, #13]
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d905      	bls.n	8009a62 <_nx_ipv4_option_process+0xee>
 8009a56:	7b7b      	ldrb	r3, [r7, #13]
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10b      	bne.n	8009a7a <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	4413      	add	r3, r2
 8009a68:	3303      	adds	r3, #3
 8009a6a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fe f87a 	bl	8007b6a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8009a76:	2300      	movs	r3, #0
 8009a78:	e042      	b.n	8009b00 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 8009a7a:	7b3b      	ldrb	r3, [r7, #12]
 8009a7c:	2b0f      	cmp	r3, #15
 8009a7e:	d10b      	bne.n	8009a98 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	4413      	add	r3, r2
 8009a86:	3304      	adds	r3, #4
 8009a88:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fe f86b 	bl	8007b6a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8009a94:	2300      	movs	r3, #0
 8009a96:	e033      	b.n	8009b00 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d013      	beq.n	8009ac6 <_nx_ipv4_option_process+0x152>
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d010      	beq.n	8009ac6 <_nx_ipv4_option_process+0x152>
 8009aa4:	7afb      	ldrb	r3, [r7, #11]
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d00d      	beq.n	8009ac6 <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	4413      	add	r3, r2
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7fe f856 	bl	8007b6a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e01e      	b.n	8009b00 <_nx_ipv4_option_process+0x18c>
            break;
 8009ac2:	bf00      	nop
 8009ac4:	e000      	b.n	8009ac8 <_nx_ipv4_option_process+0x154>
            break;
 8009ac6:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d905      	bls.n	8009ae0 <_nx_ipv4_option_process+0x16c>
 8009ad4:	7bba      	ldrb	r2, [r7, #14]
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	4413      	add	r3, r2
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d201      	bcs.n	8009ae4 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e00d      	b.n	8009b00 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae8:	4413      	add	r3, r2
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	6a3a      	ldr	r2, [r7, #32]
 8009af0:	4413      	add	r3, r2
 8009af2:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 8009af4:	6a3a      	ldr	r2, [r7, #32]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	f4ff af57 	bcc.w	80099ac <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 8009afe:	2301      	movs	r3, #1
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3728      	adds	r7, #40	; 0x28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b096      	sub	sp, #88	; 0x58
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	64bb      	str	r3, [r7, #72]	; 0x48
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 8009b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 8009b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b20:	ba1b      	rev	r3, r3
 8009b22:	643b      	str	r3, [r7, #64]	; 0x40

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 8009b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d066      	beq.n	8009c02 <_nx_ipv4_packet_receive+0xfa>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d90d      	bls.n	8009b5a <_nx_ipv4_packet_receive+0x52>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 8009b52:	6838      	ldr	r0, [r7, #0]
 8009b54:	f000 fe92 	bl	800a87c <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 8009b58:	e228      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	647b      	str	r3, [r7, #68]	; 0x44

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 8009b70:	e044      	b.n	8009bfc <_nx_ipv4_packet_receive+0xf4>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d107      	bne.n	8009b8a <_nx_ipv4_packet_receive+0x82>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68da      	ldr	r2, [r3, #12]
 8009b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b80:	425b      	negs	r3, r3
 8009b82:	441a      	add	r2, r3
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 8009b88:	e03b      	b.n	8009c02 <_nx_ipv4_packet_receive+0xfa>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d207      	bcs.n	8009bb2 <_nx_ipv4_packet_receive+0xaa>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba8:	425b      	negs	r3, r3
 8009baa:	441a      	add	r2, r3
 8009bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bae:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 8009bb0:	e027      	b.n	8009c02 <_nx_ipv4_packet_receive+0xfa>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	647b      	str	r3, [r7, #68]	; 0x44

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 8009bc8:	e002      	b.n	8009bd0 <_nx_ipv4_packet_receive+0xc8>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 8009bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	64fb      	str	r3, [r7, #76]	; 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 8009bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d1f7      	bne.n	8009bca <_nx_ipv4_packet_receive+0xc2>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 8009bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d003      	beq.n	8009bf0 <_nx_ipv4_packet_receive+0xe8>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bec:	619a      	str	r2, [r3, #24]
 8009bee:	e002      	b.n	8009bf6 <_nx_ipv4_packet_receive+0xee>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 8009bf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009bf8:	f000 fe40 	bl	800a87c <_nx_packet_release>
        while (delta)
 8009bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1b7      	bne.n	8009b72 <_nx_ipv4_packet_receive+0x6a>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c06:	637b      	str	r3, [r7, #52]	; 0x34

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8009c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c0a:	0e1b      	lsrs	r3, r3, #24
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d902      	bls.n	8009c24 <_nx_ipv4_packet_receive+0x11c>
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d80d      	bhi.n	8009c40 <_nx_ipv4_packet_receive+0x138>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8009c38:	6838      	ldr	r0, [r7, #0]
 8009c3a:	f000 fe1f 	bl	800a87c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8009c3e:	e1b5      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8009c44:	2300      	movs	r3, #0
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2104      	movs	r1, #4
 8009c4c:	6838      	ldr	r0, [r7, #0]
 8009c4e:	f7fe f914 	bl	8007e7a <_nx_ip_checksum_compute>
 8009c52:	4603      	mov	r3, r0
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the checksum again.  */
        if (checksum)
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d012      	beq.n	8009c8a <_nx_ipv4_packet_receive+0x182>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 8009c82:	6838      	ldr	r0, [r7, #0]
 8009c84:	f000 fdfa 	bl	800a87c <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 8009c88:	e190      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8009c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	ba1a      	rev	r2, r3
 8009c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c92:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8009c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	ba1a      	rev	r2, r3
 8009c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c9c:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8009c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	ba1a      	rev	r2, r3
 8009ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca6:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8009ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	ba1a      	rev	r2, r3
 8009cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb0:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8009cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	ba1a      	rev	r2, r3
 8009cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cba:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	2b05      	cmp	r3, #5
 8009cc0:	d949      	bls.n	8009d56 <_nx_ipv4_packet_receive+0x24e>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff fe55 	bl	8009974 <_nx_ipv4_option_process>
 8009cca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d108      	bne.n	8009ce4 <_nx_ipv4_packet_receive+0x1dc>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 8009cdc:	6838      	ldr	r0, [r7, #0]
 8009cde:	f000 fdcd 	bl	800a87c <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8009ce2:	e163      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 8009ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cf0:	4413      	add	r3, r2
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	1f1a      	subs	r2, r3, #4
 8009cf8:	627a      	str	r2, [r7, #36]	; 0x24
 8009cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cfc:	6912      	ldr	r2, [r2, #16]
 8009cfe:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	1f1a      	subs	r2, r3, #4
 8009d04:	627a      	str	r2, [r7, #36]	; 0x24
 8009d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d08:	68d2      	ldr	r2, [r2, #12]
 8009d0a:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	1f1a      	subs	r2, r3, #4
 8009d10:	627a      	str	r2, [r7, #36]	; 0x24
 8009d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d14:	6892      	ldr	r2, [r2, #8]
 8009d16:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	1f1a      	subs	r2, r3, #4
 8009d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8009d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d20:	6852      	ldr	r2, [r2, #4]
 8009d22:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8009d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 8009d2c:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	64bb      	str	r3, [r7, #72]	; 0x48

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3c:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	3b05      	subs	r3, #5
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	1ad2      	subs	r2, r2, r3
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8009d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d58:	691a      	ldr	r2, [r3, #16]
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d02f      	beq.n	8009dc2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8009d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d64:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d02b      	beq.n	8009dc2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8009d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d6c:	691a      	ldr	r2, [r3, #16]
 8009d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 8009d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d76:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d10a      	bne.n	8009d92 <_nx_ipv4_packet_receive+0x28a>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8009d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7e:	691a      	ldr	r2, [r3, #16]
 8009d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	43db      	mvns	r3, r3
 8009d86:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8009d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d017      	beq.n	8009dc2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8009d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d94:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8009d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d9a:	d012      	beq.n	8009dc2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9e:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8009da0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009da4:	d303      	bcc.n	8009dae <_nx_ipv4_packet_receive+0x2a6>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8009da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da8:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	da09      	bge.n	8009dc2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 8009dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fd fff4 	bl	8007da4 <_nx_igmp_multicast_check>
 8009dbc:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d076      	beq.n	8009eb0 <_nx_ipv4_packet_receive+0x3a8>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 8009dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d046      	beq.n	8009e5c <_nx_ipv4_packet_receive+0x354>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d033      	beq.n	8009e4a <_nx_ipv4_packet_receive+0x342>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009de2:	f3ef 8310 	mrs	r3, PRIMASK
 8009de6:	613b      	str	r3, [r7, #16]
    return(posture);
 8009de8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009dea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009dec:	b672      	cpsid	i
    return(int_posture);
 8009dee:	68fb      	ldr	r3, [r7, #12]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 8009df0:	617b      	str	r3, [r7, #20]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00c      	beq.n	8009e16 <_nx_ipv4_packet_receive+0x30e>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8009e14:	e00a      	b.n	8009e2c <_nx_ipv4_packet_receive+0x324>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	61da      	str	r2, [r3, #28]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f383 8810 	msr	PRIMASK, r3
}
 8009e36:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2102      	movs	r1, #2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f002 fe80 	bl	800cb48 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8009e48:	e0b0      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 8009e54:	6838      	ldr	r0, [r7, #0]
 8009e56:	f000 fd11 	bl	800a87c <_nx_packet_release>
            return;
 8009e5a:	e0a7      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 8009e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	0c1b      	lsrs	r3, r3, #16
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	623b      	str	r3, [r7, #32]

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f103 0214 	add.w	r2, r3, #20
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	f1a3 0214 	sub.w	r2, r3, #20
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	441a      	add	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8009e96:	6a3a      	ldr	r2, [r7, #32]
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7fe fa6c 	bl	8008378 <_nx_ip_dispatch_process>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 8082 	beq.w	8009fac <_nx_ipv4_packet_receive+0x4a4>
        {
            _nx_packet_release(packet_ptr);
 8009ea8:	6838      	ldr	r0, [r7, #0]
 8009eaa:	f000 fce7 	bl	800a87c <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8009eae:	e07d      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d15a      	bne.n	8009f6e <_nx_ipv4_packet_receive+0x466>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 8009eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ec0:	623b      	str	r3, [r7, #32]

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8009ec8:	d137      	bne.n	8009f3a <_nx_ipv4_packet_receive+0x432>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f103 0214 	add.w	r2, r3, #20
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	f1a3 0214 	sub.w	r2, r3, #20
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	441a      	add	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	ba1a      	rev	r2, r3
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	61bb      	str	r3, [r7, #24]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	ba1a      	rev	r2, r3
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b44      	cmp	r3, #68	; 0x44
 8009f20:	d10b      	bne.n	8009f3a <_nx_ipv4_packet_receive+0x432>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d006      	beq.n	8009f3a <_nx_ipv4_packet_receive+0x432>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3

                    return;
 8009f38:	e038      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	1e5a      	subs	r2, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	1ad2      	subs	r2, r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8009f66:	6838      	ldr	r0, [r7, #0]
 8009f68:	f000 fc88 	bl	800a87c <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009f6c:	e01e      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <_nx_ipv4_packet_receive+0x488>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
 8009f8e:	e00d      	b.n	8009fac <_nx_ipv4_packet_receive+0x4a4>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8009fa4:	6838      	ldr	r0, [r7, #0]
 8009fa6:	f000 fc69 	bl	800a87c <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009faa:	bf00      	nop
    }
}
 8009fac:	3750      	adds	r7, #80	; 0x50
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08c      	sub	sp, #48	; 0x30
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d901      	bls.n	8009fd0 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 8009fcc:	234d      	movs	r3, #77	; 0x4d
 8009fce:	e0ae      	b.n	800a12e <_nx_packet_allocate+0x17a>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8009fda:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009fdc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009fde:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009fe0:	b672      	cpsid	i
    return(int_posture);
 8009fe2:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 8009fe4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d03a      	beq.n	800a064 <_nx_packet_allocate+0xb0>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	1e5a      	subs	r2, r3, #1
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	69da      	ldr	r2, [r3, #28]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	2200      	movs	r2, #0
 800a00a:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	2200      	movs	r2, #0
 800a010:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	2200      	movs	r2, #0
 800a016:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	2200      	movs	r2, #0
 800a01c:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	691a      	ldr	r2, [r3, #16]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	441a      	add	r2, r3
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	2200      	movs	r2, #0
 800a036:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800a03e:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	2204      	movs	r2, #4
 800a044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	6a3a      	ldr	r2, [r7, #32]
 800a05c:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 800a05e:	2300      	movs	r3, #0
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a062:	e05d      	b.n	800a120 <_nx_packet_allocate+0x16c>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d053      	beq.n	800a11c <_nx_packet_allocate+0x168>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 800a07e:	4b2e      	ldr	r3, [pc, #184]	; (800a138 <_nx_packet_allocate+0x184>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	4a2d      	ldr	r2, [pc, #180]	; (800a13c <_nx_packet_allocate+0x188>)
 800a088:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d012      	beq.n	800a0ca <_nx_packet_allocate+0x116>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c6:	675a      	str	r2, [r3, #116]	; 0x74
 800a0c8:	e008      	b.n	800a0dc <_nx_packet_allocate+0x128>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ce:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0da:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	220c      	movs	r2, #12
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a0f2:	4b13      	ldr	r3, [pc, #76]	; (800a140 <_nx_packet_allocate+0x18c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	4a11      	ldr	r2, [pc, #68]	; (800a140 <_nx_packet_allocate+0x18c>)
 800a0fa:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	64da      	str	r2, [r3, #76]	; 0x4c
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f383 8810 	msr	PRIMASK, r3
}
 800a10c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a10e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a110:	f004 fabe 	bl	800e690 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a11a:	e008      	b.n	800a12e <_nx_packet_allocate+0x17a>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 800a11c:	2301      	movs	r3, #1
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f383 8810 	msr	PRIMASK, r3
}
 800a12a:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3730      	adds	r7, #48	; 0x30
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20017d10 	.word	0x20017d10
 800a13c:	0800a4dd 	.word	0x0800a4dd
 800a140:	20017dac 	.word	0x20017dac

0800a144 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08e      	sub	sp, #56	; 0x38
 800a148:	af02      	add	r7, sp, #8
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 800a164:	2312      	movs	r3, #18
 800a166:	e075      	b.n	800a254 <_nx_packet_copy+0x110>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800a168:	f107 0114 	add.w	r1, r7, #20
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2200      	movs	r2, #0
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff ff1f 	bl	8009fb4 <_nx_packet_allocate>
 800a176:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	e068      	b.n	800a254 <_nx_packet_copy+0x110>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a188:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	2b01      	cmp	r3, #1
 800a192:	d110      	bne.n	800a1b6 <_nx_packet_copy+0x72>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6919      	ldr	r1, [r3, #16]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a3a      	ldr	r2, [r7, #32]
 800a1ae:	f000 f855 	bl	800a25c <_nx_packet_data_append>
 800a1b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1b4:	e00f      	b.n	800a1d6 <_nx_packet_copy+0x92>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800a1c2:	6978      	ldr	r0, [r7, #20]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6899      	ldr	r1, [r3, #8]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a3a      	ldr	r2, [r7, #32]
 800a1d0:	f000 f844 	bl	800a25c <_nx_packet_data_append>
 800a1d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <_nx_packet_copy+0xa4>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fb4c 	bl	800a87c <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	e035      	b.n	800a254 <_nx_packet_copy+0x110>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1ca      	bne.n	800a18e <_nx_packet_copy+0x4a>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	6919      	ldr	r1, [r3, #16]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	440a      	add	r2, r1
 800a20e:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	69fa      	ldr	r2, [r7, #28]
 800a218:	1a8a      	subs	r2, r1, r2
 800a21a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	6919      	ldr	r1, [r3, #16]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	440a      	add	r2, r1
 800a232:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d005      	beq.n	800a24c <_nx_packet_copy+0x108>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fb1a 	bl	800a87c <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 800a248:	2312      	movs	r3, #18
 800a24a:	e003      	b.n	800a254 <_nx_packet_copy+0x110>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 800a252:	2300      	movs	r3, #0
    }
}
 800a254:	4618      	mov	r0, r3
 800a256:	3730      	adds	r7, #48	; 0x30
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08c      	sub	sp, #48	; 0x30
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 800a26a:	2300      	movs	r3, #0
 800a26c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d016      	beq.n	800a2a4 <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800a276:	2300      	movs	r3, #0
 800a278:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	695a      	ldr	r2, [r3, #20]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	4413      	add	r3, r2
 800a290:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1ee      	bne.n	800a280 <_nx_packet_data_append+0x24>
 800a2a2:	e005      	b.n	800a2b0 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	695a      	ldr	r2, [r3, #20]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 800a2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d247      	bcs.n	800a348 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 800a2bc:	e033      	b.n	800a326 <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800a2be:	f107 0114 	add.w	r1, r7, #20
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	6838      	ldr	r0, [r7, #0]
 800a2c8:	f7ff fe74 	bl	8009fb4 <_nx_packet_allocate>
 800a2cc:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 800a2da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2dc:	f000 face 	bl	800a87c <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	e078      	b.n	800a3d6 <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d012      	beq.n	800a310 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d007      	beq.n	800a302 <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800a2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fe:	619a      	str	r2, [r3, #24]
 800a300:	e008      	b.n	800a314 <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	605a      	str	r2, [r3, #4]
 800a30e:	e001      	b.n	800a314 <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	695a      	ldr	r2, [r3, #20]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	4413      	add	r3, r2
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 800a326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d3c7      	bcc.n	800a2be <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a338:	605a      	str	r2, [r3, #4]
 800a33a:	e002      	b.n	800a342 <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a340:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800a342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a344:	2200      	movs	r2, #0
 800a346:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	441a      	add	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d003      	beq.n	800a368 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	e032      	b.n	800a3ce <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 800a36c:	e02f      	b.n	800a3ce <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	695a      	ldr	r2, [r3, #20]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	461a      	mov	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d202      	bcs.n	800a386 <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	623b      	str	r3, [r7, #32]
 800a384:	e005      	b.n	800a392 <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	695a      	ldr	r2, [r3, #20]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified. */
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	6a3a      	ldr	r2, [r7, #32]
 800a398:	69f9      	ldr	r1, [r7, #28]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f005 fddd 	bl	800ff5a <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	68d9      	ldr	r1, [r3, #12]
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	6a3a      	ldr	r2, [r7, #32]
 800a3b0:	440a      	add	r2, r1
 800a3b2:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d009      	beq.n	800a3ce <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	4413      	add	r3, r2
 800a3c0:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	619a      	str	r2, [r3, #24]
    while (data_size)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1cc      	bne.n	800a36e <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3730      	adds	r7, #48	; 0x30
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <_nx_packet_data_extract_offset>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b08c      	sub	sp, #48	; 0x30
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	607a      	str	r2, [r7, #4]
 800a3ea:	603b      	str	r3, [r7, #0]
#endif /* NX_DISABLE_PACKET_CHAIN */
ULONG      bytes_to_copy;
NX_PACKET *working_packet_ptr;


    working_packet_ptr =  packet_ptr;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	61bb      	str	r3, [r7, #24]

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d309      	bcc.n	800a40e <_nx_packet_data_extract_offset+0x30>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d104      	bne.n	800a40a <_nx_packet_data_extract_offset+0x2c>
        {

            *bytes_copied = 0;
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800a406:	2300      	movs	r3, #0
 800a408:	e064      	b.n	800a4d4 <_nx_packet_data_extract_offset+0xf6>
        }

        /* Otherwise, this is an invalid offset or packet length. */
        return(NX_PACKET_OFFSET_ERROR);
 800a40a:	2353      	movs	r3, #83	; 0x53
 800a40c:	e062      	b.n	800a4d4 <_nx_packet_data_extract_offset+0xf6>
    }


    /* Initialize the source pointer to NULL.  */
    source_ptr =  NX_NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Traverse packet chain to offset.  */
    offset_bytes =  offset;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	623b      	str	r3, [r7, #32]
#ifndef NX_DISABLE_PACKET_CHAIN
    while (working_packet_ptr)
 800a416:	e016      	b.n	800a446 <_nx_packet_data_extract_offset+0x68>
    {

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	617b      	str	r3, [r7, #20]

        /* Determine if we are at the offset location fragment in the packet chain  */
        if (packet_fragment_length > offset_bytes)
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d905      	bls.n	800a438 <_nx_packet_data_extract_offset+0x5a>
        {

            /* Setup loop to copy from this packet.  */
            source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	4413      	add	r3, r2
 800a434:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Yes, get out of this  loop.  */
            break;
 800a436:	e009      	b.n	800a44c <_nx_packet_data_extract_offset+0x6e>
        }


        /* Decrement the remaining offset bytes*/
        offset_bytes = offset_bytes - packet_fragment_length;
 800a438:	6a3a      	ldr	r2, [r7, #32]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	623b      	str	r3, [r7, #32]

        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	61bb      	str	r3, [r7, #24]
    while (working_packet_ptr)
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e5      	bne.n	800a418 <_nx_packet_data_extract_offset+0x3a>
    source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;

#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Check for a valid source pointer.  */
    if (source_ptr == NX_NULL)
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <_nx_packet_data_extract_offset+0x78>
    {
        return(NX_PACKET_OFFSET_ERROR);
 800a452:	2353      	movs	r3, #83	; 0x53
 800a454:	e03e      	b.n	800a4d4 <_nx_packet_data_extract_offset+0xf6>
    }

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	61fb      	str	r3, [r7, #28]

    /* Pickup the amount of bytes to copy.  */
    if (bytes_to_copy < buffer_length)
 800a464:	69fa      	ldr	r2, [r7, #28]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d205      	bcs.n	800a478 <_nx_packet_data_extract_offset+0x9a>
    {
        *bytes_copied =  bytes_to_copy;     /* the amount of bytes returned to the caller */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	601a      	str	r2, [r3, #0]
        remaining_bytes =  bytes_to_copy;   /* for use in the copy loop */
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a476:	e026      	b.n	800a4c6 <_nx_packet_data_extract_offset+0xe8>
    }
    else
    {
        *bytes_copied =  buffer_length;
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	601a      	str	r2, [r3, #0]
        remaining_bytes =  buffer_length;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (working_packet_ptr && remaining_bytes)
 800a482:	e020      	b.n	800a4c6 <_nx_packet_data_extract_offset+0xe8>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate bytes to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	61fb      	str	r3, [r7, #28]
        if (remaining_bytes < bytes_to_copy)
 800a48e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	429a      	cmp	r2, r3
 800a494:	d201      	bcs.n	800a49a <_nx_packet_data_extract_offset+0xbc>
        {
            bytes_to_copy = remaining_bytes;
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	61fb      	str	r3, [r7, #28]
        }

        /* Copy data from this packet.  */
        memcpy(destination_ptr, source_ptr, bytes_to_copy); /* Use case of memcpy is verified. */
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a49e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4a0:	f005 fd5b 	bl	800ff5a <memcpy>

        /* Update the pointers. */
        destination_ptr += bytes_to_copy;
 800a4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
        remaining_bytes -= bytes_to_copy;
 800a4ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	61bb      	str	r3, [r7, #24]

        /* Check for a next packet.  */
        if (working_packet_ptr)
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <_nx_packet_data_extract_offset+0xe8>
        {

            /* Setup new source pointer.  */
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (working_packet_ptr && remaining_bytes)
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <_nx_packet_data_extract_offset+0xf4>
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1d8      	bne.n	800a484 <_nx_packet_data_extract_offset+0xa6>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3730      	adds	r7, #48	; 0x30
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a4f0:	617b      	str	r3, [r7, #20]
    return(posture);
 800a4f2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a4f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4f6:	b672      	cpsid	i
    return(int_posture);
 800a4f8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 800a4fa:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a500:	2b00      	cmp	r3, #0
 800a502:	d042      	beq.n	800a58a <_nx_packet_pool_cleanup+0xae>
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d03f      	beq.n	800a58a <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800a50e:	4a23      	ldr	r2, [pc, #140]	; (800a59c <_nx_packet_pool_cleanup+0xc0>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d13a      	bne.n	800a58a <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d103      	bne.n	800a52c <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	2200      	movs	r2, #0
 800a528:	62da      	str	r2, [r3, #44]	; 0x2c
 800a52a:	e012      	b.n	800a552 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d103      	bne.n	800a53e <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a546:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a550:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a556:	1e5a      	subs	r2, r3, #1
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a560:	2b0c      	cmp	r3, #12
 800a562:	d112      	bne.n	800a58a <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a56c:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <_nx_packet_pool_cleanup+0xc4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3301      	adds	r3, #1
 800a572:	4a0b      	ldr	r2, [pc, #44]	; (800a5a0 <_nx_packet_pool_cleanup+0xc4>)
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f383 8810 	msr	PRIMASK, r3
}
 800a580:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f003 ff70 	bl	800e468 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800a588:	e005      	b.n	800a596 <_nx_packet_pool_cleanup+0xba>
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f383 8810 	msr	PRIMASK, r3
}
 800a594:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800a596:	3720      	adds	r7, #32
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	5041434b 	.word	0x5041434b
 800a5a0:	20017dac 	.word	0x20017dac

0800a5a4 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b092      	sub	sp, #72	; 0x48
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	3303      	adds	r3, #3
 800a5ba:	f023 0303 	bic.w	r3, r3, #3
 800a5be:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c4:	1ad2      	subs	r2, r2, r3
 800a5c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f023 0303 	bic.w	r3, r3, #3
 800a5ce:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 800a5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d2:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d6:	3338      	adds	r3, #56	; 0x38
 800a5d8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	3303      	adds	r3, #3
 800a5de:	f023 0303 	bic.w	r3, r3, #3
 800a5e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800a5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800a5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	3303      	adds	r3, #3
 800a5f4:	f023 0203 	bic.w	r2, r3, #3
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800a5fe:	223c      	movs	r2, #60	; 0x3c
 800a600:	2100      	movs	r1, #0
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f005 fc2d 	bl	800fe62 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a624:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a62a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a630:	4413      	add	r3, r2
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 800a634:	2300      	movs	r3, #0
 800a636:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 800a638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63a:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a640:	4413      	add	r3, r2
 800a642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a644:	4413      	add	r3, r2
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 800a648:	e023      	b.n	800a692 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 800a64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a64c:	3301      	adds	r3, #1
 800a64e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 800a650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a654:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 800a656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800a65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65e:	2200      	movs	r2, #0
 800a660:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800a662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a668:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 800a66a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	441a      	add	r2, r3
 800a670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a672:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800a674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a678:	4413      	add	r3, r2
 800a67a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a67c:	441a      	add	r2, r3
 800a67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a680:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 800a682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a684:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68a:	4413      	add	r3, r2
 800a68c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a68e:	4413      	add	r3, r2
 800a690:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 800a692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	429a      	cmp	r2, r3
 800a698:	d9d7      	bls.n	800a64a <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	4413      	add	r3, r2
 800a6a0:	425b      	negs	r3, r3
 800a6a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6a4:	4413      	add	r3, r2
 800a6a6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 800a6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6b2:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6b8:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a6c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6c4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a6c6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a6c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6ca:	b672      	cpsid	i
    return(int_posture);
 800a6cc:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4a19      	ldr	r2, [pc, #100]	; (800a738 <_nx_packet_pool_create+0x194>)
 800a6d4:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 800a6d6:	4b19      	ldr	r3, [pc, #100]	; (800a73c <_nx_packet_pool_create+0x198>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d012      	beq.n	800a704 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800a6de:	4b17      	ldr	r3, [pc, #92]	; (800a73c <_nx_packet_pool_create+0x198>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e4:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <_nx_packet_pool_create+0x198>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6a3a      	ldr	r2, [r7, #32]
 800a6f8:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 800a6fa:	4b10      	ldr	r3, [pc, #64]	; (800a73c <_nx_packet_pool_create+0x198>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	635a      	str	r2, [r3, #52]	; 0x34
 800a702:	e008      	b.n	800a716 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 800a704:	4a0d      	ldr	r2, [pc, #52]	; (800a73c <_nx_packet_pool_create+0x198>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 800a716:	4b0a      	ldr	r3, [pc, #40]	; (800a740 <_nx_packet_pool_create+0x19c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3301      	adds	r3, #1
 800a71c:	4a08      	ldr	r2, [pc, #32]	; (800a740 <_nx_packet_pool_create+0x19c>)
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f383 8810 	msr	PRIMASK, r3
}
 800a72a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3748      	adds	r7, #72	; 0x48
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	5041434b 	.word	0x5041434b
 800a73c:	20017cbc 	.word	0x20017cbc
 800a740:	20017cc0 	.word	0x20017cc0

0800a744 <_nx_packet_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	; 0x38
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a74c:	f3ef 8310 	mrs	r3, PRIMASK
 800a750:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a754:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a756:	b672      	cpsid	i
    return(int_posture);
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28

TX_THREAD *thread_ptr;      /* Working thread pointer  */


    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 800a75c:	4b3b      	ldr	r3, [pc, #236]	; (800a84c <_nx_packet_pool_delete+0x108>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3b01      	subs	r3, #1
 800a762:	4a3a      	ldr	r2, [pc, #232]	; (800a84c <_nx_packet_pool_delete+0x108>)
 800a764:	6013      	str	r3, [r2, #0]

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	429a      	cmp	r2, r3
 800a774:	d103      	bne.n	800a77e <_nx_packet_pool_delete+0x3a>
    {

        /* Only created packet pool, just set the created list to NULL.  */
        _nx_packet_pool_created_ptr =  NX_NULL;
 800a776:	4b36      	ldr	r3, [pc, #216]	; (800a850 <_nx_packet_pool_delete+0x10c>)
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	e012      	b.n	800a7a4 <_nx_packet_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            pool_ptr -> nx_packet_pool_created_previous;
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	6b92      	ldr	r2, [r2, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800a786:	639a      	str	r2, [r3, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            pool_ptr -> nx_packet_pool_created_next;
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	6b52      	ldr	r2, [r2, #52]	; 0x34
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800a790:	635a      	str	r2, [r3, #52]	; 0x34

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 800a792:	4b2f      	ldr	r3, [pc, #188]	; (800a850 <_nx_packet_pool_delete+0x10c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d103      	bne.n	800a7a4 <_nx_packet_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	4a2b      	ldr	r2, [pc, #172]	; (800a850 <_nx_packet_pool_delete+0x10c>)
 800a7a2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a7a4:	4b2b      	ldr	r3, [pc, #172]	; (800a854 <_nx_packet_pool_delete+0x110>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	4a2a      	ldr	r2, [pc, #168]	; (800a854 <_nx_packet_pool_delete+0x110>)
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b4:	f383 8810 	msr	PRIMASK, r3
}
 800a7b8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	637b      	str	r3, [r7, #52]	; 0x34
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800a7c0:	e026      	b.n	800a810 <_nx_packet_pool_delete+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a7c6:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a7c8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a7ca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7cc:	b672      	cpsid	i
    return(int_posture);
 800a7ce:	69bb      	ldr	r3, [r7, #24]
    {
        /* Lockout interrupts.  */
        TX_DISABLE
 800a7d0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <_nx_packet_pool_delete+0x110>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	4a1d      	ldr	r2, [pc, #116]	; (800a854 <_nx_packet_pool_delete+0x110>)
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	f383 8810 	msr	PRIMASK, r3
}
 800a7ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f0:	2230      	movs	r2, #48	; 0x30
 800a7f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fa:	637b      	str	r3, [r7, #52]	; 0x34

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800a7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a800:	4618      	mov	r0, r3
 800a802:	f003 fe31 	bl	800e468 <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80a:	1e5a      	subs	r2, r3, #1
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	631a      	str	r2, [r3, #48]	; 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1d4      	bne.n	800a7c2 <_nx_packet_pool_delete+0x7e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a818:	f3ef 8310 	mrs	r3, PRIMASK
 800a81c:	613b      	str	r3, [r7, #16]
    return(posture);
 800a81e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a820:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a822:	b672      	cpsid	i
    return(int_posture);
 800a824:	68fb      	ldr	r3, [r7, #12]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a826:	633b      	str	r3, [r7, #48]	; 0x30

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <_nx_packet_pool_delete+0x110>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	4a09      	ldr	r2, [pc, #36]	; (800a854 <_nx_packet_pool_delete+0x110>)
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f383 8810 	msr	PRIMASK, r3
}
 800a83c:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a83e:	f003 fdd9 	bl	800e3f4 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3738      	adds	r7, #56	; 0x38
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20017cc0 	.word	0x20017cc0
 800a850:	20017cbc 	.word	0x20017cbc
 800a854:	20017dac 	.word	0x20017dac

0800a858 <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <_nx_packet_pool_initialize+0x1c>)
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 800a862:	4b05      	ldr	r3, [pc, #20]	; (800a878 <_nx_packet_pool_initialize+0x20>)
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
}
 800a868:	bf00      	nop
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20017cbc 	.word	0x20017cbc
 800a878:	20017cc0 	.word	0x20017cc0

0800a87c <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 800a884:	e0a2      	b.n	800a9cc <_nx_packet_release+0x150>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800a88e:	d011      	beq.n	800a8b4 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d009      	beq.n	800a8b0 <_nx_packet_release+0x34>
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a4f      	ldr	r2, [pc, #316]	; (800a9e0 <_nx_packet_release+0x164>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d104      	bne.n	800a8b0 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800a8b0:	2307      	movs	r3, #7
 800a8b2:	e090      	b.n	800a9d6 <_nx_packet_release+0x15a>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8ba:	f3ef 8310 	mrs	r3, PRIMASK
 800a8be:	617b      	str	r3, [r7, #20]
    return(posture);
 800a8c0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a8c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8c4:	b672      	cpsid	i
    return(int_posture);
 800a8c6:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 800a8c8:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d4:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d05f      	beq.n	800a99c <_nx_packet_release+0x120>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d103      	bne.n	800a8ee <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8ec:	e00d      	b.n	800a90a <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a8fe:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a908:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90e:	1e5a      	subs	r2, r3, #1
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2200      	movs	r2, #0
 800a918:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a91a:	4b32      	ldr	r3, [pc, #200]	; (800a9e4 <_nx_packet_release+0x168>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3301      	adds	r3, #1
 800a920:	4a30      	ldr	r2, [pc, #192]	; (800a9e4 <_nx_packet_release+0x168>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f383 8810 	msr	PRIMASK, r3
}
 800a92e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691a      	ldr	r2, [r3, #16]
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a950:	441a      	add	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689a      	ldr	r2, [r3, #8]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800a96a:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800a994:	69b8      	ldr	r0, [r7, #24]
 800a996:	f003 fd67 	bl	800e468 <_tx_thread_system_resume>
 800a99a:	e015      	b.n	800a9c8 <_nx_packet_release+0x14c>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9a2:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	69da      	ldr	r2, [r3, #28]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	609a      	str	r2, [r3, #8]
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f383 8810 	msr	PRIMASK, r3
}
 800a9c6:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f47f af59 	bne.w	800a886 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3728      	adds	r7, #40	; 0x28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	5041434b 	.word	0x5041434b
 800a9e4:	20017dac 	.word	0x20017dac

0800a9e8 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a9f4:	617b      	str	r3, [r7, #20]
    return(posture);
 800a9f6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a9f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9fa:	b672      	cpsid	i
    return(int_posture);
 800a9fc:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800a9fe:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800aa08:	d025      	beq.n	800aa56 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa12:	d020      	beq.n	800aa56 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 800aa1a:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800aa26:	441a      	add	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800aa36:	1a9a      	subs	r2, r3, r2
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f383 8810 	msr	PRIMASK, r3
}
 800aa4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 800aa50:	2300      	movs	r3, #0
 800aa52:	61fb      	str	r3, [r7, #28]
 800aa54:	e009      	b.n	800aa6a <_nx_packet_transmit_release+0x82>
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f383 8810 	msr	PRIMASK, r3
}
 800aa60:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff ff0a 	bl	800a87c <_nx_packet_release>
 800aa68:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800aa6a:	69fb      	ldr	r3, [r7, #28]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa7e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa82:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aa84:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aa86:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa88:	b672      	cpsid	i
    return(int_posture);
 800aa8a:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800aa8c:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d110      	bne.n	800aaba <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f383 8810 	msr	PRIMASK, r3
}
 800aab0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800aab2:	6838      	ldr	r0, [r7, #0]
 800aab4:	f7ff fee2 	bl	800a87c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800aab8:	e02f      	b.n	800ab1a <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d011      	beq.n	800aae8 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2200      	movs	r2, #0
 800aad2:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f383 8810 	msr	PRIMASK, r3
}
 800aae6:	e018      	b.n	800ab1a <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2200      	movs	r2, #0
 800aafc:	61da      	str	r2, [r3, #28]
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f383 8810 	msr	PRIMASK, r3
}
 800ab08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ab10:	2200      	movs	r2, #0
 800ab12:	2120      	movs	r1, #32
 800ab14:	4618      	mov	r0, r3
 800ab16:	f002 f817 	bl	800cb48 <_tx_event_flags_set>
    }
}
 800ab1a:	3720      	adds	r7, #32
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 800ab24:	4b38      	ldr	r3, [pc, #224]	; (800ac08 <_nx_system_initialize+0xe8>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	4b38      	ldr	r3, [pc, #224]	; (800ac0c <_nx_system_initialize+0xec>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	4b38      	ldr	r3, [pc, #224]	; (800ac10 <_nx_system_initialize+0xf0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 800ab34:	4b37      	ldr	r3, [pc, #220]	; (800ac14 <_nx_system_initialize+0xf4>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	4b37      	ldr	r3, [pc, #220]	; (800ac18 <_nx_system_initialize+0xf8>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d15e      	bne.n	800ac02 <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 800ab44:	f7ff fe88 	bl	800a858 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 800ab48:	f7fe f87a 	bl	8008c40 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 800ab4c:	f000 f866 	bl	800ac1c <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 800ab50:	4b2d      	ldr	r3, [pc, #180]	; (800ac08 <_nx_system_initialize+0xe8>)
 800ab52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab56:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 800ab58:	4b2b      	ldr	r3, [pc, #172]	; (800ac08 <_nx_system_initialize+0xe8>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a2a      	ldr	r2, [pc, #168]	; (800ac08 <_nx_system_initialize+0xe8>)
 800ab5e:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 800ab60:	4b2a      	ldr	r3, [pc, #168]	; (800ac0c <_nx_system_initialize+0xec>)
 800ab62:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 800ab66:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 800ab68:	4b28      	ldr	r3, [pc, #160]	; (800ac0c <_nx_system_initialize+0xec>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a27      	ldr	r2, [pc, #156]	; (800ac0c <_nx_system_initialize+0xec>)
 800ab6e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 800ab70:	4b26      	ldr	r3, [pc, #152]	; (800ac0c <_nx_system_initialize+0xec>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f043 030a 	orr.w	r3, r3, #10
 800ab78:	4a24      	ldr	r2, [pc, #144]	; (800ac0c <_nx_system_initialize+0xec>)
 800ab7a:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 800ab7c:	4b24      	ldr	r3, [pc, #144]	; (800ac10 <_nx_system_initialize+0xf0>)
 800ab7e:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 800ab82:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 800ab84:	4b22      	ldr	r3, [pc, #136]	; (800ac10 <_nx_system_initialize+0xf0>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800ab8c:	4a20      	ldr	r2, [pc, #128]	; (800ac10 <_nx_system_initialize+0xf0>)
 800ab8e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 800ab90:	4b1f      	ldr	r3, [pc, #124]	; (800ac10 <_nx_system_initialize+0xf0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab98:	4a1d      	ldr	r2, [pc, #116]	; (800ac10 <_nx_system_initialize+0xf0>)
 800ab9a:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 800ab9c:	4b1c      	ldr	r3, [pc, #112]	; (800ac10 <_nx_system_initialize+0xf0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f043 034b 	orr.w	r3, r3, #75	; 0x4b
 800aba4:	4a1a      	ldr	r2, [pc, #104]	; (800ac10 <_nx_system_initialize+0xf0>)
 800aba6:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 800aba8:	4b1a      	ldr	r3, [pc, #104]	; (800ac14 <_nx_system_initialize+0xf4>)
 800abaa:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
 800abae:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 800abb0:	4b18      	ldr	r3, [pc, #96]	; (800ac14 <_nx_system_initialize+0xf4>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 800abb8:	4a16      	ldr	r2, [pc, #88]	; (800ac14 <_nx_system_initialize+0xf4>)
 800abba:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 800abbc:	4b15      	ldr	r3, [pc, #84]	; (800ac14 <_nx_system_initialize+0xf4>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc4:	4a13      	ldr	r2, [pc, #76]	; (800ac14 <_nx_system_initialize+0xf4>)
 800abc6:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 800abc8:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <_nx_system_initialize+0xf4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f043 030a 	orr.w	r3, r3, #10
 800abd0:	4a10      	ldr	r2, [pc, #64]	; (800ac14 <_nx_system_initialize+0xf4>)
 800abd2:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 800abd4:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <_nx_system_initialize+0xf8>)
 800abd6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800abda:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 800abdc:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <_nx_system_initialize+0xf8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800abe4:	4a0c      	ldr	r2, [pc, #48]	; (800ac18 <_nx_system_initialize+0xf8>)
 800abe6:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 800abe8:	4b0b      	ldr	r3, [pc, #44]	; (800ac18 <_nx_system_initialize+0xf8>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800abf0:	4a09      	ldr	r2, [pc, #36]	; (800ac18 <_nx_system_initialize+0xf8>)
 800abf2:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 800abf4:	4b08      	ldr	r3, [pc, #32]	; (800ac18 <_nx_system_initialize+0xf8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f043 0314 	orr.w	r3, r3, #20
 800abfc:	4a06      	ldr	r2, [pc, #24]	; (800ac18 <_nx_system_initialize+0xf8>)
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	e000      	b.n	800ac04 <_nx_system_initialize+0xe4>
        return;
 800ac02:	bf00      	nop
#endif
}
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20017cc4 	.word	0x20017cc4
 800ac0c:	20017cc8 	.word	0x20017cc8
 800ac10:	20017ccc 	.word	0x20017ccc
 800ac14:	20017cd0 	.word	0x20017cd0
 800ac18:	20017cd4 	.word	0x20017cd4

0800ac1c <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
}
 800ac20:	bf00      	nop
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac40:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ac42:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ac44:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac46:	b672      	cpsid	i
    return(int_posture);
 800ac48:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800ac4a:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d043      	beq.n	800acdc <_nx_udp_bind_cleanup+0xb0>
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d040      	beq.n	800acdc <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800ac5e:	4a24      	ldr	r2, [pc, #144]	; (800acf0 <_nx_udp_bind_cleanup+0xc4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d13b      	bne.n	800acdc <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	2200      	movs	r2, #0
 800ac68:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac74:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d103      	bne.n	800ac88 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	2200      	movs	r2, #0
 800ac84:	661a      	str	r2, [r3, #96]	; 0x60
 800ac86:	e00d      	b.n	800aca4 <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800ac98:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800aca2:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca8:	1e5a      	subs	r2, r3, #1
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb2:	2b0c      	cmp	r3, #12
 800acb4:	d112      	bne.n	800acdc <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2223      	movs	r2, #35	; 0x23
 800acba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800acbe:	4b0d      	ldr	r3, [pc, #52]	; (800acf4 <_nx_udp_bind_cleanup+0xc8>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	4a0b      	ldr	r2, [pc, #44]	; (800acf4 <_nx_udp_bind_cleanup+0xc8>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f383 8810 	msr	PRIMASK, r3
}
 800acd2:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f003 fbc7 	bl	800e468 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800acda:	e005      	b.n	800ace8 <_nx_udp_bind_cleanup+0xbc>
 800acdc:	6a3b      	ldr	r3, [r7, #32]
 800acde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f383 8810 	msr	PRIMASK, r3
}
 800ace6:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ace8:	3728      	adds	r7, #40	; 0x28
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	55445020 	.word	0x55445020
 800acf4:	20017dac 	.word	0x20017dac

0800acf8 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a05      	ldr	r2, [pc, #20]	; (800ad18 <_nx_udp_enable+0x20>)
 800ad04:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	0800ae11 	.word	0x0800ae11

0800ad1c <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08a      	sub	sp, #40	; 0x28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	0a1a      	lsrs	r2, r3, #8
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	4413      	add	r3, r2
 800ad34:	f003 031f 	and.w	r3, r3, #31
 800ad38:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ad40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ad44:	4618      	mov	r0, r3
 800ad46:	f002 fb43 	bl	800d3d0 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	33de      	adds	r3, #222	; 0xde
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d010      	beq.n	800ad84 <_nx_udp_free_port_find+0x68>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d102      	bne.n	800ad76 <_nx_udp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 800ad70:	2301      	movs	r3, #1
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 800ad74:	e006      	b.n	800ad84 <_nx_udp_free_port_find+0x68>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad7a:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 800ad7c:	6a3a      	ldr	r2, [r7, #32]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d1f0      	bne.n	800ad66 <_nx_udp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f002 fda6 	bl	800d8dc <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d104      	bne.n	800ada0 <_nx_udp_free_port_find+0x84>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	e00e      	b.n	800adbe <_nx_udp_free_port_find+0xa2>
        }

        /* Move to the next port.  */
        port++;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	3301      	adds	r3, #1
 800ada4:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adac:	d302      	bcc.n	800adb4 <_nx_udp_free_port_find+0x98>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800adae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800adb2:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d1b7      	bne.n	800ad2c <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 800adbc:	2345      	movs	r3, #69	; 0x45
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3728      	adds	r7, #40	; 0x28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <_nx_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b08a      	sub	sp, #40	; 0x28
 800adca:	af02      	add	r7, sp, #8
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	607a      	str	r2, [r7, #4]
 800add2:	603b      	str	r3, [r7, #0]
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 800add4:	f107 0114 	add.w	r1, r7, #20
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 ffc9 	bl	800bd78 <_nxd_udp_packet_info_extract>
 800ade6:	61f8      	str	r0, [r7, #28]

    if (status == NX_SUCCESS)
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10b      	bne.n	800ae06 <_nx_udp_packet_info_extract+0x40>
    {
        if (ip_address)
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d008      	beq.n	800ae06 <_nx_udp_packet_info_extract+0x40>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2b04      	cmp	r3, #4
 800adf8:	d103      	bne.n	800ae02 <_nx_udp_packet_info_extract+0x3c>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 800adfa:	69ba      	ldr	r2, [r7, #24]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e001      	b.n	800ae06 <_nx_udp_packet_info_extract+0x40>
            }
            else
            {
                return(NX_INVALID_PACKET);
 800ae02:	2312      	movs	r3, #18
 800ae04:	e000      	b.n	800ae08 <_nx_udp_packet_info_extract+0x42>
            }
        }
    }

    return(status);
 800ae06:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3720      	adds	r7, #32
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b094      	sub	sp, #80	; 0x50
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	2b07      	cmp	r3, #7
 800ae2e:	d80a      	bhi.n	800ae46 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800ae3e:	6838      	ldr	r0, [r7, #0]
 800ae40:	f7ff fd1c 	bl	800a87c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800ae44:	e1d8      	b.n	800b1f8 <_nx_udp_packet_receive+0x3e8>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ae4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	ba1a      	rev	r2, r3
 800ae52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae54:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ae56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	ba1a      	rev	r2, r3
 800ae5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae5e:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	0c1b      	lsrs	r3, r3, #16
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d20a      	bcs.n	800ae84 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800ae7c:	6838      	ldr	r0, [r7, #0]
 800ae7e:	f7ff fcfd 	bl	800a87c <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800ae82:	e1b9      	b.n	800b1f8 <_nx_udp_packet_receive+0x3e8>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800ae84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800ae8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae8e:	0a1a      	lsrs	r2, r3, #8
 800ae90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae92:	4413      	add	r3, r2
 800ae94:	f003 031f 	and.w	r3, r3, #31
 800ae98:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800ae9a:	4b8f      	ldr	r3, [pc, #572]	; (800b0d8 <_nx_udp_packet_receive+0x2c8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d010      	beq.n	800aec4 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aea2:	f3ef 8305 	mrs	r3, IPSR
 800aea6:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800aea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeaa:	4b8c      	ldr	r3, [pc, #560]	; (800b0dc <_nx_udp_packet_receive+0x2cc>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d107      	bne.n	800aec4 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aeba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aebe:	4618      	mov	r0, r3
 800aec0:	f002 fa86 	bl	800d3d0 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec8:	33de      	adds	r3, #222	; 0xde
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 800aed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d13e      	bne.n	800af56 <_nx_udp_packet_receive+0x146>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d114      	bne.n	800af0c <_nx_udp_packet_receive+0xfc>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00f      	beq.n	800af0c <_nx_udp_packet_receive+0xfc>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800aeec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	ba1a      	rev	r2, r3
 800aef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aef4:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800aef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	ba1a      	rev	r2, r3
 800aefc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aefe:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800af00:	2300      	movs	r3, #0
 800af02:	4a77      	ldr	r2, [pc, #476]	; (800b0e0 <_nx_udp_packet_receive+0x2d0>)
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7fc fe2f 	bl	8007b6a <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800af28:	4b6b      	ldr	r3, [pc, #428]	; (800b0d8 <_nx_udp_packet_receive+0x2c8>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00e      	beq.n	800af4e <_nx_udp_packet_receive+0x13e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af30:	f3ef 8305 	mrs	r3, IPSR
 800af34:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800af36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af38:	4b68      	ldr	r3, [pc, #416]	; (800b0dc <_nx_udp_packet_receive+0x2cc>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d105      	bne.n	800af4e <_nx_udp_packet_receive+0x13e>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800af48:	4618      	mov	r0, r3
 800af4a:	f002 fcc7 	bl	800d8dc <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800af4e:	6838      	ldr	r0, [r7, #0]
 800af50:	f7ff fc94 	bl	800a87c <_nx_packet_release>

        /* Just return.  */
        return;
 800af54:	e150      	b.n	800b1f8 <_nx_udp_packet_receive+0x3e8>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 800af56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d119      	bne.n	800af94 <_nx_udp_packet_receive+0x184>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800af60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af68:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	4413      	add	r3, r2
 800af76:	f1a3 0208 	sub.w	r2, r3, #8
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800af80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af82:	69da      	ldr	r2, [r3, #28]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	4413      	add	r3, r2
 800af8a:	f1a3 0208 	sub.w	r2, r3, #8
 800af8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af90:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 800af92:	e00b      	b.n	800afac <_nx_udp_packet_receive+0x19c>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 800af94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af98:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af9e:	33de      	adds	r3, #222	; 0xde
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d1d4      	bne.n	800af56 <_nx_udp_packet_receive+0x146>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800afac:	4b4a      	ldr	r3, [pc, #296]	; (800b0d8 <_nx_udp_packet_receive+0x2c8>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00e      	beq.n	800afd2 <_nx_udp_packet_receive+0x1c2>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800afb4:	f3ef 8305 	mrs	r3, IPSR
 800afb8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800afba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afbc:	4b47      	ldr	r3, [pc, #284]	; (800b0dc <_nx_udp_packet_receive+0x2cc>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d105      	bne.n	800afd2 <_nx_udp_packet_receive+0x1c2>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800afcc:	4618      	mov	r0, r3
 800afce:	f002 fc85 	bl	800d8dc <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 800afd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afd8:	429a      	cmp	r2, r3
 800afda:	d02b      	beq.n	800b034 <_nx_udp_packet_receive+0x224>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800affe:	2b04      	cmp	r3, #4
 800b000:	d114      	bne.n	800b02c <_nx_udp_packet_receive+0x21c>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00f      	beq.n	800b02c <_nx_udp_packet_receive+0x21c>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800b00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	ba1a      	rev	r2, r3
 800b012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b014:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800b016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	ba1a      	rev	r2, r3
 800b01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b01e:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800b020:	2300      	movs	r3, #0
 800b022:	4a2f      	ldr	r2, [pc, #188]	; (800b0e0 <_nx_udp_packet_receive+0x2d0>)
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7fc fd9f 	bl	8007b6a <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800b02c:	6838      	ldr	r0, [r7, #0]
 800b02e:	f7ff fc25 	bl	800a87c <_nx_packet_release>
        return;
 800b032:	e0e1      	b.n	800b1f8 <_nx_udp_packet_receive+0x3e8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b034:	f3ef 8310 	mrs	r3, PRIMASK
 800b038:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b03c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b03e:	b672      	cpsid	i
    return(int_posture);
 800b040:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800b042:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 800b044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a26      	ldr	r2, [pc, #152]	; (800b0e4 <_nx_udp_packet_receive+0x2d4>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d01c      	beq.n	800b088 <_nx_udp_packet_receive+0x278>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 800b06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b072:	625a      	str	r2, [r3, #36]	; 0x24
 800b074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b076:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	f383 8810 	msr	PRIMASK, r3
}
 800b07e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800b080:	6838      	ldr	r0, [r7, #0]
 800b082:	f7ff fbfb 	bl	800a87c <_nx_packet_release>

        /* Return to caller.  */
        return;
 800b086:	e0b7      	b.n	800b1f8 <_nx_udp_packet_receive+0x3e8>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 800b088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b08a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b092:	33de      	adds	r3, #222	; 0xde
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d00b      	beq.n	800b0b8 <_nx_udp_packet_receive+0x2a8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <_nx_udp_packet_receive+0x2a8>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ae:	33de      	adds	r3, #222	; 0xde
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0b6:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800b0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0bc:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 800b0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d03e      	beq.n	800b142 <_nx_udp_packet_receive+0x332>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d10c      	bne.n	800b0e8 <_nx_udp_packet_receive+0x2d8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800b0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	659a      	str	r2, [r3, #88]	; 0x58
 800b0d4:	e016      	b.n	800b104 <_nx_udp_packet_receive+0x2f4>
 800b0d6:	bf00      	nop
 800b0d8:	20017d10 	.word	0x20017d10
 800b0dc:	2000008c 	.word	0x2000008c
 800b0e0:	03030000 	.word	0x03030000
 800b0e4:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800b0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ee:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800b0f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b0f8:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800b0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b100:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b102:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800b104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b110:	2200      	movs	r2, #0
 800b112:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800b114:	4b3a      	ldr	r3, [pc, #232]	; (800b200 <_nx_udp_packet_receive+0x3f0>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	4a39      	ldr	r2, [pc, #228]	; (800b200 <_nx_udp_packet_receive+0x3f0>)
 800b11c:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800b11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b128:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	f383 8810 	msr	PRIMASK, r3
}
 800b130:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	2200      	movs	r2, #0
 800b136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b13a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b13c:	f003 f994 	bl	800e468 <_tx_thread_system_resume>
 800b140:	e054      	b.n	800b1ec <_nx_udp_packet_receive+0x3dc>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800b142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b146:	2b00      	cmp	r3, #0
 800b148:	d03c      	beq.n	800b1c4 <_nx_udp_packet_receive+0x3b4>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 800b14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800b152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	2200      	movs	r2, #0
 800b15c:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800b15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b166:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 800b168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 800b16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 800b170:	429a      	cmp	r2, r3
 800b172:	d921      	bls.n	800b1b8 <_nx_udp_packet_receive+0x3a8>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800b174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b178:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	69da      	ldr	r2, [r3, #28]
 800b17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b180:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 800b182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b186:	1e5a      	subs	r2, r3, #1
 800b188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18a:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 800b19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19e:	1c5a      	adds	r2, r3, #1
 800b1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a2:	625a      	str	r2, [r3, #36]	; 0x24
 800b1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f383 8810 	msr	PRIMASK, r3
}
 800b1ae:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800b1b0:	6838      	ldr	r0, [r7, #0]
 800b1b2:	f7ff fb63 	bl	800a87c <_nx_packet_release>
 800b1b6:	e019      	b.n	800b1ec <_nx_udp_packet_receive+0x3dc>
 800b1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f383 8810 	msr	PRIMASK, r3
}
 800b1c2:	e013      	b.n	800b1ec <_nx_udp_packet_receive+0x3dc>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 800b1c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800b1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800b1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1da:	1c5a      	adds	r2, r3, #1
 800b1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1de:	63da      	str	r2, [r3, #60]	; 0x3c
 800b1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f383 8810 	msr	PRIMASK, r3
}
 800b1ea:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d002      	beq.n	800b1f8 <_nx_udp_packet_receive+0x3e8>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b1f6:	4798      	blx	r3
    }
}
 800b1f8:	3750      	adds	r7, #80	; 0x50
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	20017dac 	.word	0x20017dac

0800b204 <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b212:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b214:	f3ef 8310 	mrs	r3, PRIMASK
 800b218:	617b      	str	r3, [r7, #20]
    return(posture);
 800b21a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b21c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b21e:	b672      	cpsid	i
    return(int_posture);
 800b220:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800b222:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d03d      	beq.n	800b2a8 <_nx_udp_receive_cleanup+0xa4>
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d03a      	beq.n	800b2a8 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800b236:	4a21      	ldr	r2, [pc, #132]	; (800b2bc <_nx_udp_receive_cleanup+0xb8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d135      	bne.n	800b2a8 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d103      	bne.n	800b254 <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2200      	movs	r2, #0
 800b250:	659a      	str	r2, [r3, #88]	; 0x58
 800b252:	e00d      	b.n	800b270 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b264:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b26e:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b274:	1e5a      	subs	r2, r3, #1
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27e:	2b0c      	cmp	r3, #12
 800b280:	d112      	bne.n	800b2a8 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b28a:	4b0d      	ldr	r3, [pc, #52]	; (800b2c0 <_nx_udp_receive_cleanup+0xbc>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	4a0b      	ldr	r2, [pc, #44]	; (800b2c0 <_nx_udp_receive_cleanup+0xbc>)
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f383 8810 	msr	PRIMASK, r3
}
 800b29e:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f003 f8e1 	bl	800e468 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800b2a6:	e005      	b.n	800b2b4 <_nx_udp_receive_cleanup+0xb0>
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f383 8810 	msr	PRIMASK, r3
}
 800b2b2:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800b2b4:	3720      	adds	r7, #32
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	55445020 	.word	0x55445020
 800b2c0:	20017dac 	.word	0x20017dac

0800b2c4 <_nx_udp_socket_bind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b092      	sub	sp, #72	; 0x48
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2dc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b2e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f002 f873 	bl	800d3d0 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d103      	bne.n	800b2fa <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b300:	4618      	mov	r0, r3
 800b302:	f002 faeb 	bl	800d8dc <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800b306:	2322      	movs	r3, #34	; 0x22
 800b308:	e0ff      	b.n	800b50a <_nx_udp_socket_bind+0x246>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d11e      	bne.n	800b34e <_nx_udp_socket_bind+0x8a>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 800b310:	f004 fc64 	bl	800fbdc <rand>
 800b314:	4603      	mov	r3, r0
 800b316:	425a      	negs	r2, r3
 800b318:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b31c:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800b320:	bf58      	it	pl
 800b322:	4253      	negpl	r3, r2
 800b324:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800b328:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	f107 0208 	add.w	r2, r7, #8
 800b330:	4619      	mov	r1, r3
 800b332:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b334:	f7ff fcf2 	bl	800ad1c <_nx_udp_free_port_find>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d007      	beq.n	800b34e <_nx_udp_socket_bind+0x8a>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b340:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b344:	4618      	mov	r0, r3
 800b346:	f002 fac9 	bl	800d8dc <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 800b34a:	2345      	movs	r3, #69	; 0x45
 800b34c:	e0dd      	b.n	800b50a <_nx_udp_socket_bind+0x246>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	0a1a      	lsrs	r2, r3, #8
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	4413      	add	r3, r2
 800b35c:	f003 031f 	and.w	r3, r3, #31
 800b360:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800b362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b366:	33de      	adds	r3, #222	; 0xde
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800b370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00f      	beq.n	800b396 <_nx_udp_socket_bind+0xd2>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800b376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b378:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 800b37a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b37c:	689a      	ldr	r2, [r3, #8]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	429a      	cmp	r2, r3
 800b382:	d007      	beq.n	800b394 <_nx_udp_socket_bind+0xd0>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800b384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b388:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 800b38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	429a      	cmp	r2, r3
 800b390:	d1f3      	bne.n	800b37a <_nx_udp_socket_bind+0xb6>
 800b392:	e000      	b.n	800b396 <_nx_udp_socket_bind+0xd2>
                break;
 800b394:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 800b396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <_nx_udp_socket_bind+0xe2>
 800b39c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39e:	689a      	ldr	r2, [r3, #8]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d047      	beq.n	800b436 <_nx_udp_socket_bind+0x172>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3aa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3b0:	b672      	cpsid	i
    return(int_posture);
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800b3b4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800b3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d022      	beq.n	800b402 <_nx_udp_socket_bind+0x13e>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800b3bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	33de      	adds	r3, #222	; 0xde
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800b3cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d0:	33de      	adds	r3, #222	; 0xde
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 800b3de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	33de      	adds	r3, #222	; 0xde
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800b3f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	33de      	adds	r3, #222	; 0xde
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4413      	add	r3, r2
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	651a      	str	r2, [r3, #80]	; 0x50
 800b400:	e00c      	b.n	800b41c <_nx_udp_socket_bind+0x158>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 800b40e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	33de      	adds	r3, #222	; 0xde
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	605a      	str	r2, [r3, #4]
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	f383 8810 	msr	PRIMASK, r3
}
 800b426:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b42e:	4618      	mov	r0, r3
 800b430:	f002 fa54 	bl	800d8dc <_tx_mutex_put>
 800b434:	e068      	b.n	800b508 <_nx_udp_socket_bind+0x244>
    }
    else if (wait_option)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d05d      	beq.n	800b4f8 <_nx_udp_socket_bind+0x234>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b43c:	f3ef 8310 	mrs	r3, PRIMASK
 800b440:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b442:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b444:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b446:	b672      	cpsid	i
    return(int_posture);
 800b448:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800b44a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800b44c:	4b31      	ldr	r3, [pc, #196]	; (800b514 <_nx_udp_socket_bind+0x250>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	4a30      	ldr	r2, [pc, #192]	; (800b518 <_nx_udp_socket_bind+0x254>)
 800b456:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800b458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b462:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b468:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800b46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d012      	beq.n	800b498 <_nx_udp_socket_bind+0x1d4>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 800b472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b474:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b478:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800b47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b47e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b482:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 800b484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b48c:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800b48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b494:	675a      	str	r2, [r3, #116]	; 0x74
 800b496:	e008      	b.n	800b4aa <_nx_udp_socket_bind+0x1e6>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800b498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b49a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b49c:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 800b49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a2:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a8:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 800b4aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b2:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	220c      	movs	r2, #12
 800b4b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4bc:	2201      	movs	r2, #1
 800b4be:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800b4c0:	4b16      	ldr	r3, [pc, #88]	; (800b51c <_nx_udp_socket_bind+0x258>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	4a15      	ldr	r2, [pc, #84]	; (800b51c <_nx_udp_socket_bind+0x258>)
 800b4c8:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	64da      	str	r2, [r3, #76]	; 0x4c
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f383 8810 	msr	PRIMASK, r3
}
 800b4da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f002 f9fa 	bl	800d8dc <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800b4e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4ea:	f003 f8d1 	bl	800e690 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b4f6:	e007      	b.n	800b508 <_nx_udp_socket_bind+0x244>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b4fe:	4618      	mov	r0, r3
 800b500:	f002 f9ec 	bl	800d8dc <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 800b504:	2323      	movs	r3, #35	; 0x23
 800b506:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 800b508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3748      	adds	r7, #72	; 0x48
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20017d10 	.word	0x20017d10
 800b518:	0800ac2d 	.word	0x0800ac2d
 800b51c:	20017dac 	.word	0x20017dac

0800b520 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08a      	sub	sp, #40	; 0x28
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800b52e:	2278      	movs	r2, #120	; 0x78
 800b530:	2100      	movs	r1, #0
 800b532:	68b8      	ldr	r0, [r7, #8]
 800b534:	f004 fc95 	bl	800fe62 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b558:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	2200      	movs	r2, #0
 800b55e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2200      	movs	r2, #0
 800b564:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2200      	movs	r2, #0
 800b56a:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2200      	movs	r2, #0
 800b570:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2200      	movs	r2, #0
 800b576:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2200      	movs	r2, #0
 800b57c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	2200      	movs	r2, #0
 800b582:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b588:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2200      	movs	r2, #0
 800b58e:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2200      	movs	r2, #0
 800b594:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	2200      	movs	r2, #0
 800b59a:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b5a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 ff12 	bl	800d3d0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b5b2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b5b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5b6:	b672      	cpsid	i
    return(int_posture);
 800b5b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	4a1f      	ldr	r2, [pc, #124]	; (800b63c <_nx_udp_socket_create+0x11c>)
 800b5c0:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d015      	beq.n	800b5f8 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800b5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d4:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	6a3a      	ldr	r2, [r7, #32]
 800b5ea:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	669a      	str	r2, [r3, #104]	; 0x68
 800b5f6:	e009      	b.n	800b60c <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f383 8810 	msr	PRIMASK, r3
}
 800b624:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b62c:	4618      	mov	r0, r3
 800b62e:	f002 f955 	bl	800d8dc <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3728      	adds	r7, #40	; 0x28
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	55445020 	.word	0x55445020

0800b640 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b658:	4618      	mov	r0, r3
 800b65a:	f001 feb9 	bl	800d3d0 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b66c:	4618      	mov	r0, r3
 800b66e:	f002 f935 	bl	800d8dc <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 800b672:	2342      	movs	r3, #66	; 0x42
 800b674:	e03f      	b.n	800b6f6 <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b676:	f3ef 8310 	mrs	r3, PRIMASK
 800b67a:	617b      	str	r3, [r7, #20]
    return(posture);
 800b67c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b67e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b680:	b672      	cpsid	i
    return(int_posture);
 800b682:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800b684:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d104      	bne.n	800b6a0 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	2200      	movs	r2, #0
 800b69a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 800b69e:	e014      	b.n	800b6ca <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800b6a8:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800b6b2:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d104      	bne.n	800b6ca <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b6d0:	1e5a      	subs	r2, r3, #1
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f383 8810 	msr	PRIMASK, r3
}
 800b6e2:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f002 f8f6 	bl	800d8dc <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800b6f0:	f002 fe80 	bl	800e3f4 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b098      	sub	sp, #96	; 0x60
 800b704:	af02      	add	r7, sp, #8
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2200      	movs	r2, #0
 800b710:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b712:	f3ef 8310 	mrs	r3, PRIMASK
 800b716:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b71a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b71c:	b672      	cpsid	i
    return(int_posture);
 800b71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 800b720:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d107      	bne.n	800b73a <_nx_udp_socket_receive+0x3a>
 800b72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	f383 8810 	msr	PRIMASK, r3
}
 800b734:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 800b736:	2324      	movs	r3, #36	; 0x24
 800b738:	e12a      	b.n	800b990 <_nx_udp_socket_receive+0x290>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d01a      	beq.n	800b778 <_nx_udp_socket_receive+0x78>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	69da      	ldr	r2, [r3, #28]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d102      	bne.n	800b762 <_nx_udp_socket_receive+0x62>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2200      	movs	r2, #0
 800b760:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b766:	1e5a      	subs	r2, r3, #1
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	f383 8810 	msr	PRIMASK, r3
}
 800b776:	e05e      	b.n	800b836 <_nx_udp_socket_receive+0x136>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d050      	beq.n	800b820 <_nx_udp_socket_receive+0x120>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 800b77e:	4b86      	ldr	r3, [pc, #536]	; (800b998 <_nx_udp_socket_receive+0x298>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 800b784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b786:	4a85      	ldr	r2, [pc, #532]	; (800b99c <_nx_udp_socket_receive+0x29c>)
 800b788:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800b78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800b790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d012      	beq.n	800b7c4 <_nx_udp_socket_receive+0xc4>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 800b7a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7a4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 800b7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ae:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7b8:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7c0:	675a      	str	r2, [r3, #116]	; 0x74
 800b7c2:	e008      	b.n	800b7d6 <_nx_udp_socket_receive+0xd6>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7c8:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 800b7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7ce:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 800b7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7d4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800b7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e2:	220c      	movs	r2, #12
 800b7e4:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b7e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b7ec:	4b6c      	ldr	r3, [pc, #432]	; (800b9a0 <_nx_udp_socket_receive+0x2a0>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	4a6b      	ldr	r2, [pc, #428]	; (800b9a0 <_nx_udp_socket_receive+0x2a0>)
 800b7f4:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b7f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	64da      	str	r2, [r3, #76]	; 0x4c
 800b7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	f383 8810 	msr	PRIMASK, r3
}
 800b806:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b808:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b80a:	f002 ff41 	bl	800e690 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 800b80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00e      	beq.n	800b836 <_nx_udp_socket_receive+0x136>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 800b818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b81e:	e0b7      	b.n	800b990 <_nx_udp_socket_receive+0x290>
 800b820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b822:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	f383 8810 	msr	PRIMASK, r3
}
 800b82a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 800b832:	2301      	movs	r3, #1
 800b834:	e0ac      	b.n	800b990 <_nx_udp_socket_receive+0x290>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	2b00      	cmp	r3, #0
 800b844:	d105      	bne.n	800b852 <_nx_udp_socket_receive+0x152>
 800b846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b848:	3304      	adds	r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <_nx_udp_socket_receive+0x160>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800b85a:	2b06      	cmp	r3, #6
 800b85c:	f040 8089 	bne.w	800b972 <_nx_udp_socket_receive+0x272>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800b860:	2300      	movs	r3, #0
 800b862:	657b      	str	r3, [r7, #84]	; 0x54
 800b864:	2300      	movs	r3, #0
 800b866:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 800b86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800b874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b876:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b87a:	2b04      	cmp	r3, #4
 800b87c:	d108      	bne.n	800b890 <_nx_udp_socket_receive+0x190>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 800b87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b882:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	330c      	adds	r3, #12
 800b888:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	3310      	adds	r3, #16
 800b88e:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800b890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	ba1a      	rev	r2, r3
 800b896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b898:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800b89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	ba1a      	rev	r2, r3
 800b8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a2:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 800b8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 800b8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8ae:	2111      	movs	r1, #17
 800b8b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b8b2:	f7fc fae2 	bl	8007e7a <_nx_ip_checksum_compute>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800b8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	ba1a      	rev	r2, r3
 800b8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8c2:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800b8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	ba1a      	rev	r2, r3
 800b8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8cc:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 800b8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d0:	43db      	mvns	r3, r3
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d049      	beq.n	800b970 <_nx_udp_socket_receive+0x270>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e0:	617b      	str	r3, [r7, #20]
    return(posture);
 800b8e2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b8e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8e6:	b672      	cpsid	i
    return(int_posture);
 800b8e8:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 800b8ea:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b8f4:	3201      	adds	r2, #1
 800b8f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b902:	3201      	adds	r2, #1
 800b904:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b91a:	3a01      	subs	r2, #1
 800b91c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	3208      	adds	r2, #8
 800b936:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	1e5a      	subs	r2, r3, #1
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	69da      	ldr	r2, [r3, #28]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	f103 0208 	add.w	r2, r3, #8
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	61da      	str	r2, [r3, #28]
 800b958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	f383 8810 	msr	PRIMASK, r3
}
 800b962:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fe ff87 	bl	800a87c <_nx_packet_release>
        TX_DISABLE
 800b96e:	e6d0      	b.n	800b712 <_nx_udp_socket_receive+0x12>
                    break;
 800b970:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3a08      	subs	r2, #8
 800b97e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689a      	ldr	r2, [r3, #8]
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3208      	adds	r2, #8
 800b98c:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3758      	adds	r7, #88	; 0x58
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20017d10 	.word	0x20017d10
 800b99c:	0800b205 	.word	0x0800b205
 800b9a0:	20017dac 	.word	0x20017dac

0800b9a4 <_nx_udp_socket_receive_notify>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive_notify(NX_UDP_SOCKET *socket_ptr,
                                    VOID (*udp_receive_notify)(NX_UDP_SOCKET *socket_ptr))
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b9b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9b8:	b672      	cpsid	i
    return(int_posture);
 800b9ba:	68bb      	ldr	r3, [r7, #8]
TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800b9bc:	617b      	str	r3, [r7, #20]

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	683a      	ldr	r2, [r7, #0]
 800b9c2:	671a      	str	r2, [r3, #112]	; 0x70
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	f383 8810 	msr	PRIMASK, r3
}
 800b9ce:	bf00      	nop

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	371c      	adds	r7, #28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b088      	sub	sp, #32
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	60f8      	str	r0, [r7, #12]
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	607a      	str	r2, [r7, #4]
 800b9ea:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800b9ec:	2304      	movs	r3, #4
 800b9ee:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800b9f4:	f107 0214 	add.w	r2, r7, #20
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 fa10 	bl	800be22 <_nxd_udp_socket_send>
 800ba02:	61f8      	str	r0, [r7, #28]

    return(status);
 800ba04:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3720      	adds	r7, #32
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <_nx_udp_socket_source_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b086      	sub	sp, #24
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	607a      	str	r2, [r7, #4]
 800ba1a:	603b      	str	r3, [r7, #0]
UINT   status;
NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	617b      	str	r3, [r7, #20]

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	224c      	movs	r2, #76	; 0x4c
 800ba26:	fb02 f303 	mul.w	r3, r2, r3
 800ba2a:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	4413      	add	r3, r2
 800ba32:	1d1a      	adds	r2, r3, #4
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	68b9      	ldr	r1, [r7, #8]
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff ffcd 	bl	800b9de <_nx_udp_socket_send>
 800ba44:	6138      	str	r0, [r7, #16]

    return(status);
 800ba46:	693b      	ldr	r3, [r7, #16]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <_nx_udp_socket_unbind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b094      	sub	sp, #80	; 0x50
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ba5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba60:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ba64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f001 fcb1 	bl	800d3d0 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d119      	bne.n	800baaa <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00d      	beq.n	800ba9a <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba82:	2100      	movs	r1, #0
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff f8d1 	bl	800ac2c <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ba8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba8c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ba90:	4618      	mov	r0, r3
 800ba92:	f001 ff23 	bl	800d8dc <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 800ba96:	2300      	movs	r3, #0
 800ba98:	e13e      	b.n	800bd18 <_nx_udp_socket_unbind+0x2c8>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ba9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba9c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 ff1b 	bl	800d8dc <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 800baa6:	2324      	movs	r3, #36	; 0x24
 800baa8:	e136      	b.n	800bd18 <_nx_udp_socket_unbind+0x2c8>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800bab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab2:	0a1a      	lsrs	r2, r3, #8
 800bab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab6:	4413      	add	r3, r2
 800bab8:	f003 031f 	and.w	r3, r3, #31
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800babe:	f3ef 8310 	mrs	r3, PRIMASK
 800bac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bac6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bac8:	b672      	cpsid	i
    return(int_posture);
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef NX_ENABLE_TCPIP_OFFLOAD
    _nx_udp_socket_driver_unbind(socket_ptr);
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 800bacc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d10a      	bne.n	800baee <_nx_udp_socket_unbind+0x9e>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 800bad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800badc:	33de      	adds	r3, #222	; 0xde
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	2200      	movs	r2, #0
 800bae4:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	64da      	str	r2, [r3, #76]	; 0x4c
 800baec:	e01d      	b.n	800bb2a <_nx_udp_socket_unbind+0xda>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800baf6:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800bb00:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800bb02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb06:	33de      	adds	r3, #222	; 0xde
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d107      	bne.n	800bb24 <_nx_udp_socket_unbind+0xd4>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	33de      	adds	r3, #222	; 0xde
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	440b      	add	r3, r1
 800bb22:	605a      	str	r2, [r3, #4]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	64da      	str	r2, [r3, #76]	; 0x4c
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	f383 8810 	msr	PRIMASK, r3
}
 800bb34:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d01b      	beq.n	800bb76 <_nx_udp_socket_unbind+0x126>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb42:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 800bb50:	e00c      	b.n	800bb6c <_nx_udp_socket_unbind+0x11c>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 800bb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800bb58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bb5a:	f7fe fe8f 	bl	800a87c <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 800bb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb60:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb66:	1e5a      	subs	r2, r3, #1
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1ee      	bne.n	800bb52 <_nx_udp_socket_unbind+0x102>
 800bb74:	e035      	b.n	800bbe2 <_nx_udp_socket_unbind+0x192>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d031      	beq.n	800bbe2 <_nx_udp_socket_unbind+0x192>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb82:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800bb8a:	e026      	b.n	800bbda <_nx_udp_socket_unbind+0x18a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb90:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bb92:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bb94:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb96:	b672      	cpsid	i
    return(int_posture);
 800bb98:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 800bb9a:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb9e:	2200      	movs	r2, #0
 800bba0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800bba2:	4b5f      	ldr	r3, [pc, #380]	; (800bd20 <_nx_udp_socket_unbind+0x2d0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3301      	adds	r3, #1
 800bba8:	4a5d      	ldr	r2, [pc, #372]	; (800bd20 <_nx_udp_socket_unbind+0x2d0>)
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	f383 8810 	msr	PRIMASK, r3
}
 800bbb6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 800bbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbba:	2226      	movs	r2, #38	; 0x26
 800bbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc4:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800bbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f002 fc4c 	bl	800e468 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd4:	1e5a      	subs	r2, r3, #1
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1d4      	bne.n	800bb8c <_nx_udp_socket_unbind+0x13c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbe2:	f3ef 8310 	mrs	r3, PRIMASK
 800bbe6:	617b      	str	r3, [r7, #20]
    return(posture);
 800bbe8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bbea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbec:	b672      	cpsid	i
    return(int_posture);
 800bbee:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 800bbf0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 800bbf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d07f      	beq.n	800bcfe <_nx_udp_socket_unbind+0x2ae>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800bbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d103      	bne.n	800bc10 <_nx_udp_socket_unbind+0x1c0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	661a      	str	r2, [r3, #96]	; 0x60
 800bc0e:	e00d      	b.n	800bc2c <_nx_udp_socket_unbind+0x1dc>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bc18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800bc1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800bc20:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800bc26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc28:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bc2a:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc30:	1e5a      	subs	r2, r3, #1
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc3a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	2200      	movs	r2, #0
 800bc40:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800bc50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc54:	33de      	adds	r3, #222	; 0xde
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	4413      	add	r3, r2
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d022      	beq.n	800bca6 <_nx_udp_socket_unbind+0x256>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 800bc60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc64:	33de      	adds	r3, #222	; 0xde
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	685a      	ldr	r2, [r3, #4]
            new_socket_ptr -> nx_udp_socket_bound_next =
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800bc70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc74:	33de      	adds	r3, #222	; 0xde
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800bc82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc86:	33de      	adds	r3, #222	; 0xde
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc92:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 800bc94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc98:	33de      	adds	r3, #222	; 0xde
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4413      	add	r3, r2
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca2:	651a      	str	r2, [r3, #80]	; 0x50
 800bca4:	e00c      	b.n	800bcc0 <_nx_udp_socket_unbind+0x270>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcaa:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcb0:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 800bcb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb6:	33de      	adds	r3, #222	; 0xde
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcbe:	605a      	str	r2, [r3, #4]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800bcc6:	4b16      	ldr	r3, [pc, #88]	; (800bd20 <_nx_udp_socket_unbind+0x2d0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3301      	adds	r3, #1
 800bccc:	4a14      	ldr	r2, [pc, #80]	; (800bd20 <_nx_udp_socket_unbind+0x2d0>)
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f383 8810 	msr	PRIMASK, r3
}
 800bcda:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800bcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bcea:	4618      	mov	r0, r3
 800bcec:	f001 fdf6 	bl	800d8dc <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bcf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bcf2:	f002 fbb9 	bl	800e468 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800bcf6:	f002 fb7d 	bl	800e3f4 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e00c      	b.n	800bd18 <_nx_udp_socket_unbind+0x2c8>
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd00:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f383 8810 	msr	PRIMASK, r3
}
 800bd08:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd0c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bd10:	4618      	mov	r0, r3
 800bd12:	f001 fde3 	bl	800d8dc <_tx_mutex_put>
        return(NX_SUCCESS);
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3750      	adds	r7, #80	; 0x50
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20017dac 	.word	0x20017dac

0800bd24 <_nx_utility_string_length_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_utility_string_length_check(CHAR *input_string, UINT *string_length, UINT max_string_length)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <_nx_utility_string_length_check+0x16>
    {
        return(NX_PTR_ERROR);
 800bd36:	2307      	movs	r3, #7
 800bd38:	e018      	b.n	800bd6c <_nx_utility_string_length_check+0x48>
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]
 800bd3e:	e008      	b.n	800bd52 <_nx_utility_string_length_check+0x2e>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d301      	bcc.n	800bd4c <_nx_utility_string_length_check+0x28>
        {
            return(NX_SIZE_ERROR);
 800bd48:	2309      	movs	r3, #9
 800bd4a:	e00f      	b.n	800bd6c <_nx_utility_string_length_check+0x48>
    for (i = 0; input_string[i]; i++)
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	4413      	add	r3, r2
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1f0      	bne.n	800bd40 <_nx_utility_string_length_check+0x1c>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <_nx_utility_string_length_check+0x46>
    {
        *string_length = i;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	601a      	str	r2, [r3, #0]
    }

    /* Return success.  */
    return(NX_SUCCESS);
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	371c      	adds	r7, #28
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <_nxd_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b089      	sub	sp, #36	; 0x24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d011      	beq.n	800bdb0 <_nxd_udp_packet_info_extract+0x38>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bd92:	2b04      	cmp	r3, #4
 800bd94:	d10a      	bne.n	800bdac <_nxd_udp_packet_info_extract+0x34>
        {

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd9a:	61fb      	str	r3, [r7, #28]

            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2204      	movs	r2, #4
 800bda0:	601a      	str	r2, [r3, #0]

            /* At this point, the IP address in the IPv4 header is in host byte order. */
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	68da      	ldr	r2, [r3, #12]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	605a      	str	r2, [r3, #4]
 800bdaa:	e001      	b.n	800bdb0 <_nxd_udp_packet_info_extract+0x38>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 800bdac:	2312      	movs	r3, #18
 800bdae:	e032      	b.n	800be16 <_nxd_udp_packet_info_extract+0x9e>
        }
    }

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	61bb      	str	r3, [r7, #24]

    /* Pickup the source port.  */
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	3b08      	subs	r3, #8
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	0c1b      	lsrs	r3, r3, #16
 800bdbe:	617b      	str	r3, [r7, #20]
    if (port != NX_NULL)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <_nxd_udp_packet_info_extract+0x54>
    {
        *port = source_port;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	601a      	str	r2, [r3, #0]
    }

    if (protocol != NX_NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <_nxd_udp_packet_info_extract+0x60>
    {
        *protocol = 0x11;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2211      	movs	r2, #17
 800bdd6:	601a      	str	r2, [r3, #0]
    }

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, address, source_port, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    if (interface_index == NX_NULL)
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <_nxd_udp_packet_info_extract+0x6a>
    {
        return(NX_SUCCESS);
 800bdde:	2300      	movs	r3, #0
 800bde0:	e019      	b.n	800be16 <_nxd_udp_packet_info_extract+0x9e>
    }

    /* Search for interface index number.  Initialize interface value as
       invalid (0xFFFFFFFF).  Once we find valid interface, we will update
       the returned value. */
    *interface_index = 0xFFFFFFFF;
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bde8:	601a      	str	r2, [r3, #0]

    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d106      	bne.n	800be02 <_nxd_udp_packet_info_extract+0x8a>
    {
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	613b      	str	r3, [r7, #16]
    else
    {
        return(NX_SUCCESS);
    }

    if (nx_interface == NX_NULL)
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d104      	bne.n	800be0a <_nxd_udp_packet_info_extract+0x92>
 800be00:	e001      	b.n	800be06 <_nxd_udp_packet_info_extract+0x8e>
        return(NX_SUCCESS);
 800be02:	2300      	movs	r3, #0
 800be04:	e007      	b.n	800be16 <_nxd_udp_packet_info_extract+0x9e>
    {

        /* No interface attached.  Done here, and return success. */
        return(NX_SUCCESS);
 800be06:	2300      	movs	r3, #0
 800be08:	e005      	b.n	800be16 <_nxd_udp_packet_info_extract+0x9e>
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	79db      	ldrb	r3, [r3, #7]
 800be0e:	461a      	mov	r2, r3
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3724      	adds	r7, #36	; 0x24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800be22:	b590      	push	{r4, r7, lr}
 800be24:	b095      	sub	sp, #84	; 0x54
 800be26:	af04      	add	r7, sp, #16
 800be28:	60f8      	str	r0, [r7, #12]
 800be2a:	60b9      	str	r1, [r7, #8]
 800be2c:	607a      	str	r2, [r7, #4]
 800be2e:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be34:	2300      	movs	r3, #0
 800be36:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	613b      	str	r3, [r7, #16]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be40:	f3ef 8310 	mrs	r3, PRIMASK
 800be44:	623b      	str	r3, [r7, #32]
    return(posture);
 800be46:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800be48:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be4a:	b672      	cpsid	i
    return(int_posture);
 800be4c:	69fb      	ldr	r3, [r7, #28]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800be4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be54:	2b00      	cmp	r3, #0
 800be56:	d107      	bne.n	800be68 <_nxd_udp_socket_send+0x46>
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	f383 8810 	msr	PRIMASK, r3
}
 800be62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800be64:	2324      	movs	r3, #36	; 0x24
 800be66:	e0c1      	b.n	800bfec <_nxd_udp_socket_send+0x1ca>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f383 8810 	msr	PRIMASK, r3
}
 800be78:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d118      	bne.n	800beb4 <_nxd_udp_socket_send+0x92>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6859      	ldr	r1, [r3, #4]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be8c:	f107 0310 	add.w	r3, r7, #16
 800be90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be92:	f7fd f9dd 	bl	8009250 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <_nxd_udp_socket_send+0x80>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800be9e:	2321      	movs	r3, #33	; 0x21
 800bea0:	e0a4      	b.n	800bfec <_nxd_udp_socket_send+0x1ca>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3304      	adds	r3, #4
 800beac:	63bb      	str	r3, [r7, #56]	; 0x38
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	3314      	adds	r3, #20
 800beb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	f1a3 0208 	sub.w	r2, r3, #8
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	441a      	add	r2, r3
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	695a      	ldr	r2, [r3, #20]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	441a      	add	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf08:	f103 0208 	add.w	r2, r3, #8
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	041a      	lsls	r2, r3, #16
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	041a      	lsls	r2, r3, #16
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2c:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	ba1a      	rev	r2, r3
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800bf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	ba1a      	rev	r2, r3
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf40:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d003      	beq.n	800bf52 <_nxd_udp_socket_send+0x130>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800bf4e:	2b06      	cmp	r3, #6
 800bf50:	d124      	bne.n	800bf9c <_nxd_udp_socket_send+0x17a>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5c:	2111      	movs	r1, #17
 800bf5e:	68b8      	ldr	r0, [r7, #8]
 800bf60:	f7fb ff8b 	bl	8007e7a <_nx_ip_checksum_compute>
 800bf64:	4603      	mov	r3, r0
 800bf66:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6a:	43db      	mvns	r3, r3
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800bf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d102      	bne.n	800bf7c <_nxd_udp_socket_send+0x15a>
            {
                checksum = 0xFFFF;
 800bf76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf7a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	ba1a      	rev	r2, r3
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8c:	431a      	orrs	r2, r3
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf90:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	ba1a      	rev	r2, r3
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	605a      	str	r2, [r3, #4]
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bfa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f001 fa12 	bl	800d3d0 <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d114      	bne.n	800bfde <_nxd_udp_socket_send+0x1bc>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6858      	ldr	r0, [r3, #4]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bfc4:	6939      	ldr	r1, [r7, #16]
 800bfc6:	9103      	str	r1, [sp, #12]
 800bfc8:	9202      	str	r2, [sp, #8]
 800bfca:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	4623      	mov	r3, r4
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfda:	f7fd f8c2 	bl	8009162 <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f001 fc79 	bl	800d8dc <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3744      	adds	r7, #68	; 0x44
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd90      	pop	{r4, r7, pc}

0800bff4 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d007      	beq.n	800c016 <_nxe_arp_enable+0x22>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a1c      	ldr	r2, [pc, #112]	; (800c07c <_nxe_arp_enable+0x88>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d102      	bne.n	800c016 <_nxe_arp_enable+0x22>
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800c016:	2307      	movs	r3, #7
 800c018:	e02c      	b.n	800c074 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800c024:	2315      	movs	r3, #21
 800c026:	e025      	b.n	800c074 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b33      	cmp	r3, #51	; 0x33
 800c02c:	d801      	bhi.n	800c032 <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800c02e:	2309      	movs	r3, #9
 800c030:	e020      	b.n	800c074 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c032:	f3ef 8305 	mrs	r3, IPSR
 800c036:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c038:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800c03a:	4b11      	ldr	r3, [pc, #68]	; (800c080 <_nxe_arp_enable+0x8c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4313      	orrs	r3, r2
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c044:	f3ef 8305 	mrs	r3, IPSR
 800c048:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <_nxe_arp_enable+0x8c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4313      	orrs	r3, r2
 800c052:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c056:	d304      	bcc.n	800c062 <_nxe_arp_enable+0x6e>
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <_nxe_arp_enable+0x90>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a0a      	ldr	r2, [pc, #40]	; (800c088 <_nxe_arp_enable+0x94>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d101      	bne.n	800c066 <_nxe_arp_enable+0x72>
 800c062:	2311      	movs	r3, #17
 800c064:	e006      	b.n	800c074 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f7fa ff78 	bl	8006f60 <_nx_arp_enable>
 800c070:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800c072:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800c074:	4618      	mov	r0, r3
 800c076:	3720      	adds	r7, #32
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	49502020 	.word	0x49502020
 800c080:	2000008c 	.word	0x2000008c
 800c084:	20017d10 	.word	0x20017d10
 800c088:	20017e5c 	.word	0x20017e5c

0800c08c <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b088      	sub	sp, #32
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00a      	beq.n	800c0b4 <_nxe_ip_address_get+0x28>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a18      	ldr	r2, [pc, #96]	; (800c104 <_nxe_ip_address_get+0x78>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d105      	bne.n	800c0b4 <_nxe_ip_address_get+0x28>
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <_nxe_ip_address_get+0x28>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 800c0b4:	2307      	movs	r3, #7
 800c0b6:	e020      	b.n	800c0fa <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0b8:	f3ef 8305 	mrs	r3, IPSR
 800c0bc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c0be:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800c0c0:	4b11      	ldr	r3, [pc, #68]	; (800c108 <_nxe_ip_address_get+0x7c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d009      	beq.n	800c0de <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0ca:	f3ef 8305 	mrs	r3, IPSR
 800c0ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <_nxe_ip_address_get+0x7c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c0dc:	d304      	bcc.n	800c0e8 <_nxe_ip_address_get+0x5c>
 800c0de:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <_nxe_ip_address_get+0x80>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a0b      	ldr	r2, [pc, #44]	; (800c110 <_nxe_ip_address_get+0x84>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d101      	bne.n	800c0ec <_nxe_ip_address_get+0x60>
 800c0e8:	2311      	movs	r3, #17
 800c0ea:	e006      	b.n	800c0fa <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	68b9      	ldr	r1, [r7, #8]
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f7fb fe91 	bl	8007e18 <_nx_ip_address_get>
 800c0f6:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800c0f8:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3720      	adds	r7, #32
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	49502020 	.word	0x49502020
 800c108:	2000008c 	.word	0x2000008c
 800c10c:	20017d10 	.word	0x20017d10
 800c110:	20017e5c 	.word	0x20017e5c

0800c114 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b092      	sub	sp, #72	; 0x48
 800c118:	af06      	add	r7, sp, #24
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d012      	beq.n	800c152 <_nxe_ip_create+0x3e>
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00f      	beq.n	800c152 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800c136:	4a59      	ldr	r2, [pc, #356]	; (800c29c <_nxe_ip_create+0x188>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d10a      	bne.n	800c152 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800c13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d007      	beq.n	800c152 <_nxe_ip_create+0x3e>
 800c142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	d004      	beq.n	800c152 <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800c148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c14a:	f240 72bc 	movw	r2, #1980	; 0x7bc
 800c14e:	4293      	cmp	r3, r2
 800c150:	d001      	beq.n	800c156 <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 800c152:	2307      	movs	r3, #7
 800c154:	e09d      	b.n	800c292 <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800c156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c158:	2bc7      	cmp	r3, #199	; 0xc7
 800c15a:	d801      	bhi.n	800c160 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 800c15c:	2309      	movs	r3, #9
 800c15e:	e098      	b.n	800c292 <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800c160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c162:	2b1f      	cmp	r3, #31
 800c164:	d901      	bls.n	800c16a <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 800c166:	230a      	movs	r3, #10
 800c168:	e093      	b.n	800c292 <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800c16a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c16c:	3b01      	subs	r3, #1
 800c16e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c170:	4413      	add	r3, r2
 800c172:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800c174:	f001 ff1c 	bl	800dfb0 <_tx_thread_identify>
 800c178:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d006      	beq.n	800c18e <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800c180:	f107 0310 	add.w	r3, r7, #16
 800c184:	461a      	mov	r2, r3
 800c186:	2100      	movs	r1, #0
 800c188:	6a38      	ldr	r0, [r7, #32]
 800c18a:	f001 ff6f 	bl	800e06c <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800c18e:	4b44      	ldr	r3, [pc, #272]	; (800c2a0 <_nxe_ip_create+0x18c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 800c194:	4b43      	ldr	r3, [pc, #268]	; (800c2a4 <_nxe_ip_create+0x190>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 800c19a:	e02b      	b.n	800c1f4 <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d017      	beq.n	800c1d4 <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 800c1aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d305      	bcc.n	800c1bc <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800c1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800c1b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d30b      	bcc.n	800c1d4 <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800c1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d311      	bcc.n	800c1ec <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800c1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d20b      	bcs.n	800c1ec <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d006      	beq.n	800c1e8 <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f107 0210 	add.w	r2, r7, #16
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6a38      	ldr	r0, [r7, #32]
 800c1e4:	f001 ff42 	bl	800e06c <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800c1e8:	2307      	movs	r3, #7
 800c1ea:	e052      	b.n	800c292 <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800c1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ee:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800c1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	1e5a      	subs	r2, r3, #1
 800c1f8:	62ba      	str	r2, [r7, #40]	; 0x28
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1ce      	bne.n	800c19c <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d006      	beq.n	800c212 <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	f107 0210 	add.w	r2, r7, #16
 800c20a:	4619      	mov	r1, r3
 800c20c:	6a38      	ldr	r0, [r7, #32]
 800c20e:	f001 ff2d 	bl	800e06c <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d010      	beq.n	800c23a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800c218:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da0d      	bge.n	800c23a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800c224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c228:	d007      	beq.n	800c23a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800c230:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c234:	d001      	beq.n	800c23a <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 800c236:	2321      	movs	r3, #33	; 0x21
 800c238:	e02b      	b.n	800c292 <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c23a:	f3ef 8305 	mrs	r3, IPSR
 800c23e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c240:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800c242:	4b19      	ldr	r3, [pc, #100]	; (800c2a8 <_nxe_ip_create+0x194>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4313      	orrs	r3, r2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d009      	beq.n	800c260 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c24c:	f3ef 8305 	mrs	r3, IPSR
 800c250:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	4b14      	ldr	r3, [pc, #80]	; (800c2a8 <_nxe_ip_create+0x194>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4313      	orrs	r3, r2
 800c25a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c25e:	d304      	bcc.n	800c26a <_nxe_ip_create+0x156>
 800c260:	4b12      	ldr	r3, [pc, #72]	; (800c2ac <_nxe_ip_create+0x198>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a12      	ldr	r2, [pc, #72]	; (800c2b0 <_nxe_ip_create+0x19c>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d101      	bne.n	800c26e <_nxe_ip_create+0x15a>
 800c26a:	2311      	movs	r3, #17
 800c26c:	e011      	b.n	800c292 <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800c26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c274:	9303      	str	r3, [sp, #12]
 800c276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c278:	9302      	str	r3, [sp, #8]
 800c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7fb fee3 	bl	8008054 <_nx_ip_create>
 800c28e:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800c290:	69fb      	ldr	r3, [r7, #28]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3730      	adds	r7, #48	; 0x30
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	5041434b 	.word	0x5041434b
 800c2a0:	20017cb4 	.word	0x20017cb4
 800c2a4:	20017cb8 	.word	0x20017cb8
 800c2a8:	2000008c 	.word	0x2000008c
 800c2ac:	20017d10 	.word	0x20017d10
 800c2b0:	20017e5c 	.word	0x20017e5c

0800c2b4 <_nxe_ip_status_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_status_check(NX_IP *ip_ptr, ULONG needed_status, ULONG *actual_status, ULONG wait_option)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (actual_status == NX_NULL))
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d007      	beq.n	800c2d8 <_nxe_ip_status_check+0x24>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a17      	ldr	r2, [pc, #92]	; (800c32c <_nxe_ip_status_check+0x78>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d102      	bne.n	800c2d8 <_nxe_ip_status_check+0x24>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <_nxe_ip_status_check+0x28>
    {
        return(NX_PTR_ERROR);
 800c2d8:	2307      	movs	r3, #7
 800c2da:	e022      	b.n	800c322 <_nxe_ip_status_check+0x6e>
    }

    /* Check for valid options.  */
    if (needed_status &
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	4b14      	ldr	r3, [pc, #80]	; (800c330 <_nxe_ip_status_check+0x7c>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d001      	beq.n	800c2ea <_nxe_ip_status_check+0x36>
        ~(NX_IP_INITIALIZE_DONE | NX_IP_ADDRESS_RESOLVED | NX_IP_LINK_ENABLED | NX_IP_ARP_ENABLED |
          NX_IP_UDP_ENABLED | NX_IP_TCP_ENABLED | NX_IP_IGMP_ENABLED | NX_IP_RARP_COMPLETE | NX_IP_INTERFACE_LINK_ENABLED))
    {
        return(NX_OPTION_ERROR);
 800c2e6:	230a      	movs	r3, #10
 800c2e8:	e01b      	b.n	800c322 <_nxe_ip_status_check+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2ea:	f3ef 8305 	mrs	r3, IPSR
 800c2ee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c2f0:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800c2f2:	4b10      	ldr	r3, [pc, #64]	; (800c334 <_nxe_ip_status_check+0x80>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d108      	bne.n	800c30e <_nxe_ip_status_check+0x5a>
 800c2fc:	4b0e      	ldr	r3, [pc, #56]	; (800c338 <_nxe_ip_status_check+0x84>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d004      	beq.n	800c30e <_nxe_ip_status_check+0x5a>
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <_nxe_ip_status_check+0x84>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a0c      	ldr	r2, [pc, #48]	; (800c33c <_nxe_ip_status_check+0x88>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d101      	bne.n	800c312 <_nxe_ip_status_check+0x5e>
 800c30e:	2311      	movs	r3, #17
 800c310:	e007      	b.n	800c322 <_nxe_ip_status_check+0x6e>

    /* Call actual IP status check function.  */
    status =  _nx_ip_status_check(ip_ptr, needed_status, actual_status, wait_option);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7fd f915 	bl	8009548 <_nx_ip_status_check>
 800c31e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800c320:	697b      	ldr	r3, [r7, #20]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	49502020 	.word	0x49502020
 800c330:	fffffe00 	.word	0xfffffe00
 800c334:	2000008c 	.word	0x2000008c
 800c338:	20017d10 	.word	0x20017d10
 800c33c:	20017e5c 	.word	0x20017e5c

0800c340 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d007      	beq.n	800c364 <_nxe_packet_allocate+0x24>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a18      	ldr	r2, [pc, #96]	; (800c3bc <_nxe_packet_allocate+0x7c>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d102      	bne.n	800c364 <_nxe_packet_allocate+0x24>
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800c364:	2307      	movs	r3, #7
 800c366:	e025      	b.n	800c3b4 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f003 0303 	and.w	r3, r3, #3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800c372:	230a      	movs	r3, #10
 800c374:	e01e      	b.n	800c3b4 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d013      	beq.n	800c3a4 <_nxe_packet_allocate+0x64>
 800c37c:	4b10      	ldr	r3, [pc, #64]	; (800c3c0 <_nxe_packet_allocate+0x80>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00d      	beq.n	800c3a0 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c384:	f3ef 8305 	mrs	r3, IPSR
 800c388:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c38a:	693a      	ldr	r2, [r7, #16]
 800c38c:	4b0d      	ldr	r3, [pc, #52]	; (800c3c4 <_nxe_packet_allocate+0x84>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4313      	orrs	r3, r2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d104      	bne.n	800c3a0 <_nxe_packet_allocate+0x60>
 800c396:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <_nxe_packet_allocate+0x80>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a0b      	ldr	r2, [pc, #44]	; (800c3c8 <_nxe_packet_allocate+0x88>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d101      	bne.n	800c3a4 <_nxe_packet_allocate+0x64>
 800c3a0:	2311      	movs	r3, #17
 800c3a2:	e007      	b.n	800c3b4 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f7fd fe02 	bl	8009fb4 <_nx_packet_allocate>
 800c3b0:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800c3b2:	697b      	ldr	r3, [r7, #20]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	5041434b 	.word	0x5041434b
 800c3c0:	20017d10 	.word	0x20017d10
 800c3c4:	2000008c 	.word	0x2000008c
 800c3c8:	20017e5c 	.word	0x20017e5c

0800c3cc <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b094      	sub	sp, #80	; 0x50
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d005      	beq.n	800c3f0 <_nxe_packet_pool_create+0x24>
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d002      	beq.n	800c3f0 <_nxe_packet_pool_create+0x24>
 800c3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3ec:	2b3c      	cmp	r3, #60	; 0x3c
 800c3ee:	d001      	beq.n	800c3f4 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800c3f0:	2307      	movs	r3, #7
 800c3f2:	e0a7      	b.n	800c544 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	3303      	adds	r3, #3
 800c3f8:	f023 0303 	bic.w	r3, r3, #3
 800c3fc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c402:	1ad2      	subs	r2, r2, r3
 800c404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c406:	4413      	add	r3, r2
 800c408:	f023 0303 	bic.w	r3, r3, #3
 800c40c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800c40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c410:	3338      	adds	r3, #56	; 0x38
 800c412:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800c414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c416:	3303      	adds	r3, #3
 800c418:	f023 0303 	bic.w	r3, r3, #3
 800c41c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800c41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800c426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4413      	add	r3, r2
 800c42c:	3303      	adds	r3, #3
 800c42e:	f023 0203 	bic.w	r2, r3, #3
 800c432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800c438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	d908      	bls.n	800c450 <_nxe_packet_pool_create+0x84>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d005      	beq.n	800c450 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800c444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800c44a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d201      	bcs.n	800c454 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800c450:	2309      	movs	r3, #9
 800c452:	e077      	b.n	800c544 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800c454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c456:	3b01      	subs	r3, #1
 800c458:	683a      	ldr	r2, [r7, #0]
 800c45a:	4413      	add	r3, r2
 800c45c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800c45e:	f001 fda7 	bl	800dfb0 <_tx_thread_identify>
 800c462:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	2b00      	cmp	r3, #0
 800c468:	d006      	beq.n	800c478 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800c46a:	f107 0310 	add.w	r3, r7, #16
 800c46e:	461a      	mov	r2, r3
 800c470:	2100      	movs	r1, #0
 800c472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c474:	f001 fdfa 	bl	800e06c <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800c478:	4b34      	ldr	r3, [pc, #208]	; (800c54c <_nxe_packet_pool_create+0x180>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 800c47e:	4b34      	ldr	r3, [pc, #208]	; (800c550 <_nxe_packet_pool_create+0x184>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 800c484:	e02b      	b.n	800c4de <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800c486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c488:	6a1a      	ldr	r2, [r3, #32]
 800c48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48e:	3b01      	subs	r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c498:	429a      	cmp	r2, r3
 800c49a:	d011      	beq.n	800c4c0 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800c49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c49e:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800c4a0:	683a      	ldr	r2, [r7, #0]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d303      	bcc.n	800c4ae <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d308      	bcc.n	800c4c0 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800c4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800c4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d30f      	bcc.n	800c4d8 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800c4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d20b      	bcs.n	800c4d8 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d006      	beq.n	800c4d4 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f107 0210 	add.w	r2, r7, #16
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4d0:	f001 fdcc 	bl	800e06c <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800c4d4:	2307      	movs	r3, #7
 800c4d6:	e035      	b.n	800c544 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800c4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4dc:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 800c4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4e0:	1e5a      	subs	r2, r3, #1
 800c4e2:	643a      	str	r2, [r7, #64]	; 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1ce      	bne.n	800c486 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d006      	beq.n	800c4fc <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	f107 0210 	add.w	r2, r7, #16
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4f8:	f001 fdb8 	bl	800e06c <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4fc:	f3ef 8305 	mrs	r3, IPSR
 800c500:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c502:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800c504:	4b13      	ldr	r3, [pc, #76]	; (800c554 <_nxe_packet_pool_create+0x188>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4313      	orrs	r3, r2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d009      	beq.n	800c522 <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c50e:	f3ef 8305 	mrs	r3, IPSR
 800c512:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <_nxe_packet_pool_create+0x188>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c520:	d304      	bcc.n	800c52c <_nxe_packet_pool_create+0x160>
 800c522:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <_nxe_packet_pool_create+0x18c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a0d      	ldr	r2, [pc, #52]	; (800c55c <_nxe_packet_pool_create+0x190>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d101      	bne.n	800c530 <_nxe_packet_pool_create+0x164>
 800c52c:	2311      	movs	r3, #17
 800c52e:	e009      	b.n	800c544 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800c530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	68b9      	ldr	r1, [r7, #8]
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f7fe f832 	bl	800a5a4 <_nx_packet_pool_create>
 800c540:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800c542:	6a3b      	ldr	r3, [r7, #32]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3748      	adds	r7, #72	; 0x48
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	20017cbc 	.word	0x20017cbc
 800c550:	20017cc0 	.word	0x20017cc0
 800c554:	2000008c 	.word	0x2000008c
 800c558:	20017d10 	.word	0x20017d10
 800c55c:	20017e5c 	.word	0x20017e5c

0800c560 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d009      	beq.n	800c588 <_nxe_packet_release+0x28>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d005      	beq.n	800c588 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800c582:	4a12      	ldr	r2, [pc, #72]	; (800c5cc <_nxe_packet_release+0x6c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d001      	beq.n	800c58c <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800c588:	2307      	movs	r3, #7
 800c58a:	e01a      	b.n	800c5c2 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689a      	ldr	r2, [r3, #8]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	429a      	cmp	r2, r3
 800c596:	d201      	bcs.n	800c59c <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800c598:	2302      	movs	r3, #2
 800c59a:	e012      	b.n	800c5c2 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d901      	bls.n	800c5ac <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e00a      	b.n	800c5c2 <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f7fe f965 	bl	800a87c <_nx_packet_release>
 800c5b2:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	5041434b 	.word	0x5041434b

0800c5d0 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d009      	beq.n	800c5f8 <_nxe_packet_transmit_release+0x28>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d005      	beq.n	800c5f8 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800c5f2:	4a12      	ldr	r2, [pc, #72]	; (800c63c <_nxe_packet_transmit_release+0x6c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d001      	beq.n	800c5fc <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800c5f8:	2307      	movs	r3, #7
 800c5fa:	e01a      	b.n	800c632 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	689a      	ldr	r2, [r3, #8]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	429a      	cmp	r2, r3
 800c606:	d201      	bcs.n	800c60c <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800c608:	2302      	movs	r3, #2
 800c60a:	e012      	b.n	800c632 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	68da      	ldr	r2, [r3, #12]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	429a      	cmp	r2, r3
 800c616:	d901      	bls.n	800c61c <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800c618:	2303      	movs	r3, #3
 800c61a:	e00a      	b.n	800c632 <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f7fe f9e3 	bl	800a9e8 <_nx_packet_transmit_release>
 800c622:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d102      	bne.n	800c630 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800c630:	68bb      	ldr	r3, [r7, #8]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	5041434b 	.word	0x5041434b

0800c640 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <_nxe_udp_enable+0x18>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a15      	ldr	r2, [pc, #84]	; (800c6a8 <_nxe_udp_enable+0x68>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d001      	beq.n	800c65c <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800c658:	2307      	movs	r3, #7
 800c65a:	e020      	b.n	800c69e <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c662:	2b00      	cmp	r3, #0
 800c664:	d001      	beq.n	800c66a <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800c666:	2315      	movs	r3, #21
 800c668:	e019      	b.n	800c69e <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c66a:	f3ef 8305 	mrs	r3, IPSR
 800c66e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c670:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800c672:	4b0e      	ldr	r3, [pc, #56]	; (800c6ac <_nxe_udp_enable+0x6c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4313      	orrs	r3, r2
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c67c:	f3ef 8305 	mrs	r3, IPSR
 800c680:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <_nxe_udp_enable+0x6c>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4313      	orrs	r3, r2
 800c68a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c68e:	d201      	bcs.n	800c694 <_nxe_udp_enable+0x54>
 800c690:	2311      	movs	r3, #17
 800c692:	e004      	b.n	800c69e <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7fe fb2f 	bl	800acf8 <_nx_udp_enable>
 800c69a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800c69c:	697b      	ldr	r3, [r7, #20]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	49502020 	.word	0x49502020
 800c6ac:	2000008c 	.word	0x2000008c

0800c6b0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08e      	sub	sp, #56	; 0x38
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800c6be:	2234      	movs	r2, #52	; 0x34
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f003 fbcd 	bl	800fe62 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	f1a3 0208 	sub.w	r2, r3, #8
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800c702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	4413      	add	r3, r2
 800c708:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800c70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70c:	3b04      	subs	r3, #4
 800c70e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c716:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c71c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800c71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c720:	3b04      	subs	r3, #4
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c73a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800c740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c742:	3304      	adds	r3, #4
 800c744:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c748:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	4a1f      	ldr	r2, [pc, #124]	; (800c7cc <_tx_byte_pool_create+0x11c>)
 800c74e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c756:	f3ef 8310 	mrs	r3, PRIMASK
 800c75a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c75c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c75e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c760:	b672      	cpsid	i
    return(int_posture);
 800c762:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800c764:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4a19      	ldr	r2, [pc, #100]	; (800c7d0 <_tx_byte_pool_create+0x120>)
 800c76a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800c76c:	4b19      	ldr	r3, [pc, #100]	; (800c7d4 <_tx_byte_pool_create+0x124>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d109      	bne.n	800c788 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800c774:	4a18      	ldr	r2, [pc, #96]	; (800c7d8 <_tx_byte_pool_create+0x128>)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	631a      	str	r2, [r3, #48]	; 0x30
 800c786:	e011      	b.n	800c7ac <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800c788:	4b13      	ldr	r3, [pc, #76]	; (800c7d8 <_tx_byte_pool_create+0x128>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c792:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	69fa      	ldr	r2, [r7, #28]
 800c7a4:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6a3a      	ldr	r2, [r7, #32]
 800c7aa:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800c7ac:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <_tx_byte_pool_create+0x124>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	4a08      	ldr	r2, [pc, #32]	; (800c7d4 <_tx_byte_pool_create+0x124>)
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	f383 8810 	msr	PRIMASK, r3
}
 800c7c0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3738      	adds	r7, #56	; 0x38
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	ffffeeee 	.word	0xffffeeee
 800c7d0:	42595445 	.word	0x42595445
 800c7d4:	20017d04 	.word	0x20017d04
 800c7d8:	20017d00 	.word	0x20017d00

0800c7dc <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08e      	sub	sp, #56	; 0x38
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c7ea:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c7ec:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c7ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7f0:	b672      	cpsid	i
    return(int_posture);
 800c7f2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800c7f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7fa:	4a38      	ldr	r2, [pc, #224]	; (800c8dc <_tx_event_flags_cleanup+0x100>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d162      	bne.n	800c8c6 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d15c      	bne.n	800c8c6 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c810:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	2b00      	cmp	r3, #0
 800c816:	d056      	beq.n	800c8c6 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a30      	ldr	r2, [pc, #192]	; (800c8e0 <_tx_event_flags_cleanup+0x104>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d151      	bne.n	800c8c6 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d04d      	beq.n	800c8c6 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	695b      	ldr	r3, [r3, #20]
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d020      	beq.n	800c884 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800c842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c844:	3b01      	subs	r3, #1
 800c846:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84c:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	2b00      	cmp	r3, #0
 800c852:	d103      	bne.n	800c85c <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800c854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c856:	2200      	movs	r2, #0
 800c858:	611a      	str	r2, [r3, #16]
 800c85a:	e016      	b.n	800c88a <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c860:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c866:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86a:	6a3a      	ldr	r2, [r7, #32]
 800c86c:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c872:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800c874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d106      	bne.n	800c88a <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c880:	611a      	str	r2, [r3, #16]
 800c882:	e002      	b.n	800c88a <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	2201      	movs	r2, #1
 800c888:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88e:	2b07      	cmp	r3, #7
 800c890:	d119      	bne.n	800c8c6 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2207      	movs	r2, #7
 800c896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c89a:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <_tx_event_flags_cleanup+0x108>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	4a10      	ldr	r2, [pc, #64]	; (800c8e4 <_tx_event_flags_cleanup+0x108>)
 800c8a2:	6013      	str	r3, [r2, #0]
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f383 8810 	msr	PRIMASK, r3
}
 800c8ae:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f001 fdd9 	bl	800e468 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8b6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ba:	617b      	str	r3, [r7, #20]
    return(posture);
 800c8bc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c8be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8c0:	b672      	cpsid	i
    return(int_posture);
 800c8c2:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	f383 8810 	msr	PRIMASK, r3
}
 800c8d0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c8d2:	bf00      	nop
 800c8d4:	3738      	adds	r7, #56	; 0x38
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	0800c7dd 	.word	0x0800c7dd
 800c8e0:	4456444e 	.word	0x4456444e
 800c8e4:	20017dac 	.word	0x20017dac

0800c8e8 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b088      	sub	sp, #32
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800c8f2:	2224      	movs	r2, #36	; 0x24
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f003 fab3 	bl	800fe62 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c902:	f3ef 8310 	mrs	r3, PRIMASK
 800c906:	613b      	str	r3, [r7, #16]
    return(posture);
 800c908:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800c90a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c90c:	b672      	cpsid	i
    return(int_posture);
 800c90e:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800c910:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a18      	ldr	r2, [pc, #96]	; (800c978 <_tx_event_flags_create+0x90>)
 800c916:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800c918:	4b18      	ldr	r3, [pc, #96]	; (800c97c <_tx_event_flags_create+0x94>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d109      	bne.n	800c934 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800c920:	4a17      	ldr	r2, [pc, #92]	; (800c980 <_tx_event_flags_create+0x98>)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	61da      	str	r2, [r3, #28]
 800c932:	e011      	b.n	800c958 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800c934:	4b12      	ldr	r3, [pc, #72]	; (800c980 <_tx_event_flags_create+0x98>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	69db      	ldr	r3, [r3, #28]
 800c93e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800c958:	4b08      	ldr	r3, [pc, #32]	; (800c97c <_tx_event_flags_create+0x94>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3301      	adds	r3, #1
 800c95e:	4a07      	ldr	r2, [pc, #28]	; (800c97c <_tx_event_flags_create+0x94>)
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	f383 8810 	msr	PRIMASK, r3
}
 800c96c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3720      	adds	r7, #32
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	4456444e 	.word	0x4456444e
 800c97c:	20017cec 	.word	0x20017cec
 800c980:	20017ce8 	.word	0x20017ce8

0800c984 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b096      	sub	sp, #88	; 0x58
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c992:	f3ef 8310 	mrs	r3, PRIMASK
 800c996:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c99a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c99c:	b672      	cpsid	i
    return(int_posture);
 800c99e:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800c9a0:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f003 0302 	and.w	r3, r3, #2
 800c9ae:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800c9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d004      	beq.n	800c9c6 <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800c9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9be:	43db      	mvns	r3, r3
 800c9c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9c2:	4013      	ands	r3, r2
 800c9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800c9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d10a      	bne.n	800c9e2 <_tx_event_flags_get+0x5e>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800c9cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800c9d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d006      	beq.n	800c9ea <_tx_event_flags_get+0x66>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800c9dc:	2300      	movs	r3, #0
 800c9de:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9e0:	e003      	b.n	800c9ea <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800c9e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800c9ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d029      	beq.n	800ca44 <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9f4:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d11c      	bne.n	800ca3e <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800ca04:	2300      	movs	r3, #0
 800ca06:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	695b      	ldr	r3, [r3, #20]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d005      	beq.n	800ca1c <_tx_event_flags_get+0x98>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d101      	bne.n	800ca1c <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800ca1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d106      	bne.n	800ca30 <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1a      	ldr	r2, [r3, #32]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	621a      	str	r2, [r3, #32]
 800ca2e:	e006      	b.n	800ca3e <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	43db      	mvns	r3, r3
 800ca38:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	653b      	str	r3, [r7, #80]	; 0x50
 800ca42:	e070      	b.n	800cb26 <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ca44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d06b      	beq.n	800cb22 <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800ca4a:	4b3c      	ldr	r3, [pc, #240]	; (800cb3c <_tx_event_flags_get+0x1b8>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <_tx_event_flags_get+0xd4>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 800ca52:	2307      	movs	r3, #7
 800ca54:	653b      	str	r3, [r7, #80]	; 0x50
 800ca56:	e066      	b.n	800cb26 <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800ca58:	4b39      	ldr	r3, [pc, #228]	; (800cb40 <_tx_event_flags_get+0x1bc>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca60:	4a38      	ldr	r2, [pc, #224]	; (800cb44 <_tx_event_flags_get+0x1c0>)
 800ca62:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800ca72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	695b      	ldr	r3, [r3, #20]
 800ca90:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ca92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d109      	bne.n	800caac <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca9c:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caa2:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800caa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caa8:	675a      	str	r2, [r3, #116]	; 0x74
 800caaa:	e011      	b.n	800cad0 <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab6:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cac2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cac8:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cace:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cadc:	2207      	movs	r2, #7
 800cade:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	2201      	movs	r2, #1
 800cae4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800caea:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800caec:	4b13      	ldr	r3, [pc, #76]	; (800cb3c <_tx_event_flags_get+0x1b8>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	3301      	adds	r3, #1
 800caf2:	4a12      	ldr	r2, [pc, #72]	; (800cb3c <_tx_event_flags_get+0x1b8>)
 800caf4:	6013      	str	r3, [r2, #0]
 800caf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f383 8810 	msr	PRIMASK, r3
}
 800cb00:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800cb02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb04:	f001 fdc4 	bl	800e690 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb08:	f3ef 8310 	mrs	r3, PRIMASK
 800cb0c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cb0e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cb10:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb12:	b672      	cpsid	i
    return(int_posture);
 800cb14:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800cb16:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb1e:	653b      	str	r3, [r7, #80]	; 0x50
 800cb20:	e001      	b.n	800cb26 <_tx_event_flags_get+0x1a2>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800cb22:	2307      	movs	r3, #7
 800cb24:	653b      	str	r3, [r7, #80]	; 0x50
 800cb26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb28:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f383 8810 	msr	PRIMASK, r3
}
 800cb30:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800cb32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3758      	adds	r7, #88	; 0x58
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	20017dac 	.word	0x20017dac
 800cb40:	20017d10 	.word	0x20017d10
 800cb44:	0800c7dd 	.word	0x0800c7dd

0800cb48 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b0a6      	sub	sp, #152	; 0x98
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb54:	f3ef 8310 	mrs	r3, PRIMASK
 800cb58:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800cb5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800cb5c:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb5e:	b672      	cpsid	i
    return(int_posture);
 800cb60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800cb62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d023      	beq.n	800cbb8 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d005      	beq.n	800cb88 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800cb84:	2301      	movs	r3, #1
 800cb86:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800cb88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d107      	bne.n	800cb9e <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6a1a      	ldr	r2, [r3, #32]
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	43db      	mvns	r3, r3
 800cb96:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	621a      	str	r2, [r3, #32]
 800cb9c:	e005      	b.n	800cbaa <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	689a      	ldr	r2, [r3, #8]
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	609a      	str	r2, [r3, #8]
 800cbaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbae:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb2:	f383 8810 	msr	PRIMASK, r3
}
 800cbb6:	e1d4      	b.n	800cf62 <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	689a      	ldr	r2, [r3, #8]
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6a1b      	ldr	r3, [r3, #32]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d006      	beq.n	800cbda <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6a1a      	ldr	r2, [r3, #32]
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	43db      	mvns	r3, r3
 800cbd4:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f000 81a6 	beq.w	800cf3c <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800cbf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d169      	bne.n	800cccc <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800cc06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc0c:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800cc0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc16:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800cc18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc1a:	f003 0302 	and.w	r3, r3, #2
 800cc1e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800cc20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d10a      	bne.n	800cc3c <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800cc26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cc28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800cc2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d006      	beq.n	800cc44 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800cc36:	2300      	movs	r3, #0
 800cc38:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc3a:	e003      	b.n	800cc44 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800cc3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cc3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc40:	4013      	ands	r3, r2
 800cc42:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800cc44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f000 817f 	beq.w	800cf4a <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800cc50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc56:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800cc58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cc5c:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800cc5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800cc66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d106      	bne.n	800cc7a <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	689a      	ldr	r2, [r3, #8]
 800cc70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc72:	43db      	mvns	r3, r3
 800cc74:	401a      	ands	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cc86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cc8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc92:	2200      	movs	r2, #0
 800cc94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800cc98:	4ba7      	ldr	r3, [pc, #668]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	4aa6      	ldr	r2, [pc, #664]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cca6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	f383 8810 	msr	PRIMASK, r3
}
 800ccae:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800ccb0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ccb4:	f001 fbd8 	bl	800e468 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccb8:	f3ef 8310 	mrs	r3, PRIMASK
 800ccbc:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ccbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ccc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccc2:	b672      	cpsid	i
    return(int_posture);
 800ccc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800ccc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ccca:	e13e      	b.n	800cf4a <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800ccd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ccd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800cce2:	2300      	movs	r3, #0
 800cce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800cce8:	2300      	movs	r3, #0
 800ccea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800ccf4:	4b90      	ldr	r3, [pc, #576]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	4a8f      	ldr	r2, [pc, #572]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd02:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	f383 8810 	msr	PRIMASK, r3
}
 800cd0a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd0c:	f3ef 8310 	mrs	r3, PRIMASK
 800cd10:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cd14:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd16:	b672      	cpsid	i
    return(int_posture);
 800cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800cd1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00f      	beq.n	800cd46 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800cd2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd42:	4313      	orrs	r3, r2
 800cd44:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800cd46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd4c:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800cd4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd54:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800cd56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd5e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800cd60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd62:	f003 0302 	and.w	r3, r3, #2
 800cd66:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800cd68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d10a      	bne.n	800cd84 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800cd6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd72:	4013      	ands	r3, r2
 800cd74:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800cd76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d006      	beq.n	800cd8c <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800cd7e:	2300      	movs	r3, #0
 800cd80:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd82:	e003      	b.n	800cd8c <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800cd84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd88:	4013      	ands	r3, r2
 800cd8a:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800cd8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd92:	2b07      	cmp	r3, #7
 800cd94:	d001      	beq.n	800cd9a <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800cd96:	2301      	movs	r3, #1
 800cd98:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800cd9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d06b      	beq.n	800ce78 <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800cda0:	2301      	movs	r3, #1
 800cda2:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800cda4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdaa:	2b07      	cmp	r3, #7
 800cdac:	d11d      	bne.n	800cdea <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800cdae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cdb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdb4:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800cdb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cdba:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800cdbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800cdc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d106      	bne.n	800cdd8 <_tx_event_flags_set+0x290>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	689a      	ldr	r2, [r3, #8]
 800cdce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdd0:	43db      	mvns	r3, r3
 800cdd2:	401a      	ands	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cdd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cddc:	2200      	movs	r2, #0
 800cdde:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cde0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cde4:	2200      	movs	r2, #0
 800cde6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800cdea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cdee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d103      	bne.n	800ce00 <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cdfe:	e018      	b.n	800ce32 <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ce00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce06:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ce08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce0e:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ce10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce14:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800ce16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce1a:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800ce1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ce20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d104      	bne.n	800ce32 <_tx_event_flags_set+0x2ea>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800ce28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	1e5a      	subs	r2, r3, #1
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800ce3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10c      	bne.n	800ce5e <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800ce44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800ce4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800ce54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce58:	2200      	movs	r2, #0
 800ce5a:	671a      	str	r2, [r3, #112]	; 0x70
 800ce5c:	e00c      	b.n	800ce78 <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800ce5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce62:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ce66:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800ce68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800ce70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800ce78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800ce7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce82:	3b01      	subs	r3, #1
 800ce84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800ce88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f47f af36 	bne.w	800ccfe <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ce98:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00a      	beq.n	800ceb8 <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	689a      	ldr	r2, [r3, #8]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	43db      	mvns	r3, r3
 800ceac:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	621a      	str	r2, [r3, #32]
 800ceb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cebc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	f383 8810 	msr	PRIMASK, r3
}
 800cec4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800cec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ceca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800cece:	e01f      	b.n	800cf10 <_tx_event_flags_set+0x3c8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800ced0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ced4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced6:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ced8:	f3ef 8310 	mrs	r3, PRIMASK
 800cedc:	623b      	str	r3, [r7, #32]
    return(posture);
 800cede:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cee0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cee2:	b672      	cpsid	i
    return(int_posture);
 800cee4:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800cee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800ceea:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3301      	adds	r3, #1
 800cef0:	4a11      	ldr	r2, [pc, #68]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cef8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	f383 8810 	msr	PRIMASK, r3
}
 800cf00:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800cf02:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cf06:	f001 faaf 	bl	800e468 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800cf0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800cf10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1db      	bne.n	800ced0 <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf18:	f3ef 8310 	mrs	r3, PRIMASK
 800cf1c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cf1e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cf20:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf22:	b672      	cpsid	i
    return(int_posture);
 800cf24:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800cf26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800cf2a:	4b03      	ldr	r3, [pc, #12]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	4a01      	ldr	r2, [pc, #4]	; (800cf38 <_tx_event_flags_set+0x3f0>)
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	e009      	b.n	800cf4a <_tx_event_flags_set+0x402>
 800cf36:	bf00      	nop
 800cf38:	20017dac 	.word	0x20017dac
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	695b      	ldr	r3, [r3, #20]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <_tx_event_flags_set+0x402>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2201      	movs	r2, #1
 800cf48:	60da      	str	r2, [r3, #12]
 800cf4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf4e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	f383 8810 	msr	PRIMASK, r3
}
 800cf56:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800cf58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d101      	bne.n	800cf62 <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800cf5e:	f001 fa49 	bl	800e3f4 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3798      	adds	r7, #152	; 0x98
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800cf70:	f001 f83c 	bl	800dfec <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800cf74:	f001 fea4 	bl	800ecc0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800cf78:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <_tx_initialize_high_level+0x58>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <_tx_initialize_high_level+0x5c>)
 800cf80:	2200      	movs	r2, #0
 800cf82:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800cf84:	4b11      	ldr	r3, [pc, #68]	; (800cfcc <_tx_initialize_high_level+0x60>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	4b11      	ldr	r3, [pc, #68]	; (800cfd0 <_tx_initialize_high_level+0x64>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800cf90:	4b10      	ldr	r3, [pc, #64]	; (800cfd4 <_tx_initialize_high_level+0x68>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <_tx_initialize_high_level+0x6c>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800cf9c:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <_tx_initialize_high_level+0x70>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <_tx_initialize_high_level+0x74>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800cfa8:	4b0e      	ldr	r3, [pc, #56]	; (800cfe4 <_tx_initialize_high_level+0x78>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	4b0e      	ldr	r3, [pc, #56]	; (800cfe8 <_tx_initialize_high_level+0x7c>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800cfb4:	4b0d      	ldr	r3, [pc, #52]	; (800cfec <_tx_initialize_high_level+0x80>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	4b0d      	ldr	r3, [pc, #52]	; (800cff0 <_tx_initialize_high_level+0x84>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	601a      	str	r2, [r3, #0]
#endif
}
 800cfc0:	bf00      	nop
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	20017cd8 	.word	0x20017cd8
 800cfc8:	20017cdc 	.word	0x20017cdc
 800cfcc:	20017ce0 	.word	0x20017ce0
 800cfd0:	20017ce4 	.word	0x20017ce4
 800cfd4:	20017ce8 	.word	0x20017ce8
 800cfd8:	20017cec 	.word	0x20017cec
 800cfdc:	20017cf8 	.word	0x20017cf8
 800cfe0:	20017cfc 	.word	0x20017cfc
 800cfe4:	20017d00 	.word	0x20017d00
 800cfe8:	20017d04 	.word	0x20017d04
 800cfec:	20017cf0 	.word	0x20017cf0
 800cff0:	20017cf4 	.word	0x20017cf4

0800cff4 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800cff8:	4b10      	ldr	r3, [pc, #64]	; (800d03c <_tx_initialize_kernel_enter+0x48>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800d000:	d00c      	beq.n	800d01c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800d002:	4b0e      	ldr	r3, [pc, #56]	; (800d03c <_tx_initialize_kernel_enter+0x48>)
 800d004:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800d008:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800d00a:	f7f3 f919 	bl	8000240 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800d00e:	f7ff ffad 	bl	800cf6c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800d012:	4b0b      	ldr	r3, [pc, #44]	; (800d040 <_tx_initialize_kernel_enter+0x4c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3301      	adds	r3, #1
 800d018:	4a09      	ldr	r2, [pc, #36]	; (800d040 <_tx_initialize_kernel_enter+0x4c>)
 800d01a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800d01c:	4b07      	ldr	r3, [pc, #28]	; (800d03c <_tx_initialize_kernel_enter+0x48>)
 800d01e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800d022:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800d024:	4b07      	ldr	r3, [pc, #28]	; (800d044 <_tx_initialize_kernel_enter+0x50>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4618      	mov	r0, r3
 800d02a:	f7f3 fbf7 	bl	800081c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800d02e:	4b03      	ldr	r3, [pc, #12]	; (800d03c <_tx_initialize_kernel_enter+0x48>)
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800d034:	f7f3 f944 	bl	80002c0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d038:	bf00      	nop
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	2000008c 	.word	0x2000008c
 800d040:	20017dac 	.word	0x20017dac
 800d044:	20017d08 	.word	0x20017d08

0800d048 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08e      	sub	sp, #56	; 0x38
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d052:	f3ef 8310 	mrs	r3, PRIMASK
 800d056:	623b      	str	r3, [r7, #32]
    return(posture);
 800d058:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d05a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d05c:	b672      	cpsid	i
    return(int_posture);
 800d05e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800d060:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d066:	4a33      	ldr	r2, [pc, #204]	; (800d134 <_tx_mutex_cleanup+0xec>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d158      	bne.n	800d11e <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	429a      	cmp	r2, r3
 800d076:	d152      	bne.n	800d11e <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d07c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	2b00      	cmp	r3, #0
 800d082:	d04c      	beq.n	800d11e <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a2b      	ldr	r2, [pc, #172]	; (800d138 <_tx_mutex_cleanup+0xf0>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d147      	bne.n	800d11e <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	69db      	ldr	r3, [r3, #28]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d043      	beq.n	800d11e <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	69db      	ldr	r3, [r3, #28]
 800d0a0:	1e5a      	subs	r2, r3, #1
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800d0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d103      	bne.n	800d0ba <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	619a      	str	r2, [r3, #24]
 800d0b8:	e013      	b.n	800d0e2 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0be:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800d0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ca:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0d0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d4:	699b      	ldr	r3, [r3, #24]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d102      	bne.n	800d0e2 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e6:	2b0d      	cmp	r3, #13
 800d0e8:	d119      	bne.n	800d11e <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	221d      	movs	r2, #29
 800d0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800d0f2:	4b12      	ldr	r3, [pc, #72]	; (800d13c <_tx_mutex_cleanup+0xf4>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	4a10      	ldr	r2, [pc, #64]	; (800d13c <_tx_mutex_cleanup+0xf4>)
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f383 8810 	msr	PRIMASK, r3
}
 800d106:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f001 f9ad 	bl	800e468 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d10e:	f3ef 8310 	mrs	r3, PRIMASK
 800d112:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d114:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d116:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d118:	b672      	cpsid	i
    return(int_posture);
 800d11a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
 800d11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d120:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f383 8810 	msr	PRIMASK, r3
}
 800d128:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d12a:	bf00      	nop
 800d12c:	3738      	adds	r7, #56	; 0x38
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	0800d049 	.word	0x0800d049
 800d138:	4d555445 	.word	0x4d555445
 800d13c:	20017dac 	.word	0x20017dac

0800d140 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	; 0x28
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d148:	f3ef 8310 	mrs	r3, PRIMASK
 800d14c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d14e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d150:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d152:	b672      	cpsid	i
    return(int_posture);
 800d154:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800d156:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d158:	4b1a      	ldr	r3, [pc, #104]	; (800d1c4 <_tx_mutex_thread_release+0x84>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3301      	adds	r3, #1
 800d15e:	4a19      	ldr	r2, [pc, #100]	; (800d1c4 <_tx_mutex_thread_release+0x84>)
 800d160:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d168:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d017      	beq.n	800d1a0 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	2201      	movs	r2, #1
 800d174:	609a      	str	r2, [r3, #8]
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d178:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f383 8810 	msr	PRIMASK, r3
}
 800d180:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800d182:	6a38      	ldr	r0, [r7, #32]
 800d184:	f000 fbaa 	bl	800d8dc <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d188:	f3ef 8310 	mrs	r3, PRIMASK
 800d18c:	617b      	str	r3, [r7, #20]
    return(posture);
 800d18e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d190:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d192:	b672      	cpsid	i
    return(int_posture);
 800d194:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800d196:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d19e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1dd      	bne.n	800d162 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800d1a6:	4b07      	ldr	r3, [pc, #28]	; (800d1c4 <_tx_mutex_thread_release+0x84>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	4a05      	ldr	r2, [pc, #20]	; (800d1c4 <_tx_mutex_thread_release+0x84>)
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	f383 8810 	msr	PRIMASK, r3
}
 800d1ba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800d1bc:	bf00      	nop
 800d1be:	3728      	adds	r7, #40	; 0x28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	20017dac 	.word	0x20017dac

0800d1c8 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800d1d4:	2234      	movs	r2, #52	; 0x34
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f002 fe42 	bl	800fe62 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	68ba      	ldr	r2, [r7, #8]
 800d1e2:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d1ee:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d1f0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d1f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d1f4:	b672      	cpsid	i
    return(int_posture);
 800d1f6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800d1f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	4a1a      	ldr	r2, [pc, #104]	; (800d268 <_tx_mutex_create+0xa0>)
 800d1fe:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800d200:	4b1a      	ldr	r3, [pc, #104]	; (800d26c <_tx_mutex_create+0xa4>)
 800d202:	4a1b      	ldr	r2, [pc, #108]	; (800d270 <_tx_mutex_create+0xa8>)
 800d204:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800d206:	4b1b      	ldr	r3, [pc, #108]	; (800d274 <_tx_mutex_create+0xac>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d109      	bne.n	800d222 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800d20e:	4a1a      	ldr	r2, [pc, #104]	; (800d278 <_tx_mutex_create+0xb0>)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	625a      	str	r2, [r3, #36]	; 0x24
 800d220:	e011      	b.n	800d246 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800d222:	4b15      	ldr	r3, [pc, #84]	; (800d278 <_tx_mutex_create+0xb0>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	68fa      	ldr	r2, [r7, #12]
 800d238:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	69fa      	ldr	r2, [r7, #28]
 800d23e:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6a3a      	ldr	r2, [r7, #32]
 800d244:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800d246:	4b0b      	ldr	r3, [pc, #44]	; (800d274 <_tx_mutex_create+0xac>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3301      	adds	r3, #1
 800d24c:	4a09      	ldr	r2, [pc, #36]	; (800d274 <_tx_mutex_create+0xac>)
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	f383 8810 	msr	PRIMASK, r3
}
 800d25a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3728      	adds	r7, #40	; 0x28
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	4d555445 	.word	0x4d555445
 800d26c:	20017db0 	.word	0x20017db0
 800d270:	0800d141 	.word	0x0800d141
 800d274:	20017cf4 	.word	0x20017cf4
 800d278:	20017cf0 	.word	0x20017cf0

0800d27c <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b096      	sub	sp, #88	; 0x58
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d284:	f3ef 8310 	mrs	r3, PRIMASK
 800d288:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800d28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800d28c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800d28e:	b672      	cpsid	i
    return(int_posture);
 800d290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800d292:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800d29a:	4b4a      	ldr	r3, [pc, #296]	; (800d3c4 <_tx_mutex_delete+0x148>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	4a48      	ldr	r2, [pc, #288]	; (800d3c4 <_tx_mutex_delete+0x148>)
 800d2a2:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800d2a4:	4b47      	ldr	r3, [pc, #284]	; (800d3c4 <_tx_mutex_delete+0x148>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d103      	bne.n	800d2b4 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800d2ac:	4b46      	ldr	r3, [pc, #280]	; (800d3c8 <_tx_mutex_delete+0x14c>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	e013      	b.n	800d2dc <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a1b      	ldr	r3, [r3, #32]
 800d2b8:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2be:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800d2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2c4:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800d2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2ca:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800d2cc:	4b3e      	ldr	r3, [pc, #248]	; (800d3c8 <_tx_mutex_delete+0x14c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d102      	bne.n	800d2dc <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800d2d6:	4a3c      	ldr	r2, [pc, #240]	; (800d3c8 <_tx_mutex_delete+0x14c>)
 800d2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2da:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d2dc:	4b3b      	ldr	r3, [pc, #236]	; (800d3cc <_tx_mutex_delete+0x150>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	4a3a      	ldr	r2, [pc, #232]	; (800d3cc <_tx_mutex_delete+0x150>)
 800d2e4:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	69db      	ldr	r3, [r3, #28]
 800d2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800d304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d306:	2b00      	cmp	r3, #0
 800d308:	d013      	beq.n	800d332 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2201      	movs	r2, #1
 800d30e:	609a      	str	r2, [r3, #8]
 800d310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d312:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	f383 8810 	msr	PRIMASK, r3
}
 800d31a:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 fadd 	bl	800d8dc <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d322:	f3ef 8310 	mrs	r3, PRIMASK
 800d326:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800d32a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d32c:	b672      	cpsid	i
    return(int_posture);
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800d330:	657b      	str	r3, [r7, #84]	; 0x54
 800d332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d334:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d338:	f383 8810 	msr	PRIMASK, r3
}
 800d33c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800d33e:	e024      	b.n	800d38a <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800d340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d342:	3b01      	subs	r3, #1
 800d344:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d346:	f3ef 8310 	mrs	r3, PRIMASK
 800d34a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d34c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d34e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d350:	b672      	cpsid	i
    return(int_posture);
 800d352:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800d354:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d358:	2200      	movs	r2, #0
 800d35a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800d35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d35e:	2201      	movs	r2, #1
 800d360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800d364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d368:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800d36a:	4b18      	ldr	r3, [pc, #96]	; (800d3cc <_tx_mutex_delete+0x150>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	3301      	adds	r3, #1
 800d370:	4a16      	ldr	r2, [pc, #88]	; (800d3cc <_tx_mutex_delete+0x150>)
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d376:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d378:	6a3b      	ldr	r3, [r7, #32]
 800d37a:	f383 8810 	msr	PRIMASK, r3
}
 800d37e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d380:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d382:	f001 f871 	bl	800e468 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800d386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d388:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 800d38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d1d7      	bne.n	800d340 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d390:	f3ef 8310 	mrs	r3, PRIMASK
 800d394:	613b      	str	r3, [r7, #16]
    return(posture);
 800d396:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d398:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d39a:	b672      	cpsid	i
    return(int_posture);
 800d39c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800d39e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <_tx_mutex_delete+0x150>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	4a09      	ldr	r2, [pc, #36]	; (800d3cc <_tx_mutex_delete+0x150>)
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	f383 8810 	msr	PRIMASK, r3
}
 800d3b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800d3b6:	f001 f81d 	bl	800e3f4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3758      	adds	r7, #88	; 0x58
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20017cf4 	.word	0x20017cf4
 800d3c8:	20017cf0 	.word	0x20017cf0
 800d3cc:	20017dac 	.word	0x20017dac

0800d3d0 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b092      	sub	sp, #72	; 0x48
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3da:	f3ef 8310 	mrs	r3, PRIMASK
 800d3de:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800d3e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d3e4:	b672      	cpsid	i
    return(int_posture);
 800d3e6:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800d3e8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d3ea:	4b7a      	ldr	r3, [pc, #488]	; (800d5d4 <_tx_mutex_get+0x204>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d144      	bne.n	800d482 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d402:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800d404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d032      	beq.n	800d470 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d106      	bne.n	800d420 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800d412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2220      	movs	r2, #32
 800d41e:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800d420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d426:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00f      	beq.n	800d44e <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d432:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d444:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d44a:	62da      	str	r2, [r3, #44]	; 0x2c
 800d44c:	e009      	b.n	800d462 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800d44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800d462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d468:	1c5a      	adds	r2, r3, #1
 800d46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d46c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800d470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d472:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	f383 8810 	msr	PRIMASK, r3
}
 800d47a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800d47c:	2300      	movs	r3, #0
 800d47e:	647b      	str	r3, [r7, #68]	; 0x44
 800d480:	e0a2      	b.n	800d5c8 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d488:	429a      	cmp	r2, r3
 800d48a:	d10d      	bne.n	800d4a8 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	609a      	str	r2, [r3, #8]
 800d496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d498:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	f383 8810 	msr	PRIMASK, r3
}
 800d4a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d4a6:	e08f      	b.n	800d5c8 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 8084 	beq.w	800d5b8 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800d4b0:	4b49      	ldr	r3, [pc, #292]	; (800d5d8 <_tx_mutex_get+0x208>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d008      	beq.n	800d4ca <_tx_mutex_get+0xfa>
 800d4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	f383 8810 	msr	PRIMASK, r3
}
 800d4c2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800d4c4:	231d      	movs	r3, #29
 800d4c6:	647b      	str	r3, [r7, #68]	; 0x44
 800d4c8:	e07e      	b.n	800d5c8 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d2:	4a42      	ldr	r2, [pc, #264]	; (800d5dc <_tx_mutex_get+0x20c>)
 800d4d4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800d4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800d4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	69db      	ldr	r3, [r3, #28]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4f6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800d4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4fc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800d4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d500:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d502:	675a      	str	r2, [r3, #116]	; 0x74
 800d504:	e011      	b.n	800d52a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d510:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800d512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d516:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800d518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d51c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d522:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800d524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d528:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	1c5a      	adds	r2, r3, #1
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800d534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d536:	220d      	movs	r2, #13
 800d538:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d53c:	2201      	movs	r2, #1
 800d53e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800d546:	4b24      	ldr	r3, [pc, #144]	; (800d5d8 <_tx_mutex_get+0x208>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	3301      	adds	r3, #1
 800d54c:	4a22      	ldr	r2, [pc, #136]	; (800d5d8 <_tx_mutex_get+0x208>)
 800d54e:	6013      	str	r3, [r2, #0]
 800d550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d552:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f383 8810 	msr	PRIMASK, r3
}
 800d55a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d121      	bne.n	800d5a8 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d903      	bls.n	800d578 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800d570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800d578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d582:	429a      	cmp	r2, r3
 800d584:	d204      	bcs.n	800d590 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800d586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800d590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d598:	429a      	cmp	r2, r3
 800d59a:	d905      	bls.n	800d5a8 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800d59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5a4:	f000 f8ce 	bl	800d744 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d5a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5aa:	f001 f871 	bl	800e690 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5b4:	647b      	str	r3, [r7, #68]	; 0x44
 800d5b6:	e007      	b.n	800d5c8 <_tx_mutex_get+0x1f8>
 800d5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f383 8810 	msr	PRIMASK, r3
}
 800d5c2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800d5c4:	231d      	movs	r3, #29
 800d5c6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800d5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3748      	adds	r7, #72	; 0x48
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20017d10 	.word	0x20017d10
 800d5d8:	20017dac 	.word	0x20017dac
 800d5dc:	0800d049 	.word	0x0800d049

0800d5e0 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b092      	sub	sp, #72	; 0x48
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800d5ec:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800d5f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d5f2:	b672      	cpsid	i
    return(int_posture);
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800d5f6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	69db      	ldr	r3, [r3, #28]
 800d5fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800d5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d600:	2b01      	cmp	r3, #1
 800d602:	d805      	bhi.n	800d610 <_tx_mutex_prioritize+0x30>
 800d604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d606:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	f383 8810 	msr	PRIMASK, r3
}
 800d60e:	e092      	b.n	800d736 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800d610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d612:	2b02      	cmp	r3, #2
 800d614:	d114      	bne.n	800d640 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d620:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d202      	bcs.n	800d634 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d632:	619a      	str	r2, [r3, #24]
 800d634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d636:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	f383 8810 	msr	PRIMASK, r3
}
 800d63e:	e07a      	b.n	800d736 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800d646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d648:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800d64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800d650:	4b3b      	ldr	r3, [pc, #236]	; (800d740 <_tx_mutex_prioritize+0x160>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	4a3a      	ldr	r2, [pc, #232]	; (800d740 <_tx_mutex_prioritize+0x160>)
 800d658:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800d65a:	2300      	movs	r3, #0
 800d65c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800d65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d666:	429a      	cmp	r2, r3
 800d668:	d201      	bcs.n	800d66e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800d66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d66c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d66e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d670:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f383 8810 	msr	PRIMASK, r3
}
 800d678:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d67a:	f3ef 8310 	mrs	r3, PRIMASK
 800d67e:	617b      	str	r3, [r7, #20]
    return(posture);
 800d680:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d682:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d684:	b672      	cpsid	i
    return(int_posture);
 800d686:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800d688:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d690:	429a      	cmp	r2, r3
 800d692:	d002      	beq.n	800d69a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800d694:	2301      	movs	r3, #1
 800d696:	633b      	str	r3, [r7, #48]	; 0x30
 800d698:	e006      	b.n	800d6a8 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	69db      	ldr	r3, [r3, #28]
 800d69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d001      	beq.n	800d6a8 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800d6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d103      	bne.n	800d6b6 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b2:	643b      	str	r3, [r7, #64]	; 0x40
 800d6b4:	e00c      	b.n	800d6d0 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	69db      	ldr	r3, [r3, #28]
 800d6c0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800d6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ca:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800d6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d1c2      	bne.n	800d65e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800d6d8:	4b19      	ldr	r3, [pc, #100]	; (800d740 <_tx_mutex_prioritize+0x160>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	4a18      	ldr	r2, [pc, #96]	; (800d740 <_tx_mutex_prioritize+0x160>)
 800d6e0:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800d6e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d01d      	beq.n	800d726 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800d6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800d6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6f4:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6fa:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d700:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800d702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800d708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d70c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800d70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d712:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d718:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d71e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d724:	619a      	str	r2, [r3, #24]
 800d726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d728:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f383 8810 	msr	PRIMASK, r3
}
 800d730:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d732:	f000 fe5f 	bl	800e3f4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800d736:	2300      	movs	r3, #0
#endif
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3748      	adds	r7, #72	; 0x48
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	20017dac 	.word	0x20017dac

0800d744 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b092      	sub	sp, #72	; 0x48
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d74e:	f3ef 8310 	mrs	r3, PRIMASK
 800d752:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800d756:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d758:	b672      	cpsid	i
    return(int_posture);
 800d75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d75c:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d762:	2b00      	cmp	r3, #0
 800d764:	d017      	beq.n	800d796 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	683a      	ldr	r2, [r7, #0]
 800d76a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	429a      	cmp	r2, r3
 800d776:	d905      	bls.n	800d784 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	63da      	str	r2, [r3, #60]	; 0x3c
 800d782:	e002      	b.n	800d78a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	63da      	str	r2, [r3, #60]	; 0x3c
 800d78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d78c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	f383 8810 	msr	PRIMASK, r3
}
 800d794:	e096      	b.n	800d8c4 <_tx_mutex_priority_change+0x180>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800d796:	4b4d      	ldr	r3, [pc, #308]	; (800d8cc <_tx_mutex_priority_change+0x188>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	643b      	str	r3, [r7, #64]	; 0x40

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800d7a2:	4b4b      	ldr	r3, [pc, #300]	; (800d8d0 <_tx_mutex_priority_change+0x18c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	3302      	adds	r3, #2
 800d7a8:	4a49      	ldr	r2, [pc, #292]	; (800d8d0 <_tx_mutex_priority_change+0x18c>)
 800d7aa:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	220e      	movs	r2, #14
 800d7b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	64da      	str	r2, [r3, #76]	; 0x4c
 800d7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	f383 8810 	msr	PRIMASK, r3
}
 800d7c8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 ff60 	bl	800e690 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7d4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800d7d8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d7da:	b672      	cpsid	i
    return(int_posture);
 800d7dc:	6a3b      	ldr	r3, [r7, #32]

        /* Disable interrupts.  */
        TX_DISABLE
 800d7de:	647b      	str	r3, [r7, #68]	; 0x44

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d905      	bls.n	800d7fe <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	63da      	str	r2, [r3, #60]	; 0x3c
 800d7fc:	e002      	b.n	800d804 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	63da      	str	r2, [r3, #60]	; 0x3c
 800d804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d806:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	f383 8810 	msr	PRIMASK, r3
}
 800d80e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fe29 	bl	800e468 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d816:	f3ef 8310 	mrs	r3, PRIMASK
 800d81a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d81c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d81e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d820:	b672      	cpsid	i
    return(int_posture);
 800d822:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800d824:	647b      	str	r3, [r7, #68]	; 0x44
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800d826:	4b29      	ldr	r3, [pc, #164]	; (800d8cc <_tx_mutex_priority_change+0x188>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d830:	429a      	cmp	r2, r3
 800d832:	d041      	beq.n	800d8b8 <_tx_mutex_priority_change+0x174>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d13d      	bne.n	800d8b8 <_tx_mutex_priority_change+0x174>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d844:	429a      	cmp	r2, r3
 800d846:	d811      	bhi.n	800d86c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d133      	bne.n	800d8b8 <_tx_mutex_priority_change+0x174>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800d850:	4a1e      	ldr	r2, [pc, #120]	; (800d8cc <_tx_mutex_priority_change+0x188>)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800d856:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d22c      	bcs.n	800d8b8 <_tx_mutex_priority_change+0x174>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d862:	491c      	ldr	r1, [pc, #112]	; (800d8d4 <_tx_mutex_priority_change+0x190>)
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d86a:	e025      	b.n	800d8b8 <_tx_mutex_priority_change+0x174>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d874:	429a      	cmp	r2, r3
 800d876:	d21f      	bcs.n	800d8b8 <_tx_mutex_priority_change+0x174>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d880:	429a      	cmp	r2, r3
 800d882:	d80d      	bhi.n	800d8a0 <_tx_mutex_priority_change+0x15c>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d884:	4a11      	ldr	r2, [pc, #68]	; (800d8cc <_tx_mutex_priority_change+0x188>)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800d88a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d212      	bcs.n	800d8b8 <_tx_mutex_priority_change+0x174>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d896:	490f      	ldr	r1, [pc, #60]	; (800d8d4 <_tx_mutex_priority_change+0x190>)
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d89e:	e00b      	b.n	800d8b8 <_tx_mutex_priority_change+0x174>
                            TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                            _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                            /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                            TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8aa:	637b      	str	r3, [r7, #52]	; 0x34
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800d8ac:	4b0a      	ldr	r3, [pc, #40]	; (800d8d8 <_tx_mutex_priority_change+0x194>)
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	4a08      	ldr	r2, [pc, #32]	; (800d8d8 <_tx_mutex_priority_change+0x194>)
 800d8b6:	6013      	str	r3, [r2, #0]
 800d8b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f383 8810 	msr	PRIMASK, r3
}
 800d8c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d8c4:	bf00      	nop
 800d8c6:	3748      	adds	r7, #72	; 0x48
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	20017d14 	.word	0x20017d14
 800d8d0:	20017dac 	.word	0x20017dac
 800d8d4:	20017d2c 	.word	0x20017d2c
 800d8d8:	20017d24 	.word	0x20017d24

0800d8dc <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b0a6      	sub	sp, #152	; 0x98
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800d8e4:	2320      	movs	r3, #32
 800d8e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d8ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800d8f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800d8f2:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8f4:	b672      	cpsid	i
    return(int_posture);
 800d8f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800d8f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	f000 81ff 	beq.w	800dd04 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d90c:	4ba3      	ldr	r3, [pc, #652]	; (800db9c <_tx_mutex_put+0x2c0>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d918:	429a      	cmp	r2, r3
 800d91a:	d00d      	beq.n	800d938 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800d91c:	4ba0      	ldr	r3, [pc, #640]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d109      	bne.n	800d938 <_tx_mutex_put+0x5c>
 800d924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d928:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d92c:	f383 8810 	msr	PRIMASK, r3
}
 800d930:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800d932:	231e      	movs	r3, #30
 800d934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800d938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d93c:	2b20      	cmp	r3, #32
 800d93e:	f040 81eb 	bne.w	800dd18 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	1e5a      	subs	r2, r3, #1
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00a      	beq.n	800d96a <_tx_mutex_put+0x8e>
 800d954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d958:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d95c:	f383 8810 	msr	PRIMASK, r3
}
 800d960:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800d962:	2300      	movs	r3, #0
 800d964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d968:	e1d6      	b.n	800dd18 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800d96a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10a      	bne.n	800d986 <_tx_mutex_put+0xaa>
 800d970:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d974:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d978:	f383 8810 	msr	PRIMASK, r3
}
 800d97c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800d97e:	2300      	movs	r3, #0
 800d980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d984:	e1c8      	b.n	800dd18 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800d986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d98c:	1e5a      	subs	r2, r3, #1
 800d98e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d990:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800d994:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d996:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d104      	bne.n	800d9a8 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800d99e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800d9a6:	e019      	b.n	800d9dc <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b4:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800d9b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d9ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d9bc:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800d9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d9c4:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800d9c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d104      	bne.n	800d9dc <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800d9d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d9d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d110      	bne.n	800da06 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10c      	bne.n	800da06 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	60da      	str	r2, [r3, #12]
 800d9f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9f6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9fa:	f383 8810 	msr	PRIMASK, r3
}
 800d9fe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800da00:	2300      	movs	r3, #0
 800da02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800da06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da0a:	2b20      	cmp	r3, #32
 800da0c:	f040 8184 	bne.w	800dd18 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800da10:	2300      	movs	r3, #0
 800da12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800da16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800da1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d155      	bne.n	800dad4 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800da28:	4b5d      	ldr	r3, [pc, #372]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3301      	adds	r3, #1
 800da2e:	4a5c      	ldr	r2, [pc, #368]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da36:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da3a:	f383 8810 	msr	PRIMASK, r3
}
 800da3e:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800da40:	2320      	movs	r3, #32
 800da42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800da46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800da50:	e01f      	b.n	800da92 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800da52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da56:	691b      	ldr	r3, [r3, #16]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d10b      	bne.n	800da74 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800da5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da66:	429a      	cmp	r2, r3
 800da68:	d904      	bls.n	800da74 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800da6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800da74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800da7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800da88:	429a      	cmp	r2, r3
 800da8a:	d102      	bne.n	800da92 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800da8c:	2300      	movs	r3, #0
 800da8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800da92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1db      	bne.n	800da52 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da9a:	f3ef 8310 	mrs	r3, PRIMASK
 800da9e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800daa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800daa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800daa4:	b672      	cpsid	i
    return(int_posture);
 800daa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800daa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800daac:	4b3c      	ldr	r3, [pc, #240]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	4a3b      	ldr	r2, [pc, #236]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800dab4:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800dab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dabc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800dac0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dac8:	429a      	cmp	r2, r3
 800daca:	d203      	bcs.n	800dad4 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800dacc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	69db      	ldr	r3, [r3, #28]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d920      	bls.n	800db1e <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d11c      	bne.n	800db1e <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800dae4:	4b2e      	ldr	r3, [pc, #184]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3301      	adds	r3, #1
 800daea:	4a2d      	ldr	r2, [pc, #180]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800daec:	6013      	str	r3, [r2, #0]
 800daee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daf2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf6:	f383 8810 	msr	PRIMASK, r3
}
 800dafa:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7ff fd6f 	bl	800d5e0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db02:	f3ef 8310 	mrs	r3, PRIMASK
 800db06:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800db08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800db0a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800db0c:	b672      	cpsid	i
    return(int_posture);
 800db0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800db10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800db14:	4b22      	ldr	r3, [pc, #136]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	3b01      	subs	r3, #1
 800db1a:	4a21      	ldr	r2, [pc, #132]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800db1c:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	699b      	ldr	r3, [r3, #24]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d13e      	bne.n	800dba4 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800db26:	4b1e      	ldr	r3, [pc, #120]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3301      	adds	r3, #1
 800db2c:	4a1c      	ldr	r2, [pc, #112]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800db2e:	6013      	str	r3, [r2, #0]
 800db30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db34:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db38:	f383 8810 	msr	PRIMASK, r3
}
 800db3c:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2220      	movs	r2, #32
 800db42:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800db4e:	429a      	cmp	r2, r3
 800db50:	d006      	beq.n	800db60 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fdf2 	bl	800d744 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db60:	f3ef 8310 	mrs	r3, PRIMASK
 800db64:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800db68:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db6a:	b672      	cpsid	i
    return(int_posture);
 800db6c:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800db6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800db72:	4b0b      	ldr	r3, [pc, #44]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	3b01      	subs	r3, #1
 800db78:	4a09      	ldr	r2, [pc, #36]	; (800dba0 <_tx_mutex_put+0x2c4>)
 800db7a:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	60da      	str	r2, [r3, #12]
 800db82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db86:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8a:	f383 8810 	msr	PRIMASK, r3
}
 800db8e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800db90:	f000 fc30 	bl	800e3f4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800db94:	2300      	movs	r3, #0
 800db96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db9a:	e0bd      	b.n	800dd18 <_tx_mutex_put+0x43c>
 800db9c:	20017d10 	.word	0x20017d10
 800dba0:	20017dac 	.word	0x20017dac
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d10a      	bne.n	800dbc8 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800dbba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2220      	movs	r2, #32
 800dbc6:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800dbc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dbce:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800dbd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d10a      	bne.n	800dbec <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800dbd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	631a      	str	r2, [r3, #48]	; 0x30
 800dbea:	e016      	b.n	800dc1a <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800dbec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dbf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800dbf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfc:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800dbfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800dc06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc10:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dc18:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800dc1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc1c:	1c5a      	adds	r2, r3, #1
 800dc1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dc2e:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	69db      	ldr	r3, [r3, #28]
 800dc34:	1e5a      	subs	r2, r3, #1
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	69db      	ldr	r3, [r3, #28]
 800dc3e:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800dc40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d103      	bne.n	800dc4e <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	619a      	str	r2, [r3, #24]
 800dc4c:	e00e      	b.n	800dc6c <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800dc4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc52:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc58:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800dc5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc5e:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800dc60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc64:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800dc66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc6a:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800dc6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc6e:	2200      	movs	r2, #0
 800dc70:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800dc72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc74:	2200      	movs	r2, #0
 800dc76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800dc7a:	4b2a      	ldr	r3, [pc, #168]	; (800dd24 <_tx_mutex_put+0x448>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	4a28      	ldr	r2, [pc, #160]	; (800dd24 <_tx_mutex_put+0x448>)
 800dc82:	6013      	str	r3, [r2, #0]
 800dc84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc88:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	f383 8810 	msr	PRIMASK, r3
}
 800dc90:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d12d      	bne.n	800dcf6 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d01c      	beq.n	800dcdc <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7ff fc9c 	bl	800d5e0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dca8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcac:	61bb      	str	r3, [r7, #24]
    return(posture);
 800dcae:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800dcb0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dcb2:	b672      	cpsid	i
    return(int_posture);
 800dcb4:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800dcb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	699b      	ldr	r3, [r3, #24]
 800dcbe:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800dcc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d003      	beq.n	800dcce <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800dcc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	629a      	str	r2, [r3, #40]	; 0x28
 800dcce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcd2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	f383 8810 	msr	PRIMASK, r3
}
 800dcda:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800dcdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d005      	beq.n	800dcf6 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800dcea:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dcee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800dcf2:	f7ff fd27 	bl	800d744 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800dcf6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dcf8:	f000 fbb6 	bl	800e468 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dd02:	e009      	b.n	800dd18 <_tx_mutex_put+0x43c>
 800dd04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd08:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f383 8810 	msr	PRIMASK, r3
}
 800dd10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800dd12:	231e      	movs	r3, #30
 800dd14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800dd18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3798      	adds	r7, #152	; 0x98
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	20017dac 	.word	0x20017dac

0800dd28 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b092      	sub	sp, #72	; 0x48
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	607a      	str	r2, [r7, #4]
 800dd34:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800dd36:	2300      	movs	r3, #0
 800dd38:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800dd3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd3c:	21ef      	movs	r1, #239	; 0xef
 800dd3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dd40:	f002 f88f 	bl	800fe62 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800dd44:	22b0      	movs	r2, #176	; 0xb0
 800dd46:	2100      	movs	r1, #0
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f002 f88a 	bl	800fe62 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd64:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd6a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd70:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd7e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd84:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2220      	movs	r2, #32
 800dd8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800dd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd90:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800dd92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd94:	3b01      	subs	r3, #1
 800dd96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd98:	4413      	add	r3, r2
 800dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dda0:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dda6:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ddac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2203      	movs	r2, #3
 800ddb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	4a48      	ldr	r2, [pc, #288]	; (800dedc <_tx_thread_create+0x1b4>)
 800ddba:	655a      	str	r2, [r3, #84]	; 0x54
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800ddc2:	4947      	ldr	r1, [pc, #284]	; (800dee0 <_tx_thread_create+0x1b8>)
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f7f2 fadb 	bl	8000380 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddca:	f3ef 8310 	mrs	r3, PRIMASK
 800ddce:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ddd2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddd4:	b672      	cpsid	i
    return(int_posture);
 800ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ddd8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4a41      	ldr	r2, [pc, #260]	; (800dee4 <_tx_thread_create+0x1bc>)
 800ddde:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800dde0:	4b41      	ldr	r3, [pc, #260]	; (800dee8 <_tx_thread_create+0x1c0>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10b      	bne.n	800de00 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800dde8:	4a40      	ldr	r2, [pc, #256]	; (800deec <_tx_thread_create+0x1c4>)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ddfe:	e016      	b.n	800de2e <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800de00:	4b3a      	ldr	r3, [pc, #232]	; (800deec <_tx_thread_create+0x1c4>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800de06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de0c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800de0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800de2e:	4b2e      	ldr	r3, [pc, #184]	; (800dee8 <_tx_thread_create+0x1c0>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	3301      	adds	r3, #1
 800de34:	4a2c      	ldr	r2, [pc, #176]	; (800dee8 <_tx_thread_create+0x1c0>)
 800de36:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800de38:	4b2d      	ldr	r3, [pc, #180]	; (800def0 <_tx_thread_create+0x1c8>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3301      	adds	r3, #1
 800de3e:	4a2c      	ldr	r2, [pc, #176]	; (800def0 <_tx_thread_create+0x1c8>)
 800de40:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800de42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de44:	2b01      	cmp	r3, #1
 800de46:	d129      	bne.n	800de9c <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de48:	f3ef 8305 	mrs	r3, IPSR
 800de4c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800de4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800de50:	4b28      	ldr	r3, [pc, #160]	; (800def4 <_tx_thread_create+0x1cc>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4313      	orrs	r3, r2
 800de56:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800de5a:	d30d      	bcc.n	800de78 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800de5c:	4b26      	ldr	r3, [pc, #152]	; (800def8 <_tx_thread_create+0x1d0>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800de62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de64:	2b00      	cmp	r3, #0
 800de66:	d009      	beq.n	800de7c <_tx_thread_create+0x154>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800de68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800de6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de74:	63da      	str	r2, [r3, #60]	; 0x3c
 800de76:	e001      	b.n	800de7c <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800de78:	2300      	movs	r3, #0
 800de7a:	647b      	str	r3, [r7, #68]	; 0x44
 800de7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de80:	6a3b      	ldr	r3, [r7, #32]
 800de82:	f383 8810 	msr	PRIMASK, r3
}
 800de86:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f000 faed 	bl	800e468 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800de8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de90:	2b00      	cmp	r3, #0
 800de92:	d01e      	beq.n	800ded2 <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800de94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de98:	63da      	str	r2, [r3, #60]	; 0x3c
 800de9a:	e01a      	b.n	800ded2 <_tx_thread_create+0x1aa>
 800de9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	f383 8810 	msr	PRIMASK, r3
}
 800dea6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dea8:	f3ef 8310 	mrs	r3, PRIMASK
 800deac:	61bb      	str	r3, [r7, #24]
    return(posture);
 800deae:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800deb0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800deb2:	b672      	cpsid	i
    return(int_posture);
 800deb4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800deb6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800deb8:	4b0d      	ldr	r3, [pc, #52]	; (800def0 <_tx_thread_create+0x1c8>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	3b01      	subs	r3, #1
 800debe:	4a0c      	ldr	r2, [pc, #48]	; (800def0 <_tx_thread_create+0x1c8>)
 800dec0:	6013      	str	r3, [r2, #0]
 800dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	f383 8810 	msr	PRIMASK, r3
}
 800decc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800dece:	f000 fa91 	bl	800e3f4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ded2:	2300      	movs	r3, #0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3748      	adds	r7, #72	; 0x48
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	0800ea55 	.word	0x0800ea55
 800dee0:	0800e25d 	.word	0x0800e25d
 800dee4:	54485244 	.word	0x54485244
 800dee8:	20017d1c 	.word	0x20017d1c
 800deec:	20017d18 	.word	0x20017d18
 800def0:	20017dac 	.word	0x20017dac
 800def4:	2000008c 	.word	0x2000008c
 800def8:	20017d14 	.word	0x20017d14

0800defc <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 800defc:	b480      	push	{r7}
 800defe:	b08b      	sub	sp, #44	; 0x2c
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800df04:	2300      	movs	r3, #0
 800df06:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df08:	f3ef 8310 	mrs	r3, PRIMASK
 800df0c:	617b      	str	r3, [r7, #20]
    return(posture);
 800df0e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800df10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df12:	b672      	cpsid	i
    return(int_posture);
 800df14:	693b      	ldr	r3, [r7, #16]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 800df16:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d00b      	beq.n	800df38 <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df24:	2b02      	cmp	r3, #2
 800df26:	d007      	beq.n	800df38 <_tx_thread_delete+0x3c>
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f383 8810 	msr	PRIMASK, r3
}
 800df32:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 800df34:	2311      	movs	r3, #17
 800df36:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d12d      	bne.n	800df9a <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 800df44:	4b18      	ldr	r3, [pc, #96]	; (800dfa8 <_tx_thread_delete+0xac>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3b01      	subs	r3, #1
 800df4a:	4a17      	ldr	r2, [pc, #92]	; (800dfa8 <_tx_thread_delete+0xac>)
 800df4c:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 800df4e:	4b16      	ldr	r3, [pc, #88]	; (800dfa8 <_tx_thread_delete+0xac>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d103      	bne.n	800df5e <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 800df56:	4b15      	ldr	r3, [pc, #84]	; (800dfac <_tx_thread_delete+0xb0>)
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	e017      	b.n	800df8e <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df64:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df6c:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	69ba      	ldr	r2, [r7, #24]
 800df72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	69fa      	ldr	r2, [r7, #28]
 800df7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 800df7e:	4b0b      	ldr	r3, [pc, #44]	; (800dfac <_tx_thread_delete+0xb0>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	429a      	cmp	r2, r3
 800df86:	d102      	bne.n	800df8e <_tx_thread_delete+0x92>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 800df88:	4a08      	ldr	r2, [pc, #32]	; (800dfac <_tx_thread_delete+0xb0>)
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f383 8810 	msr	PRIMASK, r3
}
 800df98:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	372c      	adds	r7, #44	; 0x2c
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	20017d1c 	.word	0x20017d1c
 800dfac:	20017d18 	.word	0x20017d18

0800dfb0 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfb6:	f3ef 8310 	mrs	r3, PRIMASK
 800dfba:	60bb      	str	r3, [r7, #8]
    return(posture);
 800dfbc:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800dfbe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dfc0:	b672      	cpsid	i
    return(int_posture);
 800dfc2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800dfc4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800dfc6:	4b08      	ldr	r3, [pc, #32]	; (800dfe8 <_tx_thread_identify+0x38>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	613b      	str	r3, [r7, #16]
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f383 8810 	msr	PRIMASK, r3
}
 800dfd6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800dfd8:	693b      	ldr	r3, [r7, #16]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	371c      	adds	r7, #28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	20017d10 	.word	0x20017d10

0800dfec <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800dff0:	4b13      	ldr	r3, [pc, #76]	; (800e040 <_tx_thread_initialize+0x54>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800dff6:	4b13      	ldr	r3, [pc, #76]	; (800e044 <_tx_thread_initialize+0x58>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]
 800dffc:	4b12      	ldr	r3, [pc, #72]	; (800e048 <_tx_thread_initialize+0x5c>)
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]
 800e002:	4b12      	ldr	r3, [pc, #72]	; (800e04c <_tx_thread_initialize+0x60>)
 800e004:	2200      	movs	r2, #0
 800e006:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800e008:	4b11      	ldr	r3, [pc, #68]	; (800e050 <_tx_thread_initialize+0x64>)
 800e00a:	2220      	movs	r2, #32
 800e00c:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800e00e:	2280      	movs	r2, #128	; 0x80
 800e010:	2100      	movs	r1, #0
 800e012:	4810      	ldr	r0, [pc, #64]	; (800e054 <_tx_thread_initialize+0x68>)
 800e014:	f001 ff25 	bl	800fe62 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800e018:	4b0f      	ldr	r3, [pc, #60]	; (800e058 <_tx_thread_initialize+0x6c>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800e01e:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <_tx_thread_initialize+0x70>)
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800e024:	4b0e      	ldr	r3, [pc, #56]	; (800e060 <_tx_thread_initialize+0x74>)
 800e026:	2200      	movs	r2, #0
 800e028:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800e02a:	4b0e      	ldr	r3, [pc, #56]	; (800e064 <_tx_thread_initialize+0x78>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800e030:	4b0d      	ldr	r3, [pc, #52]	; (800e068 <_tx_thread_initialize+0x7c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f043 7381 	orr.w	r3, r3, #16908288	; 0x1020000
    _tx_build_options =  _tx_build_options 
 800e038:	4a0b      	ldr	r2, [pc, #44]	; (800e068 <_tx_thread_initialize+0x7c>)
 800e03a:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800e03c:	bf00      	nop
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	20017d10 	.word	0x20017d10
 800e044:	20017d14 	.word	0x20017d14
 800e048:	20017d20 	.word	0x20017d20
 800e04c:	20017d24 	.word	0x20017d24
 800e050:	20017d28 	.word	0x20017d28
 800e054:	20017d2c 	.word	0x20017d2c
 800e058:	20017d18 	.word	0x20017d18
 800e05c:	20017d1c 	.word	0x20017d1c
 800e060:	20017dac 	.word	0x20017dac
 800e064:	20017db0 	.word	0x20017db0
 800e068:	20017db4 	.word	0x20017db4

0800e06c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08e      	sub	sp, #56	; 0x38
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e078:	2300      	movs	r3, #0
 800e07a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e07c:	f3ef 8310 	mrs	r3, PRIMASK
 800e080:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e084:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e086:	b672      	cpsid	i
    return(int_posture);
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800e08a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	429a      	cmp	r2, r3
 800e096:	d902      	bls.n	800e09e <_tx_thread_preemption_change+0x32>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 800e098:	2318      	movs	r3, #24
 800e09a:	633b      	str	r3, [r7, #48]	; 0x30
 800e09c:	e06b      	b.n	800e176 <_tx_thread_preemption_change+0x10a>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d114      	bne.n	800e0d4 <_tx_thread_preemption_change+0x68>
        {

            /* Determine if this thread is at the head of the list.  */
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ae:	4a37      	ldr	r2, [pc, #220]	; (800e18c <_tx_thread_preemption_change+0x120>)
 800e0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d10c      	bne.n	800e0d4 <_tx_thread_preemption_change+0x68>
                map_index =  (thread_ptr -> tx_thread_priority)/((UINT) 32);
#endif

                /* Yes, this thread is at the front of the list.  Make sure
                   the preempted bit is cleared for this thread.  */
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0be:	2201      	movs	r2, #1
 800e0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800e0c6:	4b32      	ldr	r3, [pc, #200]	; (800e190 <_tx_thread_preemption_change+0x124>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	43db      	mvns	r3, r3
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	4a2f      	ldr	r2, [pc, #188]	; (800e190 <_tx_thread_preemption_change+0x124>)
 800e0d2:	6013      	str	r3, [r2, #0]
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d203      	bcs.n	800e0fa <_tx_thread_preemption_change+0x8e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	68ba      	ldr	r2, [r7, #8]
 800e0f6:	63da      	str	r2, [r3, #60]	; 0x3c
 800e0f8:	e004      	b.n	800e104 <_tx_thread_preemption_change+0x98>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e108:	4b22      	ldr	r3, [pc, #136]	; (800e194 <_tx_thread_preemption_change+0x128>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d932      	bls.n	800e176 <_tx_thread_preemption_change+0x10a>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800e110:	4b20      	ldr	r3, [pc, #128]	; (800e194 <_tx_thread_preemption_change+0x128>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	68ba      	ldr	r2, [r7, #8]
 800e116:	429a      	cmp	r2, r3
 800e118:	d92d      	bls.n	800e176 <_tx_thread_preemption_change+0x10a>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 800e11a:	4b1f      	ldr	r3, [pc, #124]	; (800e198 <_tx_thread_preemption_change+0x12c>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	429a      	cmp	r2, r3
 800e122:	d128      	bne.n	800e176 <_tx_thread_preemption_change+0x10a>
                    /* Preemption needs to take place.  */

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                    /* Determine if this thread has preemption threshold set.  */
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d00b      	beq.n	800e148 <_tx_thread_preemption_change+0xdc>
                        TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                        _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                        /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e134:	2201      	movs	r2, #1
 800e136:	fa02 f303 	lsl.w	r3, r2, r3
 800e13a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800e13c:	4b14      	ldr	r3, [pc, #80]	; (800e190 <_tx_thread_preemption_change+0x124>)
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e142:	4313      	orrs	r3, r2
 800e144:	4a12      	ldr	r2, [pc, #72]	; (800e190 <_tx_thread_preemption_change+0x124>)
 800e146:	6013      	str	r3, [r2, #0]
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800e148:	4b12      	ldr	r3, [pc, #72]	; (800e194 <_tx_thread_preemption_change+0x128>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a0f      	ldr	r2, [pc, #60]	; (800e18c <_tx_thread_preemption_change+0x120>)
 800e14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e152:	4a11      	ldr	r2, [pc, #68]	; (800e198 <_tx_thread_preemption_change+0x12c>)
 800e154:	6013      	str	r3, [r2, #0]
 800e156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e158:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	f383 8810 	msr	PRIMASK, r3
}
 800e160:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 800e162:	f000 f947 	bl	800e3f4 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e166:	f3ef 8310 	mrs	r3, PRIMASK
 800e16a:	623b      	str	r3, [r7, #32]
    return(posture);
 800e16c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e16e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e170:	b672      	cpsid	i
    return(int_posture);
 800e172:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800e174:	637b      	str	r3, [r7, #52]	; 0x34
 800e176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e178:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f383 8810 	msr	PRIMASK, r3
}
 800e180:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800e182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800e184:	4618      	mov	r0, r3
 800e186:	3738      	adds	r7, #56	; 0x38
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	20017d2c 	.word	0x20017d2c
 800e190:	20017d24 	.word	0x20017d24
 800e194:	20017d28 	.word	0x20017d28
 800e198:	20017d14 	.word	0x20017d14

0800e19c <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08c      	sub	sp, #48	; 0x30
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1ac:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e1ae:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e1b0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1b2:	b672      	cpsid	i
    return(int_posture);
 800e1b4:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800e1b6:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d12f      	bne.n	800e220 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e1c0:	f3ef 8305 	mrs	r3, IPSR
 800e1c4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e1c6:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800e1c8:	4b21      	ldr	r3, [pc, #132]	; (800e250 <_tx_thread_resume+0xb4>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e1d2:	d30d      	bcc.n	800e1f0 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800e1d4:	4b1f      	ldr	r3, [pc, #124]	; (800e254 <_tx_thread_resume+0xb8>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d009      	beq.n	800e1f4 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1e4:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	63da      	str	r2, [r3, #60]	; 0x3c
 800e1ee:	e001      	b.n	800e1f4 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800e1f4:	4b18      	ldr	r3, [pc, #96]	; (800e258 <_tx_thread_resume+0xbc>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	4a17      	ldr	r2, [pc, #92]	; (800e258 <_tx_thread_resume+0xbc>)
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	6a3b      	ldr	r3, [r7, #32]
 800e200:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	f383 8810 	msr	PRIMASK, r3
}
 800e208:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f92c 	bl	800e468 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e21a:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800e21c:	2300      	movs	r3, #0
 800e21e:	e012      	b.n	800e246 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e224:	2b01      	cmp	r3, #1
 800e226:	d105      	bne.n	800e234 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800e22e:	2319      	movs	r3, #25
 800e230:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e232:	e001      	b.n	800e238 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800e234:	2312      	movs	r3, #18
 800e236:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f383 8810 	msr	PRIMASK, r3
}
 800e242:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e246:	4618      	mov	r0, r3
 800e248:	3730      	adds	r7, #48	; 0x30
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	2000008c 	.word	0x2000008c
 800e254:	20017d14 	.word	0x20017d14
 800e258:	20017dac 	.word	0x20017dac

0800e25c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e262:	4b21      	ldr	r3, [pc, #132]	; (800e2e8 <_tx_thread_shell_entry+0x8c>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e26c:	69fa      	ldr	r2, [r7, #28]
 800e26e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e270:	4610      	mov	r0, r2
 800e272:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800e274:	4b1d      	ldr	r3, [pc, #116]	; (800e2ec <_tx_thread_shell_entry+0x90>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d003      	beq.n	800e284 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800e27c:	4b1b      	ldr	r3, [pc, #108]	; (800e2ec <_tx_thread_shell_entry+0x90>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	69f8      	ldr	r0, [r7, #28]
 800e282:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e284:	f3ef 8310 	mrs	r3, PRIMASK
 800e288:	607b      	str	r3, [r7, #4]
    return(posture);
 800e28a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800e28c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e28e:	b672      	cpsid	i
    return(int_posture);
 800e290:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800e292:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	2201      	movs	r2, #1
 800e298:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	2201      	movs	r2, #1
 800e29e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800e2a6:	4b12      	ldr	r3, [pc, #72]	; (800e2f0 <_tx_thread_shell_entry+0x94>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	4a10      	ldr	r2, [pc, #64]	; (800e2f0 <_tx_thread_shell_entry+0x94>)
 800e2ae:	6013      	str	r3, [r2, #0]
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	f383 8810 	msr	PRIMASK, r3
}
 800e2ba:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800e2bc:	f3ef 8314 	mrs	r3, CONTROL
 800e2c0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800e2c2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800e2c4:	617b      	str	r3, [r7, #20]
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	f023 0304 	bic.w	r3, r3, #4
 800e2cc:	617b      	str	r3, [r7, #20]
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	f383 8814 	msr	CONTROL, r3
}
 800e2d8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800e2da:	69f8      	ldr	r0, [r7, #28]
 800e2dc:	f000 f9d8 	bl	800e690 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800e2e0:	bf00      	nop
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20017d10 	.word	0x20017d10
 800e2ec:	20017db0 	.word	0x20017db0
 800e2f0:	20017dac 	.word	0x20017dac

0800e2f4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b08e      	sub	sp, #56	; 0x38
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2fc:	f3ef 8310 	mrs	r3, PRIMASK
 800e300:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e304:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e306:	b672      	cpsid	i
    return(int_posture);
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800e30a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e30c:	4b35      	ldr	r3, [pc, #212]	; (800e3e4 <_tx_thread_sleep+0xf0>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800e312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e314:	2b00      	cmp	r3, #0
 800e316:	d108      	bne.n	800e32a <_tx_thread_sleep+0x36>
 800e318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e31c:	6a3b      	ldr	r3, [r7, #32]
 800e31e:	f383 8810 	msr	PRIMASK, r3
}
 800e322:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800e324:	2313      	movs	r3, #19
 800e326:	637b      	str	r3, [r7, #52]	; 0x34
 800e328:	e056      	b.n	800e3d8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e32a:	f3ef 8305 	mrs	r3, IPSR
 800e32e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800e330:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e332:	4b2d      	ldr	r3, [pc, #180]	; (800e3e8 <_tx_thread_sleep+0xf4>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4313      	orrs	r3, r2
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d008      	beq.n	800e34e <_tx_thread_sleep+0x5a>
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	f383 8810 	msr	PRIMASK, r3
}
 800e346:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800e348:	2313      	movs	r3, #19
 800e34a:	637b      	str	r3, [r7, #52]	; 0x34
 800e34c:	e044      	b.n	800e3d8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800e34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e350:	4a26      	ldr	r2, [pc, #152]	; (800e3ec <_tx_thread_sleep+0xf8>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d108      	bne.n	800e368 <_tx_thread_sleep+0x74>
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f383 8810 	msr	PRIMASK, r3
}
 800e360:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800e362:	2313      	movs	r3, #19
 800e364:	637b      	str	r3, [r7, #52]	; 0x34
 800e366:	e037      	b.n	800e3d8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d108      	bne.n	800e380 <_tx_thread_sleep+0x8c>
 800e36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e370:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	f383 8810 	msr	PRIMASK, r3
}
 800e378:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800e37a:	2300      	movs	r3, #0
 800e37c:	637b      	str	r3, [r7, #52]	; 0x34
 800e37e:	e02b      	b.n	800e3d8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800e380:	4b1b      	ldr	r3, [pc, #108]	; (800e3f0 <_tx_thread_sleep+0xfc>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d008      	beq.n	800e39a <_tx_thread_sleep+0xa6>
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f383 8810 	msr	PRIMASK, r3
}
 800e392:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800e394:	2313      	movs	r3, #19
 800e396:	637b      	str	r3, [r7, #52]	; 0x34
 800e398:	e01e      	b.n	800e3d8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	2204      	movs	r2, #4
 800e39e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800e3b4:	4b0e      	ldr	r3, [pc, #56]	; (800e3f0 <_tx_thread_sleep+0xfc>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	4a0d      	ldr	r2, [pc, #52]	; (800e3f0 <_tx_thread_sleep+0xfc>)
 800e3bc:	6013      	str	r3, [r2, #0]
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	f383 8810 	msr	PRIMASK, r3
}
 800e3c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800e3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3cc:	f000 f960 	bl	800e690 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800e3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3738      	adds	r7, #56	; 0x38
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	20017d10 	.word	0x20017d10
 800e3e8:	2000008c 	.word	0x2000008c
 800e3ec:	20017e5c 	.word	0x20017e5c
 800e3f0:	20017dac 	.word	0x20017dac

0800e3f4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b089      	sub	sp, #36	; 0x24
 800e3f8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e3fa:	4b17      	ldr	r3, [pc, #92]	; (800e458 <_tx_thread_system_preempt_check+0x64>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d121      	bne.n	800e44a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800e406:	4b15      	ldr	r3, [pc, #84]	; (800e45c <_tx_thread_system_preempt_check+0x68>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800e40c:	4b14      	ldr	r3, [pc, #80]	; (800e460 <_tx_thread_system_preempt_check+0x6c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800e412:	69ba      	ldr	r2, [r7, #24]
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	429a      	cmp	r2, r3
 800e418:	d017      	beq.n	800e44a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e41a:	4b12      	ldr	r3, [pc, #72]	; (800e464 <_tx_thread_system_preempt_check+0x70>)
 800e41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e420:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e422:	f3ef 8305 	mrs	r3, IPSR
 800e426:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e428:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d10c      	bne.n	800e448 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e42e:	f3ef 8310 	mrs	r3, PRIMASK
 800e432:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e434:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800e436:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e438:	b662      	cpsie	i
}
 800e43a:	bf00      	nop
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f383 8810 	msr	PRIMASK, r3
}
 800e446:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800e448:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800e44a:	bf00      	nop
 800e44c:	3724      	adds	r7, #36	; 0x24
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	20017dac 	.word	0x20017dac
 800e45c:	20017d10 	.word	0x20017d10
 800e460:	20017d14 	.word	0x20017d14
 800e464:	e000ed04 	.word	0xe000ed04

0800e468 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b096      	sub	sp, #88	; 0x58
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e470:	f3ef 8310 	mrs	r3, PRIMASK
 800e474:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800e476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800e478:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800e47a:	b672      	cpsid	i
    return(int_posture);
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800e47e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e484:	2b00      	cmp	r3, #0
 800e486:	d005      	beq.n	800e494 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	334c      	adds	r3, #76	; 0x4c
 800e48c:	4618      	mov	r0, r3
 800e48e:	f000 fcf5 	bl	800ee7c <_tx_timer_system_deactivate>
 800e492:	e002      	b.n	800e49a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800e49a:	4b75      	ldr	r3, [pc, #468]	; (800e670 <_tx_thread_system_resume+0x208>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	4a73      	ldr	r2, [pc, #460]	; (800e670 <_tx_thread_system_resume+0x208>)
 800e4a2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f040 8096 	bne.w	800e5da <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f000 80aa 	beq.w	800e60c <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f040 8085 	bne.w	800e5cc <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4cc:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800e4ce:	4a69      	ldr	r2, [pc, #420]	; (800e674 <_tx_thread_system_resume+0x20c>)
 800e4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800e4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d166      	bne.n	800e5ac <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800e4de:	4965      	ldr	r1, [pc, #404]	; (800e674 <_tx_thread_system_resume+0x20c>)
 800e4e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4fc:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800e4fe:	4b5e      	ldr	r3, [pc, #376]	; (800e678 <_tx_thread_system_resume+0x210>)
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e504:	4313      	orrs	r3, r2
 800e506:	4a5c      	ldr	r2, [pc, #368]	; (800e678 <_tx_thread_system_resume+0x210>)
 800e508:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800e50a:	4b5c      	ldr	r3, [pc, #368]	; (800e67c <_tx_thread_system_resume+0x214>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e510:	429a      	cmp	r2, r3
 800e512:	d27b      	bcs.n	800e60c <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800e514:	4a59      	ldr	r2, [pc, #356]	; (800e67c <_tx_thread_system_resume+0x214>)
 800e516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e518:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800e51a:	4b59      	ldr	r3, [pc, #356]	; (800e680 <_tx_thread_system_resume+0x218>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800e520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e522:	2b00      	cmp	r3, #0
 800e524:	d103      	bne.n	800e52e <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800e526:	4a56      	ldr	r2, [pc, #344]	; (800e680 <_tx_thread_system_resume+0x218>)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6013      	str	r3, [r2, #0]
 800e52c:	e06e      	b.n	800e60c <_tx_thread_system_resume+0x1a4>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800e52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e534:	429a      	cmp	r2, r3
 800e536:	d269      	bcs.n	800e60c <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 800e538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e540:	429a      	cmp	r2, r3
 800e542:	d00b      	beq.n	800e55c <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 800e544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e548:	2201      	movs	r2, #1
 800e54a:	fa02 f303 	lsl.w	r3, r2, r3
 800e54e:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800e550:	4b4c      	ldr	r3, [pc, #304]	; (800e684 <_tx_thread_system_resume+0x21c>)
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e556:	4313      	orrs	r3, r2
 800e558:	4a4a      	ldr	r2, [pc, #296]	; (800e684 <_tx_thread_system_resume+0x21c>)
 800e55a:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800e55c:	4a48      	ldr	r2, [pc, #288]	; (800e680 <_tx_thread_system_resume+0x218>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e564:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	f383 8810 	msr	PRIMASK, r3
}
 800e56c:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e56e:	4b40      	ldr	r3, [pc, #256]	; (800e670 <_tx_thread_system_resume+0x208>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800e574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e576:	2b00      	cmp	r3, #0
 800e578:	d174      	bne.n	800e664 <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e57a:	4b43      	ldr	r3, [pc, #268]	; (800e688 <_tx_thread_system_resume+0x220>)
 800e57c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e580:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e582:	f3ef 8305 	mrs	r3, IPSR
 800e586:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10c      	bne.n	800e5a8 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e58e:	f3ef 8310 	mrs	r3, PRIMASK
 800e592:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800e596:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e598:	b662      	cpsie	i
}
 800e59a:	bf00      	nop
 800e59c:	6a3b      	ldr	r3, [r7, #32]
 800e59e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	f383 8810 	msr	PRIMASK, r3
}
 800e5a6:	bf00      	nop
}
 800e5a8:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800e5aa:	e05b      	b.n	800e664 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800e5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b0:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800e5b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800e5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5c2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5c8:	621a      	str	r2, [r3, #32]
 800e5ca:	e01f      	b.n	800e60c <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2203      	movs	r2, #3
 800e5d6:	631a      	str	r2, [r3, #48]	; 0x30
 800e5d8:	e018      	b.n	800e60c <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d014      	beq.n	800e60c <_tx_thread_system_resume+0x1a4>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e6:	2b02      	cmp	r3, #2
 800e5e8:	d010      	beq.n	800e60c <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d106      	bne.n	800e600 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	631a      	str	r2, [r3, #48]	; 0x30
 800e5fe:	e005      	b.n	800e60c <_tx_thread_system_resume+0x1a4>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2203      	movs	r2, #3
 800e60a:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e60c:	4b1f      	ldr	r3, [pc, #124]	; (800e68c <_tx_thread_system_resume+0x224>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	63bb      	str	r3, [r7, #56]	; 0x38
 800e612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e614:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	f383 8810 	msr	PRIMASK, r3
}
 800e61c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800e61e:	4b18      	ldr	r3, [pc, #96]	; (800e680 <_tx_thread_system_resume+0x218>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e624:	429a      	cmp	r2, r3
 800e626:	d020      	beq.n	800e66a <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e628:	4b11      	ldr	r3, [pc, #68]	; (800e670 <_tx_thread_system_resume+0x208>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800e62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e630:	2b00      	cmp	r3, #0
 800e632:	d11a      	bne.n	800e66a <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e634:	4b14      	ldr	r3, [pc, #80]	; (800e688 <_tx_thread_system_resume+0x220>)
 800e636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e63a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e63c:	f3ef 8305 	mrs	r3, IPSR
 800e640:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e642:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10f      	bne.n	800e668 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e648:	f3ef 8310 	mrs	r3, PRIMASK
 800e64c:	613b      	str	r3, [r7, #16]
    return(posture);
 800e64e:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800e650:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e652:	b662      	cpsie	i
}
 800e654:	bf00      	nop
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	f383 8810 	msr	PRIMASK, r3
}
 800e660:	bf00      	nop
}
 800e662:	e001      	b.n	800e668 <_tx_thread_system_resume+0x200>
                                return;
 800e664:	bf00      	nop
 800e666:	e000      	b.n	800e66a <_tx_thread_system_resume+0x202>
 800e668:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800e66a:	3758      	adds	r7, #88	; 0x58
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	20017dac 	.word	0x20017dac
 800e674:	20017d2c 	.word	0x20017d2c
 800e678:	20017d20 	.word	0x20017d20
 800e67c:	20017d28 	.word	0x20017d28
 800e680:	20017d14 	.word	0x20017d14
 800e684:	20017d24 	.word	0x20017d24
 800e688:	e000ed04 	.word	0xe000ed04
 800e68c:	20017d10 	.word	0x20017d10

0800e690 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b0a0      	sub	sp, #128	; 0x80
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e698:	4b5a      	ldr	r3, [pc, #360]	; (800e804 <_tx_thread_system_suspend+0x174>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e69e:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a2:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 800e6a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 800e6a6:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6a8:	b672      	cpsid	i
    return(int_posture);
 800e6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800e6ac:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d112      	bne.n	800e6dc <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ba:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800e6bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d008      	beq.n	800e6d4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800e6c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6c8:	d004      	beq.n	800e6d4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	334c      	adds	r3, #76	; 0x4c
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f000 fb72 	bl	800edb8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	69db      	ldr	r3, [r3, #28]
 800e6d8:	4a4b      	ldr	r2, [pc, #300]	; (800e808 <_tx_thread_system_suspend+0x178>)
 800e6da:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800e6dc:	4b4b      	ldr	r3, [pc, #300]	; (800e80c <_tx_thread_system_suspend+0x17c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	4a4a      	ldr	r2, [pc, #296]	; (800e80c <_tx_thread_system_suspend+0x17c>)
 800e6e4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	f040 8122 	bne.w	800e934 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a1b      	ldr	r3, [r3, #32]
 800e700:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800e702:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	429a      	cmp	r2, r3
 800e708:	d027      	beq.n	800e75a <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800e710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e714:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800e716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e71a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800e71c:	4a3c      	ldr	r2, [pc, #240]	; (800e810 <_tx_thread_system_suspend+0x180>)
 800e71e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	429a      	cmp	r2, r3
 800e728:	f040 808b 	bne.w	800e842 <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800e72c:	4938      	ldr	r1, [pc, #224]	; (800e810 <_tx_thread_system_suspend+0x180>)
 800e72e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e730:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800e736:	4b37      	ldr	r3, [pc, #220]	; (800e814 <_tx_thread_system_suspend+0x184>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	f000 8081 	beq.w	800e842 <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e740:	2201      	movs	r2, #1
 800e742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e744:	fa02 f303 	lsl.w	r3, r2, r3
 800e748:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800e74a:	4b32      	ldr	r3, [pc, #200]	; (800e814 <_tx_thread_system_suspend+0x184>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e750:	43db      	mvns	r3, r3
 800e752:	4013      	ands	r3, r2
 800e754:	4a2f      	ldr	r2, [pc, #188]	; (800e814 <_tx_thread_system_suspend+0x184>)
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	e073      	b.n	800e842 <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800e75a:	4a2d      	ldr	r2, [pc, #180]	; (800e810 <_tx_thread_system_suspend+0x180>)
 800e75c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e75e:	2100      	movs	r1, #0
 800e760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800e764:	2201      	movs	r2, #1
 800e766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e768:	fa02 f303 	lsl.w	r3, r2, r3
 800e76c:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800e76e:	4b2a      	ldr	r3, [pc, #168]	; (800e818 <_tx_thread_system_suspend+0x188>)
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e774:	43db      	mvns	r3, r3
 800e776:	4013      	ands	r3, r2
 800e778:	4a27      	ldr	r2, [pc, #156]	; (800e818 <_tx_thread_system_suspend+0x188>)
 800e77a:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800e77c:	4b25      	ldr	r3, [pc, #148]	; (800e814 <_tx_thread_system_suspend+0x184>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00b      	beq.n	800e79c <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 800e784:	2201      	movs	r2, #1
 800e786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e788:	fa02 f303 	lsl.w	r3, r2, r3
 800e78c:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800e78e:	4b21      	ldr	r3, [pc, #132]	; (800e814 <_tx_thread_system_suspend+0x184>)
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e794:	43db      	mvns	r3, r3
 800e796:	4013      	ands	r3, r2
 800e798:	4a1e      	ldr	r2, [pc, #120]	; (800e814 <_tx_thread_system_suspend+0x184>)
 800e79a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800e79c:	2300      	movs	r3, #0
 800e79e:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800e7a0:	4b1d      	ldr	r3, [pc, #116]	; (800e818 <_tx_thread_system_suspend+0x188>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800e7a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d13d      	bne.n	800e828 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800e7ac:	4b1b      	ldr	r3, [pc, #108]	; (800e81c <_tx_thread_system_suspend+0x18c>)
 800e7ae:	2220      	movs	r2, #32
 800e7b0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800e7b2:	4b1b      	ldr	r3, [pc, #108]	; (800e820 <_tx_thread_system_suspend+0x190>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	601a      	str	r2, [r3, #0]
 800e7b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7be:	f383 8810 	msr	PRIMASK, r3
}
 800e7c2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e7c4:	4b11      	ldr	r3, [pc, #68]	; (800e80c <_tx_thread_system_suspend+0x17c>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 800e7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f040 80db 	bne.w	800e988 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e7d2:	4b14      	ldr	r3, [pc, #80]	; (800e824 <_tx_thread_system_suspend+0x194>)
 800e7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7da:	f3ef 8305 	mrs	r3, IPSR
 800e7de:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800e7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10c      	bne.n	800e800 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ea:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 800e7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 800e7ee:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e7f0:	b662      	cpsie	i
}
 800e7f2:	bf00      	nop
 800e7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fa:	f383 8810 	msr	PRIMASK, r3
}
 800e7fe:	bf00      	nop
}
 800e800:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800e802:	e0c1      	b.n	800e988 <_tx_thread_system_suspend+0x2f8>
 800e804:	20017d10 	.word	0x20017d10
 800e808:	20018318 	.word	0x20018318
 800e80c:	20017dac 	.word	0x20017dac
 800e810:	20017d2c 	.word	0x20017d2c
 800e814:	20017d24 	.word	0x20017d24
 800e818:	20017d20 	.word	0x20017d20
 800e81c:	20017d28 	.word	0x20017d28
 800e820:	20017d14 	.word	0x20017d14
 800e824:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800e828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e82a:	fa93 f3a3 	rbit	r3, r3
 800e82e:	663b      	str	r3, [r7, #96]	; 0x60
 800e830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e832:	fab3 f383 	clz	r3, r3
 800e836:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800e838:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e83a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e83c:	4413      	add	r3, r2
 800e83e:	4a56      	ldr	r2, [pc, #344]	; (800e998 <_tx_thread_system_suspend+0x308>)
 800e840:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800e842:	4b56      	ldr	r3, [pc, #344]	; (800e99c <_tx_thread_system_suspend+0x30c>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d173      	bne.n	800e934 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800e84c:	4b52      	ldr	r3, [pc, #328]	; (800e998 <_tx_thread_system_suspend+0x308>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a53      	ldr	r2, [pc, #332]	; (800e9a0 <_tx_thread_system_suspend+0x310>)
 800e852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e856:	4a51      	ldr	r2, [pc, #324]	; (800e99c <_tx_thread_system_suspend+0x30c>)
 800e858:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800e85a:	4b52      	ldr	r3, [pc, #328]	; (800e9a4 <_tx_thread_system_suspend+0x314>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d043      	beq.n	800e8ea <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800e862:	4b51      	ldr	r3, [pc, #324]	; (800e9a8 <_tx_thread_system_suspend+0x318>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	3301      	adds	r3, #1
 800e868:	4a4f      	ldr	r2, [pc, #316]	; (800e9a8 <_tx_thread_system_suspend+0x318>)
 800e86a:	6013      	str	r3, [r2, #0]
 800e86c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e86e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e872:	f383 8810 	msr	PRIMASK, r3
}
 800e876:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e878:	f3ef 8310 	mrs	r3, PRIMASK
 800e87c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e880:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e882:	b672      	cpsid	i
    return(int_posture);
 800e884:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 800e886:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800e888:	4b47      	ldr	r3, [pc, #284]	; (800e9a8 <_tx_thread_system_suspend+0x318>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	3b01      	subs	r3, #1
 800e88e:	4a46      	ldr	r2, [pc, #280]	; (800e9a8 <_tx_thread_system_suspend+0x318>)
 800e890:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 800e892:	2300      	movs	r3, #0
 800e894:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 800e896:	4b43      	ldr	r3, [pc, #268]	; (800e9a4 <_tx_thread_system_suspend+0x314>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800e89c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e89e:	fa93 f3a3 	rbit	r3, r3
 800e8a2:	663b      	str	r3, [r7, #96]	; 0x60
 800e8a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8a6:	fab3 f383 	clz	r3, r3
 800e8aa:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 800e8ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8b0:	4413      	add	r3, r2
 800e8b2:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 800e8b4:	4a3a      	ldr	r2, [pc, #232]	; (800e9a0 <_tx_thread_system_suspend+0x310>)
 800e8b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8be:	4b36      	ldr	r3, [pc, #216]	; (800e998 <_tx_thread_system_suspend+0x308>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d811      	bhi.n	800e8ea <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 800e8c6:	4a36      	ldr	r2, [pc, #216]	; (800e9a0 <_tx_thread_system_suspend+0x310>)
 800e8c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ce:	4a33      	ldr	r2, [pc, #204]	; (800e99c <_tx_thread_system_suspend+0x30c>)
 800e8d0:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8da:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800e8dc:	4b31      	ldr	r3, [pc, #196]	; (800e9a4 <_tx_thread_system_suspend+0x314>)
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8e2:	43db      	mvns	r3, r3
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	4a2f      	ldr	r2, [pc, #188]	; (800e9a4 <_tx_thread_system_suspend+0x314>)
 800e8e8:	6013      	str	r3, [r2, #0]
 800e8ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f0:	f383 8810 	msr	PRIMASK, r3
}
 800e8f4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e8f6:	4b2c      	ldr	r3, [pc, #176]	; (800e9a8 <_tx_thread_system_suspend+0x318>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 800e8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d144      	bne.n	800e98c <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e902:	4b2a      	ldr	r3, [pc, #168]	; (800e9ac <_tx_thread_system_suspend+0x31c>)
 800e904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e908:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e90a:	f3ef 8305 	mrs	r3, IPSR
 800e90e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10c      	bne.n	800e930 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e916:	f3ef 8310 	mrs	r3, PRIMASK
 800e91a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800e91e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e920:	b662      	cpsie	i
}
 800e922:	bf00      	nop
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	f383 8810 	msr	PRIMASK, r3
}
 800e92e:	bf00      	nop
}
 800e930:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800e932:	e02b      	b.n	800e98c <_tx_thread_system_suspend+0x2fc>
 800e934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e936:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	f383 8810 	msr	PRIMASK, r3
}
 800e93e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800e940:	4b16      	ldr	r3, [pc, #88]	; (800e99c <_tx_thread_system_suspend+0x30c>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e946:	429a      	cmp	r2, r3
 800e948:	d022      	beq.n	800e990 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e94a:	4b17      	ldr	r3, [pc, #92]	; (800e9a8 <_tx_thread_system_suspend+0x318>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 800e950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e952:	2b00      	cmp	r3, #0
 800e954:	d11c      	bne.n	800e990 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e956:	4b15      	ldr	r3, [pc, #84]	; (800e9ac <_tx_thread_system_suspend+0x31c>)
 800e958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e95c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e95e:	f3ef 8305 	mrs	r3, IPSR
 800e962:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e964:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10c      	bne.n	800e984 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e96a:	f3ef 8310 	mrs	r3, PRIMASK
 800e96e:	613b      	str	r3, [r7, #16]
    return(posture);
 800e970:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800e972:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e974:	b662      	cpsie	i
}
 800e976:	bf00      	nop
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	f383 8810 	msr	PRIMASK, r3
}
 800e982:	bf00      	nop
}
 800e984:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800e986:	e003      	b.n	800e990 <_tx_thread_system_suspend+0x300>
                return;
 800e988:	bf00      	nop
 800e98a:	e002      	b.n	800e992 <_tx_thread_system_suspend+0x302>
            return;
 800e98c:	bf00      	nop
 800e98e:	e000      	b.n	800e992 <_tx_thread_system_suspend+0x302>
    return;
 800e990:	bf00      	nop
}
 800e992:	3780      	adds	r7, #128	; 0x80
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	20017d28 	.word	0x20017d28
 800e99c:	20017d14 	.word	0x20017d14
 800e9a0:	20017d2c 	.word	0x20017d2c
 800e9a4:	20017d24 	.word	0x20017d24
 800e9a8:	20017dac 	.word	0x20017dac
 800e9ac:	e000ed04 	.word	0xe000ed04

0800e9b0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b087      	sub	sp, #28
 800e9b4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e9b6:	4b21      	ldr	r3, [pc, #132]	; (800ea3c <_tx_thread_time_slice+0x8c>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e9c0:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e9c4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9c6:	b672      	cpsid	i
    return(int_posture);
 800e9c8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800e9ca:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800e9cc:	4b1c      	ldr	r3, [pc, #112]	; (800ea40 <_tx_thread_time_slice+0x90>)
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d024      	beq.n	800ea22 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d120      	bne.n	800ea22 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	69da      	ldr	r2, [r3, #28]
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	699b      	ldr	r3, [r3, #24]
 800e9ec:	4a15      	ldr	r2, [pc, #84]	; (800ea44 <_tx_thread_time_slice+0x94>)
 800e9ee:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	6a1b      	ldr	r3, [r3, #32]
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d013      	beq.n	800ea22 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d10d      	bne.n	800ea22 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0a:	697a      	ldr	r2, [r7, #20]
 800ea0c:	6a12      	ldr	r2, [r2, #32]
 800ea0e:	490e      	ldr	r1, [pc, #56]	; (800ea48 <_tx_thread_time_slice+0x98>)
 800ea10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ea14:	4b0d      	ldr	r3, [pc, #52]	; (800ea4c <_tx_thread_time_slice+0x9c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a0b      	ldr	r2, [pc, #44]	; (800ea48 <_tx_thread_time_slice+0x98>)
 800ea1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea1e:	4a0c      	ldr	r2, [pc, #48]	; (800ea50 <_tx_thread_time_slice+0xa0>)
 800ea20:	6013      	str	r3, [r2, #0]
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f383 8810 	msr	PRIMASK, r3
}
 800ea2c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800ea2e:	bf00      	nop
 800ea30:	371c      	adds	r7, #28
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	20017d10 	.word	0x20017d10
 800ea40:	20017dbc 	.word	0x20017dbc
 800ea44:	20018318 	.word	0x20018318
 800ea48:	20017d2c 	.word	0x20017d2c
 800ea4c:	20017d28 	.word	0x20017d28
 800ea50:	20017d14 	.word	0x20017d14

0800ea54 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b08a      	sub	sp, #40	; 0x28
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea60:	f3ef 8310 	mrs	r3, PRIMASK
 800ea64:	617b      	str	r3, [r7, #20]
    return(posture);
 800ea66:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ea68:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea6a:	b672      	cpsid	i
    return(int_posture);
 800ea6c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800ea6e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea74:	2b04      	cmp	r3, #4
 800ea76:	d10e      	bne.n	800ea96 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800ea78:	4b13      	ldr	r3, [pc, #76]	; (800eac8 <_tx_thread_timeout+0x74>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	4a12      	ldr	r2, [pc, #72]	; (800eac8 <_tx_thread_timeout+0x74>)
 800ea80:	6013      	str	r3, [r2, #0]
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f383 8810 	msr	PRIMASK, r3
}
 800ea8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ea8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea90:	f7ff fcea 	bl	800e468 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800ea94:	e013      	b.n	800eabe <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea9a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eaa2:	61bb      	str	r3, [r7, #24]
 800eaa4:	6a3b      	ldr	r3, [r7, #32]
 800eaa6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	f383 8810 	msr	PRIMASK, r3
}
 800eaae:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	69b9      	ldr	r1, [r7, #24]
 800eaba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eabc:	4798      	blx	r3
}
 800eabe:	bf00      	nop
 800eac0:	3728      	adds	r7, #40	; 0x28
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	20017dac 	.word	0x20017dac

0800eacc <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b088      	sub	sp, #32
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ead4:	f3ef 8310 	mrs	r3, PRIMASK
 800ead8:	617b      	str	r3, [r7, #20]
    return(posture);
 800eada:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800eadc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eade:	b672      	cpsid	i
    return(int_posture);
 800eae0:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800eae2:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a1b      	ldr	r3, [r3, #32]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800eaec:	2317      	movs	r3, #23
 800eaee:	61fb      	str	r3, [r7, #28]
 800eaf0:	e00d      	b.n	800eb0e <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d102      	bne.n	800eb00 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800eafa:	2317      	movs	r3, #23
 800eafc:	61fb      	str	r3, [r7, #28]
 800eafe:	e006      	b.n	800eb0e <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3308      	adds	r3, #8
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 f957 	bl	800edb8 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	61fb      	str	r3, [r7, #28]
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f383 8810 	msr	PRIMASK, r3
}
 800eb18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800eb1a:	69fb      	ldr	r3, [r7, #28]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3720      	adds	r7, #32
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08a      	sub	sp, #40	; 0x28
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800eb32:	222c      	movs	r2, #44	; 0x2c
 800eb34:	2100      	movs	r1, #0
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f001 f993 	bl	800fe62 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb46:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb4c:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb5a:	f3ef 8310 	mrs	r3, PRIMASK
 800eb5e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800eb60:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800eb62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eb64:	b672      	cpsid	i
    return(int_posture);
 800eb66:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	4a1c      	ldr	r2, [pc, #112]	; (800ebe0 <_tx_timer_create+0xbc>)
 800eb6e:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800eb70:	4b1c      	ldr	r3, [pc, #112]	; (800ebe4 <_tx_timer_create+0xc0>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d109      	bne.n	800eb8c <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800eb78:	4a1b      	ldr	r2, [pc, #108]	; (800ebe8 <_tx_timer_create+0xc4>)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	629a      	str	r2, [r3, #40]	; 0x28
 800eb8a:	e011      	b.n	800ebb0 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800eb8c:	4b16      	ldr	r3, [pc, #88]	; (800ebe8 <_tx_timer_create+0xc4>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800eb92:	6a3b      	ldr	r3, [r7, #32]
 800eb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb96:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800eb98:	6a3b      	ldr	r3, [r7, #32]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	69fa      	ldr	r2, [r7, #28]
 800eba8:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6a3a      	ldr	r2, [r7, #32]
 800ebae:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <_tx_timer_create+0xc0>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	4a0b      	ldr	r2, [pc, #44]	; (800ebe4 <_tx_timer_create+0xc0>)
 800ebb8:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800ebba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d104      	bne.n	800ebca <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 f8f7 	bl	800edb8 <_tx_timer_system_activate>
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	f383 8810 	msr	PRIMASK, r3
}
 800ebd4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3728      	adds	r7, #40	; 0x28
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	4154494d 	.word	0x4154494d
 800ebe4:	20017e54 	.word	0x20017e54
 800ebe8:	20017e50 	.word	0x20017e50

0800ebec <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b088      	sub	sp, #32
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ebf4:	f3ef 8310 	mrs	r3, PRIMASK
 800ebf8:	613b      	str	r3, [r7, #16]
    return(posture);
 800ebfa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ebfc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ebfe:	b672      	cpsid	i
    return(int_posture);
 800ec00:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 800ec02:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a1b      	ldr	r3, [r3, #32]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d004      	beq.n	800ec16 <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	3308      	adds	r3, #8
 800ec10:	4618      	mov	r0, r3
 800ec12:	f000 f933 	bl	800ee7c <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 800ec1c:	4b15      	ldr	r3, [pc, #84]	; (800ec74 <_tx_timer_delete+0x88>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3b01      	subs	r3, #1
 800ec22:	4a14      	ldr	r2, [pc, #80]	; (800ec74 <_tx_timer_delete+0x88>)
 800ec24:	6013      	str	r3, [r2, #0]

    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800ec26:	4b13      	ldr	r3, [pc, #76]	; (800ec74 <_tx_timer_delete+0x88>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d103      	bne.n	800ec36 <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 800ec2e:	4b12      	ldr	r3, [pc, #72]	; (800ec78 <_tx_timer_delete+0x8c>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	e013      	b.n	800ec5e <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3a:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec40:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	69ba      	ldr	r2, [r7, #24]
 800ec4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 800ec4e:	4b0a      	ldr	r3, [pc, #40]	; (800ec78 <_tx_timer_delete+0x8c>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d102      	bne.n	800ec5e <_tx_timer_delete+0x72>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 800ec58:	4a07      	ldr	r2, [pc, #28]	; (800ec78 <_tx_timer_delete+0x8c>)
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	6013      	str	r3, [r2, #0]
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	f383 8810 	msr	PRIMASK, r3
}
 800ec68:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3720      	adds	r7, #32
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	20017e54 	.word	0x20017e54
 800ec78:	20017e50 	.word	0x20017e50

0800ec7c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec82:	f3ef 8310 	mrs	r3, PRIMASK
 800ec86:	607b      	str	r3, [r7, #4]
    return(posture);
 800ec88:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ec8a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec8c:	b672      	cpsid	i
    return(int_posture);
 800ec8e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800ec90:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800ec92:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <_tx_timer_expiration_process+0x3c>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	3301      	adds	r3, #1
 800ec98:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <_tx_timer_expiration_process+0x3c>)
 800ec9a:	6013      	str	r3, [r2, #0]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	f383 8810 	msr	PRIMASK, r3
}
 800eca6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800eca8:	4804      	ldr	r0, [pc, #16]	; (800ecbc <_tx_timer_expiration_process+0x40>)
 800ecaa:	f7ff fbdd 	bl	800e468 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ecae:	bf00      	nop
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	20017dac 	.word	0x20017dac
 800ecbc:	20017e5c 	.word	0x20017e5c

0800ecc0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800ecc0:	b590      	push	{r4, r7, lr}
 800ecc2:	b089      	sub	sp, #36	; 0x24
 800ecc4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800ecc6:	4b28      	ldr	r3, [pc, #160]	; (800ed68 <_tx_timer_initialize+0xa8>)
 800ecc8:	2200      	movs	r2, #0
 800ecca:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800eccc:	4b27      	ldr	r3, [pc, #156]	; (800ed6c <_tx_timer_initialize+0xac>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ecd2:	4b27      	ldr	r3, [pc, #156]	; (800ed70 <_tx_timer_initialize+0xb0>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800ecd8:	4b26      	ldr	r3, [pc, #152]	; (800ed74 <_tx_timer_initialize+0xb4>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800ecde:	4b26      	ldr	r3, [pc, #152]	; (800ed78 <_tx_timer_initialize+0xb8>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800ece4:	2280      	movs	r2, #128	; 0x80
 800ece6:	2100      	movs	r1, #0
 800ece8:	4824      	ldr	r0, [pc, #144]	; (800ed7c <_tx_timer_initialize+0xbc>)
 800ecea:	f001 f8ba 	bl	800fe62 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800ecee:	4b24      	ldr	r3, [pc, #144]	; (800ed80 <_tx_timer_initialize+0xc0>)
 800ecf0:	4a22      	ldr	r2, [pc, #136]	; (800ed7c <_tx_timer_initialize+0xbc>)
 800ecf2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800ecf4:	4b23      	ldr	r3, [pc, #140]	; (800ed84 <_tx_timer_initialize+0xc4>)
 800ecf6:	4a21      	ldr	r2, [pc, #132]	; (800ed7c <_tx_timer_initialize+0xbc>)
 800ecf8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800ecfa:	4b23      	ldr	r3, [pc, #140]	; (800ed88 <_tx_timer_initialize+0xc8>)
 800ecfc:	4a23      	ldr	r2, [pc, #140]	; (800ed8c <_tx_timer_initialize+0xcc>)
 800ecfe:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800ed00:	4b21      	ldr	r3, [pc, #132]	; (800ed88 <_tx_timer_initialize+0xc8>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	3304      	adds	r3, #4
 800ed06:	4a20      	ldr	r2, [pc, #128]	; (800ed88 <_tx_timer_initialize+0xc8>)
 800ed08:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800ed0a:	4b21      	ldr	r3, [pc, #132]	; (800ed90 <_tx_timer_initialize+0xd0>)
 800ed0c:	4a21      	ldr	r2, [pc, #132]	; (800ed94 <_tx_timer_initialize+0xd4>)
 800ed0e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800ed10:	4b21      	ldr	r3, [pc, #132]	; (800ed98 <_tx_timer_initialize+0xd8>)
 800ed12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed16:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800ed18:	4b20      	ldr	r3, [pc, #128]	; (800ed9c <_tx_timer_initialize+0xdc>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800ed1e:	4b1c      	ldr	r3, [pc, #112]	; (800ed90 <_tx_timer_initialize+0xd0>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a1d      	ldr	r2, [pc, #116]	; (800ed98 <_tx_timer_initialize+0xd8>)
 800ed24:	6812      	ldr	r2, [r2, #0]
 800ed26:	491d      	ldr	r1, [pc, #116]	; (800ed9c <_tx_timer_initialize+0xdc>)
 800ed28:	6809      	ldr	r1, [r1, #0]
 800ed2a:	481c      	ldr	r0, [pc, #112]	; (800ed9c <_tx_timer_initialize+0xdc>)
 800ed2c:	6800      	ldr	r0, [r0, #0]
 800ed2e:	2400      	movs	r4, #0
 800ed30:	9405      	str	r4, [sp, #20]
 800ed32:	2400      	movs	r4, #0
 800ed34:	9404      	str	r4, [sp, #16]
 800ed36:	9003      	str	r0, [sp, #12]
 800ed38:	9102      	str	r1, [sp, #8]
 800ed3a:	9201      	str	r2, [sp, #4]
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	4b18      	ldr	r3, [pc, #96]	; (800eda0 <_tx_timer_initialize+0xe0>)
 800ed40:	4a18      	ldr	r2, [pc, #96]	; (800eda4 <_tx_timer_initialize+0xe4>)
 800ed42:	4919      	ldr	r1, [pc, #100]	; (800eda8 <_tx_timer_initialize+0xe8>)
 800ed44:	4819      	ldr	r0, [pc, #100]	; (800edac <_tx_timer_initialize+0xec>)
 800ed46:	f7fe ffef 	bl	800dd28 <_tx_thread_create>
 800ed4a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1e5      	bne.n	800ed1e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800ed52:	4b17      	ldr	r3, [pc, #92]	; (800edb0 <_tx_timer_initialize+0xf0>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800ed58:	4b16      	ldr	r3, [pc, #88]	; (800edb4 <_tx_timer_initialize+0xf4>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800ed5e:	bf00      	nop
 800ed60:	370c      	adds	r7, #12
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd90      	pop	{r4, r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20017db8 	.word	0x20017db8
 800ed6c:	20018318 	.word	0x20018318
 800ed70:	20017dbc 	.word	0x20017dbc
 800ed74:	20017e4c 	.word	0x20017e4c
 800ed78:	20017e58 	.word	0x20017e58
 800ed7c:	20017dc0 	.word	0x20017dc0
 800ed80:	20017e40 	.word	0x20017e40
 800ed84:	20017e48 	.word	0x20017e48
 800ed88:	20017e44 	.word	0x20017e44
 800ed8c:	20017e3c 	.word	0x20017e3c
 800ed90:	20017f0c 	.word	0x20017f0c
 800ed94:	20017f18 	.word	0x20017f18
 800ed98:	20017f10 	.word	0x20017f10
 800ed9c:	20017f14 	.word	0x20017f14
 800eda0:	4154494d 	.word	0x4154494d
 800eda4:	0800eeed 	.word	0x0800eeed
 800eda8:	08010c9c 	.word	0x08010c9c
 800edac:	20017e5c 	.word	0x20017e5c
 800edb0:	20017e50 	.word	0x20017e50
 800edb4:	20017e54 	.word	0x20017e54

0800edb8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800edb8:	b480      	push	{r7}
 800edba:	b089      	sub	sp, #36	; 0x24
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d04a      	beq.n	800ee62 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edd2:	d046      	beq.n	800ee62 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d142      	bne.n	800ee62 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	2b20      	cmp	r3, #32
 800ede0:	d902      	bls.n	800ede8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800ede2:	231f      	movs	r3, #31
 800ede4:	61bb      	str	r3, [r7, #24]
 800ede6:	e002      	b.n	800edee <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	3b01      	subs	r3, #1
 800edec:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800edee:	4b20      	ldr	r3, [pc, #128]	; (800ee70 <_tx_timer_system_activate+0xb8>)
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4413      	add	r3, r2
 800edf8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800edfa:	4b1e      	ldr	r3, [pc, #120]	; (800ee74 <_tx_timer_system_activate+0xbc>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	69fa      	ldr	r2, [r7, #28]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d30b      	bcc.n	800ee1c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800ee04:	4b1b      	ldr	r3, [pc, #108]	; (800ee74 <_tx_timer_system_activate+0xbc>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	69fa      	ldr	r2, [r7, #28]
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	109b      	asrs	r3, r3, #2
 800ee0e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800ee10:	4b19      	ldr	r3, [pc, #100]	; (800ee78 <_tx_timer_system_activate+0xc0>)
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	4413      	add	r3, r2
 800ee1a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d109      	bne.n	800ee38 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	e011      	b.n	800ee5c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	69fa      	ldr	r2, [r7, #28]
 800ee60:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800ee62:	bf00      	nop
 800ee64:	3724      	adds	r7, #36	; 0x24
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop
 800ee70:	20017e48 	.word	0x20017e48
 800ee74:	20017e44 	.word	0x20017e44
 800ee78:	20017e40 	.word	0x20017e40

0800ee7c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b087      	sub	sp, #28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d026      	beq.n	800eede <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	691b      	ldr	r3, [r3, #16]
 800ee94:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d108      	bne.n	800eeb0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d117      	bne.n	800eed8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	e013      	b.n	800eed8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	695b      	ldr	r3, [r3, #20]
 800eeb4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d105      	bne.n	800eed8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	693a      	ldr	r2, [r7, #16]
 800eed6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	619a      	str	r2, [r3, #24]
    }
}
 800eede:	bf00      	nop
 800eee0:	371c      	adds	r7, #28
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
	...

0800eeec <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b098      	sub	sp, #96	; 0x60
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800eef4:	2300      	movs	r3, #0
 800eef6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a73      	ldr	r2, [pc, #460]	; (800f0c8 <_tx_timer_thread_entry+0x1dc>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	f040 80de 	bne.w	800f0be <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef02:	f3ef 8310 	mrs	r3, PRIMASK
 800ef06:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ef08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ef0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ef0c:	b672      	cpsid	i
    return(int_posture);
 800ef0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800ef10:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800ef12:	4b6e      	ldr	r3, [pc, #440]	; (800f0cc <_tx_timer_thread_entry+0x1e0>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d003      	beq.n	800ef28 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f107 020c 	add.w	r2, r7, #12
 800ef26:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800ef28:	4b68      	ldr	r3, [pc, #416]	; (800f0cc <_tx_timer_thread_entry+0x1e0>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800ef30:	4b66      	ldr	r3, [pc, #408]	; (800f0cc <_tx_timer_thread_entry+0x1e0>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	3304      	adds	r3, #4
 800ef36:	4a65      	ldr	r2, [pc, #404]	; (800f0cc <_tx_timer_thread_entry+0x1e0>)
 800ef38:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800ef3a:	4b64      	ldr	r3, [pc, #400]	; (800f0cc <_tx_timer_thread_entry+0x1e0>)
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	4b64      	ldr	r3, [pc, #400]	; (800f0d0 <_tx_timer_thread_entry+0x1e4>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d103      	bne.n	800ef4e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800ef46:	4b63      	ldr	r3, [pc, #396]	; (800f0d4 <_tx_timer_thread_entry+0x1e8>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a60      	ldr	r2, [pc, #384]	; (800f0cc <_tx_timer_thread_entry+0x1e0>)
 800ef4c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800ef4e:	4b62      	ldr	r3, [pc, #392]	; (800f0d8 <_tx_timer_thread_entry+0x1ec>)
 800ef50:	2200      	movs	r2, #0
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef56:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	f383 8810 	msr	PRIMASK, r3
}
 800ef5e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef60:	f3ef 8310 	mrs	r3, PRIMASK
 800ef64:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800ef66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800ef68:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ef6a:	b672      	cpsid	i
    return(int_posture);
 800ef6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800ef6e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800ef70:	e07f      	b.n	800f072 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800ef80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d102      	bne.n	800ef8e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	e00e      	b.n	800efac <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800ef8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef90:	695b      	ldr	r3, [r3, #20]
 800ef92:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ef94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef98:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ef9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef9e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800efa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efa2:	f107 020c 	add.w	r2, r7, #12
 800efa6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800efa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efaa:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800efac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b20      	cmp	r3, #32
 800efb2:	d911      	bls.n	800efd8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800efb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800efbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efbe:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800efc0:	2300      	movs	r3, #0
 800efc2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800efc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efc6:	f107 0208 	add.w	r2, r7, #8
 800efca:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800efcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800efd0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800efd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efd4:	60bb      	str	r3, [r7, #8]
 800efd6:	e01a      	b.n	800f00e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800efd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800efde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800efe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efea:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800efec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d009      	beq.n	800f008 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800eff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eff6:	f107 0208 	add.w	r2, r7, #8
 800effa:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800effc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800effe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f000:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800f002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f004:	60bb      	str	r3, [r7, #8]
 800f006:	e002      	b.n	800f00e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800f008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f00a:	2200      	movs	r2, #0
 800f00c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800f00e:	4a33      	ldr	r2, [pc, #204]	; (800f0dc <_tx_timer_thread_entry+0x1f0>)
 800f010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f016:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01a:	f383 8810 	msr	PRIMASK, r3
}
 800f01e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800f020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800f026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f028:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f02a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f02c:	f3ef 8310 	mrs	r3, PRIMASK
 800f030:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800f034:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800f036:	b672      	cpsid	i
    return(int_posture);
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800f03a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800f03c:	4b27      	ldr	r3, [pc, #156]	; (800f0dc <_tx_timer_thread_entry+0x1f0>)
 800f03e:	2200      	movs	r2, #0
 800f040:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f046:	429a      	cmp	r2, r3
 800f048:	d105      	bne.n	800f056 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800f04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f04c:	2200      	movs	r2, #0
 800f04e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800f050:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f052:	f7ff feb1 	bl	800edb8 <_tx_timer_system_activate>
 800f056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f058:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	f383 8810 	msr	PRIMASK, r3
}
 800f060:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f062:	f3ef 8310 	mrs	r3, PRIMASK
 800f066:	623b      	str	r3, [r7, #32]
    return(posture);
 800f068:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f06a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f06c:	b672      	cpsid	i
    return(int_posture);
 800f06e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800f070:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	f47f af7c 	bne.w	800ef72 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800f07a:	4b17      	ldr	r3, [pc, #92]	; (800f0d8 <_tx_timer_thread_entry+0x1ec>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d116      	bne.n	800f0b0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800f082:	4b17      	ldr	r3, [pc, #92]	; (800f0e0 <_tx_timer_thread_entry+0x1f4>)
 800f084:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800f086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f088:	2203      	movs	r2, #3
 800f08a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f08e:	2201      	movs	r2, #1
 800f090:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800f092:	4b14      	ldr	r3, [pc, #80]	; (800f0e4 <_tx_timer_thread_entry+0x1f8>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	3301      	adds	r3, #1
 800f098:	4a12      	ldr	r2, [pc, #72]	; (800f0e4 <_tx_timer_thread_entry+0x1f8>)
 800f09a:	6013      	str	r3, [r2, #0]
 800f09c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f09e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	f383 8810 	msr	PRIMASK, r3
}
 800f0a6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f0a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0aa:	f7ff faf1 	bl	800e690 <_tx_thread_system_suspend>
 800f0ae:	e728      	b.n	800ef02 <_tx_timer_thread_entry+0x16>
 800f0b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	f383 8810 	msr	PRIMASK, r3
}
 800f0ba:	bf00      	nop
            TX_DISABLE
 800f0bc:	e721      	b.n	800ef02 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800f0be:	bf00      	nop
 800f0c0:	3760      	adds	r7, #96	; 0x60
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	4154494d 	.word	0x4154494d
 800f0cc:	20017e48 	.word	0x20017e48
 800f0d0:	20017e44 	.word	0x20017e44
 800f0d4:	20017e40 	.word	0x20017e40
 800f0d8:	20017e4c 	.word	0x20017e4c
 800f0dc:	20017e58 	.word	0x20017e58
 800f0e0:	20017e5c 	.word	0x20017e5c
 800f0e4:	20017dac 	.word	0x20017dac

0800f0e8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b092      	sub	sp, #72	; 0x48
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d102      	bne.n	800f106 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800f100:	2302      	movs	r3, #2
 800f102:	647b      	str	r3, [r7, #68]	; 0x44
 800f104:	e075      	b.n	800f1f2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800f106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f108:	2b34      	cmp	r3, #52	; 0x34
 800f10a:	d002      	beq.n	800f112 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800f10c:	2302      	movs	r3, #2
 800f10e:	647b      	str	r3, [r7, #68]	; 0x44
 800f110:	e06f      	b.n	800f1f2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f112:	f3ef 8310 	mrs	r3, PRIMASK
 800f116:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800f11a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800f11c:	b672      	cpsid	i
    return(int_posture);
 800f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f120:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f122:	4b3b      	ldr	r3, [pc, #236]	; (800f210 <_txe_byte_pool_create+0x128>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3301      	adds	r3, #1
 800f128:	4a39      	ldr	r2, [pc, #228]	; (800f210 <_txe_byte_pool_create+0x128>)
 800f12a:	6013      	str	r3, [r2, #0]
 800f12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f132:	f383 8810 	msr	PRIMASK, r3
}
 800f136:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800f138:	4b36      	ldr	r3, [pc, #216]	; (800f214 <_txe_byte_pool_create+0x12c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800f13e:	2300      	movs	r3, #0
 800f140:	643b      	str	r3, [r7, #64]	; 0x40
 800f142:	e009      	b.n	800f158 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800f144:	68fa      	ldr	r2, [r7, #12]
 800f146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f148:	429a      	cmp	r2, r3
 800f14a:	d00b      	beq.n	800f164 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800f14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f150:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800f152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f154:	3301      	adds	r3, #1
 800f156:	643b      	str	r3, [r7, #64]	; 0x40
 800f158:	4b2f      	ldr	r3, [pc, #188]	; (800f218 <_txe_byte_pool_create+0x130>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f15e:	429a      	cmp	r2, r3
 800f160:	d3f0      	bcc.n	800f144 <_txe_byte_pool_create+0x5c>
 800f162:	e000      	b.n	800f166 <_txe_byte_pool_create+0x7e>
                break;
 800f164:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f166:	f3ef 8310 	mrs	r3, PRIMASK
 800f16a:	623b      	str	r3, [r7, #32]
    return(posture);
 800f16c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f16e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f170:	b672      	cpsid	i
    return(int_posture);
 800f172:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f174:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f176:	4b26      	ldr	r3, [pc, #152]	; (800f210 <_txe_byte_pool_create+0x128>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3b01      	subs	r3, #1
 800f17c:	4a24      	ldr	r2, [pc, #144]	; (800f210 <_txe_byte_pool_create+0x128>)
 800f17e:	6013      	str	r3, [r2, #0]
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	f383 8810 	msr	PRIMASK, r3
}
 800f18a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f18c:	f7ff f932 	bl	800e3f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f194:	429a      	cmp	r2, r3
 800f196:	d102      	bne.n	800f19e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800f198:	2302      	movs	r3, #2
 800f19a:	647b      	str	r3, [r7, #68]	; 0x44
 800f19c:	e029      	b.n	800f1f2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d102      	bne.n	800f1aa <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800f1a4:	2303      	movs	r3, #3
 800f1a6:	647b      	str	r3, [r7, #68]	; 0x44
 800f1a8:	e023      	b.n	800f1f2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2b63      	cmp	r3, #99	; 0x63
 800f1ae:	d802      	bhi.n	800f1b6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800f1b0:	2305      	movs	r3, #5
 800f1b2:	647b      	str	r3, [r7, #68]	; 0x44
 800f1b4:	e01d      	b.n	800f1f2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800f1b6:	4b19      	ldr	r3, [pc, #100]	; (800f21c <_txe_byte_pool_create+0x134>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800f1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1be:	4a18      	ldr	r2, [pc, #96]	; (800f220 <_txe_byte_pool_create+0x138>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d101      	bne.n	800f1c8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f1c4:	2313      	movs	r3, #19
 800f1c6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f1c8:	f3ef 8305 	mrs	r3, IPSR
 800f1cc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f1ce:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f1d0:	4b14      	ldr	r3, [pc, #80]	; (800f224 <_txe_byte_pool_create+0x13c>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d00b      	beq.n	800f1f2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f1da:	f3ef 8305 	mrs	r3, IPSR
 800f1de:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f1e0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f1e2:	4b10      	ldr	r3, [pc, #64]	; (800f224 <_txe_byte_pool_create+0x13c>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f1ec:	d201      	bcs.n	800f1f2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800f1ee:	2313      	movs	r3, #19
 800f1f0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d106      	bne.n	800f206 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	68b9      	ldr	r1, [r7, #8]
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f7fd fa56 	bl	800c6b0 <_tx_byte_pool_create>
 800f204:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800f206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3748      	adds	r7, #72	; 0x48
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	20017dac 	.word	0x20017dac
 800f214:	20017d00 	.word	0x20017d00
 800f218:	20017d04 	.word	0x20017d04
 800f21c:	20017d10 	.word	0x20017d10
 800f220:	20017e5c 	.word	0x20017e5c
 800f224:	2000008c 	.word	0x2000008c

0800f228 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b092      	sub	sp, #72	; 0x48
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f234:	2300      	movs	r3, #0
 800f236:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d102      	bne.n	800f244 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800f23e:	2306      	movs	r3, #6
 800f240:	647b      	str	r3, [r7, #68]	; 0x44
 800f242:	e069      	b.n	800f318 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2b24      	cmp	r3, #36	; 0x24
 800f248:	d002      	beq.n	800f250 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800f24a:	2306      	movs	r3, #6
 800f24c:	647b      	str	r3, [r7, #68]	; 0x44
 800f24e:	e063      	b.n	800f318 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f250:	f3ef 8310 	mrs	r3, PRIMASK
 800f254:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800f258:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800f25a:	b672      	cpsid	i
    return(int_posture);
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f25e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f260:	4b34      	ldr	r3, [pc, #208]	; (800f334 <_txe_event_flags_create+0x10c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3301      	adds	r3, #1
 800f266:	4a33      	ldr	r2, [pc, #204]	; (800f334 <_txe_event_flags_create+0x10c>)
 800f268:	6013      	str	r3, [r2, #0]
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f270:	f383 8810 	msr	PRIMASK, r3
}
 800f274:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800f276:	4b30      	ldr	r3, [pc, #192]	; (800f338 <_txe_event_flags_create+0x110>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800f27c:	2300      	movs	r3, #0
 800f27e:	643b      	str	r3, [r7, #64]	; 0x40
 800f280:	e009      	b.n	800f296 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800f282:	68fa      	ldr	r2, [r7, #12]
 800f284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f286:	429a      	cmp	r2, r3
 800f288:	d00b      	beq.n	800f2a2 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800f28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f28c:	699b      	ldr	r3, [r3, #24]
 800f28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800f290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f292:	3301      	adds	r3, #1
 800f294:	643b      	str	r3, [r7, #64]	; 0x40
 800f296:	4b29      	ldr	r3, [pc, #164]	; (800f33c <_txe_event_flags_create+0x114>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d3f0      	bcc.n	800f282 <_txe_event_flags_create+0x5a>
 800f2a0:	e000      	b.n	800f2a4 <_txe_event_flags_create+0x7c>
                break;
 800f2a2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800f2a8:	623b      	str	r3, [r7, #32]
    return(posture);
 800f2aa:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f2ac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f2ae:	b672      	cpsid	i
    return(int_posture);
 800f2b0:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f2b2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f2b4:	4b1f      	ldr	r3, [pc, #124]	; (800f334 <_txe_event_flags_create+0x10c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	4a1e      	ldr	r2, [pc, #120]	; (800f334 <_txe_event_flags_create+0x10c>)
 800f2bc:	6013      	str	r3, [r2, #0]
 800f2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c4:	f383 8810 	msr	PRIMASK, r3
}
 800f2c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f2ca:	f7ff f893 	bl	800e3f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d102      	bne.n	800f2dc <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800f2d6:	2306      	movs	r3, #6
 800f2d8:	647b      	str	r3, [r7, #68]	; 0x44
 800f2da:	e01d      	b.n	800f318 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800f2dc:	4b18      	ldr	r3, [pc, #96]	; (800f340 <_txe_event_flags_create+0x118>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800f2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e4:	4a17      	ldr	r2, [pc, #92]	; (800f344 <_txe_event_flags_create+0x11c>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d101      	bne.n	800f2ee <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f2ea:	2313      	movs	r3, #19
 800f2ec:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f2ee:	f3ef 8305 	mrs	r3, IPSR
 800f2f2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f2f4:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f2f6:	4b14      	ldr	r3, [pc, #80]	; (800f348 <_txe_event_flags_create+0x120>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00b      	beq.n	800f318 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f300:	f3ef 8305 	mrs	r3, IPSR
 800f304:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f306:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f308:	4b0f      	ldr	r3, [pc, #60]	; (800f348 <_txe_event_flags_create+0x120>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4313      	orrs	r3, r2
 800f30e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f312:	d201      	bcs.n	800f318 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800f314:	2313      	movs	r3, #19
 800f316:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d104      	bne.n	800f328 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f7fd fae1 	bl	800c8e8 <_tx_event_flags_create>
 800f326:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800f328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3748      	adds	r7, #72	; 0x48
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	20017dac 	.word	0x20017dac
 800f338:	20017ce8 	.word	0x20017ce8
 800f33c:	20017cec 	.word	0x20017cec
 800f340:	20017d10 	.word	0x20017d10
 800f344:	20017e5c 	.word	0x20017e5c
 800f348:	2000008c 	.word	0x2000008c

0800f34c <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b08a      	sub	sp, #40	; 0x28
 800f350:	af02      	add	r7, sp, #8
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
 800f358:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f35a:	2300      	movs	r3, #0
 800f35c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800f364:	2306      	movs	r3, #6
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	e025      	b.n	800f3b6 <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a1e      	ldr	r2, [pc, #120]	; (800f3e8 <_txe_event_flags_get+0x9c>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d002      	beq.n	800f37a <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800f374:	2306      	movs	r3, #6
 800f376:	61fb      	str	r3, [r7, #28]
 800f378:	e01d      	b.n	800f3b6 <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d102      	bne.n	800f386 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800f380:	2303      	movs	r3, #3
 800f382:	61fb      	str	r3, [r7, #28]
 800f384:	e017      	b.n	800f3b6 <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d014      	beq.n	800f3b6 <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f38c:	f3ef 8305 	mrs	r3, IPSR
 800f390:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f392:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f394:	4b15      	ldr	r3, [pc, #84]	; (800f3ec <_txe_event_flags_get+0xa0>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4313      	orrs	r3, r2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800f39e:	2304      	movs	r3, #4
 800f3a0:	61fb      	str	r3, [r7, #28]
 800f3a2:	e008      	b.n	800f3b6 <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800f3a4:	4b12      	ldr	r3, [pc, #72]	; (800f3f0 <_txe_event_flags_get+0xa4>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	4a11      	ldr	r2, [pc, #68]	; (800f3f4 <_txe_event_flags_get+0xa8>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d101      	bne.n	800f3b6 <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800f3b2:	2304      	movs	r3, #4
 800f3b4:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d104      	bne.n	800f3c6 <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2b03      	cmp	r3, #3
 800f3c0:	d901      	bls.n	800f3c6 <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800f3c2:	2308      	movs	r3, #8
 800f3c4:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d108      	bne.n	800f3de <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	68b9      	ldr	r1, [r7, #8]
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f7fd fad4 	bl	800c984 <_tx_event_flags_get>
 800f3dc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800f3de:	69fb      	ldr	r3, [r7, #28]
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3720      	adds	r7, #32
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	4456444e 	.word	0x4456444e
 800f3ec:	2000008c 	.word	0x2000008c
 800f3f0:	20017d10 	.word	0x20017d10
 800f3f4:	20017e5c 	.word	0x20017e5c

0800f3f8 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f404:	2300      	movs	r3, #0
 800f406:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d102      	bne.n	800f414 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800f40e:	2306      	movs	r3, #6
 800f410:	617b      	str	r3, [r7, #20]
 800f412:	e00f      	b.n	800f434 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	4a0d      	ldr	r2, [pc, #52]	; (800f450 <_txe_event_flags_set+0x58>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d002      	beq.n	800f424 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800f41e:	2306      	movs	r3, #6
 800f420:	617b      	str	r3, [r7, #20]
 800f422:	e007      	b.n	800f434 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b02      	cmp	r3, #2
 800f428:	d004      	beq.n	800f434 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d001      	beq.n	800f434 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800f430:	2308      	movs	r3, #8
 800f432:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d105      	bne.n	800f446 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	68b9      	ldr	r1, [r7, #8]
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f7fd fb82 	bl	800cb48 <_tx_event_flags_set>
 800f444:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800f446:	697b      	ldr	r3, [r7, #20]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	4456444e 	.word	0x4456444e

0800f454 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b092      	sub	sp, #72	; 0x48
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
 800f460:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f462:	2300      	movs	r3, #0
 800f464:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d102      	bne.n	800f472 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f46c:	231c      	movs	r3, #28
 800f46e:	647b      	str	r3, [r7, #68]	; 0x44
 800f470:	e053      	b.n	800f51a <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b34      	cmp	r3, #52	; 0x34
 800f476:	d002      	beq.n	800f47e <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f478:	231c      	movs	r3, #28
 800f47a:	647b      	str	r3, [r7, #68]	; 0x44
 800f47c:	e04d      	b.n	800f51a <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f47e:	f3ef 8310 	mrs	r3, PRIMASK
 800f482:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800f486:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800f488:	b672      	cpsid	i
    return(int_posture);
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f48c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f48e:	4b3a      	ldr	r3, [pc, #232]	; (800f578 <_txe_mutex_create+0x124>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3301      	adds	r3, #1
 800f494:	4a38      	ldr	r2, [pc, #224]	; (800f578 <_txe_mutex_create+0x124>)
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49e:	f383 8810 	msr	PRIMASK, r3
}
 800f4a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800f4a4:	4b35      	ldr	r3, [pc, #212]	; (800f57c <_txe_mutex_create+0x128>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	643b      	str	r3, [r7, #64]	; 0x40
 800f4ae:	e009      	b.n	800f4c4 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d00b      	beq.n	800f4d0 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800f4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ba:	6a1b      	ldr	r3, [r3, #32]
 800f4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800f4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	643b      	str	r3, [r7, #64]	; 0x40
 800f4c4:	4b2e      	ldr	r3, [pc, #184]	; (800f580 <_txe_mutex_create+0x12c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d3f0      	bcc.n	800f4b0 <_txe_mutex_create+0x5c>
 800f4ce:	e000      	b.n	800f4d2 <_txe_mutex_create+0x7e>
                break;
 800f4d0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f4d2:	f3ef 8310 	mrs	r3, PRIMASK
 800f4d6:	623b      	str	r3, [r7, #32]
    return(posture);
 800f4d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f4da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f4dc:	b672      	cpsid	i
    return(int_posture);
 800f4de:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f4e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f4e2:	4b25      	ldr	r3, [pc, #148]	; (800f578 <_txe_mutex_create+0x124>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	4a23      	ldr	r2, [pc, #140]	; (800f578 <_txe_mutex_create+0x124>)
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f2:	f383 8810 	msr	PRIMASK, r3
}
 800f4f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f4f8:	f7fe ff7c 	bl	800e3f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f500:	429a      	cmp	r2, r3
 800f502:	d102      	bne.n	800f50a <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800f504:	231c      	movs	r3, #28
 800f506:	647b      	str	r3, [r7, #68]	; 0x44
 800f508:	e007      	b.n	800f51a <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d004      	beq.n	800f51a <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800f516:	231f      	movs	r3, #31
 800f518:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d11d      	bne.n	800f55c <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800f520:	4b18      	ldr	r3, [pc, #96]	; (800f584 <_txe_mutex_create+0x130>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800f526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f528:	4a17      	ldr	r2, [pc, #92]	; (800f588 <_txe_mutex_create+0x134>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d101      	bne.n	800f532 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800f52e:	2313      	movs	r3, #19
 800f530:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f532:	f3ef 8305 	mrs	r3, IPSR
 800f536:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f538:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f53a:	4b14      	ldr	r3, [pc, #80]	; (800f58c <_txe_mutex_create+0x138>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4313      	orrs	r3, r2
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00b      	beq.n	800f55c <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f544:	f3ef 8305 	mrs	r3, IPSR
 800f548:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f54a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f54c:	4b0f      	ldr	r3, [pc, #60]	; (800f58c <_txe_mutex_create+0x138>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4313      	orrs	r3, r2
 800f552:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f556:	d201      	bcs.n	800f55c <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f558:	2313      	movs	r3, #19
 800f55a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d105      	bne.n	800f56e <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	68b9      	ldr	r1, [r7, #8]
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f7fd fe2e 	bl	800d1c8 <_tx_mutex_create>
 800f56c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800f56e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f570:	4618      	mov	r0, r3
 800f572:	3748      	adds	r7, #72	; 0x48
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	20017dac 	.word	0x20017dac
 800f57c:	20017cf0 	.word	0x20017cf0
 800f580:	20017cf4 	.word	0x20017cf4
 800f584:	20017d10 	.word	0x20017d10
 800f588:	20017e5c 	.word	0x20017e5c
 800f58c:	2000008c 	.word	0x2000008c

0800f590 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f598:	2300      	movs	r3, #0
 800f59a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d102      	bne.n	800f5a8 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f5a2:	231c      	movs	r3, #28
 800f5a4:	617b      	str	r3, [r7, #20]
 800f5a6:	e023      	b.n	800f5f0 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4a13      	ldr	r2, [pc, #76]	; (800f5fc <_txe_mutex_delete+0x6c>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d002      	beq.n	800f5b8 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f5b2:	231c      	movs	r3, #28
 800f5b4:	617b      	str	r3, [r7, #20]
 800f5b6:	e01b      	b.n	800f5f0 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f5b8:	f3ef 8305 	mrs	r3, IPSR
 800f5bc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800f5be:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f5c0:	4b0f      	ldr	r3, [pc, #60]	; (800f600 <_txe_mutex_delete+0x70>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d002      	beq.n	800f5d0 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800f5ca:	2313      	movs	r3, #19
 800f5cc:	617b      	str	r3, [r7, #20]
 800f5ce:	e00f      	b.n	800f5f0 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800f5d0:	4b0c      	ldr	r3, [pc, #48]	; (800f604 <_txe_mutex_delete+0x74>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	4a0b      	ldr	r2, [pc, #44]	; (800f608 <_txe_mutex_delete+0x78>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d101      	bne.n	800f5e2 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800f5de:	2313      	movs	r3, #19
 800f5e0:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d103      	bne.n	800f5f0 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7fd fe47 	bl	800d27c <_tx_mutex_delete>
 800f5ee:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800f5f0:	697b      	ldr	r3, [r7, #20]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	4d555445 	.word	0x4d555445
 800f600:	2000008c 	.word	0x2000008c
 800f604:	20017d10 	.word	0x20017d10
 800f608:	20017e5c 	.word	0x20017e5c

0800f60c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b088      	sub	sp, #32
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f616:	2300      	movs	r3, #0
 800f618:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d102      	bne.n	800f626 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f620:	231c      	movs	r3, #28
 800f622:	61fb      	str	r3, [r7, #28]
 800f624:	e01f      	b.n	800f666 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a21      	ldr	r2, [pc, #132]	; (800f6b0 <_txe_mutex_get+0xa4>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d002      	beq.n	800f636 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f630:	231c      	movs	r3, #28
 800f632:	61fb      	str	r3, [r7, #28]
 800f634:	e017      	b.n	800f666 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d014      	beq.n	800f666 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f63c:	f3ef 8305 	mrs	r3, IPSR
 800f640:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f642:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f644:	4b1b      	ldr	r3, [pc, #108]	; (800f6b4 <_txe_mutex_get+0xa8>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4313      	orrs	r3, r2
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d002      	beq.n	800f654 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800f64e:	2304      	movs	r3, #4
 800f650:	61fb      	str	r3, [r7, #28]
 800f652:	e008      	b.n	800f666 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800f654:	4b18      	ldr	r3, [pc, #96]	; (800f6b8 <_txe_mutex_get+0xac>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	4a17      	ldr	r2, [pc, #92]	; (800f6bc <_txe_mutex_get+0xb0>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d101      	bne.n	800f666 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800f662:	2304      	movs	r3, #4
 800f664:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d114      	bne.n	800f696 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f66c:	f3ef 8305 	mrs	r3, IPSR
 800f670:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f672:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f674:	4b0f      	ldr	r3, [pc, #60]	; (800f6b4 <_txe_mutex_get+0xa8>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4313      	orrs	r3, r2
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00b      	beq.n	800f696 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f67e:	f3ef 8305 	mrs	r3, IPSR
 800f682:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800f684:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f686:	4b0b      	ldr	r3, [pc, #44]	; (800f6b4 <_txe_mutex_get+0xa8>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f690:	d201      	bcs.n	800f696 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f692:	2313      	movs	r3, #19
 800f694:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d104      	bne.n	800f6a6 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7fd fe96 	bl	800d3d0 <_tx_mutex_get>
 800f6a4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800f6a6:	69fb      	ldr	r3, [r7, #28]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3720      	adds	r7, #32
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	4d555445 	.word	0x4d555445
 800f6b4:	2000008c 	.word	0x2000008c
 800f6b8:	20017d10 	.word	0x20017d10
 800f6bc:	20017e5c 	.word	0x20017e5c

0800f6c0 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d102      	bne.n	800f6d8 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f6d2:	231c      	movs	r3, #28
 800f6d4:	617b      	str	r3, [r7, #20]
 800f6d6:	e01c      	b.n	800f712 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a13      	ldr	r2, [pc, #76]	; (800f72c <_txe_mutex_put+0x6c>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d002      	beq.n	800f6e8 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800f6e2:	231c      	movs	r3, #28
 800f6e4:	617b      	str	r3, [r7, #20]
 800f6e6:	e014      	b.n	800f712 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f6e8:	f3ef 8305 	mrs	r3, IPSR
 800f6ec:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f6ee:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f6f0:	4b0f      	ldr	r3, [pc, #60]	; (800f730 <_txe_mutex_put+0x70>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00b      	beq.n	800f712 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f6fa:	f3ef 8305 	mrs	r3, IPSR
 800f6fe:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800f700:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f702:	4b0b      	ldr	r3, [pc, #44]	; (800f730 <_txe_mutex_put+0x70>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4313      	orrs	r3, r2
 800f708:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f70c:	d201      	bcs.n	800f712 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f70e:	2313      	movs	r3, #19
 800f710:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d103      	bne.n	800f720 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7fe f8df 	bl	800d8dc <_tx_mutex_put>
 800f71e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800f720:	697b      	ldr	r3, [r7, #20]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3718      	adds	r7, #24
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	4d555445 	.word	0x4d555445
 800f730:	2000008c 	.word	0x2000008c

0800f734 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b09a      	sub	sp, #104	; 0x68
 800f738:	af06      	add	r7, sp, #24
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
 800f740:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f742:	2300      	movs	r3, #0
 800f744:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d102      	bne.n	800f752 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f74c:	230e      	movs	r3, #14
 800f74e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f750:	e0bb      	b.n	800f8ca <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800f752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f754:	2bb0      	cmp	r3, #176	; 0xb0
 800f756:	d002      	beq.n	800f75e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f758:	230e      	movs	r3, #14
 800f75a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f75c:	e0b5      	b.n	800f8ca <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f75e:	f3ef 8310 	mrs	r3, PRIMASK
 800f762:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800f764:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800f766:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800f768:	b672      	cpsid	i
    return(int_posture);
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f76c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f76e:	4b64      	ldr	r3, [pc, #400]	; (800f900 <_txe_thread_create+0x1cc>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	4a62      	ldr	r2, [pc, #392]	; (800f900 <_txe_thread_create+0x1cc>)
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f77a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77e:	f383 8810 	msr	PRIMASK, r3
}
 800f782:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800f784:	2300      	movs	r3, #0
 800f786:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800f788:	4b5e      	ldr	r3, [pc, #376]	; (800f904 <_txe_thread_create+0x1d0>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800f78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f790:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800f792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f794:	3b01      	subs	r3, #1
 800f796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f798:	4413      	add	r3, r2
 800f79a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800f79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	647b      	str	r3, [r7, #68]	; 0x44
 800f7a4:	e02b      	b.n	800f7fe <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d101      	bne.n	800f7b2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800f7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d028      	beq.n	800f80a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800f7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d308      	bcc.n	800f7d4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800f7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d203      	bcs.n	800f7d4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800f7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d308      	bcc.n	800f7f0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800f7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d203      	bcs.n	800f7f0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800f7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7f6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f7fe:	4b42      	ldr	r3, [pc, #264]	; (800f908 <_txe_thread_create+0x1d4>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f804:	429a      	cmp	r2, r3
 800f806:	d3ce      	bcc.n	800f7a6 <_txe_thread_create+0x72>
 800f808:	e000      	b.n	800f80c <_txe_thread_create+0xd8>
                break;
 800f80a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f80c:	f3ef 8310 	mrs	r3, PRIMASK
 800f810:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f812:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f814:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f816:	b672      	cpsid	i
    return(int_posture);
 800f818:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f81a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f81c:	4b38      	ldr	r3, [pc, #224]	; (800f900 <_txe_thread_create+0x1cc>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	3b01      	subs	r3, #1
 800f822:	4a37      	ldr	r2, [pc, #220]	; (800f900 <_txe_thread_create+0x1cc>)
 800f824:	6013      	str	r3, [r2, #0]
 800f826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f828:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	f383 8810 	msr	PRIMASK, r3
}
 800f830:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f832:	f7fe fddf 	bl	800e3f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d102      	bne.n	800f844 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800f83e:	230e      	movs	r3, #14
 800f840:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f842:	e042      	b.n	800f8ca <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800f844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f846:	2b00      	cmp	r3, #0
 800f848:	d102      	bne.n	800f850 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f84a:	2303      	movs	r3, #3
 800f84c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f84e:	e03c      	b.n	800f8ca <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d102      	bne.n	800f85c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f856:	2303      	movs	r3, #3
 800f858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f85a:	e036      	b.n	800f8ca <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800f85c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f85e:	2bc7      	cmp	r3, #199	; 0xc7
 800f860:	d802      	bhi.n	800f868 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800f862:	2305      	movs	r3, #5
 800f864:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f866:	e030      	b.n	800f8ca <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800f868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f86a:	2b1f      	cmp	r3, #31
 800f86c:	d902      	bls.n	800f874 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800f86e:	230f      	movs	r3, #15
 800f870:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f872:	e02a      	b.n	800f8ca <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800f874:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f878:	429a      	cmp	r2, r3
 800f87a:	d902      	bls.n	800f882 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800f87c:	2318      	movs	r3, #24
 800f87e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f880:	e023      	b.n	800f8ca <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800f882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f884:	2b01      	cmp	r3, #1
 800f886:	d902      	bls.n	800f88e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800f888:	2310      	movs	r3, #16
 800f88a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f88c:	e01d      	b.n	800f8ca <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800f88e:	4b1f      	ldr	r3, [pc, #124]	; (800f90c <_txe_thread_create+0x1d8>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	4a1e      	ldr	r2, [pc, #120]	; (800f910 <_txe_thread_create+0x1dc>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d101      	bne.n	800f8a0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f89c:	2313      	movs	r3, #19
 800f89e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f8a0:	f3ef 8305 	mrs	r3, IPSR
 800f8a4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f8a6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f8a8:	4b1a      	ldr	r3, [pc, #104]	; (800f914 <_txe_thread_create+0x1e0>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00b      	beq.n	800f8ca <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f8b2:	f3ef 8305 	mrs	r3, IPSR
 800f8b6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f8b8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f8ba:	4b16      	ldr	r3, [pc, #88]	; (800f914 <_txe_thread_create+0x1e0>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f8c4:	d201      	bcs.n	800f8ca <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800f8c6:	2313      	movs	r3, #19
 800f8c8:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d112      	bne.n	800f8f6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800f8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d2:	9305      	str	r3, [sp, #20]
 800f8d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f8d6:	9304      	str	r3, [sp, #16]
 800f8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8da:	9303      	str	r3, [sp, #12]
 800f8dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8de:	9302      	str	r3, [sp, #8]
 800f8e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8e2:	9301      	str	r3, [sp, #4]
 800f8e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	68b9      	ldr	r1, [r7, #8]
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f7fe fa1a 	bl	800dd28 <_tx_thread_create>
 800f8f4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800f8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3750      	adds	r7, #80	; 0x50
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	20017dac 	.word	0x20017dac
 800f904:	20017d18 	.word	0x20017d18
 800f908:	20017d1c 	.word	0x20017d1c
 800f90c:	20017d10 	.word	0x20017d10
 800f910:	20017e5c 	.word	0x20017e5c
 800f914:	2000008c 	.word	0x2000008c

0800f918 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f920:	f3ef 8305 	mrs	r3, IPSR
 800f924:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800f926:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f928:	4b0f      	ldr	r3, [pc, #60]	; (800f968 <_txe_thread_delete+0x50>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d002      	beq.n	800f938 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800f932:	2313      	movs	r3, #19
 800f934:	60fb      	str	r3, [r7, #12]
 800f936:	e011      	b.n	800f95c <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d102      	bne.n	800f944 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f93e:	230e      	movs	r3, #14
 800f940:	60fb      	str	r3, [r7, #12]
 800f942:	e00b      	b.n	800f95c <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a08      	ldr	r2, [pc, #32]	; (800f96c <_txe_thread_delete+0x54>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d002      	beq.n	800f954 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f94e:	230e      	movs	r3, #14
 800f950:	60fb      	str	r3, [r7, #12]
 800f952:	e003      	b.n	800f95c <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7fe fad1 	bl	800defc <_tx_thread_delete>
 800f95a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800f95c:	68fb      	ldr	r3, [r7, #12]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	2000008c 	.word	0x2000008c
 800f96c:	54485244 	.word	0x54485244

0800f970 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d102      	bne.n	800f984 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f97e:	230e      	movs	r3, #14
 800f980:	60fb      	str	r3, [r7, #12]
 800f982:	e00b      	b.n	800f99c <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a07      	ldr	r2, [pc, #28]	; (800f9a8 <_txe_thread_resume+0x38>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d002      	beq.n	800f994 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f98e:	230e      	movs	r3, #14
 800f990:	60fb      	str	r3, [r7, #12]
 800f992:	e003      	b.n	800f99c <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7fe fc01 	bl	800e19c <_tx_thread_resume>
 800f99a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800f99c:	68fb      	ldr	r3, [r7, #12]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	54485244 	.word	0x54485244

0800f9ac <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d102      	bne.n	800f9c0 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800f9ba:	2315      	movs	r3, #21
 800f9bc:	60fb      	str	r3, [r7, #12]
 800f9be:	e00b      	b.n	800f9d8 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a07      	ldr	r2, [pc, #28]	; (800f9e4 <_txe_timer_activate+0x38>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d002      	beq.n	800f9d0 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800f9ca:	2315      	movs	r3, #21
 800f9cc:	60fb      	str	r3, [r7, #12]
 800f9ce:	e003      	b.n	800f9d8 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff f87b 	bl	800eacc <_tx_timer_activate>
 800f9d6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	4154494d 	.word	0x4154494d

0800f9e8 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b096      	sub	sp, #88	; 0x58
 800f9ec:	af04      	add	r7, sp, #16
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d102      	bne.n	800fa06 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800fa00:	2315      	movs	r3, #21
 800fa02:	647b      	str	r3, [r7, #68]	; 0x44
 800fa04:	e059      	b.n	800faba <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800fa06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa08:	2b2c      	cmp	r3, #44	; 0x2c
 800fa0a:	d002      	beq.n	800fa12 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800fa0c:	2315      	movs	r3, #21
 800fa0e:	647b      	str	r3, [r7, #68]	; 0x44
 800fa10:	e053      	b.n	800faba <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa12:	f3ef 8310 	mrs	r3, PRIMASK
 800fa16:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800fa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800fa1a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa1c:	b672      	cpsid	i
    return(int_posture);
 800fa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800fa20:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800fa22:	4b41      	ldr	r3, [pc, #260]	; (800fb28 <_txe_timer_create+0x140>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	3301      	adds	r3, #1
 800fa28:	4a3f      	ldr	r2, [pc, #252]	; (800fb28 <_txe_timer_create+0x140>)
 800fa2a:	6013      	str	r3, [r2, #0]
 800fa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa32:	f383 8810 	msr	PRIMASK, r3
}
 800fa36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800fa38:	4b3c      	ldr	r3, [pc, #240]	; (800fb2c <_txe_timer_create+0x144>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800fa3e:	2300      	movs	r3, #0
 800fa40:	643b      	str	r3, [r7, #64]	; 0x40
 800fa42:	e009      	b.n	800fa58 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d00b      	beq.n	800fa64 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800fa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa50:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800fa52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa54:	3301      	adds	r3, #1
 800fa56:	643b      	str	r3, [r7, #64]	; 0x40
 800fa58:	4b35      	ldr	r3, [pc, #212]	; (800fb30 <_txe_timer_create+0x148>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d3f0      	bcc.n	800fa44 <_txe_timer_create+0x5c>
 800fa62:	e000      	b.n	800fa66 <_txe_timer_create+0x7e>
                break;
 800fa64:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa66:	f3ef 8310 	mrs	r3, PRIMASK
 800fa6a:	623b      	str	r3, [r7, #32]
    return(posture);
 800fa6c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fa6e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa70:	b672      	cpsid	i
    return(int_posture);
 800fa72:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800fa74:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800fa76:	4b2c      	ldr	r3, [pc, #176]	; (800fb28 <_txe_timer_create+0x140>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	4a2a      	ldr	r2, [pc, #168]	; (800fb28 <_txe_timer_create+0x140>)
 800fa7e:	6013      	str	r3, [r2, #0]
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	f383 8810 	msr	PRIMASK, r3
}
 800fa8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fa8c:	f7fe fcb2 	bl	800e3f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d102      	bne.n	800fa9e <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800fa98:	2315      	movs	r3, #21
 800fa9a:	647b      	str	r3, [r7, #68]	; 0x44
 800fa9c:	e00d      	b.n	800faba <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800fa9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800faa4:	2316      	movs	r3, #22
 800faa6:	647b      	str	r3, [r7, #68]	; 0x44
 800faa8:	e007      	b.n	800faba <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800faaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faac:	2b01      	cmp	r3, #1
 800faae:	d004      	beq.n	800faba <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800fab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800fab6:	2317      	movs	r3, #23
 800fab8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800faba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d11d      	bne.n	800fafc <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800fac0:	4b1c      	ldr	r3, [pc, #112]	; (800fb34 <_txe_timer_create+0x14c>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800fac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac8:	4a1b      	ldr	r2, [pc, #108]	; (800fb38 <_txe_timer_create+0x150>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d101      	bne.n	800fad2 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800face:	2313      	movs	r3, #19
 800fad0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fad2:	f3ef 8305 	mrs	r3, IPSR
 800fad6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800fad8:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800fada:	4b18      	ldr	r3, [pc, #96]	; (800fb3c <_txe_timer_create+0x154>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4313      	orrs	r3, r2
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00b      	beq.n	800fafc <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fae4:	f3ef 8305 	mrs	r3, IPSR
 800fae8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800faea:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800faec:	4b13      	ldr	r3, [pc, #76]	; (800fb3c <_txe_timer_create+0x154>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4313      	orrs	r3, r2
 800faf2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800faf6:	d201      	bcs.n	800fafc <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800faf8:	2313      	movs	r3, #19
 800fafa:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800fafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d10c      	bne.n	800fb1c <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800fb02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb04:	9302      	str	r3, [sp, #8]
 800fb06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb08:	9301      	str	r3, [sp, #4]
 800fb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	68b9      	ldr	r1, [r7, #8]
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7ff f805 	bl	800eb24 <_tx_timer_create>
 800fb1a:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800fb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3748      	adds	r7, #72	; 0x48
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	20017dac 	.word	0x20017dac
 800fb2c:	20017e50 	.word	0x20017e50
 800fb30:	20017e54 	.word	0x20017e54
 800fb34:	20017d10 	.word	0x20017d10
 800fb38:	20017e5c 	.word	0x20017e5c
 800fb3c:	2000008c 	.word	0x2000008c

0800fb40 <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d102      	bne.n	800fb58 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800fb52:	2315      	movs	r3, #21
 800fb54:	617b      	str	r3, [r7, #20]
 800fb56:	e023      	b.n	800fba0 <_txe_timer_delete+0x60>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a13      	ldr	r2, [pc, #76]	; (800fbac <_txe_timer_delete+0x6c>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d002      	beq.n	800fb68 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800fb62:	2315      	movs	r3, #21
 800fb64:	617b      	str	r3, [r7, #20]
 800fb66:	e01b      	b.n	800fba0 <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fb68:	f3ef 8305 	mrs	r3, IPSR
 800fb6c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800fb6e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800fb70:	4b0f      	ldr	r3, [pc, #60]	; (800fbb0 <_txe_timer_delete+0x70>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d002      	beq.n	800fb80 <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800fb7a:	2313      	movs	r3, #19
 800fb7c:	617b      	str	r3, [r7, #20]
 800fb7e:	e00f      	b.n	800fba0 <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800fb80:	4b0c      	ldr	r3, [pc, #48]	; (800fbb4 <_txe_timer_delete+0x74>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	4a0b      	ldr	r2, [pc, #44]	; (800fbb8 <_txe_timer_delete+0x78>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d101      	bne.n	800fb92 <_txe_timer_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800fb8e:	2313      	movs	r3, #19
 800fb90:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d103      	bne.n	800fba0 <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7ff f827 	bl	800ebec <_tx_timer_delete>
 800fb9e:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800fba0:	697b      	ldr	r3, [r7, #20]
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3718      	adds	r7, #24
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	4154494d 	.word	0x4154494d
 800fbb0:	2000008c 	.word	0x2000008c
 800fbb4:	20017d10 	.word	0x20017d10
 800fbb8:	20017e5c 	.word	0x20017e5c

0800fbbc <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b085      	sub	sp, #20
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_NetXDuo_Init */

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3714      	adds	r7, #20
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
	...

0800fbdc <rand>:
 800fbdc:	4b16      	ldr	r3, [pc, #88]	; (800fc38 <rand+0x5c>)
 800fbde:	b510      	push	{r4, lr}
 800fbe0:	681c      	ldr	r4, [r3, #0]
 800fbe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbe4:	b9b3      	cbnz	r3, 800fc14 <rand+0x38>
 800fbe6:	2018      	movs	r0, #24
 800fbe8:	f000 fa30 	bl	801004c <malloc>
 800fbec:	4602      	mov	r2, r0
 800fbee:	6320      	str	r0, [r4, #48]	; 0x30
 800fbf0:	b920      	cbnz	r0, 800fbfc <rand+0x20>
 800fbf2:	4b12      	ldr	r3, [pc, #72]	; (800fc3c <rand+0x60>)
 800fbf4:	4812      	ldr	r0, [pc, #72]	; (800fc40 <rand+0x64>)
 800fbf6:	2152      	movs	r1, #82	; 0x52
 800fbf8:	f000 f9be 	bl	800ff78 <__assert_func>
 800fbfc:	4911      	ldr	r1, [pc, #68]	; (800fc44 <rand+0x68>)
 800fbfe:	4b12      	ldr	r3, [pc, #72]	; (800fc48 <rand+0x6c>)
 800fc00:	e9c0 1300 	strd	r1, r3, [r0]
 800fc04:	4b11      	ldr	r3, [pc, #68]	; (800fc4c <rand+0x70>)
 800fc06:	6083      	str	r3, [r0, #8]
 800fc08:	230b      	movs	r3, #11
 800fc0a:	8183      	strh	r3, [r0, #12]
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	2001      	movs	r0, #1
 800fc10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fc14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fc16:	480e      	ldr	r0, [pc, #56]	; (800fc50 <rand+0x74>)
 800fc18:	690b      	ldr	r3, [r1, #16]
 800fc1a:	694c      	ldr	r4, [r1, #20]
 800fc1c:	4a0d      	ldr	r2, [pc, #52]	; (800fc54 <rand+0x78>)
 800fc1e:	4358      	muls	r0, r3
 800fc20:	fb02 0004 	mla	r0, r2, r4, r0
 800fc24:	fba3 3202 	umull	r3, r2, r3, r2
 800fc28:	3301      	adds	r3, #1
 800fc2a:	eb40 0002 	adc.w	r0, r0, r2
 800fc2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fc32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fc36:	bd10      	pop	{r4, pc}
 800fc38:	200000e8 	.word	0x200000e8
 800fc3c:	08010cc8 	.word	0x08010cc8
 800fc40:	08010cdf 	.word	0x08010cdf
 800fc44:	abcd330e 	.word	0xabcd330e
 800fc48:	e66d1234 	.word	0xe66d1234
 800fc4c:	0005deec 	.word	0x0005deec
 800fc50:	5851f42d 	.word	0x5851f42d
 800fc54:	4c957f2d 	.word	0x4c957f2d

0800fc58 <std>:
 800fc58:	2300      	movs	r3, #0
 800fc5a:	b510      	push	{r4, lr}
 800fc5c:	4604      	mov	r4, r0
 800fc5e:	e9c0 3300 	strd	r3, r3, [r0]
 800fc62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc66:	6083      	str	r3, [r0, #8]
 800fc68:	8181      	strh	r1, [r0, #12]
 800fc6a:	6643      	str	r3, [r0, #100]	; 0x64
 800fc6c:	81c2      	strh	r2, [r0, #14]
 800fc6e:	6183      	str	r3, [r0, #24]
 800fc70:	4619      	mov	r1, r3
 800fc72:	2208      	movs	r2, #8
 800fc74:	305c      	adds	r0, #92	; 0x5c
 800fc76:	f000 f8f4 	bl	800fe62 <memset>
 800fc7a:	4b0d      	ldr	r3, [pc, #52]	; (800fcb0 <std+0x58>)
 800fc7c:	6263      	str	r3, [r4, #36]	; 0x24
 800fc7e:	4b0d      	ldr	r3, [pc, #52]	; (800fcb4 <std+0x5c>)
 800fc80:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc82:	4b0d      	ldr	r3, [pc, #52]	; (800fcb8 <std+0x60>)
 800fc84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc86:	4b0d      	ldr	r3, [pc, #52]	; (800fcbc <std+0x64>)
 800fc88:	6323      	str	r3, [r4, #48]	; 0x30
 800fc8a:	4b0d      	ldr	r3, [pc, #52]	; (800fcc0 <std+0x68>)
 800fc8c:	6224      	str	r4, [r4, #32]
 800fc8e:	429c      	cmp	r4, r3
 800fc90:	d006      	beq.n	800fca0 <std+0x48>
 800fc92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fc96:	4294      	cmp	r4, r2
 800fc98:	d002      	beq.n	800fca0 <std+0x48>
 800fc9a:	33d0      	adds	r3, #208	; 0xd0
 800fc9c:	429c      	cmp	r4, r3
 800fc9e:	d105      	bne.n	800fcac <std+0x54>
 800fca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca8:	f000 b954 	b.w	800ff54 <__retarget_lock_init_recursive>
 800fcac:	bd10      	pop	{r4, pc}
 800fcae:	bf00      	nop
 800fcb0:	0800fddd 	.word	0x0800fddd
 800fcb4:	0800fdff 	.word	0x0800fdff
 800fcb8:	0800fe37 	.word	0x0800fe37
 800fcbc:	0800fe5b 	.word	0x0800fe5b
 800fcc0:	2001831c 	.word	0x2001831c

0800fcc4 <stdio_exit_handler>:
 800fcc4:	4a02      	ldr	r2, [pc, #8]	; (800fcd0 <stdio_exit_handler+0xc>)
 800fcc6:	4903      	ldr	r1, [pc, #12]	; (800fcd4 <stdio_exit_handler+0x10>)
 800fcc8:	4803      	ldr	r0, [pc, #12]	; (800fcd8 <stdio_exit_handler+0x14>)
 800fcca:	f000 b869 	b.w	800fda0 <_fwalk_sglue>
 800fcce:	bf00      	nop
 800fcd0:	20000090 	.word	0x20000090
 800fcd4:	080102c1 	.word	0x080102c1
 800fcd8:	2000009c 	.word	0x2000009c

0800fcdc <cleanup_stdio>:
 800fcdc:	6841      	ldr	r1, [r0, #4]
 800fcde:	4b0c      	ldr	r3, [pc, #48]	; (800fd10 <cleanup_stdio+0x34>)
 800fce0:	4299      	cmp	r1, r3
 800fce2:	b510      	push	{r4, lr}
 800fce4:	4604      	mov	r4, r0
 800fce6:	d001      	beq.n	800fcec <cleanup_stdio+0x10>
 800fce8:	f000 faea 	bl	80102c0 <_fflush_r>
 800fcec:	68a1      	ldr	r1, [r4, #8]
 800fcee:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <cleanup_stdio+0x38>)
 800fcf0:	4299      	cmp	r1, r3
 800fcf2:	d002      	beq.n	800fcfa <cleanup_stdio+0x1e>
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f000 fae3 	bl	80102c0 <_fflush_r>
 800fcfa:	68e1      	ldr	r1, [r4, #12]
 800fcfc:	4b06      	ldr	r3, [pc, #24]	; (800fd18 <cleanup_stdio+0x3c>)
 800fcfe:	4299      	cmp	r1, r3
 800fd00:	d004      	beq.n	800fd0c <cleanup_stdio+0x30>
 800fd02:	4620      	mov	r0, r4
 800fd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd08:	f000 bada 	b.w	80102c0 <_fflush_r>
 800fd0c:	bd10      	pop	{r4, pc}
 800fd0e:	bf00      	nop
 800fd10:	2001831c 	.word	0x2001831c
 800fd14:	20018384 	.word	0x20018384
 800fd18:	200183ec 	.word	0x200183ec

0800fd1c <global_stdio_init.part.0>:
 800fd1c:	b510      	push	{r4, lr}
 800fd1e:	4b0b      	ldr	r3, [pc, #44]	; (800fd4c <global_stdio_init.part.0+0x30>)
 800fd20:	4c0b      	ldr	r4, [pc, #44]	; (800fd50 <global_stdio_init.part.0+0x34>)
 800fd22:	4a0c      	ldr	r2, [pc, #48]	; (800fd54 <global_stdio_init.part.0+0x38>)
 800fd24:	601a      	str	r2, [r3, #0]
 800fd26:	4620      	mov	r0, r4
 800fd28:	2200      	movs	r2, #0
 800fd2a:	2104      	movs	r1, #4
 800fd2c:	f7ff ff94 	bl	800fc58 <std>
 800fd30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fd34:	2201      	movs	r2, #1
 800fd36:	2109      	movs	r1, #9
 800fd38:	f7ff ff8e 	bl	800fc58 <std>
 800fd3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fd40:	2202      	movs	r2, #2
 800fd42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd46:	2112      	movs	r1, #18
 800fd48:	f7ff bf86 	b.w	800fc58 <std>
 800fd4c:	20018454 	.word	0x20018454
 800fd50:	2001831c 	.word	0x2001831c
 800fd54:	0800fcc5 	.word	0x0800fcc5

0800fd58 <__sfp_lock_acquire>:
 800fd58:	4801      	ldr	r0, [pc, #4]	; (800fd60 <__sfp_lock_acquire+0x8>)
 800fd5a:	f000 b8fc 	b.w	800ff56 <__retarget_lock_acquire_recursive>
 800fd5e:	bf00      	nop
 800fd60:	2001845d 	.word	0x2001845d

0800fd64 <__sfp_lock_release>:
 800fd64:	4801      	ldr	r0, [pc, #4]	; (800fd6c <__sfp_lock_release+0x8>)
 800fd66:	f000 b8f7 	b.w	800ff58 <__retarget_lock_release_recursive>
 800fd6a:	bf00      	nop
 800fd6c:	2001845d 	.word	0x2001845d

0800fd70 <__sinit>:
 800fd70:	b510      	push	{r4, lr}
 800fd72:	4604      	mov	r4, r0
 800fd74:	f7ff fff0 	bl	800fd58 <__sfp_lock_acquire>
 800fd78:	6a23      	ldr	r3, [r4, #32]
 800fd7a:	b11b      	cbz	r3, 800fd84 <__sinit+0x14>
 800fd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd80:	f7ff bff0 	b.w	800fd64 <__sfp_lock_release>
 800fd84:	4b04      	ldr	r3, [pc, #16]	; (800fd98 <__sinit+0x28>)
 800fd86:	6223      	str	r3, [r4, #32]
 800fd88:	4b04      	ldr	r3, [pc, #16]	; (800fd9c <__sinit+0x2c>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d1f5      	bne.n	800fd7c <__sinit+0xc>
 800fd90:	f7ff ffc4 	bl	800fd1c <global_stdio_init.part.0>
 800fd94:	e7f2      	b.n	800fd7c <__sinit+0xc>
 800fd96:	bf00      	nop
 800fd98:	0800fcdd 	.word	0x0800fcdd
 800fd9c:	20018454 	.word	0x20018454

0800fda0 <_fwalk_sglue>:
 800fda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fda4:	4607      	mov	r7, r0
 800fda6:	4688      	mov	r8, r1
 800fda8:	4614      	mov	r4, r2
 800fdaa:	2600      	movs	r6, #0
 800fdac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdb0:	f1b9 0901 	subs.w	r9, r9, #1
 800fdb4:	d505      	bpl.n	800fdc2 <_fwalk_sglue+0x22>
 800fdb6:	6824      	ldr	r4, [r4, #0]
 800fdb8:	2c00      	cmp	r4, #0
 800fdba:	d1f7      	bne.n	800fdac <_fwalk_sglue+0xc>
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdc2:	89ab      	ldrh	r3, [r5, #12]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d907      	bls.n	800fdd8 <_fwalk_sglue+0x38>
 800fdc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	d003      	beq.n	800fdd8 <_fwalk_sglue+0x38>
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	4638      	mov	r0, r7
 800fdd4:	47c0      	blx	r8
 800fdd6:	4306      	orrs	r6, r0
 800fdd8:	3568      	adds	r5, #104	; 0x68
 800fdda:	e7e9      	b.n	800fdb0 <_fwalk_sglue+0x10>

0800fddc <__sread>:
 800fddc:	b510      	push	{r4, lr}
 800fdde:	460c      	mov	r4, r1
 800fde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fde4:	f000 f868 	bl	800feb8 <_read_r>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	bfab      	itete	ge
 800fdec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fdee:	89a3      	ldrhlt	r3, [r4, #12]
 800fdf0:	181b      	addge	r3, r3, r0
 800fdf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fdf6:	bfac      	ite	ge
 800fdf8:	6563      	strge	r3, [r4, #84]	; 0x54
 800fdfa:	81a3      	strhlt	r3, [r4, #12]
 800fdfc:	bd10      	pop	{r4, pc}

0800fdfe <__swrite>:
 800fdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe02:	461f      	mov	r7, r3
 800fe04:	898b      	ldrh	r3, [r1, #12]
 800fe06:	05db      	lsls	r3, r3, #23
 800fe08:	4605      	mov	r5, r0
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	4616      	mov	r6, r2
 800fe0e:	d505      	bpl.n	800fe1c <__swrite+0x1e>
 800fe10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe14:	2302      	movs	r3, #2
 800fe16:	2200      	movs	r2, #0
 800fe18:	f000 f83c 	bl	800fe94 <_lseek_r>
 800fe1c:	89a3      	ldrh	r3, [r4, #12]
 800fe1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe26:	81a3      	strh	r3, [r4, #12]
 800fe28:	4632      	mov	r2, r6
 800fe2a:	463b      	mov	r3, r7
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe32:	f000 b853 	b.w	800fedc <_write_r>

0800fe36 <__sseek>:
 800fe36:	b510      	push	{r4, lr}
 800fe38:	460c      	mov	r4, r1
 800fe3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe3e:	f000 f829 	bl	800fe94 <_lseek_r>
 800fe42:	1c43      	adds	r3, r0, #1
 800fe44:	89a3      	ldrh	r3, [r4, #12]
 800fe46:	bf15      	itete	ne
 800fe48:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe52:	81a3      	strheq	r3, [r4, #12]
 800fe54:	bf18      	it	ne
 800fe56:	81a3      	strhne	r3, [r4, #12]
 800fe58:	bd10      	pop	{r4, pc}

0800fe5a <__sclose>:
 800fe5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe5e:	f000 b809 	b.w	800fe74 <_close_r>

0800fe62 <memset>:
 800fe62:	4402      	add	r2, r0
 800fe64:	4603      	mov	r3, r0
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d100      	bne.n	800fe6c <memset+0xa>
 800fe6a:	4770      	bx	lr
 800fe6c:	f803 1b01 	strb.w	r1, [r3], #1
 800fe70:	e7f9      	b.n	800fe66 <memset+0x4>
	...

0800fe74 <_close_r>:
 800fe74:	b538      	push	{r3, r4, r5, lr}
 800fe76:	4d06      	ldr	r5, [pc, #24]	; (800fe90 <_close_r+0x1c>)
 800fe78:	2300      	movs	r3, #0
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	4608      	mov	r0, r1
 800fe7e:	602b      	str	r3, [r5, #0]
 800fe80:	f7f1 f99d 	bl	80011be <_close>
 800fe84:	1c43      	adds	r3, r0, #1
 800fe86:	d102      	bne.n	800fe8e <_close_r+0x1a>
 800fe88:	682b      	ldr	r3, [r5, #0]
 800fe8a:	b103      	cbz	r3, 800fe8e <_close_r+0x1a>
 800fe8c:	6023      	str	r3, [r4, #0]
 800fe8e:	bd38      	pop	{r3, r4, r5, pc}
 800fe90:	20018458 	.word	0x20018458

0800fe94 <_lseek_r>:
 800fe94:	b538      	push	{r3, r4, r5, lr}
 800fe96:	4d07      	ldr	r5, [pc, #28]	; (800feb4 <_lseek_r+0x20>)
 800fe98:	4604      	mov	r4, r0
 800fe9a:	4608      	mov	r0, r1
 800fe9c:	4611      	mov	r1, r2
 800fe9e:	2200      	movs	r2, #0
 800fea0:	602a      	str	r2, [r5, #0]
 800fea2:	461a      	mov	r2, r3
 800fea4:	f7f1 f9b2 	bl	800120c <_lseek>
 800fea8:	1c43      	adds	r3, r0, #1
 800feaa:	d102      	bne.n	800feb2 <_lseek_r+0x1e>
 800feac:	682b      	ldr	r3, [r5, #0]
 800feae:	b103      	cbz	r3, 800feb2 <_lseek_r+0x1e>
 800feb0:	6023      	str	r3, [r4, #0]
 800feb2:	bd38      	pop	{r3, r4, r5, pc}
 800feb4:	20018458 	.word	0x20018458

0800feb8 <_read_r>:
 800feb8:	b538      	push	{r3, r4, r5, lr}
 800feba:	4d07      	ldr	r5, [pc, #28]	; (800fed8 <_read_r+0x20>)
 800febc:	4604      	mov	r4, r0
 800febe:	4608      	mov	r0, r1
 800fec0:	4611      	mov	r1, r2
 800fec2:	2200      	movs	r2, #0
 800fec4:	602a      	str	r2, [r5, #0]
 800fec6:	461a      	mov	r2, r3
 800fec8:	f7f1 f940 	bl	800114c <_read>
 800fecc:	1c43      	adds	r3, r0, #1
 800fece:	d102      	bne.n	800fed6 <_read_r+0x1e>
 800fed0:	682b      	ldr	r3, [r5, #0]
 800fed2:	b103      	cbz	r3, 800fed6 <_read_r+0x1e>
 800fed4:	6023      	str	r3, [r4, #0]
 800fed6:	bd38      	pop	{r3, r4, r5, pc}
 800fed8:	20018458 	.word	0x20018458

0800fedc <_write_r>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4d07      	ldr	r5, [pc, #28]	; (800fefc <_write_r+0x20>)
 800fee0:	4604      	mov	r4, r0
 800fee2:	4608      	mov	r0, r1
 800fee4:	4611      	mov	r1, r2
 800fee6:	2200      	movs	r2, #0
 800fee8:	602a      	str	r2, [r5, #0]
 800feea:	461a      	mov	r2, r3
 800feec:	f7f1 f94b 	bl	8001186 <_write>
 800fef0:	1c43      	adds	r3, r0, #1
 800fef2:	d102      	bne.n	800fefa <_write_r+0x1e>
 800fef4:	682b      	ldr	r3, [r5, #0]
 800fef6:	b103      	cbz	r3, 800fefa <_write_r+0x1e>
 800fef8:	6023      	str	r3, [r4, #0]
 800fefa:	bd38      	pop	{r3, r4, r5, pc}
 800fefc:	20018458 	.word	0x20018458

0800ff00 <__errno>:
 800ff00:	4b01      	ldr	r3, [pc, #4]	; (800ff08 <__errno+0x8>)
 800ff02:	6818      	ldr	r0, [r3, #0]
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	200000e8 	.word	0x200000e8

0800ff0c <__libc_init_array>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	4d0d      	ldr	r5, [pc, #52]	; (800ff44 <__libc_init_array+0x38>)
 800ff10:	4c0d      	ldr	r4, [pc, #52]	; (800ff48 <__libc_init_array+0x3c>)
 800ff12:	1b64      	subs	r4, r4, r5
 800ff14:	10a4      	asrs	r4, r4, #2
 800ff16:	2600      	movs	r6, #0
 800ff18:	42a6      	cmp	r6, r4
 800ff1a:	d109      	bne.n	800ff30 <__libc_init_array+0x24>
 800ff1c:	4d0b      	ldr	r5, [pc, #44]	; (800ff4c <__libc_init_array+0x40>)
 800ff1e:	4c0c      	ldr	r4, [pc, #48]	; (800ff50 <__libc_init_array+0x44>)
 800ff20:	f000 fe50 	bl	8010bc4 <_init>
 800ff24:	1b64      	subs	r4, r4, r5
 800ff26:	10a4      	asrs	r4, r4, #2
 800ff28:	2600      	movs	r6, #0
 800ff2a:	42a6      	cmp	r6, r4
 800ff2c:	d105      	bne.n	800ff3a <__libc_init_array+0x2e>
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff34:	4798      	blx	r3
 800ff36:	3601      	adds	r6, #1
 800ff38:	e7ee      	b.n	800ff18 <__libc_init_array+0xc>
 800ff3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff3e:	4798      	blx	r3
 800ff40:	3601      	adds	r6, #1
 800ff42:	e7f2      	b.n	800ff2a <__libc_init_array+0x1e>
 800ff44:	08010db0 	.word	0x08010db0
 800ff48:	08010db0 	.word	0x08010db0
 800ff4c:	08010db0 	.word	0x08010db0
 800ff50:	08010db4 	.word	0x08010db4

0800ff54 <__retarget_lock_init_recursive>:
 800ff54:	4770      	bx	lr

0800ff56 <__retarget_lock_acquire_recursive>:
 800ff56:	4770      	bx	lr

0800ff58 <__retarget_lock_release_recursive>:
 800ff58:	4770      	bx	lr

0800ff5a <memcpy>:
 800ff5a:	440a      	add	r2, r1
 800ff5c:	4291      	cmp	r1, r2
 800ff5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff62:	d100      	bne.n	800ff66 <memcpy+0xc>
 800ff64:	4770      	bx	lr
 800ff66:	b510      	push	{r4, lr}
 800ff68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff70:	4291      	cmp	r1, r2
 800ff72:	d1f9      	bne.n	800ff68 <memcpy+0xe>
 800ff74:	bd10      	pop	{r4, pc}
	...

0800ff78 <__assert_func>:
 800ff78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff7a:	4614      	mov	r4, r2
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	4b09      	ldr	r3, [pc, #36]	; (800ffa4 <__assert_func+0x2c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	4605      	mov	r5, r0
 800ff84:	68d8      	ldr	r0, [r3, #12]
 800ff86:	b14c      	cbz	r4, 800ff9c <__assert_func+0x24>
 800ff88:	4b07      	ldr	r3, [pc, #28]	; (800ffa8 <__assert_func+0x30>)
 800ff8a:	9100      	str	r1, [sp, #0]
 800ff8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff90:	4906      	ldr	r1, [pc, #24]	; (800ffac <__assert_func+0x34>)
 800ff92:	462b      	mov	r3, r5
 800ff94:	f000 f9bc 	bl	8010310 <fiprintf>
 800ff98:	f000 f9dc 	bl	8010354 <abort>
 800ff9c:	4b04      	ldr	r3, [pc, #16]	; (800ffb0 <__assert_func+0x38>)
 800ff9e:	461c      	mov	r4, r3
 800ffa0:	e7f3      	b.n	800ff8a <__assert_func+0x12>
 800ffa2:	bf00      	nop
 800ffa4:	200000e8 	.word	0x200000e8
 800ffa8:	08010d37 	.word	0x08010d37
 800ffac:	08010d44 	.word	0x08010d44
 800ffb0:	08010d72 	.word	0x08010d72

0800ffb4 <_free_r>:
 800ffb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffb6:	2900      	cmp	r1, #0
 800ffb8:	d044      	beq.n	8010044 <_free_r+0x90>
 800ffba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffbe:	9001      	str	r0, [sp, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	f1a1 0404 	sub.w	r4, r1, #4
 800ffc6:	bfb8      	it	lt
 800ffc8:	18e4      	addlt	r4, r4, r3
 800ffca:	f000 f8e7 	bl	801019c <__malloc_lock>
 800ffce:	4a1e      	ldr	r2, [pc, #120]	; (8010048 <_free_r+0x94>)
 800ffd0:	9801      	ldr	r0, [sp, #4]
 800ffd2:	6813      	ldr	r3, [r2, #0]
 800ffd4:	b933      	cbnz	r3, 800ffe4 <_free_r+0x30>
 800ffd6:	6063      	str	r3, [r4, #4]
 800ffd8:	6014      	str	r4, [r2, #0]
 800ffda:	b003      	add	sp, #12
 800ffdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffe0:	f000 b8e2 	b.w	80101a8 <__malloc_unlock>
 800ffe4:	42a3      	cmp	r3, r4
 800ffe6:	d908      	bls.n	800fffa <_free_r+0x46>
 800ffe8:	6825      	ldr	r5, [r4, #0]
 800ffea:	1961      	adds	r1, r4, r5
 800ffec:	428b      	cmp	r3, r1
 800ffee:	bf01      	itttt	eq
 800fff0:	6819      	ldreq	r1, [r3, #0]
 800fff2:	685b      	ldreq	r3, [r3, #4]
 800fff4:	1949      	addeq	r1, r1, r5
 800fff6:	6021      	streq	r1, [r4, #0]
 800fff8:	e7ed      	b.n	800ffd6 <_free_r+0x22>
 800fffa:	461a      	mov	r2, r3
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	b10b      	cbz	r3, 8010004 <_free_r+0x50>
 8010000:	42a3      	cmp	r3, r4
 8010002:	d9fa      	bls.n	800fffa <_free_r+0x46>
 8010004:	6811      	ldr	r1, [r2, #0]
 8010006:	1855      	adds	r5, r2, r1
 8010008:	42a5      	cmp	r5, r4
 801000a:	d10b      	bne.n	8010024 <_free_r+0x70>
 801000c:	6824      	ldr	r4, [r4, #0]
 801000e:	4421      	add	r1, r4
 8010010:	1854      	adds	r4, r2, r1
 8010012:	42a3      	cmp	r3, r4
 8010014:	6011      	str	r1, [r2, #0]
 8010016:	d1e0      	bne.n	800ffda <_free_r+0x26>
 8010018:	681c      	ldr	r4, [r3, #0]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	6053      	str	r3, [r2, #4]
 801001e:	440c      	add	r4, r1
 8010020:	6014      	str	r4, [r2, #0]
 8010022:	e7da      	b.n	800ffda <_free_r+0x26>
 8010024:	d902      	bls.n	801002c <_free_r+0x78>
 8010026:	230c      	movs	r3, #12
 8010028:	6003      	str	r3, [r0, #0]
 801002a:	e7d6      	b.n	800ffda <_free_r+0x26>
 801002c:	6825      	ldr	r5, [r4, #0]
 801002e:	1961      	adds	r1, r4, r5
 8010030:	428b      	cmp	r3, r1
 8010032:	bf04      	itt	eq
 8010034:	6819      	ldreq	r1, [r3, #0]
 8010036:	685b      	ldreq	r3, [r3, #4]
 8010038:	6063      	str	r3, [r4, #4]
 801003a:	bf04      	itt	eq
 801003c:	1949      	addeq	r1, r1, r5
 801003e:	6021      	streq	r1, [r4, #0]
 8010040:	6054      	str	r4, [r2, #4]
 8010042:	e7ca      	b.n	800ffda <_free_r+0x26>
 8010044:	b003      	add	sp, #12
 8010046:	bd30      	pop	{r4, r5, pc}
 8010048:	20018460 	.word	0x20018460

0801004c <malloc>:
 801004c:	4b02      	ldr	r3, [pc, #8]	; (8010058 <malloc+0xc>)
 801004e:	4601      	mov	r1, r0
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	f000 b823 	b.w	801009c <_malloc_r>
 8010056:	bf00      	nop
 8010058:	200000e8 	.word	0x200000e8

0801005c <sbrk_aligned>:
 801005c:	b570      	push	{r4, r5, r6, lr}
 801005e:	4e0e      	ldr	r6, [pc, #56]	; (8010098 <sbrk_aligned+0x3c>)
 8010060:	460c      	mov	r4, r1
 8010062:	6831      	ldr	r1, [r6, #0]
 8010064:	4605      	mov	r5, r0
 8010066:	b911      	cbnz	r1, 801006e <sbrk_aligned+0x12>
 8010068:	f000 f964 	bl	8010334 <_sbrk_r>
 801006c:	6030      	str	r0, [r6, #0]
 801006e:	4621      	mov	r1, r4
 8010070:	4628      	mov	r0, r5
 8010072:	f000 f95f 	bl	8010334 <_sbrk_r>
 8010076:	1c43      	adds	r3, r0, #1
 8010078:	d00a      	beq.n	8010090 <sbrk_aligned+0x34>
 801007a:	1cc4      	adds	r4, r0, #3
 801007c:	f024 0403 	bic.w	r4, r4, #3
 8010080:	42a0      	cmp	r0, r4
 8010082:	d007      	beq.n	8010094 <sbrk_aligned+0x38>
 8010084:	1a21      	subs	r1, r4, r0
 8010086:	4628      	mov	r0, r5
 8010088:	f000 f954 	bl	8010334 <_sbrk_r>
 801008c:	3001      	adds	r0, #1
 801008e:	d101      	bne.n	8010094 <sbrk_aligned+0x38>
 8010090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010094:	4620      	mov	r0, r4
 8010096:	bd70      	pop	{r4, r5, r6, pc}
 8010098:	20018464 	.word	0x20018464

0801009c <_malloc_r>:
 801009c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100a0:	1ccd      	adds	r5, r1, #3
 80100a2:	f025 0503 	bic.w	r5, r5, #3
 80100a6:	3508      	adds	r5, #8
 80100a8:	2d0c      	cmp	r5, #12
 80100aa:	bf38      	it	cc
 80100ac:	250c      	movcc	r5, #12
 80100ae:	2d00      	cmp	r5, #0
 80100b0:	4607      	mov	r7, r0
 80100b2:	db01      	blt.n	80100b8 <_malloc_r+0x1c>
 80100b4:	42a9      	cmp	r1, r5
 80100b6:	d905      	bls.n	80100c4 <_malloc_r+0x28>
 80100b8:	230c      	movs	r3, #12
 80100ba:	603b      	str	r3, [r7, #0]
 80100bc:	2600      	movs	r6, #0
 80100be:	4630      	mov	r0, r6
 80100c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010198 <_malloc_r+0xfc>
 80100c8:	f000 f868 	bl	801019c <__malloc_lock>
 80100cc:	f8d8 3000 	ldr.w	r3, [r8]
 80100d0:	461c      	mov	r4, r3
 80100d2:	bb5c      	cbnz	r4, 801012c <_malloc_r+0x90>
 80100d4:	4629      	mov	r1, r5
 80100d6:	4638      	mov	r0, r7
 80100d8:	f7ff ffc0 	bl	801005c <sbrk_aligned>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	4604      	mov	r4, r0
 80100e0:	d155      	bne.n	801018e <_malloc_r+0xf2>
 80100e2:	f8d8 4000 	ldr.w	r4, [r8]
 80100e6:	4626      	mov	r6, r4
 80100e8:	2e00      	cmp	r6, #0
 80100ea:	d145      	bne.n	8010178 <_malloc_r+0xdc>
 80100ec:	2c00      	cmp	r4, #0
 80100ee:	d048      	beq.n	8010182 <_malloc_r+0xe6>
 80100f0:	6823      	ldr	r3, [r4, #0]
 80100f2:	4631      	mov	r1, r6
 80100f4:	4638      	mov	r0, r7
 80100f6:	eb04 0903 	add.w	r9, r4, r3
 80100fa:	f000 f91b 	bl	8010334 <_sbrk_r>
 80100fe:	4581      	cmp	r9, r0
 8010100:	d13f      	bne.n	8010182 <_malloc_r+0xe6>
 8010102:	6821      	ldr	r1, [r4, #0]
 8010104:	1a6d      	subs	r5, r5, r1
 8010106:	4629      	mov	r1, r5
 8010108:	4638      	mov	r0, r7
 801010a:	f7ff ffa7 	bl	801005c <sbrk_aligned>
 801010e:	3001      	adds	r0, #1
 8010110:	d037      	beq.n	8010182 <_malloc_r+0xe6>
 8010112:	6823      	ldr	r3, [r4, #0]
 8010114:	442b      	add	r3, r5
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	f8d8 3000 	ldr.w	r3, [r8]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d038      	beq.n	8010192 <_malloc_r+0xf6>
 8010120:	685a      	ldr	r2, [r3, #4]
 8010122:	42a2      	cmp	r2, r4
 8010124:	d12b      	bne.n	801017e <_malloc_r+0xe2>
 8010126:	2200      	movs	r2, #0
 8010128:	605a      	str	r2, [r3, #4]
 801012a:	e00f      	b.n	801014c <_malloc_r+0xb0>
 801012c:	6822      	ldr	r2, [r4, #0]
 801012e:	1b52      	subs	r2, r2, r5
 8010130:	d41f      	bmi.n	8010172 <_malloc_r+0xd6>
 8010132:	2a0b      	cmp	r2, #11
 8010134:	d917      	bls.n	8010166 <_malloc_r+0xca>
 8010136:	1961      	adds	r1, r4, r5
 8010138:	42a3      	cmp	r3, r4
 801013a:	6025      	str	r5, [r4, #0]
 801013c:	bf18      	it	ne
 801013e:	6059      	strne	r1, [r3, #4]
 8010140:	6863      	ldr	r3, [r4, #4]
 8010142:	bf08      	it	eq
 8010144:	f8c8 1000 	streq.w	r1, [r8]
 8010148:	5162      	str	r2, [r4, r5]
 801014a:	604b      	str	r3, [r1, #4]
 801014c:	4638      	mov	r0, r7
 801014e:	f104 060b 	add.w	r6, r4, #11
 8010152:	f000 f829 	bl	80101a8 <__malloc_unlock>
 8010156:	f026 0607 	bic.w	r6, r6, #7
 801015a:	1d23      	adds	r3, r4, #4
 801015c:	1af2      	subs	r2, r6, r3
 801015e:	d0ae      	beq.n	80100be <_malloc_r+0x22>
 8010160:	1b9b      	subs	r3, r3, r6
 8010162:	50a3      	str	r3, [r4, r2]
 8010164:	e7ab      	b.n	80100be <_malloc_r+0x22>
 8010166:	42a3      	cmp	r3, r4
 8010168:	6862      	ldr	r2, [r4, #4]
 801016a:	d1dd      	bne.n	8010128 <_malloc_r+0x8c>
 801016c:	f8c8 2000 	str.w	r2, [r8]
 8010170:	e7ec      	b.n	801014c <_malloc_r+0xb0>
 8010172:	4623      	mov	r3, r4
 8010174:	6864      	ldr	r4, [r4, #4]
 8010176:	e7ac      	b.n	80100d2 <_malloc_r+0x36>
 8010178:	4634      	mov	r4, r6
 801017a:	6876      	ldr	r6, [r6, #4]
 801017c:	e7b4      	b.n	80100e8 <_malloc_r+0x4c>
 801017e:	4613      	mov	r3, r2
 8010180:	e7cc      	b.n	801011c <_malloc_r+0x80>
 8010182:	230c      	movs	r3, #12
 8010184:	603b      	str	r3, [r7, #0]
 8010186:	4638      	mov	r0, r7
 8010188:	f000 f80e 	bl	80101a8 <__malloc_unlock>
 801018c:	e797      	b.n	80100be <_malloc_r+0x22>
 801018e:	6025      	str	r5, [r4, #0]
 8010190:	e7dc      	b.n	801014c <_malloc_r+0xb0>
 8010192:	605b      	str	r3, [r3, #4]
 8010194:	deff      	udf	#255	; 0xff
 8010196:	bf00      	nop
 8010198:	20018460 	.word	0x20018460

0801019c <__malloc_lock>:
 801019c:	4801      	ldr	r0, [pc, #4]	; (80101a4 <__malloc_lock+0x8>)
 801019e:	f7ff beda 	b.w	800ff56 <__retarget_lock_acquire_recursive>
 80101a2:	bf00      	nop
 80101a4:	2001845c 	.word	0x2001845c

080101a8 <__malloc_unlock>:
 80101a8:	4801      	ldr	r0, [pc, #4]	; (80101b0 <__malloc_unlock+0x8>)
 80101aa:	f7ff bed5 	b.w	800ff58 <__retarget_lock_release_recursive>
 80101ae:	bf00      	nop
 80101b0:	2001845c 	.word	0x2001845c

080101b4 <__sflush_r>:
 80101b4:	898a      	ldrh	r2, [r1, #12]
 80101b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ba:	4605      	mov	r5, r0
 80101bc:	0710      	lsls	r0, r2, #28
 80101be:	460c      	mov	r4, r1
 80101c0:	d458      	bmi.n	8010274 <__sflush_r+0xc0>
 80101c2:	684b      	ldr	r3, [r1, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	dc05      	bgt.n	80101d4 <__sflush_r+0x20>
 80101c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	dc02      	bgt.n	80101d4 <__sflush_r+0x20>
 80101ce:	2000      	movs	r0, #0
 80101d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101d6:	2e00      	cmp	r6, #0
 80101d8:	d0f9      	beq.n	80101ce <__sflush_r+0x1a>
 80101da:	2300      	movs	r3, #0
 80101dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101e0:	682f      	ldr	r7, [r5, #0]
 80101e2:	6a21      	ldr	r1, [r4, #32]
 80101e4:	602b      	str	r3, [r5, #0]
 80101e6:	d032      	beq.n	801024e <__sflush_r+0x9a>
 80101e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101ea:	89a3      	ldrh	r3, [r4, #12]
 80101ec:	075a      	lsls	r2, r3, #29
 80101ee:	d505      	bpl.n	80101fc <__sflush_r+0x48>
 80101f0:	6863      	ldr	r3, [r4, #4]
 80101f2:	1ac0      	subs	r0, r0, r3
 80101f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101f6:	b10b      	cbz	r3, 80101fc <__sflush_r+0x48>
 80101f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101fa:	1ac0      	subs	r0, r0, r3
 80101fc:	2300      	movs	r3, #0
 80101fe:	4602      	mov	r2, r0
 8010200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010202:	6a21      	ldr	r1, [r4, #32]
 8010204:	4628      	mov	r0, r5
 8010206:	47b0      	blx	r6
 8010208:	1c43      	adds	r3, r0, #1
 801020a:	89a3      	ldrh	r3, [r4, #12]
 801020c:	d106      	bne.n	801021c <__sflush_r+0x68>
 801020e:	6829      	ldr	r1, [r5, #0]
 8010210:	291d      	cmp	r1, #29
 8010212:	d82b      	bhi.n	801026c <__sflush_r+0xb8>
 8010214:	4a29      	ldr	r2, [pc, #164]	; (80102bc <__sflush_r+0x108>)
 8010216:	410a      	asrs	r2, r1
 8010218:	07d6      	lsls	r6, r2, #31
 801021a:	d427      	bmi.n	801026c <__sflush_r+0xb8>
 801021c:	2200      	movs	r2, #0
 801021e:	6062      	str	r2, [r4, #4]
 8010220:	04d9      	lsls	r1, r3, #19
 8010222:	6922      	ldr	r2, [r4, #16]
 8010224:	6022      	str	r2, [r4, #0]
 8010226:	d504      	bpl.n	8010232 <__sflush_r+0x7e>
 8010228:	1c42      	adds	r2, r0, #1
 801022a:	d101      	bne.n	8010230 <__sflush_r+0x7c>
 801022c:	682b      	ldr	r3, [r5, #0]
 801022e:	b903      	cbnz	r3, 8010232 <__sflush_r+0x7e>
 8010230:	6560      	str	r0, [r4, #84]	; 0x54
 8010232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010234:	602f      	str	r7, [r5, #0]
 8010236:	2900      	cmp	r1, #0
 8010238:	d0c9      	beq.n	80101ce <__sflush_r+0x1a>
 801023a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801023e:	4299      	cmp	r1, r3
 8010240:	d002      	beq.n	8010248 <__sflush_r+0x94>
 8010242:	4628      	mov	r0, r5
 8010244:	f7ff feb6 	bl	800ffb4 <_free_r>
 8010248:	2000      	movs	r0, #0
 801024a:	6360      	str	r0, [r4, #52]	; 0x34
 801024c:	e7c0      	b.n	80101d0 <__sflush_r+0x1c>
 801024e:	2301      	movs	r3, #1
 8010250:	4628      	mov	r0, r5
 8010252:	47b0      	blx	r6
 8010254:	1c41      	adds	r1, r0, #1
 8010256:	d1c8      	bne.n	80101ea <__sflush_r+0x36>
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d0c5      	beq.n	80101ea <__sflush_r+0x36>
 801025e:	2b1d      	cmp	r3, #29
 8010260:	d001      	beq.n	8010266 <__sflush_r+0xb2>
 8010262:	2b16      	cmp	r3, #22
 8010264:	d101      	bne.n	801026a <__sflush_r+0xb6>
 8010266:	602f      	str	r7, [r5, #0]
 8010268:	e7b1      	b.n	80101ce <__sflush_r+0x1a>
 801026a:	89a3      	ldrh	r3, [r4, #12]
 801026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010270:	81a3      	strh	r3, [r4, #12]
 8010272:	e7ad      	b.n	80101d0 <__sflush_r+0x1c>
 8010274:	690f      	ldr	r7, [r1, #16]
 8010276:	2f00      	cmp	r7, #0
 8010278:	d0a9      	beq.n	80101ce <__sflush_r+0x1a>
 801027a:	0793      	lsls	r3, r2, #30
 801027c:	680e      	ldr	r6, [r1, #0]
 801027e:	bf08      	it	eq
 8010280:	694b      	ldreq	r3, [r1, #20]
 8010282:	600f      	str	r7, [r1, #0]
 8010284:	bf18      	it	ne
 8010286:	2300      	movne	r3, #0
 8010288:	eba6 0807 	sub.w	r8, r6, r7
 801028c:	608b      	str	r3, [r1, #8]
 801028e:	f1b8 0f00 	cmp.w	r8, #0
 8010292:	dd9c      	ble.n	80101ce <__sflush_r+0x1a>
 8010294:	6a21      	ldr	r1, [r4, #32]
 8010296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010298:	4643      	mov	r3, r8
 801029a:	463a      	mov	r2, r7
 801029c:	4628      	mov	r0, r5
 801029e:	47b0      	blx	r6
 80102a0:	2800      	cmp	r0, #0
 80102a2:	dc06      	bgt.n	80102b2 <__sflush_r+0xfe>
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102aa:	81a3      	strh	r3, [r4, #12]
 80102ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102b0:	e78e      	b.n	80101d0 <__sflush_r+0x1c>
 80102b2:	4407      	add	r7, r0
 80102b4:	eba8 0800 	sub.w	r8, r8, r0
 80102b8:	e7e9      	b.n	801028e <__sflush_r+0xda>
 80102ba:	bf00      	nop
 80102bc:	dfbffffe 	.word	0xdfbffffe

080102c0 <_fflush_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	690b      	ldr	r3, [r1, #16]
 80102c4:	4605      	mov	r5, r0
 80102c6:	460c      	mov	r4, r1
 80102c8:	b913      	cbnz	r3, 80102d0 <_fflush_r+0x10>
 80102ca:	2500      	movs	r5, #0
 80102cc:	4628      	mov	r0, r5
 80102ce:	bd38      	pop	{r3, r4, r5, pc}
 80102d0:	b118      	cbz	r0, 80102da <_fflush_r+0x1a>
 80102d2:	6a03      	ldr	r3, [r0, #32]
 80102d4:	b90b      	cbnz	r3, 80102da <_fflush_r+0x1a>
 80102d6:	f7ff fd4b 	bl	800fd70 <__sinit>
 80102da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d0f3      	beq.n	80102ca <_fflush_r+0xa>
 80102e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102e4:	07d0      	lsls	r0, r2, #31
 80102e6:	d404      	bmi.n	80102f2 <_fflush_r+0x32>
 80102e8:	0599      	lsls	r1, r3, #22
 80102ea:	d402      	bmi.n	80102f2 <_fflush_r+0x32>
 80102ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102ee:	f7ff fe32 	bl	800ff56 <__retarget_lock_acquire_recursive>
 80102f2:	4628      	mov	r0, r5
 80102f4:	4621      	mov	r1, r4
 80102f6:	f7ff ff5d 	bl	80101b4 <__sflush_r>
 80102fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102fc:	07da      	lsls	r2, r3, #31
 80102fe:	4605      	mov	r5, r0
 8010300:	d4e4      	bmi.n	80102cc <_fflush_r+0xc>
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	059b      	lsls	r3, r3, #22
 8010306:	d4e1      	bmi.n	80102cc <_fflush_r+0xc>
 8010308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801030a:	f7ff fe25 	bl	800ff58 <__retarget_lock_release_recursive>
 801030e:	e7dd      	b.n	80102cc <_fflush_r+0xc>

08010310 <fiprintf>:
 8010310:	b40e      	push	{r1, r2, r3}
 8010312:	b503      	push	{r0, r1, lr}
 8010314:	4601      	mov	r1, r0
 8010316:	ab03      	add	r3, sp, #12
 8010318:	4805      	ldr	r0, [pc, #20]	; (8010330 <fiprintf+0x20>)
 801031a:	f853 2b04 	ldr.w	r2, [r3], #4
 801031e:	6800      	ldr	r0, [r0, #0]
 8010320:	9301      	str	r3, [sp, #4]
 8010322:	f000 f847 	bl	80103b4 <_vfiprintf_r>
 8010326:	b002      	add	sp, #8
 8010328:	f85d eb04 	ldr.w	lr, [sp], #4
 801032c:	b003      	add	sp, #12
 801032e:	4770      	bx	lr
 8010330:	200000e8 	.word	0x200000e8

08010334 <_sbrk_r>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	4d06      	ldr	r5, [pc, #24]	; (8010350 <_sbrk_r+0x1c>)
 8010338:	2300      	movs	r3, #0
 801033a:	4604      	mov	r4, r0
 801033c:	4608      	mov	r0, r1
 801033e:	602b      	str	r3, [r5, #0]
 8010340:	f7f0 ff72 	bl	8001228 <_sbrk>
 8010344:	1c43      	adds	r3, r0, #1
 8010346:	d102      	bne.n	801034e <_sbrk_r+0x1a>
 8010348:	682b      	ldr	r3, [r5, #0]
 801034a:	b103      	cbz	r3, 801034e <_sbrk_r+0x1a>
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	20018458 	.word	0x20018458

08010354 <abort>:
 8010354:	b508      	push	{r3, lr}
 8010356:	2006      	movs	r0, #6
 8010358:	f000 fb94 	bl	8010a84 <raise>
 801035c:	2001      	movs	r0, #1
 801035e:	f7f0 feeb 	bl	8001138 <_exit>

08010362 <__sfputc_r>:
 8010362:	6893      	ldr	r3, [r2, #8]
 8010364:	3b01      	subs	r3, #1
 8010366:	2b00      	cmp	r3, #0
 8010368:	b410      	push	{r4}
 801036a:	6093      	str	r3, [r2, #8]
 801036c:	da08      	bge.n	8010380 <__sfputc_r+0x1e>
 801036e:	6994      	ldr	r4, [r2, #24]
 8010370:	42a3      	cmp	r3, r4
 8010372:	db01      	blt.n	8010378 <__sfputc_r+0x16>
 8010374:	290a      	cmp	r1, #10
 8010376:	d103      	bne.n	8010380 <__sfputc_r+0x1e>
 8010378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801037c:	f000 bac4 	b.w	8010908 <__swbuf_r>
 8010380:	6813      	ldr	r3, [r2, #0]
 8010382:	1c58      	adds	r0, r3, #1
 8010384:	6010      	str	r0, [r2, #0]
 8010386:	7019      	strb	r1, [r3, #0]
 8010388:	4608      	mov	r0, r1
 801038a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801038e:	4770      	bx	lr

08010390 <__sfputs_r>:
 8010390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010392:	4606      	mov	r6, r0
 8010394:	460f      	mov	r7, r1
 8010396:	4614      	mov	r4, r2
 8010398:	18d5      	adds	r5, r2, r3
 801039a:	42ac      	cmp	r4, r5
 801039c:	d101      	bne.n	80103a2 <__sfputs_r+0x12>
 801039e:	2000      	movs	r0, #0
 80103a0:	e007      	b.n	80103b2 <__sfputs_r+0x22>
 80103a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103a6:	463a      	mov	r2, r7
 80103a8:	4630      	mov	r0, r6
 80103aa:	f7ff ffda 	bl	8010362 <__sfputc_r>
 80103ae:	1c43      	adds	r3, r0, #1
 80103b0:	d1f3      	bne.n	801039a <__sfputs_r+0xa>
 80103b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080103b4 <_vfiprintf_r>:
 80103b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b8:	460d      	mov	r5, r1
 80103ba:	b09d      	sub	sp, #116	; 0x74
 80103bc:	4614      	mov	r4, r2
 80103be:	4698      	mov	r8, r3
 80103c0:	4606      	mov	r6, r0
 80103c2:	b118      	cbz	r0, 80103cc <_vfiprintf_r+0x18>
 80103c4:	6a03      	ldr	r3, [r0, #32]
 80103c6:	b90b      	cbnz	r3, 80103cc <_vfiprintf_r+0x18>
 80103c8:	f7ff fcd2 	bl	800fd70 <__sinit>
 80103cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103ce:	07d9      	lsls	r1, r3, #31
 80103d0:	d405      	bmi.n	80103de <_vfiprintf_r+0x2a>
 80103d2:	89ab      	ldrh	r3, [r5, #12]
 80103d4:	059a      	lsls	r2, r3, #22
 80103d6:	d402      	bmi.n	80103de <_vfiprintf_r+0x2a>
 80103d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103da:	f7ff fdbc 	bl	800ff56 <__retarget_lock_acquire_recursive>
 80103de:	89ab      	ldrh	r3, [r5, #12]
 80103e0:	071b      	lsls	r3, r3, #28
 80103e2:	d501      	bpl.n	80103e8 <_vfiprintf_r+0x34>
 80103e4:	692b      	ldr	r3, [r5, #16]
 80103e6:	b99b      	cbnz	r3, 8010410 <_vfiprintf_r+0x5c>
 80103e8:	4629      	mov	r1, r5
 80103ea:	4630      	mov	r0, r6
 80103ec:	f000 faca 	bl	8010984 <__swsetup_r>
 80103f0:	b170      	cbz	r0, 8010410 <_vfiprintf_r+0x5c>
 80103f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103f4:	07dc      	lsls	r4, r3, #31
 80103f6:	d504      	bpl.n	8010402 <_vfiprintf_r+0x4e>
 80103f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103fc:	b01d      	add	sp, #116	; 0x74
 80103fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010402:	89ab      	ldrh	r3, [r5, #12]
 8010404:	0598      	lsls	r0, r3, #22
 8010406:	d4f7      	bmi.n	80103f8 <_vfiprintf_r+0x44>
 8010408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801040a:	f7ff fda5 	bl	800ff58 <__retarget_lock_release_recursive>
 801040e:	e7f3      	b.n	80103f8 <_vfiprintf_r+0x44>
 8010410:	2300      	movs	r3, #0
 8010412:	9309      	str	r3, [sp, #36]	; 0x24
 8010414:	2320      	movs	r3, #32
 8010416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801041a:	f8cd 800c 	str.w	r8, [sp, #12]
 801041e:	2330      	movs	r3, #48	; 0x30
 8010420:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80105d4 <_vfiprintf_r+0x220>
 8010424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010428:	f04f 0901 	mov.w	r9, #1
 801042c:	4623      	mov	r3, r4
 801042e:	469a      	mov	sl, r3
 8010430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010434:	b10a      	cbz	r2, 801043a <_vfiprintf_r+0x86>
 8010436:	2a25      	cmp	r2, #37	; 0x25
 8010438:	d1f9      	bne.n	801042e <_vfiprintf_r+0x7a>
 801043a:	ebba 0b04 	subs.w	fp, sl, r4
 801043e:	d00b      	beq.n	8010458 <_vfiprintf_r+0xa4>
 8010440:	465b      	mov	r3, fp
 8010442:	4622      	mov	r2, r4
 8010444:	4629      	mov	r1, r5
 8010446:	4630      	mov	r0, r6
 8010448:	f7ff ffa2 	bl	8010390 <__sfputs_r>
 801044c:	3001      	adds	r0, #1
 801044e:	f000 80a9 	beq.w	80105a4 <_vfiprintf_r+0x1f0>
 8010452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010454:	445a      	add	r2, fp
 8010456:	9209      	str	r2, [sp, #36]	; 0x24
 8010458:	f89a 3000 	ldrb.w	r3, [sl]
 801045c:	2b00      	cmp	r3, #0
 801045e:	f000 80a1 	beq.w	80105a4 <_vfiprintf_r+0x1f0>
 8010462:	2300      	movs	r3, #0
 8010464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801046c:	f10a 0a01 	add.w	sl, sl, #1
 8010470:	9304      	str	r3, [sp, #16]
 8010472:	9307      	str	r3, [sp, #28]
 8010474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010478:	931a      	str	r3, [sp, #104]	; 0x68
 801047a:	4654      	mov	r4, sl
 801047c:	2205      	movs	r2, #5
 801047e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010482:	4854      	ldr	r0, [pc, #336]	; (80105d4 <_vfiprintf_r+0x220>)
 8010484:	f7ef fffc 	bl	8000480 <memchr>
 8010488:	9a04      	ldr	r2, [sp, #16]
 801048a:	b9d8      	cbnz	r0, 80104c4 <_vfiprintf_r+0x110>
 801048c:	06d1      	lsls	r1, r2, #27
 801048e:	bf44      	itt	mi
 8010490:	2320      	movmi	r3, #32
 8010492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010496:	0713      	lsls	r3, r2, #28
 8010498:	bf44      	itt	mi
 801049a:	232b      	movmi	r3, #43	; 0x2b
 801049c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104a0:	f89a 3000 	ldrb.w	r3, [sl]
 80104a4:	2b2a      	cmp	r3, #42	; 0x2a
 80104a6:	d015      	beq.n	80104d4 <_vfiprintf_r+0x120>
 80104a8:	9a07      	ldr	r2, [sp, #28]
 80104aa:	4654      	mov	r4, sl
 80104ac:	2000      	movs	r0, #0
 80104ae:	f04f 0c0a 	mov.w	ip, #10
 80104b2:	4621      	mov	r1, r4
 80104b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104b8:	3b30      	subs	r3, #48	; 0x30
 80104ba:	2b09      	cmp	r3, #9
 80104bc:	d94d      	bls.n	801055a <_vfiprintf_r+0x1a6>
 80104be:	b1b0      	cbz	r0, 80104ee <_vfiprintf_r+0x13a>
 80104c0:	9207      	str	r2, [sp, #28]
 80104c2:	e014      	b.n	80104ee <_vfiprintf_r+0x13a>
 80104c4:	eba0 0308 	sub.w	r3, r0, r8
 80104c8:	fa09 f303 	lsl.w	r3, r9, r3
 80104cc:	4313      	orrs	r3, r2
 80104ce:	9304      	str	r3, [sp, #16]
 80104d0:	46a2      	mov	sl, r4
 80104d2:	e7d2      	b.n	801047a <_vfiprintf_r+0xc6>
 80104d4:	9b03      	ldr	r3, [sp, #12]
 80104d6:	1d19      	adds	r1, r3, #4
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	9103      	str	r1, [sp, #12]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	bfbb      	ittet	lt
 80104e0:	425b      	neglt	r3, r3
 80104e2:	f042 0202 	orrlt.w	r2, r2, #2
 80104e6:	9307      	strge	r3, [sp, #28]
 80104e8:	9307      	strlt	r3, [sp, #28]
 80104ea:	bfb8      	it	lt
 80104ec:	9204      	strlt	r2, [sp, #16]
 80104ee:	7823      	ldrb	r3, [r4, #0]
 80104f0:	2b2e      	cmp	r3, #46	; 0x2e
 80104f2:	d10c      	bne.n	801050e <_vfiprintf_r+0x15a>
 80104f4:	7863      	ldrb	r3, [r4, #1]
 80104f6:	2b2a      	cmp	r3, #42	; 0x2a
 80104f8:	d134      	bne.n	8010564 <_vfiprintf_r+0x1b0>
 80104fa:	9b03      	ldr	r3, [sp, #12]
 80104fc:	1d1a      	adds	r2, r3, #4
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	9203      	str	r2, [sp, #12]
 8010502:	2b00      	cmp	r3, #0
 8010504:	bfb8      	it	lt
 8010506:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801050a:	3402      	adds	r4, #2
 801050c:	9305      	str	r3, [sp, #20]
 801050e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80105e4 <_vfiprintf_r+0x230>
 8010512:	7821      	ldrb	r1, [r4, #0]
 8010514:	2203      	movs	r2, #3
 8010516:	4650      	mov	r0, sl
 8010518:	f7ef ffb2 	bl	8000480 <memchr>
 801051c:	b138      	cbz	r0, 801052e <_vfiprintf_r+0x17a>
 801051e:	9b04      	ldr	r3, [sp, #16]
 8010520:	eba0 000a 	sub.w	r0, r0, sl
 8010524:	2240      	movs	r2, #64	; 0x40
 8010526:	4082      	lsls	r2, r0
 8010528:	4313      	orrs	r3, r2
 801052a:	3401      	adds	r4, #1
 801052c:	9304      	str	r3, [sp, #16]
 801052e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010532:	4829      	ldr	r0, [pc, #164]	; (80105d8 <_vfiprintf_r+0x224>)
 8010534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010538:	2206      	movs	r2, #6
 801053a:	f7ef ffa1 	bl	8000480 <memchr>
 801053e:	2800      	cmp	r0, #0
 8010540:	d03f      	beq.n	80105c2 <_vfiprintf_r+0x20e>
 8010542:	4b26      	ldr	r3, [pc, #152]	; (80105dc <_vfiprintf_r+0x228>)
 8010544:	bb1b      	cbnz	r3, 801058e <_vfiprintf_r+0x1da>
 8010546:	9b03      	ldr	r3, [sp, #12]
 8010548:	3307      	adds	r3, #7
 801054a:	f023 0307 	bic.w	r3, r3, #7
 801054e:	3308      	adds	r3, #8
 8010550:	9303      	str	r3, [sp, #12]
 8010552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010554:	443b      	add	r3, r7
 8010556:	9309      	str	r3, [sp, #36]	; 0x24
 8010558:	e768      	b.n	801042c <_vfiprintf_r+0x78>
 801055a:	fb0c 3202 	mla	r2, ip, r2, r3
 801055e:	460c      	mov	r4, r1
 8010560:	2001      	movs	r0, #1
 8010562:	e7a6      	b.n	80104b2 <_vfiprintf_r+0xfe>
 8010564:	2300      	movs	r3, #0
 8010566:	3401      	adds	r4, #1
 8010568:	9305      	str	r3, [sp, #20]
 801056a:	4619      	mov	r1, r3
 801056c:	f04f 0c0a 	mov.w	ip, #10
 8010570:	4620      	mov	r0, r4
 8010572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010576:	3a30      	subs	r2, #48	; 0x30
 8010578:	2a09      	cmp	r2, #9
 801057a:	d903      	bls.n	8010584 <_vfiprintf_r+0x1d0>
 801057c:	2b00      	cmp	r3, #0
 801057e:	d0c6      	beq.n	801050e <_vfiprintf_r+0x15a>
 8010580:	9105      	str	r1, [sp, #20]
 8010582:	e7c4      	b.n	801050e <_vfiprintf_r+0x15a>
 8010584:	fb0c 2101 	mla	r1, ip, r1, r2
 8010588:	4604      	mov	r4, r0
 801058a:	2301      	movs	r3, #1
 801058c:	e7f0      	b.n	8010570 <_vfiprintf_r+0x1bc>
 801058e:	ab03      	add	r3, sp, #12
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	462a      	mov	r2, r5
 8010594:	4b12      	ldr	r3, [pc, #72]	; (80105e0 <_vfiprintf_r+0x22c>)
 8010596:	a904      	add	r1, sp, #16
 8010598:	4630      	mov	r0, r6
 801059a:	f3af 8000 	nop.w
 801059e:	4607      	mov	r7, r0
 80105a0:	1c78      	adds	r0, r7, #1
 80105a2:	d1d6      	bne.n	8010552 <_vfiprintf_r+0x19e>
 80105a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105a6:	07d9      	lsls	r1, r3, #31
 80105a8:	d405      	bmi.n	80105b6 <_vfiprintf_r+0x202>
 80105aa:	89ab      	ldrh	r3, [r5, #12]
 80105ac:	059a      	lsls	r2, r3, #22
 80105ae:	d402      	bmi.n	80105b6 <_vfiprintf_r+0x202>
 80105b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105b2:	f7ff fcd1 	bl	800ff58 <__retarget_lock_release_recursive>
 80105b6:	89ab      	ldrh	r3, [r5, #12]
 80105b8:	065b      	lsls	r3, r3, #25
 80105ba:	f53f af1d 	bmi.w	80103f8 <_vfiprintf_r+0x44>
 80105be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105c0:	e71c      	b.n	80103fc <_vfiprintf_r+0x48>
 80105c2:	ab03      	add	r3, sp, #12
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	462a      	mov	r2, r5
 80105c8:	4b05      	ldr	r3, [pc, #20]	; (80105e0 <_vfiprintf_r+0x22c>)
 80105ca:	a904      	add	r1, sp, #16
 80105cc:	4630      	mov	r0, r6
 80105ce:	f000 f879 	bl	80106c4 <_printf_i>
 80105d2:	e7e4      	b.n	801059e <_vfiprintf_r+0x1ea>
 80105d4:	08010d73 	.word	0x08010d73
 80105d8:	08010d7d 	.word	0x08010d7d
 80105dc:	00000000 	.word	0x00000000
 80105e0:	08010391 	.word	0x08010391
 80105e4:	08010d79 	.word	0x08010d79

080105e8 <_printf_common>:
 80105e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105ec:	4616      	mov	r6, r2
 80105ee:	4699      	mov	r9, r3
 80105f0:	688a      	ldr	r2, [r1, #8]
 80105f2:	690b      	ldr	r3, [r1, #16]
 80105f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105f8:	4293      	cmp	r3, r2
 80105fa:	bfb8      	it	lt
 80105fc:	4613      	movlt	r3, r2
 80105fe:	6033      	str	r3, [r6, #0]
 8010600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010604:	4607      	mov	r7, r0
 8010606:	460c      	mov	r4, r1
 8010608:	b10a      	cbz	r2, 801060e <_printf_common+0x26>
 801060a:	3301      	adds	r3, #1
 801060c:	6033      	str	r3, [r6, #0]
 801060e:	6823      	ldr	r3, [r4, #0]
 8010610:	0699      	lsls	r1, r3, #26
 8010612:	bf42      	ittt	mi
 8010614:	6833      	ldrmi	r3, [r6, #0]
 8010616:	3302      	addmi	r3, #2
 8010618:	6033      	strmi	r3, [r6, #0]
 801061a:	6825      	ldr	r5, [r4, #0]
 801061c:	f015 0506 	ands.w	r5, r5, #6
 8010620:	d106      	bne.n	8010630 <_printf_common+0x48>
 8010622:	f104 0a19 	add.w	sl, r4, #25
 8010626:	68e3      	ldr	r3, [r4, #12]
 8010628:	6832      	ldr	r2, [r6, #0]
 801062a:	1a9b      	subs	r3, r3, r2
 801062c:	42ab      	cmp	r3, r5
 801062e:	dc26      	bgt.n	801067e <_printf_common+0x96>
 8010630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010634:	1e13      	subs	r3, r2, #0
 8010636:	6822      	ldr	r2, [r4, #0]
 8010638:	bf18      	it	ne
 801063a:	2301      	movne	r3, #1
 801063c:	0692      	lsls	r2, r2, #26
 801063e:	d42b      	bmi.n	8010698 <_printf_common+0xb0>
 8010640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010644:	4649      	mov	r1, r9
 8010646:	4638      	mov	r0, r7
 8010648:	47c0      	blx	r8
 801064a:	3001      	adds	r0, #1
 801064c:	d01e      	beq.n	801068c <_printf_common+0xa4>
 801064e:	6823      	ldr	r3, [r4, #0]
 8010650:	6922      	ldr	r2, [r4, #16]
 8010652:	f003 0306 	and.w	r3, r3, #6
 8010656:	2b04      	cmp	r3, #4
 8010658:	bf02      	ittt	eq
 801065a:	68e5      	ldreq	r5, [r4, #12]
 801065c:	6833      	ldreq	r3, [r6, #0]
 801065e:	1aed      	subeq	r5, r5, r3
 8010660:	68a3      	ldr	r3, [r4, #8]
 8010662:	bf0c      	ite	eq
 8010664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010668:	2500      	movne	r5, #0
 801066a:	4293      	cmp	r3, r2
 801066c:	bfc4      	itt	gt
 801066e:	1a9b      	subgt	r3, r3, r2
 8010670:	18ed      	addgt	r5, r5, r3
 8010672:	2600      	movs	r6, #0
 8010674:	341a      	adds	r4, #26
 8010676:	42b5      	cmp	r5, r6
 8010678:	d11a      	bne.n	80106b0 <_printf_common+0xc8>
 801067a:	2000      	movs	r0, #0
 801067c:	e008      	b.n	8010690 <_printf_common+0xa8>
 801067e:	2301      	movs	r3, #1
 8010680:	4652      	mov	r2, sl
 8010682:	4649      	mov	r1, r9
 8010684:	4638      	mov	r0, r7
 8010686:	47c0      	blx	r8
 8010688:	3001      	adds	r0, #1
 801068a:	d103      	bne.n	8010694 <_printf_common+0xac>
 801068c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010694:	3501      	adds	r5, #1
 8010696:	e7c6      	b.n	8010626 <_printf_common+0x3e>
 8010698:	18e1      	adds	r1, r4, r3
 801069a:	1c5a      	adds	r2, r3, #1
 801069c:	2030      	movs	r0, #48	; 0x30
 801069e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106a2:	4422      	add	r2, r4
 80106a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106ac:	3302      	adds	r3, #2
 80106ae:	e7c7      	b.n	8010640 <_printf_common+0x58>
 80106b0:	2301      	movs	r3, #1
 80106b2:	4622      	mov	r2, r4
 80106b4:	4649      	mov	r1, r9
 80106b6:	4638      	mov	r0, r7
 80106b8:	47c0      	blx	r8
 80106ba:	3001      	adds	r0, #1
 80106bc:	d0e6      	beq.n	801068c <_printf_common+0xa4>
 80106be:	3601      	adds	r6, #1
 80106c0:	e7d9      	b.n	8010676 <_printf_common+0x8e>
	...

080106c4 <_printf_i>:
 80106c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106c8:	7e0f      	ldrb	r7, [r1, #24]
 80106ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106cc:	2f78      	cmp	r7, #120	; 0x78
 80106ce:	4691      	mov	r9, r2
 80106d0:	4680      	mov	r8, r0
 80106d2:	460c      	mov	r4, r1
 80106d4:	469a      	mov	sl, r3
 80106d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80106da:	d807      	bhi.n	80106ec <_printf_i+0x28>
 80106dc:	2f62      	cmp	r7, #98	; 0x62
 80106de:	d80a      	bhi.n	80106f6 <_printf_i+0x32>
 80106e0:	2f00      	cmp	r7, #0
 80106e2:	f000 80d4 	beq.w	801088e <_printf_i+0x1ca>
 80106e6:	2f58      	cmp	r7, #88	; 0x58
 80106e8:	f000 80c0 	beq.w	801086c <_printf_i+0x1a8>
 80106ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80106f4:	e03a      	b.n	801076c <_printf_i+0xa8>
 80106f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80106fa:	2b15      	cmp	r3, #21
 80106fc:	d8f6      	bhi.n	80106ec <_printf_i+0x28>
 80106fe:	a101      	add	r1, pc, #4	; (adr r1, 8010704 <_printf_i+0x40>)
 8010700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010704:	0801075d 	.word	0x0801075d
 8010708:	08010771 	.word	0x08010771
 801070c:	080106ed 	.word	0x080106ed
 8010710:	080106ed 	.word	0x080106ed
 8010714:	080106ed 	.word	0x080106ed
 8010718:	080106ed 	.word	0x080106ed
 801071c:	08010771 	.word	0x08010771
 8010720:	080106ed 	.word	0x080106ed
 8010724:	080106ed 	.word	0x080106ed
 8010728:	080106ed 	.word	0x080106ed
 801072c:	080106ed 	.word	0x080106ed
 8010730:	08010875 	.word	0x08010875
 8010734:	0801079d 	.word	0x0801079d
 8010738:	0801082f 	.word	0x0801082f
 801073c:	080106ed 	.word	0x080106ed
 8010740:	080106ed 	.word	0x080106ed
 8010744:	08010897 	.word	0x08010897
 8010748:	080106ed 	.word	0x080106ed
 801074c:	0801079d 	.word	0x0801079d
 8010750:	080106ed 	.word	0x080106ed
 8010754:	080106ed 	.word	0x080106ed
 8010758:	08010837 	.word	0x08010837
 801075c:	682b      	ldr	r3, [r5, #0]
 801075e:	1d1a      	adds	r2, r3, #4
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	602a      	str	r2, [r5, #0]
 8010764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801076c:	2301      	movs	r3, #1
 801076e:	e09f      	b.n	80108b0 <_printf_i+0x1ec>
 8010770:	6820      	ldr	r0, [r4, #0]
 8010772:	682b      	ldr	r3, [r5, #0]
 8010774:	0607      	lsls	r7, r0, #24
 8010776:	f103 0104 	add.w	r1, r3, #4
 801077a:	6029      	str	r1, [r5, #0]
 801077c:	d501      	bpl.n	8010782 <_printf_i+0xbe>
 801077e:	681e      	ldr	r6, [r3, #0]
 8010780:	e003      	b.n	801078a <_printf_i+0xc6>
 8010782:	0646      	lsls	r6, r0, #25
 8010784:	d5fb      	bpl.n	801077e <_printf_i+0xba>
 8010786:	f9b3 6000 	ldrsh.w	r6, [r3]
 801078a:	2e00      	cmp	r6, #0
 801078c:	da03      	bge.n	8010796 <_printf_i+0xd2>
 801078e:	232d      	movs	r3, #45	; 0x2d
 8010790:	4276      	negs	r6, r6
 8010792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010796:	485a      	ldr	r0, [pc, #360]	; (8010900 <_printf_i+0x23c>)
 8010798:	230a      	movs	r3, #10
 801079a:	e012      	b.n	80107c2 <_printf_i+0xfe>
 801079c:	682b      	ldr	r3, [r5, #0]
 801079e:	6820      	ldr	r0, [r4, #0]
 80107a0:	1d19      	adds	r1, r3, #4
 80107a2:	6029      	str	r1, [r5, #0]
 80107a4:	0605      	lsls	r5, r0, #24
 80107a6:	d501      	bpl.n	80107ac <_printf_i+0xe8>
 80107a8:	681e      	ldr	r6, [r3, #0]
 80107aa:	e002      	b.n	80107b2 <_printf_i+0xee>
 80107ac:	0641      	lsls	r1, r0, #25
 80107ae:	d5fb      	bpl.n	80107a8 <_printf_i+0xe4>
 80107b0:	881e      	ldrh	r6, [r3, #0]
 80107b2:	4853      	ldr	r0, [pc, #332]	; (8010900 <_printf_i+0x23c>)
 80107b4:	2f6f      	cmp	r7, #111	; 0x6f
 80107b6:	bf0c      	ite	eq
 80107b8:	2308      	moveq	r3, #8
 80107ba:	230a      	movne	r3, #10
 80107bc:	2100      	movs	r1, #0
 80107be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107c2:	6865      	ldr	r5, [r4, #4]
 80107c4:	60a5      	str	r5, [r4, #8]
 80107c6:	2d00      	cmp	r5, #0
 80107c8:	bfa2      	ittt	ge
 80107ca:	6821      	ldrge	r1, [r4, #0]
 80107cc:	f021 0104 	bicge.w	r1, r1, #4
 80107d0:	6021      	strge	r1, [r4, #0]
 80107d2:	b90e      	cbnz	r6, 80107d8 <_printf_i+0x114>
 80107d4:	2d00      	cmp	r5, #0
 80107d6:	d04b      	beq.n	8010870 <_printf_i+0x1ac>
 80107d8:	4615      	mov	r5, r2
 80107da:	fbb6 f1f3 	udiv	r1, r6, r3
 80107de:	fb03 6711 	mls	r7, r3, r1, r6
 80107e2:	5dc7      	ldrb	r7, [r0, r7]
 80107e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80107e8:	4637      	mov	r7, r6
 80107ea:	42bb      	cmp	r3, r7
 80107ec:	460e      	mov	r6, r1
 80107ee:	d9f4      	bls.n	80107da <_printf_i+0x116>
 80107f0:	2b08      	cmp	r3, #8
 80107f2:	d10b      	bne.n	801080c <_printf_i+0x148>
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	07de      	lsls	r6, r3, #31
 80107f8:	d508      	bpl.n	801080c <_printf_i+0x148>
 80107fa:	6923      	ldr	r3, [r4, #16]
 80107fc:	6861      	ldr	r1, [r4, #4]
 80107fe:	4299      	cmp	r1, r3
 8010800:	bfde      	ittt	le
 8010802:	2330      	movle	r3, #48	; 0x30
 8010804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010808:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801080c:	1b52      	subs	r2, r2, r5
 801080e:	6122      	str	r2, [r4, #16]
 8010810:	f8cd a000 	str.w	sl, [sp]
 8010814:	464b      	mov	r3, r9
 8010816:	aa03      	add	r2, sp, #12
 8010818:	4621      	mov	r1, r4
 801081a:	4640      	mov	r0, r8
 801081c:	f7ff fee4 	bl	80105e8 <_printf_common>
 8010820:	3001      	adds	r0, #1
 8010822:	d14a      	bne.n	80108ba <_printf_i+0x1f6>
 8010824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010828:	b004      	add	sp, #16
 801082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801082e:	6823      	ldr	r3, [r4, #0]
 8010830:	f043 0320 	orr.w	r3, r3, #32
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	4833      	ldr	r0, [pc, #204]	; (8010904 <_printf_i+0x240>)
 8010838:	2778      	movs	r7, #120	; 0x78
 801083a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	6829      	ldr	r1, [r5, #0]
 8010842:	061f      	lsls	r7, r3, #24
 8010844:	f851 6b04 	ldr.w	r6, [r1], #4
 8010848:	d402      	bmi.n	8010850 <_printf_i+0x18c>
 801084a:	065f      	lsls	r7, r3, #25
 801084c:	bf48      	it	mi
 801084e:	b2b6      	uxthmi	r6, r6
 8010850:	07df      	lsls	r7, r3, #31
 8010852:	bf48      	it	mi
 8010854:	f043 0320 	orrmi.w	r3, r3, #32
 8010858:	6029      	str	r1, [r5, #0]
 801085a:	bf48      	it	mi
 801085c:	6023      	strmi	r3, [r4, #0]
 801085e:	b91e      	cbnz	r6, 8010868 <_printf_i+0x1a4>
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	f023 0320 	bic.w	r3, r3, #32
 8010866:	6023      	str	r3, [r4, #0]
 8010868:	2310      	movs	r3, #16
 801086a:	e7a7      	b.n	80107bc <_printf_i+0xf8>
 801086c:	4824      	ldr	r0, [pc, #144]	; (8010900 <_printf_i+0x23c>)
 801086e:	e7e4      	b.n	801083a <_printf_i+0x176>
 8010870:	4615      	mov	r5, r2
 8010872:	e7bd      	b.n	80107f0 <_printf_i+0x12c>
 8010874:	682b      	ldr	r3, [r5, #0]
 8010876:	6826      	ldr	r6, [r4, #0]
 8010878:	6961      	ldr	r1, [r4, #20]
 801087a:	1d18      	adds	r0, r3, #4
 801087c:	6028      	str	r0, [r5, #0]
 801087e:	0635      	lsls	r5, r6, #24
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	d501      	bpl.n	8010888 <_printf_i+0x1c4>
 8010884:	6019      	str	r1, [r3, #0]
 8010886:	e002      	b.n	801088e <_printf_i+0x1ca>
 8010888:	0670      	lsls	r0, r6, #25
 801088a:	d5fb      	bpl.n	8010884 <_printf_i+0x1c0>
 801088c:	8019      	strh	r1, [r3, #0]
 801088e:	2300      	movs	r3, #0
 8010890:	6123      	str	r3, [r4, #16]
 8010892:	4615      	mov	r5, r2
 8010894:	e7bc      	b.n	8010810 <_printf_i+0x14c>
 8010896:	682b      	ldr	r3, [r5, #0]
 8010898:	1d1a      	adds	r2, r3, #4
 801089a:	602a      	str	r2, [r5, #0]
 801089c:	681d      	ldr	r5, [r3, #0]
 801089e:	6862      	ldr	r2, [r4, #4]
 80108a0:	2100      	movs	r1, #0
 80108a2:	4628      	mov	r0, r5
 80108a4:	f7ef fdec 	bl	8000480 <memchr>
 80108a8:	b108      	cbz	r0, 80108ae <_printf_i+0x1ea>
 80108aa:	1b40      	subs	r0, r0, r5
 80108ac:	6060      	str	r0, [r4, #4]
 80108ae:	6863      	ldr	r3, [r4, #4]
 80108b0:	6123      	str	r3, [r4, #16]
 80108b2:	2300      	movs	r3, #0
 80108b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108b8:	e7aa      	b.n	8010810 <_printf_i+0x14c>
 80108ba:	6923      	ldr	r3, [r4, #16]
 80108bc:	462a      	mov	r2, r5
 80108be:	4649      	mov	r1, r9
 80108c0:	4640      	mov	r0, r8
 80108c2:	47d0      	blx	sl
 80108c4:	3001      	adds	r0, #1
 80108c6:	d0ad      	beq.n	8010824 <_printf_i+0x160>
 80108c8:	6823      	ldr	r3, [r4, #0]
 80108ca:	079b      	lsls	r3, r3, #30
 80108cc:	d413      	bmi.n	80108f6 <_printf_i+0x232>
 80108ce:	68e0      	ldr	r0, [r4, #12]
 80108d0:	9b03      	ldr	r3, [sp, #12]
 80108d2:	4298      	cmp	r0, r3
 80108d4:	bfb8      	it	lt
 80108d6:	4618      	movlt	r0, r3
 80108d8:	e7a6      	b.n	8010828 <_printf_i+0x164>
 80108da:	2301      	movs	r3, #1
 80108dc:	4632      	mov	r2, r6
 80108de:	4649      	mov	r1, r9
 80108e0:	4640      	mov	r0, r8
 80108e2:	47d0      	blx	sl
 80108e4:	3001      	adds	r0, #1
 80108e6:	d09d      	beq.n	8010824 <_printf_i+0x160>
 80108e8:	3501      	adds	r5, #1
 80108ea:	68e3      	ldr	r3, [r4, #12]
 80108ec:	9903      	ldr	r1, [sp, #12]
 80108ee:	1a5b      	subs	r3, r3, r1
 80108f0:	42ab      	cmp	r3, r5
 80108f2:	dcf2      	bgt.n	80108da <_printf_i+0x216>
 80108f4:	e7eb      	b.n	80108ce <_printf_i+0x20a>
 80108f6:	2500      	movs	r5, #0
 80108f8:	f104 0619 	add.w	r6, r4, #25
 80108fc:	e7f5      	b.n	80108ea <_printf_i+0x226>
 80108fe:	bf00      	nop
 8010900:	08010d84 	.word	0x08010d84
 8010904:	08010d95 	.word	0x08010d95

08010908 <__swbuf_r>:
 8010908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801090a:	460e      	mov	r6, r1
 801090c:	4614      	mov	r4, r2
 801090e:	4605      	mov	r5, r0
 8010910:	b118      	cbz	r0, 801091a <__swbuf_r+0x12>
 8010912:	6a03      	ldr	r3, [r0, #32]
 8010914:	b90b      	cbnz	r3, 801091a <__swbuf_r+0x12>
 8010916:	f7ff fa2b 	bl	800fd70 <__sinit>
 801091a:	69a3      	ldr	r3, [r4, #24]
 801091c:	60a3      	str	r3, [r4, #8]
 801091e:	89a3      	ldrh	r3, [r4, #12]
 8010920:	071a      	lsls	r2, r3, #28
 8010922:	d525      	bpl.n	8010970 <__swbuf_r+0x68>
 8010924:	6923      	ldr	r3, [r4, #16]
 8010926:	b31b      	cbz	r3, 8010970 <__swbuf_r+0x68>
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	6922      	ldr	r2, [r4, #16]
 801092c:	1a98      	subs	r0, r3, r2
 801092e:	6963      	ldr	r3, [r4, #20]
 8010930:	b2f6      	uxtb	r6, r6
 8010932:	4283      	cmp	r3, r0
 8010934:	4637      	mov	r7, r6
 8010936:	dc04      	bgt.n	8010942 <__swbuf_r+0x3a>
 8010938:	4621      	mov	r1, r4
 801093a:	4628      	mov	r0, r5
 801093c:	f7ff fcc0 	bl	80102c0 <_fflush_r>
 8010940:	b9e0      	cbnz	r0, 801097c <__swbuf_r+0x74>
 8010942:	68a3      	ldr	r3, [r4, #8]
 8010944:	3b01      	subs	r3, #1
 8010946:	60a3      	str	r3, [r4, #8]
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	1c5a      	adds	r2, r3, #1
 801094c:	6022      	str	r2, [r4, #0]
 801094e:	701e      	strb	r6, [r3, #0]
 8010950:	6962      	ldr	r2, [r4, #20]
 8010952:	1c43      	adds	r3, r0, #1
 8010954:	429a      	cmp	r2, r3
 8010956:	d004      	beq.n	8010962 <__swbuf_r+0x5a>
 8010958:	89a3      	ldrh	r3, [r4, #12]
 801095a:	07db      	lsls	r3, r3, #31
 801095c:	d506      	bpl.n	801096c <__swbuf_r+0x64>
 801095e:	2e0a      	cmp	r6, #10
 8010960:	d104      	bne.n	801096c <__swbuf_r+0x64>
 8010962:	4621      	mov	r1, r4
 8010964:	4628      	mov	r0, r5
 8010966:	f7ff fcab 	bl	80102c0 <_fflush_r>
 801096a:	b938      	cbnz	r0, 801097c <__swbuf_r+0x74>
 801096c:	4638      	mov	r0, r7
 801096e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010970:	4621      	mov	r1, r4
 8010972:	4628      	mov	r0, r5
 8010974:	f000 f806 	bl	8010984 <__swsetup_r>
 8010978:	2800      	cmp	r0, #0
 801097a:	d0d5      	beq.n	8010928 <__swbuf_r+0x20>
 801097c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010980:	e7f4      	b.n	801096c <__swbuf_r+0x64>
	...

08010984 <__swsetup_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	4b2a      	ldr	r3, [pc, #168]	; (8010a30 <__swsetup_r+0xac>)
 8010988:	4605      	mov	r5, r0
 801098a:	6818      	ldr	r0, [r3, #0]
 801098c:	460c      	mov	r4, r1
 801098e:	b118      	cbz	r0, 8010998 <__swsetup_r+0x14>
 8010990:	6a03      	ldr	r3, [r0, #32]
 8010992:	b90b      	cbnz	r3, 8010998 <__swsetup_r+0x14>
 8010994:	f7ff f9ec 	bl	800fd70 <__sinit>
 8010998:	89a3      	ldrh	r3, [r4, #12]
 801099a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801099e:	0718      	lsls	r0, r3, #28
 80109a0:	d422      	bmi.n	80109e8 <__swsetup_r+0x64>
 80109a2:	06d9      	lsls	r1, r3, #27
 80109a4:	d407      	bmi.n	80109b6 <__swsetup_r+0x32>
 80109a6:	2309      	movs	r3, #9
 80109a8:	602b      	str	r3, [r5, #0]
 80109aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80109ae:	81a3      	strh	r3, [r4, #12]
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109b4:	e034      	b.n	8010a20 <__swsetup_r+0x9c>
 80109b6:	0758      	lsls	r0, r3, #29
 80109b8:	d512      	bpl.n	80109e0 <__swsetup_r+0x5c>
 80109ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109bc:	b141      	cbz	r1, 80109d0 <__swsetup_r+0x4c>
 80109be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109c2:	4299      	cmp	r1, r3
 80109c4:	d002      	beq.n	80109cc <__swsetup_r+0x48>
 80109c6:	4628      	mov	r0, r5
 80109c8:	f7ff faf4 	bl	800ffb4 <_free_r>
 80109cc:	2300      	movs	r3, #0
 80109ce:	6363      	str	r3, [r4, #52]	; 0x34
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109d6:	81a3      	strh	r3, [r4, #12]
 80109d8:	2300      	movs	r3, #0
 80109da:	6063      	str	r3, [r4, #4]
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	6023      	str	r3, [r4, #0]
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	f043 0308 	orr.w	r3, r3, #8
 80109e6:	81a3      	strh	r3, [r4, #12]
 80109e8:	6923      	ldr	r3, [r4, #16]
 80109ea:	b94b      	cbnz	r3, 8010a00 <__swsetup_r+0x7c>
 80109ec:	89a3      	ldrh	r3, [r4, #12]
 80109ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109f6:	d003      	beq.n	8010a00 <__swsetup_r+0x7c>
 80109f8:	4621      	mov	r1, r4
 80109fa:	4628      	mov	r0, r5
 80109fc:	f000 f884 	bl	8010b08 <__smakebuf_r>
 8010a00:	89a0      	ldrh	r0, [r4, #12]
 8010a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a06:	f010 0301 	ands.w	r3, r0, #1
 8010a0a:	d00a      	beq.n	8010a22 <__swsetup_r+0x9e>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	60a3      	str	r3, [r4, #8]
 8010a10:	6963      	ldr	r3, [r4, #20]
 8010a12:	425b      	negs	r3, r3
 8010a14:	61a3      	str	r3, [r4, #24]
 8010a16:	6923      	ldr	r3, [r4, #16]
 8010a18:	b943      	cbnz	r3, 8010a2c <__swsetup_r+0xa8>
 8010a1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a1e:	d1c4      	bne.n	80109aa <__swsetup_r+0x26>
 8010a20:	bd38      	pop	{r3, r4, r5, pc}
 8010a22:	0781      	lsls	r1, r0, #30
 8010a24:	bf58      	it	pl
 8010a26:	6963      	ldrpl	r3, [r4, #20]
 8010a28:	60a3      	str	r3, [r4, #8]
 8010a2a:	e7f4      	b.n	8010a16 <__swsetup_r+0x92>
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	e7f7      	b.n	8010a20 <__swsetup_r+0x9c>
 8010a30:	200000e8 	.word	0x200000e8

08010a34 <_raise_r>:
 8010a34:	291f      	cmp	r1, #31
 8010a36:	b538      	push	{r3, r4, r5, lr}
 8010a38:	4604      	mov	r4, r0
 8010a3a:	460d      	mov	r5, r1
 8010a3c:	d904      	bls.n	8010a48 <_raise_r+0x14>
 8010a3e:	2316      	movs	r3, #22
 8010a40:	6003      	str	r3, [r0, #0]
 8010a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a46:	bd38      	pop	{r3, r4, r5, pc}
 8010a48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010a4a:	b112      	cbz	r2, 8010a52 <_raise_r+0x1e>
 8010a4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a50:	b94b      	cbnz	r3, 8010a66 <_raise_r+0x32>
 8010a52:	4620      	mov	r0, r4
 8010a54:	f000 f830 	bl	8010ab8 <_getpid_r>
 8010a58:	462a      	mov	r2, r5
 8010a5a:	4601      	mov	r1, r0
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a62:	f000 b817 	b.w	8010a94 <_kill_r>
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d00a      	beq.n	8010a80 <_raise_r+0x4c>
 8010a6a:	1c59      	adds	r1, r3, #1
 8010a6c:	d103      	bne.n	8010a76 <_raise_r+0x42>
 8010a6e:	2316      	movs	r3, #22
 8010a70:	6003      	str	r3, [r0, #0]
 8010a72:	2001      	movs	r0, #1
 8010a74:	e7e7      	b.n	8010a46 <_raise_r+0x12>
 8010a76:	2400      	movs	r4, #0
 8010a78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	4798      	blx	r3
 8010a80:	2000      	movs	r0, #0
 8010a82:	e7e0      	b.n	8010a46 <_raise_r+0x12>

08010a84 <raise>:
 8010a84:	4b02      	ldr	r3, [pc, #8]	; (8010a90 <raise+0xc>)
 8010a86:	4601      	mov	r1, r0
 8010a88:	6818      	ldr	r0, [r3, #0]
 8010a8a:	f7ff bfd3 	b.w	8010a34 <_raise_r>
 8010a8e:	bf00      	nop
 8010a90:	200000e8 	.word	0x200000e8

08010a94 <_kill_r>:
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	4d07      	ldr	r5, [pc, #28]	; (8010ab4 <_kill_r+0x20>)
 8010a98:	2300      	movs	r3, #0
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	4608      	mov	r0, r1
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	602b      	str	r3, [r5, #0]
 8010aa2:	f7f0 fb39 	bl	8001118 <_kill>
 8010aa6:	1c43      	adds	r3, r0, #1
 8010aa8:	d102      	bne.n	8010ab0 <_kill_r+0x1c>
 8010aaa:	682b      	ldr	r3, [r5, #0]
 8010aac:	b103      	cbz	r3, 8010ab0 <_kill_r+0x1c>
 8010aae:	6023      	str	r3, [r4, #0]
 8010ab0:	bd38      	pop	{r3, r4, r5, pc}
 8010ab2:	bf00      	nop
 8010ab4:	20018458 	.word	0x20018458

08010ab8 <_getpid_r>:
 8010ab8:	f7f0 bb26 	b.w	8001108 <_getpid>

08010abc <__swhatbuf_r>:
 8010abc:	b570      	push	{r4, r5, r6, lr}
 8010abe:	460c      	mov	r4, r1
 8010ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ac4:	2900      	cmp	r1, #0
 8010ac6:	b096      	sub	sp, #88	; 0x58
 8010ac8:	4615      	mov	r5, r2
 8010aca:	461e      	mov	r6, r3
 8010acc:	da0d      	bge.n	8010aea <__swhatbuf_r+0x2e>
 8010ace:	89a3      	ldrh	r3, [r4, #12]
 8010ad0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010ad4:	f04f 0100 	mov.w	r1, #0
 8010ad8:	bf0c      	ite	eq
 8010ada:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010ade:	2340      	movne	r3, #64	; 0x40
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	6031      	str	r1, [r6, #0]
 8010ae4:	602b      	str	r3, [r5, #0]
 8010ae6:	b016      	add	sp, #88	; 0x58
 8010ae8:	bd70      	pop	{r4, r5, r6, pc}
 8010aea:	466a      	mov	r2, sp
 8010aec:	f000 f848 	bl	8010b80 <_fstat_r>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	dbec      	blt.n	8010ace <__swhatbuf_r+0x12>
 8010af4:	9901      	ldr	r1, [sp, #4]
 8010af6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010afa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010afe:	4259      	negs	r1, r3
 8010b00:	4159      	adcs	r1, r3
 8010b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b06:	e7eb      	b.n	8010ae0 <__swhatbuf_r+0x24>

08010b08 <__smakebuf_r>:
 8010b08:	898b      	ldrh	r3, [r1, #12]
 8010b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b0c:	079d      	lsls	r5, r3, #30
 8010b0e:	4606      	mov	r6, r0
 8010b10:	460c      	mov	r4, r1
 8010b12:	d507      	bpl.n	8010b24 <__smakebuf_r+0x1c>
 8010b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	6123      	str	r3, [r4, #16]
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	6163      	str	r3, [r4, #20]
 8010b20:	b002      	add	sp, #8
 8010b22:	bd70      	pop	{r4, r5, r6, pc}
 8010b24:	ab01      	add	r3, sp, #4
 8010b26:	466a      	mov	r2, sp
 8010b28:	f7ff ffc8 	bl	8010abc <__swhatbuf_r>
 8010b2c:	9900      	ldr	r1, [sp, #0]
 8010b2e:	4605      	mov	r5, r0
 8010b30:	4630      	mov	r0, r6
 8010b32:	f7ff fab3 	bl	801009c <_malloc_r>
 8010b36:	b948      	cbnz	r0, 8010b4c <__smakebuf_r+0x44>
 8010b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b3c:	059a      	lsls	r2, r3, #22
 8010b3e:	d4ef      	bmi.n	8010b20 <__smakebuf_r+0x18>
 8010b40:	f023 0303 	bic.w	r3, r3, #3
 8010b44:	f043 0302 	orr.w	r3, r3, #2
 8010b48:	81a3      	strh	r3, [r4, #12]
 8010b4a:	e7e3      	b.n	8010b14 <__smakebuf_r+0xc>
 8010b4c:	89a3      	ldrh	r3, [r4, #12]
 8010b4e:	6020      	str	r0, [r4, #0]
 8010b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b54:	81a3      	strh	r3, [r4, #12]
 8010b56:	9b00      	ldr	r3, [sp, #0]
 8010b58:	6163      	str	r3, [r4, #20]
 8010b5a:	9b01      	ldr	r3, [sp, #4]
 8010b5c:	6120      	str	r0, [r4, #16]
 8010b5e:	b15b      	cbz	r3, 8010b78 <__smakebuf_r+0x70>
 8010b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b64:	4630      	mov	r0, r6
 8010b66:	f000 f81d 	bl	8010ba4 <_isatty_r>
 8010b6a:	b128      	cbz	r0, 8010b78 <__smakebuf_r+0x70>
 8010b6c:	89a3      	ldrh	r3, [r4, #12]
 8010b6e:	f023 0303 	bic.w	r3, r3, #3
 8010b72:	f043 0301 	orr.w	r3, r3, #1
 8010b76:	81a3      	strh	r3, [r4, #12]
 8010b78:	89a3      	ldrh	r3, [r4, #12]
 8010b7a:	431d      	orrs	r5, r3
 8010b7c:	81a5      	strh	r5, [r4, #12]
 8010b7e:	e7cf      	b.n	8010b20 <__smakebuf_r+0x18>

08010b80 <_fstat_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	4d07      	ldr	r5, [pc, #28]	; (8010ba0 <_fstat_r+0x20>)
 8010b84:	2300      	movs	r3, #0
 8010b86:	4604      	mov	r4, r0
 8010b88:	4608      	mov	r0, r1
 8010b8a:	4611      	mov	r1, r2
 8010b8c:	602b      	str	r3, [r5, #0]
 8010b8e:	f7f0 fb22 	bl	80011d6 <_fstat>
 8010b92:	1c43      	adds	r3, r0, #1
 8010b94:	d102      	bne.n	8010b9c <_fstat_r+0x1c>
 8010b96:	682b      	ldr	r3, [r5, #0]
 8010b98:	b103      	cbz	r3, 8010b9c <_fstat_r+0x1c>
 8010b9a:	6023      	str	r3, [r4, #0]
 8010b9c:	bd38      	pop	{r3, r4, r5, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20018458 	.word	0x20018458

08010ba4 <_isatty_r>:
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	4d06      	ldr	r5, [pc, #24]	; (8010bc0 <_isatty_r+0x1c>)
 8010ba8:	2300      	movs	r3, #0
 8010baa:	4604      	mov	r4, r0
 8010bac:	4608      	mov	r0, r1
 8010bae:	602b      	str	r3, [r5, #0]
 8010bb0:	f7f0 fb21 	bl	80011f6 <_isatty>
 8010bb4:	1c43      	adds	r3, r0, #1
 8010bb6:	d102      	bne.n	8010bbe <_isatty_r+0x1a>
 8010bb8:	682b      	ldr	r3, [r5, #0]
 8010bba:	b103      	cbz	r3, 8010bbe <_isatty_r+0x1a>
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	bd38      	pop	{r3, r4, r5, pc}
 8010bc0:	20018458 	.word	0x20018458

08010bc4 <_init>:
 8010bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc6:	bf00      	nop
 8010bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bca:	bc08      	pop	{r3}
 8010bcc:	469e      	mov	lr, r3
 8010bce:	4770      	bx	lr

08010bd0 <_fini>:
 8010bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd2:	bf00      	nop
 8010bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bd6:	bc08      	pop	{r3}
 8010bd8:	469e      	mov	lr, r3
 8010bda:	4770      	bx	lr
