
ugv_autonomous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f80  08013db8  08013db8  00023db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d38  08016d38  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08016d38  08016d38  00026d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d40  08016d40  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d40  08016d40  00026d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d44  08016d44  00026d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08016d48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08016f3c  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08016fdc  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a744  20000334  0801707c  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000aa78  0801707c  0003aa78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024e62  00000000  00000000  000303a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005bf7  00000000  00000000  00055207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ae0  00000000  00000000  0005ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000158a  00000000  00000000  0005c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00035038  00000000  00000000  0005de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002af1d  00000000  00000000  00092ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011466b  00000000  00000000  000bddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007ee8  00000000  00000000  001d242c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  001da314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	08013d9c 	.word	0x08013d9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	08013d9c 	.word	0x08013d9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000668:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800066c:	f000 b9a8 	b.w	80009c0 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f83e 	bl	80006f8 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__aeabi_d2lz>:
 8000688:	b508      	push	{r3, lr}
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	ec43 2b17 	vmov	d7, r2, r3
 8000692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d403      	bmi.n	80006a4 <__aeabi_d2lz+0x1c>
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006a0:	f000 b80a 	b.w	80006b8 <__aeabi_d2ulz>
 80006a4:	eeb1 7b47 	vneg.f64	d7, d7
 80006a8:	ec51 0b17 	vmov	r0, r1, d7
 80006ac:	f000 f804 	bl	80006b8 <__aeabi_d2ulz>
 80006b0:	4240      	negs	r0, r0
 80006b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	460d      	mov	r5, r1
 8000700:	4604      	mov	r4, r0
 8000702:	460f      	mov	r7, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4694      	mov	ip, r2
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0xe2>
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	b143      	cbz	r3, 8000726 <__udivmoddi4+0x2e>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0220 	rsb	r2, r3, #32
 800071c:	409f      	lsls	r7, r3
 800071e:	fa20 f202 	lsr.w	r2, r0, r2
 8000722:	4317      	orrs	r7, r2
 8000724:	409c      	lsls	r4, r3
 8000726:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000732:	0c22      	lsrs	r2, r4, #16
 8000734:	fb0e 7711 	mls	r7, lr, r1, r7
 8000738:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800073c:	fb01 f005 	mul.w	r0, r1, r5
 8000740:	4290      	cmp	r0, r2
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x62>
 8000744:	eb1c 0202 	adds.w	r2, ip, r2
 8000748:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800074c:	f080 811c 	bcs.w	8000988 <__udivmoddi4+0x290>
 8000750:	4290      	cmp	r0, r2
 8000752:	f240 8119 	bls.w	8000988 <__udivmoddi4+0x290>
 8000756:	3902      	subs	r1, #2
 8000758:	4462      	add	r2, ip
 800075a:	1a12      	subs	r2, r2, r0
 800075c:	b2a4      	uxth	r4, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	fb00 f505 	mul.w	r5, r0, r5
 800076e:	42a5      	cmp	r5, r4
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x90>
 8000772:	eb1c 0404 	adds.w	r4, ip, r4
 8000776:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800077a:	f080 8107 	bcs.w	800098c <__udivmoddi4+0x294>
 800077e:	42a5      	cmp	r5, r4
 8000780:	f240 8104 	bls.w	800098c <__udivmoddi4+0x294>
 8000784:	4464      	add	r4, ip
 8000786:	3802      	subs	r0, #2
 8000788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	2100      	movs	r1, #0
 8000790:	b11e      	cbz	r6, 800079a <__udivmoddi4+0xa2>
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2300      	movs	r3, #0
 8000796:	e9c6 4300 	strd	r4, r3, [r6]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0xbc>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80ed 	beq.w	8000982 <__udivmoddi4+0x28a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e9c6 0500 	strd	r0, r5, [r6]
 80007ae:	4608      	mov	r0, r1
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	fab3 f183 	clz	r1, r3
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d149      	bne.n	8000850 <__udivmoddi4+0x158>
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d302      	bcc.n	80007c6 <__udivmoddi4+0xce>
 80007c0:	4282      	cmp	r2, r0
 80007c2:	f200 80f8 	bhi.w	80009b6 <__udivmoddi4+0x2be>
 80007c6:	1a84      	subs	r4, r0, r2
 80007c8:	eb65 0203 	sbc.w	r2, r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	4617      	mov	r7, r2
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d0e2      	beq.n	800079a <__udivmoddi4+0xa2>
 80007d4:	e9c6 4700 	strd	r4, r7, [r6]
 80007d8:	e7df      	b.n	800079a <__udivmoddi4+0xa2>
 80007da:	b902      	cbnz	r2, 80007de <__udivmoddi4+0xe6>
 80007dc:	deff      	udf	#255	; 0xff
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8090 	bne.w	8000908 <__udivmoddi4+0x210>
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2101      	movs	r1, #1
 80007f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007f8:	fb07 2015 	mls	r0, r7, r5, r2
 80007fc:	0c22      	lsrs	r2, r4, #16
 80007fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000802:	fb0e f005 	mul.w	r0, lr, r5
 8000806:	4290      	cmp	r0, r2
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x124>
 800080a:	eb1c 0202 	adds.w	r2, ip, r2
 800080e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4290      	cmp	r0, r2
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2b8>
 800081a:	4645      	mov	r5, r8
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb2 f0f7 	udiv	r0, r2, r7
 8000824:	fb07 2210 	mls	r2, r7, r0, r2
 8000828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x14e>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x14c>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2c2>
 8000844:	4610      	mov	r0, r2
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800084e:	e79f      	b.n	8000790 <__udivmoddi4+0x98>
 8000850:	f1c1 0720 	rsb	r7, r1, #32
 8000854:	408b      	lsls	r3, r1
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa05 f401 	lsl.w	r4, r5, r1
 8000862:	fa20 f307 	lsr.w	r3, r0, r7
 8000866:	40fd      	lsrs	r5, r7
 8000868:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086c:	4323      	orrs	r3, r4
 800086e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	fb09 5518 	mls	r5, r9, r8, r5
 800087a:	0c1c      	lsrs	r4, r3, #16
 800087c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000880:	fb08 f50e 	mul.w	r5, r8, lr
 8000884:	42a5      	cmp	r5, r4
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	fa00 f001 	lsl.w	r0, r0, r1
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2b4>
 800089c:	42a5      	cmp	r5, r4
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2b4>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4464      	add	r4, ip
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	b29d      	uxth	r5, r3
 80008ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b0:	fb09 4413 	mls	r4, r9, r3, r4
 80008b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008bc:	45a6      	cmp	lr, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2ac>
 80008ca:	45a6      	cmp	lr, r4
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2ac>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4464      	add	r4, ip
 80008d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d6:	fba3 9502 	umull	r9, r5, r3, r2
 80008da:	eba4 040e 	sub.w	r4, r4, lr
 80008de:	42ac      	cmp	r4, r5
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46ae      	mov	lr, r5
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x29c>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x298>
 80008e8:	b156      	cbz	r6, 8000900 <__udivmoddi4+0x208>
 80008ea:	ebb0 0208 	subs.w	r2, r0, r8
 80008ee:	eb64 040e 	sbc.w	r4, r4, lr
 80008f2:	fa04 f707 	lsl.w	r7, r4, r7
 80008f6:	40ca      	lsrs	r2, r1
 80008f8:	40cc      	lsrs	r4, r1
 80008fa:	4317      	orrs	r7, r2
 80008fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000900:	4618      	mov	r0, r3
 8000902:	2100      	movs	r1, #0
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	f1c3 0120 	rsb	r1, r3, #32
 800090c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000910:	fa20 f201 	lsr.w	r2, r0, r1
 8000914:	fa25 f101 	lsr.w	r1, r5, r1
 8000918:	409d      	lsls	r5, r3
 800091a:	432a      	orrs	r2, r5
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb1 f0f7 	udiv	r0, r1, r7
 8000928:	fb07 1510 	mls	r5, r7, r0, r1
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000932:	fb00 f50e 	mul.w	r5, r0, lr
 8000936:	428d      	cmp	r5, r1
 8000938:	fa04 f403 	lsl.w	r4, r4, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x258>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b0>
 8000948:	428d      	cmp	r5, r1
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b0>
 800094c:	3802      	subs	r0, #2
 800094e:	4461      	add	r1, ip
 8000950:	1b49      	subs	r1, r1, r5
 8000952:	b292      	uxth	r2, r2
 8000954:	fbb1 f5f7 	udiv	r5, r1, r7
 8000958:	fb07 1115 	mls	r1, r7, r5, r1
 800095c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000960:	fb05 f10e 	mul.w	r1, r5, lr
 8000964:	4291      	cmp	r1, r2
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x282>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 8000972:	4291      	cmp	r1, r2
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0xfc>
 8000982:	4631      	mov	r1, r6
 8000984:	4630      	mov	r0, r6
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xa2>
 8000988:	4639      	mov	r1, r7
 800098a:	e6e6      	b.n	800075a <__udivmoddi4+0x62>
 800098c:	4610      	mov	r0, r2
 800098e:	e6fb      	b.n	8000788 <__udivmoddi4+0x90>
 8000990:	4548      	cmp	r0, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb65 0e0c 	sbc.w	lr, r5, ip
 800099c:	3b01      	subs	r3, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f0>
 80009a0:	4645      	mov	r5, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x282>
 80009a4:	462b      	mov	r3, r5
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x258>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009b0:	3d02      	subs	r5, #2
 80009b2:	4462      	add	r2, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x124>
 80009b6:	4608      	mov	r0, r1
 80009b8:	e70a      	b.n	80007d0 <__udivmoddi4+0xd8>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x14e>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009c8:	f3bf 8f4f 	dsb	sy
}
 80009cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ce:	f3bf 8f6f 	isb	sy
}
 80009d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <SCB_EnableICache+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009dc:	f3bf 8f4f 	dsb	sy
}
 80009e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e2:	f3bf 8f6f 	isb	sy
}
 80009e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SCB_EnableICache+0x48>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f4:	f3bf 8f4f 	dsb	sy
}
 80009f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009fa:	f3bf 8f6f 	isb	sy
}
 80009fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1e:	f3bf 8f4f 	dsb	sy
}
 8000a22:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a2a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0b5b      	lsrs	r3, r3, #13
 8000a30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a34:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a3e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	015a      	lsls	r2, r3, #5
 8000a44:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a48:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4e:	4911      	ldr	r1, [pc, #68]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	60ba      	str	r2, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1ef      	bne.n	8000a40 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	60fa      	str	r2, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1e5      	bne.n	8000a36 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6a:	f3bf 8f4f 	dsb	sy
}
 8000a6e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SCB_EnableDCache+0x84>)
 8000a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a82:	f3bf 8f6f 	isb	sy
}
 8000a86:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a9c:	f000 fbfc 	bl	8001298 <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000aa0:	f7ff ff90 	bl	80009c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000aa4:	f7ff ffb4 	bl	8000a10 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f001 f80e 	bl	8001ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f86c 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 fa32 	bl	8000f18 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000ab4:	f005 ff3c 	bl	8006930 <MX_LWIP_Init>
  MX_TIM1_Init();
 8000ab8:	f000 f8d4 	bl	8000c64 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000abc:	f000 f98a 	bl	8000dd4 <MX_TIM10_Init>
  MX_USART3_UART_Init();
 8000ac0:	f000 f9fa 	bl	8000eb8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000ac4:	f000 f922 	bl	8000d0c <MX_TIM2_Init>
  MX_TIM13_Init();
 8000ac8:	f000 f9d2 	bl	8000e70 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  // 2022 Servo Driver
	steeringServo.timerInstance = &htim10;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <main+0xbc>)
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <main+0xc0>)
 8000ad0:	601a      	str	r2, [r3, #0]
	steeringServo.timerCCRX = &TIM10->CCR1;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <main+0xbc>)
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <main+0xc4>)
 8000ad6:	605a      	str	r2, [r3, #4]
	steeringServo.timerCh = TIM_CHANNEL_1;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <main+0xbc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	811a      	strh	r2, [r3, #8]
	//	steeringServo.travelOffset = 50;
	steeringServo.travelOffset = 10;
	*/

	// 2022 Servo Driver
	  steeringServo.timerInstance = &htim10;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <main+0xbc>)
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <main+0xc0>)
 8000ae2:	601a      	str	r2, [r3, #0]
	  steeringServo.timerCCRX = &TIM10->CCR1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <main+0xbc>)
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <main+0xc4>)
 8000ae8:	605a      	str	r2, [r3, #4]
	  steeringServo.timerCh = TIM_CHANNEL_1;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <main+0xbc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	811a      	strh	r2, [r3, #8]
	  steeringServo.timerARR = htim10.Init.Period;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <main+0xc0>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <main+0xbc>)
 8000af8:	815a      	strh	r2, [r3, #10]
	  steeringServo.minPulse = 500;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <main+0xbc>)
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <main+0xc8>)
 8000afe:	60da      	str	r2, [r3, #12]
	  steeringServo.maxPulse = 2500;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <main+0xbc>)
 8000b02:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <main+0xcc>)
 8000b04:	611a      	str	r2, [r3, #16]
	  steeringServo.timerPeriod = 20000;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <main+0xbc>)
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <main+0xd0>)
 8000b0a:	615a      	str	r2, [r3, #20]
	  steeringServo.travelAngle = 270.0;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <main+0xbc>)
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <main+0xd4>)
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24

	  steeringServo.minLimit = 0.0;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <main+0xbc>)
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
	  steeringServo.maxLimit = 105.0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <main+0xbc>)
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <main+0xd8>)
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30

	  steeringServo.travelOffset = 50;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <main+0xbc>)
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <main+0xdc>)
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28

	ugv_servoInitServo(&steeringServo);
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <main+0xbc>)
 8000b28:	f005 fe1c 	bl	8006764 <ugv_servoInitServo>
	MotorControl_Init(&ugv_drive_mtr, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_3);
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4911      	ldr	r1, [pc, #68]	; (8000b78 <main+0xe0>)
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <main+0xe4>)
 8000b34:	f005 fd8f 	bl	8006656 <MotorControl_Init>

  udp_client_connect();
 8000b38:	f000 fb0a 	bl	8001150 <udp_client_connect>

  /* Start HAL timer interrupt
  /  Interrupt occurs once every 50ms
  */
  HAL_TIM_Base_Start_IT(&htim13);
 8000b3c:	4810      	ldr	r0, [pc, #64]	; (8000b80 <main+0xe8>)
 8000b3e:	f003 ff6f 	bl	8004a20 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <main+0xec>)
 8000b44:	f006 f984 	bl	8006e50 <ethernetif_input>
	  ethernet_link_check_state(&gnetif);
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <main+0xec>)
 8000b4a:	f006 faff 	bl	800714c <ethernet_link_check_state>
	  //udpClient
//	  gnetif.input()
	  //ethernet_input(p, netif)
	  sys_check_timeouts();
 8000b4e:	f00d fc4b 	bl	800e3e8 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000b52:	e7f6      	b.n	8000b42 <main+0xaa>
 8000b54:	20000508 	.word	0x20000508
 8000b58:	200003e8 	.word	0x200003e8
 8000b5c:	40014434 	.word	0x40014434
 8000b60:	43fa0000 	.word	0x43fa0000
 8000b64:	451c4000 	.word	0x451c4000
 8000b68:	469c4000 	.word	0x469c4000
 8000b6c:	43870000 	.word	0x43870000
 8000b70:	42d20000 	.word	0x42d20000
 8000b74:	42480000 	.word	0x42480000
 8000b78:	2000039c 	.word	0x2000039c
 8000b7c:	2000053c 	.word	0x2000053c
 8000b80:	20000434 	.word	0x20000434
 8000b84:	200005c0 	.word	0x200005c0

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2234      	movs	r2, #52	; 0x34
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f011 f98f 	bl	8011eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <SystemClock_Config+0xd4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <SystemClock_Config+0xd4>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <SystemClock_Config+0xd4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bf4:	23d8      	movs	r3, #216	; 0xd8
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fdb7 	bl	800377c <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c14:	f000 fb6e 	bl	80012f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c18:	f002 fd60 	bl	80036dc <HAL_PWREx_EnableOverDrive>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c22:	f000 fb67 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2107      	movs	r1, #7
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f847 	bl	8003cd8 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c50:	f000 fb50 	bl	80012f4 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	; 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <MX_TIM1_Init+0xa4>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c8a:	f642 2230 	movw	r2, #10800	; 0x2a30
 8000c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000c98:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb0:	4814      	ldr	r0, [pc, #80]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cb2:	f003 fe5d 	bl	8004970 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000cbc:	f000 fb1a 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cce:	f004 fa8d 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000cd8:	f000 fb0c 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM1_Init+0xa0>)
 8000cee:	f004 ff39 	bl	8005b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cf8:	f000 fafc 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000350 	.word	0x20000350
 8000d08:	40010000 	.word	0x40010000

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d5a:	f003 fed9 	bl	8004b10 <HAL_TIM_PWM_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f000 fac6 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4816      	ldr	r0, [pc, #88]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d78:	f004 fef4 	bl	8005b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d82:	f000 fab7 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d86:	2360      	movs	r3, #96	; 0x60
 8000d88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000d9e:	f004 f911 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000da8:	f000 faa4 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	2208      	movs	r2, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000db4:	f004 f906 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000dbe:	f000 fa99 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM2_Init+0xc4>)
 8000dc4:	f000 fb44 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000039c 	.word	0x2000039c

08000dd4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <MX_TIM10_Init+0x98>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000df4:	2247      	movs	r2, #71	; 0x47
 8000df6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 29999;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e00:	f247 522f 	movw	r2, #29999	; 0x752f
 8000e04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e12:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e14:	f003 fdac 	bl	8004970 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000e1e:	f000 fa69 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e24:	f003 fe74 	bl	8004b10 <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000e2e:	f000 fa61 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e4a:	f004 f8bb 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000e54:	f000 fa4e 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM10_Init+0x94>)
 8000e5a:	f000 faf9 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200003e8 	.word	0x200003e8
 8000e6c:	40014400 	.word	0x40014400

08000e70 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <MX_TIM13_Init+0x44>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2700;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e7c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000e80:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 499;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e8a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e8e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_TIM13_Init+0x40>)
 8000e9e:	f003 fd67 	bl	8004970 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000ea8:	f000 fa24 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000434 	.word	0x20000434
 8000eb4:	40001c00 	.word	0x40001c00

08000eb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_USART3_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000efc:	f004 fede 	bl	8005cbc <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f06:	f000 f9f5 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000480 	.word	0x20000480
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a55      	ldr	r2, [pc, #340]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b53      	ldr	r3, [pc, #332]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	4b50      	ldr	r3, [pc, #320]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a4f      	ldr	r2, [pc, #316]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b4d      	ldr	r3, [pc, #308]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a49      	ldr	r2, [pc, #292]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b44      	ldr	r3, [pc, #272]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a43      	ldr	r2, [pc, #268]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b41      	ldr	r3, [pc, #260]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_GPIO_Init+0x170>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_GPIO_Init+0x170>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a37      	ldr	r2, [pc, #220]	; (8001088 <MX_GPIO_Init+0x170>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_GPIO_Init+0x170>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f244 2181 	movw	r1, #17025	; 0x4281
 8000fc4:	4831      	ldr	r0, [pc, #196]	; (800108c <MX_GPIO_Init+0x174>)
 8000fc6:	f002 fb55 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2140      	movs	r1, #64	; 0x40
 8000fce:	4830      	ldr	r0, [pc, #192]	; (8001090 <MX_GPIO_Init+0x178>)
 8000fd0:	f002 fb50 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	482a      	ldr	r0, [pc, #168]	; (8001094 <MX_GPIO_Init+0x17c>)
 8000fec:	f002 f996 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9;
 8000ff0:	f244 2381 	movw	r3, #17025	; 0x4281
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4820      	ldr	r0, [pc, #128]	; (800108c <MX_GPIO_Init+0x174>)
 800100a:	f002 f987 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	481a      	ldr	r0, [pc, #104]	; (8001090 <MX_GPIO_Init+0x178>)
 8001026:	f002 f979 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4814      	ldr	r0, [pc, #80]	; (8001090 <MX_GPIO_Init+0x178>)
 800103e:	f002 f96d 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001042:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001054:	230a      	movs	r3, #10
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <MX_GPIO_Init+0x180>)
 8001060:	f002 f95c 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_GPIO_Init+0x180>)
 800107a:	f002 f94f 	bl	800331c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107e:	bf00      	nop
 8001080:	3730      	adds	r7, #48	; 0x30
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400
 8001090:	40021800 	.word	0x40021800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000
 800109c:	00000000 	.word	0x00000000

080010a0 <HAL_TIM_PeriodElapsedCallback>:
 *
 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80010a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ac:	4820      	ldr	r0, [pc, #128]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010ae:	f002 fafa 	bl	80036a6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010b8:	f002 faf5 	bl	80036a6 <HAL_GPIO_TogglePin>

	static const float Kp_heading = 1.5;  //Kp value for heading controller

	steer_val =  Kp_heading * heading_error;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010ce:	edc3 7a00 	vstr	s15, [r3]
	ugv_servoSetAngle(&steeringServo, steeringServo.maxLimit *steer_val + 0.224*steeringServo.maxLimit);
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010d4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010e8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f0:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001128 <HAL_TIM_PeriodElapsedCallback+0x88>
 80010f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001100:	eeb0 0a67 	vmov.f32	s0, s15
 8001104:	480e      	ldr	r0, [pc, #56]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001106:	f005 fb71 	bl	80067ec <ugv_servoSetAngle>
	MotorControl_SetSpeed(&ugv_drive_mtr, &htim2, velocity_val);
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	eeb0 0a67 	vmov.f32	s0, s15
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001118:	f005 fac6 	bl	80066a8 <MotorControl_SetSpeed>

	// Timer callback meant to send data from stm -> Rpi in a periodic manner

//	udp_client_send();
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	3126e979 	.word	0x3126e979
 800112c:	3fccac08 	.word	0x3fccac08
 8001130:	40020400 	.word	0x40020400
 8001134:	080167bc 	.word	0x080167bc
 8001138:	2000054c 	.word	0x2000054c
 800113c:	20000544 	.word	0x20000544
 8001140:	20000508 	.word	0x20000508
 8001144:	20000548 	.word	0x20000548
 8001148:	2000039c 	.word	0x2000039c
 800114c:	2000053c 	.word	0x2000053c

08001150 <udp_client_connect>:

void udp_client_connect()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	// Need to check for null return
	upcb = udp_new();
 8001156:	f00d fc61 	bl	800ea1c <udp_new>
 800115a:	4603      	mov	r3, r0
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <udp_client_connect+0x64>)
 800115e:	6013      	str	r3, [r2, #0]

	// Bind control block to module's IP address and port
	// Static IP address: 192.168.2.xxx
	ip_addr_t my_ip;
//	IP_ADDR4(&my_ip, 192, 168, 5, 21); 	//STM ip when connected to RPI 5
	IP_ADDR4(&my_ip, 192, 168, 20, 21); //STM ip when connected to Jetson Orin
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <udp_client_connect+0x68>)
 8001162:	60bb      	str	r3, [r7, #8]
//	IP_ADDR4(&my_ip, 192, 168, 2, 21); 	// STM ip when connected to linux desktop

	// Binds udp protocol control block to a local IP address
	// Arbitrary port # selection: 8
	udp_bind(upcb, &my_ip, 8);
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <udp_client_connect+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f107 0108 	add.w	r1, r7, #8
 800116c:	2208      	movs	r2, #8
 800116e:	4618      	mov	r0, r3
 8001170:	f00d fb3e 	bl	800e7f0 <udp_bind>
	// Configure destination IP address
	// Host ip address: 192.168.2.5
	// Arbitrary port # selection: 12345
	ip_addr_t DestIPaddr;
//	IP_ADDR4(&DestIPaddr, 192, 168, 5, 5);  //RPI 5 host ip address
	IP_ADDR4(&DestIPaddr, 192, 168, 20, 5);  //Jetson Orin Nano host ip address
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <udp_client_connect+0x6c>)
 8001176:	607b      	str	r3, [r7, #4]
//	IP_ADDR4(&DestIPaddr, 192, 168, 2, 5);  //Desktop Host ip address
	err = udp_connect(upcb, &DestIPaddr, 12345);
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <udp_client_connect+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1d39      	adds	r1, r7, #4
 800117e:	f243 0239 	movw	r2, #12345	; 0x3039
 8001182:	4618      	mov	r0, r3
 8001184:	f00d fbbc 	bl	800e900 <udp_connect>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]

	if (err == HAL_OK)
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10a      	bne.n	80011aa <udp_client_connect+0x5a>
	{
		// Blue LED
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <udp_client_connect+0x70>)
 8001198:	f002 fa85 	bl	80036a6 <HAL_GPIO_TogglePin>
		// Set a receive callback for the upcb when server sends data to client
		udp_recv(upcb, udp_receive_callback, NULL);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <udp_client_connect+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <udp_client_connect+0x74>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00d fc19 	bl	800e9dc <udp_recv>

	}
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000550 	.word	0x20000550
 80011b8:	1514a8c0 	.word	0x1514a8c0
 80011bc:	0514a8c0 	.word	0x0514a8c0
 80011c0:	40020400 	.word	0x40020400
 80011c4:	080011c9 	.word	0x080011c9

080011c8 <udp_receive_callback>:
	}
}

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b092      	sub	sp, #72	; 0x48
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
	// Copy data from the pbuf
	strncpy(buffer, (char *)p->payload, p->len);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6859      	ldr	r1, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	895b      	ldrh	r3, [r3, #10]
 80011de:	461a      	mov	r2, r3
 80011e0:	4828      	ldr	r0, [pc, #160]	; (8001284 <udp_receive_callback+0xbc>)
 80011e2:	f010 fe84 	bl	8011eee <strncpy>

	//Parse Input
	uint8_t data_index = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	float drive_vals[10] = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2228      	movs	r2, #40	; 0x28
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f010 fe60 	bl	8011eba <memset>
	char *buffer_data = strtok(buffer, ",");
 80011fa:	4923      	ldr	r1, [pc, #140]	; (8001288 <udp_receive_callback+0xc0>)
 80011fc:	4821      	ldr	r0, [pc, #132]	; (8001284 <udp_receive_callback+0xbc>)
 80011fe:	f010 fe89 	bl	8011f14 <strtok>
 8001202:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 8001204:	e026      	b.n	8001254 <udp_receive_callback+0x8c>
	{
		float conv_check = atof(buffer_data);
 8001206:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001208:	f00f ff16 	bl	8011038 <atof>
 800120c:	eeb0 7b40 	vmov.f64	d7, d0
 8001210:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001214:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		//Make data was converted properly
		if (conv_check == 0)
 8001218:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800121c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	d104      	bne.n	8001230 <udp_receive_callback+0x68>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122a:	4818      	ldr	r0, [pc, #96]	; (800128c <udp_receive_callback+0xc4>)
 800122c:	f002 fa3b 	bl	80036a6 <HAL_GPIO_TogglePin>
		}

		drive_vals[data_index] = conv_check;
 8001230:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	3348      	adds	r3, #72	; 0x48
 8001238:	443b      	add	r3, r7
 800123a:	3b34      	subs	r3, #52	; 0x34
 800123c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800123e:	601a      	str	r2, [r3, #0]

		++data_index;
 8001240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001244:	3301      	adds	r3, #1
 8001246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		buffer_data = strtok(NULL, ",");
 800124a:	490f      	ldr	r1, [pc, #60]	; (8001288 <udp_receive_callback+0xc0>)
 800124c:	2000      	movs	r0, #0
 800124e:	f010 fe61 	bl	8011f14 <strtok>
 8001252:	6438      	str	r0, [r7, #64]	; 0x40
	while (buffer_data != NULL && data_index < 10)
 8001254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <udp_receive_callback+0x9a>
 800125a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800125e:	2b09      	cmp	r3, #9
 8001260:	d9d1      	bls.n	8001206 <udp_receive_callback+0x3e>
	}



	// Free recieve pbuf;
	pbuf_free(p);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f007 fbce 	bl	8008a04 <pbuf_free>

	velocity_val = drive_vals[0];
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <udp_receive_callback+0xc8>)
 800126c:	6013      	str	r3, [r2, #0]
	//steer_val = drive_vals[1];
	heading_error = drive_vals[2]; //Receive Heading Error
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <udp_receive_callback+0xcc>)
 8001272:	6013      	str	r3, [r2, #0]
	// Set Steering Angle for Servo
//	ugv_servoSetAngle(&steeringServo, steeringServo.maxLimit *steer_val + 0.224*steeringServo.maxLimit);
//	//ugv_servoSetAngle(&steeringServo, drive_vals[1]);
//	MotorControl_SetSpeed(&ugv_drive_mtr, &htim2, velocity_val);

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001274:	2101      	movs	r1, #1
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <udp_receive_callback+0xc4>)
 8001278:	f002 fa15 	bl	80036a6 <HAL_GPIO_TogglePin>
}
 800127c:	bf00      	nop
 800127e:	3748      	adds	r7, #72	; 0x48
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000554 	.word	0x20000554
 8001288:	08013dd8 	.word	0x08013dd8
 800128c:	40020400 	.word	0x40020400
 8001290:	20000548 	.word	0x20000548
 8001294:	2000054c 	.word	0x2000054c

08001298 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012aa:	f000 fda9 	bl	8001e00 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MPU_Config+0x58>)
 80012b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80012ba:	230d      	movs	r3, #13
 80012bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012be:	2300      	movs	r3, #0
 80012c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012c6:	2303      	movs	r3, #3
 80012c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012ca:	2301      	movs	r3, #1
 80012cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012da:	463b      	mov	r3, r7
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fdc7 	bl	8001e70 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012e2:	2004      	movs	r0, #4
 80012e4:	f000 fda4 	bl	8001e30 <HAL_MPU_Enable>

}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2007c000 	.word	0x2007c000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x44>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_MspInit+0x44>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x44>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x44>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x44>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2b      	ldr	r2, [pc, #172]	; (8001404 <HAL_TIM_Base_MspInit+0xbc>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11c      	bne.n	8001394 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a2a      	ldr	r2, [pc, #168]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2018      	movs	r0, #24
 8001378:	f000 fd0b 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800137c:	2018      	movs	r0, #24
 800137e:	f000 fd24 	bl	8001dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2019      	movs	r0, #25
 8001388:	f000 fd03 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800138c:	2019      	movs	r0, #25
 800138e:	f000 fd1c 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001392:	e032      	b.n	80013fa <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM10)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1c      	ldr	r2, [pc, #112]	; (800140c <HAL_TIM_Base_MspInit+0xc4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d114      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2019      	movs	r0, #25
 80013bc:	f000 fce9 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013c0:	2019      	movs	r0, #25
 80013c2:	f000 fd02 	bl	8001dca <HAL_NVIC_EnableIRQ>
}
 80013c6:	e018      	b.n	80013fa <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM13)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_TIM_Base_MspInit+0xc8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d113      	bne.n	80013fa <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 80013d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_TIM_Base_MspInit+0xc0>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	202c      	movs	r0, #44	; 0x2c
 80013f0:	f000 fccf 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013f4:	202c      	movs	r0, #44	; 0x2c
 80013f6:	f000 fce8 	bl	8001dca <HAL_NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40010000 	.word	0x40010000
 8001408:	40023800 	.word	0x40023800
 800140c:	40014400 	.word	0x40014400
 8001410:	40001c00 	.word	0x40001c00

08001414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001424:	d10b      	bne.n	800143e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_TIM_PWM_MspInit+0x38>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_TIM_PWM_MspInit+0x38>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_TIM_PWM_MspInit+0x38>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001470:	d139      	bne.n	80014e6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014b2:	2301      	movs	r3, #1
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	481e      	ldr	r0, [pc, #120]	; (8001538 <HAL_TIM_MspPostInit+0xe8>)
 80014be:	f001 ff2d 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014d4:	2301      	movs	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <HAL_TIM_MspPostInit+0xec>)
 80014e0:	f001 ff1c 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80014e4:	e021      	b.n	800152a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM10)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <HAL_TIM_MspPostInit+0xf0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d11c      	bne.n	800152a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_TIM_MspPostInit+0xe4>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800151a:	2303      	movs	r3, #3
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <HAL_TIM_MspPostInit+0xec>)
 8001526:	f001 fef9 	bl	800331c <HAL_GPIO_Init>
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40014400 	.word	0x40014400

08001544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0ae      	sub	sp, #184	; 0xb8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2290      	movs	r2, #144	; 0x90
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f010 fca8 	bl	8011eba <memset>
  if(huart->Instance==USART3)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_UART_MspInit+0xb4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d13c      	bne.n	80015ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001578:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800157a:	2300      	movs	r3, #0
 800157c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fdcc 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800158e:	f7ff feb1 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_UART_MspInit+0xb8>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_UART_MspInit+0xb8>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_UART_MspInit+0xb8>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_UART_MspInit+0xb8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_UART_MspInit+0xb8>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_UART_MspInit+0xb8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_UART_MspInit+0xbc>)
 80015ea:	f001 fe97 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	37b8      	adds	r7, #184	; 0xb8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40004800 	.word	0x40004800
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020c00 	.word	0x40020c00

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 fa80 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800165e:	f003 fba9 	bl	8004db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000350 	.word	0x20000350

0800166c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001672:	f003 fb9f 	bl	8004db4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001676:	4803      	ldr	r0, [pc, #12]	; (8001684 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001678:	f003 fb9c 	bl	8004db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000350 	.word	0x20000350
 8001684:	200003e8 	.word	0x200003e8

08001688 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800168e:	f003 fb91 	bl	8004db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000434 	.word	0x20000434

0800169c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <ETH_IRQHandler+0x10>)
 80016a2:	f000 ff4f 	bl	8002544 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20004f98 	.word	0x20004f98

080016b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return 1;
 80016b4:	2301      	movs	r3, #1
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_kill>:

int _kill(int pid, int sig)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <_kill+0x20>)
 80016cc:	2216      	movs	r2, #22
 80016ce:	601a      	str	r2, [r3, #0]
  return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	2000aa68 	.word	0x2000aa68

080016e4 <_exit>:

void _exit (int status)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffe5 	bl	80016c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016f6:	e7fe      	b.n	80016f6 <_exit+0x12>

080016f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e00a      	b.n	8001720 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800170a:	f3af 8000 	nop.w
 800170e:	4601      	mov	r1, r0
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	b2ca      	uxtb	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf0      	blt.n	800170a <_read+0x12>
  }

  return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e009      	b.n	8001758 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf1      	blt.n	8001744 <_write+0x12>
  }
  return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_close>:

int _close(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001792:	605a      	str	r2, [r3, #4]
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_isatty>:

int _isatty(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d205      	bcs.n	8001810 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <_sbrk+0x6c>)
 8001806:	220c      	movs	r2, #12
 8001808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800180e:	e009      	b.n	8001824 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a06      	ldr	r2, [pc, #24]	; (8001838 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20080000 	.word	0x20080000
 8001834:	00000400 	.word	0x00000400
 8001838:	200005b8 	.word	0x200005b8
 800183c:	2000aa78 	.word	0x2000aa78
 8001840:	2000aa68 	.word	0x2000aa68

08001844 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001896:	f010 fbe5 	bl	8012064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff f8fd 	bl	8000a98 <main>
  bx  lr    
 800189e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80018ac:	08016d48 	.word	0x08016d48
  ldr r2, =_sbss
 80018b0:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 80018b4:	2000aa78 	.word	0x2000aa78

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>

080018ba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <LAN8742_RegisterBusIO+0x28>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <LAN8742_RegisterBusIO+0x28>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <LAN8742_RegisterBusIO+0x28>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e6:	e014      	b.n	8001912 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d139      	bne.n	80019ae <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e01c      	b.n	800198e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	2112      	movs	r1, #18
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	4798      	blx	r3
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	da03      	bge.n	8001970 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001968:	f06f 0304 	mvn.w	r3, #4
 800196c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800196e:	e00b      	b.n	8001988 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	d105      	bne.n	8001988 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
         break;
 8001986:	e005      	b.n	8001994 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b1f      	cmp	r3, #31
 8001992:	d9df      	bls.n	8001954 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b1f      	cmp	r3, #31
 800199a:	d902      	bls.n	80019a2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800199c:	f06f 0302 	mvn.w	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80019ae:	693b      	ldr	r3, [r7, #16]
 }
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6810      	ldr	r0, [r2, #0]
 80019cc:	f107 020c 	add.w	r2, r7, #12
 80019d0:	2101      	movs	r1, #1
 80019d2:	4798      	blx	r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da02      	bge.n	80019e0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019da:	f06f 0304 	mvn.w	r3, #4
 80019de:	e06e      	b.n	8001abe <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6810      	ldr	r0, [r2, #0]
 80019e8:	f107 020c 	add.w	r2, r7, #12
 80019ec:	2101      	movs	r1, #1
 80019ee:	4798      	blx	r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da02      	bge.n	80019fc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019f6:	f06f 0304 	mvn.w	r3, #4
 80019fa:	e060      	b.n	8001abe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e059      	b.n	8001abe <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6810      	ldr	r0, [r2, #0]
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	2100      	movs	r1, #0
 8001a18:	4798      	blx	r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da02      	bge.n	8001a26 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a20:	f06f 0304 	mvn.w	r3, #4
 8001a24:	e04b      	b.n	8001abe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d11b      	bne.n	8001a68 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <LAN8742_GetLinkState+0x90>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a44:	2302      	movs	r3, #2
 8001a46:	e03a      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e033      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a60:	2304      	movs	r3, #4
 8001a62:	e02c      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a64:	2305      	movs	r3, #5
 8001a66:	e02a      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6810      	ldr	r0, [r2, #0]
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	211f      	movs	r1, #31
 8001a76:	4798      	blx	r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da02      	bge.n	8001a84 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001a7e:	f06f 0304 	mvn.w	r3, #4
 8001a82:	e01c      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e015      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	2b18      	cmp	r3, #24
 8001a9a:	d101      	bne.n	8001aa0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e00e      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 031c 	and.w	r3, r3, #28
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d101      	bne.n	8001aae <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e007      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 031c 	and.w	r3, r3, #28
 8001ab4:	2b14      	cmp	r3, #20
 8001ab6:	d101      	bne.n	8001abc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	e000      	b.n	8001abe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001abc:	2305      	movs	r3, #5
    }
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_Init+0x28>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_Init+0x28>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f94f 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 f808 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae4:	f7ff fc0c 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x54>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f967 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b30:	f000 f92f 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_InitTick+0x5c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008
 8001b78:	200005bc 	.word	0x200005bc

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200005bc 	.word	0x200005bc

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff ffee 	bl	8001b7c <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008

08001bdc <__NVIC_SetPriorityGrouping>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <__NVIC_SetPriorityGrouping+0x40>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <__NVIC_SetPriorityGrouping+0x40>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	60d3      	str	r3, [r2, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	05fa0000 	.word	0x05fa0000

08001c24 <__NVIC_GetPriorityGrouping>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff3e 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff31 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e04:	f3bf 8f5f 	dmb	sy
}
 8001e08:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_MPU_Disable+0x28>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_MPU_Disable+0x28>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_MPU_Disable+0x2c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	e000ed90 	.word	0xe000ed90

08001e30 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e38:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_MPU_Enable+0x38>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_MPU_Enable+0x3c>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_MPU_Enable+0x3c>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4e:	f3bf 8f4f 	dsb	sy
}
 8001e52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e54:	f3bf 8f6f 	isb	sy
}
 8001e58:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed90 	.word	0xe000ed90
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	785a      	ldrb	r2, [r3, #1]
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_MPU_ConfigRegion+0x7c>)
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_MPU_ConfigRegion+0x7c>)
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_MPU_ConfigRegion+0x7c>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_MPU_ConfigRegion+0x7c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7b1b      	ldrb	r3, [r3, #12]
 8001e98:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7adb      	ldrb	r3, [r3, #11]
 8001e9e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7a9b      	ldrb	r3, [r3, #10]
 8001ea6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7b5b      	ldrb	r3, [r3, #13]
 8001eae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7b9b      	ldrb	r3, [r3, #14]
 8001eb6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7bdb      	ldrb	r3, [r3, #15]
 8001ebe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7a5b      	ldrb	r3, [r3, #9]
 8001ec6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7a1b      	ldrb	r3, [r3, #8]
 8001ece:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ed0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eda:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001edc:	6113      	str	r3, [r2, #16]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed90 	.word	0xe000ed90

08001ef0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e086      	b.n	8002010 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2223      	movs	r2, #35	; 0x23
 8001f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 f80b 	bl	8006f30 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <HAL_ETH_Init+0x128>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a3e      	ldr	r2, [pc, #248]	; (8002018 <HAL_ETH_Init+0x128>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <HAL_ETH_Init+0x128>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_ETH_Init+0x12c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a39      	ldr	r2, [pc, #228]	; (800201c <HAL_ETH_Init+0x12c>)
 8001f38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f3c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_ETH_Init+0x12c>)
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_ETH_Init+0x12c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_ETH_Init+0x12c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f68:	f7ff fe08 	bl	8001b7c <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f6e:	e011      	b.n	8001f94 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f70:	f7ff fe04 	bl	8001b7c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f7e:	d909      	bls.n	8001f94 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2204      	movs	r2, #4
 8001f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	22e0      	movs	r2, #224	; 0xe0
 8001f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e03d      	b.n	8002010 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1e4      	bne.n	8001f70 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fefc 	bl	8002da4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 ffa7 	bl	8002f00 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fffd 	bl	8002fb2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 ff65 	bl	8002e90 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_ETH_Init+0x130>)
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001ffa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2210      	movs	r2, #16
 800200a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	00020060 	.word	0x00020060

08002024 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002032:	2b10      	cmp	r3, #16
 8002034:	d150      	bne.n	80020d8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2223      	movs	r2, #35	; 0x23
 800203a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f9f9 	bl	800243c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0208 	orr.w	r2, r2, #8
 8002058:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fd96 	bl	8001b94 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0204 	orr.w	r2, r2, #4
 800207e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff fd83 	bl	8001b94 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fd20 	bl	8002adc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020b2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ca:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2223      	movs	r2, #35	; 0x23
 80020d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f0:	2b23      	cmp	r3, #35	; 0x23
 80020f2:	d14a      	bne.n	800218a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2223      	movs	r2, #35	; 0x23
 80020f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800210e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002112:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	f023 0302 	bic.w	r3, r3, #2
 8002126:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800212a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0204 	bic.w	r2, r2, #4
 800213a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002144:	2001      	movs	r0, #1
 8002146:	f7ff fd25 	bl	8001b94 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fcc2 	bl	8002adc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0208 	bic.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff fd0f 	bl	8001b94 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2210      	movs	r2, #16
 8002182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
  }
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07c      	b.n	80022b4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c0:	2b23      	cmp	r3, #35	; 0x23
 80021c2:	d176      	bne.n	80022b2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80021c4:	2200      	movs	r2, #0
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 ff61 	bl	8003090 <ETH_Prepare_Tx_Descriptors>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e065      	b.n	80022b4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80021e8:	f3bf 8f4f 	dsb	sy
}
 80021ec:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3206      	adds	r2, #6
 80021f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	2b03      	cmp	r3, #3
 800220c:	d904      	bls.n	8002218 <HAL_ETH_Transmit+0x84>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	1f1a      	subs	r2, r3, #4
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3106      	adds	r1, #6
 8002224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002228:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800222c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800222e:	f7ff fca5 	bl	8001b7c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002234:	e037      	b.n	80022a6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d011      	beq.n	800226c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f043 0208 	orr.w	r2, r3, #8
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e023      	b.n	80022b4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002272:	d018      	beq.n	80022a6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002274:	f7ff fc82 	bl	8001b7c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d302      	bcc.n	800228a <HAL_ETH_Transmit+0xf6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f043 0204 	orr.w	r2, r3, #4
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80022a0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e006      	b.n	80022b4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	dbc3      	blt.n	8002236 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
  }
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0a4      	b.n	8002432 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ee:	2b23      	cmp	r3, #35	; 0x23
 80022f0:	d001      	beq.n	80022f6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e09d      	b.n	8002432 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	3212      	adds	r2, #18
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800230c:	f1c3 0304 	rsb	r3, r3, #4
 8002310:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002312:	e066      	b.n	80023e2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_ETH_ReadData+0x88>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03c      	beq.n	80023be <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002366:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800237c:	2301      	movs	r3, #1
 800237e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f004 ff91 	bl	80072c4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	441a      	add	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d902      	bls.n	80023d0 <HAL_ETH_ReadData+0x114>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b04      	subs	r3, #4
 80023ce:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	3212      	adds	r2, #18
 80023d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db06      	blt.n	80023f8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d202      	bcs.n	80023f8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d08d      	beq.n	8002314 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	441a      	add	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f815 	bl	800243c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002448:	2301      	movs	r3, #1
 800244a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002450:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	3212      	adds	r2, #18
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002462:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002464:	e042      	b.n	80024ec <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d112      	bne.n	8002494 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fef6 	bl	8007264 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	74fb      	strb	r3, [r7, #19]
 8002482:	e007      	b.n	8002494 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	461a      	mov	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	461a      	mov	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d028      	beq.n	80024ec <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <ETH_UpdateDescriptor+0x104>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6053      	str	r3, [r2, #4]
 80024ae:	e005      	b.n	80024bc <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	3301      	adds	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d902      	bls.n	80024da <ETH_UpdateDescriptor+0x9e>
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3b04      	subs	r3, #4
 80024d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	3212      	adds	r2, #18
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <ETH_UpdateDescriptor+0xbc>
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1b6      	bne.n	8002466 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d01a      	beq.n	8002538 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800250c:	f3bf 8f5f 	dmb	sy
}
 8002510:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6919      	ldr	r1, [r3, #16]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	18ca      	adds	r2, r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002538:	bf00      	nop
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	80004000 	.word	0x80004000

08002544 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_ETH_IRQHandler+0x158>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00e      	beq.n	800259a <HAL_ETH_IRQHandler+0x56>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258e:	461a      	mov	r2, r3
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_ETH_IRQHandler+0x15c>)
 8002592:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f891 	bl	80026bc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00f      	beq.n	80025c4 <HAL_ETH_IRQHandler+0x80>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b6:	461a      	mov	r2, r3
 80025b8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80025bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f872 	bl	80026a8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d042      	beq.n	8002654 <HAL_ETH_IRQHandler+0x110>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03d      	beq.n	8002654 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f043 0208 	orr.w	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01a      	beq.n	8002628 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_ETH_IRQHandler+0x160>)
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002618:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800261c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	22e0      	movs	r2, #224	; 0xe0
 8002622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002626:	e012      	b.n	800264e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	f248 6380 	movw	r3, #34432	; 0x8680
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002646:	461a      	mov	r2, r3
 8002648:	f248 6380 	movw	r3, #34432	; 0x8680
 800264c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f83e 	bl	80026d0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f838 	bl	80026e4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_ETH_IRQHandler+0x158>)
 8002688:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800268c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f832 	bl	80026f8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002694:	bf00      	nop
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40013c00 	.word	0x40013c00
 80026a0:	00010040 	.word	0x00010040
 80026a4:	007e2000 	.word	0x007e2000

080026a8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 031c 	and.w	r3, r3, #28
 8002728:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	02db      	lsls	r3, r3, #11
 800272e:	b29b      	uxth	r3, r3
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f023 0302 	bic.w	r3, r3, #2
 800274a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800275c:	f7ff fa0e 	bl	8001b7c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002762:	e00d      	b.n	8002780 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002764:	f7ff fa0a 	bl	8001b7c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002772:	d301      	bcc.n	8002778 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e010      	b.n	800279a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ec      	bne.n	8002764 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 031c 	and.w	r3, r3, #28
 80027be:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	02db      	lsls	r3, r3, #11
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	019b      	lsls	r3, r3, #6
 80027d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027fc:	f7ff f9be 	bl	8001b7c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002802:	e00d      	b.n	8002820 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002804:	f7ff f9ba 	bl	8001b7c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002812:	d301      	bcc.n	8002818 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e009      	b.n	800282c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ec      	bne.n	8002804 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0e6      	b.n	8002a16 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf14      	ite	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	2300      	moveq	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00b      	b.n	8002a4e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d105      	bne.n	8002a4c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f870 	bl	8002b28 <ETH_SetMACConfig>

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 031c 	bic.w	r3, r3, #28
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a70:	f001 fb22 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8002a74:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_ETH_SetMDIOClockRange+0x74>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d804      	bhi.n	8002a88 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e019      	b.n	8002abc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d204      	bcs.n	8002a9a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f043 030c 	orr.w	r3, r3, #12
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e010      	b.n	8002abc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d90c      	bls.n	8002abc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d804      	bhi.n	8002ab4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e003      	b.n	8002abc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f043 0310 	orr.w	r3, r3, #16
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	02160ebf 	.word	0x02160ebf
 8002ad0:	03938700 	.word	0x03938700
 8002ad4:	05f5e0ff 	.word	0x05f5e0ff
 8002ad8:	08f0d17f 	.word	0x08f0d17f

08002adc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002afe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f7ff f841 	bl	8001b94 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b1c:	6193      	str	r3, [r2, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <ETH_SetMACConfig+0x164>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	7b9b      	ldrb	r3, [r3, #14]
 8002b46:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	7c12      	ldrb	r2, [r2, #16]
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d102      	bne.n	8002b56 <ETH_SetMACConfig+0x2e>
 8002b50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b54:	e000      	b.n	8002b58 <ETH_SetMACConfig+0x30>
 8002b56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b58:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	7c52      	ldrb	r2, [r2, #17]
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d102      	bne.n	8002b68 <ETH_SetMACConfig+0x40>
 8002b62:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b66:	e000      	b.n	8002b6a <ETH_SetMACConfig+0x42>
 8002b68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b6a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	7fdb      	ldrb	r3, [r3, #31]
 8002b76:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002b78:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	7f92      	ldrb	r2, [r2, #30]
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	d102      	bne.n	8002b8e <ETH_SetMACConfig+0x66>
 8002b88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8c:	e000      	b.n	8002b90 <ETH_SetMACConfig+0x68>
 8002b8e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002b90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	7f1b      	ldrb	r3, [r3, #28]
 8002b96:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b98:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ba6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002bae:	2a00      	cmp	r2, #0
 8002bb0:	d102      	bne.n	8002bb8 <ETH_SetMACConfig+0x90>
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	e000      	b.n	8002bba <ETH_SetMACConfig+0x92>
 8002bb8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002bba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	7bdb      	ldrb	r3, [r3, #15]
 8002bc0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002bc2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002bc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bd0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f7fe ffd2 	bl	8001b94 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	d101      	bne.n	8002c1e <ETH_SetMACConfig+0xf6>
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	e000      	b.n	8002c20 <ETH_SetMACConfig+0xf8>
 8002c1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c20:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002c2e:	2a01      	cmp	r2, #1
 8002c30:	d101      	bne.n	8002c36 <ETH_SetMACConfig+0x10e>
 8002c32:	2208      	movs	r2, #8
 8002c34:	e000      	b.n	8002c38 <ETH_SetMACConfig+0x110>
 8002c36:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c38:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002c40:	2a01      	cmp	r2, #1
 8002c42:	d101      	bne.n	8002c48 <ETH_SetMACConfig+0x120>
 8002c44:	2204      	movs	r2, #4
 8002c46:	e000      	b.n	8002c4a <ETH_SetMACConfig+0x122>
 8002c48:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002c52:	2a01      	cmp	r2, #1
 8002c54:	d101      	bne.n	8002c5a <ETH_SetMACConfig+0x132>
 8002c56:	2202      	movs	r2, #2
 8002c58:	e000      	b.n	8002c5c <ETH_SetMACConfig+0x134>
 8002c5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7fe ff8d 	bl	8001b94 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	619a      	str	r2, [r3, #24]
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	fd20810f 	.word	0xfd20810f

08002c90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <ETH_SetDMAConfig+0x110>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	7b1b      	ldrb	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <ETH_SetDMAConfig+0x2c>
 8002cb6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cba:	e000      	b.n	8002cbe <ETH_SetDMAConfig+0x2e>
 8002cbc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	7b5b      	ldrb	r3, [r3, #13]
 8002cc2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cc4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	7f52      	ldrb	r2, [r2, #29]
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	d102      	bne.n	8002cd4 <ETH_SetDMAConfig+0x44>
 8002cce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cd2:	e000      	b.n	8002cd6 <ETH_SetDMAConfig+0x46>
 8002cd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cd6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	7b9b      	ldrb	r3, [r3, #14]
 8002cdc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cde:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ce4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7f1b      	ldrb	r3, [r3, #28]
 8002cea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002cec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	7f9b      	ldrb	r3, [r3, #30]
 8002cf2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002cf4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002cfa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d02:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d04:	4313      	orrs	r3, r2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d14:	461a      	mov	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d26:	2001      	movs	r0, #1
 8002d28:	f7fe ff34 	bl	8001b94 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d34:	461a      	mov	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	791b      	ldrb	r3, [r3, #4]
 8002d3e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d44:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002d4a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d50:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d58:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002d5a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d62:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d68:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d76:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7fe ff05 	bl	8001b94 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	f8de3f23 	.word	0xf8de3f23

08002da4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b0a6      	sub	sp, #152	; 0x98
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002db8:	2300      	movs	r3, #0
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002de6:	2300      	movs	r3, #0
 8002de8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e22:	4619      	mov	r1, r3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff fe7f 	bl	8002b28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e64:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e6a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff05 	bl	8002c90 <ETH_SetDMAConfig>
}
 8002e86:	bf00      	nop
 8002e88:	3798      	adds	r7, #152	; 0x98
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3305      	adds	r3, #5
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	3204      	adds	r2, #4
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <ETH_MACAddressConfig+0x68>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3303      	adds	r3, #3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	061a      	lsls	r2, r3, #24
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <ETH_MACAddressConfig+0x6c>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	6013      	str	r3, [r2, #0]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40028040 	.word	0x40028040
 8002efc:	40028044 	.word	0x40028044

08002f00 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e03e      	b.n	8002f8c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68d9      	ldr	r1, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	3206      	adds	r2, #6
 8002f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d80c      	bhi.n	8002f70 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	e004      	b.n	8002f7a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d9bd      	bls.n	8002f0e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e048      	b.n	8003052 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6919      	ldr	r1, [r3, #16]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ffc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	3212      	adds	r2, #18
 800301e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d80c      	bhi.n	8003042 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6919      	ldr	r1, [r3, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	461a      	mov	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	60da      	str	r2, [r3, #12]
 8003040:	e004      	b.n	800304c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d9b3      	bls.n	8002fc0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003082:	60da      	str	r2, [r3, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003090:	b480      	push	{r7}
 8003092:	b091      	sub	sp, #68	; 0x44
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3318      	adds	r3, #24
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d2:	d007      	beq.n	80030e4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d8:	3304      	adds	r3, #4
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80030e4:	2302      	movs	r3, #2
 80030e6:	e111      	b.n	800330c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	3301      	adds	r3, #1
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4b86      	ldr	r3, [pc, #536]	; (8003318 <ETH_Prepare_Tx_Descriptors+0x288>)
 80030fe:	4013      	ands	r3, r2
 8003100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003102:	6852      	ldr	r2, [r2, #4]
 8003104:	431a      	orrs	r2, r3
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	431a      	orrs	r2, r3
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800316a:	e082      	b.n	8003272 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e005      	b.n	8003198 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	3301      	adds	r3, #1
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d902      	bls.n	80031aa <ETH_Prepare_Tx_Descriptors+0x11a>
 80031a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a6:	3b04      	subs	r3, #4
 80031a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031c0:	d007      	beq.n	80031d2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80031c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	3304      	adds	r3, #4
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d029      	beq.n	8003226 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031de:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e4:	e019      	b.n	800321a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80031e6:	f3bf 8f5f 	dmb	sy
}
 80031ea:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fa:	3301      	adds	r3, #1
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003200:	2b03      	cmp	r3, #3
 8003202:	d902      	bls.n	800320a <ETH_Prepare_Tx_Descriptors+0x17a>
 8003204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003206:	3b04      	subs	r3, #4
 8003208:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800320e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	3301      	adds	r3, #1
 8003218:	63bb      	str	r3, [r7, #56]	; 0x38
 800321a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	429a      	cmp	r2, r3
 8003220:	d3e1      	bcc.n	80031e6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	e072      	b.n	800330c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	3301      	adds	r3, #1
 8003236:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <ETH_Prepare_Tx_Descriptors+0x288>)
 800324e:	4013      	ands	r3, r2
 8003250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003252:	6852      	ldr	r2, [r2, #4]
 8003254:	431a      	orrs	r2, r3
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	3301      	adds	r3, #1
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003260:	f3bf 8f5f 	dmb	sy
}
 8003264:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f af78 	bne.w	800316c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e005      	b.n	800329c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80032b2:	f3bf 8f5f 	dmb	sy
}
 80032b6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032cc:	3304      	adds	r3, #4
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032da:	f3ef 8310 	mrs	r3, PRIMASK
 80032de:	613b      	str	r3, [r7, #16]
  return(result);
 80032e0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	2301      	movs	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	4413      	add	r3, r2
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3744      	adds	r7, #68	; 0x44
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	ffffe000 	.word	0xffffe000

0800331c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e175      	b.n	8003628 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	f040 8164 	bne.w	8003622 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d005      	beq.n	8003372 <HAL_GPIO_Init+0x56>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d130      	bne.n	80033d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 0201 	and.w	r2, r3, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d017      	beq.n	8003410 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d123      	bne.n	8003464 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80be 	beq.w	8003622 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_GPIO_Init+0x324>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_GPIO_Init+0x324>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_GPIO_Init+0x324>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034be:	4a61      	ldr	r2, [pc, #388]	; (8003644 <HAL_GPIO_Init+0x328>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_GPIO_Init+0x32c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d037      	beq.n	800355a <HAL_GPIO_Init+0x23e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a57      	ldr	r2, [pc, #348]	; (800364c <HAL_GPIO_Init+0x330>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d031      	beq.n	8003556 <HAL_GPIO_Init+0x23a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a56      	ldr	r2, [pc, #344]	; (8003650 <HAL_GPIO_Init+0x334>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02b      	beq.n	8003552 <HAL_GPIO_Init+0x236>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a55      	ldr	r2, [pc, #340]	; (8003654 <HAL_GPIO_Init+0x338>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d025      	beq.n	800354e <HAL_GPIO_Init+0x232>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a54      	ldr	r2, [pc, #336]	; (8003658 <HAL_GPIO_Init+0x33c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01f      	beq.n	800354a <HAL_GPIO_Init+0x22e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a53      	ldr	r2, [pc, #332]	; (800365c <HAL_GPIO_Init+0x340>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d019      	beq.n	8003546 <HAL_GPIO_Init+0x22a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_GPIO_Init+0x344>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_GPIO_Init+0x226>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_GPIO_Init+0x348>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00d      	beq.n	800353e <HAL_GPIO_Init+0x222>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a50      	ldr	r2, [pc, #320]	; (8003668 <HAL_GPIO_Init+0x34c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <HAL_GPIO_Init+0x21e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4f      	ldr	r2, [pc, #316]	; (800366c <HAL_GPIO_Init+0x350>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_GPIO_Init+0x21a>
 8003532:	2309      	movs	r3, #9
 8003534:	e012      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003536:	230a      	movs	r3, #10
 8003538:	e010      	b.n	800355c <HAL_GPIO_Init+0x240>
 800353a:	2308      	movs	r3, #8
 800353c:	e00e      	b.n	800355c <HAL_GPIO_Init+0x240>
 800353e:	2307      	movs	r3, #7
 8003540:	e00c      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003542:	2306      	movs	r3, #6
 8003544:	e00a      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003546:	2305      	movs	r3, #5
 8003548:	e008      	b.n	800355c <HAL_GPIO_Init+0x240>
 800354a:	2304      	movs	r3, #4
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x240>
 800354e:	2303      	movs	r3, #3
 8003550:	e004      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003552:	2302      	movs	r3, #2
 8003554:	e002      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x240>
 800355a:	2300      	movs	r3, #0
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f002 0203 	and.w	r2, r2, #3
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	4093      	lsls	r3, r2
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800356c:	4935      	ldr	r1, [pc, #212]	; (8003644 <HAL_GPIO_Init+0x328>)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_GPIO_Init+0x354>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800359e:	4a34      	ldr	r2, [pc, #208]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c8:	4a29      	ldr	r2, [pc, #164]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f2:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_GPIO_Init+0x354>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	f67f ae86 	bls.w	800333c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40013800 	.word	0x40013800
 8003648:	40020000 	.word	0x40020000
 800364c:	40020400 	.word	0x40020400
 8003650:	40020800 	.word	0x40020800
 8003654:	40020c00 	.word	0x40020c00
 8003658:	40021000 	.word	0x40021000
 800365c:	40021400 	.word	0x40021400
 8003660:	40021800 	.word	0x40021800
 8003664:	40021c00 	.word	0x40021c00
 8003668:	40022000 	.word	0x40022000
 800366c:	40022400 	.word	0x40022400
 8003670:	40013c00 	.word	0x40013c00

08003674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003684:	787b      	ldrb	r3, [r7, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003690:	e003      	b.n	800369a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003692:	887b      	ldrh	r3, [r7, #2]
 8003694:	041a      	lsls	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	619a      	str	r2, [r3, #24]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	460b      	mov	r3, r1
 80036b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036b8:	887a      	ldrh	r2, [r7, #2]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	041a      	lsls	r2, r3, #16
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	400b      	ands	r3, r1
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a22      	ldr	r2, [pc, #136]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800370a:	f7fe fa37 	bl	8001b7c <HAL_GetTick>
 800370e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003710:	e009      	b.n	8003726 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003712:	f7fe fa33 	bl	8001b7c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003720:	d901      	bls.n	8003726 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e022      	b.n	800376c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d1ee      	bne.n	8003712 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800373a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003740:	f7fe fa1c 	bl	8001b7c <HAL_GetTick>
 8003744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003746:	e009      	b.n	800375c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003748:	f7fe fa18 	bl	8001b7c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003756:	d901      	bls.n	800375c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e007      	b.n	800376c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003768:	d1ee      	bne.n	8003748 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000

0800377c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e29b      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8087 	beq.w	80038ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a0:	4b96      	ldr	r3, [pc, #600]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d00c      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ac:	4b93      	ldr	r3, [pc, #588]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d112      	bne.n	80037de <HAL_RCC_OscConfig+0x62>
 80037b8:	4b90      	ldr	r3, [pc, #576]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c4:	d10b      	bne.n	80037de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c6:	4b8d      	ldr	r3, [pc, #564]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d06c      	beq.n	80038ac <HAL_RCC_OscConfig+0x130>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d168      	bne.n	80038ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e275      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x7a>
 80037e8:	4b84      	ldr	r3, [pc, #528]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a83      	ldr	r2, [pc, #524]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e02e      	b.n	8003854 <HAL_RCC_OscConfig+0xd8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x9c>
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7b      	ldr	r2, [pc, #492]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e01d      	b.n	8003854 <HAL_RCC_OscConfig+0xd8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0xc0>
 8003822:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a75      	ldr	r2, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b73      	ldr	r3, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a72      	ldr	r2, [pc, #456]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0xd8>
 800383c:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6b      	ldr	r2, [pc, #428]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800384e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f98e 	bl	8001b7c <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fe f98a 	bl	8001b7c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e229      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	4b61      	ldr	r3, [pc, #388]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0xe8>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe f97a 	bl	8001b7c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7fe f976 	bl	8001b7c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e215      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	4b57      	ldr	r3, [pc, #348]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x110>
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d069      	beq.n	800398e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ba:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d11c      	bne.n	800390c <HAL_RCC_OscConfig+0x190>
 80038d2:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d116      	bne.n	800390c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_RCC_OscConfig+0x17a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e1e9      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	493d      	ldr	r1, [pc, #244]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390a:	e040      	b.n	800398e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a38      	ldr	r2, [pc, #224]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe f92c 	bl	8001b7c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fe f928 	bl	8001b7c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1c7      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393a:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4929      	ldr	r1, [pc, #164]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
 800395a:	e018      	b.n	800398e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe f908 	bl	8001b7c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fe f904 	bl	8001b7c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1a3      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d038      	beq.n	8003a0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b16      	ldr	r3, [pc, #88]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	4a15      	ldr	r2, [pc, #84]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fe f8e5 	bl	8001b7c <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fe f8e1 	bl	8001b7c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e180      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x23a>
 80039d4:	e01a      	b.n	8003a0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fe f8cb 	bl	8001b7c <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fe f8c7 	bl	8001b7c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d903      	bls.n	8003a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e166      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
 80039fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	4b92      	ldr	r3, [pc, #584]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ee      	bne.n	80039ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a4 	beq.w	8003b62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b8c      	ldr	r3, [pc, #560]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10d      	bne.n	8003a42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	4b89      	ldr	r3, [pc, #548]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a88      	ldr	r2, [pc, #544]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b86      	ldr	r3, [pc, #536]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a42:	4b83      	ldr	r3, [pc, #524]	; (8003c50 <HAL_RCC_OscConfig+0x4d4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d118      	bne.n	8003a80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a4e:	4b80      	ldr	r3, [pc, #512]	; (8003c50 <HAL_RCC_OscConfig+0x4d4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7f      	ldr	r2, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x4d4>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe f88f 	bl	8001b7c <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7fe f88b 	bl	8001b7c <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e12a      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a74:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x4d4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x31a>
 8003a88:	4b70      	ldr	r3, [pc, #448]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a6f      	ldr	r2, [pc, #444]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	e02d      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x33c>
 8003a9e:	4b6b      	ldr	r3, [pc, #428]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aaa:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a67      	ldr	r2, [pc, #412]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	f023 0304 	bic.w	r3, r3, #4
 8003ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab6:	e01c      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d10c      	bne.n	8003ada <HAL_RCC_OscConfig+0x35e>
 8003ac0:	4b62      	ldr	r3, [pc, #392]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a61      	ldr	r2, [pc, #388]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
 8003acc:	4b5f      	ldr	r3, [pc, #380]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a5e      	ldr	r2, [pc, #376]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	e00b      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
 8003ada:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a5b      	ldr	r2, [pc, #364]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae6:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d015      	beq.n	8003b26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7fe f83f 	bl	8001b7c <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fe f83b 	bl	8001b7c <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0d8      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ee      	beq.n	8003b02 <HAL_RCC_OscConfig+0x386>
 8003b24:	e014      	b.n	8003b50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fe f829 	bl	8001b7c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fe f825 	bl	8001b7c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0c2      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b3d      	ldr	r3, [pc, #244]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	4a3c      	ldr	r2, [pc, #240]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80ae 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b6c:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d06d      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d14b      	bne.n	8003c18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b32      	ldr	r3, [pc, #200]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a31      	ldr	r2, [pc, #196]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fff6 	bl	8001b7c <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fd fff2 	bl	8001b7c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e091      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	491b      	ldr	r1, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd ffc4 	bl	8001b7c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fd ffc0 	bl	8001b7c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e05f      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
 8003c16:	e057      	b.n	8003cc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fd ffaa 	bl	8001b7c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fd ffa6 	bl	8001b7c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e045      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3e:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x4b0>
 8003c4a:	e03d      	b.n	8003cc8 <HAL_RCC_OscConfig+0x54c>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCC_OscConfig+0x558>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d030      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d129      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d122      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d119      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d10f      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800

08003cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0d0      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d910      	bls.n	8003d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b67      	ldr	r3, [pc, #412]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 020f 	bic.w	r2, r3, #15
 8003d06:	4965      	ldr	r1, [pc, #404]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b63      	ldr	r3, [pc, #396]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0b8      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d020      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d38:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4a58      	ldr	r2, [pc, #352]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d50:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a52      	ldr	r2, [pc, #328]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	494d      	ldr	r1, [pc, #308]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d040      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d115      	bne.n	8003dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e07f      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e073      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003daa:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e06b      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4936      	ldr	r1, [pc, #216]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fd fed6 	bl	8001b7c <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fd fed2 	bl	8001b7c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e053      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 020c 	and.w	r2, r3, #12
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1eb      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d210      	bcs.n	8003e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 020f 	bic.w	r2, r3, #15
 8003e12:	4922      	ldr	r1, [pc, #136]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e032      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4916      	ldr	r1, [pc, #88]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	490e      	ldr	r1, [pc, #56]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e6a:	f000 f821 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	490a      	ldr	r1, [pc, #40]	; (8003ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8003e7c:	5ccb      	ldrb	r3, [r1, r3]
 8003e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e82:	4a09      	ldr	r2, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8003e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_RCC_ClockConfig+0x1d4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fd fe32 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023c00 	.word	0x40023c00
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	080167c0 	.word	0x080167c0
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	20000004 	.word	0x20000004

08003eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb4:	b094      	sub	sp, #80	; 0x50
 8003eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	647b      	str	r3, [r7, #68]	; 0x44
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec8:	4b79      	ldr	r3, [pc, #484]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	f200 80e1 	bhi.w	800409c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ee2:	e0db      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee4:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ee8:	e0db      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eea:	4b72      	ldr	r3, [pc, #456]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eee:	e0d8      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003efa:	4b6d      	ldr	r3, [pc, #436]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d063      	beq.n	8003fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f06:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	633b      	str	r3, [r7, #48]	; 0x30
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f22:	4622      	mov	r2, r4
 8003f24:	462b      	mov	r3, r5
 8003f26:	f04f 0000 	mov.w	r0, #0
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	0159      	lsls	r1, r3, #5
 8003f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f34:	0150      	lsls	r0, r2, #5
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	1a51      	subs	r1, r2, r1
 8003f3e:	6139      	str	r1, [r7, #16]
 8003f40:	4629      	mov	r1, r5
 8003f42:	eb63 0301 	sbc.w	r3, r3, r1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f54:	4659      	mov	r1, fp
 8003f56:	018b      	lsls	r3, r1, #6
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5e:	4651      	mov	r1, sl
 8003f60:	018a      	lsls	r2, r1, #6
 8003f62:	4651      	mov	r1, sl
 8003f64:	ebb2 0801 	subs.w	r8, r2, r1
 8003f68:	4659      	mov	r1, fp
 8003f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f82:	4690      	mov	r8, r2
 8003f84:	4699      	mov	r9, r3
 8003f86:	4623      	mov	r3, r4
 8003f88:	eb18 0303 	adds.w	r3, r8, r3
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	462b      	mov	r3, r5
 8003f90:	eb49 0303 	adc.w	r3, r9, r3
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	028b      	lsls	r3, r1, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fac:	4621      	mov	r1, r4
 8003fae:	028a      	lsls	r2, r1, #10
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc0:	f7fc fb4a 	bl	8000658 <__aeabi_uldivmod>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4613      	mov	r3, r2
 8003fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fcc:	e058      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fce:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	4611      	mov	r1, r2
 8003fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	f04f 0000 	mov.w	r0, #0
 8003ff0:	f04f 0100 	mov.w	r1, #0
 8003ff4:	0159      	lsls	r1, r3, #5
 8003ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffa:	0150      	lsls	r0, r2, #5
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4641      	mov	r1, r8
 8004002:	ebb2 0a01 	subs.w	sl, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb63 0b01 	sbc.w	fp, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800401c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004020:	ebb2 040a 	subs.w	r4, r2, sl
 8004024:	eb63 050b 	sbc.w	r5, r3, fp
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	00eb      	lsls	r3, r5, #3
 8004032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004036:	00e2      	lsls	r2, r4, #3
 8004038:	4614      	mov	r4, r2
 800403a:	461d      	mov	r5, r3
 800403c:	4643      	mov	r3, r8
 800403e:	18e3      	adds	r3, r4, r3
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	464b      	mov	r3, r9
 8004044:	eb45 0303 	adc.w	r3, r5, r3
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004056:	4629      	mov	r1, r5
 8004058:	028b      	lsls	r3, r1, #10
 800405a:	4621      	mov	r1, r4
 800405c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004060:	4621      	mov	r1, r4
 8004062:	028a      	lsls	r2, r1, #10
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406a:	2200      	movs	r2, #0
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	61fa      	str	r2, [r7, #28]
 8004070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004074:	f7fc faf0 	bl	8000658 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409a:	e002      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3750      	adds	r7, #80	; 0x50
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	00f42400 	.word	0x00f42400

080040b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000000 	.word	0x20000000

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	080167d0 	.word	0x080167d0

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffdc 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0b5b      	lsrs	r3, r3, #13
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	080167d0 	.word	0x080167d0

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004148:	4b69      	ldr	r3, [pc, #420]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a68      	ldr	r2, [pc, #416]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	4964      	ldr	r1, [pc, #400]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d017      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800417a:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	4959      	ldr	r1, [pc, #356]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041b6:	4b4e      	ldr	r3, [pc, #312]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	494a      	ldr	r1, [pc, #296]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 808b 	beq.w	800431a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	4a39      	ldr	r2, [pc, #228]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6413      	str	r3, [r2, #64]	; 0x40
 8004210:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800421c:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a34      	ldr	r2, [pc, #208]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004228:	f7fd fca8 	bl	8001b7c <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7fd fca4 	bl	8001b7c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e38f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004242:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424e:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d035      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d02e      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004276:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004294:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d114      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd fc6c 	bl	8001b7c <HAL_GetTick>
 80042a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fd fc68 	bl	8001b7c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e351      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ee      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d6:	d111      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042e6:	400b      	ands	r3, r1
 80042e8:	4901      	ldr	r1, [pc, #4]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
 80042ee:	e00b      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40007000 	.word	0x40007000
 80042f8:	0ffffcff 	.word	0x0ffffcff
 80042fc:	4bac      	ldr	r3, [pc, #688]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4aab      	ldr	r2, [pc, #684]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	4ba9      	ldr	r3, [pc, #676]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	49a6      	ldr	r1, [pc, #664]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004316:	4313      	orrs	r3, r2
 8004318:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004326:	4ba2      	ldr	r3, [pc, #648]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432c:	4aa0      	ldr	r2, [pc, #640]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004332:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004336:	4b9e      	ldr	r3, [pc, #632]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004338:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	499b      	ldr	r1, [pc, #620]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004354:	4b96      	ldr	r3, [pc, #600]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004362:	4993      	ldr	r1, [pc, #588]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004376:	4b8e      	ldr	r3, [pc, #568]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004384:	498a      	ldr	r1, [pc, #552]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004398:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a6:	4982      	ldr	r1, [pc, #520]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ba:	4b7d      	ldr	r3, [pc, #500]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4979      	ldr	r1, [pc, #484]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043dc:	4b74      	ldr	r3, [pc, #464]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f023 0203 	bic.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	4971      	ldr	r1, [pc, #452]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043fe:	4b6c      	ldr	r3, [pc, #432]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f023 020c 	bic.w	r2, r3, #12
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	4968      	ldr	r1, [pc, #416]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004420:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	4960      	ldr	r1, [pc, #384]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004442:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004450:	4957      	ldr	r1, [pc, #348]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004464:	4b52      	ldr	r3, [pc, #328]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	494f      	ldr	r1, [pc, #316]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004486:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	4946      	ldr	r1, [pc, #280]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044a8:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	493e      	ldr	r1, [pc, #248]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044ca:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	4935      	ldr	r1, [pc, #212]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fa:	492d      	ldr	r1, [pc, #180]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451c:	4924      	ldr	r1, [pc, #144]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800453e:	2301      	movs	r3, #1
 8004540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455c:	4914      	ldr	r1, [pc, #80]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004580:	490b      	ldr	r1, [pc, #44]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	4902      	ldr	r1, [pc, #8]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045ac:	e002      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045c0:	4b8a      	ldr	r3, [pc, #552]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	4986      	ldr	r1, [pc, #536]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045e4:	4b81      	ldr	r3, [pc, #516]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f4:	497d      	ldr	r1, [pc, #500]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d006      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80d6 	beq.w	80047bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a75      	ldr	r2, [pc, #468]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800461a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fd faae 	bl	8001b7c <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004624:	f7fd faaa 	bl	8001b7c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e195      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004636:	4b6d      	ldr	r3, [pc, #436]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d021      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11d      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004656:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004664:	4b61      	ldr	r3, [pc, #388]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466a:	0e1b      	lsrs	r3, r3, #24
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	019a      	lsls	r2, r3, #6
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	071b      	lsls	r3, r3, #28
 800468a:	4958      	ldr	r1, [pc, #352]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02e      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046bc:	d129      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046be:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046cc:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	0f1b      	lsrs	r3, r3, #28
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	493e      	ldr	r1, [pc, #248]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046fa:	4b3c      	ldr	r3, [pc, #240]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	f023 021f 	bic.w	r2, r3, #31
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	3b01      	subs	r3, #1
 800470a:	4938      	ldr	r1, [pc, #224]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01d      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004724:	0e1b      	lsrs	r3, r3, #24
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800472c:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004732:	0f1b      	lsrs	r3, r3, #28
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	019a      	lsls	r2, r3, #6
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	071b      	lsls	r3, r3, #28
 8004752:	4926      	ldr	r1, [pc, #152]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	019a      	lsls	r2, r3, #6
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	491a      	ldr	r1, [pc, #104]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a17      	ldr	r2, [pc, #92]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fd f9f1 	bl	8001b7c <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800479e:	f7fd f9ed 	bl	8001b7c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	; 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0d8      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f040 80ce 	bne.w	8004960 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd f9d4 	bl	8001b7c <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047d6:	e00b      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047d8:	f7fd f9d0 	bl	8001b7c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d904      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0bb      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047f0:	4b5e      	ldr	r3, [pc, #376]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fc:	d0ec      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02e      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d12a      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004826:	4b51      	ldr	r3, [pc, #324]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004834:	4b4d      	ldr	r3, [pc, #308]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	0f1b      	lsrs	r3, r3, #28
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	019a      	lsls	r2, r3, #6
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	431a      	orrs	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	4944      	ldr	r1, [pc, #272]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004862:	4b42      	ldr	r3, [pc, #264]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004868:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	3b01      	subs	r3, #1
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	493d      	ldr	r1, [pc, #244]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d022      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004890:	d11d      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048a0:	4b32      	ldr	r3, [pc, #200]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	0f1b      	lsrs	r3, r3, #28
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	019a      	lsls	r2, r3, #6
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	071b      	lsls	r3, r3, #28
 80048c6:	4929      	ldr	r1, [pc, #164]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d028      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048da:	4b24      	ldr	r3, [pc, #144]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	0e1b      	lsrs	r3, r3, #24
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	019a      	lsls	r2, r3, #6
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	4917      	ldr	r1, [pc, #92]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4911      	ldr	r1, [pc, #68]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0e      	ldr	r2, [pc, #56]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fd f920 	bl	8001b7c <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004940:	f7fd f91c 	bl	8001b7c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e007      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800495e:	d1ef      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800

08004970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e049      	b.n	8004a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fcd6 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 fd0e 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e054      	b.n	8004ae2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d01d      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x80>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d115      	bne.n	8004acc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <HAL_TIM_Base_Start_IT+0xec>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d015      	beq.n	8004ade <HAL_TIM_Base_Start_IT+0xbe>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d011      	beq.n	8004ade <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	e008      	b.n	8004ade <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e000      	b.n	8004ae0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40001800 	.word	0x40001800
 8004b0c:	00010007 	.word	0x00010007

08004b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e049      	b.n	8004bb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc fc6c 	bl	8001414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fc3e 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d109      	bne.n	8004be4 <HAL_TIM_PWM_Start+0x24>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e03c      	b.n	8004c5e <HAL_TIM_PWM_Start+0x9e>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d109      	bne.n	8004bfe <HAL_TIM_PWM_Start+0x3e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e02f      	b.n	8004c5e <HAL_TIM_PWM_Start+0x9e>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d109      	bne.n	8004c18 <HAL_TIM_PWM_Start+0x58>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e022      	b.n	8004c5e <HAL_TIM_PWM_Start+0x9e>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d109      	bne.n	8004c32 <HAL_TIM_PWM_Start+0x72>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	e015      	b.n	8004c5e <HAL_TIM_PWM_Start+0x9e>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d109      	bne.n	8004c4c <HAL_TIM_PWM_Start+0x8c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e008      	b.n	8004c5e <HAL_TIM_PWM_Start+0x9e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e092      	b.n	8004d8c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0xb6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c74:	e023      	b.n	8004cbe <HAL_TIM_PWM_Start+0xfe>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0xc6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c84:	e01b      	b.n	8004cbe <HAL_TIM_PWM_Start+0xfe>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_PWM_Start+0xd6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c94:	e013      	b.n	8004cbe <HAL_TIM_PWM_Start+0xfe>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b0c      	cmp	r3, #12
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0xe6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca4:	e00b      	b.n	8004cbe <HAL_TIM_PWM_Start+0xfe>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0xf6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb4:	e003      	b.n	8004cbe <HAL_TIM_PWM_Start+0xfe>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ff26 	bl	8005b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <HAL_TIM_PWM_Start+0x1d4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_TIM_PWM_Start+0x120>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2f      	ldr	r2, [pc, #188]	; (8004d98 <HAL_TIM_PWM_Start+0x1d8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIM_PWM_Start+0x124>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x126>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <HAL_TIM_PWM_Start+0x1d4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d022      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x18a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d01d      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x18a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a22      	ldr	r2, [pc, #136]	; (8004d9c <HAL_TIM_PWM_Start+0x1dc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x18a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a20      	ldr	r2, [pc, #128]	; (8004da0 <HAL_TIM_PWM_Start+0x1e0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x18a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <HAL_TIM_PWM_Start+0x1e4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x18a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <HAL_TIM_PWM_Start+0x1d8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x18a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_TIM_PWM_Start+0x1e8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIM_PWM_Start+0x18a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <HAL_TIM_PWM_Start+0x1ec>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d115      	bne.n	8004d76 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <HAL_TIM_PWM_Start+0x1f0>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d015      	beq.n	8004d88 <HAL_TIM_PWM_Start+0x1c8>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d62:	d011      	beq.n	8004d88 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	e008      	b.n	8004d88 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0201 	orr.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e000      	b.n	8004d8a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010400 	.word	0x40010400
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40001800 	.word	0x40001800
 8004db0:	00010007 	.word	0x00010007

08004db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d020      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01b      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0202 	mvn.w	r2, #2
 8004de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fac8 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 8004e04:	e005      	b.n	8004e12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 faba 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 facb 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d020      	beq.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01b      	beq.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0204 	mvn.w	r2, #4
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 faa2 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa94 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 faa5 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01b      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0208 	mvn.w	r2, #8
 8004e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2204      	movs	r2, #4
 8004e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fa7c 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa6e 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fa7f 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0210 	mvn.w	r2, #16
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa56 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fa48 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa59 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00c      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0201 	mvn.w	r2, #1
 8004f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc f8c0 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fea3 	bl	8005c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fe9b 	bl	8005ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fa13 	bl	80053bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0220 	mvn.w	r2, #32
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fe63 	bl	8005c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0ff      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b14      	cmp	r3, #20
 8004fee:	f200 80f0 	bhi.w	80051d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800504d 	.word	0x0800504d
 8004ffc:	080051d3 	.word	0x080051d3
 8005000:	080051d3 	.word	0x080051d3
 8005004:	080051d3 	.word	0x080051d3
 8005008:	0800508d 	.word	0x0800508d
 800500c:	080051d3 	.word	0x080051d3
 8005010:	080051d3 	.word	0x080051d3
 8005014:	080051d3 	.word	0x080051d3
 8005018:	080050cf 	.word	0x080050cf
 800501c:	080051d3 	.word	0x080051d3
 8005020:	080051d3 	.word	0x080051d3
 8005024:	080051d3 	.word	0x080051d3
 8005028:	0800510f 	.word	0x0800510f
 800502c:	080051d3 	.word	0x080051d3
 8005030:	080051d3 	.word	0x080051d3
 8005034:	080051d3 	.word	0x080051d3
 8005038:	08005151 	.word	0x08005151
 800503c:	080051d3 	.word	0x080051d3
 8005040:	080051d3 	.word	0x080051d3
 8005044:	080051d3 	.word	0x080051d3
 8005048:	08005191 	.word	0x08005191
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fa68 	bl	8005528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0208 	orr.w	r2, r2, #8
 8005066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6999      	ldr	r1, [r3, #24]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	619a      	str	r2, [r3, #24]
      break;
 800508a:	e0a5      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 faba 	bl	800560c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6999      	ldr	r1, [r3, #24]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	021a      	lsls	r2, r3, #8
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	619a      	str	r2, [r3, #24]
      break;
 80050cc:	e084      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fb11 	bl	80056fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0208 	orr.w	r2, r2, #8
 80050e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0204 	bic.w	r2, r2, #4
 80050f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69d9      	ldr	r1, [r3, #28]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	61da      	str	r2, [r3, #28]
      break;
 800510c:	e064      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fb67 	bl	80057e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	021a      	lsls	r2, r3, #8
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	61da      	str	r2, [r3, #28]
      break;
 800514e:	e043      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fb9e 	bl	8005898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0204 	bic.w	r2, r2, #4
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800518e:	e023      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fbd0 	bl	800593c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051d0:	e002      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
      break;
 80051d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_TIM_ConfigClockSource+0x1c>
 8005204:	2302      	movs	r3, #2
 8005206:	e0b4      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x186>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	4b56      	ldr	r3, [pc, #344]	; (800537c <HAL_TIM_ConfigClockSource+0x190>)
 8005224:	4013      	ands	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005240:	d03e      	beq.n	80052c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005246:	f200 8087 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	f000 8086 	beq.w	800535e <HAL_TIM_ConfigClockSource+0x172>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	d87f      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d01a      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xa6>
 800525c:	2b70      	cmp	r3, #112	; 0x70
 800525e:	d87b      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d050      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x11a>
 8005264:	2b60      	cmp	r3, #96	; 0x60
 8005266:	d877      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d03c      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0xfa>
 800526c:	2b50      	cmp	r3, #80	; 0x50
 800526e:	d873      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d058      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x13a>
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d86f      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d064      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 800527c:	2b30      	cmp	r3, #48	; 0x30
 800527e:	d86b      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d060      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	2b20      	cmp	r3, #32
 8005286:	d867      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d05c      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	2b10      	cmp	r3, #16
 800528e:	d05a      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	e062      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	f000 fc19 	bl	8005ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	609a      	str	r2, [r3, #8]
      break;
 80052be:	e04f      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	f000 fc02 	bl	8005ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e2:	609a      	str	r2, [r3, #8]
      break;
 80052e4:	e03c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 fb76 	bl	80059e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2150      	movs	r1, #80	; 0x50
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fbcf 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005304:	e02c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005312:	461a      	mov	r2, r3
 8005314:	f000 fb95 	bl	8005a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2160      	movs	r1, #96	; 0x60
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fbbf 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005324:	e01c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005332:	461a      	mov	r2, r3
 8005334:	f000 fb56 	bl	80059e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbaf 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005344:	e00c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f000 fba6 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005356:	e003      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      break;
 800535c:	e000      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800535e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	fffeff88 	.word	0xfffeff88

08005380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a46      	ldr	r2, [pc, #280]	; (80054fc <TIM_Base_SetConfig+0x12c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d00f      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a43      	ldr	r2, [pc, #268]	; (8005500 <TIM_Base_SetConfig+0x130>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a42      	ldr	r2, [pc, #264]	; (8005504 <TIM_Base_SetConfig+0x134>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a41      	ldr	r2, [pc, #260]	; (8005508 <TIM_Base_SetConfig+0x138>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a40      	ldr	r2, [pc, #256]	; (800550c <TIM_Base_SetConfig+0x13c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d108      	bne.n	8005422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a35      	ldr	r2, [pc, #212]	; (80054fc <TIM_Base_SetConfig+0x12c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d02b      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d027      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a32      	ldr	r2, [pc, #200]	; (8005500 <TIM_Base_SetConfig+0x130>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d023      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a31      	ldr	r2, [pc, #196]	; (8005504 <TIM_Base_SetConfig+0x134>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01f      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a30      	ldr	r2, [pc, #192]	; (8005508 <TIM_Base_SetConfig+0x138>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01b      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2f      	ldr	r2, [pc, #188]	; (800550c <TIM_Base_SetConfig+0x13c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d017      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2e      	ldr	r2, [pc, #184]	; (8005510 <TIM_Base_SetConfig+0x140>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <TIM_Base_SetConfig+0x144>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00f      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <TIM_Base_SetConfig+0x148>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00b      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2b      	ldr	r2, [pc, #172]	; (800551c <TIM_Base_SetConfig+0x14c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d007      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <TIM_Base_SetConfig+0x150>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a29      	ldr	r2, [pc, #164]	; (8005524 <TIM_Base_SetConfig+0x154>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d108      	bne.n	8005494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a10      	ldr	r2, [pc, #64]	; (80054fc <TIM_Base_SetConfig+0x12c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_Base_SetConfig+0xf8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <TIM_Base_SetConfig+0x13c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d103      	bne.n	80054d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	611a      	str	r2, [r3, #16]
  }
}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40010000 	.word	0x40010000
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40010400 	.word	0x40010400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800
 800551c:	40001800 	.word	0x40001800
 8005520:	40001c00 	.word	0x40001c00
 8005524:	40002000 	.word	0x40002000

08005528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f023 0201 	bic.w	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4b2b      	ldr	r3, [pc, #172]	; (8005600 <TIM_OC1_SetConfig+0xd8>)
 8005554:	4013      	ands	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 0302 	bic.w	r3, r3, #2
 8005570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <TIM_OC1_SetConfig+0xdc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_OC1_SetConfig+0x64>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a20      	ldr	r2, [pc, #128]	; (8005608 <TIM_OC1_SetConfig+0xe0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d10c      	bne.n	80055a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0308 	bic.w	r3, r3, #8
 8005592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a16      	ldr	r2, [pc, #88]	; (8005604 <TIM_OC1_SetConfig+0xdc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_OC1_SetConfig+0x8e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a15      	ldr	r2, [pc, #84]	; (8005608 <TIM_OC1_SetConfig+0xe0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d111      	bne.n	80055da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	fffeff8f 	.word	0xfffeff8f
 8005604:	40010000 	.word	0x40010000
 8005608:	40010400 	.word	0x40010400

0800560c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f023 0210 	bic.w	r2, r3, #16
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <TIM_OC2_SetConfig+0xe4>)
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0320 	bic.w	r3, r3, #32
 8005656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <TIM_OC2_SetConfig+0xe8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC2_SetConfig+0x68>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <TIM_OC2_SetConfig+0xec>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d10d      	bne.n	8005690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <TIM_OC2_SetConfig+0xe8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC2_SetConfig+0x94>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <TIM_OC2_SetConfig+0xec>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d113      	bne.n	80056c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	feff8fff 	.word	0xfeff8fff
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <TIM_OC3_SetConfig+0xe0>)
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a22      	ldr	r2, [pc, #136]	; (80057e0 <TIM_OC3_SetConfig+0xe4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_OC3_SetConfig+0x66>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <TIM_OC3_SetConfig+0xe8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10d      	bne.n	800577e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800577c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a17      	ldr	r2, [pc, #92]	; (80057e0 <TIM_OC3_SetConfig+0xe4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC3_SetConfig+0x92>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <TIM_OC3_SetConfig+0xe8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d113      	bne.n	80057b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800579c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	fffeff8f 	.word	0xfffeff8f
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40010400 	.word	0x40010400

080057e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4b1e      	ldr	r3, [pc, #120]	; (800588c <TIM_OC4_SetConfig+0xa4>)
 8005814:	4013      	ands	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	031b      	lsls	r3, r3, #12
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <TIM_OC4_SetConfig+0xa8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC4_SetConfig+0x68>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a12      	ldr	r2, [pc, #72]	; (8005894 <TIM_OC4_SetConfig+0xac>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d109      	bne.n	8005864 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	019b      	lsls	r3, r3, #6
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	feff8fff 	.word	0xfeff8fff
 8005890:	40010000 	.word	0x40010000
 8005894:	40010400 	.word	0x40010400

08005898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <TIM_OC5_SetConfig+0x98>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a12      	ldr	r2, [pc, #72]	; (8005934 <TIM_OC5_SetConfig+0x9c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC5_SetConfig+0x5e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a11      	ldr	r2, [pc, #68]	; (8005938 <TIM_OC5_SetConfig+0xa0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d109      	bne.n	800590a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	fffeff8f 	.word	0xfffeff8f
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400

0800593c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <TIM_OC6_SetConfig+0x9c>)
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800597e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	051b      	lsls	r3, r3, #20
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a13      	ldr	r2, [pc, #76]	; (80059dc <TIM_OC6_SetConfig+0xa0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC6_SetConfig+0x60>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a12      	ldr	r2, [pc, #72]	; (80059e0 <TIM_OC6_SetConfig+0xa4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d109      	bne.n	80059b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	029b      	lsls	r3, r3, #10
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	feff8fff 	.word	0xfeff8fff
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40010400 	.word	0x40010400

080059e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0201 	bic.w	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f023 030a 	bic.w	r3, r3, #10
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b087      	sub	sp, #28
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	f023 0210 	bic.w	r2, r3, #16
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	031b      	lsls	r3, r3, #12
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f043 0307 	orr.w	r3, r3, #7
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e06d      	b.n	8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a30      	ldr	r2, [pc, #192]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d01d      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10c      	bne.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40010400 	.word	0x40010400
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40000c00 	.word	0x40000c00
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40001800 	.word	0x40001800

08005c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e040      	b.n	8005d50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fb fc30 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2224      	movs	r2, #36	; 0x24
 8005ce8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa8c 	bl	8006220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f825 	bl	8005d58 <UART_SetConfig>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e01b      	b.n	8005d50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fb0b 	bl	8006364 <UART_CheckIdleState>
 8005d4e:	4603      	mov	r3, r0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4ba6      	ldr	r3, [pc, #664]	; (800601c <UART_SetConfig+0x2c4>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	6979      	ldr	r1, [r7, #20]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a94      	ldr	r2, [pc, #592]	; (8006020 <UART_SetConfig+0x2c8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d120      	bne.n	8005e16 <UART_SetConfig+0xbe>
 8005dd4:	4b93      	ldr	r3, [pc, #588]	; (8006024 <UART_SetConfig+0x2cc>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d816      	bhi.n	8005e10 <UART_SetConfig+0xb8>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x90>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005dff 	.word	0x08005dff
 8005df4:	08005e0b 	.word	0x08005e0b
 8005df8:	2301      	movs	r3, #1
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e150      	b.n	80060a0 <UART_SetConfig+0x348>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e14d      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e04:	2304      	movs	r3, #4
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e14a      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e147      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e10:	2310      	movs	r3, #16
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e144      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a83      	ldr	r2, [pc, #524]	; (8006028 <UART_SetConfig+0x2d0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d132      	bne.n	8005e86 <UART_SetConfig+0x12e>
 8005e20:	4b80      	ldr	r3, [pc, #512]	; (8006024 <UART_SetConfig+0x2cc>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	2b0c      	cmp	r3, #12
 8005e2c:	d828      	bhi.n	8005e80 <UART_SetConfig+0x128>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0xdc>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e69 	.word	0x08005e69
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	08005e81 	.word	0x08005e81
 8005e44:	08005e75 	.word	0x08005e75
 8005e48:	08005e81 	.word	0x08005e81
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005e81 	.word	0x08005e81
 8005e54:	08005e6f 	.word	0x08005e6f
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e81 	.word	0x08005e81
 8005e60:	08005e81 	.word	0x08005e81
 8005e64:	08005e7b 	.word	0x08005e7b
 8005e68:	2300      	movs	r3, #0
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e118      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	77fb      	strb	r3, [r7, #31]
 8005e72:	e115      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e74:	2304      	movs	r3, #4
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e112      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e10f      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e80:	2310      	movs	r3, #16
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e10c      	b.n	80060a0 <UART_SetConfig+0x348>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a68      	ldr	r2, [pc, #416]	; (800602c <UART_SetConfig+0x2d4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d120      	bne.n	8005ed2 <UART_SetConfig+0x17a>
 8005e90:	4b64      	ldr	r3, [pc, #400]	; (8006024 <UART_SetConfig+0x2cc>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e9a:	2b30      	cmp	r3, #48	; 0x30
 8005e9c:	d013      	beq.n	8005ec6 <UART_SetConfig+0x16e>
 8005e9e:	2b30      	cmp	r3, #48	; 0x30
 8005ea0:	d814      	bhi.n	8005ecc <UART_SetConfig+0x174>
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d009      	beq.n	8005eba <UART_SetConfig+0x162>
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d810      	bhi.n	8005ecc <UART_SetConfig+0x174>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <UART_SetConfig+0x15c>
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	d006      	beq.n	8005ec0 <UART_SetConfig+0x168>
 8005eb2:	e00b      	b.n	8005ecc <UART_SetConfig+0x174>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e0f2      	b.n	80060a0 <UART_SetConfig+0x348>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e0ef      	b.n	80060a0 <UART_SetConfig+0x348>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e0ec      	b.n	80060a0 <UART_SetConfig+0x348>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e0e9      	b.n	80060a0 <UART_SetConfig+0x348>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e0e6      	b.n	80060a0 <UART_SetConfig+0x348>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a56      	ldr	r2, [pc, #344]	; (8006030 <UART_SetConfig+0x2d8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d120      	bne.n	8005f1e <UART_SetConfig+0x1c6>
 8005edc:	4b51      	ldr	r3, [pc, #324]	; (8006024 <UART_SetConfig+0x2cc>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee8:	d013      	beq.n	8005f12 <UART_SetConfig+0x1ba>
 8005eea:	2bc0      	cmp	r3, #192	; 0xc0
 8005eec:	d814      	bhi.n	8005f18 <UART_SetConfig+0x1c0>
 8005eee:	2b80      	cmp	r3, #128	; 0x80
 8005ef0:	d009      	beq.n	8005f06 <UART_SetConfig+0x1ae>
 8005ef2:	2b80      	cmp	r3, #128	; 0x80
 8005ef4:	d810      	bhi.n	8005f18 <UART_SetConfig+0x1c0>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <UART_SetConfig+0x1a8>
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d006      	beq.n	8005f0c <UART_SetConfig+0x1b4>
 8005efe:	e00b      	b.n	8005f18 <UART_SetConfig+0x1c0>
 8005f00:	2300      	movs	r3, #0
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e0cc      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e0c9      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e0c6      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f12:	2308      	movs	r3, #8
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e0c3      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e0c0      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a44      	ldr	r2, [pc, #272]	; (8006034 <UART_SetConfig+0x2dc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d125      	bne.n	8005f74 <UART_SetConfig+0x21c>
 8005f28:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <UART_SetConfig+0x2cc>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f36:	d017      	beq.n	8005f68 <UART_SetConfig+0x210>
 8005f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f3c:	d817      	bhi.n	8005f6e <UART_SetConfig+0x216>
 8005f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f42:	d00b      	beq.n	8005f5c <UART_SetConfig+0x204>
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f48:	d811      	bhi.n	8005f6e <UART_SetConfig+0x216>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <UART_SetConfig+0x1fe>
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d006      	beq.n	8005f62 <UART_SetConfig+0x20a>
 8005f54:	e00b      	b.n	8005f6e <UART_SetConfig+0x216>
 8005f56:	2300      	movs	r3, #0
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e0a1      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e09e      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f62:	2304      	movs	r3, #4
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e09b      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e098      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f6e:	2310      	movs	r3, #16
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e095      	b.n	80060a0 <UART_SetConfig+0x348>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2f      	ldr	r2, [pc, #188]	; (8006038 <UART_SetConfig+0x2e0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d125      	bne.n	8005fca <UART_SetConfig+0x272>
 8005f7e:	4b29      	ldr	r3, [pc, #164]	; (8006024 <UART_SetConfig+0x2cc>)
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8c:	d017      	beq.n	8005fbe <UART_SetConfig+0x266>
 8005f8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f92:	d817      	bhi.n	8005fc4 <UART_SetConfig+0x26c>
 8005f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f98:	d00b      	beq.n	8005fb2 <UART_SetConfig+0x25a>
 8005f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9e:	d811      	bhi.n	8005fc4 <UART_SetConfig+0x26c>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <UART_SetConfig+0x254>
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa8:	d006      	beq.n	8005fb8 <UART_SetConfig+0x260>
 8005faa:	e00b      	b.n	8005fc4 <UART_SetConfig+0x26c>
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e076      	b.n	80060a0 <UART_SetConfig+0x348>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e073      	b.n	80060a0 <UART_SetConfig+0x348>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e070      	b.n	80060a0 <UART_SetConfig+0x348>
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e06d      	b.n	80060a0 <UART_SetConfig+0x348>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e06a      	b.n	80060a0 <UART_SetConfig+0x348>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <UART_SetConfig+0x2e4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d138      	bne.n	8006046 <UART_SetConfig+0x2ee>
 8005fd4:	4b13      	ldr	r3, [pc, #76]	; (8006024 <UART_SetConfig+0x2cc>)
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fe2:	d017      	beq.n	8006014 <UART_SetConfig+0x2bc>
 8005fe4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fe8:	d82a      	bhi.n	8006040 <UART_SetConfig+0x2e8>
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fee:	d00b      	beq.n	8006008 <UART_SetConfig+0x2b0>
 8005ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff4:	d824      	bhi.n	8006040 <UART_SetConfig+0x2e8>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <UART_SetConfig+0x2aa>
 8005ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffe:	d006      	beq.n	800600e <UART_SetConfig+0x2b6>
 8006000:	e01e      	b.n	8006040 <UART_SetConfig+0x2e8>
 8006002:	2300      	movs	r3, #0
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e04b      	b.n	80060a0 <UART_SetConfig+0x348>
 8006008:	2302      	movs	r3, #2
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e048      	b.n	80060a0 <UART_SetConfig+0x348>
 800600e:	2304      	movs	r3, #4
 8006010:	77fb      	strb	r3, [r7, #31]
 8006012:	e045      	b.n	80060a0 <UART_SetConfig+0x348>
 8006014:	2308      	movs	r3, #8
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e042      	b.n	80060a0 <UART_SetConfig+0x348>
 800601a:	bf00      	nop
 800601c:	efff69f3 	.word	0xefff69f3
 8006020:	40011000 	.word	0x40011000
 8006024:	40023800 	.word	0x40023800
 8006028:	40004400 	.word	0x40004400
 800602c:	40004800 	.word	0x40004800
 8006030:	40004c00 	.word	0x40004c00
 8006034:	40005000 	.word	0x40005000
 8006038:	40011400 	.word	0x40011400
 800603c:	40007800 	.word	0x40007800
 8006040:	2310      	movs	r3, #16
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e02c      	b.n	80060a0 <UART_SetConfig+0x348>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a72      	ldr	r2, [pc, #456]	; (8006214 <UART_SetConfig+0x4bc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d125      	bne.n	800609c <UART_SetConfig+0x344>
 8006050:	4b71      	ldr	r3, [pc, #452]	; (8006218 <UART_SetConfig+0x4c0>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800605a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800605e:	d017      	beq.n	8006090 <UART_SetConfig+0x338>
 8006060:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006064:	d817      	bhi.n	8006096 <UART_SetConfig+0x33e>
 8006066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606a:	d00b      	beq.n	8006084 <UART_SetConfig+0x32c>
 800606c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006070:	d811      	bhi.n	8006096 <UART_SetConfig+0x33e>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <UART_SetConfig+0x326>
 8006076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800607a:	d006      	beq.n	800608a <UART_SetConfig+0x332>
 800607c:	e00b      	b.n	8006096 <UART_SetConfig+0x33e>
 800607e:	2300      	movs	r3, #0
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e00d      	b.n	80060a0 <UART_SetConfig+0x348>
 8006084:	2302      	movs	r3, #2
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e00a      	b.n	80060a0 <UART_SetConfig+0x348>
 800608a:	2304      	movs	r3, #4
 800608c:	77fb      	strb	r3, [r7, #31]
 800608e:	e007      	b.n	80060a0 <UART_SetConfig+0x348>
 8006090:	2308      	movs	r3, #8
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e004      	b.n	80060a0 <UART_SetConfig+0x348>
 8006096:	2310      	movs	r3, #16
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e001      	b.n	80060a0 <UART_SetConfig+0x348>
 800609c:	2310      	movs	r3, #16
 800609e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a8:	d15b      	bne.n	8006162 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80060aa:	7ffb      	ldrb	r3, [r7, #31]
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d828      	bhi.n	8006102 <UART_SetConfig+0x3aa>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0x360>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	08006103 	.word	0x08006103
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	08006103 	.word	0x08006103
 80060d0:	08006103 	.word	0x08006103
 80060d4:	08006103 	.word	0x08006103
 80060d8:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060dc:	f7fd fff8 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 80060e0:	61b8      	str	r0, [r7, #24]
        break;
 80060e2:	e013      	b.n	800610c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fe f808 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 80060e8:	61b8      	str	r0, [r7, #24]
        break;
 80060ea:	e00f      	b.n	800610c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b4b      	ldr	r3, [pc, #300]	; (800621c <UART_SetConfig+0x4c4>)
 80060ee:	61bb      	str	r3, [r7, #24]
        break;
 80060f0:	e00c      	b.n	800610c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fd fedd 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 80060f6:	61b8      	str	r0, [r7, #24]
        break;
 80060f8:	e008      	b.n	800610c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	61bb      	str	r3, [r7, #24]
        break;
 8006100:	e004      	b.n	800610c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	77bb      	strb	r3, [r7, #30]
        break;
 800610a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d074      	beq.n	80061fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	005a      	lsls	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	441a      	add	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	fbb2 f3f3 	udiv	r3, r2, r3
 8006126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b0f      	cmp	r3, #15
 800612c:	d916      	bls.n	800615c <UART_SetConfig+0x404>
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006134:	d212      	bcs.n	800615c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	b29b      	uxth	r3, r3
 800613a:	f023 030f 	bic.w	r3, r3, #15
 800613e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	b29b      	uxth	r3, r3
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	b29a      	uxth	r2, r3
 800614c:	89fb      	ldrh	r3, [r7, #14]
 800614e:	4313      	orrs	r3, r2
 8006150:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	89fa      	ldrh	r2, [r7, #14]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	e04f      	b.n	80061fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	77bb      	strb	r3, [r7, #30]
 8006160:	e04c      	b.n	80061fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006162:	7ffb      	ldrb	r3, [r7, #31]
 8006164:	2b08      	cmp	r3, #8
 8006166:	d828      	bhi.n	80061ba <UART_SetConfig+0x462>
 8006168:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0x418>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	08006195 	.word	0x08006195
 8006174:	0800619d 	.word	0x0800619d
 8006178:	080061a5 	.word	0x080061a5
 800617c:	080061bb 	.word	0x080061bb
 8006180:	080061ab 	.word	0x080061ab
 8006184:	080061bb 	.word	0x080061bb
 8006188:	080061bb 	.word	0x080061bb
 800618c:	080061bb 	.word	0x080061bb
 8006190:	080061b3 	.word	0x080061b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7fd ff9c 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8006198:	61b8      	str	r0, [r7, #24]
        break;
 800619a:	e013      	b.n	80061c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800619c:	f7fd ffac 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 80061a0:	61b8      	str	r0, [r7, #24]
        break;
 80061a2:	e00f      	b.n	80061c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a4:	4b1d      	ldr	r3, [pc, #116]	; (800621c <UART_SetConfig+0x4c4>)
 80061a6:	61bb      	str	r3, [r7, #24]
        break;
 80061a8:	e00c      	b.n	80061c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061aa:	f7fd fe81 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 80061ae:	61b8      	str	r0, [r7, #24]
        break;
 80061b0:	e008      	b.n	80061c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b6:	61bb      	str	r3, [r7, #24]
        break;
 80061b8:	e004      	b.n	80061c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	77bb      	strb	r3, [r7, #30]
        break;
 80061c2:	bf00      	nop
    }

    if (pclk != 0U)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d018      	beq.n	80061fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	085a      	lsrs	r2, r3, #1
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	441a      	add	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b0f      	cmp	r3, #15
 80061e2:	d909      	bls.n	80061f8 <UART_SetConfig+0x4a0>
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ea:	d205      	bcs.n	80061f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60da      	str	r2, [r3, #12]
 80061f6:	e001      	b.n	80061fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006208:	7fbb      	ldrb	r3, [r7, #30]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40007c00 	.word	0x40007c00
 8006218:	40023800 	.word	0x40023800
 800621c:	00f42400 	.word	0x00f42400

08006220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01a      	beq.n	8006336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631e:	d10a      	bne.n	8006336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	605a      	str	r2, [r3, #4]
  }
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b098      	sub	sp, #96	; 0x60
 8006368:	af02      	add	r7, sp, #8
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006374:	f7fb fc02 	bl	8001b7c <HAL_GetTick>
 8006378:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b08      	cmp	r3, #8
 8006386:	d12e      	bne.n	80063e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006390:	2200      	movs	r2, #0
 8006392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f88c 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d021      	beq.n	80063e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b6:	653b      	str	r3, [r7, #80]	; 0x50
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44
 80063c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e062      	b.n	80064ac <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d149      	bne.n	8006488 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f856 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d03c      	beq.n	8006488 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	623b      	str	r3, [r7, #32]
   return(result);
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
 800642e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	64bb      	str	r3, [r7, #72]	; 0x48
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006460:	61fa      	str	r2, [r7, #28]
 8006462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	69b9      	ldr	r1, [r7, #24]
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	617b      	str	r3, [r7, #20]
   return(result);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e5      	bne.n	8006440 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e011      	b.n	80064ac <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3758      	adds	r7, #88	; 0x58
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c4:	e04f      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064cc:	d04b      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ce:	f7fb fb55 	bl	8001b7c <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d302      	bcc.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e04e      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d037      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d034      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d031      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b08      	cmp	r3, #8
 800650e:	d110      	bne.n	8006532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2208      	movs	r2, #8
 8006516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f838 	bl	800658e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2208      	movs	r2, #8
 8006522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e029      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006540:	d111      	bne.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800654a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f81e 	bl	800658e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e00f      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4013      	ands	r3, r2
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	429a      	cmp	r2, r3
 8006574:	bf0c      	ite	eq
 8006576:	2301      	moveq	r3, #1
 8006578:	2300      	movne	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	429a      	cmp	r2, r3
 8006582:	d0a0      	beq.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800658e:	b480      	push	{r7}
 8006590:	b095      	sub	sp, #84	; 0x54
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b4:	643b      	str	r3, [r7, #64]	; 0x40
 80065b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e6      	bne.n	8006596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3308      	adds	r3, #8
 80065ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3308      	adds	r3, #8
 80065e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e5      	bne.n	80065c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006600:	2b01      	cmp	r3, #1
 8006602:	d118      	bne.n	8006636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	60bb      	str	r3, [r7, #8]
   return(result);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f023 0310 	bic.w	r3, r3, #16
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6979      	ldr	r1, [r7, #20]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	613b      	str	r3, [r7, #16]
   return(result);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e6      	bne.n	8006604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	669a      	str	r2, [r3, #104]	; 0x68
}
 800664a:	bf00      	nop
 800664c:	3754      	adds	r7, #84	; 0x54
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <MotorControl_Init>:
#include "motor_control.h"
#include "string.h"
#include "stdlib.h"

void MotorControl_Init(MotorControl* motor, TIM_HandleTypeDef* timer, uint8_t channel_1, uint8_t channel_2) {
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	4611      	mov	r1, r2
 8006662:	461a      	mov	r2, r3
 8006664:	460b      	mov	r3, r1
 8006666:	71fb      	strb	r3, [r7, #7]
 8006668:	4613      	mov	r3, r2
 800666a:	71bb      	strb	r3, [r7, #6]
    motor->htim = timer;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	601a      	str	r2, [r3, #0]
    motor->channel_1 = channel_1;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	79fa      	ldrb	r2, [r7, #7]
 8006676:	711a      	strb	r2, [r3, #4]
    motor->channel_2 = channel_2;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	79ba      	ldrb	r2, [r7, #6]
 800667c:	715a      	strb	r2, [r3, #5]
    HAL_TIM_PWM_Start(motor->htim, motor->channel_1);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	791b      	ldrb	r3, [r3, #4]
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7fe fa99 	bl	8004bc0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor->htim, motor->channel_2);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	795b      	ldrb	r3, [r3, #5]
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7fe fa91 	bl	8004bc0 <HAL_TIM_PWM_Start>
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <MotorControl_SetSpeed>:

void MotorControl_SetSpeed(MotorControl* motor, TIM_HandleTypeDef* htim, float duty_cycle) {
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed = 32767 * duty_cycle;
 80066b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80066ba:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006760 <MotorControl_SetSpeed+0xb8>
 80066be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066c2:	edc7 7a05 	vstr	s15, [r7, #20]
	float input_speed = abs(speed);
 80066c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80066ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ce:	ee17 3a90 	vmov	r3, s15
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfb8      	it	lt
 80066d6:	425b      	neglt	r3, r3
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066e0:	edc7 7a04 	vstr	s15, [r7, #16]

	if (speed > 0)
 80066e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80066e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f0:	dd0f      	ble.n	8006712 <MotorControl_SetSpeed+0x6a>
	{
		motor->htim->Instance->CCR1 = input_speed;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80066fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006700:	ee17 2a90 	vmov	r2, s15
 8006704:	635a      	str	r2, [r3, #52]	; 0x34
		motor->htim->Instance->CCR3 = 0;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2200      	movs	r2, #0
 800670e:	63da      	str	r2, [r3, #60]	; 0x3c
	else {
		motor->htim->Instance->CCR1 = 0;
		motor->htim->Instance->CCR3 = 0;
	}

}
 8006710:	e020      	b.n	8006754 <MotorControl_SetSpeed+0xac>
	else if (speed < 0)
 8006712:	edd7 7a05 	vldr	s15, [r7, #20]
 8006716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671e:	d50f      	bpl.n	8006740 <MotorControl_SetSpeed+0x98>
		motor->htim->Instance->CCR1 = 0;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	635a      	str	r2, [r3, #52]	; 0x34
		motor->htim->Instance->CCR3 = input_speed;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	edd7 7a04 	vldr	s15, [r7, #16]
 8006734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006738:	ee17 2a90 	vmov	r2, s15
 800673c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800673e:	e009      	b.n	8006754 <MotorControl_SetSpeed+0xac>
		motor->htim->Instance->CCR1 = 0;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	635a      	str	r2, [r3, #52]	; 0x34
		motor->htim->Instance->CCR3 = 0;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2200      	movs	r2, #0
 8006752:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	46fffe00 	.word	0x46fffe00

08006764 <ugv_servoInitServo>:
#include "ugv_servo.h"


void ugv_servoInitServo(ugvServo_t *servoM){
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(servoM->timerInstance, servoM->timerCh);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	891b      	ldrh	r3, [r3, #8]
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7fe fa22 	bl	8004bc0 <HAL_TIM_PWM_Start>

	servoM->maxPeriod = (int) (servoM->timerARR)*(servoM->maxPulse/servoM->timerPeriod);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	895b      	ldrh	r3, [r3, #10]
 8006780:	ee07 3a90 	vmov	s15, r3
 8006784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	ed93 6a04 	vldr	s12, [r3, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	edd3 6a05 	vldr	s13, [r3, #20]
 8006794:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a0:	ee17 2a90 	vmov	r2, s15
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	61da      	str	r2, [r3, #28]
	servoM->minPeriod = (int) (servoM->timerARR)*(servoM->minPulse/servoM->timerPeriod);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	895b      	ldrh	r3, [r3, #10]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	ed93 6a03 	vldr	s12, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	edd3 6a05 	vldr	s13, [r3, #20]
 80067c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80067c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067cc:	ee17 2a90 	vmov	r2, s15
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	619a      	str	r2, [r3, #24]

	ugv_servoSetAngle(servoM, servoM->travelOffset);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80067da:	eeb0 0a67 	vmov.f32	s0, s15
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f804 	bl	80067ec <ugv_servoSetAngle>
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <ugv_servoSetAngle>:
/**
 *	Make the servo move to a specific angle
 * @param s
 * @param angle
 */
void ugv_servoSetAngle(ugvServo_t *servoM, float angle) {
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	ed87 0a00 	vstr	s0, [r7]
	float setAngle = angle + servoM->travelOffset;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80067fe:	ed97 7a00 	vldr	s14, [r7]
 8006802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006806:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((setAngle) > servoM->maxLimit) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006810:	ed97 7a03 	vldr	s14, [r7, #12]
 8006814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681c:	dd2d      	ble.n	800687a <ugv_servoSetAngle+0x8e>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
				* (servoM->maxPeriod - servoM->minPeriod))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006836:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006850:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->maxLimit)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800685c:	ee17 2a90 	vmov	r2, s15
 8006860:	601a      	str	r2, [r3, #0]

		servoM->setPointAngle = servoM->maxLimit - servoM->travelOffset;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800686e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	edc3 7a08 	vstr	s15, [r3, #32]
				* (servoM->maxPeriod - servoM->minPeriod))
				/ (servoM->travelAngle)) + servoM->minPeriod);
		servoM->setPointAngle = angle;
	}

}
 8006878:	e054      	b.n	8006924 <ugv_servoSetAngle+0x138>
	} else if ((setAngle) < servoM->minLimit) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006880:	ed97 7a03 	vldr	s14, [r7, #12]
 8006884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688c:	d526      	bpl.n	80068dc <ugv_servoSetAngle+0xf0>
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
				* (servoM->maxPeriod - servoM->minPeriod))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068a6:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80068b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068c0:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((servoM->minLimit)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068cc:	ee17 2a90 	vmov	r2, s15
 80068d0:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = servoM->minLimit;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	e023      	b.n	8006924 <ugv_servoSetAngle+0x138>
				* (servoM->maxPeriod - servoM->minPeriod))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80068f2:	ee67 6a27 	vmul.f32	s13, s14, s15
				/ (servoM->travelAngle)) + servoM->minPeriod);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80068fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800690c:	ee77 7a27 	vadd.f32	s15, s14, s15
		*servoM->timerCCRX = (long unsigned int) ((((setAngle)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006918:	ee17 2a90 	vmov	r2, s15
 800691c:	601a      	str	r2, [r3, #0]
		servoM->setPointAngle = angle;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006936:	4b87      	ldr	r3, [pc, #540]	; (8006b54 <MX_LWIP_Init+0x224>)
 8006938:	22c0      	movs	r2, #192	; 0xc0
 800693a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800693c:	4b85      	ldr	r3, [pc, #532]	; (8006b54 <MX_LWIP_Init+0x224>)
 800693e:	22a8      	movs	r2, #168	; 0xa8
 8006940:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 20;
 8006942:	4b84      	ldr	r3, [pc, #528]	; (8006b54 <MX_LWIP_Init+0x224>)
 8006944:	2214      	movs	r2, #20
 8006946:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 21;
 8006948:	4b82      	ldr	r3, [pc, #520]	; (8006b54 <MX_LWIP_Init+0x224>)
 800694a:	2215      	movs	r2, #21
 800694c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800694e:	4b82      	ldr	r3, [pc, #520]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006950:	22ff      	movs	r2, #255	; 0xff
 8006952:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006954:	4b80      	ldr	r3, [pc, #512]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006956:	22ff      	movs	r2, #255	; 0xff
 8006958:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800695a:	4b7f      	ldr	r3, [pc, #508]	; (8006b58 <MX_LWIP_Init+0x228>)
 800695c:	22ff      	movs	r2, #255	; 0xff
 800695e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006960:	4b7d      	ldr	r3, [pc, #500]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006962:	2200      	movs	r2, #0
 8006964:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006966:	4b7d      	ldr	r3, [pc, #500]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006968:	22c0      	movs	r2, #192	; 0xc0
 800696a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800696c:	4b7b      	ldr	r3, [pc, #492]	; (8006b5c <MX_LWIP_Init+0x22c>)
 800696e:	22a8      	movs	r2, #168	; 0xa8
 8006970:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 20;
 8006972:	4b7a      	ldr	r3, [pc, #488]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006974:	2214      	movs	r2, #20
 8006976:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006978:	4b78      	ldr	r3, [pc, #480]	; (8006b5c <MX_LWIP_Init+0x22c>)
 800697a:	2201      	movs	r2, #1
 800697c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800697e:	f000 fd11 	bl	80073a4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006982:	4b74      	ldr	r3, [pc, #464]	; (8006b54 <MX_LWIP_Init+0x224>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	061a      	lsls	r2, r3, #24
 8006988:	4b72      	ldr	r3, [pc, #456]	; (8006b54 <MX_LWIP_Init+0x224>)
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	431a      	orrs	r2, r3
 8006990:	4b70      	ldr	r3, [pc, #448]	; (8006b54 <MX_LWIP_Init+0x224>)
 8006992:	789b      	ldrb	r3, [r3, #2]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	4313      	orrs	r3, r2
 8006998:	4a6e      	ldr	r2, [pc, #440]	; (8006b54 <MX_LWIP_Init+0x224>)
 800699a:	78d2      	ldrb	r2, [r2, #3]
 800699c:	4313      	orrs	r3, r2
 800699e:	061a      	lsls	r2, r3, #24
 80069a0:	4b6c      	ldr	r3, [pc, #432]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	0619      	lsls	r1, r3, #24
 80069a6:	4b6b      	ldr	r3, [pc, #428]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	4319      	orrs	r1, r3
 80069ae:	4b69      	ldr	r3, [pc, #420]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069b0:	789b      	ldrb	r3, [r3, #2]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	430b      	orrs	r3, r1
 80069b6:	4967      	ldr	r1, [pc, #412]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069b8:	78c9      	ldrb	r1, [r1, #3]
 80069ba:	430b      	orrs	r3, r1
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069c2:	431a      	orrs	r2, r3
 80069c4:	4b63      	ldr	r3, [pc, #396]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	0619      	lsls	r1, r3, #24
 80069ca:	4b62      	ldr	r3, [pc, #392]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	4319      	orrs	r1, r3
 80069d2:	4b60      	ldr	r3, [pc, #384]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069d4:	789b      	ldrb	r3, [r3, #2]
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	430b      	orrs	r3, r1
 80069da:	495e      	ldr	r1, [pc, #376]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069dc:	78c9      	ldrb	r1, [r1, #3]
 80069de:	430b      	orrs	r3, r1
 80069e0:	0a1b      	lsrs	r3, r3, #8
 80069e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069e6:	431a      	orrs	r2, r3
 80069e8:	4b5a      	ldr	r3, [pc, #360]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	0619      	lsls	r1, r3, #24
 80069ee:	4b59      	ldr	r3, [pc, #356]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	4319      	orrs	r1, r3
 80069f6:	4b57      	ldr	r3, [pc, #348]	; (8006b54 <MX_LWIP_Init+0x224>)
 80069f8:	789b      	ldrb	r3, [r3, #2]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	430b      	orrs	r3, r1
 80069fe:	4955      	ldr	r1, [pc, #340]	; (8006b54 <MX_LWIP_Init+0x224>)
 8006a00:	78c9      	ldrb	r1, [r1, #3]
 8006a02:	430b      	orrs	r3, r1
 8006a04:	0e1b      	lsrs	r3, r3, #24
 8006a06:	4313      	orrs	r3, r2
 8006a08:	4a55      	ldr	r2, [pc, #340]	; (8006b60 <MX_LWIP_Init+0x230>)
 8006a0a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006a0c:	4b52      	ldr	r3, [pc, #328]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	061a      	lsls	r2, r3, #24
 8006a12:	4b51      	ldr	r3, [pc, #324]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	041b      	lsls	r3, r3, #16
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	4b4f      	ldr	r3, [pc, #316]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a1c:	789b      	ldrb	r3, [r3, #2]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	4313      	orrs	r3, r2
 8006a22:	4a4d      	ldr	r2, [pc, #308]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a24:	78d2      	ldrb	r2, [r2, #3]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	061a      	lsls	r2, r3, #24
 8006a2a:	4b4b      	ldr	r3, [pc, #300]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	0619      	lsls	r1, r3, #24
 8006a30:	4b49      	ldr	r3, [pc, #292]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	4319      	orrs	r1, r3
 8006a38:	4b47      	ldr	r3, [pc, #284]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a3a:	789b      	ldrb	r3, [r3, #2]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	4945      	ldr	r1, [pc, #276]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a42:	78c9      	ldrb	r1, [r1, #3]
 8006a44:	430b      	orrs	r3, r1
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	4b42      	ldr	r3, [pc, #264]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	0619      	lsls	r1, r3, #24
 8006a54:	4b40      	ldr	r3, [pc, #256]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	4319      	orrs	r1, r3
 8006a5c:	4b3e      	ldr	r3, [pc, #248]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a5e:	789b      	ldrb	r3, [r3, #2]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	430b      	orrs	r3, r1
 8006a64:	493c      	ldr	r1, [pc, #240]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a66:	78c9      	ldrb	r1, [r1, #3]
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a70:	431a      	orrs	r2, r3
 8006a72:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	0619      	lsls	r1, r3, #24
 8006a78:	4b37      	ldr	r3, [pc, #220]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	4319      	orrs	r1, r3
 8006a80:	4b35      	ldr	r3, [pc, #212]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a82:	789b      	ldrb	r3, [r3, #2]
 8006a84:	021b      	lsls	r3, r3, #8
 8006a86:	430b      	orrs	r3, r1
 8006a88:	4933      	ldr	r1, [pc, #204]	; (8006b58 <MX_LWIP_Init+0x228>)
 8006a8a:	78c9      	ldrb	r1, [r1, #3]
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	0e1b      	lsrs	r3, r3, #24
 8006a90:	4313      	orrs	r3, r2
 8006a92:	4a34      	ldr	r2, [pc, #208]	; (8006b64 <MX_LWIP_Init+0x234>)
 8006a94:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006a96:	4b31      	ldr	r3, [pc, #196]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	061a      	lsls	r2, r3, #24
 8006a9c:	4b2f      	ldr	r3, [pc, #188]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	4b2d      	ldr	r3, [pc, #180]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006aa6:	789b      	ldrb	r3, [r3, #2]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	4a2b      	ldr	r2, [pc, #172]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006aae:	78d2      	ldrb	r2, [r2, #3]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	061a      	lsls	r2, r3, #24
 8006ab4:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	0619      	lsls	r1, r3, #24
 8006aba:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	4319      	orrs	r1, r3
 8006ac2:	4b26      	ldr	r3, [pc, #152]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006ac4:	789b      	ldrb	r3, [r3, #2]
 8006ac6:	021b      	lsls	r3, r3, #8
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	4924      	ldr	r1, [pc, #144]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006acc:	78c9      	ldrb	r1, [r1, #3]
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	0619      	lsls	r1, r3, #24
 8006ade:	4b1f      	ldr	r3, [pc, #124]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	4319      	orrs	r1, r3
 8006ae6:	4b1d      	ldr	r3, [pc, #116]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006ae8:	789b      	ldrb	r3, [r3, #2]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	430b      	orrs	r3, r1
 8006aee:	491b      	ldr	r1, [pc, #108]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006af0:	78c9      	ldrb	r1, [r1, #3]
 8006af2:	430b      	orrs	r3, r1
 8006af4:	0a1b      	lsrs	r3, r3, #8
 8006af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006afa:	431a      	orrs	r2, r3
 8006afc:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	0619      	lsls	r1, r3, #24
 8006b02:	4b16      	ldr	r3, [pc, #88]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	4319      	orrs	r1, r3
 8006b0a:	4b14      	ldr	r3, [pc, #80]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006b0c:	789b      	ldrb	r3, [r3, #2]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	430b      	orrs	r3, r1
 8006b12:	4912      	ldr	r1, [pc, #72]	; (8006b5c <MX_LWIP_Init+0x22c>)
 8006b14:	78c9      	ldrb	r1, [r1, #3]
 8006b16:	430b      	orrs	r3, r1
 8006b18:	0e1b      	lsrs	r3, r3, #24
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	4a12      	ldr	r2, [pc, #72]	; (8006b68 <MX_LWIP_Init+0x238>)
 8006b1e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006b20:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <MX_LWIP_Init+0x23c>)
 8006b22:	9302      	str	r3, [sp, #8]
 8006b24:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <MX_LWIP_Init+0x240>)
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <MX_LWIP_Init+0x238>)
 8006b2e:	4a0d      	ldr	r2, [pc, #52]	; (8006b64 <MX_LWIP_Init+0x234>)
 8006b30:	490b      	ldr	r1, [pc, #44]	; (8006b60 <MX_LWIP_Init+0x230>)
 8006b32:	4810      	ldr	r0, [pc, #64]	; (8006b74 <MX_LWIP_Init+0x244>)
 8006b34:	f001 f922 	bl	8007d7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006b38:	480e      	ldr	r0, [pc, #56]	; (8006b74 <MX_LWIP_Init+0x244>)
 8006b3a:	f001 fad1 	bl	80080e0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006b3e:	480d      	ldr	r0, [pc, #52]	; (8006b74 <MX_LWIP_Init+0x244>)
 8006b40:	f001 fade 	bl	8008100 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <MX_LWIP_Init+0x248>)
 8006b46:	480b      	ldr	r0, [pc, #44]	; (8006b74 <MX_LWIP_Init+0x244>)
 8006b48:	f001 fbdc 	bl	8008304 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006b4c:	bf00      	nop
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000600 	.word	0x20000600
 8006b58:	20000604 	.word	0x20000604
 8006b5c:	20000608 	.word	0x20000608
 8006b60:	200005f4 	.word	0x200005f4
 8006b64:	200005f8 	.word	0x200005f8
 8006b68:	200005fc 	.word	0x200005fc
 8006b6c:	08010e8d 	.word	0x08010e8d
 8006b70:	08006e91 	.word	0x08006e91
 8006b74:	200005c0 	.word	0x200005c0
 8006b78:	08006b7d 	.word	0x08006b7d

08006b7c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <SCB_InvalidateDCache_by_Addr>:
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006ba2:	2320      	movs	r3, #32
 8006ba4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ba6:	f3bf 8f4f 	dsb	sy
}
 8006baa:	bf00      	nop
    while (op_size > 0) {
 8006bac:	e00b      	b.n	8006bc6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006bae:	4a0d      	ldr	r2, [pc, #52]	; (8006be4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4413      	add	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dcf0      	bgt.n	8006bae <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006bcc:	f3bf 8f4f 	dsb	sy
}
 8006bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bd2:	f3bf 8f6f 	isb	sy
}
 8006bd6:	bf00      	nop
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	e000ed00 	.word	0xe000ed00

08006be8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006bf4:	4b40      	ldr	r3, [pc, #256]	; (8006cf8 <low_level_init+0x110>)
 8006bf6:	4a41      	ldr	r2, [pc, #260]	; (8006cfc <low_level_init+0x114>)
 8006bf8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006c02:	23e1      	movs	r3, #225	; 0xe1
 8006c04:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006c06:	2300      	movs	r3, #0
 8006c08:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x20;
 8006c0e:	2320      	movs	r3, #32
 8006c10:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006c12:	4a39      	ldr	r2, [pc, #228]	; (8006cf8 <low_level_init+0x110>)
 8006c14:	f107 0308 	add.w	r3, r7, #8
 8006c18:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006c1a:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <low_level_init+0x110>)
 8006c1c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006c20:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006c22:	4b35      	ldr	r3, [pc, #212]	; (8006cf8 <low_level_init+0x110>)
 8006c24:	4a36      	ldr	r2, [pc, #216]	; (8006d00 <low_level_init+0x118>)
 8006c26:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006c28:	4b33      	ldr	r3, [pc, #204]	; (8006cf8 <low_level_init+0x110>)
 8006c2a:	4a36      	ldr	r2, [pc, #216]	; (8006d04 <low_level_init+0x11c>)
 8006c2c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006c2e:	4b32      	ldr	r3, [pc, #200]	; (8006cf8 <low_level_init+0x110>)
 8006c30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006c34:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006c36:	4830      	ldr	r0, [pc, #192]	; (8006cf8 <low_level_init+0x110>)
 8006c38:	f7fb f95a 	bl	8001ef0 <HAL_ETH_Init>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006c40:	2238      	movs	r2, #56	; 0x38
 8006c42:	2100      	movs	r1, #0
 8006c44:	4830      	ldr	r0, [pc, #192]	; (8006d08 <low_level_init+0x120>)
 8006c46:	f00b f938 	bl	8011eba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006c4a:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <low_level_init+0x120>)
 8006c4c:	2221      	movs	r2, #33	; 0x21
 8006c4e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006c50:	4b2d      	ldr	r3, [pc, #180]	; (8006d08 <low_level_init+0x120>)
 8006c52:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006c56:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006c58:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <low_level_init+0x120>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006c5e:	482b      	ldr	r0, [pc, #172]	; (8006d0c <low_level_init+0x124>)
 8006c60:	f000 ff54 	bl	8007b0c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2206      	movs	r2, #6
 8006c68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006c6c:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <low_level_init+0x110>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006c78:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <low_level_init+0x110>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	785a      	ldrb	r2, [r3, #1]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006c84:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <low_level_init+0x110>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	789a      	ldrb	r2, [r3, #2]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006c90:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <low_level_init+0x110>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	78da      	ldrb	r2, [r3, #3]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006c9c:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <low_level_init+0x110>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	791a      	ldrb	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ca8:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <low_level_init+0x110>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	795a      	ldrb	r2, [r3, #5]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006cba:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006cc2:	f043 030a 	orr.w	r3, r3, #10
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006cce:	4910      	ldr	r1, [pc, #64]	; (8006d10 <low_level_init+0x128>)
 8006cd0:	4810      	ldr	r0, [pc, #64]	; (8006d14 <low_level_init+0x12c>)
 8006cd2:	f7fa fdf2 	bl	80018ba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006cd6:	480f      	ldr	r0, [pc, #60]	; (8006d14 <low_level_init+0x12c>)
 8006cd8:	f7fa fe21 	bl	800191e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d103      	bne.n	8006cea <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fa32 	bl	800714c <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8006ce8:	e001      	b.n	8006cee <low_level_init+0x106>
    Error_Handler();
 8006cea:	f7fa fb03 	bl	80012f4 <Error_Handler>
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20004f98 	.word	0x20004f98
 8006cfc:	40028000 	.word	0x40028000
 8006d00:	20000294 	.word	0x20000294
 8006d04:	200001f4 	.word	0x200001f4
 8006d08:	20005048 	.word	0x20005048
 8006d0c:	080167d8 	.word	0x080167d8
 8006d10:	2000000c 	.word	0x2000000c
 8006d14:	20005080 	.word	0x20005080

08006d18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b092      	sub	sp, #72	; 0x48
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	2230      	movs	r2, #48	; 0x30
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f00b f8be 	bl	8011eba <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006d3e:	f107 030c 	add.w	r3, r7, #12
 8006d42:	2230      	movs	r2, #48	; 0x30
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f00b f8b7 	bl	8011eba <memset>

  for(q = p; q != NULL; q = q->next)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d50:	e045      	b.n	8006dde <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d902      	bls.n	8006d5e <low_level_output+0x46>
      return ERR_IF;
 8006d58:	f06f 030b 	mvn.w	r3, #11
 8006d5c:	e055      	b.n	8006e0a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d60:	6859      	ldr	r1, [r3, #4]
 8006d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	3348      	adds	r3, #72	; 0x48
 8006d6e:	443b      	add	r3, r7
 8006d70:	3b3c      	subs	r3, #60	; 0x3c
 8006d72:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d76:	895b      	ldrh	r3, [r3, #10]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3348      	adds	r3, #72	; 0x48
 8006d86:	443b      	add	r3, r7
 8006d88:	3b38      	subs	r3, #56	; 0x38
 8006d8a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d011      	beq.n	8006db6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d94:	1e5a      	subs	r2, r3, #1
 8006d96:	f107 000c 	add.w	r0, r7, #12
 8006d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	440b      	add	r3, r1
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	18c1      	adds	r1, r0, r3
 8006da6:	4613      	mov	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	3348      	adds	r3, #72	; 0x48
 8006db0:	443b      	add	r3, r7
 8006db2:	3b34      	subs	r3, #52	; 0x34
 8006db4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	3348      	adds	r3, #72	; 0x48
 8006dca:	443b      	add	r3, r7
 8006dcc:	3b34      	subs	r3, #52	; 0x34
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1b6      	bne.n	8006d52 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	891b      	ldrh	r3, [r3, #8]
 8006de8:	461a      	mov	r2, r3
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <low_level_output+0xfc>)
 8006dec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <low_level_output+0xfc>)
 8006df0:	f107 030c 	add.w	r3, r7, #12
 8006df4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <low_level_output+0xfc>)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006dfc:	2214      	movs	r2, #20
 8006dfe:	4905      	ldr	r1, [pc, #20]	; (8006e14 <low_level_output+0xfc>)
 8006e00:	4805      	ldr	r0, [pc, #20]	; (8006e18 <low_level_output+0x100>)
 8006e02:	f7fb f9c7 	bl	8002194 <HAL_ETH_Transmit>

  return errval;
 8006e06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3748      	adds	r7, #72	; 0x48
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20005048 	.word	0x20005048
 8006e18:	20004f98 	.word	0x20004f98

08006e1c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006e28:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <low_level_input+0x2c>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006e30:	f107 030c 	add.w	r3, r7, #12
 8006e34:	4619      	mov	r1, r3
 8006e36:	4805      	ldr	r0, [pc, #20]	; (8006e4c <low_level_input+0x30>)
 8006e38:	f7fb fa40 	bl	80022bc <HAL_ETH_ReadData>
  }

  return p;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20004f94 	.word	0x20004f94
 8006e4c:	20004f98 	.word	0x20004f98

08006e50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ffdd 	bl	8006e1c <low_level_input>
 8006e62:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	4798      	blx	r3
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f001 fdc2 	bl	8008a04 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1ea      	bne.n	8006e5c <ethernetif_input+0xc>
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <ethernetif_init+0x1c>
 8006e9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <ethernetif_init+0x48>)
 8006ea0:	f240 127b 	movw	r2, #379	; 0x17b
 8006ea4:	490d      	ldr	r1, [pc, #52]	; (8006edc <ethernetif_init+0x4c>)
 8006ea6:	480e      	ldr	r0, [pc, #56]	; (8006ee0 <ethernetif_init+0x50>)
 8006ea8:	f00a ffa2 	bl	8011df0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2273      	movs	r2, #115	; 0x73
 8006eb0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2274      	movs	r2, #116	; 0x74
 8006eb8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <ethernetif_init+0x54>)
 8006ec0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <ethernetif_init+0x58>)
 8006ec6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff fe8d 	bl	8006be8 <low_level_init>

  return ERR_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	08013ddc 	.word	0x08013ddc
 8006edc:	08013df8 	.word	0x08013df8
 8006ee0:	08013e08 	.word	0x08013e08
 8006ee4:	0800f345 	.word	0x0800f345
 8006ee8:	08006d19 	.word	0x08006d19

08006eec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006ef8:	68f9      	ldr	r1, [r7, #12]
 8006efa:	4807      	ldr	r0, [pc, #28]	; (8006f18 <pbuf_free_custom+0x2c>)
 8006efc:	f000 fee8 	bl	8007cd0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006f00:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <pbuf_free_custom+0x30>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d102      	bne.n	8006f0e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <pbuf_free_custom+0x30>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
  }
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	080167d8 	.word	0x080167d8
 8006f1c:	20004f94 	.word	0x20004f94

08006f20 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006f24:	f7fa fe2a 	bl	8001b7c <HAL_GetTick>
 8006f28:	4603      	mov	r3, r0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	; 0x38
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	60da      	str	r2, [r3, #12]
 8006f46:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a52      	ldr	r2, [pc, #328]	; (8007098 <HAL_ETH_MspInit+0x168>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	f040 809e 	bne.w	8007090 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006f54:	4b51      	ldr	r3, [pc, #324]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	4a50      	ldr	r2, [pc, #320]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f60:	4b4e      	ldr	r3, [pc, #312]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f68:	623b      	str	r3, [r7, #32]
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	4b4b      	ldr	r3, [pc, #300]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	4a4a      	ldr	r2, [pc, #296]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f76:	6313      	str	r3, [r2, #48]	; 0x30
 8006f78:	4b48      	ldr	r3, [pc, #288]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4b45      	ldr	r3, [pc, #276]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	4a44      	ldr	r2, [pc, #272]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f90:	4b42      	ldr	r3, [pc, #264]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f9c:	4b3f      	ldr	r3, [pc, #252]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	4a3e      	ldr	r2, [pc, #248]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fa2:	f043 0304 	orr.w	r3, r3, #4
 8006fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8006fa8:	4b3c      	ldr	r3, [pc, #240]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fb4:	4b39      	ldr	r3, [pc, #228]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	4a38      	ldr	r2, [pc, #224]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8006fc0:	4b36      	ldr	r3, [pc, #216]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fcc:	4b33      	ldr	r3, [pc, #204]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	4a32      	ldr	r2, [pc, #200]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fd2:	f043 0302 	orr.w	r3, r3, #2
 8006fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd8:	4b30      	ldr	r3, [pc, #192]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006fe4:	4b2d      	ldr	r3, [pc, #180]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	4a2c      	ldr	r2, [pc, #176]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fee:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff0:	4b2a      	ldr	r3, [pc, #168]	; (800709c <HAL_ETH_MspInit+0x16c>)
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006ffc:	2332      	movs	r3, #50	; 0x32
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007000:	2302      	movs	r3, #2
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007004:	2300      	movs	r3, #0
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007008:	2303      	movs	r3, #3
 800700a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800700c:	230b      	movs	r3, #11
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007014:	4619      	mov	r1, r3
 8007016:	4822      	ldr	r0, [pc, #136]	; (80070a0 <HAL_ETH_MspInit+0x170>)
 8007018:	f7fc f980 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800701c:	2386      	movs	r3, #134	; 0x86
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007020:	2302      	movs	r3, #2
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007024:	2300      	movs	r3, #0
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007028:	2303      	movs	r3, #3
 800702a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800702c:	230b      	movs	r3, #11
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007034:	4619      	mov	r1, r3
 8007036:	481b      	ldr	r0, [pc, #108]	; (80070a4 <HAL_ETH_MspInit+0x174>)
 8007038:	f7fc f970 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800703c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007042:	2302      	movs	r3, #2
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007046:	2300      	movs	r3, #0
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800704a:	2303      	movs	r3, #3
 800704c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800704e:	230b      	movs	r3, #11
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007056:	4619      	mov	r1, r3
 8007058:	4813      	ldr	r0, [pc, #76]	; (80070a8 <HAL_ETH_MspInit+0x178>)
 800705a:	f7fc f95f 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800705e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007064:	2302      	movs	r3, #2
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007068:	2300      	movs	r3, #0
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800706c:	2303      	movs	r3, #3
 800706e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007070:	230b      	movs	r3, #11
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007078:	4619      	mov	r1, r3
 800707a:	480c      	ldr	r0, [pc, #48]	; (80070ac <HAL_ETH_MspInit+0x17c>)
 800707c:	f7fc f94e 	bl	800331c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007080:	2200      	movs	r2, #0
 8007082:	2100      	movs	r1, #0
 8007084:	203d      	movs	r0, #61	; 0x3d
 8007086:	f7fa fe84 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800708a:	203d      	movs	r0, #61	; 0x3d
 800708c:	f7fa fe9d 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007090:	bf00      	nop
 8007092:	3738      	adds	r7, #56	; 0x38
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40028000 	.word	0x40028000
 800709c:	40023800 	.word	0x40023800
 80070a0:	40020800 	.word	0x40020800
 80070a4:	40020000 	.word	0x40020000
 80070a8:	40020400 	.word	0x40020400
 80070ac:	40021800 	.word	0x40021800

080070b0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80070b4:	4802      	ldr	r0, [pc, #8]	; (80070c0 <ETH_PHY_IO_Init+0x10>)
 80070b6:	f7fb fccf 	bl	8002a58 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20004f98 	.word	0x20004f98

080070c4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  return 0;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	4807      	ldr	r0, [pc, #28]	; (8007104 <ETH_PHY_IO_ReadReg+0x30>)
 80070e8:	f7fb fb10 	bl	800270c <HAL_ETH_ReadPHYRegister>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f6:	e000      	b.n	80070fa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20004f98 	.word	0x20004f98

08007108 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	68f9      	ldr	r1, [r7, #12]
 800711a:	4807      	ldr	r0, [pc, #28]	; (8007138 <ETH_PHY_IO_WriteReg+0x30>)
 800711c:	f7fb fb41 	bl	80027a2 <HAL_ETH_WritePHYRegister>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800712a:	e000      	b.n	800712e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20004f98 	.word	0x20004f98

0800713c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007140:	f7fa fd1c 	bl	8001b7c <HAL_GetTick>
 8007144:	4603      	mov	r3, r0
}
 8007146:	4618      	mov	r0, r3
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b0a0      	sub	sp, #128	; 0x80
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007154:	f107 030c 	add.w	r3, r7, #12
 8007158:	2264      	movs	r2, #100	; 0x64
 800715a:	2100      	movs	r1, #0
 800715c:	4618      	mov	r0, r3
 800715e:	f00a feac 	bl	8011eba <memset>
  int32_t PHYLinkState = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	67fb      	str	r3, [r7, #124]	; 0x7c
 800716a:	2300      	movs	r3, #0
 800716c:	67bb      	str	r3, [r7, #120]	; 0x78
 800716e:	2300      	movs	r3, #0
 8007170:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007172:	483a      	ldr	r0, [pc, #232]	; (800725c <ethernet_link_check_state+0x110>)
 8007174:	f7fa fc20 	bl	80019b8 <LAN8742_GetLinkState>
 8007178:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007180:	089b      	lsrs	r3, r3, #2
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00c      	beq.n	80071a6 <ethernet_link_check_state+0x5a>
 800718c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800718e:	2b01      	cmp	r3, #1
 8007190:	dc09      	bgt.n	80071a6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007192:	4833      	ldr	r0, [pc, #204]	; (8007260 <ethernet_link_check_state+0x114>)
 8007194:	f7fa ffa5 	bl	80020e2 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 f81d 	bl	80081d8 <netif_set_down>
    netif_set_link_down(netif);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 f880 	bl	80082a4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80071a4:	e055      	b.n	8007252 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d14e      	bne.n	8007252 <ethernet_link_check_state+0x106>
 80071b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	dd4b      	ble.n	8007252 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80071ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071bc:	3b02      	subs	r3, #2
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d82a      	bhi.n	8007218 <ethernet_link_check_state+0xcc>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <ethernet_link_check_state+0x7c>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071eb 	.word	0x080071eb
 80071d0:	080071fb 	.word	0x080071fb
 80071d4:	0800720b 	.word	0x0800720b
      duplex = ETH_FULLDUPLEX_MODE;
 80071d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80071de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80071e4:	2301      	movs	r3, #1
 80071e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80071e8:	e017      	b.n	800721a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80071ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80071f4:	2301      	movs	r3, #1
 80071f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80071f8:	e00f      	b.n	800721a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80071fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071fe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007200:	2300      	movs	r3, #0
 8007202:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007204:	2301      	movs	r3, #1
 8007206:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007208:	e007      	b.n	800721a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800720a:	2300      	movs	r3, #0
 800720c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800720e:	2300      	movs	r3, #0
 8007210:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007212:	2301      	movs	r3, #1
 8007214:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007216:	e000      	b.n	800721a <ethernet_link_check_state+0xce>
      break;
 8007218:	bf00      	nop
    if(linkchanged)
 800721a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d018      	beq.n	8007252 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007220:	f107 030c 	add.w	r3, r7, #12
 8007224:	4619      	mov	r1, r3
 8007226:	480e      	ldr	r0, [pc, #56]	; (8007260 <ethernet_link_check_state+0x114>)
 8007228:	f7fb fb04 	bl	8002834 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800722c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007232:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007234:	f107 030c 	add.w	r3, r7, #12
 8007238:	4619      	mov	r1, r3
 800723a:	4809      	ldr	r0, [pc, #36]	; (8007260 <ethernet_link_check_state+0x114>)
 800723c:	f7fb fbf1 	bl	8002a22 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007240:	4807      	ldr	r0, [pc, #28]	; (8007260 <ethernet_link_check_state+0x114>)
 8007242:	f7fa feef 	bl	8002024 <HAL_ETH_Start>
      netif_set_up(netif);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 ff5a 	bl	8008100 <netif_set_up>
      netif_set_link_up(netif);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fff5 	bl	800823c <netif_set_link_up>
}
 8007252:	bf00      	nop
 8007254:	3780      	adds	r7, #128	; 0x80
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20005080 	.word	0x20005080
 8007260:	20004f98 	.word	0x20004f98

08007264 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af02      	add	r7, sp, #8
 800726a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800726c:	4812      	ldr	r0, [pc, #72]	; (80072b8 <HAL_ETH_RxAllocateCallback+0x54>)
 800726e:	f000 fcc1 	bl	8007bf4 <memp_malloc_pool>
 8007272:	60f8      	str	r0, [r7, #12]
  if (p)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d014      	beq.n	80072a4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f103 0220 	add.w	r2, r3, #32
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a0d      	ldr	r2, [pc, #52]	; (80072bc <HAL_ETH_RxAllocateCallback+0x58>)
 8007288:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007292:	9201      	str	r2, [sp, #4]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2241      	movs	r2, #65	; 0x41
 800729a:	2100      	movs	r1, #0
 800729c:	2000      	movs	r0, #0
 800729e:	f001 f9f7 	bl	8008690 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80072a2:	e005      	b.n	80072b0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80072a4:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	080167d8 	.word	0x080167d8
 80072bc:	08006eed 	.word	0x08006eed
 80072c0:	20004f94 	.word	0x20004f94

080072c4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3b20      	subs	r3, #32
 80072e2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	2200      	movs	r2, #0
 80072ee:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	887a      	ldrh	r2, [r7, #2]
 80072f4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d103      	bne.n	8007306 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e003      	b.n	800730e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	e009      	b.n	8007330 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	891a      	ldrh	r2, [r3, #8]
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	4413      	add	r3, r2
 8007324:	b29a      	uxth	r2, r3
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f2      	bne.n	800731c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007336:	887b      	ldrh	r3, [r7, #2]
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fc28 	bl	8006b90 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007340:	bf00      	nop
 8007342:	3720      	adds	r7, #32
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	b21a      	sxth	r2, r3
 8007358:	88fb      	ldrh	r3, [r7, #6]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	b29b      	uxth	r3, r3
 800735e:	b21b      	sxth	r3, r3
 8007360:	4313      	orrs	r3, r2
 8007362:	b21b      	sxth	r3, r3
 8007364:	b29b      	uxth	r3, r3
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	061a      	lsls	r2, r3, #24
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	0a1b      	lsrs	r3, r3, #8
 800738c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	0e1b      	lsrs	r3, r3, #24
 8007396:	4313      	orrs	r3, r2
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80073ae:	f000 f8d5 	bl	800755c <mem_init>
  memp_init();
 80073b2:	f000 fbdb 	bl	8007b6c <memp_init>
  pbuf_init();
  netif_init();
 80073b6:	f000 fcd9 	bl	8007d6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80073ba:	f007 f857 	bl	800e46c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80073be:	f001 fdaf 	bl	8008f20 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80073c2:	f006 ffc9 	bl	800e358 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <ptr_to_mem+0x20>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	4413      	add	r3, r2
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	200078cc 	.word	0x200078cc

080073f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <mem_to_ptr+0x20>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	b29b      	uxth	r3, r3
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	200078cc 	.word	0x200078cc

08007418 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007420:	4b45      	ldr	r3, [pc, #276]	; (8007538 <plug_holes+0x120>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	429a      	cmp	r2, r3
 8007428:	d206      	bcs.n	8007438 <plug_holes+0x20>
 800742a:	4b44      	ldr	r3, [pc, #272]	; (800753c <plug_holes+0x124>)
 800742c:	f240 12df 	movw	r2, #479	; 0x1df
 8007430:	4943      	ldr	r1, [pc, #268]	; (8007540 <plug_holes+0x128>)
 8007432:	4844      	ldr	r0, [pc, #272]	; (8007544 <plug_holes+0x12c>)
 8007434:	f00a fcdc 	bl	8011df0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007438:	4b43      	ldr	r3, [pc, #268]	; (8007548 <plug_holes+0x130>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d306      	bcc.n	8007450 <plug_holes+0x38>
 8007442:	4b3e      	ldr	r3, [pc, #248]	; (800753c <plug_holes+0x124>)
 8007444:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007448:	4940      	ldr	r1, [pc, #256]	; (800754c <plug_holes+0x134>)
 800744a:	483e      	ldr	r0, [pc, #248]	; (8007544 <plug_holes+0x12c>)
 800744c:	f00a fcd0 	bl	8011df0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	791b      	ldrb	r3, [r3, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <plug_holes+0x4e>
 8007458:	4b38      	ldr	r3, [pc, #224]	; (800753c <plug_holes+0x124>)
 800745a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800745e:	493c      	ldr	r1, [pc, #240]	; (8007550 <plug_holes+0x138>)
 8007460:	4838      	ldr	r0, [pc, #224]	; (8007544 <plug_holes+0x12c>)
 8007462:	f00a fcc5 	bl	8011df0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800746e:	d906      	bls.n	800747e <plug_holes+0x66>
 8007470:	4b32      	ldr	r3, [pc, #200]	; (800753c <plug_holes+0x124>)
 8007472:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007476:	4937      	ldr	r1, [pc, #220]	; (8007554 <plug_holes+0x13c>)
 8007478:	4832      	ldr	r0, [pc, #200]	; (8007544 <plug_holes+0x12c>)
 800747a:	f00a fcb9 	bl	8011df0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff ffa4 	bl	80073d0 <ptr_to_mem>
 8007488:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	429a      	cmp	r2, r3
 8007490:	d024      	beq.n	80074dc <plug_holes+0xc4>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	791b      	ldrb	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d120      	bne.n	80074dc <plug_holes+0xc4>
 800749a:	4b2b      	ldr	r3, [pc, #172]	; (8007548 <plug_holes+0x130>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d01b      	beq.n	80074dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80074a4:	4b2c      	ldr	r3, [pc, #176]	; (8007558 <plug_holes+0x140>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d102      	bne.n	80074b4 <plug_holes+0x9c>
      lfree = mem;
 80074ae:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <plug_holes+0x140>)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	881a      	ldrh	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80074c4:	d00a      	beq.n	80074dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff ff80 	bl	80073d0 <ptr_to_mem>
 80074d0:	4604      	mov	r4, r0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff ff8e 	bl	80073f4 <mem_to_ptr>
 80074d8:	4603      	mov	r3, r0
 80074da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	885b      	ldrh	r3, [r3, #2]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff75 	bl	80073d0 <ptr_to_mem>
 80074e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d01f      	beq.n	8007530 <plug_holes+0x118>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	791b      	ldrb	r3, [r3, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11b      	bne.n	8007530 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80074f8:	4b17      	ldr	r3, [pc, #92]	; (8007558 <plug_holes+0x140>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d102      	bne.n	8007508 <plug_holes+0xf0>
      lfree = pmem;
 8007502:	4a15      	ldr	r2, [pc, #84]	; (8007558 <plug_holes+0x140>)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	881a      	ldrh	r2, [r3, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007518:	d00a      	beq.n	8007530 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ff56 	bl	80073d0 <ptr_to_mem>
 8007524:	4604      	mov	r4, r0
 8007526:	68b8      	ldr	r0, [r7, #8]
 8007528:	f7ff ff64 	bl	80073f4 <mem_to_ptr>
 800752c:	4603      	mov	r3, r0
 800752e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	bd90      	pop	{r4, r7, pc}
 8007538:	200078cc 	.word	0x200078cc
 800753c:	08013e30 	.word	0x08013e30
 8007540:	08013e60 	.word	0x08013e60
 8007544:	08013e78 	.word	0x08013e78
 8007548:	200078d0 	.word	0x200078d0
 800754c:	08013ea0 	.word	0x08013ea0
 8007550:	08013ebc 	.word	0x08013ebc
 8007554:	08013ed8 	.word	0x08013ed8
 8007558:	200078d4 	.word	0x200078d4

0800755c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007562:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <mem_init+0x68>)
 8007564:	3303      	adds	r3, #3
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	461a      	mov	r2, r3
 800756c:	4b16      	ldr	r3, [pc, #88]	; (80075c8 <mem_init+0x6c>)
 800756e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007570:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <mem_init+0x6c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800757c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800758a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800758e:	f7ff ff1f 	bl	80073d0 <ptr_to_mem>
 8007592:	4603      	mov	r3, r0
 8007594:	4a0d      	ldr	r2, [pc, #52]	; (80075cc <mem_init+0x70>)
 8007596:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <mem_init+0x70>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2201      	movs	r2, #1
 800759e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <mem_init+0x70>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80075a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80075aa:	4b08      	ldr	r3, [pc, #32]	; (80075cc <mem_init+0x70>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80075b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80075b4:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <mem_init+0x6c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a05      	ldr	r2, [pc, #20]	; (80075d0 <mem_init+0x74>)
 80075ba:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	200050b8 	.word	0x200050b8
 80075c8:	200078cc 	.word	0x200078cc
 80075cc:	200078d0 	.word	0x200078d0
 80075d0:	200078d4 	.word	0x200078d4

080075d4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff09 	bl	80073f4 <mem_to_ptr>
 80075e2:	4603      	mov	r3, r0
 80075e4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fef0 	bl	80073d0 <ptr_to_mem>
 80075f0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff feea 	bl	80073d0 <ptr_to_mem>
 80075fc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007606:	d818      	bhi.n	800763a <mem_link_valid+0x66>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	885b      	ldrh	r3, [r3, #2]
 800760c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007610:	d813      	bhi.n	800763a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007616:	8afa      	ldrh	r2, [r7, #22]
 8007618:	429a      	cmp	r2, r3
 800761a:	d004      	beq.n	8007626 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	8afa      	ldrh	r2, [r7, #22]
 8007622:	429a      	cmp	r2, r3
 8007624:	d109      	bne.n	800763a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <mem_link_valid+0x74>)
 8007628:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	d006      	beq.n	800763e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	8afa      	ldrh	r2, [r7, #22]
 8007636:	429a      	cmp	r2, r3
 8007638:	d001      	beq.n	800763e <mem_link_valid+0x6a>
    return 0;
 800763a:	2300      	movs	r3, #0
 800763c:	e000      	b.n	8007640 <mem_link_valid+0x6c>
  }
  return 1;
 800763e:	2301      	movs	r3, #1
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	200078d0 	.word	0x200078d0

0800764c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d04c      	beq.n	80076f4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007664:	4b25      	ldr	r3, [pc, #148]	; (80076fc <mem_free+0xb0>)
 8007666:	f240 2273 	movw	r2, #627	; 0x273
 800766a:	4925      	ldr	r1, [pc, #148]	; (8007700 <mem_free+0xb4>)
 800766c:	4825      	ldr	r0, [pc, #148]	; (8007704 <mem_free+0xb8>)
 800766e:	f00a fbbf 	bl	8011df0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007672:	e040      	b.n	80076f6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3b08      	subs	r3, #8
 8007678:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800767a:	4b23      	ldr	r3, [pc, #140]	; (8007708 <mem_free+0xbc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	429a      	cmp	r2, r3
 8007682:	d306      	bcc.n	8007692 <mem_free+0x46>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f103 020c 	add.w	r2, r3, #12
 800768a:	4b20      	ldr	r3, [pc, #128]	; (800770c <mem_free+0xc0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d907      	bls.n	80076a2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007692:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <mem_free+0xb0>)
 8007694:	f240 227f 	movw	r2, #639	; 0x27f
 8007698:	491d      	ldr	r1, [pc, #116]	; (8007710 <mem_free+0xc4>)
 800769a:	481a      	ldr	r0, [pc, #104]	; (8007704 <mem_free+0xb8>)
 800769c:	f00a fba8 	bl	8011df0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80076a0:	e029      	b.n	80076f6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	791b      	ldrb	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d107      	bne.n	80076ba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <mem_free+0xb0>)
 80076ac:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80076b0:	4918      	ldr	r1, [pc, #96]	; (8007714 <mem_free+0xc8>)
 80076b2:	4814      	ldr	r0, [pc, #80]	; (8007704 <mem_free+0xb8>)
 80076b4:	f00a fb9c 	bl	8011df0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80076b8:	e01d      	b.n	80076f6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff ff8a 	bl	80075d4 <mem_link_valid>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d107      	bne.n	80076d6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80076c6:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <mem_free+0xb0>)
 80076c8:	f240 2295 	movw	r2, #661	; 0x295
 80076cc:	4912      	ldr	r1, [pc, #72]	; (8007718 <mem_free+0xcc>)
 80076ce:	480d      	ldr	r0, [pc, #52]	; (8007704 <mem_free+0xb8>)
 80076d0:	f00a fb8e 	bl	8011df0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80076d4:	e00f      	b.n	80076f6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <mem_free+0xd0>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d202      	bcs.n	80076ec <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80076e6:	4a0d      	ldr	r2, [pc, #52]	; (800771c <mem_free+0xd0>)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fe93 	bl	8007418 <plug_holes>
 80076f2:	e000      	b.n	80076f6 <mem_free+0xaa>
    return;
 80076f4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	08013e30 	.word	0x08013e30
 8007700:	08013f04 	.word	0x08013f04
 8007704:	08013e78 	.word	0x08013e78
 8007708:	200078cc 	.word	0x200078cc
 800770c:	200078d0 	.word	0x200078d0
 8007710:	08013f28 	.word	0x08013f28
 8007714:	08013f44 	.word	0x08013f44
 8007718:	08013f6c 	.word	0x08013f6c
 800771c:	200078d4 	.word	0x200078d4

08007720 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	3303      	adds	r3, #3
 8007730:	b29b      	uxth	r3, r3
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007738:	8bfb      	ldrh	r3, [r7, #30]
 800773a:	2b0b      	cmp	r3, #11
 800773c:	d801      	bhi.n	8007742 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800773e:	230c      	movs	r3, #12
 8007740:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007742:	8bfb      	ldrh	r3, [r7, #30]
 8007744:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007748:	d803      	bhi.n	8007752 <mem_trim+0x32>
 800774a:	8bfa      	ldrh	r2, [r7, #30]
 800774c:	887b      	ldrh	r3, [r7, #2]
 800774e:	429a      	cmp	r2, r3
 8007750:	d201      	bcs.n	8007756 <mem_trim+0x36>
    return NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	e0cc      	b.n	80078f0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007756:	4b68      	ldr	r3, [pc, #416]	; (80078f8 <mem_trim+0x1d8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d304      	bcc.n	800776a <mem_trim+0x4a>
 8007760:	4b66      	ldr	r3, [pc, #408]	; (80078fc <mem_trim+0x1dc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	429a      	cmp	r2, r3
 8007768:	d306      	bcc.n	8007778 <mem_trim+0x58>
 800776a:	4b65      	ldr	r3, [pc, #404]	; (8007900 <mem_trim+0x1e0>)
 800776c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007770:	4964      	ldr	r1, [pc, #400]	; (8007904 <mem_trim+0x1e4>)
 8007772:	4865      	ldr	r0, [pc, #404]	; (8007908 <mem_trim+0x1e8>)
 8007774:	f00a fb3c 	bl	8011df0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007778:	4b5f      	ldr	r3, [pc, #380]	; (80078f8 <mem_trim+0x1d8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	429a      	cmp	r2, r3
 8007780:	d304      	bcc.n	800778c <mem_trim+0x6c>
 8007782:	4b5e      	ldr	r3, [pc, #376]	; (80078fc <mem_trim+0x1dc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d301      	bcc.n	8007790 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	e0af      	b.n	80078f0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3b08      	subs	r3, #8
 8007794:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007796:	69b8      	ldr	r0, [r7, #24]
 8007798:	f7ff fe2c 	bl	80073f4 <mem_to_ptr>
 800779c:	4603      	mov	r3, r0
 800779e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	8afb      	ldrh	r3, [r7, #22]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b08      	subs	r3, #8
 80077ac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80077ae:	8bfa      	ldrh	r2, [r7, #30]
 80077b0:	8abb      	ldrh	r3, [r7, #20]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d906      	bls.n	80077c4 <mem_trim+0xa4>
 80077b6:	4b52      	ldr	r3, [pc, #328]	; (8007900 <mem_trim+0x1e0>)
 80077b8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80077bc:	4953      	ldr	r1, [pc, #332]	; (800790c <mem_trim+0x1ec>)
 80077be:	4852      	ldr	r0, [pc, #328]	; (8007908 <mem_trim+0x1e8>)
 80077c0:	f00a fb16 	bl	8011df0 <iprintf>
  if (newsize > size) {
 80077c4:	8bfa      	ldrh	r2, [r7, #30]
 80077c6:	8abb      	ldrh	r3, [r7, #20]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d901      	bls.n	80077d0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e08f      	b.n	80078f0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80077d0:	8bfa      	ldrh	r2, [r7, #30]
 80077d2:	8abb      	ldrh	r3, [r7, #20]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d101      	bne.n	80077dc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	e089      	b.n	80078f0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fdf5 	bl	80073d0 <ptr_to_mem>
 80077e6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	791b      	ldrb	r3, [r3, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d13f      	bne.n	8007870 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80077f8:	d106      	bne.n	8007808 <mem_trim+0xe8>
 80077fa:	4b41      	ldr	r3, [pc, #260]	; (8007900 <mem_trim+0x1e0>)
 80077fc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007800:	4943      	ldr	r1, [pc, #268]	; (8007910 <mem_trim+0x1f0>)
 8007802:	4841      	ldr	r0, [pc, #260]	; (8007908 <mem_trim+0x1e8>)
 8007804:	f00a faf4 	bl	8011df0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800780e:	8afa      	ldrh	r2, [r7, #22]
 8007810:	8bfb      	ldrh	r3, [r7, #30]
 8007812:	4413      	add	r3, r2
 8007814:	b29b      	uxth	r3, r3
 8007816:	3308      	adds	r3, #8
 8007818:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800781a:	4b3e      	ldr	r3, [pc, #248]	; (8007914 <mem_trim+0x1f4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d106      	bne.n	8007832 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007824:	89fb      	ldrh	r3, [r7, #14]
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff fdd2 	bl	80073d0 <ptr_to_mem>
 800782c:	4603      	mov	r3, r0
 800782e:	4a39      	ldr	r2, [pc, #228]	; (8007914 <mem_trim+0x1f4>)
 8007830:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007832:	89fb      	ldrh	r3, [r7, #14]
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff fdcb 	bl	80073d0 <ptr_to_mem>
 800783a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2200      	movs	r2, #0
 8007840:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	89ba      	ldrh	r2, [r7, #12]
 8007846:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	8afa      	ldrh	r2, [r7, #22]
 800784c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	89fa      	ldrh	r2, [r7, #14]
 8007852:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800785c:	d047      	beq.n	80078ee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fdb4 	bl	80073d0 <ptr_to_mem>
 8007868:	4602      	mov	r2, r0
 800786a:	89fb      	ldrh	r3, [r7, #14]
 800786c:	8053      	strh	r3, [r2, #2]
 800786e:	e03e      	b.n	80078ee <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007870:	8bfb      	ldrh	r3, [r7, #30]
 8007872:	f103 0214 	add.w	r2, r3, #20
 8007876:	8abb      	ldrh	r3, [r7, #20]
 8007878:	429a      	cmp	r2, r3
 800787a:	d838      	bhi.n	80078ee <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800787c:	8afa      	ldrh	r2, [r7, #22]
 800787e:	8bfb      	ldrh	r3, [r7, #30]
 8007880:	4413      	add	r3, r2
 8007882:	b29b      	uxth	r3, r3
 8007884:	3308      	adds	r3, #8
 8007886:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007890:	d106      	bne.n	80078a0 <mem_trim+0x180>
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <mem_trim+0x1e0>)
 8007894:	f240 3216 	movw	r2, #790	; 0x316
 8007898:	491d      	ldr	r1, [pc, #116]	; (8007910 <mem_trim+0x1f0>)
 800789a:	481b      	ldr	r0, [pc, #108]	; (8007908 <mem_trim+0x1e8>)
 800789c:	f00a faa8 	bl	8011df0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80078a0:	89fb      	ldrh	r3, [r7, #14]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fd94 	bl	80073d0 <ptr_to_mem>
 80078a8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80078aa:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <mem_trim+0x1f4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d202      	bcs.n	80078ba <mem_trim+0x19a>
      lfree = mem2;
 80078b4:	4a17      	ldr	r2, [pc, #92]	; (8007914 <mem_trim+0x1f4>)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2200      	movs	r2, #0
 80078be:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	881a      	ldrh	r2, [r3, #0]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	8afa      	ldrh	r2, [r7, #22]
 80078cc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	89fa      	ldrh	r2, [r7, #14]
 80078d2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80078dc:	d007      	beq.n	80078ee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff fd74 	bl	80073d0 <ptr_to_mem>
 80078e8:	4602      	mov	r2, r0
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80078ee:	687b      	ldr	r3, [r7, #4]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	200078cc 	.word	0x200078cc
 80078fc:	200078d0 	.word	0x200078d0
 8007900:	08013e30 	.word	0x08013e30
 8007904:	08013fa0 	.word	0x08013fa0
 8007908:	08013e78 	.word	0x08013e78
 800790c:	08013fb8 	.word	0x08013fb8
 8007910:	08013fd8 	.word	0x08013fd8
 8007914:	200078d4 	.word	0x200078d4

08007918 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <mem_malloc+0x14>
    return NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	e0d9      	b.n	8007ae0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	3303      	adds	r3, #3
 8007930:	b29b      	uxth	r3, r3
 8007932:	f023 0303 	bic.w	r3, r3, #3
 8007936:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007938:	8bbb      	ldrh	r3, [r7, #28]
 800793a:	2b0b      	cmp	r3, #11
 800793c:	d801      	bhi.n	8007942 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800793e:	230c      	movs	r3, #12
 8007940:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007942:	8bbb      	ldrh	r3, [r7, #28]
 8007944:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007948:	d803      	bhi.n	8007952 <mem_malloc+0x3a>
 800794a:	8bba      	ldrh	r2, [r7, #28]
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	429a      	cmp	r2, r3
 8007950:	d201      	bcs.n	8007956 <mem_malloc+0x3e>
    return NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	e0c4      	b.n	8007ae0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007956:	4b64      	ldr	r3, [pc, #400]	; (8007ae8 <mem_malloc+0x1d0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fd4a 	bl	80073f4 <mem_to_ptr>
 8007960:	4603      	mov	r3, r0
 8007962:	83fb      	strh	r3, [r7, #30]
 8007964:	e0b4      	b.n	8007ad0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007966:	8bfb      	ldrh	r3, [r7, #30]
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fd31 	bl	80073d0 <ptr_to_mem>
 800796e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	791b      	ldrb	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f040 80a4 	bne.w	8007ac2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	8bfb      	ldrh	r3, [r7, #30]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	f1a3 0208 	sub.w	r2, r3, #8
 8007988:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800798a:	429a      	cmp	r2, r3
 800798c:	f0c0 8099 	bcc.w	8007ac2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	8bfb      	ldrh	r3, [r7, #30]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	f1a3 0208 	sub.w	r2, r3, #8
 800799e:	8bbb      	ldrh	r3, [r7, #28]
 80079a0:	3314      	adds	r3, #20
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d333      	bcc.n	8007a0e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80079a6:	8bfa      	ldrh	r2, [r7, #30]
 80079a8:	8bbb      	ldrh	r3, [r7, #28]
 80079aa:	4413      	add	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3308      	adds	r3, #8
 80079b0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80079b2:	8a7b      	ldrh	r3, [r7, #18]
 80079b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80079b8:	d106      	bne.n	80079c8 <mem_malloc+0xb0>
 80079ba:	4b4c      	ldr	r3, [pc, #304]	; (8007aec <mem_malloc+0x1d4>)
 80079bc:	f240 3287 	movw	r2, #903	; 0x387
 80079c0:	494b      	ldr	r1, [pc, #300]	; (8007af0 <mem_malloc+0x1d8>)
 80079c2:	484c      	ldr	r0, [pc, #304]	; (8007af4 <mem_malloc+0x1dc>)
 80079c4:	f00a fa14 	bl	8011df0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80079c8:	8a7b      	ldrh	r3, [r7, #18]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff fd00 	bl	80073d0 <ptr_to_mem>
 80079d0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	881a      	ldrh	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8bfa      	ldrh	r2, [r7, #30]
 80079e4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	8a7a      	ldrh	r2, [r7, #18]
 80079ea:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2201      	movs	r2, #1
 80079f0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80079fa:	d00b      	beq.n	8007a14 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff fce5 	bl	80073d0 <ptr_to_mem>
 8007a06:	4602      	mov	r2, r0
 8007a08:	8a7b      	ldrh	r3, [r7, #18]
 8007a0a:	8053      	strh	r3, [r2, #2]
 8007a0c:	e002      	b.n	8007a14 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2201      	movs	r2, #1
 8007a12:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007a14:	4b34      	ldr	r3, [pc, #208]	; (8007ae8 <mem_malloc+0x1d0>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d127      	bne.n	8007a6e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007a1e:	4b32      	ldr	r3, [pc, #200]	; (8007ae8 <mem_malloc+0x1d0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007a24:	e005      	b.n	8007a32 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff fcd0 	bl	80073d0 <ptr_to_mem>
 8007a30:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	791b      	ldrb	r3, [r3, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <mem_malloc+0x12c>
 8007a3a:	4b2f      	ldr	r3, [pc, #188]	; (8007af8 <mem_malloc+0x1e0>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d1f0      	bne.n	8007a26 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007a44:	4a28      	ldr	r2, [pc, #160]	; (8007ae8 <mem_malloc+0x1d0>)
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007a4a:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <mem_malloc+0x1d0>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b2a      	ldr	r3, [pc, #168]	; (8007af8 <mem_malloc+0x1e0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d00b      	beq.n	8007a6e <mem_malloc+0x156>
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <mem_malloc+0x1d0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	791b      	ldrb	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d006      	beq.n	8007a6e <mem_malloc+0x156>
 8007a60:	4b22      	ldr	r3, [pc, #136]	; (8007aec <mem_malloc+0x1d4>)
 8007a62:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007a66:	4925      	ldr	r1, [pc, #148]	; (8007afc <mem_malloc+0x1e4>)
 8007a68:	4822      	ldr	r0, [pc, #136]	; (8007af4 <mem_malloc+0x1dc>)
 8007a6a:	f00a f9c1 	bl	8011df0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007a6e:	8bba      	ldrh	r2, [r7, #28]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	4413      	add	r3, r2
 8007a74:	3308      	adds	r3, #8
 8007a76:	4a20      	ldr	r2, [pc, #128]	; (8007af8 <mem_malloc+0x1e0>)
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d906      	bls.n	8007a8c <mem_malloc+0x174>
 8007a7e:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <mem_malloc+0x1d4>)
 8007a80:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007a84:	491e      	ldr	r1, [pc, #120]	; (8007b00 <mem_malloc+0x1e8>)
 8007a86:	481b      	ldr	r0, [pc, #108]	; (8007af4 <mem_malloc+0x1dc>)
 8007a88:	f00a f9b2 	bl	8011df0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d006      	beq.n	8007aa4 <mem_malloc+0x18c>
 8007a96:	4b15      	ldr	r3, [pc, #84]	; (8007aec <mem_malloc+0x1d4>)
 8007a98:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007a9c:	4919      	ldr	r1, [pc, #100]	; (8007b04 <mem_malloc+0x1ec>)
 8007a9e:	4815      	ldr	r0, [pc, #84]	; (8007af4 <mem_malloc+0x1dc>)
 8007aa0:	f00a f9a6 	bl	8011df0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d006      	beq.n	8007abc <mem_malloc+0x1a4>
 8007aae:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <mem_malloc+0x1d4>)
 8007ab0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007ab4:	4914      	ldr	r1, [pc, #80]	; (8007b08 <mem_malloc+0x1f0>)
 8007ab6:	480f      	ldr	r0, [pc, #60]	; (8007af4 <mem_malloc+0x1dc>)
 8007ab8:	f00a f99a 	bl	8011df0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	e00e      	b.n	8007ae0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007ac2:	8bfb      	ldrh	r3, [r7, #30]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff fc83 	bl	80073d0 <ptr_to_mem>
 8007aca:	4603      	mov	r3, r0
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007ad0:	8bfa      	ldrh	r2, [r7, #30]
 8007ad2:	8bbb      	ldrh	r3, [r7, #28]
 8007ad4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	f4ff af44 	bcc.w	8007966 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	200078d4 	.word	0x200078d4
 8007aec:	08013e30 	.word	0x08013e30
 8007af0:	08013fd8 	.word	0x08013fd8
 8007af4:	08013e78 	.word	0x08013e78
 8007af8:	200078d0 	.word	0x200078d0
 8007afc:	08013fec 	.word	0x08013fec
 8007b00:	08014008 	.word	0x08014008
 8007b04:	08014038 	.word	0x08014038
 8007b08:	08014068 	.word	0x08014068

08007b0c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	3303      	adds	r3, #3
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	e011      	b.n	8007b52 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4413      	add	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	461a      	mov	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	dbe7      	blt.n	8007b2e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007b5e:	bf00      	nop
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007b72:	2300      	movs	r3, #0
 8007b74:	80fb      	strh	r3, [r7, #6]
 8007b76:	e009      	b.n	8007b8c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	4a08      	ldr	r2, [pc, #32]	; (8007b9c <memp_init+0x30>)
 8007b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff ffc3 	bl	8007b0c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007b86:	88fb      	ldrh	r3, [r7, #6]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	80fb      	strh	r3, [r7, #6]
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d9f2      	bls.n	8007b78 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	08016850 	.word	0x08016850

08007ba0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d012      	beq.n	8007bdc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d006      	beq.n	8007bd8 <do_memp_malloc_pool+0x38>
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <do_memp_malloc_pool+0x48>)
 8007bcc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007bd0:	4906      	ldr	r1, [pc, #24]	; (8007bec <do_memp_malloc_pool+0x4c>)
 8007bd2:	4807      	ldr	r0, [pc, #28]	; (8007bf0 <do_memp_malloc_pool+0x50>)
 8007bd4:	f00a f90c 	bl	8011df0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	e000      	b.n	8007bde <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	0801408c 	.word	0x0801408c
 8007bec:	080140bc 	.word	0x080140bc
 8007bf0:	080140e0 	.word	0x080140e0

08007bf4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <memp_malloc_pool+0x1c>
 8007c02:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <memp_malloc_pool+0x38>)
 8007c04:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007c08:	4909      	ldr	r1, [pc, #36]	; (8007c30 <memp_malloc_pool+0x3c>)
 8007c0a:	480a      	ldr	r0, [pc, #40]	; (8007c34 <memp_malloc_pool+0x40>)
 8007c0c:	f00a f8f0 	bl	8011df0 <iprintf>
  if (desc == NULL) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <memp_malloc_pool+0x26>
    return NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e003      	b.n	8007c22 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff ffc0 	bl	8007ba0 <do_memp_malloc_pool>
 8007c20:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	0801408c 	.word	0x0801408c
 8007c30:	08014108 	.word	0x08014108
 8007c34:	080140e0 	.word	0x080140e0

08007c38 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d908      	bls.n	8007c5a <memp_malloc+0x22>
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <memp_malloc+0x3c>)
 8007c4a:	f240 1257 	movw	r2, #343	; 0x157
 8007c4e:	490a      	ldr	r1, [pc, #40]	; (8007c78 <memp_malloc+0x40>)
 8007c50:	480a      	ldr	r0, [pc, #40]	; (8007c7c <memp_malloc+0x44>)
 8007c52:	f00a f8cd 	bl	8011df0 <iprintf>
 8007c56:	2300      	movs	r3, #0
 8007c58:	e008      	b.n	8007c6c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	4a08      	ldr	r2, [pc, #32]	; (8007c80 <memp_malloc+0x48>)
 8007c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff ff9c 	bl	8007ba0 <do_memp_malloc_pool>
 8007c68:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	0801408c 	.word	0x0801408c
 8007c78:	0801411c 	.word	0x0801411c
 8007c7c:	080140e0 	.word	0x080140e0
 8007c80:	08016850 	.word	0x08016850

08007c84 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <do_memp_free_pool+0x22>
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <do_memp_free_pool+0x40>)
 8007c9a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007c9e:	490a      	ldr	r1, [pc, #40]	; (8007cc8 <do_memp_free_pool+0x44>)
 8007ca0:	480a      	ldr	r0, [pc, #40]	; (8007ccc <do_memp_free_pool+0x48>)
 8007ca2:	f00a f8a5 	bl	8011df0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	0801408c 	.word	0x0801408c
 8007cc8:	0801413c 	.word	0x0801413c
 8007ccc:	080140e0 	.word	0x080140e0

08007cd0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <memp_free_pool+0x1e>
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <memp_free_pool+0x3c>)
 8007ce2:	f240 1295 	movw	r2, #405	; 0x195
 8007ce6:	490a      	ldr	r1, [pc, #40]	; (8007d10 <memp_free_pool+0x40>)
 8007ce8:	480a      	ldr	r0, [pc, #40]	; (8007d14 <memp_free_pool+0x44>)
 8007cea:	f00a f881 	bl	8011df0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <memp_free_pool+0x34>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff ffc1 	bl	8007c84 <do_memp_free_pool>
 8007d02:	e000      	b.n	8007d06 <memp_free_pool+0x36>
    return;
 8007d04:	bf00      	nop
}
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	0801408c 	.word	0x0801408c
 8007d10:	08014108 	.word	0x08014108
 8007d14:	080140e0 	.word	0x080140e0

08007d18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	6039      	str	r1, [r7, #0]
 8007d22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d907      	bls.n	8007d3a <memp_free+0x22>
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <memp_free+0x44>)
 8007d2c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007d30:	490b      	ldr	r1, [pc, #44]	; (8007d60 <memp_free+0x48>)
 8007d32:	480c      	ldr	r0, [pc, #48]	; (8007d64 <memp_free+0x4c>)
 8007d34:	f00a f85c 	bl	8011df0 <iprintf>
 8007d38:	e00c      	b.n	8007d54 <memp_free+0x3c>

  if (mem == NULL) {
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	4a09      	ldr	r2, [pc, #36]	; (8007d68 <memp_free+0x50>)
 8007d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff ff9a 	bl	8007c84 <do_memp_free_pool>
 8007d50:	e000      	b.n	8007d54 <memp_free+0x3c>
    return;
 8007d52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	0801408c 	.word	0x0801408c
 8007d60:	0801415c 	.word	0x0801415c
 8007d64:	080140e0 	.word	0x080140e0
 8007d68:	08016850 	.word	0x08016850

08007d6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007d70:	bf00      	nop
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
	...

08007d7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d108      	bne.n	8007da2 <netif_add+0x26>
 8007d90:	4b57      	ldr	r3, [pc, #348]	; (8007ef0 <netif_add+0x174>)
 8007d92:	f240 1227 	movw	r2, #295	; 0x127
 8007d96:	4957      	ldr	r1, [pc, #348]	; (8007ef4 <netif_add+0x178>)
 8007d98:	4857      	ldr	r0, [pc, #348]	; (8007ef8 <netif_add+0x17c>)
 8007d9a:	f00a f829 	bl	8011df0 <iprintf>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e0a2      	b.n	8007ee8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d108      	bne.n	8007dba <netif_add+0x3e>
 8007da8:	4b51      	ldr	r3, [pc, #324]	; (8007ef0 <netif_add+0x174>)
 8007daa:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007dae:	4953      	ldr	r1, [pc, #332]	; (8007efc <netif_add+0x180>)
 8007db0:	4851      	ldr	r0, [pc, #324]	; (8007ef8 <netif_add+0x17c>)
 8007db2:	f00a f81d 	bl	8011df0 <iprintf>
 8007db6:	2300      	movs	r3, #0
 8007db8:	e096      	b.n	8007ee8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007dc0:	4b4f      	ldr	r3, [pc, #316]	; (8007f00 <netif_add+0x184>)
 8007dc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007dca:	4b4d      	ldr	r3, [pc, #308]	; (8007f00 <netif_add+0x184>)
 8007dcc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007dd4:	4b4a      	ldr	r3, [pc, #296]	; (8007f00 <netif_add+0x184>)
 8007dd6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a45      	ldr	r2, [pc, #276]	; (8007f04 <netif_add+0x188>)
 8007dee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a3a      	ldr	r2, [r7, #32]
 8007e08:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007e0a:	4b3f      	ldr	r3, [pc, #252]	; (8007f08 <netif_add+0x18c>)
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e18:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 f913 	bl	800804c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	4798      	blx	r3
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <netif_add+0xba>
    return NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e058      	b.n	8007ee8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e3c:	2bff      	cmp	r3, #255	; 0xff
 8007e3e:	d103      	bne.n	8007e48 <netif_add+0xcc>
        netif->num = 0;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007e4c:	4b2f      	ldr	r3, [pc, #188]	; (8007f0c <netif_add+0x190>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	e02b      	b.n	8007eac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d106      	bne.n	8007e6a <netif_add+0xee>
 8007e5c:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <netif_add+0x174>)
 8007e5e:	f240 128b 	movw	r2, #395	; 0x18b
 8007e62:	492b      	ldr	r1, [pc, #172]	; (8007f10 <netif_add+0x194>)
 8007e64:	4824      	ldr	r0, [pc, #144]	; (8007ef8 <netif_add+0x17c>)
 8007e66:	f009 ffc3 	bl	8011df0 <iprintf>
        num_netifs++;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2bff      	cmp	r3, #255	; 0xff
 8007e74:	dd06      	ble.n	8007e84 <netif_add+0x108>
 8007e76:	4b1e      	ldr	r3, [pc, #120]	; (8007ef0 <netif_add+0x174>)
 8007e78:	f240 128d 	movw	r2, #397	; 0x18d
 8007e7c:	4925      	ldr	r1, [pc, #148]	; (8007f14 <netif_add+0x198>)
 8007e7e:	481e      	ldr	r0, [pc, #120]	; (8007ef8 <netif_add+0x17c>)
 8007e80:	f009 ffb6 	bl	8011df0 <iprintf>
        if (netif2->num == netif->num) {
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d108      	bne.n	8007ea6 <netif_add+0x12a>
          netif->num++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007ea4:	e005      	b.n	8007eb2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1d0      	bne.n	8007e54 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1be      	bne.n	8007e36 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8007ec0:	d103      	bne.n	8007eca <netif_add+0x14e>
    netif_num = 0;
 8007ec2:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <netif_add+0x18c>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e006      	b.n	8007ed8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <netif_add+0x18c>)
 8007ed6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <netif_add+0x190>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <netif_add+0x190>)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	08014178 	.word	0x08014178
 8007ef4:	0801420c 	.word	0x0801420c
 8007ef8:	080141c8 	.word	0x080141c8
 8007efc:	08014228 	.word	0x08014228
 8007f00:	080168b4 	.word	0x080168b4
 8007f04:	08008327 	.word	0x08008327
 8007f08:	2000a7cc 	.word	0x2000a7cc
 8007f0c:	2000a7c4 	.word	0x2000a7c4
 8007f10:	0801424c 	.word	0x0801424c
 8007f14:	08014260 	.word	0x08014260

08007f18 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f002 fb43 	bl	800a5b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f006 fd8d 	bl	800ea4c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <netif_do_set_ipaddr+0x20>
 8007f4e:	4b1d      	ldr	r3, [pc, #116]	; (8007fc4 <netif_do_set_ipaddr+0x88>)
 8007f50:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007f54:	491c      	ldr	r1, [pc, #112]	; (8007fc8 <netif_do_set_ipaddr+0x8c>)
 8007f56:	481d      	ldr	r0, [pc, #116]	; (8007fcc <netif_do_set_ipaddr+0x90>)
 8007f58:	f009 ff4a 	bl	8011df0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <netif_do_set_ipaddr+0x34>
 8007f62:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <netif_do_set_ipaddr+0x88>)
 8007f64:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007f68:	4917      	ldr	r1, [pc, #92]	; (8007fc8 <netif_do_set_ipaddr+0x8c>)
 8007f6a:	4818      	ldr	r0, [pc, #96]	; (8007fcc <netif_do_set_ipaddr+0x90>)
 8007f6c:	f009 ff40 	bl	8011df0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3304      	adds	r3, #4
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d01c      	beq.n	8007fb8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3304      	adds	r3, #4
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007f8e:	f107 0314 	add.w	r3, r7, #20
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff ffbf 	bl	8007f18 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <netif_do_set_ipaddr+0x6a>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	e000      	b.n	8007fa8 <netif_do_set_ipaddr+0x6c>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007fac:	2101      	movs	r1, #1
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f8d2 	bl	8008158 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	08014178 	.word	0x08014178
 8007fc8:	08014290 	.word	0x08014290
 8007fcc:	080141c8 	.word	0x080141c8

08007fd0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d00a      	beq.n	8008000 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <netif_do_set_netmask+0x26>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	e000      	b.n	8007ff8 <netif_do_set_netmask+0x28>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	330c      	adds	r3, #12
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d00a      	beq.n	800803e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <netif_do_set_gw+0x26>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	e000      	b.n	8008036 <netif_do_set_gw+0x28>
 8008034:	2300      	movs	r3, #0
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008068:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <netif_set_addr+0x90>)
 800806a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008072:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <netif_set_addr+0x90>)
 8008074:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800807c:	4b17      	ldr	r3, [pc, #92]	; (80080dc <netif_set_addr+0x90>)
 800807e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <netif_set_addr+0x42>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <netif_set_addr+0x46>
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <netif_set_addr+0x48>
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d006      	beq.n	80080aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	461a      	mov	r2, r3
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7ff ff49 	bl	8007f3c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff ff8e 	bl	8007fd0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff ffa8 	bl	800800e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	461a      	mov	r2, r3
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7ff ff35 	bl	8007f3c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80080d2:	bf00      	nop
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	080168b4 	.word	0x080168b4

080080e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80080e8:	4a04      	ldr	r2, [pc, #16]	; (80080fc <netif_set_default+0x1c>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	2000a7c8 	.word	0x2000a7c8

08008100 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d107      	bne.n	800811e <netif_set_up+0x1e>
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <netif_set_up+0x4c>)
 8008110:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008114:	490e      	ldr	r1, [pc, #56]	; (8008150 <netif_set_up+0x50>)
 8008116:	480f      	ldr	r0, [pc, #60]	; (8008154 <netif_set_up+0x54>)
 8008118:	f009 fe6a 	bl	8011df0 <iprintf>
 800811c:	e013      	b.n	8008146 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10c      	bne.n	8008146 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	b2da      	uxtb	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800813e:	2103      	movs	r1, #3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f809 	bl	8008158 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	08014178 	.word	0x08014178
 8008150:	08014300 	.word	0x08014300
 8008154:	080141c8 	.word	0x080141c8

08008158 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <netif_issue_reports+0x20>
 800816a:	4b18      	ldr	r3, [pc, #96]	; (80081cc <netif_issue_reports+0x74>)
 800816c:	f240 326d 	movw	r2, #877	; 0x36d
 8008170:	4917      	ldr	r1, [pc, #92]	; (80081d0 <netif_issue_reports+0x78>)
 8008172:	4818      	ldr	r0, [pc, #96]	; (80081d4 <netif_issue_reports+0x7c>)
 8008174:	f009 fe3c 	bl	8011df0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01e      	beq.n	80081c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800818c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008190:	2b00      	cmp	r3, #0
 8008192:	d017      	beq.n	80081c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d013      	beq.n	80081c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3304      	adds	r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f007 fbaf 	bl	800f920 <etharp_request>
 80081c2:	e000      	b.n	80081c6 <netif_issue_reports+0x6e>
    return;
 80081c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	08014178 	.word	0x08014178
 80081d0:	0801431c 	.word	0x0801431c
 80081d4:	080141c8 	.word	0x080141c8

080081d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d107      	bne.n	80081f6 <netif_set_down+0x1e>
 80081e6:	4b12      	ldr	r3, [pc, #72]	; (8008230 <netif_set_down+0x58>)
 80081e8:	f240 329b 	movw	r2, #923	; 0x39b
 80081ec:	4911      	ldr	r1, [pc, #68]	; (8008234 <netif_set_down+0x5c>)
 80081ee:	4812      	ldr	r0, [pc, #72]	; (8008238 <netif_set_down+0x60>)
 80081f0:	f009 fdfe 	bl	8011df0 <iprintf>
 80081f4:	e019      	b.n	800822a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d012      	beq.n	800822a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	b2da      	uxtb	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f006 ff39 	bl	800f09c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	08014178 	.word	0x08014178
 8008234:	08014340 	.word	0x08014340
 8008238:	080141c8 	.word	0x080141c8

0800823c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d107      	bne.n	800825a <netif_set_link_up+0x1e>
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <netif_set_link_up+0x5c>)
 800824c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008250:	4912      	ldr	r1, [pc, #72]	; (800829c <netif_set_link_up+0x60>)
 8008252:	4813      	ldr	r0, [pc, #76]	; (80082a0 <netif_set_link_up+0x64>)
 8008254:	f009 fdcc 	bl	8011df0 <iprintf>
 8008258:	e01b      	b.n	8008292 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d114      	bne.n	8008292 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800826e:	f043 0304 	orr.w	r3, r3, #4
 8008272:	b2da      	uxtb	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800827a:	2103      	movs	r1, #3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff ff6b 	bl	8008158 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <netif_set_link_up+0x56>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	08014178 	.word	0x08014178
 800829c:	08014360 	.word	0x08014360
 80082a0:	080141c8 	.word	0x080141c8

080082a4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d107      	bne.n	80082c2 <netif_set_link_down+0x1e>
 80082b2:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <netif_set_link_down+0x54>)
 80082b4:	f240 4206 	movw	r2, #1030	; 0x406
 80082b8:	4910      	ldr	r1, [pc, #64]	; (80082fc <netif_set_link_down+0x58>)
 80082ba:	4811      	ldr	r0, [pc, #68]	; (8008300 <netif_set_link_down+0x5c>)
 80082bc:	f009 fd98 	bl	8011df0 <iprintf>
 80082c0:	e017      	b.n	80082f2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082d6:	f023 0304 	bic.w	r3, r3, #4
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <netif_set_link_down+0x4e>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	08014178 	.word	0x08014178
 80082fc:	08014384 	.word	0x08014384
 8008300:	080141c8 	.word	0x080141c8

08008304 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	61da      	str	r2, [r3, #28]
  }
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008332:	f06f 030b 	mvn.w	r3, #11
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
	...

08008344 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d013      	beq.n	800837c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008354:	4b0d      	ldr	r3, [pc, #52]	; (800838c <netif_get_by_index+0x48>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e00c      	b.n	8008376 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008362:	3301      	adds	r3, #1
 8008364:	b2db      	uxtb	r3, r3
 8008366:	79fa      	ldrb	r2, [r7, #7]
 8008368:	429a      	cmp	r2, r3
 800836a:	d101      	bne.n	8008370 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	e006      	b.n	800837e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1ef      	bne.n	800835c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2000a7c4 	.word	0x2000a7c4

08008390 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <pbuf_free_ooseq+0x38>)
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <pbuf_free_ooseq+0x3c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	e00a      	b.n	80083ba <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 f93d 	bl	800a62c <tcp_free_ooseq>
      return;
 80083b2:	e005      	b.n	80083c0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	607b      	str	r3, [r7, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1f1      	bne.n	80083a4 <pbuf_free_ooseq+0x14>
    }
  }
}
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	2000a7cd 	.word	0x2000a7cd
 80083cc:	2000a7dc 	.word	0x2000a7dc

080083d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <pbuf_pool_is_empty+0x14>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80083da:	bf00      	nop
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	2000a7cd 	.word	0x2000a7cd

080083e8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4611      	mov	r1, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	460b      	mov	r3, r1
 80083f8:	80fb      	strh	r3, [r7, #6]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	88fa      	ldrh	r2, [r7, #6]
 800840e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	88ba      	ldrh	r2, [r7, #4]
 8008414:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008416:	8b3b      	ldrh	r3, [r7, #24]
 8008418:	b2da      	uxtb	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	7f3a      	ldrb	r2, [r7, #28]
 8008422:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	73da      	strb	r2, [r3, #15]
}
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	; 0x30
 8008440:	af02      	add	r7, sp, #8
 8008442:	4603      	mov	r3, r0
 8008444:	71fb      	strb	r3, [r7, #7]
 8008446:	460b      	mov	r3, r1
 8008448:	80bb      	strh	r3, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008452:	887b      	ldrh	r3, [r7, #2]
 8008454:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008458:	d07f      	beq.n	800855a <pbuf_alloc+0x11e>
 800845a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800845e:	f300 80c8 	bgt.w	80085f2 <pbuf_alloc+0x1b6>
 8008462:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008466:	d010      	beq.n	800848a <pbuf_alloc+0x4e>
 8008468:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800846c:	f300 80c1 	bgt.w	80085f2 <pbuf_alloc+0x1b6>
 8008470:	2b01      	cmp	r3, #1
 8008472:	d002      	beq.n	800847a <pbuf_alloc+0x3e>
 8008474:	2b41      	cmp	r3, #65	; 0x41
 8008476:	f040 80bc 	bne.w	80085f2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800847a:	887a      	ldrh	r2, [r7, #2]
 800847c:	88bb      	ldrh	r3, [r7, #4]
 800847e:	4619      	mov	r1, r3
 8008480:	2000      	movs	r0, #0
 8008482:	f000 f8d1 	bl	8008628 <pbuf_alloc_reference>
 8008486:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008488:	e0bd      	b.n	8008606 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008492:	88bb      	ldrh	r3, [r7, #4]
 8008494:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008496:	2008      	movs	r0, #8
 8008498:	f7ff fbce 	bl	8007c38 <memp_malloc>
 800849c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80084a4:	f7ff ff94 	bl	80083d0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80084ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b0:	f000 faa8 	bl	8008a04 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e0a7      	b.n	8008608 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80084b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084ba:	3303      	adds	r3, #3
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f023 0303 	bic.w	r3, r3, #3
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	8b7a      	ldrh	r2, [r7, #26]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	bf28      	it	cs
 80084d0:	4613      	movcs	r3, r2
 80084d2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80084d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084d6:	3310      	adds	r3, #16
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4413      	add	r3, r2
 80084dc:	3303      	adds	r3, #3
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	4618      	mov	r0, r3
 80084e4:	89f9      	ldrh	r1, [r7, #14]
 80084e6:	8b7a      	ldrh	r2, [r7, #26]
 80084e8:	2300      	movs	r3, #0
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	887b      	ldrh	r3, [r7, #2]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	460b      	mov	r3, r1
 80084f2:	4601      	mov	r1, r0
 80084f4:	6938      	ldr	r0, [r7, #16]
 80084f6:	f7ff ff77 	bl	80083e8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d006      	beq.n	8008514 <pbuf_alloc+0xd8>
 8008506:	4b42      	ldr	r3, [pc, #264]	; (8008610 <pbuf_alloc+0x1d4>)
 8008508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800850c:	4941      	ldr	r1, [pc, #260]	; (8008614 <pbuf_alloc+0x1d8>)
 800850e:	4842      	ldr	r0, [pc, #264]	; (8008618 <pbuf_alloc+0x1dc>)
 8008510:	f009 fc6e 	bl	8011df0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008514:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008516:	3303      	adds	r3, #3
 8008518:	f023 0303 	bic.w	r3, r3, #3
 800851c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008520:	d106      	bne.n	8008530 <pbuf_alloc+0xf4>
 8008522:	4b3b      	ldr	r3, [pc, #236]	; (8008610 <pbuf_alloc+0x1d4>)
 8008524:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008528:	493c      	ldr	r1, [pc, #240]	; (800861c <pbuf_alloc+0x1e0>)
 800852a:	483b      	ldr	r0, [pc, #236]	; (8008618 <pbuf_alloc+0x1dc>)
 800852c:	f009 fc60 	bl	8011df0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
 800853a:	e002      	b.n	8008542 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008546:	8b7a      	ldrh	r2, [r7, #26]
 8008548:	89fb      	ldrh	r3, [r7, #14]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008552:	8b7b      	ldrh	r3, [r7, #26]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d19e      	bne.n	8008496 <pbuf_alloc+0x5a>
      break;
 8008558:	e055      	b.n	8008606 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800855a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800855c:	3303      	adds	r3, #3
 800855e:	b29b      	uxth	r3, r3
 8008560:	f023 0303 	bic.w	r3, r3, #3
 8008564:	b29a      	uxth	r2, r3
 8008566:	88bb      	ldrh	r3, [r7, #4]
 8008568:	3303      	adds	r3, #3
 800856a:	b29b      	uxth	r3, r3
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	b29b      	uxth	r3, r3
 8008572:	4413      	add	r3, r2
 8008574:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008576:	8b3b      	ldrh	r3, [r7, #24]
 8008578:	3310      	adds	r3, #16
 800857a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800857c:	8b3a      	ldrh	r2, [r7, #24]
 800857e:	88bb      	ldrh	r3, [r7, #4]
 8008580:	3303      	adds	r3, #3
 8008582:	f023 0303 	bic.w	r3, r3, #3
 8008586:	429a      	cmp	r2, r3
 8008588:	d306      	bcc.n	8008598 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800858a:	8afa      	ldrh	r2, [r7, #22]
 800858c:	88bb      	ldrh	r3, [r7, #4]
 800858e:	3303      	adds	r3, #3
 8008590:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008594:	429a      	cmp	r2, r3
 8008596:	d201      	bcs.n	800859c <pbuf_alloc+0x160>
        return NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	e035      	b.n	8008608 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800859c:	8afb      	ldrh	r3, [r7, #22]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff f9ba 	bl	8007918 <mem_malloc>
 80085a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <pbuf_alloc+0x174>
        return NULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e02b      	b.n	8008608 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80085b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085b2:	3310      	adds	r3, #16
 80085b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b6:	4413      	add	r3, r2
 80085b8:	3303      	adds	r3, #3
 80085ba:	f023 0303 	bic.w	r3, r3, #3
 80085be:	4618      	mov	r0, r3
 80085c0:	88b9      	ldrh	r1, [r7, #4]
 80085c2:	88ba      	ldrh	r2, [r7, #4]
 80085c4:	2300      	movs	r3, #0
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	887b      	ldrh	r3, [r7, #2]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	460b      	mov	r3, r1
 80085ce:	4601      	mov	r1, r0
 80085d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085d2:	f7ff ff09 	bl	80083e8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d010      	beq.n	8008604 <pbuf_alloc+0x1c8>
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <pbuf_alloc+0x1d4>)
 80085e4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80085e8:	490d      	ldr	r1, [pc, #52]	; (8008620 <pbuf_alloc+0x1e4>)
 80085ea:	480b      	ldr	r0, [pc, #44]	; (8008618 <pbuf_alloc+0x1dc>)
 80085ec:	f009 fc00 	bl	8011df0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80085f0:	e008      	b.n	8008604 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <pbuf_alloc+0x1d4>)
 80085f4:	f240 1227 	movw	r2, #295	; 0x127
 80085f8:	490a      	ldr	r1, [pc, #40]	; (8008624 <pbuf_alloc+0x1e8>)
 80085fa:	4807      	ldr	r0, [pc, #28]	; (8008618 <pbuf_alloc+0x1dc>)
 80085fc:	f009 fbf8 	bl	8011df0 <iprintf>
      return NULL;
 8008600:	2300      	movs	r3, #0
 8008602:	e001      	b.n	8008608 <pbuf_alloc+0x1cc>
      break;
 8008604:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008608:	4618      	mov	r0, r3
 800860a:	3728      	adds	r7, #40	; 0x28
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	080143a8 	.word	0x080143a8
 8008614:	080143d8 	.word	0x080143d8
 8008618:	08014408 	.word	0x08014408
 800861c:	08014430 	.word	0x08014430
 8008620:	08014464 	.word	0x08014464
 8008624:	08014490 	.word	0x08014490

08008628 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af02      	add	r7, sp, #8
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
 8008634:	4613      	mov	r3, r2
 8008636:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008638:	883b      	ldrh	r3, [r7, #0]
 800863a:	2b41      	cmp	r3, #65	; 0x41
 800863c:	d009      	beq.n	8008652 <pbuf_alloc_reference+0x2a>
 800863e:	883b      	ldrh	r3, [r7, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d006      	beq.n	8008652 <pbuf_alloc_reference+0x2a>
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <pbuf_alloc_reference+0x5c>)
 8008646:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800864a:	490f      	ldr	r1, [pc, #60]	; (8008688 <pbuf_alloc_reference+0x60>)
 800864c:	480f      	ldr	r0, [pc, #60]	; (800868c <pbuf_alloc_reference+0x64>)
 800864e:	f009 fbcf 	bl	8011df0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008652:	2007      	movs	r0, #7
 8008654:	f7ff faf0 	bl	8007c38 <memp_malloc>
 8008658:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	e00b      	b.n	800867c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008664:	8879      	ldrh	r1, [r7, #2]
 8008666:	887a      	ldrh	r2, [r7, #2]
 8008668:	2300      	movs	r3, #0
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	883b      	ldrh	r3, [r7, #0]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	460b      	mov	r3, r1
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff feb7 	bl	80083e8 <pbuf_init_alloced_pbuf>
  return p;
 800867a:	68fb      	ldr	r3, [r7, #12]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	080143a8 	.word	0x080143a8
 8008688:	080144ac 	.word	0x080144ac
 800868c:	08014408 	.word	0x08014408

08008690 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	607b      	str	r3, [r7, #4]
 8008698:	4603      	mov	r3, r0
 800869a:	73fb      	strb	r3, [r7, #15]
 800869c:	460b      	mov	r3, r1
 800869e:	81bb      	strh	r3, [r7, #12]
 80086a0:	4613      	mov	r3, r2
 80086a2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80086a8:	8a7b      	ldrh	r3, [r7, #18]
 80086aa:	3303      	adds	r3, #3
 80086ac:	f023 0203 	bic.w	r2, r3, #3
 80086b0:	89bb      	ldrh	r3, [r7, #12]
 80086b2:	441a      	add	r2, r3
 80086b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d901      	bls.n	80086be <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e018      	b.n	80086f0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d007      	beq.n	80086d4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80086c4:	8a7b      	ldrh	r3, [r7, #18]
 80086c6:	3303      	adds	r3, #3
 80086c8:	f023 0303 	bic.w	r3, r3, #3
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	4413      	add	r3, r2
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	e001      	b.n	80086d8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	89b9      	ldrh	r1, [r7, #12]
 80086dc:	89ba      	ldrh	r2, [r7, #12]
 80086de:	2302      	movs	r3, #2
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	897b      	ldrh	r3, [r7, #10]
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	460b      	mov	r3, r1
 80086e8:	6979      	ldr	r1, [r7, #20]
 80086ea:	f7ff fe7d 	bl	80083e8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80086ee:	687b      	ldr	r3, [r7, #4]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <pbuf_realloc+0x20>
 800870a:	4b3a      	ldr	r3, [pc, #232]	; (80087f4 <pbuf_realloc+0xfc>)
 800870c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008710:	4939      	ldr	r1, [pc, #228]	; (80087f8 <pbuf_realloc+0x100>)
 8008712:	483a      	ldr	r0, [pc, #232]	; (80087fc <pbuf_realloc+0x104>)
 8008714:	f009 fb6c 	bl	8011df0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	891b      	ldrh	r3, [r3, #8]
 800871c:	887a      	ldrh	r2, [r7, #2]
 800871e:	429a      	cmp	r2, r3
 8008720:	d263      	bcs.n	80087ea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	891a      	ldrh	r2, [r3, #8]
 8008726:	887b      	ldrh	r3, [r7, #2]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800872c:	887b      	ldrh	r3, [r7, #2]
 800872e:	817b      	strh	r3, [r7, #10]
  q = p;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008734:	e018      	b.n	8008768 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	895b      	ldrh	r3, [r3, #10]
 800873a:	897a      	ldrh	r2, [r7, #10]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	891a      	ldrh	r2, [r3, #8]
 8008744:	893b      	ldrh	r3, [r7, #8]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d106      	bne.n	8008768 <pbuf_realloc+0x70>
 800875a:	4b26      	ldr	r3, [pc, #152]	; (80087f4 <pbuf_realloc+0xfc>)
 800875c:	f240 12af 	movw	r2, #431	; 0x1af
 8008760:	4927      	ldr	r1, [pc, #156]	; (8008800 <pbuf_realloc+0x108>)
 8008762:	4826      	ldr	r0, [pc, #152]	; (80087fc <pbuf_realloc+0x104>)
 8008764:	f009 fb44 	bl	8011df0 <iprintf>
  while (rem_len > q->len) {
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	895b      	ldrh	r3, [r3, #10]
 800876c:	897a      	ldrh	r2, [r7, #10]
 800876e:	429a      	cmp	r2, r3
 8008770:	d8e1      	bhi.n	8008736 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	7b1b      	ldrb	r3, [r3, #12]
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	2b00      	cmp	r3, #0
 800877c:	d121      	bne.n	80087c2 <pbuf_realloc+0xca>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	895b      	ldrh	r3, [r3, #10]
 8008782:	897a      	ldrh	r2, [r7, #10]
 8008784:	429a      	cmp	r2, r3
 8008786:	d01c      	beq.n	80087c2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	7b5b      	ldrb	r3, [r3, #13]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d116      	bne.n	80087c2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	b29a      	uxth	r2, r3
 800879e:	897b      	ldrh	r3, [r7, #10]
 80087a0:	4413      	add	r3, r2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	4619      	mov	r1, r3
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7fe ffba 	bl	8007720 <mem_trim>
 80087ac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d106      	bne.n	80087c2 <pbuf_realloc+0xca>
 80087b4:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <pbuf_realloc+0xfc>)
 80087b6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80087ba:	4912      	ldr	r1, [pc, #72]	; (8008804 <pbuf_realloc+0x10c>)
 80087bc:	480f      	ldr	r0, [pc, #60]	; (80087fc <pbuf_realloc+0x104>)
 80087be:	f009 fb17 	bl	8011df0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	897a      	ldrh	r2, [r7, #10]
 80087c6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	895a      	ldrh	r2, [r3, #10]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f911 	bl	8008a04 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	e000      	b.n	80087ec <pbuf_realloc+0xf4>
    return;
 80087ea:	bf00      	nop

}
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	080143a8 	.word	0x080143a8
 80087f8:	080144c0 	.word	0x080144c0
 80087fc:	08014408 	.word	0x08014408
 8008800:	080144d8 	.word	0x080144d8
 8008804:	080144f0 	.word	0x080144f0

08008808 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <pbuf_add_header_impl+0x22>
 800881c:	4b2b      	ldr	r3, [pc, #172]	; (80088cc <pbuf_add_header_impl+0xc4>)
 800881e:	f240 12df 	movw	r2, #479	; 0x1df
 8008822:	492b      	ldr	r1, [pc, #172]	; (80088d0 <pbuf_add_header_impl+0xc8>)
 8008824:	482b      	ldr	r0, [pc, #172]	; (80088d4 <pbuf_add_header_impl+0xcc>)
 8008826:	f009 fae3 	bl	8011df0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <pbuf_add_header_impl+0x30>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008836:	d301      	bcc.n	800883c <pbuf_add_header_impl+0x34>
    return 1;
 8008838:	2301      	movs	r3, #1
 800883a:	e043      	b.n	80088c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <pbuf_add_header_impl+0x3e>
    return 0;
 8008842:	2300      	movs	r3, #0
 8008844:	e03e      	b.n	80088c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	891a      	ldrh	r2, [r3, #8]
 800884e:	8a7b      	ldrh	r3, [r7, #18]
 8008850:	4413      	add	r3, r2
 8008852:	b29b      	uxth	r3, r3
 8008854:	8a7a      	ldrh	r2, [r7, #18]
 8008856:	429a      	cmp	r2, r3
 8008858:	d901      	bls.n	800885e <pbuf_add_header_impl+0x56>
    return 1;
 800885a:	2301      	movs	r3, #1
 800885c:	e032      	b.n	80088c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	7b1b      	ldrb	r3, [r3, #12]
 8008862:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008864:	8a3b      	ldrh	r3, [r7, #16]
 8008866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00c      	beq.n	8008888 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	425b      	negs	r3, r3
 8008876:	4413      	add	r3, r2
 8008878:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3310      	adds	r3, #16
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	429a      	cmp	r2, r3
 8008882:	d20d      	bcs.n	80088a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008884:	2301      	movs	r3, #1
 8008886:	e01d      	b.n	80088c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	425b      	negs	r3, r3
 8008896:	4413      	add	r3, r2
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	e001      	b.n	80088a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800889c:	2301      	movs	r3, #1
 800889e:	e011      	b.n	80088c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	895a      	ldrh	r2, [r3, #10]
 80088aa:	8a7b      	ldrh	r3, [r7, #18]
 80088ac:	4413      	add	r3, r2
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	891a      	ldrh	r2, [r3, #8]
 80088b8:	8a7b      	ldrh	r3, [r7, #18]
 80088ba:	4413      	add	r3, r2
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	811a      	strh	r2, [r3, #8]


  return 0;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	080143a8 	.word	0x080143a8
 80088d0:	0801450c 	.word	0x0801450c
 80088d4:	08014408 	.word	0x08014408

080088d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80088e2:	2200      	movs	r2, #0
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff ff8e 	bl	8008808 <pbuf_add_header_impl>
 80088ec:	4603      	mov	r3, r0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <pbuf_remove_header+0x1e>
 8008908:	4b20      	ldr	r3, [pc, #128]	; (800898c <pbuf_remove_header+0x94>)
 800890a:	f240 224b 	movw	r2, #587	; 0x24b
 800890e:	4920      	ldr	r1, [pc, #128]	; (8008990 <pbuf_remove_header+0x98>)
 8008910:	4820      	ldr	r0, [pc, #128]	; (8008994 <pbuf_remove_header+0x9c>)
 8008912:	f009 fa6d 	bl	8011df0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <pbuf_remove_header+0x2c>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008922:	d301      	bcc.n	8008928 <pbuf_remove_header+0x30>
    return 1;
 8008924:	2301      	movs	r3, #1
 8008926:	e02c      	b.n	8008982 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <pbuf_remove_header+0x3a>
    return 0;
 800892e:	2300      	movs	r3, #0
 8008930:	e027      	b.n	8008982 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	895b      	ldrh	r3, [r3, #10]
 800893a:	89fa      	ldrh	r2, [r7, #14]
 800893c:	429a      	cmp	r2, r3
 800893e:	d908      	bls.n	8008952 <pbuf_remove_header+0x5a>
 8008940:	4b12      	ldr	r3, [pc, #72]	; (800898c <pbuf_remove_header+0x94>)
 8008942:	f240 2255 	movw	r2, #597	; 0x255
 8008946:	4914      	ldr	r1, [pc, #80]	; (8008998 <pbuf_remove_header+0xa0>)
 8008948:	4812      	ldr	r0, [pc, #72]	; (8008994 <pbuf_remove_header+0x9c>)
 800894a:	f009 fa51 	bl	8011df0 <iprintf>
 800894e:	2301      	movs	r3, #1
 8008950:	e017      	b.n	8008982 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	441a      	add	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	895a      	ldrh	r2, [r3, #10]
 8008968:	89fb      	ldrh	r3, [r7, #14]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	b29a      	uxth	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	891a      	ldrh	r2, [r3, #8]
 8008976:	89fb      	ldrh	r3, [r7, #14]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	b29a      	uxth	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	080143a8 	.word	0x080143a8
 8008990:	0801450c 	.word	0x0801450c
 8008994:	08014408 	.word	0x08014408
 8008998:	08014518 	.word	0x08014518

0800899c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
 80089a8:	4613      	mov	r3, r2
 80089aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80089ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	da08      	bge.n	80089c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80089b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089b8:	425b      	negs	r3, r3
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff ff9b 	bl	80088f8 <pbuf_remove_header>
 80089c2:	4603      	mov	r3, r0
 80089c4:	e007      	b.n	80089d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80089c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089ca:	787a      	ldrb	r2, [r7, #1]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff ff1a 	bl	8008808 <pbuf_add_header_impl>
 80089d4:	4603      	mov	r3, r0
  }
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80089ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089ee:	2201      	movs	r2, #1
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff ffd2 	bl	800899c <pbuf_header_impl>
 80089f8:	4603      	mov	r3, r0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10b      	bne.n	8008a2a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <pbuf_free+0x22>
 8008a18:	4b38      	ldr	r3, [pc, #224]	; (8008afc <pbuf_free+0xf8>)
 8008a1a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008a1e:	4938      	ldr	r1, [pc, #224]	; (8008b00 <pbuf_free+0xfc>)
 8008a20:	4838      	ldr	r0, [pc, #224]	; (8008b04 <pbuf_free+0x100>)
 8008a22:	f009 f9e5 	bl	8011df0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e063      	b.n	8008af2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008a2e:	e05c      	b.n	8008aea <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	7b9b      	ldrb	r3, [r3, #14]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d106      	bne.n	8008a46 <pbuf_free+0x42>
 8008a38:	4b30      	ldr	r3, [pc, #192]	; (8008afc <pbuf_free+0xf8>)
 8008a3a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008a3e:	4932      	ldr	r1, [pc, #200]	; (8008b08 <pbuf_free+0x104>)
 8008a40:	4830      	ldr	r0, [pc, #192]	; (8008b04 <pbuf_free+0x100>)
 8008a42:	f009 f9d5 	bl	8011df0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7b9b      	ldrb	r3, [r3, #14]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	739a      	strb	r2, [r3, #14]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7b9b      	ldrb	r3, [r3, #14]
 8008a56:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008a58:	7dbb      	ldrb	r3, [r7, #22]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d143      	bne.n	8008ae6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7b1b      	ldrb	r3, [r3, #12]
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7b5b      	ldrb	r3, [r3, #13]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d011      	beq.n	8008a9e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <pbuf_free+0x90>
 8008a86:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <pbuf_free+0xf8>)
 8008a88:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008a8c:	491f      	ldr	r1, [pc, #124]	; (8008b0c <pbuf_free+0x108>)
 8008a8e:	481d      	ldr	r0, [pc, #116]	; (8008b04 <pbuf_free+0x100>)
 8008a90:	f009 f9ae 	bl	8011df0 <iprintf>
        pc->custom_free_function(p);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
 8008a9c:	e01d      	b.n	8008ada <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d104      	bne.n	8008aae <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	2008      	movs	r0, #8
 8008aa8:	f7ff f936 	bl	8007d18 <memp_free>
 8008aac:	e015      	b.n	8008ada <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d104      	bne.n	8008abe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	2007      	movs	r0, #7
 8008ab8:	f7ff f92e 	bl	8007d18 <memp_free>
 8008abc:	e00d      	b.n	8008ada <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d103      	bne.n	8008acc <pbuf_free+0xc8>
          mem_free(p);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fe fdc1 	bl	800764c <mem_free>
 8008aca:	e006      	b.n	8008ada <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <pbuf_free+0xf8>)
 8008ace:	f240 320f 	movw	r2, #783	; 0x30f
 8008ad2:	490f      	ldr	r1, [pc, #60]	; (8008b10 <pbuf_free+0x10c>)
 8008ad4:	480b      	ldr	r0, [pc, #44]	; (8008b04 <pbuf_free+0x100>)
 8008ad6:	f009 f98b 	bl	8011df0 <iprintf>
        }
      }
      count++;
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	3301      	adds	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	e001      	b.n	8008aea <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d19f      	bne.n	8008a30 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	080143a8 	.word	0x080143a8
 8008b00:	0801450c 	.word	0x0801450c
 8008b04:	08014408 	.word	0x08014408
 8008b08:	08014538 	.word	0x08014538
 8008b0c:	08014550 	.word	0x08014550
 8008b10:	08014574 	.word	0x08014574

08008b14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008b20:	e005      	b.n	8008b2e <pbuf_clen+0x1a>
    ++len;
 8008b22:	89fb      	ldrh	r3, [r7, #14]
 8008b24:	3301      	adds	r3, #1
 8008b26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1f6      	bne.n	8008b22 <pbuf_clen+0xe>
  }
  return len;
 8008b34:	89fb      	ldrh	r3, [r7, #14]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
	...

08008b44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d010      	beq.n	8008b74 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7b9b      	ldrb	r3, [r3, #14]
 8008b56:	3301      	adds	r3, #1
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7b9b      	ldrb	r3, [r3, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <pbuf_ref+0x30>
 8008b66:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <pbuf_ref+0x38>)
 8008b68:	f240 3242 	movw	r2, #834	; 0x342
 8008b6c:	4904      	ldr	r1, [pc, #16]	; (8008b80 <pbuf_ref+0x3c>)
 8008b6e:	4805      	ldr	r0, [pc, #20]	; (8008b84 <pbuf_ref+0x40>)
 8008b70:	f009 f93e 	bl	8011df0 <iprintf>
  }
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	080143a8 	.word	0x080143a8
 8008b80:	08014588 	.word	0x08014588
 8008b84:	08014408 	.word	0x08014408

08008b88 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <pbuf_cat+0x16>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d107      	bne.n	8008bae <pbuf_cat+0x26>
 8008b9e:	4b20      	ldr	r3, [pc, #128]	; (8008c20 <pbuf_cat+0x98>)
 8008ba0:	f240 3259 	movw	r2, #857	; 0x359
 8008ba4:	491f      	ldr	r1, [pc, #124]	; (8008c24 <pbuf_cat+0x9c>)
 8008ba6:	4820      	ldr	r0, [pc, #128]	; (8008c28 <pbuf_cat+0xa0>)
 8008ba8:	f009 f922 	bl	8011df0 <iprintf>
 8008bac:	e034      	b.n	8008c18 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e00a      	b.n	8008bca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	891a      	ldrh	r2, [r3, #8]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	891b      	ldrh	r3, [r3, #8]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f0      	bne.n	8008bb4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	891a      	ldrh	r2, [r3, #8]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	895b      	ldrh	r3, [r3, #10]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d006      	beq.n	8008bec <pbuf_cat+0x64>
 8008bde:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <pbuf_cat+0x98>)
 8008be0:	f240 3262 	movw	r2, #866	; 0x362
 8008be4:	4911      	ldr	r1, [pc, #68]	; (8008c2c <pbuf_cat+0xa4>)
 8008be6:	4810      	ldr	r0, [pc, #64]	; (8008c28 <pbuf_cat+0xa0>)
 8008be8:	f009 f902 	bl	8011df0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d006      	beq.n	8008c02 <pbuf_cat+0x7a>
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	; (8008c20 <pbuf_cat+0x98>)
 8008bf6:	f240 3263 	movw	r2, #867	; 0x363
 8008bfa:	490d      	ldr	r1, [pc, #52]	; (8008c30 <pbuf_cat+0xa8>)
 8008bfc:	480a      	ldr	r0, [pc, #40]	; (8008c28 <pbuf_cat+0xa0>)
 8008bfe:	f009 f8f7 	bl	8011df0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	891a      	ldrh	r2, [r3, #8]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	891b      	ldrh	r3, [r3, #8]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	080143a8 	.word	0x080143a8
 8008c24:	0801459c 	.word	0x0801459c
 8008c28:	08014408 	.word	0x08014408
 8008c2c:	080145d4 	.word	0x080145d4
 8008c30:	08014604 	.word	0x08014604

08008c34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	2300      	movs	r3, #0
 8008c44:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <pbuf_copy+0x2a>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <pbuf_copy+0x2a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	891a      	ldrh	r2, [r3, #8]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	891b      	ldrh	r3, [r3, #8]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d209      	bcs.n	8008c72 <pbuf_copy+0x3e>
 8008c5e:	4b57      	ldr	r3, [pc, #348]	; (8008dbc <pbuf_copy+0x188>)
 8008c60:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008c64:	4956      	ldr	r1, [pc, #344]	; (8008dc0 <pbuf_copy+0x18c>)
 8008c66:	4857      	ldr	r0, [pc, #348]	; (8008dc4 <pbuf_copy+0x190>)
 8008c68:	f009 f8c2 	bl	8011df0 <iprintf>
 8008c6c:	f06f 030f 	mvn.w	r3, #15
 8008c70:	e09f      	b.n	8008db2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	895b      	ldrh	r3, [r3, #10]
 8008c76:	461a      	mov	r2, r3
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	895b      	ldrh	r3, [r3, #10]
 8008c80:	4619      	mov	r1, r3
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1acb      	subs	r3, r1, r3
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d306      	bcc.n	8008c98 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	895b      	ldrh	r3, [r3, #10]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e005      	b.n	8008ca4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	895b      	ldrh	r3, [r3, #10]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	18d0      	adds	r0, r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	f009 f9fb 	bl	80120b2 <memcpy>
    offset_to += len;
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	895b      	ldrh	r3, [r3, #10]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d906      	bls.n	8008ce6 <pbuf_copy+0xb2>
 8008cd8:	4b38      	ldr	r3, [pc, #224]	; (8008dbc <pbuf_copy+0x188>)
 8008cda:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008cde:	493a      	ldr	r1, [pc, #232]	; (8008dc8 <pbuf_copy+0x194>)
 8008ce0:	4838      	ldr	r0, [pc, #224]	; (8008dc4 <pbuf_copy+0x190>)
 8008ce2:	f009 f885 	bl	8011df0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	895b      	ldrh	r3, [r3, #10]
 8008cea:	461a      	mov	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d906      	bls.n	8008d00 <pbuf_copy+0xcc>
 8008cf2:	4b32      	ldr	r3, [pc, #200]	; (8008dbc <pbuf_copy+0x188>)
 8008cf4:	f240 32da 	movw	r2, #986	; 0x3da
 8008cf8:	4934      	ldr	r1, [pc, #208]	; (8008dcc <pbuf_copy+0x198>)
 8008cfa:	4832      	ldr	r0, [pc, #200]	; (8008dc4 <pbuf_copy+0x190>)
 8008cfc:	f009 f878 	bl	8011df0 <iprintf>
    if (offset_from >= p_from->len) {
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	895b      	ldrh	r3, [r3, #10]
 8008d04:	461a      	mov	r2, r3
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d304      	bcc.n	8008d16 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	895b      	ldrh	r3, [r3, #10]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d114      	bne.n	8008d4c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10c      	bne.n	8008d4c <pbuf_copy+0x118>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <pbuf_copy+0x118>
 8008d38:	4b20      	ldr	r3, [pc, #128]	; (8008dbc <pbuf_copy+0x188>)
 8008d3a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008d3e:	4924      	ldr	r1, [pc, #144]	; (8008dd0 <pbuf_copy+0x19c>)
 8008d40:	4820      	ldr	r0, [pc, #128]	; (8008dc4 <pbuf_copy+0x190>)
 8008d42:	f009 f855 	bl	8011df0 <iprintf>
 8008d46:	f06f 030f 	mvn.w	r3, #15
 8008d4a:	e032      	b.n	8008db2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d013      	beq.n	8008d7a <pbuf_copy+0x146>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	895a      	ldrh	r2, [r3, #10]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	891b      	ldrh	r3, [r3, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d10d      	bne.n	8008d7a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <pbuf_copy+0x146>
 8008d66:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <pbuf_copy+0x188>)
 8008d68:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008d6c:	4919      	ldr	r1, [pc, #100]	; (8008dd4 <pbuf_copy+0x1a0>)
 8008d6e:	4815      	ldr	r0, [pc, #84]	; (8008dc4 <pbuf_copy+0x190>)
 8008d70:	f009 f83e 	bl	8011df0 <iprintf>
 8008d74:	f06f 0305 	mvn.w	r3, #5
 8008d78:	e01b      	b.n	8008db2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d013      	beq.n	8008da8 <pbuf_copy+0x174>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	895a      	ldrh	r2, [r3, #10]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	891b      	ldrh	r3, [r3, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d10d      	bne.n	8008da8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <pbuf_copy+0x174>
 8008d94:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <pbuf_copy+0x188>)
 8008d96:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008d9a:	490e      	ldr	r1, [pc, #56]	; (8008dd4 <pbuf_copy+0x1a0>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	; (8008dc4 <pbuf_copy+0x190>)
 8008d9e:	f009 f827 	bl	8011df0 <iprintf>
 8008da2:	f06f 0305 	mvn.w	r3, #5
 8008da6:	e004      	b.n	8008db2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f47f af61 	bne.w	8008c72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	080143a8 	.word	0x080143a8
 8008dc0:	08014650 	.word	0x08014650
 8008dc4:	08014408 	.word	0x08014408
 8008dc8:	08014680 	.word	0x08014680
 8008dcc:	08014698 	.word	0x08014698
 8008dd0:	080146b4 	.word	0x080146b4
 8008dd4:	080146c4 	.word	0x080146c4

08008dd8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b088      	sub	sp, #32
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4611      	mov	r1, r2
 8008de4:	461a      	mov	r2, r3
 8008de6:	460b      	mov	r3, r1
 8008de8:	80fb      	strh	r3, [r7, #6]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d108      	bne.n	8008e0e <pbuf_copy_partial+0x36>
 8008dfc:	4b2b      	ldr	r3, [pc, #172]	; (8008eac <pbuf_copy_partial+0xd4>)
 8008dfe:	f240 420a 	movw	r2, #1034	; 0x40a
 8008e02:	492b      	ldr	r1, [pc, #172]	; (8008eb0 <pbuf_copy_partial+0xd8>)
 8008e04:	482b      	ldr	r0, [pc, #172]	; (8008eb4 <pbuf_copy_partial+0xdc>)
 8008e06:	f008 fff3 	bl	8011df0 <iprintf>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e04a      	b.n	8008ea4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d108      	bne.n	8008e26 <pbuf_copy_partial+0x4e>
 8008e14:	4b25      	ldr	r3, [pc, #148]	; (8008eac <pbuf_copy_partial+0xd4>)
 8008e16:	f240 420b 	movw	r2, #1035	; 0x40b
 8008e1a:	4927      	ldr	r1, [pc, #156]	; (8008eb8 <pbuf_copy_partial+0xe0>)
 8008e1c:	4825      	ldr	r0, [pc, #148]	; (8008eb4 <pbuf_copy_partial+0xdc>)
 8008e1e:	f008 ffe7 	bl	8011df0 <iprintf>
 8008e22:	2300      	movs	r3, #0
 8008e24:	e03e      	b.n	8008ea4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	e034      	b.n	8008e96 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008e2c:	88bb      	ldrh	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <pbuf_copy_partial+0x70>
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	895b      	ldrh	r3, [r3, #10]
 8008e36:	88ba      	ldrh	r2, [r7, #4]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d305      	bcc.n	8008e48 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	895b      	ldrh	r3, [r3, #10]
 8008e40:	88ba      	ldrh	r2, [r7, #4]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	80bb      	strh	r3, [r7, #4]
 8008e46:	e023      	b.n	8008e90 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	895a      	ldrh	r2, [r3, #10]
 8008e4c:	88bb      	ldrh	r3, [r7, #4]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008e52:	8b3a      	ldrh	r2, [r7, #24]
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d901      	bls.n	8008e5e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008e5e:	8b7b      	ldrh	r3, [r7, #26]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	18d0      	adds	r0, r2, r3
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	88bb      	ldrh	r3, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	8b3a      	ldrh	r2, [r7, #24]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f009 f91f 	bl	80120b2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008e74:	8afa      	ldrh	r2, [r7, #22]
 8008e76:	8b3b      	ldrh	r3, [r7, #24]
 8008e78:	4413      	add	r3, r2
 8008e7a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008e7c:	8b7a      	ldrh	r2, [r7, #26]
 8008e7e:	8b3b      	ldrh	r3, [r7, #24]
 8008e80:	4413      	add	r3, r2
 8008e82:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008e84:	88fa      	ldrh	r2, [r7, #6]
 8008e86:	8b3b      	ldrh	r3, [r7, #24]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <pbuf_copy_partial+0xca>
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1c4      	bne.n	8008e2c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008ea2:	8afb      	ldrh	r3, [r7, #22]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	080143a8 	.word	0x080143a8
 8008eb0:	080146f0 	.word	0x080146f0
 8008eb4:	08014408 	.word	0x08014408
 8008eb8:	08014710 	.word	0x08014710

08008ebc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	603a      	str	r2, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	8919      	ldrh	r1, [r3, #8]
 8008ed0:	88ba      	ldrh	r2, [r7, #4]
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fab1 	bl	800843c <pbuf_alloc>
 8008eda:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <pbuf_clone+0x2a>
    return NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e011      	b.n	8008f0a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f7ff fea3 	bl	8008c34 <pbuf_copy>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008ef2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d006      	beq.n	8008f08 <pbuf_clone+0x4c>
 8008efa:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <pbuf_clone+0x58>)
 8008efc:	f240 5224 	movw	r2, #1316	; 0x524
 8008f00:	4905      	ldr	r1, [pc, #20]	; (8008f18 <pbuf_clone+0x5c>)
 8008f02:	4806      	ldr	r0, [pc, #24]	; (8008f1c <pbuf_clone+0x60>)
 8008f04:	f008 ff74 	bl	8011df0 <iprintf>
  return q;
 8008f08:	68fb      	ldr	r3, [r7, #12]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	080143a8 	.word	0x080143a8
 8008f18:	0801481c 	.word	0x0801481c
 8008f1c:	08014408 	.word	0x08014408

08008f20 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008f24:	f008 f88c 	bl	8011040 <rand>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	4b01      	ldr	r3, [pc, #4]	; (8008f40 <tcp_init+0x20>)
 8008f3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008f3c:	bf00      	nop
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20000020 	.word	0x20000020

08008f44 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7d1b      	ldrb	r3, [r3, #20]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d105      	bne.n	8008f60 <tcp_free+0x1c>
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <tcp_free+0x2c>)
 8008f56:	22d4      	movs	r2, #212	; 0xd4
 8008f58:	4906      	ldr	r1, [pc, #24]	; (8008f74 <tcp_free+0x30>)
 8008f5a:	4807      	ldr	r0, [pc, #28]	; (8008f78 <tcp_free+0x34>)
 8008f5c:	f008 ff48 	bl	8011df0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	2001      	movs	r0, #1
 8008f64:	f7fe fed8 	bl	8007d18 <memp_free>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	080148a8 	.word	0x080148a8
 8008f74:	080148d8 	.word	0x080148d8
 8008f78:	080148ec 	.word	0x080148ec

08008f7c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d105      	bne.n	8008f98 <tcp_free_listen+0x1c>
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <tcp_free_listen+0x2c>)
 8008f8e:	22df      	movs	r2, #223	; 0xdf
 8008f90:	4906      	ldr	r1, [pc, #24]	; (8008fac <tcp_free_listen+0x30>)
 8008f92:	4807      	ldr	r0, [pc, #28]	; (8008fb0 <tcp_free_listen+0x34>)
 8008f94:	f008 ff2c 	bl	8011df0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	2002      	movs	r0, #2
 8008f9c:	f7fe febc 	bl	8007d18 <memp_free>
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	080148a8 	.word	0x080148a8
 8008fac:	08014914 	.word	0x08014914
 8008fb0:	080148ec 	.word	0x080148ec

08008fb4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008fb8:	f000 fea2 	bl	8009d00 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008fbc:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <tcp_tmr+0x28>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <tcp_tmr+0x28>)
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <tcp_tmr+0x28>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008fd4:	f000 fb54 	bl	8009680 <tcp_slowtmr>
  }
}
 8008fd8:	bf00      	nop
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	2000a7e5 	.word	0x2000a7e5

08008fe0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d105      	bne.n	8008ffc <tcp_remove_listener+0x1c>
 8008ff0:	4b0d      	ldr	r3, [pc, #52]	; (8009028 <tcp_remove_listener+0x48>)
 8008ff2:	22ff      	movs	r2, #255	; 0xff
 8008ff4:	490d      	ldr	r1, [pc, #52]	; (800902c <tcp_remove_listener+0x4c>)
 8008ff6:	480e      	ldr	r0, [pc, #56]	; (8009030 <tcp_remove_listener+0x50>)
 8008ff8:	f008 fefa 	bl	8011df0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e00a      	b.n	8009018 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d102      	bne.n	8009012 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f1      	bne.n	8009002 <tcp_remove_listener+0x22>
    }
  }
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	080148a8 	.word	0x080148a8
 800902c:	08014930 	.word	0x08014930
 8009030:	080148ec 	.word	0x080148ec

08009034 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <tcp_listen_closed+0x1c>
 8009042:	4b14      	ldr	r3, [pc, #80]	; (8009094 <tcp_listen_closed+0x60>)
 8009044:	f240 1211 	movw	r2, #273	; 0x111
 8009048:	4913      	ldr	r1, [pc, #76]	; (8009098 <tcp_listen_closed+0x64>)
 800904a:	4814      	ldr	r0, [pc, #80]	; (800909c <tcp_listen_closed+0x68>)
 800904c:	f008 fed0 	bl	8011df0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7d1b      	ldrb	r3, [r3, #20]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d006      	beq.n	8009066 <tcp_listen_closed+0x32>
 8009058:	4b0e      	ldr	r3, [pc, #56]	; (8009094 <tcp_listen_closed+0x60>)
 800905a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800905e:	4910      	ldr	r1, [pc, #64]	; (80090a0 <tcp_listen_closed+0x6c>)
 8009060:	480e      	ldr	r0, [pc, #56]	; (800909c <tcp_listen_closed+0x68>)
 8009062:	f008 fec5 	bl	8011df0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009066:	2301      	movs	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	e00b      	b.n	8009084 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800906c:	4a0d      	ldr	r2, [pc, #52]	; (80090a4 <tcp_listen_closed+0x70>)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff ffb1 	bl	8008fe0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3301      	adds	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b03      	cmp	r3, #3
 8009088:	d9f0      	bls.n	800906c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	080148a8 	.word	0x080148a8
 8009098:	08014958 	.word	0x08014958
 800909c:	080148ec 	.word	0x080148ec
 80090a0:	08014964 	.word	0x08014964
 80090a4:	0801688c 	.word	0x0801688c

080090a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80090a8:	b5b0      	push	{r4, r5, r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af04      	add	r7, sp, #16
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <tcp_close_shutdown+0x20>
 80090ba:	4b63      	ldr	r3, [pc, #396]	; (8009248 <tcp_close_shutdown+0x1a0>)
 80090bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80090c0:	4962      	ldr	r1, [pc, #392]	; (800924c <tcp_close_shutdown+0x1a4>)
 80090c2:	4863      	ldr	r0, [pc, #396]	; (8009250 <tcp_close_shutdown+0x1a8>)
 80090c4:	f008 fe94 	bl	8011df0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d066      	beq.n	800919c <tcp_close_shutdown+0xf4>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7d1b      	ldrb	r3, [r3, #20]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d003      	beq.n	80090de <tcp_close_shutdown+0x36>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7d1b      	ldrb	r3, [r3, #20]
 80090da:	2b07      	cmp	r3, #7
 80090dc:	d15e      	bne.n	800919c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <tcp_close_shutdown+0x48>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80090ee:	d055      	beq.n	800919c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8b5b      	ldrh	r3, [r3, #26]
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d106      	bne.n	800910a <tcp_close_shutdown+0x62>
 80090fc:	4b52      	ldr	r3, [pc, #328]	; (8009248 <tcp_close_shutdown+0x1a0>)
 80090fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009102:	4954      	ldr	r1, [pc, #336]	; (8009254 <tcp_close_shutdown+0x1ac>)
 8009104:	4852      	ldr	r0, [pc, #328]	; (8009250 <tcp_close_shutdown+0x1a8>)
 8009106:	f008 fe73 	bl	8011df0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009112:	687d      	ldr	r5, [r7, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3304      	adds	r3, #4
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	8ad2      	ldrh	r2, [r2, #22]
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	8b09      	ldrh	r1, [r1, #24]
 8009120:	9102      	str	r1, [sp, #8]
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	462b      	mov	r3, r5
 8009128:	4622      	mov	r2, r4
 800912a:	4601      	mov	r1, r0
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f004 fe91 	bl	800de54 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 f8c6 	bl	800a2c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009138:	4b47      	ldr	r3, [pc, #284]	; (8009258 <tcp_close_shutdown+0x1b0>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	429a      	cmp	r2, r3
 8009140:	d105      	bne.n	800914e <tcp_close_shutdown+0xa6>
 8009142:	4b45      	ldr	r3, [pc, #276]	; (8009258 <tcp_close_shutdown+0x1b0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	4a43      	ldr	r2, [pc, #268]	; (8009258 <tcp_close_shutdown+0x1b0>)
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	e013      	b.n	8009176 <tcp_close_shutdown+0xce>
 800914e:	4b42      	ldr	r3, [pc, #264]	; (8009258 <tcp_close_shutdown+0x1b0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e00c      	b.n	8009170 <tcp_close_shutdown+0xc8>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d104      	bne.n	800916a <tcp_close_shutdown+0xc2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	60da      	str	r2, [r3, #12]
 8009168:	e005      	b.n	8009176 <tcp_close_shutdown+0xce>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1ef      	bne.n	8009156 <tcp_close_shutdown+0xae>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	60da      	str	r2, [r3, #12]
 800917c:	4b37      	ldr	r3, [pc, #220]	; (800925c <tcp_close_shutdown+0x1b4>)
 800917e:	2201      	movs	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009182:	4b37      	ldr	r3, [pc, #220]	; (8009260 <tcp_close_shutdown+0x1b8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d102      	bne.n	8009192 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800918c:	f003 fd5e 	bl	800cc4c <tcp_trigger_input_pcb_close>
 8009190:	e002      	b.n	8009198 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff fed6 	bl	8008f44 <tcp_free>
      }
      return ERR_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e050      	b.n	800923e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7d1b      	ldrb	r3, [r3, #20]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d03b      	beq.n	800921c <tcp_close_shutdown+0x174>
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	dc44      	bgt.n	8009232 <tcp_close_shutdown+0x18a>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <tcp_close_shutdown+0x10a>
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d02a      	beq.n	8009206 <tcp_close_shutdown+0x15e>
 80091b0:	e03f      	b.n	8009232 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	8adb      	ldrh	r3, [r3, #22]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d021      	beq.n	80091fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80091ba:	4b2a      	ldr	r3, [pc, #168]	; (8009264 <tcp_close_shutdown+0x1bc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d105      	bne.n	80091d0 <tcp_close_shutdown+0x128>
 80091c4:	4b27      	ldr	r3, [pc, #156]	; (8009264 <tcp_close_shutdown+0x1bc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	4a26      	ldr	r2, [pc, #152]	; (8009264 <tcp_close_shutdown+0x1bc>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e013      	b.n	80091f8 <tcp_close_shutdown+0x150>
 80091d0:	4b24      	ldr	r3, [pc, #144]	; (8009264 <tcp_close_shutdown+0x1bc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	e00c      	b.n	80091f2 <tcp_close_shutdown+0x14a>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d104      	bne.n	80091ec <tcp_close_shutdown+0x144>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	e005      	b.n	80091f8 <tcp_close_shutdown+0x150>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1ef      	bne.n	80091d8 <tcp_close_shutdown+0x130>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fea0 	bl	8008f44 <tcp_free>
      break;
 8009204:	e01a      	b.n	800923c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7ff ff14 	bl	8009034 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	4816      	ldr	r0, [pc, #88]	; (8009268 <tcp_close_shutdown+0x1c0>)
 8009210:	f001 f8a8 	bl	800a364 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff feb1 	bl	8008f7c <tcp_free_listen>
      break;
 800921a:	e00f      	b.n	800923c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	480e      	ldr	r0, [pc, #56]	; (8009258 <tcp_close_shutdown+0x1b0>)
 8009220:	f001 f8a0 	bl	800a364 <tcp_pcb_remove>
 8009224:	4b0d      	ldr	r3, [pc, #52]	; (800925c <tcp_close_shutdown+0x1b4>)
 8009226:	2201      	movs	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fe8a 	bl	8008f44 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009230:	e004      	b.n	800923c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f81a 	bl	800926c <tcp_close_shutdown_fin>
 8009238:	4603      	mov	r3, r0
 800923a:	e000      	b.n	800923e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bdb0      	pop	{r4, r5, r7, pc}
 8009246:	bf00      	nop
 8009248:	080148a8 	.word	0x080148a8
 800924c:	0801497c 	.word	0x0801497c
 8009250:	080148ec 	.word	0x080148ec
 8009254:	0801499c 	.word	0x0801499c
 8009258:	2000a7dc 	.word	0x2000a7dc
 800925c:	2000a7e4 	.word	0x2000a7e4
 8009260:	2000a81c 	.word	0x2000a81c
 8009264:	2000a7d4 	.word	0x2000a7d4
 8009268:	2000a7d8 	.word	0x2000a7d8

0800926c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <tcp_close_shutdown_fin+0x1c>
 800927a:	4b2e      	ldr	r3, [pc, #184]	; (8009334 <tcp_close_shutdown_fin+0xc8>)
 800927c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009280:	492d      	ldr	r1, [pc, #180]	; (8009338 <tcp_close_shutdown_fin+0xcc>)
 8009282:	482e      	ldr	r0, [pc, #184]	; (800933c <tcp_close_shutdown_fin+0xd0>)
 8009284:	f008 fdb4 	bl	8011df0 <iprintf>

  switch (pcb->state) {
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	7d1b      	ldrb	r3, [r3, #20]
 800928c:	2b07      	cmp	r3, #7
 800928e:	d020      	beq.n	80092d2 <tcp_close_shutdown_fin+0x66>
 8009290:	2b07      	cmp	r3, #7
 8009292:	dc2b      	bgt.n	80092ec <tcp_close_shutdown_fin+0x80>
 8009294:	2b03      	cmp	r3, #3
 8009296:	d002      	beq.n	800929e <tcp_close_shutdown_fin+0x32>
 8009298:	2b04      	cmp	r3, #4
 800929a:	d00d      	beq.n	80092b8 <tcp_close_shutdown_fin+0x4c>
 800929c:	e026      	b.n	80092ec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f003 fee6 	bl	800d070 <tcp_send_fin>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d11f      	bne.n	80092f0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2205      	movs	r2, #5
 80092b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092b6:	e01b      	b.n	80092f0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f003 fed9 	bl	800d070 <tcp_send_fin>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d114      	bne.n	80092f4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2205      	movs	r2, #5
 80092ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092d0:	e010      	b.n	80092f4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f003 fecc 	bl	800d070 <tcp_send_fin>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d109      	bne.n	80092f8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2209      	movs	r2, #9
 80092e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092ea:	e005      	b.n	80092f8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	e01c      	b.n	800932a <tcp_close_shutdown_fin+0xbe>
      break;
 80092f0:	bf00      	nop
 80092f2:	e002      	b.n	80092fa <tcp_close_shutdown_fin+0x8e>
      break;
 80092f4:	bf00      	nop
 80092f6:	e000      	b.n	80092fa <tcp_close_shutdown_fin+0x8e>
      break;
 80092f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80092fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d103      	bne.n	800930a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f003 fff2 	bl	800d2ec <tcp_output>
 8009308:	e00d      	b.n	8009326 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800930a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009312:	d108      	bne.n	8009326 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8b5b      	ldrh	r3, [r3, #26]
 8009318:	f043 0308 	orr.w	r3, r3, #8
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	e001      	b.n	800932a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009326:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	080148a8 	.word	0x080148a8
 8009338:	08014958 	.word	0x08014958
 800933c:	080148ec 	.word	0x080148ec

08009340 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <tcp_close+0x22>
 800934e:	4b0f      	ldr	r3, [pc, #60]	; (800938c <tcp_close+0x4c>)
 8009350:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009354:	490e      	ldr	r1, [pc, #56]	; (8009390 <tcp_close+0x50>)
 8009356:	480f      	ldr	r0, [pc, #60]	; (8009394 <tcp_close+0x54>)
 8009358:	f008 fd4a 	bl	8011df0 <iprintf>
 800935c:	f06f 030f 	mvn.w	r3, #15
 8009360:	e00f      	b.n	8009382 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7d1b      	ldrb	r3, [r3, #20]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d006      	beq.n	8009378 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	8b5b      	ldrh	r3, [r3, #26]
 800936e:	f043 0310 	orr.w	r3, r3, #16
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009378:	2101      	movs	r1, #1
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fe94 	bl	80090a8 <tcp_close_shutdown>
 8009380:	4603      	mov	r3, r0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	080148a8 	.word	0x080148a8
 8009390:	080149b8 	.word	0x080149b8
 8009394:	080148ec 	.word	0x080148ec

08009398 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08e      	sub	sp, #56	; 0x38
 800939c:	af04      	add	r7, sp, #16
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d107      	bne.n	80093b8 <tcp_abandon+0x20>
 80093a8:	4b52      	ldr	r3, [pc, #328]	; (80094f4 <tcp_abandon+0x15c>)
 80093aa:	f240 223d 	movw	r2, #573	; 0x23d
 80093ae:	4952      	ldr	r1, [pc, #328]	; (80094f8 <tcp_abandon+0x160>)
 80093b0:	4852      	ldr	r0, [pc, #328]	; (80094fc <tcp_abandon+0x164>)
 80093b2:	f008 fd1d 	bl	8011df0 <iprintf>
 80093b6:	e099      	b.n	80094ec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7d1b      	ldrb	r3, [r3, #20]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d106      	bne.n	80093ce <tcp_abandon+0x36>
 80093c0:	4b4c      	ldr	r3, [pc, #304]	; (80094f4 <tcp_abandon+0x15c>)
 80093c2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80093c6:	494e      	ldr	r1, [pc, #312]	; (8009500 <tcp_abandon+0x168>)
 80093c8:	484c      	ldr	r0, [pc, #304]	; (80094fc <tcp_abandon+0x164>)
 80093ca:	f008 fd11 	bl	8011df0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7d1b      	ldrb	r3, [r3, #20]
 80093d2:	2b0a      	cmp	r3, #10
 80093d4:	d107      	bne.n	80093e6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	484a      	ldr	r0, [pc, #296]	; (8009504 <tcp_abandon+0x16c>)
 80093da:	f000 ffc3 	bl	800a364 <tcp_pcb_remove>
    tcp_free(pcb);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fdb0 	bl	8008f44 <tcp_free>
 80093e4:	e082      	b.n	80094ec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009400:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7d1b      	ldrb	r3, [r3, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d126      	bne.n	800945e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8adb      	ldrh	r3, [r3, #22]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d02e      	beq.n	8009476 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009418:	4b3b      	ldr	r3, [pc, #236]	; (8009508 <tcp_abandon+0x170>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	429a      	cmp	r2, r3
 8009420:	d105      	bne.n	800942e <tcp_abandon+0x96>
 8009422:	4b39      	ldr	r3, [pc, #228]	; (8009508 <tcp_abandon+0x170>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	4a37      	ldr	r2, [pc, #220]	; (8009508 <tcp_abandon+0x170>)
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	e013      	b.n	8009456 <tcp_abandon+0xbe>
 800942e:	4b36      	ldr	r3, [pc, #216]	; (8009508 <tcp_abandon+0x170>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	e00c      	b.n	8009450 <tcp_abandon+0xb8>
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d104      	bne.n	800944a <tcp_abandon+0xb2>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	60da      	str	r2, [r3, #12]
 8009448:	e005      	b.n	8009456 <tcp_abandon+0xbe>
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1ef      	bne.n	8009436 <tcp_abandon+0x9e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	60da      	str	r2, [r3, #12]
 800945c:	e00b      	b.n	8009476 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8adb      	ldrh	r3, [r3, #22]
 8009466:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4828      	ldr	r0, [pc, #160]	; (800950c <tcp_abandon+0x174>)
 800946c:	f000 ff7a 	bl	800a364 <tcp_pcb_remove>
 8009470:	4b27      	ldr	r3, [pc, #156]	; (8009510 <tcp_abandon+0x178>)
 8009472:	2201      	movs	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fd1c 	bl	8009ec0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fd13 	bl	8009ec0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fd0a 	bl	8009ec0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	8b12      	ldrh	r2, [r2, #24]
 80094bc:	9202      	str	r2, [sp, #8]
 80094be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80094c0:	9201      	str	r2, [sp, #4]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	460b      	mov	r3, r1
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	69b9      	ldr	r1, [r7, #24]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f004 fcc2 	bl	800de54 <tcp_rst>
    }
    last_state = pcb->state;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	7d1b      	ldrb	r3, [r3, #20]
 80094d4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fd34 	bl	8008f44 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <tcp_abandon+0x154>
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f06f 010c 	mvn.w	r1, #12
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	4798      	blx	r3
  }
}
 80094ec:	3728      	adds	r7, #40	; 0x28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	080148a8 	.word	0x080148a8
 80094f8:	080149ec 	.word	0x080149ec
 80094fc:	080148ec 	.word	0x080148ec
 8009500:	08014a08 	.word	0x08014a08
 8009504:	2000a7e0 	.word	0x2000a7e0
 8009508:	2000a7d4 	.word	0x2000a7d4
 800950c:	2000a7dc 	.word	0x2000a7dc
 8009510:	2000a7e4 	.word	0x2000a7e4

08009514 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800951c:	2101      	movs	r1, #1
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff ff3a 	bl	8009398 <tcp_abandon>
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <tcp_update_rcv_ann_wnd+0x1c>
 800953a:	4b25      	ldr	r3, [pc, #148]	; (80095d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800953c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009540:	4924      	ldr	r1, [pc, #144]	; (80095d4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009542:	4825      	ldr	r0, [pc, #148]	; (80095d8 <tcp_update_rcv_ann_wnd+0xac>)
 8009544:	f008 fc54 	bl	8011df0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009550:	4413      	add	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800955c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009560:	bf28      	it	cs
 8009562:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009566:	b292      	uxth	r2, r2
 8009568:	4413      	add	r3, r2
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	db08      	blt.n	8009584 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	e020      	b.n	80095c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd03      	ble.n	800959a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009598:	e014      	b.n	80095c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ac:	d306      	bcc.n	80095bc <tcp_update_rcv_ann_wnd+0x90>
 80095ae:	4b08      	ldr	r3, [pc, #32]	; (80095d0 <tcp_update_rcv_ann_wnd+0xa4>)
 80095b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80095b4:	4909      	ldr	r1, [pc, #36]	; (80095dc <tcp_update_rcv_ann_wnd+0xb0>)
 80095b6:	4808      	ldr	r0, [pc, #32]	; (80095d8 <tcp_update_rcv_ann_wnd+0xac>)
 80095b8:	f008 fc1a 	bl	8011df0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80095c4:	2300      	movs	r3, #0
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	080148a8 	.word	0x080148a8
 80095d4:	08014b04 	.word	0x08014b04
 80095d8:	080148ec 	.word	0x080148ec
 80095dc:	08014b28 	.word	0x08014b28

080095e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d107      	bne.n	8009602 <tcp_recved+0x22>
 80095f2:	4b1f      	ldr	r3, [pc, #124]	; (8009670 <tcp_recved+0x90>)
 80095f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80095f8:	491e      	ldr	r1, [pc, #120]	; (8009674 <tcp_recved+0x94>)
 80095fa:	481f      	ldr	r0, [pc, #124]	; (8009678 <tcp_recved+0x98>)
 80095fc:	f008 fbf8 	bl	8011df0 <iprintf>
 8009600:	e032      	b.n	8009668 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d106      	bne.n	8009618 <tcp_recved+0x38>
 800960a:	4b19      	ldr	r3, [pc, #100]	; (8009670 <tcp_recved+0x90>)
 800960c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009610:	491a      	ldr	r1, [pc, #104]	; (800967c <tcp_recved+0x9c>)
 8009612:	4819      	ldr	r0, [pc, #100]	; (8009678 <tcp_recved+0x98>)
 8009614:	f008 fbec 	bl	8011df0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800961c:	887b      	ldrh	r3, [r7, #2]
 800961e:	4413      	add	r3, r2
 8009620:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009622:	89fb      	ldrh	r3, [r7, #14]
 8009624:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009628:	d804      	bhi.n	8009634 <tcp_recved+0x54>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962e:	89fa      	ldrh	r2, [r7, #14]
 8009630:	429a      	cmp	r2, r3
 8009632:	d204      	bcs.n	800963e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800963a:	851a      	strh	r2, [r3, #40]	; 0x28
 800963c:	e002      	b.n	8009644 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	89fa      	ldrh	r2, [r7, #14]
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff ff71 	bl	800952c <tcp_update_rcv_ann_wnd>
 800964a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009652:	d309      	bcc.n	8009668 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	8b5b      	ldrh	r3, [r3, #26]
 8009658:	f043 0302 	orr.w	r3, r3, #2
 800965c:	b29a      	uxth	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f003 fe42 	bl	800d2ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	080148a8 	.word	0x080148a8
 8009674:	08014b44 	.word	0x08014b44
 8009678:	080148ec 	.word	0x080148ec
 800967c:	08014b5c 	.word	0x08014b5c

08009680 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009680:	b5b0      	push	{r4, r5, r7, lr}
 8009682:	b090      	sub	sp, #64	; 0x40
 8009684:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800968c:	4b94      	ldr	r3, [pc, #592]	; (80098e0 <tcp_slowtmr+0x260>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	4a93      	ldr	r2, [pc, #588]	; (80098e0 <tcp_slowtmr+0x260>)
 8009694:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009696:	4b93      	ldr	r3, [pc, #588]	; (80098e4 <tcp_slowtmr+0x264>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	b2da      	uxtb	r2, r3
 800969e:	4b91      	ldr	r3, [pc, #580]	; (80098e4 <tcp_slowtmr+0x264>)
 80096a0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80096a6:	4b90      	ldr	r3, [pc, #576]	; (80098e8 <tcp_slowtmr+0x268>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80096ac:	e29d      	b.n	8009bea <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	7d1b      	ldrb	r3, [r3, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d106      	bne.n	80096c4 <tcp_slowtmr+0x44>
 80096b6:	4b8d      	ldr	r3, [pc, #564]	; (80098ec <tcp_slowtmr+0x26c>)
 80096b8:	f240 42be 	movw	r2, #1214	; 0x4be
 80096bc:	498c      	ldr	r1, [pc, #560]	; (80098f0 <tcp_slowtmr+0x270>)
 80096be:	488d      	ldr	r0, [pc, #564]	; (80098f4 <tcp_slowtmr+0x274>)
 80096c0:	f008 fb96 	bl	8011df0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	7d1b      	ldrb	r3, [r3, #20]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d106      	bne.n	80096da <tcp_slowtmr+0x5a>
 80096cc:	4b87      	ldr	r3, [pc, #540]	; (80098ec <tcp_slowtmr+0x26c>)
 80096ce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80096d2:	4989      	ldr	r1, [pc, #548]	; (80098f8 <tcp_slowtmr+0x278>)
 80096d4:	4887      	ldr	r0, [pc, #540]	; (80098f4 <tcp_slowtmr+0x274>)
 80096d6:	f008 fb8b 	bl	8011df0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	7d1b      	ldrb	r3, [r3, #20]
 80096de:	2b0a      	cmp	r3, #10
 80096e0:	d106      	bne.n	80096f0 <tcp_slowtmr+0x70>
 80096e2:	4b82      	ldr	r3, [pc, #520]	; (80098ec <tcp_slowtmr+0x26c>)
 80096e4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80096e8:	4984      	ldr	r1, [pc, #528]	; (80098fc <tcp_slowtmr+0x27c>)
 80096ea:	4882      	ldr	r0, [pc, #520]	; (80098f4 <tcp_slowtmr+0x274>)
 80096ec:	f008 fb80 	bl	8011df0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	7f9a      	ldrb	r2, [r3, #30]
 80096f4:	4b7b      	ldr	r3, [pc, #492]	; (80098e4 <tcp_slowtmr+0x264>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d105      	bne.n	8009708 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009706:	e270      	b.n	8009bea <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009708:	4b76      	ldr	r3, [pc, #472]	; (80098e4 <tcp_slowtmr+0x264>)
 800970a:	781a      	ldrb	r2, [r3, #0]
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	7d1b      	ldrb	r3, [r3, #20]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d10a      	bne.n	800973a <tcp_slowtmr+0xba>
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800972a:	2b05      	cmp	r3, #5
 800972c:	d905      	bls.n	800973a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800972e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009732:	3301      	adds	r3, #1
 8009734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009738:	e11e      	b.n	8009978 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009740:	2b0b      	cmp	r3, #11
 8009742:	d905      	bls.n	8009750 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009748:	3301      	adds	r3, #1
 800974a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800974e:	e113      	b.n	8009978 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009756:	2b00      	cmp	r3, #0
 8009758:	d075      	beq.n	8009846 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975e:	2b00      	cmp	r3, #0
 8009760:	d006      	beq.n	8009770 <tcp_slowtmr+0xf0>
 8009762:	4b62      	ldr	r3, [pc, #392]	; (80098ec <tcp_slowtmr+0x26c>)
 8009764:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009768:	4965      	ldr	r1, [pc, #404]	; (8009900 <tcp_slowtmr+0x280>)
 800976a:	4862      	ldr	r0, [pc, #392]	; (80098f4 <tcp_slowtmr+0x274>)
 800976c:	f008 fb40 	bl	8011df0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <tcp_slowtmr+0x106>
 8009778:	4b5c      	ldr	r3, [pc, #368]	; (80098ec <tcp_slowtmr+0x26c>)
 800977a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800977e:	4961      	ldr	r1, [pc, #388]	; (8009904 <tcp_slowtmr+0x284>)
 8009780:	485c      	ldr	r0, [pc, #368]	; (80098f4 <tcp_slowtmr+0x274>)
 8009782:	f008 fb35 	bl	8011df0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800978c:	2b0b      	cmp	r3, #11
 800978e:	d905      	bls.n	800979c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009794:	3301      	adds	r3, #1
 8009796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800979a:	e0ed      	b.n	8009978 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80097a2:	3b01      	subs	r3, #1
 80097a4:	4a58      	ldr	r2, [pc, #352]	; (8009908 <tcp_slowtmr+0x288>)
 80097a6:	5cd3      	ldrb	r3, [r2, r3]
 80097a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80097b0:	7c7a      	ldrb	r2, [r7, #17]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d907      	bls.n	80097c6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80097bc:	3301      	adds	r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80097cc:	7c7a      	ldrb	r2, [r7, #17]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	f200 80d2 	bhi.w	8009978 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80097d4:	2301      	movs	r3, #1
 80097d6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80097d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d108      	bne.n	80097f4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80097e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097e4:	f004 fc2a 	bl	800e03c <tcp_zero_window_probe>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d014      	beq.n	8009818 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80097ee:	2300      	movs	r3, #0
 80097f0:	623b      	str	r3, [r7, #32]
 80097f2:	e011      	b.n	8009818 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80097f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097fa:	4619      	mov	r1, r3
 80097fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097fe:	f003 faef 	bl	800cde0 <tcp_split_unsent_seg>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d107      	bne.n	8009818 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800980a:	f003 fd6f 	bl	800d2ec <tcp_output>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 80ac 	beq.w	8009978 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800982e:	2b06      	cmp	r3, #6
 8009830:	f200 80a2 	bhi.w	8009978 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800983a:	3301      	adds	r3, #1
 800983c:	b2da      	uxtb	r2, r3
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009844:	e098      	b.n	8009978 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800984c:	2b00      	cmp	r3, #0
 800984e:	db0f      	blt.n	8009870 <tcp_slowtmr+0x1f0>
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009856:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800985a:	4293      	cmp	r3, r2
 800985c:	d008      	beq.n	8009870 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009860:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009864:	b29b      	uxth	r3, r3
 8009866:	3301      	adds	r3, #1
 8009868:	b29b      	uxth	r3, r3
 800986a:	b21a      	sxth	r2, r3
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800987c:	429a      	cmp	r2, r3
 800987e:	db7b      	blt.n	8009978 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009882:	f004 f827 	bl	800d8d4 <tcp_rexmit_rto_prepare>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d007      	beq.n	800989c <tcp_slowtmr+0x21c>
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009890:	2b00      	cmp	r3, #0
 8009892:	d171      	bne.n	8009978 <tcp_slowtmr+0x2f8>
 8009894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d06d      	beq.n	8009978 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	7d1b      	ldrb	r3, [r3, #20]
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d03a      	beq.n	800991a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098aa:	2b0c      	cmp	r3, #12
 80098ac:	bf28      	it	cs
 80098ae:	230c      	movcs	r3, #12
 80098b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80098b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098b8:	10db      	asrs	r3, r3, #3
 80098ba:	b21b      	sxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098c4:	4413      	add	r3, r2
 80098c6:	7efa      	ldrb	r2, [r7, #27]
 80098c8:	4910      	ldr	r1, [pc, #64]	; (800990c <tcp_slowtmr+0x28c>)
 80098ca:	5c8a      	ldrb	r2, [r1, r2]
 80098cc:	4093      	lsls	r3, r2
 80098ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80098d6:	4293      	cmp	r3, r2
 80098d8:	dc1a      	bgt.n	8009910 <tcp_slowtmr+0x290>
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	b21a      	sxth	r2, r3
 80098de:	e019      	b.n	8009914 <tcp_slowtmr+0x294>
 80098e0:	2000a7d0 	.word	0x2000a7d0
 80098e4:	2000a7e6 	.word	0x2000a7e6
 80098e8:	2000a7dc 	.word	0x2000a7dc
 80098ec:	080148a8 	.word	0x080148a8
 80098f0:	08014bec 	.word	0x08014bec
 80098f4:	080148ec 	.word	0x080148ec
 80098f8:	08014c18 	.word	0x08014c18
 80098fc:	08014c44 	.word	0x08014c44
 8009900:	08014c74 	.word	0x08014c74
 8009904:	08014ca8 	.word	0x08014ca8
 8009908:	08016884 	.word	0x08016884
 800990c:	08016874 	.word	0x08016874
 8009910:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	2200      	movs	r2, #0
 800991e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800992c:	4293      	cmp	r3, r2
 800992e:	bf28      	it	cs
 8009930:	4613      	movcs	r3, r2
 8009932:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009934:	8a7b      	ldrh	r3, [r7, #18]
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	b29b      	uxth	r3, r3
 800994e:	429a      	cmp	r2, r3
 8009950:	d206      	bcs.n	8009960 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009962:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	2200      	movs	r2, #0
 800996e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009974:	f004 f81e 	bl	800d9b4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	7d1b      	ldrb	r3, [r3, #20]
 800997c:	2b06      	cmp	r3, #6
 800997e:	d111      	bne.n	80099a4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	8b5b      	ldrh	r3, [r3, #26]
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800998c:	4b9c      	ldr	r3, [pc, #624]	; (8009c00 <tcp_slowtmr+0x580>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	2b28      	cmp	r3, #40	; 0x28
 8009998:	d904      	bls.n	80099a4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800999a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800999e:	3301      	adds	r3, #1
 80099a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	7a5b      	ldrb	r3, [r3, #9]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d04a      	beq.n	8009a46 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	d003      	beq.n	80099c0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80099bc:	2b07      	cmp	r3, #7
 80099be:	d142      	bne.n	8009a46 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099c0:	4b8f      	ldr	r3, [pc, #572]	; (8009c00 <tcp_slowtmr+0x580>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80099d0:	4b8c      	ldr	r3, [pc, #560]	; (8009c04 <tcp_slowtmr+0x584>)
 80099d2:	440b      	add	r3, r1
 80099d4:	498c      	ldr	r1, [pc, #560]	; (8009c08 <tcp_slowtmr+0x588>)
 80099d6:	fba1 1303 	umull	r1, r3, r1, r3
 80099da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099dc:	429a      	cmp	r2, r3
 80099de:	d90a      	bls.n	80099f6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80099e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e4:	3301      	adds	r3, #1
 80099e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80099ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099ee:	3301      	adds	r3, #1
 80099f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80099f4:	e027      	b.n	8009a46 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099f6:	4b82      	ldr	r3, [pc, #520]	; (8009c00 <tcp_slowtmr+0x580>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	4b7f      	ldr	r3, [pc, #508]	; (8009c0c <tcp_slowtmr+0x58c>)
 8009a10:	fb00 f303 	mul.w	r3, r0, r3
 8009a14:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009a16:	497c      	ldr	r1, [pc, #496]	; (8009c08 <tcp_slowtmr+0x588>)
 8009a18:	fba1 1303 	umull	r1, r3, r1, r3
 8009a1c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d911      	bls.n	8009a46 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a24:	f004 faca 	bl	800dfbc <tcp_keepalive>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009a2e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d107      	bne.n	8009a46 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d011      	beq.n	8009a72 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009a4e:	4b6c      	ldr	r3, [pc, #432]	; (8009c00 <tcp_slowtmr+0x580>)
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	1ad2      	subs	r2, r2, r3
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009a5e:	4619      	mov	r1, r3
 8009a60:	460b      	mov	r3, r1
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	440b      	add	r3, r1
 8009a66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a6e:	f000 fddd 	bl	800a62c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a74:	7d1b      	ldrb	r3, [r3, #20]
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d10b      	bne.n	8009a92 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a7a:	4b61      	ldr	r3, [pc, #388]	; (8009c00 <tcp_slowtmr+0x580>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b28      	cmp	r3, #40	; 0x28
 8009a86:	d904      	bls.n	8009a92 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	7d1b      	ldrb	r3, [r3, #20]
 8009a96:	2b09      	cmp	r3, #9
 8009a98:	d10b      	bne.n	8009ab2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009a9a:	4b59      	ldr	r3, [pc, #356]	; (8009c00 <tcp_slowtmr+0x580>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2bf0      	cmp	r3, #240	; 0xf0
 8009aa6:	d904      	bls.n	8009ab2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aac:	3301      	adds	r3, #1
 8009aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d060      	beq.n	8009b7c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ac4:	f000 fbfe 	bl	800a2c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d010      	beq.n	8009af0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009ace:	4b50      	ldr	r3, [pc, #320]	; (8009c10 <tcp_slowtmr+0x590>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d106      	bne.n	8009ae6 <tcp_slowtmr+0x466>
 8009ad8:	4b4e      	ldr	r3, [pc, #312]	; (8009c14 <tcp_slowtmr+0x594>)
 8009ada:	f240 526d 	movw	r2, #1389	; 0x56d
 8009ade:	494e      	ldr	r1, [pc, #312]	; (8009c18 <tcp_slowtmr+0x598>)
 8009ae0:	484e      	ldr	r0, [pc, #312]	; (8009c1c <tcp_slowtmr+0x59c>)
 8009ae2:	f008 f985 	bl	8011df0 <iprintf>
        prev->next = pcb->next;
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	60da      	str	r2, [r3, #12]
 8009aee:	e00f      	b.n	8009b10 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009af0:	4b47      	ldr	r3, [pc, #284]	; (8009c10 <tcp_slowtmr+0x590>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d006      	beq.n	8009b08 <tcp_slowtmr+0x488>
 8009afa:	4b46      	ldr	r3, [pc, #280]	; (8009c14 <tcp_slowtmr+0x594>)
 8009afc:	f240 5271 	movw	r2, #1393	; 0x571
 8009b00:	4947      	ldr	r1, [pc, #284]	; (8009c20 <tcp_slowtmr+0x5a0>)
 8009b02:	4846      	ldr	r0, [pc, #280]	; (8009c1c <tcp_slowtmr+0x59c>)
 8009b04:	f008 f974 	bl	8011df0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	4a40      	ldr	r2, [pc, #256]	; (8009c10 <tcp_slowtmr+0x590>)
 8009b0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d013      	beq.n	8009b40 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009b20:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b24:	3304      	adds	r3, #4
 8009b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b28:	8ad2      	ldrh	r2, [r2, #22]
 8009b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b2c:	8b09      	ldrh	r1, [r1, #24]
 8009b2e:	9102      	str	r1, [sp, #8]
 8009b30:	9201      	str	r2, [sp, #4]
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	462b      	mov	r3, r5
 8009b36:	4622      	mov	r2, r4
 8009b38:	4601      	mov	r1, r0
 8009b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b3c:	f004 f98a 	bl	800de54 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	7d1b      	ldrb	r3, [r3, #20]
 8009b4a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009b56:	6838      	ldr	r0, [r7, #0]
 8009b58:	f7ff f9f4 	bl	8008f44 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009b5c:	4b31      	ldr	r3, [pc, #196]	; (8009c24 <tcp_slowtmr+0x5a4>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <tcp_slowtmr+0x4f2>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f06f 010c 	mvn.w	r1, #12
 8009b6e:	68b8      	ldr	r0, [r7, #8]
 8009b70:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009b72:	4b2c      	ldr	r3, [pc, #176]	; (8009c24 <tcp_slowtmr+0x5a4>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d037      	beq.n	8009bea <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009b7a:	e592      	b.n	80096a2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	7f1b      	ldrb	r3, [r3, #28]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	7f1a      	ldrb	r2, [r3, #28]
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	7f5b      	ldrb	r3, [r3, #29]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d325      	bcc.n	8009bea <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009ba4:	4b1f      	ldr	r3, [pc, #124]	; (8009c24 <tcp_slowtmr+0x5a4>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <tcp_slowtmr+0x54c>
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bbc:	6912      	ldr	r2, [r2, #16]
 8009bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009bca:	e002      	b.n	8009bd2 <tcp_slowtmr+0x552>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009bd2:	4b14      	ldr	r3, [pc, #80]	; (8009c24 <tcp_slowtmr+0x5a4>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d000      	beq.n	8009bdc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009bda:	e562      	b.n	80096a2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009bdc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d102      	bne.n	8009bea <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009be6:	f003 fb81 	bl	800d2ec <tcp_output>
  while (pcb != NULL) {
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f47f ad5e 	bne.w	80096ae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009bf6:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <tcp_slowtmr+0x5a8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009bfc:	e069      	b.n	8009cd2 <tcp_slowtmr+0x652>
 8009bfe:	bf00      	nop
 8009c00:	2000a7d0 	.word	0x2000a7d0
 8009c04:	000a4cb8 	.word	0x000a4cb8
 8009c08:	10624dd3 	.word	0x10624dd3
 8009c0c:	000124f8 	.word	0x000124f8
 8009c10:	2000a7dc 	.word	0x2000a7dc
 8009c14:	080148a8 	.word	0x080148a8
 8009c18:	08014ce0 	.word	0x08014ce0
 8009c1c:	080148ec 	.word	0x080148ec
 8009c20:	08014d0c 	.word	0x08014d0c
 8009c24:	2000a7e4 	.word	0x2000a7e4
 8009c28:	2000a7e0 	.word	0x2000a7e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2e:	7d1b      	ldrb	r3, [r3, #20]
 8009c30:	2b0a      	cmp	r3, #10
 8009c32:	d006      	beq.n	8009c42 <tcp_slowtmr+0x5c2>
 8009c34:	4b2b      	ldr	r3, [pc, #172]	; (8009ce4 <tcp_slowtmr+0x664>)
 8009c36:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009c3a:	492b      	ldr	r1, [pc, #172]	; (8009ce8 <tcp_slowtmr+0x668>)
 8009c3c:	482b      	ldr	r0, [pc, #172]	; (8009cec <tcp_slowtmr+0x66c>)
 8009c3e:	f008 f8d7 	bl	8011df0 <iprintf>
    pcb_remove = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009c48:	4b29      	ldr	r3, [pc, #164]	; (8009cf0 <tcp_slowtmr+0x670>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	2bf0      	cmp	r3, #240	; 0xf0
 8009c54:	d904      	bls.n	8009c60 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d02f      	beq.n	8009cc8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c6a:	f000 fb2b 	bl	800a2c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d010      	beq.n	8009c96 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009c74:	4b1f      	ldr	r3, [pc, #124]	; (8009cf4 <tcp_slowtmr+0x674>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d106      	bne.n	8009c8c <tcp_slowtmr+0x60c>
 8009c7e:	4b19      	ldr	r3, [pc, #100]	; (8009ce4 <tcp_slowtmr+0x664>)
 8009c80:	f240 52af 	movw	r2, #1455	; 0x5af
 8009c84:	491c      	ldr	r1, [pc, #112]	; (8009cf8 <tcp_slowtmr+0x678>)
 8009c86:	4819      	ldr	r0, [pc, #100]	; (8009cec <tcp_slowtmr+0x66c>)
 8009c88:	f008 f8b2 	bl	8011df0 <iprintf>
        prev->next = pcb->next;
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	60da      	str	r2, [r3, #12]
 8009c94:	e00f      	b.n	8009cb6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009c96:	4b17      	ldr	r3, [pc, #92]	; (8009cf4 <tcp_slowtmr+0x674>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d006      	beq.n	8009cae <tcp_slowtmr+0x62e>
 8009ca0:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <tcp_slowtmr+0x664>)
 8009ca2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009ca6:	4915      	ldr	r1, [pc, #84]	; (8009cfc <tcp_slowtmr+0x67c>)
 8009ca8:	4810      	ldr	r0, [pc, #64]	; (8009cec <tcp_slowtmr+0x66c>)
 8009caa:	f008 f8a1 	bl	8011df0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	4a10      	ldr	r2, [pc, #64]	; (8009cf4 <tcp_slowtmr+0x674>)
 8009cb4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009cc0:	69f8      	ldr	r0, [r7, #28]
 8009cc2:	f7ff f93f 	bl	8008f44 <tcp_free>
 8009cc6:	e004      	b.n	8009cd2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1a9      	bne.n	8009c2c <tcp_slowtmr+0x5ac>
    }
  }
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	3730      	adds	r7, #48	; 0x30
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	080148a8 	.word	0x080148a8
 8009ce8:	08014d38 	.word	0x08014d38
 8009cec:	080148ec 	.word	0x080148ec
 8009cf0:	2000a7d0 	.word	0x2000a7d0
 8009cf4:	2000a7e0 	.word	0x2000a7e0
 8009cf8:	08014d68 	.word	0x08014d68
 8009cfc:	08014d90 	.word	0x08014d90

08009d00 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009d06:	4b2d      	ldr	r3, [pc, #180]	; (8009dbc <tcp_fasttmr+0xbc>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	4b2b      	ldr	r3, [pc, #172]	; (8009dbc <tcp_fasttmr+0xbc>)
 8009d10:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009d12:	4b2b      	ldr	r3, [pc, #172]	; (8009dc0 <tcp_fasttmr+0xc0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d18:	e048      	b.n	8009dac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	7f9a      	ldrb	r2, [r3, #30]
 8009d1e:	4b27      	ldr	r3, [pc, #156]	; (8009dbc <tcp_fasttmr+0xbc>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d03f      	beq.n	8009da6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009d26:	4b25      	ldr	r3, [pc, #148]	; (8009dbc <tcp_fasttmr+0xbc>)
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	8b5b      	ldrh	r3, [r3, #26]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d010      	beq.n	8009d5c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	8b5b      	ldrh	r3, [r3, #26]
 8009d3e:	f043 0302 	orr.w	r3, r3, #2
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f003 facf 	bl	800d2ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	8b5b      	ldrh	r3, [r3, #26]
 8009d52:	f023 0303 	bic.w	r3, r3, #3
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	8b5b      	ldrh	r3, [r3, #26]
 8009d60:	f003 0308 	and.w	r3, r3, #8
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	8b5b      	ldrh	r3, [r3, #26]
 8009d6c:	f023 0308 	bic.w	r3, r3, #8
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff fa78 	bl	800926c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009d8a:	4b0e      	ldr	r3, [pc, #56]	; (8009dc4 <tcp_fasttmr+0xc4>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f819 	bl	8009dc8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009d96:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <tcp_fasttmr+0xc4>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d000      	beq.n	8009da0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009d9e:	e7b8      	b.n	8009d12 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	607b      	str	r3, [r7, #4]
 8009da4:	e002      	b.n	8009dac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1b3      	bne.n	8009d1a <tcp_fasttmr+0x1a>
    }
  }
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	2000a7e6 	.word	0x2000a7e6
 8009dc0:	2000a7dc 	.word	0x2000a7dc
 8009dc4:	2000a7e4 	.word	0x2000a7e4

08009dc8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <tcp_process_refused_data+0x22>
 8009dd6:	4b37      	ldr	r3, [pc, #220]	; (8009eb4 <tcp_process_refused_data+0xec>)
 8009dd8:	f240 6209 	movw	r2, #1545	; 0x609
 8009ddc:	4936      	ldr	r1, [pc, #216]	; (8009eb8 <tcp_process_refused_data+0xf0>)
 8009dde:	4837      	ldr	r0, [pc, #220]	; (8009ebc <tcp_process_refused_data+0xf4>)
 8009de0:	f008 f806 	bl	8011df0 <iprintf>
 8009de4:	f06f 030f 	mvn.w	r3, #15
 8009de8:	e060      	b.n	8009eac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dee:	7b5b      	ldrb	r3, [r3, #13]
 8009df0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00b      	beq.n	8009e20 <tcp_process_refused_data+0x58>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6918      	ldr	r0, [r3, #16]
 8009e12:	2300      	movs	r3, #0
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	47a0      	blx	r4
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73fb      	strb	r3, [r7, #15]
 8009e1e:	e007      	b.n	8009e30 <tcp_process_refused_data+0x68>
 8009e20:	2300      	movs	r3, #0
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	2000      	movs	r0, #0
 8009e28:	f000 f8a4 	bl	8009f74 <tcp_recv_null>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d12a      	bne.n	8009e8e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	f003 0320 	and.w	r3, r3, #32
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d033      	beq.n	8009eaa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009e4a:	d005      	beq.n	8009e58 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e50:	3301      	adds	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <tcp_process_refused_data+0xb2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6918      	ldr	r0, [r3, #16]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2200      	movs	r2, #0
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	47a0      	blx	r4
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]
 8009e78:	e001      	b.n	8009e7e <tcp_process_refused_data+0xb6>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e82:	f113 0f0d 	cmn.w	r3, #13
 8009e86:	d110      	bne.n	8009eaa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009e88:	f06f 030c 	mvn.w	r3, #12
 8009e8c:	e00e      	b.n	8009eac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e92:	f113 0f0d 	cmn.w	r3, #13
 8009e96:	d102      	bne.n	8009e9e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009e98:	f06f 030c 	mvn.w	r3, #12
 8009e9c:	e006      	b.n	8009eac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009ea4:	f06f 0304 	mvn.w	r3, #4
 8009ea8:	e000      	b.n	8009eac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd90      	pop	{r4, r7, pc}
 8009eb4:	080148a8 	.word	0x080148a8
 8009eb8:	08014db8 	.word	0x08014db8
 8009ebc:	080148ec 	.word	0x080148ec

08009ec0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009ec8:	e007      	b.n	8009eda <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f80a 	bl	8009eea <tcp_seg_free>
    seg = next;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1f4      	bne.n	8009eca <tcp_segs_free+0xa>
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00c      	beq.n	8009f12 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fd7d 	bl	8008a04 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009f0a:	6879      	ldr	r1, [r7, #4]
 8009f0c:	2003      	movs	r0, #3
 8009f0e:	f7fd ff03 	bl	8007d18 <memp_free>
  }
}
 8009f12:	bf00      	nop
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <tcp_seg_copy+0x1c>
 8009f2a:	4b0f      	ldr	r3, [pc, #60]	; (8009f68 <tcp_seg_copy+0x4c>)
 8009f2c:	f240 6282 	movw	r2, #1666	; 0x682
 8009f30:	490e      	ldr	r1, [pc, #56]	; (8009f6c <tcp_seg_copy+0x50>)
 8009f32:	480f      	ldr	r0, [pc, #60]	; (8009f70 <tcp_seg_copy+0x54>)
 8009f34:	f007 ff5c 	bl	8011df0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009f38:	2003      	movs	r0, #3
 8009f3a:	f7fd fe7d 	bl	8007c38 <memp_malloc>
 8009f3e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <tcp_seg_copy+0x2e>
    return NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e00a      	b.n	8009f60 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009f4a:	2210      	movs	r2, #16
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f008 f8af 	bl	80120b2 <memcpy>
  pbuf_ref(cseg->p);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fdf3 	bl	8008b44 <pbuf_ref>
  return cseg;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	080148a8 	.word	0x080148a8
 8009f6c:	08014dfc 	.word	0x08014dfc
 8009f70:	080148ec 	.word	0x080148ec

08009f74 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d109      	bne.n	8009f9c <tcp_recv_null+0x28>
 8009f88:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <tcp_recv_null+0x60>)
 8009f8a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009f8e:	4912      	ldr	r1, [pc, #72]	; (8009fd8 <tcp_recv_null+0x64>)
 8009f90:	4812      	ldr	r0, [pc, #72]	; (8009fdc <tcp_recv_null+0x68>)
 8009f92:	f007 ff2d 	bl	8011df0 <iprintf>
 8009f96:	f06f 030f 	mvn.w	r3, #15
 8009f9a:	e016      	b.n	8009fca <tcp_recv_null+0x56>

  if (p != NULL) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	891b      	ldrh	r3, [r3, #8]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f7ff fb19 	bl	80095e0 <tcp_recved>
    pbuf_free(p);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7fe fd28 	bl	8008a04 <pbuf_free>
 8009fb4:	e008      	b.n	8009fc8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d104      	bne.n	8009fc8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009fbe:	68b8      	ldr	r0, [r7, #8]
 8009fc0:	f7ff f9be 	bl	8009340 <tcp_close>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	e000      	b.n	8009fca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	080148a8 	.word	0x080148a8
 8009fd8:	08014e18 	.word	0x08014e18
 8009fdc:	080148ec 	.word	0x080148ec

08009fe0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	db01      	blt.n	8009ff6 <tcp_kill_prio+0x16>
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	e000      	b.n	8009ff8 <tcp_kill_prio+0x18>
 8009ff6:	237f      	movs	r3, #127	; 0x7f
 8009ff8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d034      	beq.n	800a06a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a000:	7afb      	ldrb	r3, [r7, #11]
 800a002:	3b01      	subs	r3, #1
 800a004:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a00e:	4b19      	ldr	r3, [pc, #100]	; (800a074 <tcp_kill_prio+0x94>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	e01f      	b.n	800a056 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	7d5b      	ldrb	r3, [r3, #21]
 800a01a:	7afa      	ldrb	r2, [r7, #11]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d80c      	bhi.n	800a03a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a024:	7afa      	ldrb	r2, [r7, #11]
 800a026:	429a      	cmp	r2, r3
 800a028:	d112      	bne.n	800a050 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <tcp_kill_prio+0x98>)
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	429a      	cmp	r2, r3
 800a038:	d80a      	bhi.n	800a050 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a03a:	4b0f      	ldr	r3, [pc, #60]	; (800a078 <tcp_kill_prio+0x98>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	7d5b      	ldrb	r3, [r3, #21]
 800a04e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1dc      	bne.n	800a016 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d004      	beq.n	800a06c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a062:	6938      	ldr	r0, [r7, #16]
 800a064:	f7ff fa56 	bl	8009514 <tcp_abort>
 800a068:	e000      	b.n	800a06c <tcp_kill_prio+0x8c>
    return;
 800a06a:	bf00      	nop
  }
}
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	2000a7dc 	.word	0x2000a7dc
 800a078:	2000a7d0 	.word	0x2000a7d0

0800a07c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d009      	beq.n	800a0a0 <tcp_kill_state+0x24>
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b09      	cmp	r3, #9
 800a090:	d006      	beq.n	800a0a0 <tcp_kill_state+0x24>
 800a092:	4b1a      	ldr	r3, [pc, #104]	; (800a0fc <tcp_kill_state+0x80>)
 800a094:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a098:	4919      	ldr	r1, [pc, #100]	; (800a100 <tcp_kill_state+0x84>)
 800a09a:	481a      	ldr	r0, [pc, #104]	; (800a104 <tcp_kill_state+0x88>)
 800a09c:	f007 fea8 	bl	8011df0 <iprintf>

  inactivity = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0a8:	4b17      	ldr	r3, [pc, #92]	; (800a108 <tcp_kill_state+0x8c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e017      	b.n	800a0e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	7d1b      	ldrb	r3, [r3, #20]
 800a0b4:	79fa      	ldrb	r2, [r7, #7]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d10f      	bne.n	800a0da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a0ba:	4b14      	ldr	r3, [pc, #80]	; (800a10c <tcp_kill_state+0x90>)
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d807      	bhi.n	800a0da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a0ca:	4b10      	ldr	r3, [pc, #64]	; (800a10c <tcp_kill_state+0x90>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1e4      	bne.n	800a0b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	6938      	ldr	r0, [r7, #16]
 800a0f0:	f7ff f952 	bl	8009398 <tcp_abandon>
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	080148a8 	.word	0x080148a8
 800a100:	08014e34 	.word	0x08014e34
 800a104:	080148ec 	.word	0x080148ec
 800a108:	2000a7dc 	.word	0x2000a7dc
 800a10c:	2000a7d0 	.word	0x2000a7d0

0800a110 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a11e:	4b12      	ldr	r3, [pc, #72]	; (800a168 <tcp_kill_timewait+0x58>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e012      	b.n	800a14c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a126:	4b11      	ldr	r3, [pc, #68]	; (800a16c <tcp_kill_timewait+0x5c>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	429a      	cmp	r2, r3
 800a134:	d807      	bhi.n	800a146 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a136:	4b0d      	ldr	r3, [pc, #52]	; (800a16c <tcp_kill_timewait+0x5c>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e9      	bne.n	800a126 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a158:	68b8      	ldr	r0, [r7, #8]
 800a15a:	f7ff f9db 	bl	8009514 <tcp_abort>
  }
}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	2000a7e0 	.word	0x2000a7e0
 800a16c:	2000a7d0 	.word	0x2000a7d0

0800a170 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <tcp_handle_closepend+0x48>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a17c:	e014      	b.n	800a1a8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	8b5b      	ldrh	r3, [r3, #26]
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d009      	beq.n	800a1a4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	8b5b      	ldrh	r3, [r3, #26]
 800a194:	f023 0308 	bic.w	r3, r3, #8
 800a198:	b29a      	uxth	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff f864 	bl	800926c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e7      	bne.n	800a17e <tcp_handle_closepend+0xe>
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	2000a7dc 	.word	0x2000a7dc

0800a1bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a1c6:	2001      	movs	r0, #1
 800a1c8:	f7fd fd36 	bl	8007c38 <memp_malloc>
 800a1cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d126      	bne.n	800a222 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a1d4:	f7ff ffcc 	bl	800a170 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a1d8:	f7ff ff9a 	bl	800a110 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a1dc:	2001      	movs	r0, #1
 800a1de:	f7fd fd2b 	bl	8007c38 <memp_malloc>
 800a1e2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d11b      	bne.n	800a222 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a1ea:	2009      	movs	r0, #9
 800a1ec:	f7ff ff46 	bl	800a07c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	f7fd fd21 	bl	8007c38 <memp_malloc>
 800a1f6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d111      	bne.n	800a222 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a1fe:	2008      	movs	r0, #8
 800a200:	f7ff ff3c 	bl	800a07c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a204:	2001      	movs	r0, #1
 800a206:	f7fd fd17 	bl	8007c38 <memp_malloc>
 800a20a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d107      	bne.n	800a222 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fee3 	bl	8009fe0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a21a:	2001      	movs	r0, #1
 800a21c:	f7fd fd0c 	bl	8007c38 <memp_malloc>
 800a220:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d03f      	beq.n	800a2a8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a228:	229c      	movs	r2, #156	; 0x9c
 800a22a:	2100      	movs	r1, #0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f007 fe44 	bl	8011eba <memset>
    pcb->prio = prio;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	79fa      	ldrb	r2, [r7, #7]
 800a236:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a23e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	22ff      	movs	r2, #255	; 0xff
 800a256:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a25e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2206      	movs	r2, #6
 800a264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2206      	movs	r2, #6
 800a26c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a274:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2201      	movs	r2, #1
 800a27a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a27e:	4b0d      	ldr	r3, [pc, #52]	; (800a2b4 <tcp_alloc+0xf8>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a286:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <tcp_alloc+0xfc>)
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a294:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4a08      	ldr	r2, [pc, #32]	; (800a2bc <tcp_alloc+0x100>)
 800a29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <tcp_alloc+0x104>)
 800a2a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	2000a7d0 	.word	0x2000a7d0
 800a2b8:	2000a7e6 	.word	0x2000a7e6
 800a2bc:	08009f75 	.word	0x08009f75
 800a2c0:	006ddd00 	.word	0x006ddd00

0800a2c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d107      	bne.n	800a2e2 <tcp_pcb_purge+0x1e>
 800a2d2:	4b21      	ldr	r3, [pc, #132]	; (800a358 <tcp_pcb_purge+0x94>)
 800a2d4:	f640 0251 	movw	r2, #2129	; 0x851
 800a2d8:	4920      	ldr	r1, [pc, #128]	; (800a35c <tcp_pcb_purge+0x98>)
 800a2da:	4821      	ldr	r0, [pc, #132]	; (800a360 <tcp_pcb_purge+0x9c>)
 800a2dc:	f007 fd88 	bl	8011df0 <iprintf>
 800a2e0:	e037      	b.n	800a352 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	7d1b      	ldrb	r3, [r3, #20]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d033      	beq.n	800a352 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a2ee:	2b0a      	cmp	r3, #10
 800a2f0:	d02f      	beq.n	800a352 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d02b      	beq.n	800a352 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d007      	beq.n	800a312 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a306:	4618      	mov	r0, r3
 800a308:	f7fe fb7c 	bl	8008a04 <pbuf_free>
      pcb->refused_data = NULL;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f986 	bl	800a62c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a326:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff fdc7 	bl	8009ec0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fdc2 	bl	8009ec0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	66da      	str	r2, [r3, #108]	; 0x6c
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	080148a8 	.word	0x080148a8
 800a35c:	08014ef4 	.word	0x08014ef4
 800a360:	080148ec 	.word	0x080148ec

0800a364 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <tcp_pcb_remove+0x1e>
 800a374:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <tcp_pcb_remove+0x10c>)
 800a376:	f640 0283 	movw	r2, #2179	; 0x883
 800a37a:	493e      	ldr	r1, [pc, #248]	; (800a474 <tcp_pcb_remove+0x110>)
 800a37c:	483e      	ldr	r0, [pc, #248]	; (800a478 <tcp_pcb_remove+0x114>)
 800a37e:	f007 fd37 	bl	8011df0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d106      	bne.n	800a396 <tcp_pcb_remove+0x32>
 800a388:	4b39      	ldr	r3, [pc, #228]	; (800a470 <tcp_pcb_remove+0x10c>)
 800a38a:	f640 0284 	movw	r2, #2180	; 0x884
 800a38e:	493b      	ldr	r1, [pc, #236]	; (800a47c <tcp_pcb_remove+0x118>)
 800a390:	4839      	ldr	r0, [pc, #228]	; (800a478 <tcp_pcb_remove+0x114>)
 800a392:	f007 fd2d 	bl	8011df0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d105      	bne.n	800a3ac <tcp_pcb_remove+0x48>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	e013      	b.n	800a3d4 <tcp_pcb_remove+0x70>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	e00c      	b.n	800a3ce <tcp_pcb_remove+0x6a>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d104      	bne.n	800a3c8 <tcp_pcb_remove+0x64>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	60da      	str	r2, [r3, #12]
 800a3c6:	e005      	b.n	800a3d4 <tcp_pcb_remove+0x70>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	60fb      	str	r3, [r7, #12]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1ef      	bne.n	800a3b4 <tcp_pcb_remove+0x50>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a3da:	6838      	ldr	r0, [r7, #0]
 800a3dc:	f7ff ff72 	bl	800a2c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	7d1b      	ldrb	r3, [r3, #20]
 800a3e4:	2b0a      	cmp	r3, #10
 800a3e6:	d013      	beq.n	800a410 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d00f      	beq.n	800a410 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	8b5b      	ldrh	r3, [r3, #26]
 800a3f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	8b5b      	ldrh	r3, [r3, #26]
 800a400:	f043 0302 	orr.w	r3, r3, #2
 800a404:	b29a      	uxth	r2, r3
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	f002 ff6e 	bl	800d2ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	7d1b      	ldrb	r3, [r3, #20]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d020      	beq.n	800a45a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d006      	beq.n	800a42e <tcp_pcb_remove+0xca>
 800a420:	4b13      	ldr	r3, [pc, #76]	; (800a470 <tcp_pcb_remove+0x10c>)
 800a422:	f640 0293 	movw	r2, #2195	; 0x893
 800a426:	4916      	ldr	r1, [pc, #88]	; (800a480 <tcp_pcb_remove+0x11c>)
 800a428:	4813      	ldr	r0, [pc, #76]	; (800a478 <tcp_pcb_remove+0x114>)
 800a42a:	f007 fce1 	bl	8011df0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a432:	2b00      	cmp	r3, #0
 800a434:	d006      	beq.n	800a444 <tcp_pcb_remove+0xe0>
 800a436:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <tcp_pcb_remove+0x10c>)
 800a438:	f640 0294 	movw	r2, #2196	; 0x894
 800a43c:	4911      	ldr	r1, [pc, #68]	; (800a484 <tcp_pcb_remove+0x120>)
 800a43e:	480e      	ldr	r0, [pc, #56]	; (800a478 <tcp_pcb_remove+0x114>)
 800a440:	f007 fcd6 	bl	8011df0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d006      	beq.n	800a45a <tcp_pcb_remove+0xf6>
 800a44c:	4b08      	ldr	r3, [pc, #32]	; (800a470 <tcp_pcb_remove+0x10c>)
 800a44e:	f640 0296 	movw	r2, #2198	; 0x896
 800a452:	490d      	ldr	r1, [pc, #52]	; (800a488 <tcp_pcb_remove+0x124>)
 800a454:	4808      	ldr	r0, [pc, #32]	; (800a478 <tcp_pcb_remove+0x114>)
 800a456:	f007 fccb 	bl	8011df0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2200      	movs	r2, #0
 800a45e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a466:	bf00      	nop
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	080148a8 	.word	0x080148a8
 800a474:	08014f10 	.word	0x08014f10
 800a478:	080148ec 	.word	0x080148ec
 800a47c:	08014f2c 	.word	0x08014f2c
 800a480:	08014f4c 	.word	0x08014f4c
 800a484:	08014f64 	.word	0x08014f64
 800a488:	08014f80 	.word	0x08014f80

0800a48c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <tcp_next_iss+0x1c>
 800a49a:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <tcp_next_iss+0x38>)
 800a49c:	f640 02af 	movw	r2, #2223	; 0x8af
 800a4a0:	4909      	ldr	r1, [pc, #36]	; (800a4c8 <tcp_next_iss+0x3c>)
 800a4a2:	480a      	ldr	r0, [pc, #40]	; (800a4cc <tcp_next_iss+0x40>)
 800a4a4:	f007 fca4 	bl	8011df0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a4a8:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <tcp_next_iss+0x44>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <tcp_next_iss+0x48>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	4a07      	ldr	r2, [pc, #28]	; (800a4d0 <tcp_next_iss+0x44>)
 800a4b4:	6013      	str	r3, [r2, #0]
  return iss;
 800a4b6:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <tcp_next_iss+0x44>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	080148a8 	.word	0x080148a8
 800a4c8:	08014f98 	.word	0x08014f98
 800a4cc:	080148ec 	.word	0x080148ec
 800a4d0:	20000024 	.word	0x20000024
 800a4d4:	2000a7d0 	.word	0x2000a7d0

0800a4d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d106      	bne.n	800a4fa <tcp_eff_send_mss_netif+0x22>
 800a4ec:	4b14      	ldr	r3, [pc, #80]	; (800a540 <tcp_eff_send_mss_netif+0x68>)
 800a4ee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a4f2:	4914      	ldr	r1, [pc, #80]	; (800a544 <tcp_eff_send_mss_netif+0x6c>)
 800a4f4:	4814      	ldr	r0, [pc, #80]	; (800a548 <tcp_eff_send_mss_netif+0x70>)
 800a4f6:	f007 fc7b 	bl	8011df0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a500:	89fb      	ldrh	r3, [r7, #14]
 800a502:	e019      	b.n	800a538 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a508:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a50a:	8afb      	ldrh	r3, [r7, #22]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d012      	beq.n	800a536 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a510:	2328      	movs	r3, #40	; 0x28
 800a512:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a514:	8afa      	ldrh	r2, [r7, #22]
 800a516:	8abb      	ldrh	r3, [r7, #20]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d904      	bls.n	800a526 <tcp_eff_send_mss_netif+0x4e>
 800a51c:	8afa      	ldrh	r2, [r7, #22]
 800a51e:	8abb      	ldrh	r3, [r7, #20]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	b29b      	uxth	r3, r3
 800a524:	e000      	b.n	800a528 <tcp_eff_send_mss_netif+0x50>
 800a526:	2300      	movs	r3, #0
 800a528:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a52a:	8a7a      	ldrh	r2, [r7, #18]
 800a52c:	89fb      	ldrh	r3, [r7, #14]
 800a52e:	4293      	cmp	r3, r2
 800a530:	bf28      	it	cs
 800a532:	4613      	movcs	r3, r2
 800a534:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a536:	89fb      	ldrh	r3, [r7, #14]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	080148a8 	.word	0x080148a8
 800a544:	08014fb4 	.word	0x08014fb4
 800a548:	080148ec 	.word	0x080148ec

0800a54c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d119      	bne.n	800a594 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a560:	4b10      	ldr	r3, [pc, #64]	; (800a5a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a562:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a566:	4910      	ldr	r1, [pc, #64]	; (800a5a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a568:	4810      	ldr	r0, [pc, #64]	; (800a5ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a56a:	f007 fc41 	bl	8011df0 <iprintf>

  while (pcb != NULL) {
 800a56e:	e011      	b.n	800a594 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d108      	bne.n	800a58e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7fe ffc6 	bl	8009514 <tcp_abort>
      pcb = next;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	e002      	b.n	800a594 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1ea      	bne.n	800a570 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a59a:	bf00      	nop
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	080148a8 	.word	0x080148a8
 800a5a8:	08014fdc 	.word	0x08014fdc
 800a5ac:	080148ec 	.word	0x080148ec

0800a5b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d02a      	beq.n	800a616 <tcp_netif_ip_addr_changed+0x66>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d026      	beq.n	800a616 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a5c8:	4b15      	ldr	r3, [pc, #84]	; (800a620 <tcp_netif_ip_addr_changed+0x70>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff ffbc 	bl	800a54c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a5d4:	4b13      	ldr	r3, [pc, #76]	; (800a624 <tcp_netif_ip_addr_changed+0x74>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff ffb6 	bl	800a54c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d017      	beq.n	800a616 <tcp_netif_ip_addr_changed+0x66>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d013      	beq.n	800a616 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <tcp_netif_ip_addr_changed+0x78>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	e00c      	b.n	800a610 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d103      	bne.n	800a60a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1ef      	bne.n	800a5f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a616:	bf00      	nop
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	2000a7dc 	.word	0x2000a7dc
 800a624:	2000a7d4 	.word	0x2000a7d4
 800a628:	2000a7d8 	.word	0x2000a7d8

0800a62c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff fc3d 	bl	8009ec0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b08d      	sub	sp, #52	; 0x34
 800a658:	af04      	add	r7, sp, #16
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d105      	bne.n	800a670 <tcp_input+0x1c>
 800a664:	4b9b      	ldr	r3, [pc, #620]	; (800a8d4 <tcp_input+0x280>)
 800a666:	2283      	movs	r2, #131	; 0x83
 800a668:	499b      	ldr	r1, [pc, #620]	; (800a8d8 <tcp_input+0x284>)
 800a66a:	489c      	ldr	r0, [pc, #624]	; (800a8dc <tcp_input+0x288>)
 800a66c:	f007 fbc0 	bl	8011df0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	4a9a      	ldr	r2, [pc, #616]	; (800a8e0 <tcp_input+0x28c>)
 800a676:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	895b      	ldrh	r3, [r3, #10]
 800a67c:	2b13      	cmp	r3, #19
 800a67e:	f240 83d1 	bls.w	800ae24 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a682:	4b98      	ldr	r3, [pc, #608]	; (800a8e4 <tcp_input+0x290>)
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	4a97      	ldr	r2, [pc, #604]	; (800a8e4 <tcp_input+0x290>)
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	4611      	mov	r1, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f005 fd7d 	bl	801018c <ip4_addr_isbroadcast_u32>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	f040 83c7 	bne.w	800ae28 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a69a:	4b92      	ldr	r3, [pc, #584]	; (800a8e4 <tcp_input+0x290>)
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a6a2:	2be0      	cmp	r3, #224	; 0xe0
 800a6a4:	f000 83c0 	beq.w	800ae28 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a6a8:	4b8d      	ldr	r3, [pc, #564]	; (800a8e0 <tcp_input+0x28c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	899b      	ldrh	r3, [r3, #12]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fc fe49 	bl	8007348 <lwip_htons>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	0b1b      	lsrs	r3, r3, #12
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a6c2:	7cbb      	ldrb	r3, [r7, #18]
 800a6c4:	2b13      	cmp	r3, #19
 800a6c6:	f240 83b1 	bls.w	800ae2c <tcp_input+0x7d8>
 800a6ca:	7cbb      	ldrb	r3, [r7, #18]
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	891b      	ldrh	r3, [r3, #8]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	f200 83aa 	bhi.w	800ae2c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a6d8:	7cbb      	ldrb	r3, [r7, #18]
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	3b14      	subs	r3, #20
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	4b81      	ldr	r3, [pc, #516]	; (800a8e8 <tcp_input+0x294>)
 800a6e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a6e4:	4b81      	ldr	r3, [pc, #516]	; (800a8ec <tcp_input+0x298>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	895a      	ldrh	r2, [r3, #10]
 800a6ee:	7cbb      	ldrb	r3, [r7, #18]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d309      	bcc.n	800a70a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a6f6:	4b7c      	ldr	r3, [pc, #496]	; (800a8e8 <tcp_input+0x294>)
 800a6f8:	881a      	ldrh	r2, [r3, #0]
 800a6fa:	4b7d      	ldr	r3, [pc, #500]	; (800a8f0 <tcp_input+0x29c>)
 800a6fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a6fe:	7cbb      	ldrb	r3, [r7, #18]
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7fe f8f8 	bl	80088f8 <pbuf_remove_header>
 800a708:	e04e      	b.n	800a7a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d105      	bne.n	800a71e <tcp_input+0xca>
 800a712:	4b70      	ldr	r3, [pc, #448]	; (800a8d4 <tcp_input+0x280>)
 800a714:	22c2      	movs	r2, #194	; 0xc2
 800a716:	4977      	ldr	r1, [pc, #476]	; (800a8f4 <tcp_input+0x2a0>)
 800a718:	4870      	ldr	r0, [pc, #448]	; (800a8dc <tcp_input+0x288>)
 800a71a:	f007 fb69 	bl	8011df0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a71e:	2114      	movs	r1, #20
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7fe f8e9 	bl	80088f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	895a      	ldrh	r2, [r3, #10]
 800a72a:	4b71      	ldr	r3, [pc, #452]	; (800a8f0 <tcp_input+0x29c>)
 800a72c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a72e:	4b6e      	ldr	r3, [pc, #440]	; (800a8e8 <tcp_input+0x294>)
 800a730:	881a      	ldrh	r2, [r3, #0]
 800a732:	4b6f      	ldr	r3, [pc, #444]	; (800a8f0 <tcp_input+0x29c>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a73a:	4b6d      	ldr	r3, [pc, #436]	; (800a8f0 <tcp_input+0x29c>)
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7fe f8d9 	bl	80088f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	895b      	ldrh	r3, [r3, #10]
 800a74c:	8a3a      	ldrh	r2, [r7, #16]
 800a74e:	429a      	cmp	r2, r3
 800a750:	f200 836e 	bhi.w	800ae30 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	4a64      	ldr	r2, [pc, #400]	; (800a8ec <tcp_input+0x298>)
 800a75c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	8a3a      	ldrh	r2, [r7, #16]
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe f8c6 	bl	80088f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	891a      	ldrh	r2, [r3, #8]
 800a770:	8a3b      	ldrh	r3, [r7, #16]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	b29a      	uxth	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	895b      	ldrh	r3, [r3, #10]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <tcp_input+0x13a>
 800a782:	4b54      	ldr	r3, [pc, #336]	; (800a8d4 <tcp_input+0x280>)
 800a784:	22df      	movs	r2, #223	; 0xdf
 800a786:	495c      	ldr	r1, [pc, #368]	; (800a8f8 <tcp_input+0x2a4>)
 800a788:	4854      	ldr	r0, [pc, #336]	; (800a8dc <tcp_input+0x288>)
 800a78a:	f007 fb31 	bl	8011df0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	891a      	ldrh	r2, [r3, #8]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	891b      	ldrh	r3, [r3, #8]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d005      	beq.n	800a7a8 <tcp_input+0x154>
 800a79c:	4b4d      	ldr	r3, [pc, #308]	; (800a8d4 <tcp_input+0x280>)
 800a79e:	22e0      	movs	r2, #224	; 0xe0
 800a7a0:	4956      	ldr	r1, [pc, #344]	; (800a8fc <tcp_input+0x2a8>)
 800a7a2:	484e      	ldr	r0, [pc, #312]	; (800a8dc <tcp_input+0x288>)
 800a7a4:	f007 fb24 	bl	8011df0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a7a8:	4b4d      	ldr	r3, [pc, #308]	; (800a8e0 <tcp_input+0x28c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	4a4b      	ldr	r2, [pc, #300]	; (800a8e0 <tcp_input+0x28c>)
 800a7b2:	6814      	ldr	r4, [r2, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fc fdc7 	bl	8007348 <lwip_htons>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a7be:	4b48      	ldr	r3, [pc, #288]	; (800a8e0 <tcp_input+0x28c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	885b      	ldrh	r3, [r3, #2]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	4a46      	ldr	r2, [pc, #280]	; (800a8e0 <tcp_input+0x28c>)
 800a7c8:	6814      	ldr	r4, [r2, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fc fdbc 	bl	8007348 <lwip_htons>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a7d4:	4b42      	ldr	r3, [pc, #264]	; (800a8e0 <tcp_input+0x28c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4a41      	ldr	r2, [pc, #260]	; (800a8e0 <tcp_input+0x28c>)
 800a7dc:	6814      	ldr	r4, [r2, #0]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fc fdc7 	bl	8007372 <lwip_htonl>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	6063      	str	r3, [r4, #4]
 800a7e8:	6863      	ldr	r3, [r4, #4]
 800a7ea:	4a45      	ldr	r2, [pc, #276]	; (800a900 <tcp_input+0x2ac>)
 800a7ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a7ee:	4b3c      	ldr	r3, [pc, #240]	; (800a8e0 <tcp_input+0x28c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	4a3a      	ldr	r2, [pc, #232]	; (800a8e0 <tcp_input+0x28c>)
 800a7f6:	6814      	ldr	r4, [r2, #0]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fc fdba 	bl	8007372 <lwip_htonl>
 800a7fe:	4603      	mov	r3, r0
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	4a3f      	ldr	r2, [pc, #252]	; (800a904 <tcp_input+0x2b0>)
 800a806:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a808:	4b35      	ldr	r3, [pc, #212]	; (800a8e0 <tcp_input+0x28c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	89db      	ldrh	r3, [r3, #14]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	4a33      	ldr	r2, [pc, #204]	; (800a8e0 <tcp_input+0x28c>)
 800a812:	6814      	ldr	r4, [r2, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f7fc fd97 	bl	8007348 <lwip_htons>
 800a81a:	4603      	mov	r3, r0
 800a81c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a81e:	4b30      	ldr	r3, [pc, #192]	; (800a8e0 <tcp_input+0x28c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	899b      	ldrh	r3, [r3, #12]
 800a824:	b29b      	uxth	r3, r3
 800a826:	4618      	mov	r0, r3
 800a828:	f7fc fd8e 	bl	8007348 <lwip_htons>
 800a82c:	4603      	mov	r3, r0
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a834:	b2da      	uxtb	r2, r3
 800a836:	4b34      	ldr	r3, [pc, #208]	; (800a908 <tcp_input+0x2b4>)
 800a838:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	891a      	ldrh	r2, [r3, #8]
 800a83e:	4b33      	ldr	r3, [pc, #204]	; (800a90c <tcp_input+0x2b8>)
 800a840:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a842:	4b31      	ldr	r3, [pc, #196]	; (800a908 <tcp_input+0x2b4>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	f003 0303 	and.w	r3, r3, #3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00c      	beq.n	800a868 <tcp_input+0x214>
    tcplen++;
 800a84e:	4b2f      	ldr	r3, [pc, #188]	; (800a90c <tcp_input+0x2b8>)
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	b29a      	uxth	r2, r3
 800a856:	4b2d      	ldr	r3, [pc, #180]	; (800a90c <tcp_input+0x2b8>)
 800a858:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	891a      	ldrh	r2, [r3, #8]
 800a85e:	4b2b      	ldr	r3, [pc, #172]	; (800a90c <tcp_input+0x2b8>)
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	f200 82e6 	bhi.w	800ae34 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a868:	2300      	movs	r3, #0
 800a86a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a86c:	4b28      	ldr	r3, [pc, #160]	; (800a910 <tcp_input+0x2bc>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	61fb      	str	r3, [r7, #28]
 800a872:	e09d      	b.n	800a9b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	7d1b      	ldrb	r3, [r3, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d105      	bne.n	800a888 <tcp_input+0x234>
 800a87c:	4b15      	ldr	r3, [pc, #84]	; (800a8d4 <tcp_input+0x280>)
 800a87e:	22fb      	movs	r2, #251	; 0xfb
 800a880:	4924      	ldr	r1, [pc, #144]	; (800a914 <tcp_input+0x2c0>)
 800a882:	4816      	ldr	r0, [pc, #88]	; (800a8dc <tcp_input+0x288>)
 800a884:	f007 fab4 	bl	8011df0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	7d1b      	ldrb	r3, [r3, #20]
 800a88c:	2b0a      	cmp	r3, #10
 800a88e:	d105      	bne.n	800a89c <tcp_input+0x248>
 800a890:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <tcp_input+0x280>)
 800a892:	22fc      	movs	r2, #252	; 0xfc
 800a894:	4920      	ldr	r1, [pc, #128]	; (800a918 <tcp_input+0x2c4>)
 800a896:	4811      	ldr	r0, [pc, #68]	; (800a8dc <tcp_input+0x288>)
 800a898:	f007 faaa 	bl	8011df0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	7d1b      	ldrb	r3, [r3, #20]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d105      	bne.n	800a8b0 <tcp_input+0x25c>
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <tcp_input+0x280>)
 800a8a6:	22fd      	movs	r2, #253	; 0xfd
 800a8a8:	491c      	ldr	r1, [pc, #112]	; (800a91c <tcp_input+0x2c8>)
 800a8aa:	480c      	ldr	r0, [pc, #48]	; (800a8dc <tcp_input+0x288>)
 800a8ac:	f007 faa0 	bl	8011df0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	7a1b      	ldrb	r3, [r3, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d033      	beq.n	800a920 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	7a1a      	ldrb	r2, [r3, #8]
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <tcp_input+0x290>)
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d029      	beq.n	800a920 <tcp_input+0x2cc>
      prev = pcb;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	61bb      	str	r3, [r7, #24]
      continue;
 800a8d0:	e06b      	b.n	800a9aa <tcp_input+0x356>
 800a8d2:	bf00      	nop
 800a8d4:	08015010 	.word	0x08015010
 800a8d8:	08015044 	.word	0x08015044
 800a8dc:	0801505c 	.word	0x0801505c
 800a8e0:	2000a7f8 	.word	0x2000a7f8
 800a8e4:	200050a0 	.word	0x200050a0
 800a8e8:	2000a7fc 	.word	0x2000a7fc
 800a8ec:	2000a800 	.word	0x2000a800
 800a8f0:	2000a7fe 	.word	0x2000a7fe
 800a8f4:	08015084 	.word	0x08015084
 800a8f8:	08015094 	.word	0x08015094
 800a8fc:	080150a0 	.word	0x080150a0
 800a900:	2000a808 	.word	0x2000a808
 800a904:	2000a80c 	.word	0x2000a80c
 800a908:	2000a814 	.word	0x2000a814
 800a90c:	2000a812 	.word	0x2000a812
 800a910:	2000a7dc 	.word	0x2000a7dc
 800a914:	080150c0 	.word	0x080150c0
 800a918:	080150e8 	.word	0x080150e8
 800a91c:	08015114 	.word	0x08015114
    }

    if (pcb->remote_port == tcphdr->src &&
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	8b1a      	ldrh	r2, [r3, #24]
 800a924:	4b72      	ldr	r3, [pc, #456]	; (800aaf0 <tcp_input+0x49c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d13a      	bne.n	800a9a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	8ada      	ldrh	r2, [r3, #22]
 800a934:	4b6e      	ldr	r3, [pc, #440]	; (800aaf0 <tcp_input+0x49c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	885b      	ldrh	r3, [r3, #2]
 800a93a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d132      	bne.n	800a9a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	685a      	ldr	r2, [r3, #4]
 800a944:	4b6b      	ldr	r3, [pc, #428]	; (800aaf4 <tcp_input+0x4a0>)
 800a946:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a948:	429a      	cmp	r2, r3
 800a94a:	d12c      	bne.n	800a9a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	4b68      	ldr	r3, [pc, #416]	; (800aaf4 <tcp_input+0x4a0>)
 800a952:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a954:	429a      	cmp	r2, r3
 800a956:	d126      	bne.n	800a9a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	69fa      	ldr	r2, [r7, #28]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d106      	bne.n	800a970 <tcp_input+0x31c>
 800a962:	4b65      	ldr	r3, [pc, #404]	; (800aaf8 <tcp_input+0x4a4>)
 800a964:	f240 120d 	movw	r2, #269	; 0x10d
 800a968:	4964      	ldr	r1, [pc, #400]	; (800aafc <tcp_input+0x4a8>)
 800a96a:	4865      	ldr	r0, [pc, #404]	; (800ab00 <tcp_input+0x4ac>)
 800a96c:	f007 fa40 	bl	8011df0 <iprintf>
      if (prev != NULL) {
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00a      	beq.n	800a98c <tcp_input+0x338>
        prev->next = pcb->next;
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a97e:	4b61      	ldr	r3, [pc, #388]	; (800ab04 <tcp_input+0x4b0>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a986:	4a5f      	ldr	r2, [pc, #380]	; (800ab04 <tcp_input+0x4b0>)
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	69fa      	ldr	r2, [r7, #28]
 800a992:	429a      	cmp	r2, r3
 800a994:	d111      	bne.n	800a9ba <tcp_input+0x366>
 800a996:	4b58      	ldr	r3, [pc, #352]	; (800aaf8 <tcp_input+0x4a4>)
 800a998:	f240 1215 	movw	r2, #277	; 0x115
 800a99c:	495a      	ldr	r1, [pc, #360]	; (800ab08 <tcp_input+0x4b4>)
 800a99e:	4858      	ldr	r0, [pc, #352]	; (800ab00 <tcp_input+0x4ac>)
 800a9a0:	f007 fa26 	bl	8011df0 <iprintf>
      break;
 800a9a4:	e009      	b.n	800a9ba <tcp_input+0x366>
    }
    prev = pcb;
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	61fb      	str	r3, [r7, #28]
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f47f af5e 	bne.w	800a874 <tcp_input+0x220>
 800a9b8:	e000      	b.n	800a9bc <tcp_input+0x368>
      break;
 800a9ba:	bf00      	nop
  }

  if (pcb == NULL) {
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f040 80aa 	bne.w	800ab18 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9c4:	4b51      	ldr	r3, [pc, #324]	; (800ab0c <tcp_input+0x4b8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	61fb      	str	r3, [r7, #28]
 800a9ca:	e03f      	b.n	800aa4c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	7d1b      	ldrb	r3, [r3, #20]
 800a9d0:	2b0a      	cmp	r3, #10
 800a9d2:	d006      	beq.n	800a9e2 <tcp_input+0x38e>
 800a9d4:	4b48      	ldr	r3, [pc, #288]	; (800aaf8 <tcp_input+0x4a4>)
 800a9d6:	f240 121f 	movw	r2, #287	; 0x11f
 800a9da:	494d      	ldr	r1, [pc, #308]	; (800ab10 <tcp_input+0x4bc>)
 800a9dc:	4848      	ldr	r0, [pc, #288]	; (800ab00 <tcp_input+0x4ac>)
 800a9de:	f007 fa07 	bl	8011df0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	7a1b      	ldrb	r3, [r3, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d009      	beq.n	800a9fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	7a1a      	ldrb	r2, [r3, #8]
 800a9ee:	4b41      	ldr	r3, [pc, #260]	; (800aaf4 <tcp_input+0x4a0>)
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d122      	bne.n	800aa44 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	8b1a      	ldrh	r2, [r3, #24]
 800aa02:	4b3b      	ldr	r3, [pc, #236]	; (800aaf0 <tcp_input+0x49c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d11b      	bne.n	800aa46 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	8ada      	ldrh	r2, [r3, #22]
 800aa12:	4b37      	ldr	r3, [pc, #220]	; (800aaf0 <tcp_input+0x49c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	885b      	ldrh	r3, [r3, #2]
 800aa18:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d113      	bne.n	800aa46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	4b34      	ldr	r3, [pc, #208]	; (800aaf4 <tcp_input+0x4a0>)
 800aa24:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d10d      	bne.n	800aa46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <tcp_input+0x4a0>)
 800aa30:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d107      	bne.n	800aa46 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800aa36:	69f8      	ldr	r0, [r7, #28]
 800aa38:	f000 fb56 	bl	800b0e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7fd ffe1 	bl	8008a04 <pbuf_free>
        return;
 800aa42:	e1fd      	b.n	800ae40 <tcp_input+0x7ec>
        continue;
 800aa44:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1bc      	bne.n	800a9cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800aa52:	2300      	movs	r3, #0
 800aa54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa56:	4b2f      	ldr	r3, [pc, #188]	; (800ab14 <tcp_input+0x4c0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	e02a      	b.n	800aab4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	7a1b      	ldrb	r3, [r3, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00c      	beq.n	800aa80 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	7a1a      	ldrb	r2, [r3, #8]
 800aa6a:	4b22      	ldr	r3, [pc, #136]	; (800aaf4 <tcp_input+0x4a0>)
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa72:	3301      	adds	r3, #1
 800aa74:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d002      	beq.n	800aa80 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	61bb      	str	r3, [r7, #24]
        continue;
 800aa7e:	e016      	b.n	800aaae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	8ada      	ldrh	r2, [r3, #22]
 800aa84:	4b1a      	ldr	r3, [pc, #104]	; (800aaf0 <tcp_input+0x49c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	885b      	ldrh	r3, [r3, #2]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d10c      	bne.n	800aaaa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	4b17      	ldr	r3, [pc, #92]	; (800aaf4 <tcp_input+0x4a0>)
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d00f      	beq.n	800aabc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00d      	beq.n	800aabe <tcp_input+0x46a>
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	617b      	str	r3, [r7, #20]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1d1      	bne.n	800aa5e <tcp_input+0x40a>
 800aaba:	e000      	b.n	800aabe <tcp_input+0x46a>
            break;
 800aabc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d029      	beq.n	800ab18 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00a      	beq.n	800aae0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aad2:	4b10      	ldr	r3, [pc, #64]	; (800ab14 <tcp_input+0x4c0>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aada:	4a0e      	ldr	r2, [pc, #56]	; (800ab14 <tcp_input+0x4c0>)
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aae0:	6978      	ldr	r0, [r7, #20]
 800aae2:	f000 fa03 	bl	800aeec <tcp_listen_input>
      }
      pbuf_free(p);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fd ff8c 	bl	8008a04 <pbuf_free>
      return;
 800aaec:	e1a8      	b.n	800ae40 <tcp_input+0x7ec>
 800aaee:	bf00      	nop
 800aaf0:	2000a7f8 	.word	0x2000a7f8
 800aaf4:	200050a0 	.word	0x200050a0
 800aaf8:	08015010 	.word	0x08015010
 800aafc:	0801513c 	.word	0x0801513c
 800ab00:	0801505c 	.word	0x0801505c
 800ab04:	2000a7dc 	.word	0x2000a7dc
 800ab08:	08015168 	.word	0x08015168
 800ab0c:	2000a7e0 	.word	0x2000a7e0
 800ab10:	08015194 	.word	0x08015194
 800ab14:	2000a7d8 	.word	0x2000a7d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 8158 	beq.w	800add0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ab20:	4b95      	ldr	r3, [pc, #596]	; (800ad78 <tcp_input+0x724>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	891a      	ldrh	r2, [r3, #8]
 800ab2a:	4b93      	ldr	r3, [pc, #588]	; (800ad78 <tcp_input+0x724>)
 800ab2c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ab2e:	4a92      	ldr	r2, [pc, #584]	; (800ad78 <tcp_input+0x724>)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ab34:	4b91      	ldr	r3, [pc, #580]	; (800ad7c <tcp_input+0x728>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a8f      	ldr	r2, [pc, #572]	; (800ad78 <tcp_input+0x724>)
 800ab3a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ab3c:	4b90      	ldr	r3, [pc, #576]	; (800ad80 <tcp_input+0x72c>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ab42:	4b90      	ldr	r3, [pc, #576]	; (800ad84 <tcp_input+0x730>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ab48:	4b8f      	ldr	r3, [pc, #572]	; (800ad88 <tcp_input+0x734>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ab4e:	4b8f      	ldr	r3, [pc, #572]	; (800ad8c <tcp_input+0x738>)
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	f003 0308 	and.w	r3, r3, #8
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d006      	beq.n	800ab68 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	7b5b      	ldrb	r3, [r3, #13]
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d017      	beq.n	800aba0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab70:	69f8      	ldr	r0, [r7, #28]
 800ab72:	f7ff f929 	bl	8009dc8 <tcp_process_refused_data>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f113 0f0d 	cmn.w	r3, #13
 800ab7c:	d007      	beq.n	800ab8e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00c      	beq.n	800aba0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab86:	4b82      	ldr	r3, [pc, #520]	; (800ad90 <tcp_input+0x73c>)
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d008      	beq.n	800aba0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 80e3 	bne.w	800ad5e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ab98:	69f8      	ldr	r0, [r7, #28]
 800ab9a:	f003 f9ad 	bl	800def8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ab9e:	e0de      	b.n	800ad5e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800aba0:	4a7c      	ldr	r2, [pc, #496]	; (800ad94 <tcp_input+0x740>)
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aba6:	69f8      	ldr	r0, [r7, #28]
 800aba8:	f000 fb18 	bl	800b1dc <tcp_process>
 800abac:	4603      	mov	r3, r0
 800abae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800abb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abb4:	f113 0f0d 	cmn.w	r3, #13
 800abb8:	f000 80d3 	beq.w	800ad62 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800abbc:	4b71      	ldr	r3, [pc, #452]	; (800ad84 <tcp_input+0x730>)
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	f003 0308 	and.w	r3, r3, #8
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d015      	beq.n	800abf4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d008      	beq.n	800abe4 <tcp_input+0x590>
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	6912      	ldr	r2, [r2, #16]
 800abdc:	f06f 010d 	mvn.w	r1, #13
 800abe0:	4610      	mov	r0, r2
 800abe2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800abe4:	69f9      	ldr	r1, [r7, #28]
 800abe6:	486c      	ldr	r0, [pc, #432]	; (800ad98 <tcp_input+0x744>)
 800abe8:	f7ff fbbc 	bl	800a364 <tcp_pcb_remove>
        tcp_free(pcb);
 800abec:	69f8      	ldr	r0, [r7, #28]
 800abee:	f7fe f9a9 	bl	8008f44 <tcp_free>
 800abf2:	e0da      	b.n	800adaa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800abf8:	4b63      	ldr	r3, [pc, #396]	; (800ad88 <tcp_input+0x734>)
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01d      	beq.n	800ac3c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ac00:	4b61      	ldr	r3, [pc, #388]	; (800ad88 <tcp_input+0x734>)
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <tcp_input+0x5d2>
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	6910      	ldr	r0, [r2, #16]
 800ac1a:	89fa      	ldrh	r2, [r7, #14]
 800ac1c:	69f9      	ldr	r1, [r7, #28]
 800ac1e:	4798      	blx	r3
 800ac20:	4603      	mov	r3, r0
 800ac22:	74fb      	strb	r3, [r7, #19]
 800ac24:	e001      	b.n	800ac2a <tcp_input+0x5d6>
 800ac26:	2300      	movs	r3, #0
 800ac28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ac2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac2e:	f113 0f0d 	cmn.w	r3, #13
 800ac32:	f000 8098 	beq.w	800ad66 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ac36:	4b54      	ldr	r3, [pc, #336]	; (800ad88 <tcp_input+0x734>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ac3c:	69f8      	ldr	r0, [r7, #28]
 800ac3e:	f000 f915 	bl	800ae6c <tcp_input_delayed_close>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f040 8090 	bne.w	800ad6a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ac4a:	4b4d      	ldr	r3, [pc, #308]	; (800ad80 <tcp_input+0x72c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d041      	beq.n	800acd6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <tcp_input+0x614>
 800ac5a:	4b50      	ldr	r3, [pc, #320]	; (800ad9c <tcp_input+0x748>)
 800ac5c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ac60:	494f      	ldr	r1, [pc, #316]	; (800ada0 <tcp_input+0x74c>)
 800ac62:	4850      	ldr	r0, [pc, #320]	; (800ada4 <tcp_input+0x750>)
 800ac64:	f007 f8c4 	bl	8011df0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	8b5b      	ldrh	r3, [r3, #26]
 800ac6c:	f003 0310 	and.w	r3, r3, #16
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d008      	beq.n	800ac86 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ac74:	4b42      	ldr	r3, [pc, #264]	; (800ad80 <tcp_input+0x72c>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fd fec3 	bl	8008a04 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ac7e:	69f8      	ldr	r0, [r7, #28]
 800ac80:	f7fe fc48 	bl	8009514 <tcp_abort>
            goto aborted;
 800ac84:	e091      	b.n	800adaa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00c      	beq.n	800acaa <tcp_input+0x656>
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	6918      	ldr	r0, [r3, #16]
 800ac9a:	4b39      	ldr	r3, [pc, #228]	; (800ad80 <tcp_input+0x72c>)
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	69f9      	ldr	r1, [r7, #28]
 800aca2:	47a0      	blx	r4
 800aca4:	4603      	mov	r3, r0
 800aca6:	74fb      	strb	r3, [r7, #19]
 800aca8:	e008      	b.n	800acbc <tcp_input+0x668>
 800acaa:	4b35      	ldr	r3, [pc, #212]	; (800ad80 <tcp_input+0x72c>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	2300      	movs	r3, #0
 800acb0:	69f9      	ldr	r1, [r7, #28]
 800acb2:	2000      	movs	r0, #0
 800acb4:	f7ff f95e 	bl	8009f74 <tcp_recv_null>
 800acb8:	4603      	mov	r3, r0
 800acba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800acbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acc0:	f113 0f0d 	cmn.w	r3, #13
 800acc4:	d053      	beq.n	800ad6e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800acc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800acce:	4b2c      	ldr	r3, [pc, #176]	; (800ad80 <tcp_input+0x72c>)
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800acd6:	4b2b      	ldr	r3, [pc, #172]	; (800ad84 <tcp_input+0x730>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d030      	beq.n	800ad44 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acee:	7b5a      	ldrb	r2, [r3, #13]
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acf4:	f042 0220 	orr.w	r2, r2, #32
 800acf8:	b2d2      	uxtb	r2, r2
 800acfa:	735a      	strb	r2, [r3, #13]
 800acfc:	e022      	b.n	800ad44 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ad06:	d005      	beq.n	800ad14 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00b      	beq.n	800ad36 <tcp_input+0x6e2>
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	6918      	ldr	r0, [r3, #16]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	69f9      	ldr	r1, [r7, #28]
 800ad2e:	47a0      	blx	r4
 800ad30:	4603      	mov	r3, r0
 800ad32:	74fb      	strb	r3, [r7, #19]
 800ad34:	e001      	b.n	800ad3a <tcp_input+0x6e6>
 800ad36:	2300      	movs	r3, #0
 800ad38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ad3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad3e:	f113 0f0d 	cmn.w	r3, #13
 800ad42:	d016      	beq.n	800ad72 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ad44:	4b13      	ldr	r3, [pc, #76]	; (800ad94 <tcp_input+0x740>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ad4a:	69f8      	ldr	r0, [r7, #28]
 800ad4c:	f000 f88e 	bl	800ae6c <tcp_input_delayed_close>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d128      	bne.n	800ada8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ad56:	69f8      	ldr	r0, [r7, #28]
 800ad58:	f002 fac8 	bl	800d2ec <tcp_output>
 800ad5c:	e025      	b.n	800adaa <tcp_input+0x756>
        goto aborted;
 800ad5e:	bf00      	nop
 800ad60:	e023      	b.n	800adaa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ad62:	bf00      	nop
 800ad64:	e021      	b.n	800adaa <tcp_input+0x756>
              goto aborted;
 800ad66:	bf00      	nop
 800ad68:	e01f      	b.n	800adaa <tcp_input+0x756>
          goto aborted;
 800ad6a:	bf00      	nop
 800ad6c:	e01d      	b.n	800adaa <tcp_input+0x756>
            goto aborted;
 800ad6e:	bf00      	nop
 800ad70:	e01b      	b.n	800adaa <tcp_input+0x756>
              goto aborted;
 800ad72:	bf00      	nop
 800ad74:	e019      	b.n	800adaa <tcp_input+0x756>
 800ad76:	bf00      	nop
 800ad78:	2000a7e8 	.word	0x2000a7e8
 800ad7c:	2000a7f8 	.word	0x2000a7f8
 800ad80:	2000a818 	.word	0x2000a818
 800ad84:	2000a815 	.word	0x2000a815
 800ad88:	2000a810 	.word	0x2000a810
 800ad8c:	2000a814 	.word	0x2000a814
 800ad90:	2000a812 	.word	0x2000a812
 800ad94:	2000a81c 	.word	0x2000a81c
 800ad98:	2000a7dc 	.word	0x2000a7dc
 800ad9c:	08015010 	.word	0x08015010
 800ada0:	080151c4 	.word	0x080151c4
 800ada4:	0801505c 	.word	0x0801505c
          goto aborted;
 800ada8:	bf00      	nop
    tcp_input_pcb = NULL;
 800adaa:	4b27      	ldr	r3, [pc, #156]	; (800ae48 <tcp_input+0x7f4>)
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800adb0:	4b26      	ldr	r3, [pc, #152]	; (800ae4c <tcp_input+0x7f8>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800adb6:	4b26      	ldr	r3, [pc, #152]	; (800ae50 <tcp_input+0x7fc>)
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d03f      	beq.n	800ae3e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <tcp_input+0x7fc>)
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fd fe1e 	bl	8008a04 <pbuf_free>
      inseg.p = NULL;
 800adc8:	4b21      	ldr	r3, [pc, #132]	; (800ae50 <tcp_input+0x7fc>)
 800adca:	2200      	movs	r2, #0
 800adcc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800adce:	e036      	b.n	800ae3e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800add0:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <tcp_input+0x800>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	899b      	ldrh	r3, [r3, #12]
 800add6:	b29b      	uxth	r3, r3
 800add8:	4618      	mov	r0, r3
 800adda:	f7fc fab5 	bl	8007348 <lwip_htons>
 800adde:	4603      	mov	r3, r0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	f003 0304 	and.w	r3, r3, #4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d118      	bne.n	800ae1c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adea:	4b1b      	ldr	r3, [pc, #108]	; (800ae58 <tcp_input+0x804>)
 800adec:	6819      	ldr	r1, [r3, #0]
 800adee:	4b1b      	ldr	r3, [pc, #108]	; (800ae5c <tcp_input+0x808>)
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	4b1a      	ldr	r3, [pc, #104]	; (800ae60 <tcp_input+0x80c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adfa:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <tcp_input+0x800>)
 800adfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adfe:	885b      	ldrh	r3, [r3, #2]
 800ae00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae02:	4a14      	ldr	r2, [pc, #80]	; (800ae54 <tcp_input+0x800>)
 800ae04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae06:	8812      	ldrh	r2, [r2, #0]
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	9202      	str	r2, [sp, #8]
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	4b15      	ldr	r3, [pc, #84]	; (800ae64 <tcp_input+0x810>)
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <tcp_input+0x814>)
 800ae14:	4602      	mov	r2, r0
 800ae16:	2000      	movs	r0, #0
 800ae18:	f003 f81c 	bl	800de54 <tcp_rst>
    pbuf_free(p);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7fd fdf1 	bl	8008a04 <pbuf_free>
  return;
 800ae22:	e00c      	b.n	800ae3e <tcp_input+0x7ea>
    goto dropped;
 800ae24:	bf00      	nop
 800ae26:	e006      	b.n	800ae36 <tcp_input+0x7e2>
    goto dropped;
 800ae28:	bf00      	nop
 800ae2a:	e004      	b.n	800ae36 <tcp_input+0x7e2>
    goto dropped;
 800ae2c:	bf00      	nop
 800ae2e:	e002      	b.n	800ae36 <tcp_input+0x7e2>
      goto dropped;
 800ae30:	bf00      	nop
 800ae32:	e000      	b.n	800ae36 <tcp_input+0x7e2>
      goto dropped;
 800ae34:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7fd fde4 	bl	8008a04 <pbuf_free>
 800ae3c:	e000      	b.n	800ae40 <tcp_input+0x7ec>
  return;
 800ae3e:	bf00      	nop
}
 800ae40:	3724      	adds	r7, #36	; 0x24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd90      	pop	{r4, r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000a81c 	.word	0x2000a81c
 800ae4c:	2000a818 	.word	0x2000a818
 800ae50:	2000a7e8 	.word	0x2000a7e8
 800ae54:	2000a7f8 	.word	0x2000a7f8
 800ae58:	2000a80c 	.word	0x2000a80c
 800ae5c:	2000a812 	.word	0x2000a812
 800ae60:	2000a808 	.word	0x2000a808
 800ae64:	200050b0 	.word	0x200050b0
 800ae68:	200050b4 	.word	0x200050b4

0800ae6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <tcp_input_delayed_close+0x1c>
 800ae7a:	4b17      	ldr	r3, [pc, #92]	; (800aed8 <tcp_input_delayed_close+0x6c>)
 800ae7c:	f240 225a 	movw	r2, #602	; 0x25a
 800ae80:	4916      	ldr	r1, [pc, #88]	; (800aedc <tcp_input_delayed_close+0x70>)
 800ae82:	4817      	ldr	r0, [pc, #92]	; (800aee0 <tcp_input_delayed_close+0x74>)
 800ae84:	f006 ffb4 	bl	8011df0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ae88:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <tcp_input_delayed_close+0x78>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	f003 0310 	and.w	r3, r3, #16
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01c      	beq.n	800aece <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8b5b      	ldrh	r3, [r3, #26]
 800ae98:	f003 0310 	and.w	r3, r3, #16
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10d      	bne.n	800aebc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d008      	beq.n	800aebc <tcp_input_delayed_close+0x50>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	6912      	ldr	r2, [r2, #16]
 800aeb4:	f06f 010e 	mvn.w	r1, #14
 800aeb8:	4610      	mov	r0, r2
 800aeba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aebc:	6879      	ldr	r1, [r7, #4]
 800aebe:	480a      	ldr	r0, [pc, #40]	; (800aee8 <tcp_input_delayed_close+0x7c>)
 800aec0:	f7ff fa50 	bl	800a364 <tcp_pcb_remove>
    tcp_free(pcb);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7fe f83d 	bl	8008f44 <tcp_free>
    return 1;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e000      	b.n	800aed0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	08015010 	.word	0x08015010
 800aedc:	080151e0 	.word	0x080151e0
 800aee0:	0801505c 	.word	0x0801505c
 800aee4:	2000a815 	.word	0x2000a815
 800aee8:	2000a7dc 	.word	0x2000a7dc

0800aeec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b08b      	sub	sp, #44	; 0x2c
 800aef0:	af04      	add	r7, sp, #16
 800aef2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aef4:	4b6f      	ldr	r3, [pc, #444]	; (800b0b4 <tcp_listen_input+0x1c8>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f003 0304 	and.w	r3, r3, #4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f040 80d2 	bne.w	800b0a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d106      	bne.n	800af16 <tcp_listen_input+0x2a>
 800af08:	4b6b      	ldr	r3, [pc, #428]	; (800b0b8 <tcp_listen_input+0x1cc>)
 800af0a:	f240 2281 	movw	r2, #641	; 0x281
 800af0e:	496b      	ldr	r1, [pc, #428]	; (800b0bc <tcp_listen_input+0x1d0>)
 800af10:	486b      	ldr	r0, [pc, #428]	; (800b0c0 <tcp_listen_input+0x1d4>)
 800af12:	f006 ff6d 	bl	8011df0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800af16:	4b67      	ldr	r3, [pc, #412]	; (800b0b4 <tcp_listen_input+0x1c8>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	f003 0310 	and.w	r3, r3, #16
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d019      	beq.n	800af56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af22:	4b68      	ldr	r3, [pc, #416]	; (800b0c4 <tcp_listen_input+0x1d8>)
 800af24:	6819      	ldr	r1, [r3, #0]
 800af26:	4b68      	ldr	r3, [pc, #416]	; (800b0c8 <tcp_listen_input+0x1dc>)
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	4b67      	ldr	r3, [pc, #412]	; (800b0cc <tcp_listen_input+0x1e0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af32:	4b67      	ldr	r3, [pc, #412]	; (800b0d0 <tcp_listen_input+0x1e4>)
 800af34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af36:	885b      	ldrh	r3, [r3, #2]
 800af38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af3a:	4a65      	ldr	r2, [pc, #404]	; (800b0d0 <tcp_listen_input+0x1e4>)
 800af3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af3e:	8812      	ldrh	r2, [r2, #0]
 800af40:	b292      	uxth	r2, r2
 800af42:	9202      	str	r2, [sp, #8]
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	4b63      	ldr	r3, [pc, #396]	; (800b0d4 <tcp_listen_input+0x1e8>)
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	4b63      	ldr	r3, [pc, #396]	; (800b0d8 <tcp_listen_input+0x1ec>)
 800af4c:	4602      	mov	r2, r0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f002 ff80 	bl	800de54 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800af54:	e0a9      	b.n	800b0aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800af56:	4b57      	ldr	r3, [pc, #348]	; (800b0b4 <tcp_listen_input+0x1c8>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	f003 0302 	and.w	r3, r3, #2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 80a3 	beq.w	800b0aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	7d5b      	ldrb	r3, [r3, #21]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff f927 	bl	800a1bc <tcp_alloc>
 800af6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d111      	bne.n	800af9a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <tcp_listen_input+0xa8>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	6910      	ldr	r0, [r2, #16]
 800af86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af8a:	2100      	movs	r1, #0
 800af8c:	4798      	blx	r3
 800af8e:	4603      	mov	r3, r0
 800af90:	73bb      	strb	r3, [r7, #14]
      return;
 800af92:	e08b      	b.n	800b0ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af94:	23f0      	movs	r3, #240	; 0xf0
 800af96:	73bb      	strb	r3, [r7, #14]
      return;
 800af98:	e088      	b.n	800b0ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800af9a:	4b50      	ldr	r3, [pc, #320]	; (800b0dc <tcp_listen_input+0x1f0>)
 800af9c:	695a      	ldr	r2, [r3, #20]
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800afa2:	4b4e      	ldr	r3, [pc, #312]	; (800b0dc <tcp_listen_input+0x1f0>)
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8ada      	ldrh	r2, [r3, #22]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800afb2:	4b47      	ldr	r3, [pc, #284]	; (800b0d0 <tcp_listen_input+0x1e4>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	b29a      	uxth	r2, r3
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2203      	movs	r2, #3
 800afc2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800afc4:	4b41      	ldr	r3, [pc, #260]	; (800b0cc <tcp_listen_input+0x1e0>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	1c5a      	adds	r2, r3, #1
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800afd6:	6978      	ldr	r0, [r7, #20]
 800afd8:	f7ff fa58 	bl	800a48c <tcp_next_iss>
 800afdc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aff6:	4b35      	ldr	r3, [pc, #212]	; (800b0cc <tcp_listen_input+0x1e0>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	1e5a      	subs	r2, r3, #1
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	7a5b      	ldrb	r3, [r3, #9]
 800b012:	f003 030c 	and.w	r3, r3, #12
 800b016:	b2da      	uxtb	r2, r3
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7a1a      	ldrb	r2, [r3, #8]
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b024:	4b2e      	ldr	r3, [pc, #184]	; (800b0e0 <tcp_listen_input+0x1f4>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	60da      	str	r2, [r3, #12]
 800b02c:	4a2c      	ldr	r2, [pc, #176]	; (800b0e0 <tcp_listen_input+0x1f4>)
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	f003 f8d1 	bl	800e1d8 <tcp_timer_needed>
 800b036:	4b2b      	ldr	r3, [pc, #172]	; (800b0e4 <tcp_listen_input+0x1f8>)
 800b038:	2201      	movs	r2, #1
 800b03a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b03c:	6978      	ldr	r0, [r7, #20]
 800b03e:	f001 fd8f 	bl	800cb60 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b042:	4b23      	ldr	r3, [pc, #140]	; (800b0d0 <tcp_listen_input+0x1e4>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	89db      	ldrh	r3, [r3, #14]
 800b048:	b29a      	uxth	r2, r3
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	3304      	adds	r3, #4
 800b064:	4618      	mov	r0, r3
 800b066:	f004 fdfb 	bl	800fc60 <ip4_route>
 800b06a:	4601      	mov	r1, r0
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	3304      	adds	r3, #4
 800b070:	461a      	mov	r2, r3
 800b072:	4620      	mov	r0, r4
 800b074:	f7ff fa30 	bl	800a4d8 <tcp_eff_send_mss_netif>
 800b078:	4603      	mov	r3, r0
 800b07a:	461a      	mov	r2, r3
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b080:	2112      	movs	r1, #18
 800b082:	6978      	ldr	r0, [r7, #20]
 800b084:	f002 f844 	bl	800d110 <tcp_enqueue_flags>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b08c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b094:	2100      	movs	r1, #0
 800b096:	6978      	ldr	r0, [r7, #20]
 800b098:	f7fe f97e 	bl	8009398 <tcp_abandon>
      return;
 800b09c:	e006      	b.n	800b0ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b09e:	6978      	ldr	r0, [r7, #20]
 800b0a0:	f002 f924 	bl	800d2ec <tcp_output>
  return;
 800b0a4:	e001      	b.n	800b0aa <tcp_listen_input+0x1be>
    return;
 800b0a6:	bf00      	nop
 800b0a8:	e000      	b.n	800b0ac <tcp_listen_input+0x1c0>
  return;
 800b0aa:	bf00      	nop
}
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd90      	pop	{r4, r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	2000a814 	.word	0x2000a814
 800b0b8:	08015010 	.word	0x08015010
 800b0bc:	08015208 	.word	0x08015208
 800b0c0:	0801505c 	.word	0x0801505c
 800b0c4:	2000a80c 	.word	0x2000a80c
 800b0c8:	2000a812 	.word	0x2000a812
 800b0cc:	2000a808 	.word	0x2000a808
 800b0d0:	2000a7f8 	.word	0x2000a7f8
 800b0d4:	200050b0 	.word	0x200050b0
 800b0d8:	200050b4 	.word	0x200050b4
 800b0dc:	200050a0 	.word	0x200050a0
 800b0e0:	2000a7dc 	.word	0x2000a7dc
 800b0e4:	2000a7e4 	.word	0x2000a7e4

0800b0e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af04      	add	r7, sp, #16
 800b0ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b0f0:	4b2f      	ldr	r3, [pc, #188]	; (800b1b0 <tcp_timewait_input+0xc8>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 0304 	and.w	r3, r3, #4
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d153      	bne.n	800b1a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <tcp_timewait_input+0x28>
 800b102:	4b2c      	ldr	r3, [pc, #176]	; (800b1b4 <tcp_timewait_input+0xcc>)
 800b104:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b108:	492b      	ldr	r1, [pc, #172]	; (800b1b8 <tcp_timewait_input+0xd0>)
 800b10a:	482c      	ldr	r0, [pc, #176]	; (800b1bc <tcp_timewait_input+0xd4>)
 800b10c:	f006 fe70 	bl	8011df0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b110:	4b27      	ldr	r3, [pc, #156]	; (800b1b0 <tcp_timewait_input+0xc8>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	f003 0302 	and.w	r3, r3, #2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d02a      	beq.n	800b172 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b11c:	4b28      	ldr	r3, [pc, #160]	; (800b1c0 <tcp_timewait_input+0xd8>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	db2d      	blt.n	800b186 <tcp_timewait_input+0x9e>
 800b12a:	4b25      	ldr	r3, [pc, #148]	; (800b1c0 <tcp_timewait_input+0xd8>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b136:	440b      	add	r3, r1
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc23      	bgt.n	800b186 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b13e:	4b21      	ldr	r3, [pc, #132]	; (800b1c4 <tcp_timewait_input+0xdc>)
 800b140:	6819      	ldr	r1, [r3, #0]
 800b142:	4b21      	ldr	r3, [pc, #132]	; (800b1c8 <tcp_timewait_input+0xe0>)
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	4b1d      	ldr	r3, [pc, #116]	; (800b1c0 <tcp_timewait_input+0xd8>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b14e:	4b1f      	ldr	r3, [pc, #124]	; (800b1cc <tcp_timewait_input+0xe4>)
 800b150:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b152:	885b      	ldrh	r3, [r3, #2]
 800b154:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b156:	4a1d      	ldr	r2, [pc, #116]	; (800b1cc <tcp_timewait_input+0xe4>)
 800b158:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b15a:	8812      	ldrh	r2, [r2, #0]
 800b15c:	b292      	uxth	r2, r2
 800b15e:	9202      	str	r2, [sp, #8]
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <tcp_timewait_input+0xe8>)
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4b1b      	ldr	r3, [pc, #108]	; (800b1d4 <tcp_timewait_input+0xec>)
 800b168:	4602      	mov	r2, r0
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f002 fe72 	bl	800de54 <tcp_rst>
      return;
 800b170:	e01b      	b.n	800b1aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b172:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <tcp_timewait_input+0xc8>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b17e:	4b16      	ldr	r3, [pc, #88]	; (800b1d8 <tcp_timewait_input+0xf0>)
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b186:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <tcp_timewait_input+0xe0>)
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00c      	beq.n	800b1a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	8b5b      	ldrh	r3, [r3, #26]
 800b192:	f043 0302 	orr.w	r3, r3, #2
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f002 f8a5 	bl	800d2ec <tcp_output>
  }
  return;
 800b1a2:	e001      	b.n	800b1a8 <tcp_timewait_input+0xc0>
    return;
 800b1a4:	bf00      	nop
 800b1a6:	e000      	b.n	800b1aa <tcp_timewait_input+0xc2>
  return;
 800b1a8:	bf00      	nop
}
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	2000a814 	.word	0x2000a814
 800b1b4:	08015010 	.word	0x08015010
 800b1b8:	08015228 	.word	0x08015228
 800b1bc:	0801505c 	.word	0x0801505c
 800b1c0:	2000a808 	.word	0x2000a808
 800b1c4:	2000a80c 	.word	0x2000a80c
 800b1c8:	2000a812 	.word	0x2000a812
 800b1cc:	2000a7f8 	.word	0x2000a7f8
 800b1d0:	200050b0 	.word	0x200050b0
 800b1d4:	200050b4 	.word	0x200050b4
 800b1d8:	2000a7d0 	.word	0x2000a7d0

0800b1dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b1dc:	b590      	push	{r4, r7, lr}
 800b1de:	b08d      	sub	sp, #52	; 0x34
 800b1e0:	af04      	add	r7, sp, #16
 800b1e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <tcp_process+0x24>
 800b1f2:	4b9d      	ldr	r3, [pc, #628]	; (800b468 <tcp_process+0x28c>)
 800b1f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b1f8:	499c      	ldr	r1, [pc, #624]	; (800b46c <tcp_process+0x290>)
 800b1fa:	489d      	ldr	r0, [pc, #628]	; (800b470 <tcp_process+0x294>)
 800b1fc:	f006 fdf8 	bl	8011df0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b200:	4b9c      	ldr	r3, [pc, #624]	; (800b474 <tcp_process+0x298>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d04e      	beq.n	800b2aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	7d1b      	ldrb	r3, [r3, #20]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d108      	bne.n	800b226 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b218:	4b97      	ldr	r3, [pc, #604]	; (800b478 <tcp_process+0x29c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d123      	bne.n	800b268 <tcp_process+0x8c>
        acceptable = 1;
 800b220:	2301      	movs	r3, #1
 800b222:	76fb      	strb	r3, [r7, #27]
 800b224:	e020      	b.n	800b268 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b22a:	4b94      	ldr	r3, [pc, #592]	; (800b47c <tcp_process+0x2a0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d102      	bne.n	800b238 <tcp_process+0x5c>
        acceptable = 1;
 800b232:	2301      	movs	r3, #1
 800b234:	76fb      	strb	r3, [r7, #27]
 800b236:	e017      	b.n	800b268 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b238:	4b90      	ldr	r3, [pc, #576]	; (800b47c <tcp_process+0x2a0>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	db10      	blt.n	800b268 <tcp_process+0x8c>
 800b246:	4b8d      	ldr	r3, [pc, #564]	; (800b47c <tcp_process+0x2a0>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	6879      	ldr	r1, [r7, #4]
 800b250:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b252:	440b      	add	r3, r1
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	dc06      	bgt.n	800b268 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	8b5b      	ldrh	r3, [r3, #26]
 800b25e:	f043 0302 	orr.w	r3, r3, #2
 800b262:	b29a      	uxth	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b268:	7efb      	ldrb	r3, [r7, #27]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d01b      	beq.n	800b2a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	7d1b      	ldrb	r3, [r3, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <tcp_process+0xa8>
 800b276:	4b7c      	ldr	r3, [pc, #496]	; (800b468 <tcp_process+0x28c>)
 800b278:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b27c:	4980      	ldr	r1, [pc, #512]	; (800b480 <tcp_process+0x2a4>)
 800b27e:	487c      	ldr	r0, [pc, #496]	; (800b470 <tcp_process+0x294>)
 800b280:	f006 fdb6 	bl	8011df0 <iprintf>
      recv_flags |= TF_RESET;
 800b284:	4b7f      	ldr	r3, [pc, #508]	; (800b484 <tcp_process+0x2a8>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	f043 0308 	orr.w	r3, r3, #8
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	4b7d      	ldr	r3, [pc, #500]	; (800b484 <tcp_process+0x2a8>)
 800b290:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	8b5b      	ldrh	r3, [r3, #26]
 800b296:	f023 0301 	bic.w	r3, r3, #1
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b2a0:	f06f 030d 	mvn.w	r3, #13
 800b2a4:	e37a      	b.n	800b99c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e378      	b.n	800b99c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b2aa:	4b72      	ldr	r3, [pc, #456]	; (800b474 <tcp_process+0x298>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	f003 0302 	and.w	r3, r3, #2
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d010      	beq.n	800b2d8 <tcp_process+0xfc>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	7d1b      	ldrb	r3, [r3, #20]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d00c      	beq.n	800b2d8 <tcp_process+0xfc>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	7d1b      	ldrb	r3, [r3, #20]
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d008      	beq.n	800b2d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ca:	f043 0302 	orr.w	r3, r3, #2
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e361      	b.n	800b99c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8b5b      	ldrh	r3, [r3, #26]
 800b2dc:	f003 0310 	and.w	r3, r3, #16
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d103      	bne.n	800b2ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b2e4:	4b68      	ldr	r3, [pc, #416]	; (800b488 <tcp_process+0x2ac>)
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 fc2f 	bl	800cb60 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	7d1b      	ldrb	r3, [r3, #20]
 800b306:	3b02      	subs	r3, #2
 800b308:	2b07      	cmp	r3, #7
 800b30a:	f200 8337 	bhi.w	800b97c <tcp_process+0x7a0>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <tcp_process+0x138>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b335 	.word	0x0800b335
 800b318:	0800b565 	.word	0x0800b565
 800b31c:	0800b6dd 	.word	0x0800b6dd
 800b320:	0800b707 	.word	0x0800b707
 800b324:	0800b82b 	.word	0x0800b82b
 800b328:	0800b6dd 	.word	0x0800b6dd
 800b32c:	0800b8b7 	.word	0x0800b8b7
 800b330:	0800b947 	.word	0x0800b947
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b334:	4b4f      	ldr	r3, [pc, #316]	; (800b474 <tcp_process+0x298>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	f003 0310 	and.w	r3, r3, #16
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 80e4 	beq.w	800b50a <tcp_process+0x32e>
 800b342:	4b4c      	ldr	r3, [pc, #304]	; (800b474 <tcp_process+0x298>)
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	f003 0302 	and.w	r3, r3, #2
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 80dd 	beq.w	800b50a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	4b48      	ldr	r3, [pc, #288]	; (800b478 <tcp_process+0x29c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	f040 80d5 	bne.w	800b50a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b360:	4b46      	ldr	r3, [pc, #280]	; (800b47c <tcp_process+0x2a0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b372:	4b41      	ldr	r3, [pc, #260]	; (800b478 <tcp_process+0x29c>)
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b37a:	4b44      	ldr	r3, [pc, #272]	; (800b48c <tcp_process+0x2b0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	89db      	ldrh	r3, [r3, #14]
 800b380:	b29a      	uxth	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b394:	4b39      	ldr	r3, [pc, #228]	; (800b47c <tcp_process+0x2a0>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	1e5a      	subs	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2204      	movs	r2, #4
 800b3a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f004 fc57 	bl	800fc60 <ip4_route>
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f7ff f88c 	bl	800a4d8 <tcp_eff_send_mss_netif>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3cc:	009a      	lsls	r2, r3, #2
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	bf38      	it	cc
 800b3dc:	460b      	movcc	r3, r1
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d204      	bcs.n	800b3ec <tcp_process+0x210>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	e00d      	b.n	800b408 <tcp_process+0x22c>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d904      	bls.n	800b404 <tcp_process+0x228>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	b29b      	uxth	r3, r3
 800b402:	e001      	b.n	800b408 <tcp_process+0x22c>
 800b404:	f241 131c 	movw	r3, #4380	; 0x111c
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <tcp_process+0x24a>
 800b418:	4b13      	ldr	r3, [pc, #76]	; (800b468 <tcp_process+0x28c>)
 800b41a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b41e:	491c      	ldr	r1, [pc, #112]	; (800b490 <tcp_process+0x2b4>)
 800b420:	4813      	ldr	r0, [pc, #76]	; (800b470 <tcp_process+0x294>)
 800b422:	f006 fce5 	bl	8011df0 <iprintf>
        --pcb->snd_queuelen;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b42c:	3b01      	subs	r3, #1
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d12a      	bne.n	800b498 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b446:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <tcp_process+0x280>
 800b44e:	4b06      	ldr	r3, [pc, #24]	; (800b468 <tcp_process+0x28c>)
 800b450:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b454:	490f      	ldr	r1, [pc, #60]	; (800b494 <tcp_process+0x2b8>)
 800b456:	4806      	ldr	r0, [pc, #24]	; (800b470 <tcp_process+0x294>)
 800b458:	f006 fcca 	bl	8011df0 <iprintf>
          pcb->unsent = rseg->next;
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	66da      	str	r2, [r3, #108]	; 0x6c
 800b464:	e01c      	b.n	800b4a0 <tcp_process+0x2c4>
 800b466:	bf00      	nop
 800b468:	08015010 	.word	0x08015010
 800b46c:	08015248 	.word	0x08015248
 800b470:	0801505c 	.word	0x0801505c
 800b474:	2000a814 	.word	0x2000a814
 800b478:	2000a80c 	.word	0x2000a80c
 800b47c:	2000a808 	.word	0x2000a808
 800b480:	08015264 	.word	0x08015264
 800b484:	2000a815 	.word	0x2000a815
 800b488:	2000a7d0 	.word	0x2000a7d0
 800b48c:	2000a7f8 	.word	0x2000a7f8
 800b490:	08015284 	.word	0x08015284
 800b494:	0801529c 	.word	0x0801529c
        } else {
          pcb->unacked = rseg->next;
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b4a0:	69f8      	ldr	r0, [r7, #28]
 800b4a2:	f7fe fd22 	bl	8009eea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d104      	bne.n	800b4b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4b4:	861a      	strh	r2, [r3, #48]	; 0x30
 800b4b6:	e006      	b.n	800b4c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00a      	beq.n	800b4e6 <tcp_process+0x30a>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	6910      	ldr	r0, [r2, #16]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	6879      	ldr	r1, [r7, #4]
 800b4de:	4798      	blx	r3
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	76bb      	strb	r3, [r7, #26]
 800b4e4:	e001      	b.n	800b4ea <tcp_process+0x30e>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b4ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4ee:	f113 0f0d 	cmn.w	r3, #13
 800b4f2:	d102      	bne.n	800b4fa <tcp_process+0x31e>
          return ERR_ABRT;
 800b4f4:	f06f 030c 	mvn.w	r3, #12
 800b4f8:	e250      	b.n	800b99c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	8b5b      	ldrh	r3, [r3, #26]
 800b4fe:	f043 0302 	orr.w	r3, r3, #2
 800b502:	b29a      	uxth	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b508:	e23a      	b.n	800b980 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b50a:	4b98      	ldr	r3, [pc, #608]	; (800b76c <tcp_process+0x590>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	f003 0310 	and.w	r3, r3, #16
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 8234 	beq.w	800b980 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b518:	4b95      	ldr	r3, [pc, #596]	; (800b770 <tcp_process+0x594>)
 800b51a:	6819      	ldr	r1, [r3, #0]
 800b51c:	4b95      	ldr	r3, [pc, #596]	; (800b774 <tcp_process+0x598>)
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	461a      	mov	r2, r3
 800b522:	4b95      	ldr	r3, [pc, #596]	; (800b778 <tcp_process+0x59c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b528:	4b94      	ldr	r3, [pc, #592]	; (800b77c <tcp_process+0x5a0>)
 800b52a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b52c:	885b      	ldrh	r3, [r3, #2]
 800b52e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b530:	4a92      	ldr	r2, [pc, #584]	; (800b77c <tcp_process+0x5a0>)
 800b532:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b534:	8812      	ldrh	r2, [r2, #0]
 800b536:	b292      	uxth	r2, r2
 800b538:	9202      	str	r2, [sp, #8]
 800b53a:	9301      	str	r3, [sp, #4]
 800b53c:	4b90      	ldr	r3, [pc, #576]	; (800b780 <tcp_process+0x5a4>)
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	4b90      	ldr	r3, [pc, #576]	; (800b784 <tcp_process+0x5a8>)
 800b542:	4602      	mov	r2, r0
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f002 fc85 	bl	800de54 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b550:	2b05      	cmp	r3, #5
 800b552:	f200 8215 	bhi.w	800b980 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f002 fa51 	bl	800da04 <tcp_rexmit_rto>
      break;
 800b562:	e20d      	b.n	800b980 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b564:	4b81      	ldr	r3, [pc, #516]	; (800b76c <tcp_process+0x590>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 80a1 	beq.w	800b6b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b572:	4b7f      	ldr	r3, [pc, #508]	; (800b770 <tcp_process+0x594>)
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	3b01      	subs	r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	db7e      	blt.n	800b680 <tcp_process+0x4a4>
 800b582:	4b7b      	ldr	r3, [pc, #492]	; (800b770 <tcp_process+0x594>)
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dc77      	bgt.n	800b680 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2204      	movs	r2, #4
 800b594:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d102      	bne.n	800b5a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b59e:	23fa      	movs	r3, #250	; 0xfa
 800b5a0:	76bb      	strb	r3, [r7, #26]
 800b5a2:	e01d      	b.n	800b5e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d106      	bne.n	800b5bc <tcp_process+0x3e0>
 800b5ae:	4b76      	ldr	r3, [pc, #472]	; (800b788 <tcp_process+0x5ac>)
 800b5b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b5b4:	4975      	ldr	r1, [pc, #468]	; (800b78c <tcp_process+0x5b0>)
 800b5b6:	4876      	ldr	r0, [pc, #472]	; (800b790 <tcp_process+0x5b4>)
 800b5b8:	f006 fc1a 	bl	8011df0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <tcp_process+0x400>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6910      	ldr	r0, [r2, #16]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	6879      	ldr	r1, [r7, #4]
 800b5d4:	4798      	blx	r3
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	76bb      	strb	r3, [r7, #26]
 800b5da:	e001      	b.n	800b5e0 <tcp_process+0x404>
 800b5dc:	23f0      	movs	r3, #240	; 0xf0
 800b5de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b5e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00a      	beq.n	800b5fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b5e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b5ec:	f113 0f0d 	cmn.w	r3, #13
 800b5f0:	d002      	beq.n	800b5f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7fd ff8e 	bl	8009514 <tcp_abort>
            }
            return ERR_ABRT;
 800b5f8:	f06f 030c 	mvn.w	r3, #12
 800b5fc:	e1ce      	b.n	800b99c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fae0 	bl	800bbc4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b604:	4b63      	ldr	r3, [pc, #396]	; (800b794 <tcp_process+0x5b8>)
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d005      	beq.n	800b618 <tcp_process+0x43c>
            recv_acked--;
 800b60c:	4b61      	ldr	r3, [pc, #388]	; (800b794 <tcp_process+0x5b8>)
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	3b01      	subs	r3, #1
 800b612:	b29a      	uxth	r2, r3
 800b614:	4b5f      	ldr	r3, [pc, #380]	; (800b794 <tcp_process+0x5b8>)
 800b616:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b61c:	009a      	lsls	r2, r3, #2
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	f241 111c 	movw	r1, #4380	; 0x111c
 800b628:	428b      	cmp	r3, r1
 800b62a:	bf38      	it	cc
 800b62c:	460b      	movcc	r3, r1
 800b62e:	429a      	cmp	r2, r3
 800b630:	d204      	bcs.n	800b63c <tcp_process+0x460>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	b29b      	uxth	r3, r3
 800b63a:	e00d      	b.n	800b658 <tcp_process+0x47c>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	f241 121c 	movw	r2, #4380	; 0x111c
 800b646:	4293      	cmp	r3, r2
 800b648:	d904      	bls.n	800b654 <tcp_process+0x478>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	b29b      	uxth	r3, r3
 800b652:	e001      	b.n	800b658 <tcp_process+0x47c>
 800b654:	f241 131c 	movw	r3, #4380	; 0x111c
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b65e:	4b4e      	ldr	r3, [pc, #312]	; (800b798 <tcp_process+0x5bc>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	f003 0320 	and.w	r3, r3, #32
 800b666:	2b00      	cmp	r3, #0
 800b668:	d037      	beq.n	800b6da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	8b5b      	ldrh	r3, [r3, #26]
 800b66e:	f043 0302 	orr.w	r3, r3, #2
 800b672:	b29a      	uxth	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2207      	movs	r2, #7
 800b67c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b67e:	e02c      	b.n	800b6da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b680:	4b3b      	ldr	r3, [pc, #236]	; (800b770 <tcp_process+0x594>)
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	4b3b      	ldr	r3, [pc, #236]	; (800b774 <tcp_process+0x598>)
 800b686:	881b      	ldrh	r3, [r3, #0]
 800b688:	461a      	mov	r2, r3
 800b68a:	4b3b      	ldr	r3, [pc, #236]	; (800b778 <tcp_process+0x59c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b690:	4b3a      	ldr	r3, [pc, #232]	; (800b77c <tcp_process+0x5a0>)
 800b692:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b694:	885b      	ldrh	r3, [r3, #2]
 800b696:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b698:	4a38      	ldr	r2, [pc, #224]	; (800b77c <tcp_process+0x5a0>)
 800b69a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b69c:	8812      	ldrh	r2, [r2, #0]
 800b69e:	b292      	uxth	r2, r2
 800b6a0:	9202      	str	r2, [sp, #8]
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	4b36      	ldr	r3, [pc, #216]	; (800b780 <tcp_process+0x5a4>)
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	4b36      	ldr	r3, [pc, #216]	; (800b784 <tcp_process+0x5a8>)
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f002 fbd1 	bl	800de54 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b6b2:	e167      	b.n	800b984 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b6b4:	4b2d      	ldr	r3, [pc, #180]	; (800b76c <tcp_process+0x590>)
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	f003 0302 	and.w	r3, r3, #2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 8161 	beq.w	800b984 <tcp_process+0x7a8>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	1e5a      	subs	r2, r3, #1
 800b6c8:	4b2b      	ldr	r3, [pc, #172]	; (800b778 <tcp_process+0x59c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	f040 8159 	bne.w	800b984 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f002 f9b8 	bl	800da48 <tcp_rexmit>
      break;
 800b6d8:	e154      	b.n	800b984 <tcp_process+0x7a8>
 800b6da:	e153      	b.n	800b984 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fa71 	bl	800bbc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b6e2:	4b2d      	ldr	r3, [pc, #180]	; (800b798 <tcp_process+0x5bc>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	f003 0320 	and.w	r3, r3, #32
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 814c 	beq.w	800b988 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	f043 0302 	orr.w	r3, r3, #2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2207      	movs	r2, #7
 800b702:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b704:	e140      	b.n	800b988 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fa5c 	bl	800bbc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b70c:	4b22      	ldr	r3, [pc, #136]	; (800b798 <tcp_process+0x5bc>)
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	f003 0320 	and.w	r3, r3, #32
 800b714:	2b00      	cmp	r3, #0
 800b716:	d071      	beq.n	800b7fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b718:	4b14      	ldr	r3, [pc, #80]	; (800b76c <tcp_process+0x590>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	f003 0310 	and.w	r3, r3, #16
 800b720:	2b00      	cmp	r3, #0
 800b722:	d060      	beq.n	800b7e6 <tcp_process+0x60a>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b728:	4b11      	ldr	r3, [pc, #68]	; (800b770 <tcp_process+0x594>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d15a      	bne.n	800b7e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b734:	2b00      	cmp	r3, #0
 800b736:	d156      	bne.n	800b7e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	8b5b      	ldrh	r3, [r3, #26]
 800b73c:	f043 0302 	orr.w	r3, r3, #2
 800b740:	b29a      	uxth	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7fe fdbc 	bl	800a2c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b74c:	4b13      	ldr	r3, [pc, #76]	; (800b79c <tcp_process+0x5c0>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	429a      	cmp	r2, r3
 800b754:	d105      	bne.n	800b762 <tcp_process+0x586>
 800b756:	4b11      	ldr	r3, [pc, #68]	; (800b79c <tcp_process+0x5c0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	4a0f      	ldr	r2, [pc, #60]	; (800b79c <tcp_process+0x5c0>)
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	e02e      	b.n	800b7c0 <tcp_process+0x5e4>
 800b762:	4b0e      	ldr	r3, [pc, #56]	; (800b79c <tcp_process+0x5c0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	617b      	str	r3, [r7, #20]
 800b768:	e027      	b.n	800b7ba <tcp_process+0x5de>
 800b76a:	bf00      	nop
 800b76c:	2000a814 	.word	0x2000a814
 800b770:	2000a80c 	.word	0x2000a80c
 800b774:	2000a812 	.word	0x2000a812
 800b778:	2000a808 	.word	0x2000a808
 800b77c:	2000a7f8 	.word	0x2000a7f8
 800b780:	200050b0 	.word	0x200050b0
 800b784:	200050b4 	.word	0x200050b4
 800b788:	08015010 	.word	0x08015010
 800b78c:	080152b0 	.word	0x080152b0
 800b790:	0801505c 	.word	0x0801505c
 800b794:	2000a810 	.word	0x2000a810
 800b798:	2000a815 	.word	0x2000a815
 800b79c:	2000a7dc 	.word	0x2000a7dc
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d104      	bne.n	800b7b4 <tcp_process+0x5d8>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68da      	ldr	r2, [r3, #12]
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	60da      	str	r2, [r3, #12]
 800b7b2:	e005      	b.n	800b7c0 <tcp_process+0x5e4>
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1ef      	bne.n	800b7a0 <tcp_process+0x5c4>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	4b77      	ldr	r3, [pc, #476]	; (800b9a4 <tcp_process+0x7c8>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	220a      	movs	r2, #10
 800b7d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b7d2:	4b75      	ldr	r3, [pc, #468]	; (800b9a8 <tcp_process+0x7cc>)
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	60da      	str	r2, [r3, #12]
 800b7da:	4a73      	ldr	r2, [pc, #460]	; (800b9a8 <tcp_process+0x7cc>)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6013      	str	r3, [r2, #0]
 800b7e0:	f002 fcfa 	bl	800e1d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b7e4:	e0d2      	b.n	800b98c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	8b5b      	ldrh	r3, [r3, #26]
 800b7ea:	f043 0302 	orr.w	r3, r3, #2
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2208      	movs	r2, #8
 800b7f8:	751a      	strb	r2, [r3, #20]
      break;
 800b7fa:	e0c7      	b.n	800b98c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7fc:	4b6b      	ldr	r3, [pc, #428]	; (800b9ac <tcp_process+0x7d0>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	f003 0310 	and.w	r3, r3, #16
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80c1 	beq.w	800b98c <tcp_process+0x7b0>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b80e:	4b68      	ldr	r3, [pc, #416]	; (800b9b0 <tcp_process+0x7d4>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	f040 80ba 	bne.w	800b98c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f040 80b5 	bne.w	800b98c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2206      	movs	r2, #6
 800b826:	751a      	strb	r2, [r3, #20]
      break;
 800b828:	e0b0      	b.n	800b98c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f9ca 	bl	800bbc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b830:	4b60      	ldr	r3, [pc, #384]	; (800b9b4 <tcp_process+0x7d8>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f003 0320 	and.w	r3, r3, #32
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 80a9 	beq.w	800b990 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	8b5b      	ldrh	r3, [r3, #26]
 800b842:	f043 0302 	orr.w	r3, r3, #2
 800b846:	b29a      	uxth	r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fe fd39 	bl	800a2c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b852:	4b59      	ldr	r3, [pc, #356]	; (800b9b8 <tcp_process+0x7dc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d105      	bne.n	800b868 <tcp_process+0x68c>
 800b85c:	4b56      	ldr	r3, [pc, #344]	; (800b9b8 <tcp_process+0x7dc>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	4a55      	ldr	r2, [pc, #340]	; (800b9b8 <tcp_process+0x7dc>)
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	e013      	b.n	800b890 <tcp_process+0x6b4>
 800b868:	4b53      	ldr	r3, [pc, #332]	; (800b9b8 <tcp_process+0x7dc>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	613b      	str	r3, [r7, #16]
 800b86e:	e00c      	b.n	800b88a <tcp_process+0x6ae>
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	429a      	cmp	r2, r3
 800b878:	d104      	bne.n	800b884 <tcp_process+0x6a8>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68da      	ldr	r2, [r3, #12]
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	60da      	str	r2, [r3, #12]
 800b882:	e005      	b.n	800b890 <tcp_process+0x6b4>
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1ef      	bne.n	800b870 <tcp_process+0x694>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	4b43      	ldr	r3, [pc, #268]	; (800b9a4 <tcp_process+0x7c8>)
 800b898:	2201      	movs	r2, #1
 800b89a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	220a      	movs	r2, #10
 800b8a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b8a2:	4b41      	ldr	r3, [pc, #260]	; (800b9a8 <tcp_process+0x7cc>)
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	60da      	str	r2, [r3, #12]
 800b8aa:	4a3f      	ldr	r2, [pc, #252]	; (800b9a8 <tcp_process+0x7cc>)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	f002 fc92 	bl	800e1d8 <tcp_timer_needed>
      }
      break;
 800b8b4:	e06c      	b.n	800b990 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f984 	bl	800bbc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b8bc:	4b3b      	ldr	r3, [pc, #236]	; (800b9ac <tcp_process+0x7d0>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	f003 0310 	and.w	r3, r3, #16
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d065      	beq.n	800b994 <tcp_process+0x7b8>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8cc:	4b38      	ldr	r3, [pc, #224]	; (800b9b0 <tcp_process+0x7d4>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d15f      	bne.n	800b994 <tcp_process+0x7b8>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d15b      	bne.n	800b994 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7fe fcf1 	bl	800a2c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b8e2:	4b35      	ldr	r3, [pc, #212]	; (800b9b8 <tcp_process+0x7dc>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d105      	bne.n	800b8f8 <tcp_process+0x71c>
 800b8ec:	4b32      	ldr	r3, [pc, #200]	; (800b9b8 <tcp_process+0x7dc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	4a31      	ldr	r2, [pc, #196]	; (800b9b8 <tcp_process+0x7dc>)
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	e013      	b.n	800b920 <tcp_process+0x744>
 800b8f8:	4b2f      	ldr	r3, [pc, #188]	; (800b9b8 <tcp_process+0x7dc>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	60fb      	str	r3, [r7, #12]
 800b8fe:	e00c      	b.n	800b91a <tcp_process+0x73e>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	429a      	cmp	r2, r3
 800b908:	d104      	bne.n	800b914 <tcp_process+0x738>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68da      	ldr	r2, [r3, #12]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	60da      	str	r2, [r3, #12]
 800b912:	e005      	b.n	800b920 <tcp_process+0x744>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1ef      	bne.n	800b900 <tcp_process+0x724>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	60da      	str	r2, [r3, #12]
 800b926:	4b1f      	ldr	r3, [pc, #124]	; (800b9a4 <tcp_process+0x7c8>)
 800b928:	2201      	movs	r2, #1
 800b92a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	220a      	movs	r2, #10
 800b930:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b932:	4b1d      	ldr	r3, [pc, #116]	; (800b9a8 <tcp_process+0x7cc>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	60da      	str	r2, [r3, #12]
 800b93a:	4a1b      	ldr	r2, [pc, #108]	; (800b9a8 <tcp_process+0x7cc>)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	f002 fc4a 	bl	800e1d8 <tcp_timer_needed>
      }
      break;
 800b944:	e026      	b.n	800b994 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f93c 	bl	800bbc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b94c:	4b17      	ldr	r3, [pc, #92]	; (800b9ac <tcp_process+0x7d0>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 0310 	and.w	r3, r3, #16
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01f      	beq.n	800b998 <tcp_process+0x7bc>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b95c:	4b14      	ldr	r3, [pc, #80]	; (800b9b0 <tcp_process+0x7d4>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	429a      	cmp	r2, r3
 800b962:	d119      	bne.n	800b998 <tcp_process+0x7bc>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d115      	bne.n	800b998 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b96c:	4b11      	ldr	r3, [pc, #68]	; (800b9b4 <tcp_process+0x7d8>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	f043 0310 	orr.w	r3, r3, #16
 800b974:	b2da      	uxtb	r2, r3
 800b976:	4b0f      	ldr	r3, [pc, #60]	; (800b9b4 <tcp_process+0x7d8>)
 800b978:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b97a:	e00d      	b.n	800b998 <tcp_process+0x7bc>
    default:
      break;
 800b97c:	bf00      	nop
 800b97e:	e00c      	b.n	800b99a <tcp_process+0x7be>
      break;
 800b980:	bf00      	nop
 800b982:	e00a      	b.n	800b99a <tcp_process+0x7be>
      break;
 800b984:	bf00      	nop
 800b986:	e008      	b.n	800b99a <tcp_process+0x7be>
      break;
 800b988:	bf00      	nop
 800b98a:	e006      	b.n	800b99a <tcp_process+0x7be>
      break;
 800b98c:	bf00      	nop
 800b98e:	e004      	b.n	800b99a <tcp_process+0x7be>
      break;
 800b990:	bf00      	nop
 800b992:	e002      	b.n	800b99a <tcp_process+0x7be>
      break;
 800b994:	bf00      	nop
 800b996:	e000      	b.n	800b99a <tcp_process+0x7be>
      break;
 800b998:	bf00      	nop
  }
  return ERR_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3724      	adds	r7, #36	; 0x24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd90      	pop	{r4, r7, pc}
 800b9a4:	2000a7e4 	.word	0x2000a7e4
 800b9a8:	2000a7e0 	.word	0x2000a7e0
 800b9ac:	2000a814 	.word	0x2000a814
 800b9b0:	2000a80c 	.word	0x2000a80c
 800b9b4:	2000a815 	.word	0x2000a815
 800b9b8:	2000a7dc 	.word	0x2000a7dc

0800b9bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b9bc:	b590      	push	{r4, r7, lr}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d106      	bne.n	800b9da <tcp_oos_insert_segment+0x1e>
 800b9cc:	4b3b      	ldr	r3, [pc, #236]	; (800babc <tcp_oos_insert_segment+0x100>)
 800b9ce:	f240 421f 	movw	r2, #1055	; 0x41f
 800b9d2:	493b      	ldr	r1, [pc, #236]	; (800bac0 <tcp_oos_insert_segment+0x104>)
 800b9d4:	483b      	ldr	r0, [pc, #236]	; (800bac4 <tcp_oos_insert_segment+0x108>)
 800b9d6:	f006 fa0b 	bl	8011df0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	899b      	ldrh	r3, [r3, #12]
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fb fcb0 	bl	8007348 <lwip_htons>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d028      	beq.n	800ba46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b9f4:	6838      	ldr	r0, [r7, #0]
 800b9f6:	f7fe fa63 	bl	8009ec0 <tcp_segs_free>
    next = NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	603b      	str	r3, [r7, #0]
 800b9fe:	e056      	b.n	800baae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	899b      	ldrh	r3, [r3, #12]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fb fc9d 	bl	8007348 <lwip_htons>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00d      	beq.n	800ba36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	899b      	ldrh	r3, [r3, #12]
 800ba20:	b29c      	uxth	r4, r3
 800ba22:	2001      	movs	r0, #1
 800ba24:	f7fb fc90 	bl	8007348 <lwip_htons>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	4322      	orrs	r2, r4
 800ba32:	b292      	uxth	r2, r2
 800ba34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f7fe fa52 	bl	8009eea <tcp_seg_free>
    while (next &&
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00e      	beq.n	800ba6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	891b      	ldrh	r3, [r3, #8]
 800ba50:	461a      	mov	r2, r3
 800ba52:	4b1d      	ldr	r3, [pc, #116]	; (800bac8 <tcp_oos_insert_segment+0x10c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	441a      	add	r2, r3
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	8909      	ldrh	r1, [r1, #8]
 800ba62:	440b      	add	r3, r1
 800ba64:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	daca      	bge.n	800ba00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01e      	beq.n	800baae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	891b      	ldrh	r3, [r3, #8]
 800ba74:	461a      	mov	r2, r3
 800ba76:	4b14      	ldr	r3, [pc, #80]	; (800bac8 <tcp_oos_insert_segment+0x10c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	441a      	add	r2, r3
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dd12      	ble.n	800baae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <tcp_oos_insert_segment+0x10c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	685a      	ldr	r2, [r3, #4]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	891b      	ldrh	r3, [r3, #8]
 800baa6:	4619      	mov	r1, r3
 800baa8:	4610      	mov	r0, r2
 800baaa:	f7fc fe25 	bl	80086f8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	601a      	str	r2, [r3, #0]
}
 800bab4:	bf00      	nop
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd90      	pop	{r4, r7, pc}
 800babc:	08015010 	.word	0x08015010
 800bac0:	080152d0 	.word	0x080152d0
 800bac4:	0801505c 	.word	0x0801505c
 800bac8:	2000a808 	.word	0x2000a808

0800bacc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bacc:	b5b0      	push	{r4, r5, r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bada:	e03e      	b.n	800bb5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	4618      	mov	r0, r3
 800baec:	f7fd f812 	bl	8008b14 <pbuf_clen>
 800baf0:	4603      	mov	r3, r0
 800baf2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bafa:	8a7a      	ldrh	r2, [r7, #18]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d906      	bls.n	800bb0e <tcp_free_acked_segments+0x42>
 800bb00:	4b2a      	ldr	r3, [pc, #168]	; (800bbac <tcp_free_acked_segments+0xe0>)
 800bb02:	f240 4257 	movw	r2, #1111	; 0x457
 800bb06:	492a      	ldr	r1, [pc, #168]	; (800bbb0 <tcp_free_acked_segments+0xe4>)
 800bb08:	482a      	ldr	r0, [pc, #168]	; (800bbb4 <tcp_free_acked_segments+0xe8>)
 800bb0a:	f006 f971 	bl	8011df0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bb14:	8a7b      	ldrh	r3, [r7, #18]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	891a      	ldrh	r2, [r3, #8]
 800bb24:	4b24      	ldr	r3, [pc, #144]	; (800bbb8 <tcp_free_acked_segments+0xec>)
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	4413      	add	r3, r2
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	4b22      	ldr	r3, [pc, #136]	; (800bbb8 <tcp_free_acked_segments+0xec>)
 800bb2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bb30:	6978      	ldr	r0, [r7, #20]
 800bb32:	f7fe f9da 	bl	8009eea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00c      	beq.n	800bb5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d109      	bne.n	800bb5a <tcp_free_acked_segments+0x8e>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <tcp_free_acked_segments+0x8e>
 800bb4c:	4b17      	ldr	r3, [pc, #92]	; (800bbac <tcp_free_acked_segments+0xe0>)
 800bb4e:	f240 4261 	movw	r2, #1121	; 0x461
 800bb52:	491a      	ldr	r1, [pc, #104]	; (800bbbc <tcp_free_acked_segments+0xf0>)
 800bb54:	4817      	ldr	r0, [pc, #92]	; (800bbb4 <tcp_free_acked_segments+0xe8>)
 800bb56:	f006 f94b 	bl	8011df0 <iprintf>
  while (seg_list != NULL &&
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d020      	beq.n	800bba2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fb fc03 	bl	8007372 <lwip_htonl>
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	891b      	ldrh	r3, [r3, #8]
 800bb72:	461d      	mov	r5, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	899b      	ldrh	r3, [r3, #12]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fb fbe3 	bl	8007348 <lwip_htons>
 800bb82:	4603      	mov	r3, r0
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <tcp_free_acked_segments+0xc6>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <tcp_free_acked_segments+0xc8>
 800bb92:	2300      	movs	r3, #0
 800bb94:	442b      	add	r3, r5
 800bb96:	18e2      	adds	r2, r4, r3
 800bb98:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <tcp_free_acked_segments+0xf4>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	dd9c      	ble.n	800badc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bba2:	68bb      	ldr	r3, [r7, #8]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bdb0      	pop	{r4, r5, r7, pc}
 800bbac:	08015010 	.word	0x08015010
 800bbb0:	080152f8 	.word	0x080152f8
 800bbb4:	0801505c 	.word	0x0801505c
 800bbb8:	2000a810 	.word	0x2000a810
 800bbbc:	08015320 	.word	0x08015320
 800bbc0:	2000a80c 	.word	0x2000a80c

0800bbc4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bbc4:	b5b0      	push	{r4, r5, r7, lr}
 800bbc6:	b094      	sub	sp, #80	; 0x50
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <tcp_receive+0x20>
 800bbd6:	4b91      	ldr	r3, [pc, #580]	; (800be1c <tcp_receive+0x258>)
 800bbd8:	f240 427b 	movw	r2, #1147	; 0x47b
 800bbdc:	4990      	ldr	r1, [pc, #576]	; (800be20 <tcp_receive+0x25c>)
 800bbde:	4891      	ldr	r0, [pc, #580]	; (800be24 <tcp_receive+0x260>)
 800bbe0:	f006 f906 	bl	8011df0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	7d1b      	ldrb	r3, [r3, #20]
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d806      	bhi.n	800bbfa <tcp_receive+0x36>
 800bbec:	4b8b      	ldr	r3, [pc, #556]	; (800be1c <tcp_receive+0x258>)
 800bbee:	f240 427c 	movw	r2, #1148	; 0x47c
 800bbf2:	498d      	ldr	r1, [pc, #564]	; (800be28 <tcp_receive+0x264>)
 800bbf4:	488b      	ldr	r0, [pc, #556]	; (800be24 <tcp_receive+0x260>)
 800bbf6:	f006 f8fb 	bl	8011df0 <iprintf>

  if (flags & TCP_ACK) {
 800bbfa:	4b8c      	ldr	r3, [pc, #560]	; (800be2c <tcp_receive+0x268>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	f003 0310 	and.w	r3, r3, #16
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 8264 	beq.w	800c0d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc0e:	461a      	mov	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc14:	4413      	add	r3, r2
 800bc16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc1c:	4b84      	ldr	r3, [pc, #528]	; (800be30 <tcp_receive+0x26c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	db1b      	blt.n	800bc5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc2a:	4b81      	ldr	r3, [pc, #516]	; (800be30 <tcp_receive+0x26c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d106      	bne.n	800bc40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc36:	4b7f      	ldr	r3, [pc, #508]	; (800be34 <tcp_receive+0x270>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	db0e      	blt.n	800bc5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc44:	4b7b      	ldr	r3, [pc, #492]	; (800be34 <tcp_receive+0x270>)
 800bc46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d125      	bne.n	800bc98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc4c:	4b7a      	ldr	r3, [pc, #488]	; (800be38 <tcp_receive+0x274>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	89db      	ldrh	r3, [r3, #14]
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d91c      	bls.n	800bc98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bc5e:	4b76      	ldr	r3, [pc, #472]	; (800be38 <tcp_receive+0x274>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	89db      	ldrh	r3, [r3, #14]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d205      	bcs.n	800bc88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bc88:	4b69      	ldr	r3, [pc, #420]	; (800be30 <tcp_receive+0x26c>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bc90:	4b68      	ldr	r3, [pc, #416]	; (800be34 <tcp_receive+0x270>)
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bc98:	4b66      	ldr	r3, [pc, #408]	; (800be34 <tcp_receive+0x270>)
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dc58      	bgt.n	800bd58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bca6:	4b65      	ldr	r3, [pc, #404]	; (800be3c <tcp_receive+0x278>)
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d14b      	bne.n	800bd46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bcb8:	4413      	add	r3, r2
 800bcba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d142      	bne.n	800bd46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	db3d      	blt.n	800bd46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcce:	4b59      	ldr	r3, [pc, #356]	; (800be34 <tcp_receive+0x270>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d137      	bne.n	800bd46 <tcp_receive+0x182>
              found_dupack = 1;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bce0:	2bff      	cmp	r3, #255	; 0xff
 800bce2:	d007      	beq.n	800bcf4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcea:	3301      	adds	r3, #1
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d91b      	bls.n	800bd36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd08:	4413      	add	r3, r2
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d30a      	bcc.n	800bd2c <tcp_receive+0x168>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd20:	4413      	add	r3, r2
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd2a:	e004      	b.n	800bd36 <tcp_receive+0x172>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d902      	bls.n	800bd46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f001 feed 	bl	800db20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bd46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f040 8161 	bne.w	800c010 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd56:	e15b      	b.n	800c010 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd58:	4b36      	ldr	r3, [pc, #216]	; (800be34 <tcp_receive+0x270>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	3b01      	subs	r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f2c0 814e 	blt.w	800c006 <tcp_receive+0x442>
 800bd6a:	4b32      	ldr	r3, [pc, #200]	; (800be34 <tcp_receive+0x270>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f300 8146 	bgt.w	800c006 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	8b5b      	ldrh	r3, [r3, #26]
 800bd7e:	f003 0304 	and.w	r3, r3, #4
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d010      	beq.n	800bda8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	8b5b      	ldrh	r3, [r3, #26]
 800bd8a:	f023 0304 	bic.w	r3, r3, #4
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bdb6:	10db      	asrs	r3, r3, #3
 800bdb8:	b21b      	sxth	r3, r3
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	4413      	add	r3, r2
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	b21a      	sxth	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bdd0:	4b18      	ldr	r3, [pc, #96]	; (800be34 <tcp_receive+0x270>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bde8:	4b12      	ldr	r3, [pc, #72]	; (800be34 <tcp_receive+0x270>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	7d1b      	ldrb	r3, [r3, #20]
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	f240 8097 	bls.w	800bf28 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800be06:	429a      	cmp	r2, r3
 800be08:	d245      	bcs.n	800be96 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	8b5b      	ldrh	r3, [r3, #26]
 800be0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be12:	2b00      	cmp	r3, #0
 800be14:	d014      	beq.n	800be40 <tcp_receive+0x27c>
 800be16:	2301      	movs	r3, #1
 800be18:	e013      	b.n	800be42 <tcp_receive+0x27e>
 800be1a:	bf00      	nop
 800be1c:	08015010 	.word	0x08015010
 800be20:	08015340 	.word	0x08015340
 800be24:	0801505c 	.word	0x0801505c
 800be28:	0801535c 	.word	0x0801535c
 800be2c:	2000a814 	.word	0x2000a814
 800be30:	2000a808 	.word	0x2000a808
 800be34:	2000a80c 	.word	0x2000a80c
 800be38:	2000a7f8 	.word	0x2000a7f8
 800be3c:	2000a812 	.word	0x2000a812
 800be40:	2302      	movs	r3, #2
 800be42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800be46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be50:	fb12 f303 	smulbb	r3, r2, r3
 800be54:	b29b      	uxth	r3, r3
 800be56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be58:	4293      	cmp	r3, r2
 800be5a:	bf28      	it	cs
 800be5c:	4613      	movcs	r3, r2
 800be5e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800be66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be68:	4413      	add	r3, r2
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be72:	429a      	cmp	r2, r3
 800be74:	d309      	bcc.n	800be8a <tcp_receive+0x2c6>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800be7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be7e:	4413      	add	r3, r2
 800be80:	b29a      	uxth	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800be88:	e04e      	b.n	800bf28 <tcp_receive+0x364>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800be94:	e048      	b.n	800bf28 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800be9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be9e:	4413      	add	r3, r2
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d309      	bcc.n	800bec0 <tcp_receive+0x2fc>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800beb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800beb4:	4413      	add	r3, r2
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bebe:	e004      	b.n	800beca <tcp_receive+0x306>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d326      	bcc.n	800bf28 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	b29a      	uxth	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800befa:	4413      	add	r3, r2
 800befc:	b29a      	uxth	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d30a      	bcc.n	800bf1e <tcp_receive+0x35a>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf12:	4413      	add	r3, r2
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bf1c:	e004      	b.n	800bf28 <tcp_receive+0x364>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf30:	4a98      	ldr	r2, [pc, #608]	; (800c194 <tcp_receive+0x5d0>)
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff fdca 	bl	800bacc <tcp_free_acked_segments>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	4a94      	ldr	r2, [pc, #592]	; (800c198 <tcp_receive+0x5d4>)
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff fdbf 	bl	800bacc <tcp_free_acked_segments>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d104      	bne.n	800bf66 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf62:	861a      	strh	r2, [r3, #48]	; 0x30
 800bf64:	e002      	b.n	800bf6c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d103      	bne.n	800bf82 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bf88:	4b84      	ldr	r3, [pc, #528]	; (800c19c <tcp_receive+0x5d8>)
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	8b5b      	ldrh	r3, [r3, #26]
 800bf9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d035      	beq.n	800c00e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d118      	bne.n	800bfdc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00c      	beq.n	800bfcc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fb f9d7 	bl	8007372 <lwip_htonl>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dc20      	bgt.n	800c00e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	8b5b      	ldrh	r3, [r3, #26]
 800bfd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfda:	e018      	b.n	800c00e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fb f9c2 	bl	8007372 <lwip_htonl>
 800bfee:	4603      	mov	r3, r0
 800bff0:	1ae3      	subs	r3, r4, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	dc0b      	bgt.n	800c00e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	8b5b      	ldrh	r3, [r3, #26]
 800bffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c004:	e003      	b.n	800c00e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f001 ff76 	bl	800def8 <tcp_send_empty_ack>
 800c00c:	e000      	b.n	800c010 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c00e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c014:	2b00      	cmp	r3, #0
 800c016:	d05b      	beq.n	800c0d0 <tcp_receive+0x50c>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c01c:	4b60      	ldr	r3, [pc, #384]	; (800c1a0 <tcp_receive+0x5dc>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	2b00      	cmp	r3, #0
 800c024:	da54      	bge.n	800c0d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c026:	4b5f      	ldr	r3, [pc, #380]	; (800c1a4 <tcp_receive+0x5e0>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c030:	b29b      	uxth	r3, r3
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	b29b      	uxth	r3, r3
 800c036:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c03a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c044:	10db      	asrs	r3, r3, #3
 800c046:	b21b      	sxth	r3, r3
 800c048:	b29b      	uxth	r3, r3
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c058:	b29a      	uxth	r2, r3
 800c05a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c05e:	4413      	add	r3, r2
 800c060:	b29b      	uxth	r3, r3
 800c062:	b21a      	sxth	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c068:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	da05      	bge.n	800c07c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c070:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c074:	425b      	negs	r3, r3
 800c076:	b29b      	uxth	r3, r3
 800c078:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c07c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c086:	109b      	asrs	r3, r3, #2
 800c088:	b21b      	sxth	r3, r3
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	b29b      	uxth	r3, r3
 800c090:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c0a0:	4413      	add	r3, r2
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	b21a      	sxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c0b0:	10db      	asrs	r3, r3, #3
 800c0b2:	b21b      	sxth	r3, r3
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	4413      	add	r3, r2
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	b21a      	sxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c0d0:	4b35      	ldr	r3, [pc, #212]	; (800c1a8 <tcp_receive+0x5e4>)
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 84e2 	beq.w	800ca9e <tcp_receive+0xeda>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	7d1b      	ldrb	r3, [r3, #20]
 800c0de:	2b06      	cmp	r3, #6
 800c0e0:	f200 84dd 	bhi.w	800ca9e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0e8:	4b30      	ldr	r3, [pc, #192]	; (800c1ac <tcp_receive+0x5e8>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f2c0 808f 	blt.w	800c214 <tcp_receive+0x650>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0fa:	4b2b      	ldr	r3, [pc, #172]	; (800c1a8 <tcp_receive+0x5e4>)
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	4619      	mov	r1, r3
 800c100:	4b2a      	ldr	r3, [pc, #168]	; (800c1ac <tcp_receive+0x5e8>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	440b      	add	r3, r1
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	3301      	adds	r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f300 8082 	bgt.w	800c214 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c110:	4b27      	ldr	r3, [pc, #156]	; (800c1b0 <tcp_receive+0x5ec>)
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c11a:	4b24      	ldr	r3, [pc, #144]	; (800c1ac <tcp_receive+0x5e8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c122:	4b23      	ldr	r3, [pc, #140]	; (800c1b0 <tcp_receive+0x5ec>)
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <tcp_receive+0x574>
 800c12a:	4b22      	ldr	r3, [pc, #136]	; (800c1b4 <tcp_receive+0x5f0>)
 800c12c:	f240 5294 	movw	r2, #1428	; 0x594
 800c130:	4921      	ldr	r1, [pc, #132]	; (800c1b8 <tcp_receive+0x5f4>)
 800c132:	4822      	ldr	r0, [pc, #136]	; (800c1bc <tcp_receive+0x5f8>)
 800c134:	f005 fe5c 	bl	8011df0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c13e:	4293      	cmp	r3, r2
 800c140:	d906      	bls.n	800c150 <tcp_receive+0x58c>
 800c142:	4b1c      	ldr	r3, [pc, #112]	; (800c1b4 <tcp_receive+0x5f0>)
 800c144:	f240 5295 	movw	r2, #1429	; 0x595
 800c148:	491d      	ldr	r1, [pc, #116]	; (800c1c0 <tcp_receive+0x5fc>)
 800c14a:	481c      	ldr	r0, [pc, #112]	; (800c1bc <tcp_receive+0x5f8>)
 800c14c:	f005 fe50 	bl	8011df0 <iprintf>
      off = (u16_t)off32;
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c156:	4b16      	ldr	r3, [pc, #88]	; (800c1b0 <tcp_receive+0x5ec>)
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	891b      	ldrh	r3, [r3, #8]
 800c15c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c160:	429a      	cmp	r2, r3
 800c162:	d906      	bls.n	800c172 <tcp_receive+0x5ae>
 800c164:	4b13      	ldr	r3, [pc, #76]	; (800c1b4 <tcp_receive+0x5f0>)
 800c166:	f240 5297 	movw	r2, #1431	; 0x597
 800c16a:	4916      	ldr	r1, [pc, #88]	; (800c1c4 <tcp_receive+0x600>)
 800c16c:	4813      	ldr	r0, [pc, #76]	; (800c1bc <tcp_receive+0x5f8>)
 800c16e:	f005 fe3f 	bl	8011df0 <iprintf>
      inseg.len -= off;
 800c172:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <tcp_receive+0x5ec>)
 800c174:	891a      	ldrh	r2, [r3, #8]
 800c176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <tcp_receive+0x5ec>)
 800c180:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c182:	4b0b      	ldr	r3, [pc, #44]	; (800c1b0 <tcp_receive+0x5ec>)
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	891a      	ldrh	r2, [r3, #8]
 800c188:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c190:	e02a      	b.n	800c1e8 <tcp_receive+0x624>
 800c192:	bf00      	nop
 800c194:	08015378 	.word	0x08015378
 800c198:	08015380 	.word	0x08015380
 800c19c:	2000a810 	.word	0x2000a810
 800c1a0:	2000a80c 	.word	0x2000a80c
 800c1a4:	2000a7d0 	.word	0x2000a7d0
 800c1a8:	2000a812 	.word	0x2000a812
 800c1ac:	2000a808 	.word	0x2000a808
 800c1b0:	2000a7e8 	.word	0x2000a7e8
 800c1b4:	08015010 	.word	0x08015010
 800c1b8:	08015388 	.word	0x08015388
 800c1bc:	0801505c 	.word	0x0801505c
 800c1c0:	08015398 	.word	0x08015398
 800c1c4:	080153a8 	.word	0x080153a8
        off -= p->len;
 800c1c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1ca:	895b      	ldrh	r3, [r3, #10]
 800c1cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c1da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1de:	2200      	movs	r2, #0
 800c1e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c1e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1ea:	895b      	ldrh	r3, [r3, #10]
 800c1ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d8e9      	bhi.n	800c1c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c1f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c1fc:	f7fc fb7c 	bl	80088f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	4a91      	ldr	r2, [pc, #580]	; (800c44c <tcp_receive+0x888>)
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	4b91      	ldr	r3, [pc, #580]	; (800c450 <tcp_receive+0x88c>)
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	4a8f      	ldr	r2, [pc, #572]	; (800c44c <tcp_receive+0x888>)
 800c20e:	6812      	ldr	r2, [r2, #0]
 800c210:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c212:	e00d      	b.n	800c230 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c214:	4b8d      	ldr	r3, [pc, #564]	; (800c44c <tcp_receive+0x888>)
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da06      	bge.n	800c230 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	8b5b      	ldrh	r3, [r3, #26]
 800c226:	f043 0302 	orr.w	r3, r3, #2
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c230:	4b86      	ldr	r3, [pc, #536]	; (800c44c <tcp_receive+0x888>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f2c0 842a 	blt.w	800ca94 <tcp_receive+0xed0>
 800c240:	4b82      	ldr	r3, [pc, #520]	; (800c44c <tcp_receive+0x888>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c248:	6879      	ldr	r1, [r7, #4]
 800c24a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c24c:	440b      	add	r3, r1
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	3301      	adds	r3, #1
 800c252:	2b00      	cmp	r3, #0
 800c254:	f300 841e 	bgt.w	800ca94 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c25c:	4b7b      	ldr	r3, [pc, #492]	; (800c44c <tcp_receive+0x888>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	f040 829a 	bne.w	800c79a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c266:	4b7a      	ldr	r3, [pc, #488]	; (800c450 <tcp_receive+0x88c>)
 800c268:	891c      	ldrh	r4, [r3, #8]
 800c26a:	4b79      	ldr	r3, [pc, #484]	; (800c450 <tcp_receive+0x88c>)
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	899b      	ldrh	r3, [r3, #12]
 800c270:	b29b      	uxth	r3, r3
 800c272:	4618      	mov	r0, r3
 800c274:	f7fb f868 	bl	8007348 <lwip_htons>
 800c278:	4603      	mov	r3, r0
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	f003 0303 	and.w	r3, r3, #3
 800c280:	2b00      	cmp	r3, #0
 800c282:	d001      	beq.n	800c288 <tcp_receive+0x6c4>
 800c284:	2301      	movs	r3, #1
 800c286:	e000      	b.n	800c28a <tcp_receive+0x6c6>
 800c288:	2300      	movs	r3, #0
 800c28a:	4423      	add	r3, r4
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	4b71      	ldr	r3, [pc, #452]	; (800c454 <tcp_receive+0x890>)
 800c290:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c296:	4b6f      	ldr	r3, [pc, #444]	; (800c454 <tcp_receive+0x890>)
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d275      	bcs.n	800c38a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c29e:	4b6c      	ldr	r3, [pc, #432]	; (800c450 <tcp_receive+0x88c>)
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	899b      	ldrh	r3, [r3, #12]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fb f84e 	bl	8007348 <lwip_htons>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01f      	beq.n	800c2f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c2b8:	4b65      	ldr	r3, [pc, #404]	; (800c450 <tcp_receive+0x88c>)
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	899b      	ldrh	r3, [r3, #12]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	b21b      	sxth	r3, r3
 800c2c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c2c6:	b21c      	sxth	r4, r3
 800c2c8:	4b61      	ldr	r3, [pc, #388]	; (800c450 <tcp_receive+0x88c>)
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	899b      	ldrh	r3, [r3, #12]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fb f839 	bl	8007348 <lwip_htons>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fb f830 	bl	8007348 <lwip_htons>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	4323      	orrs	r3, r4
 800c2ee:	b21a      	sxth	r2, r3
 800c2f0:	4b57      	ldr	r3, [pc, #348]	; (800c450 <tcp_receive+0x88c>)
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	b292      	uxth	r2, r2
 800c2f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c2fc:	4b54      	ldr	r3, [pc, #336]	; (800c450 <tcp_receive+0x88c>)
 800c2fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c300:	4b53      	ldr	r3, [pc, #332]	; (800c450 <tcp_receive+0x88c>)
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	899b      	ldrh	r3, [r3, #12]
 800c306:	b29b      	uxth	r3, r3
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fb f81d 	bl	8007348 <lwip_htons>
 800c30e:	4603      	mov	r3, r0
 800c310:	b2db      	uxtb	r3, r3
 800c312:	f003 0302 	and.w	r3, r3, #2
 800c316:	2b00      	cmp	r3, #0
 800c318:	d005      	beq.n	800c326 <tcp_receive+0x762>
            inseg.len -= 1;
 800c31a:	4b4d      	ldr	r3, [pc, #308]	; (800c450 <tcp_receive+0x88c>)
 800c31c:	891b      	ldrh	r3, [r3, #8]
 800c31e:	3b01      	subs	r3, #1
 800c320:	b29a      	uxth	r2, r3
 800c322:	4b4b      	ldr	r3, [pc, #300]	; (800c450 <tcp_receive+0x88c>)
 800c324:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c326:	4b4a      	ldr	r3, [pc, #296]	; (800c450 <tcp_receive+0x88c>)
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	4a49      	ldr	r2, [pc, #292]	; (800c450 <tcp_receive+0x88c>)
 800c32c:	8912      	ldrh	r2, [r2, #8]
 800c32e:	4611      	mov	r1, r2
 800c330:	4618      	mov	r0, r3
 800c332:	f7fc f9e1 	bl	80086f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c336:	4b46      	ldr	r3, [pc, #280]	; (800c450 <tcp_receive+0x88c>)
 800c338:	891c      	ldrh	r4, [r3, #8]
 800c33a:	4b45      	ldr	r3, [pc, #276]	; (800c450 <tcp_receive+0x88c>)
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	899b      	ldrh	r3, [r3, #12]
 800c340:	b29b      	uxth	r3, r3
 800c342:	4618      	mov	r0, r3
 800c344:	f7fb f800 	bl	8007348 <lwip_htons>
 800c348:	4603      	mov	r3, r0
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <tcp_receive+0x794>
 800c354:	2301      	movs	r3, #1
 800c356:	e000      	b.n	800c35a <tcp_receive+0x796>
 800c358:	2300      	movs	r3, #0
 800c35a:	4423      	add	r3, r4
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	4b3d      	ldr	r3, [pc, #244]	; (800c454 <tcp_receive+0x890>)
 800c360:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c362:	4b3c      	ldr	r3, [pc, #240]	; (800c454 <tcp_receive+0x890>)
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	4b38      	ldr	r3, [pc, #224]	; (800c44c <tcp_receive+0x888>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	441a      	add	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	6879      	ldr	r1, [r7, #4]
 800c374:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c376:	440b      	add	r3, r1
 800c378:	429a      	cmp	r2, r3
 800c37a:	d006      	beq.n	800c38a <tcp_receive+0x7c6>
 800c37c:	4b36      	ldr	r3, [pc, #216]	; (800c458 <tcp_receive+0x894>)
 800c37e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c382:	4936      	ldr	r1, [pc, #216]	; (800c45c <tcp_receive+0x898>)
 800c384:	4836      	ldr	r0, [pc, #216]	; (800c460 <tcp_receive+0x89c>)
 800c386:	f005 fd33 	bl	8011df0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80e7 	beq.w	800c562 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c394:	4b2e      	ldr	r3, [pc, #184]	; (800c450 <tcp_receive+0x88c>)
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	899b      	ldrh	r3, [r3, #12]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fa ffd3 	bl	8007348 <lwip_htons>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d010      	beq.n	800c3d0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c3ae:	e00a      	b.n	800c3c6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7fd fd92 	bl	8009eea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f0      	bne.n	800c3b0 <tcp_receive+0x7ec>
 800c3ce:	e0c8      	b.n	800c562 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c3d6:	e052      	b.n	800c47e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	899b      	ldrh	r3, [r3, #12]
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fa ffb1 	bl	8007348 <lwip_htons>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d03d      	beq.n	800c46e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c3f2:	4b17      	ldr	r3, [pc, #92]	; (800c450 <tcp_receive+0x88c>)
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	899b      	ldrh	r3, [r3, #12]
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fa ffa4 	bl	8007348 <lwip_htons>
 800c400:	4603      	mov	r3, r0
 800c402:	b2db      	uxtb	r3, r3
 800c404:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d130      	bne.n	800c46e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c40c:	4b10      	ldr	r3, [pc, #64]	; (800c450 <tcp_receive+0x88c>)
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	899b      	ldrh	r3, [r3, #12]
 800c412:	b29c      	uxth	r4, r3
 800c414:	2001      	movs	r0, #1
 800c416:	f7fa ff97 	bl	8007348 <lwip_htons>
 800c41a:	4603      	mov	r3, r0
 800c41c:	461a      	mov	r2, r3
 800c41e:	4b0c      	ldr	r3, [pc, #48]	; (800c450 <tcp_receive+0x88c>)
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	4322      	orrs	r2, r4
 800c424:	b292      	uxth	r2, r2
 800c426:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c428:	4b09      	ldr	r3, [pc, #36]	; (800c450 <tcp_receive+0x88c>)
 800c42a:	891c      	ldrh	r4, [r3, #8]
 800c42c:	4b08      	ldr	r3, [pc, #32]	; (800c450 <tcp_receive+0x88c>)
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	899b      	ldrh	r3, [r3, #12]
 800c432:	b29b      	uxth	r3, r3
 800c434:	4618      	mov	r0, r3
 800c436:	f7fa ff87 	bl	8007348 <lwip_htons>
 800c43a:	4603      	mov	r3, r0
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	f003 0303 	and.w	r3, r3, #3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00e      	beq.n	800c464 <tcp_receive+0x8a0>
 800c446:	2301      	movs	r3, #1
 800c448:	e00d      	b.n	800c466 <tcp_receive+0x8a2>
 800c44a:	bf00      	nop
 800c44c:	2000a808 	.word	0x2000a808
 800c450:	2000a7e8 	.word	0x2000a7e8
 800c454:	2000a812 	.word	0x2000a812
 800c458:	08015010 	.word	0x08015010
 800c45c:	080153b8 	.word	0x080153b8
 800c460:	0801505c 	.word	0x0801505c
 800c464:	2300      	movs	r3, #0
 800c466:	4423      	add	r3, r4
 800c468:	b29a      	uxth	r2, r3
 800c46a:	4b98      	ldr	r3, [pc, #608]	; (800c6cc <tcp_receive+0xb08>)
 800c46c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c470:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c478:	6938      	ldr	r0, [r7, #16]
 800c47a:	f7fd fd36 	bl	8009eea <tcp_seg_free>
            while (next &&
 800c47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00e      	beq.n	800c4a2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c484:	4b91      	ldr	r3, [pc, #580]	; (800c6cc <tcp_receive+0xb08>)
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	4b91      	ldr	r3, [pc, #580]	; (800c6d0 <tcp_receive+0xb0c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	441a      	add	r2, r3
 800c490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c498:	8909      	ldrh	r1, [r1, #8]
 800c49a:	440b      	add	r3, r1
 800c49c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da9a      	bge.n	800c3d8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d059      	beq.n	800c55c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c4a8:	4b88      	ldr	r3, [pc, #544]	; (800c6cc <tcp_receive+0xb08>)
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	4b88      	ldr	r3, [pc, #544]	; (800c6d0 <tcp_receive+0xb0c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	441a      	add	r2, r3
 800c4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dd4d      	ble.n	800c55c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	4b81      	ldr	r3, [pc, #516]	; (800c6d0 <tcp_receive+0xb0c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	4b80      	ldr	r3, [pc, #512]	; (800c6d4 <tcp_receive+0xb10>)
 800c4d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c4d6:	4b7f      	ldr	r3, [pc, #508]	; (800c6d4 <tcp_receive+0xb10>)
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	899b      	ldrh	r3, [r3, #12]
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fa ff32 	bl	8007348 <lwip_htons>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d005      	beq.n	800c4fc <tcp_receive+0x938>
                inseg.len -= 1;
 800c4f0:	4b78      	ldr	r3, [pc, #480]	; (800c6d4 <tcp_receive+0xb10>)
 800c4f2:	891b      	ldrh	r3, [r3, #8]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	4b76      	ldr	r3, [pc, #472]	; (800c6d4 <tcp_receive+0xb10>)
 800c4fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c4fc:	4b75      	ldr	r3, [pc, #468]	; (800c6d4 <tcp_receive+0xb10>)
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	4a74      	ldr	r2, [pc, #464]	; (800c6d4 <tcp_receive+0xb10>)
 800c502:	8912      	ldrh	r2, [r2, #8]
 800c504:	4611      	mov	r1, r2
 800c506:	4618      	mov	r0, r3
 800c508:	f7fc f8f6 	bl	80086f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c50c:	4b71      	ldr	r3, [pc, #452]	; (800c6d4 <tcp_receive+0xb10>)
 800c50e:	891c      	ldrh	r4, [r3, #8]
 800c510:	4b70      	ldr	r3, [pc, #448]	; (800c6d4 <tcp_receive+0xb10>)
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	899b      	ldrh	r3, [r3, #12]
 800c516:	b29b      	uxth	r3, r3
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fa ff15 	bl	8007348 <lwip_htons>
 800c51e:	4603      	mov	r3, r0
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 0303 	and.w	r3, r3, #3
 800c526:	2b00      	cmp	r3, #0
 800c528:	d001      	beq.n	800c52e <tcp_receive+0x96a>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e000      	b.n	800c530 <tcp_receive+0x96c>
 800c52e:	2300      	movs	r3, #0
 800c530:	4423      	add	r3, r4
 800c532:	b29a      	uxth	r2, r3
 800c534:	4b65      	ldr	r3, [pc, #404]	; (800c6cc <tcp_receive+0xb08>)
 800c536:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c538:	4b64      	ldr	r3, [pc, #400]	; (800c6cc <tcp_receive+0xb08>)
 800c53a:	881b      	ldrh	r3, [r3, #0]
 800c53c:	461a      	mov	r2, r3
 800c53e:	4b64      	ldr	r3, [pc, #400]	; (800c6d0 <tcp_receive+0xb0c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	441a      	add	r2, r3
 800c544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d006      	beq.n	800c55c <tcp_receive+0x998>
 800c54e:	4b62      	ldr	r3, [pc, #392]	; (800c6d8 <tcp_receive+0xb14>)
 800c550:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c554:	4961      	ldr	r1, [pc, #388]	; (800c6dc <tcp_receive+0xb18>)
 800c556:	4862      	ldr	r0, [pc, #392]	; (800c6e0 <tcp_receive+0xb1c>)
 800c558:	f005 fc4a 	bl	8011df0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c560:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c562:	4b5a      	ldr	r3, [pc, #360]	; (800c6cc <tcp_receive+0xb08>)
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	4b59      	ldr	r3, [pc, #356]	; (800c6d0 <tcp_receive+0xb0c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	441a      	add	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c576:	4b55      	ldr	r3, [pc, #340]	; (800c6cc <tcp_receive+0xb08>)
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d206      	bcs.n	800c58c <tcp_receive+0x9c8>
 800c57e:	4b56      	ldr	r3, [pc, #344]	; (800c6d8 <tcp_receive+0xb14>)
 800c580:	f240 6207 	movw	r2, #1543	; 0x607
 800c584:	4957      	ldr	r1, [pc, #348]	; (800c6e4 <tcp_receive+0xb20>)
 800c586:	4856      	ldr	r0, [pc, #344]	; (800c6e0 <tcp_receive+0xb1c>)
 800c588:	f005 fc32 	bl	8011df0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c590:	4b4e      	ldr	r3, [pc, #312]	; (800c6cc <tcp_receive+0xb08>)
 800c592:	881b      	ldrh	r3, [r3, #0]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	b29a      	uxth	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7fc ffc5 	bl	800952c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c5a2:	4b4c      	ldr	r3, [pc, #304]	; (800c6d4 <tcp_receive+0xb10>)
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	891b      	ldrh	r3, [r3, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c5ac:	4b49      	ldr	r3, [pc, #292]	; (800c6d4 <tcp_receive+0xb10>)
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4a4d      	ldr	r2, [pc, #308]	; (800c6e8 <tcp_receive+0xb24>)
 800c5b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c5b4:	4b47      	ldr	r3, [pc, #284]	; (800c6d4 <tcp_receive+0xb10>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5ba:	4b46      	ldr	r3, [pc, #280]	; (800c6d4 <tcp_receive+0xb10>)
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	899b      	ldrh	r3, [r3, #12]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fa fec0 	bl	8007348 <lwip_htons>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 80b8 	beq.w	800c746 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c5d6:	4b45      	ldr	r3, [pc, #276]	; (800c6ec <tcp_receive+0xb28>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	f043 0320 	orr.w	r3, r3, #32
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	4b42      	ldr	r3, [pc, #264]	; (800c6ec <tcp_receive+0xb28>)
 800c5e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c5e4:	e0af      	b.n	800c746 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4a36      	ldr	r2, [pc, #216]	; (800c6d0 <tcp_receive+0xb0c>)
 800c5f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	891b      	ldrh	r3, [r3, #8]
 800c5fc:	461c      	mov	r4, r3
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	899b      	ldrh	r3, [r3, #12]
 800c604:	b29b      	uxth	r3, r3
 800c606:	4618      	mov	r0, r3
 800c608:	f7fa fe9e 	bl	8007348 <lwip_htons>
 800c60c:	4603      	mov	r3, r0
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 0303 	and.w	r3, r3, #3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <tcp_receive+0xa58>
 800c618:	2301      	movs	r3, #1
 800c61a:	e000      	b.n	800c61e <tcp_receive+0xa5a>
 800c61c:	2300      	movs	r3, #0
 800c61e:	191a      	adds	r2, r3, r4
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c624:	441a      	add	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c62e:	461c      	mov	r4, r3
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	891b      	ldrh	r3, [r3, #8]
 800c634:	461d      	mov	r5, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	899b      	ldrh	r3, [r3, #12]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fa fe82 	bl	8007348 <lwip_htons>
 800c644:	4603      	mov	r3, r0
 800c646:	b2db      	uxtb	r3, r3
 800c648:	f003 0303 	and.w	r3, r3, #3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <tcp_receive+0xa90>
 800c650:	2301      	movs	r3, #1
 800c652:	e000      	b.n	800c656 <tcp_receive+0xa92>
 800c654:	2300      	movs	r3, #0
 800c656:	442b      	add	r3, r5
 800c658:	429c      	cmp	r4, r3
 800c65a:	d206      	bcs.n	800c66a <tcp_receive+0xaa6>
 800c65c:	4b1e      	ldr	r3, [pc, #120]	; (800c6d8 <tcp_receive+0xb14>)
 800c65e:	f240 622b 	movw	r2, #1579	; 0x62b
 800c662:	4923      	ldr	r1, [pc, #140]	; (800c6f0 <tcp_receive+0xb2c>)
 800c664:	481e      	ldr	r0, [pc, #120]	; (800c6e0 <tcp_receive+0xb1c>)
 800c666:	f005 fbc3 	bl	8011df0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	891b      	ldrh	r3, [r3, #8]
 800c66e:	461c      	mov	r4, r3
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	899b      	ldrh	r3, [r3, #12]
 800c676:	b29b      	uxth	r3, r3
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fa fe65 	bl	8007348 <lwip_htons>
 800c67e:	4603      	mov	r3, r0
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f003 0303 	and.w	r3, r3, #3
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <tcp_receive+0xaca>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <tcp_receive+0xacc>
 800c68e:	2300      	movs	r3, #0
 800c690:	1919      	adds	r1, r3, r4
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c696:	b28b      	uxth	r3, r1
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7fc ff43 	bl	800952c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	891b      	ldrh	r3, [r3, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d028      	beq.n	800c702 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c6b0:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <tcp_receive+0xb24>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d01d      	beq.n	800c6f4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c6b8:	4b0b      	ldr	r3, [pc, #44]	; (800c6e8 <tcp_receive+0xb24>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f7fc fa60 	bl	8008b88 <pbuf_cat>
 800c6c8:	e018      	b.n	800c6fc <tcp_receive+0xb38>
 800c6ca:	bf00      	nop
 800c6cc:	2000a812 	.word	0x2000a812
 800c6d0:	2000a808 	.word	0x2000a808
 800c6d4:	2000a7e8 	.word	0x2000a7e8
 800c6d8:	08015010 	.word	0x08015010
 800c6dc:	080153f0 	.word	0x080153f0
 800c6e0:	0801505c 	.word	0x0801505c
 800c6e4:	0801542c 	.word	0x0801542c
 800c6e8:	2000a818 	.word	0x2000a818
 800c6ec:	2000a815 	.word	0x2000a815
 800c6f0:	0801544c 	.word	0x0801544c
            } else {
              recv_data = cseg->p;
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4a70      	ldr	r2, [pc, #448]	; (800c8bc <tcp_receive+0xcf8>)
 800c6fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2200      	movs	r2, #0
 800c700:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	899b      	ldrh	r3, [r3, #12]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fa fe1c 	bl	8007348 <lwip_htons>
 800c710:	4603      	mov	r3, r0
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00d      	beq.n	800c738 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c71c:	4b68      	ldr	r3, [pc, #416]	; (800c8c0 <tcp_receive+0xcfc>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f043 0320 	orr.w	r3, r3, #32
 800c724:	b2da      	uxtb	r2, r3
 800c726:	4b66      	ldr	r3, [pc, #408]	; (800c8c0 <tcp_receive+0xcfc>)
 800c728:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	7d1b      	ldrb	r3, [r3, #20]
 800c72e:	2b04      	cmp	r3, #4
 800c730:	d102      	bne.n	800c738 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2207      	movs	r2, #7
 800c736:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c740:	68b8      	ldr	r0, [r7, #8]
 800c742:	f7fd fbd2 	bl	8009eea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d008      	beq.n	800c760 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c75a:	429a      	cmp	r2, r3
 800c75c:	f43f af43 	beq.w	800c5e6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	8b5b      	ldrh	r3, [r3, #26]
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00e      	beq.n	800c78a <tcp_receive+0xbc6>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	8b5b      	ldrh	r3, [r3, #26]
 800c770:	f023 0301 	bic.w	r3, r3, #1
 800c774:	b29a      	uxth	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	835a      	strh	r2, [r3, #26]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8b5b      	ldrh	r3, [r3, #26]
 800c77e:	f043 0302 	orr.w	r3, r3, #2
 800c782:	b29a      	uxth	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c788:	e188      	b.n	800ca9c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	8b5b      	ldrh	r3, [r3, #26]
 800c78e:	f043 0301 	orr.w	r3, r3, #1
 800c792:	b29a      	uxth	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c798:	e180      	b.n	800ca9c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d106      	bne.n	800c7b0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c7a2:	4848      	ldr	r0, [pc, #288]	; (800c8c4 <tcp_receive+0xd00>)
 800c7a4:	f7fd fbba 	bl	8009f1c <tcp_seg_copy>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	675a      	str	r2, [r3, #116]	; 0x74
 800c7ae:	e16d      	b.n	800ca8c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7ba:	e157      	b.n	800ca6c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	685a      	ldr	r2, [r3, #4]
 800c7c2:	4b41      	ldr	r3, [pc, #260]	; (800c8c8 <tcp_receive+0xd04>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d11d      	bne.n	800c806 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c7ca:	4b3e      	ldr	r3, [pc, #248]	; (800c8c4 <tcp_receive+0xd00>)
 800c7cc:	891a      	ldrh	r2, [r3, #8]
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	891b      	ldrh	r3, [r3, #8]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	f240 814f 	bls.w	800ca76 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c7d8:	483a      	ldr	r0, [pc, #232]	; (800c8c4 <tcp_receive+0xd00>)
 800c7da:	f7fd fb9f 	bl	8009f1c <tcp_seg_copy>
 800c7de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 8149 	beq.w	800ca7a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800c7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	e002      	b.n	800c7fc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c7fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7fe:	6978      	ldr	r0, [r7, #20]
 800c800:	f7ff f8dc 	bl	800b9bc <tcp_oos_insert_segment>
                }
                break;
 800c804:	e139      	b.n	800ca7a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d117      	bne.n	800c83c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c80c:	4b2e      	ldr	r3, [pc, #184]	; (800c8c8 <tcp_receive+0xd04>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	2b00      	cmp	r3, #0
 800c81a:	da57      	bge.n	800c8cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c81c:	4829      	ldr	r0, [pc, #164]	; (800c8c4 <tcp_receive+0xd00>)
 800c81e:	f7fd fb7d 	bl	8009f1c <tcp_seg_copy>
 800c822:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 8129 	beq.w	800ca7e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c834:	69b8      	ldr	r0, [r7, #24]
 800c836:	f7ff f8c1 	bl	800b9bc <tcp_oos_insert_segment>
                  }
                  break;
 800c83a:	e120      	b.n	800ca7e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c83c:	4b22      	ldr	r3, [pc, #136]	; (800c8c8 <tcp_receive+0xd04>)
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	3b01      	subs	r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	db3e      	blt.n	800c8cc <tcp_receive+0xd08>
 800c84e:	4b1e      	ldr	r3, [pc, #120]	; (800c8c8 <tcp_receive+0xd04>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	3301      	adds	r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	dc35      	bgt.n	800c8cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c860:	4818      	ldr	r0, [pc, #96]	; (800c8c4 <tcp_receive+0xd00>)
 800c862:	f7fd fb5b 	bl	8009f1c <tcp_seg_copy>
 800c866:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 8109 	beq.w	800ca82 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c878:	8912      	ldrh	r2, [r2, #8]
 800c87a:	441a      	add	r2, r3
 800c87c:	4b12      	ldr	r3, [pc, #72]	; (800c8c8 <tcp_receive+0xd04>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	dd12      	ble.n	800c8ac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c886:	4b10      	ldr	r3, [pc, #64]	; (800c8c8 <tcp_receive+0xd04>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	b29b      	uxth	r3, r3
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	b29a      	uxth	r2, r3
 800c898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89e:	685a      	ldr	r2, [r3, #4]
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	891b      	ldrh	r3, [r3, #8]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f7fb ff26 	bl	80086f8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c8b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c8b4:	69f8      	ldr	r0, [r7, #28]
 800c8b6:	f7ff f881 	bl	800b9bc <tcp_oos_insert_segment>
                  }
                  break;
 800c8ba:	e0e2      	b.n	800ca82 <tcp_receive+0xebe>
 800c8bc:	2000a818 	.word	0x2000a818
 800c8c0:	2000a815 	.word	0x2000a815
 800c8c4:	2000a7e8 	.word	0x2000a7e8
 800c8c8:	2000a808 	.word	0x2000a808
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f040 80c6 	bne.w	800ca66 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c8da:	4b80      	ldr	r3, [pc, #512]	; (800cadc <tcp_receive+0xf18>)
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f340 80bd 	ble.w	800ca66 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	899b      	ldrh	r3, [r3, #12]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fa fd27 	bl	8007348 <lwip_htons>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f003 0301 	and.w	r3, r3, #1
 800c902:	2b00      	cmp	r3, #0
 800c904:	f040 80bf 	bne.w	800ca86 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c908:	4875      	ldr	r0, [pc, #468]	; (800cae0 <tcp_receive+0xf1c>)
 800c90a:	f7fd fb07 	bl	8009f1c <tcp_seg_copy>
 800c90e:	4602      	mov	r2, r0
 800c910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c912:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 80b6 	beq.w	800ca8a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c926:	8912      	ldrh	r2, [r2, #8]
 800c928:	441a      	add	r2, r3
 800c92a:	4b6c      	ldr	r3, [pc, #432]	; (800cadc <tcp_receive+0xf18>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	dd12      	ble.n	800c95a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c934:	4b69      	ldr	r3, [pc, #420]	; (800cadc <tcp_receive+0xf18>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	b29a      	uxth	r2, r3
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	b29b      	uxth	r3, r3
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	b29a      	uxth	r2, r3
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c950:	891b      	ldrh	r3, [r3, #8]
 800c952:	4619      	mov	r1, r3
 800c954:	4610      	mov	r0, r2
 800c956:	f7fb fecf 	bl	80086f8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c95a:	4b62      	ldr	r3, [pc, #392]	; (800cae4 <tcp_receive+0xf20>)
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	4b5e      	ldr	r3, [pc, #376]	; (800cadc <tcp_receive+0xf18>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	441a      	add	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c96e:	440b      	add	r3, r1
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	f340 8089 	ble.w	800ca8a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	899b      	ldrh	r3, [r3, #12]
 800c980:	b29b      	uxth	r3, r3
 800c982:	4618      	mov	r0, r3
 800c984:	f7fa fce0 	bl	8007348 <lwip_htons>
 800c988:	4603      	mov	r3, r0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d022      	beq.n	800c9da <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	899b      	ldrh	r3, [r3, #12]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	b21b      	sxth	r3, r3
 800c9a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c9a4:	b21c      	sxth	r4, r3
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	899b      	ldrh	r3, [r3, #12]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fa fcc9 	bl	8007348 <lwip_htons>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fa fcc0 	bl	8007348 <lwip_htons>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	b21b      	sxth	r3, r3
 800c9cc:	4323      	orrs	r3, r4
 800c9ce:	b21a      	sxth	r2, r3
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	b292      	uxth	r2, r2
 800c9d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e4:	4413      	add	r3, r2
 800c9e6:	b299      	uxth	r1, r3
 800c9e8:	4b3c      	ldr	r3, [pc, #240]	; (800cadc <tcp_receive+0xf18>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	1a8a      	subs	r2, r1, r2
 800c9f4:	b292      	uxth	r2, r2
 800c9f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	891b      	ldrh	r3, [r3, #8]
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f7fb fe76 	bl	80086f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	891c      	ldrh	r4, [r3, #8]
 800ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	899b      	ldrh	r3, [r3, #12]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fa fc93 	bl	8007348 <lwip_htons>
 800ca22:	4603      	mov	r3, r0
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <tcp_receive+0xe6e>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <tcp_receive+0xe70>
 800ca32:	2300      	movs	r3, #0
 800ca34:	4423      	add	r3, r4
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	4b2a      	ldr	r3, [pc, #168]	; (800cae4 <tcp_receive+0xf20>)
 800ca3a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ca3c:	4b29      	ldr	r3, [pc, #164]	; (800cae4 <tcp_receive+0xf20>)
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	461a      	mov	r2, r3
 800ca42:	4b26      	ldr	r3, [pc, #152]	; (800cadc <tcp_receive+0xf18>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	441a      	add	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ca50:	440b      	add	r3, r1
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d019      	beq.n	800ca8a <tcp_receive+0xec6>
 800ca56:	4b24      	ldr	r3, [pc, #144]	; (800cae8 <tcp_receive+0xf24>)
 800ca58:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ca5c:	4923      	ldr	r1, [pc, #140]	; (800caec <tcp_receive+0xf28>)
 800ca5e:	4824      	ldr	r0, [pc, #144]	; (800caf0 <tcp_receive+0xf2c>)
 800ca60:	f005 f9c6 	bl	8011df0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ca64:	e011      	b.n	800ca8a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f47f aea4 	bne.w	800c7bc <tcp_receive+0xbf8>
 800ca74:	e00a      	b.n	800ca8c <tcp_receive+0xec8>
                break;
 800ca76:	bf00      	nop
 800ca78:	e008      	b.n	800ca8c <tcp_receive+0xec8>
                break;
 800ca7a:	bf00      	nop
 800ca7c:	e006      	b.n	800ca8c <tcp_receive+0xec8>
                  break;
 800ca7e:	bf00      	nop
 800ca80:	e004      	b.n	800ca8c <tcp_receive+0xec8>
                  break;
 800ca82:	bf00      	nop
 800ca84:	e002      	b.n	800ca8c <tcp_receive+0xec8>
                  break;
 800ca86:	bf00      	nop
 800ca88:	e000      	b.n	800ca8c <tcp_receive+0xec8>
                break;
 800ca8a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f001 fa33 	bl	800def8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ca92:	e003      	b.n	800ca9c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f001 fa2f 	bl	800def8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca9a:	e01a      	b.n	800cad2 <tcp_receive+0xf0e>
 800ca9c:	e019      	b.n	800cad2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ca9e:	4b0f      	ldr	r3, [pc, #60]	; (800cadc <tcp_receive+0xf18>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	db0a      	blt.n	800cac2 <tcp_receive+0xefe>
 800caac:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <tcp_receive+0xf18>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	6879      	ldr	r1, [r7, #4]
 800cab6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cab8:	440b      	add	r3, r1
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	3301      	adds	r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	dd07      	ble.n	800cad2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	8b5b      	ldrh	r3, [r3, #26]
 800cac6:	f043 0302 	orr.w	r3, r3, #2
 800caca:	b29a      	uxth	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cad0:	e7ff      	b.n	800cad2 <tcp_receive+0xf0e>
 800cad2:	bf00      	nop
 800cad4:	3750      	adds	r7, #80	; 0x50
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bdb0      	pop	{r4, r5, r7, pc}
 800cada:	bf00      	nop
 800cadc:	2000a808 	.word	0x2000a808
 800cae0:	2000a7e8 	.word	0x2000a7e8
 800cae4:	2000a812 	.word	0x2000a812
 800cae8:	08015010 	.word	0x08015010
 800caec:	080153b8 	.word	0x080153b8
 800caf0:	0801505c 	.word	0x0801505c

0800caf4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cafa:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <tcp_get_next_optbyte+0x5c>)
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	1c5a      	adds	r2, r3, #1
 800cb00:	b291      	uxth	r1, r2
 800cb02:	4a13      	ldr	r2, [pc, #76]	; (800cb50 <tcp_get_next_optbyte+0x5c>)
 800cb04:	8011      	strh	r1, [r2, #0]
 800cb06:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cb08:	4b12      	ldr	r3, [pc, #72]	; (800cb54 <tcp_get_next_optbyte+0x60>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d004      	beq.n	800cb1a <tcp_get_next_optbyte+0x26>
 800cb10:	4b11      	ldr	r3, [pc, #68]	; (800cb58 <tcp_get_next_optbyte+0x64>)
 800cb12:	881b      	ldrh	r3, [r3, #0]
 800cb14:	88fa      	ldrh	r2, [r7, #6]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d208      	bcs.n	800cb2c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cb1a:	4b10      	ldr	r3, [pc, #64]	; (800cb5c <tcp_get_next_optbyte+0x68>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3314      	adds	r3, #20
 800cb20:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cb22:	88fb      	ldrh	r3, [r7, #6]
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	4413      	add	r3, r2
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	e00b      	b.n	800cb44 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cb2c:	88fb      	ldrh	r3, [r7, #6]
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <tcp_get_next_optbyte+0x64>)
 800cb32:	881b      	ldrh	r3, [r3, #0]
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cb3a:	4b06      	ldr	r3, [pc, #24]	; (800cb54 <tcp_get_next_optbyte+0x60>)
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	797b      	ldrb	r3, [r7, #5]
 800cb40:	4413      	add	r3, r2
 800cb42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	2000a804 	.word	0x2000a804
 800cb54:	2000a800 	.word	0x2000a800
 800cb58:	2000a7fe 	.word	0x2000a7fe
 800cb5c:	2000a7f8 	.word	0x2000a7f8

0800cb60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d106      	bne.n	800cb7c <tcp_parseopt+0x1c>
 800cb6e:	4b32      	ldr	r3, [pc, #200]	; (800cc38 <tcp_parseopt+0xd8>)
 800cb70:	f240 727d 	movw	r2, #1917	; 0x77d
 800cb74:	4931      	ldr	r1, [pc, #196]	; (800cc3c <tcp_parseopt+0xdc>)
 800cb76:	4832      	ldr	r0, [pc, #200]	; (800cc40 <tcp_parseopt+0xe0>)
 800cb78:	f005 f93a 	bl	8011df0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cb7c:	4b31      	ldr	r3, [pc, #196]	; (800cc44 <tcp_parseopt+0xe4>)
 800cb7e:	881b      	ldrh	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d055      	beq.n	800cc30 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cb84:	4b30      	ldr	r3, [pc, #192]	; (800cc48 <tcp_parseopt+0xe8>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	801a      	strh	r2, [r3, #0]
 800cb8a:	e045      	b.n	800cc18 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800cb8c:	f7ff ffb2 	bl	800caf4 <tcp_get_next_optbyte>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d006      	beq.n	800cba8 <tcp_parseopt+0x48>
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	dc2b      	bgt.n	800cbf6 <tcp_parseopt+0x96>
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d041      	beq.n	800cc26 <tcp_parseopt+0xc6>
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d127      	bne.n	800cbf6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800cba6:	e037      	b.n	800cc18 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cba8:	f7ff ffa4 	bl	800caf4 <tcp_get_next_optbyte>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	d13b      	bne.n	800cc2a <tcp_parseopt+0xca>
 800cbb2:	4b25      	ldr	r3, [pc, #148]	; (800cc48 <tcp_parseopt+0xe8>)
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	4a22      	ldr	r2, [pc, #136]	; (800cc44 <tcp_parseopt+0xe4>)
 800cbba:	8812      	ldrh	r2, [r2, #0]
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	da34      	bge.n	800cc2a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cbc0:	f7ff ff98 	bl	800caf4 <tcp_get_next_optbyte>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	021b      	lsls	r3, r3, #8
 800cbca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cbcc:	f7ff ff92 	bl	800caf4 <tcp_get_next_optbyte>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	89bb      	ldrh	r3, [r7, #12]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cbda:	89bb      	ldrh	r3, [r7, #12]
 800cbdc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cbe0:	d804      	bhi.n	800cbec <tcp_parseopt+0x8c>
 800cbe2:	89bb      	ldrh	r3, [r7, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <tcp_parseopt+0x8c>
 800cbe8:	89ba      	ldrh	r2, [r7, #12]
 800cbea:	e001      	b.n	800cbf0 <tcp_parseopt+0x90>
 800cbec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cbf4:	e010      	b.n	800cc18 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cbf6:	f7ff ff7d 	bl	800caf4 <tcp_get_next_optbyte>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cbfe:	7afb      	ldrb	r3, [r7, #11]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d914      	bls.n	800cc2e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cc04:	7afb      	ldrb	r3, [r7, #11]
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	4b0f      	ldr	r3, [pc, #60]	; (800cc48 <tcp_parseopt+0xe8>)
 800cc0a:	881b      	ldrh	r3, [r3, #0]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	3b02      	subs	r3, #2
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <tcp_parseopt+0xe8>)
 800cc16:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cc18:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <tcp_parseopt+0xe8>)
 800cc1a:	881a      	ldrh	r2, [r3, #0]
 800cc1c:	4b09      	ldr	r3, [pc, #36]	; (800cc44 <tcp_parseopt+0xe4>)
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d3b3      	bcc.n	800cb8c <tcp_parseopt+0x2c>
 800cc24:	e004      	b.n	800cc30 <tcp_parseopt+0xd0>
          return;
 800cc26:	bf00      	nop
 800cc28:	e002      	b.n	800cc30 <tcp_parseopt+0xd0>
            return;
 800cc2a:	bf00      	nop
 800cc2c:	e000      	b.n	800cc30 <tcp_parseopt+0xd0>
            return;
 800cc2e:	bf00      	nop
      }
    }
  }
}
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	08015010 	.word	0x08015010
 800cc3c:	08015474 	.word	0x08015474
 800cc40:	0801505c 	.word	0x0801505c
 800cc44:	2000a7fc 	.word	0x2000a7fc
 800cc48:	2000a804 	.word	0x2000a804

0800cc4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cc50:	4b05      	ldr	r3, [pc, #20]	; (800cc68 <tcp_trigger_input_pcb_close+0x1c>)
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f043 0310 	orr.w	r3, r3, #16
 800cc58:	b2da      	uxtb	r2, r3
 800cc5a:	4b03      	ldr	r3, [pc, #12]	; (800cc68 <tcp_trigger_input_pcb_close+0x1c>)
 800cc5c:	701a      	strb	r2, [r3, #0]
}
 800cc5e:	bf00      	nop
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	2000a815 	.word	0x2000a815

0800cc6c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00a      	beq.n	800cc94 <tcp_route+0x28>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	7a1b      	ldrb	r3, [r3, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d006      	beq.n	800cc94 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	7a1b      	ldrb	r3, [r3, #8]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fb fb5a 	bl	8008344 <netif_get_by_index>
 800cc90:	4603      	mov	r3, r0
 800cc92:	e003      	b.n	800cc9c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f002 ffe3 	bl	800fc60 <ip4_route>
 800cc9a:	4603      	mov	r3, r0
  }
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cca4:	b590      	push	{r4, r7, lr}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	603b      	str	r3, [r7, #0]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d105      	bne.n	800ccc6 <tcp_create_segment+0x22>
 800ccba:	4b44      	ldr	r3, [pc, #272]	; (800cdcc <tcp_create_segment+0x128>)
 800ccbc:	22a3      	movs	r2, #163	; 0xa3
 800ccbe:	4944      	ldr	r1, [pc, #272]	; (800cdd0 <tcp_create_segment+0x12c>)
 800ccc0:	4844      	ldr	r0, [pc, #272]	; (800cdd4 <tcp_create_segment+0x130>)
 800ccc2:	f005 f895 	bl	8011df0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d105      	bne.n	800ccd8 <tcp_create_segment+0x34>
 800cccc:	4b3f      	ldr	r3, [pc, #252]	; (800cdcc <tcp_create_segment+0x128>)
 800ccce:	22a4      	movs	r2, #164	; 0xa4
 800ccd0:	4941      	ldr	r1, [pc, #260]	; (800cdd8 <tcp_create_segment+0x134>)
 800ccd2:	4840      	ldr	r0, [pc, #256]	; (800cdd4 <tcp_create_segment+0x130>)
 800ccd4:	f005 f88c 	bl	8011df0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ccd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cce6:	2003      	movs	r0, #3
 800cce8:	f7fa ffa6 	bl	8007c38 <memp_malloc>
 800ccec:	6138      	str	r0, [r7, #16]
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d104      	bne.n	800ccfe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ccf4:	68b8      	ldr	r0, [r7, #8]
 800ccf6:	f7fb fe85 	bl	8008a04 <pbuf_free>
    return NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e061      	b.n	800cdc2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cd04:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	891a      	ldrh	r2, [r3, #8]
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d205      	bcs.n	800cd2a <tcp_create_segment+0x86>
 800cd1e:	4b2b      	ldr	r3, [pc, #172]	; (800cdcc <tcp_create_segment+0x128>)
 800cd20:	22b0      	movs	r2, #176	; 0xb0
 800cd22:	492e      	ldr	r1, [pc, #184]	; (800cddc <tcp_create_segment+0x138>)
 800cd24:	482b      	ldr	r0, [pc, #172]	; (800cdd4 <tcp_create_segment+0x130>)
 800cd26:	f005 f863 	bl	8011df0 <iprintf>
  seg->len = p->tot_len - optlen;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	891a      	ldrh	r2, [r3, #8]
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cd3a:	2114      	movs	r1, #20
 800cd3c:	68b8      	ldr	r0, [r7, #8]
 800cd3e:	f7fb fdcb 	bl	80088d8 <pbuf_add_header>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d004      	beq.n	800cd52 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cd48:	6938      	ldr	r0, [r7, #16]
 800cd4a:	f7fd f8ce 	bl	8009eea <tcp_seg_free>
    return NULL;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	e037      	b.n	800cdc2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	8ada      	ldrh	r2, [r3, #22]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	68dc      	ldr	r4, [r3, #12]
 800cd64:	4610      	mov	r0, r2
 800cd66:	f7fa faef 	bl	8007348 <lwip_htons>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	8b1a      	ldrh	r2, [r3, #24]
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	68dc      	ldr	r4, [r3, #12]
 800cd76:	4610      	mov	r0, r2
 800cd78:	f7fa fae6 	bl	8007348 <lwip_htons>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	68dc      	ldr	r4, [r3, #12]
 800cd84:	6838      	ldr	r0, [r7, #0]
 800cd86:	f7fa faf4 	bl	8007372 <lwip_htonl>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	089b      	lsrs	r3, r3, #2
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	3305      	adds	r3, #5
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	031b      	lsls	r3, r3, #12
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	4313      	orrs	r3, r2
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	68dc      	ldr	r4, [r3, #12]
 800cdaa:	4610      	mov	r0, r2
 800cdac:	f7fa facc 	bl	8007348 <lwip_htons>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	749a      	strb	r2, [r3, #18]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	74da      	strb	r2, [r3, #19]
  return seg;
 800cdc0:	693b      	ldr	r3, [r7, #16]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	371c      	adds	r7, #28
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd90      	pop	{r4, r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	08015490 	.word	0x08015490
 800cdd0:	080154c4 	.word	0x080154c4
 800cdd4:	080154e4 	.word	0x080154e4
 800cdd8:	0801550c 	.word	0x0801550c
 800cddc:	08015530 	.word	0x08015530

0800cde0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b08b      	sub	sp, #44	; 0x2c
 800cde4:	af02      	add	r7, sp, #8
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cdec:	2300      	movs	r3, #0
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d106      	bne.n	800ce0c <tcp_split_unsent_seg+0x2c>
 800cdfe:	4b95      	ldr	r3, [pc, #596]	; (800d054 <tcp_split_unsent_seg+0x274>)
 800ce00:	f240 324b 	movw	r2, #843	; 0x34b
 800ce04:	4994      	ldr	r1, [pc, #592]	; (800d058 <tcp_split_unsent_seg+0x278>)
 800ce06:	4895      	ldr	r0, [pc, #596]	; (800d05c <tcp_split_unsent_seg+0x27c>)
 800ce08:	f004 fff2 	bl	8011df0 <iprintf>

  useg = pcb->unsent;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce10:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d102      	bne.n	800ce1e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ce18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce1c:	e116      	b.n	800d04c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ce1e:	887b      	ldrh	r3, [r7, #2]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d109      	bne.n	800ce38 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ce24:	4b8b      	ldr	r3, [pc, #556]	; (800d054 <tcp_split_unsent_seg+0x274>)
 800ce26:	f240 3253 	movw	r2, #851	; 0x353
 800ce2a:	498d      	ldr	r1, [pc, #564]	; (800d060 <tcp_split_unsent_seg+0x280>)
 800ce2c:	488b      	ldr	r0, [pc, #556]	; (800d05c <tcp_split_unsent_seg+0x27c>)
 800ce2e:	f004 ffdf 	bl	8011df0 <iprintf>
    return ERR_VAL;
 800ce32:	f06f 0305 	mvn.w	r3, #5
 800ce36:	e109      	b.n	800d04c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	891b      	ldrh	r3, [r3, #8]
 800ce3c:	887a      	ldrh	r2, [r7, #2]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d301      	bcc.n	800ce46 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e102      	b.n	800d04c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce4a:	887a      	ldrh	r2, [r7, #2]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d906      	bls.n	800ce5e <tcp_split_unsent_seg+0x7e>
 800ce50:	4b80      	ldr	r3, [pc, #512]	; (800d054 <tcp_split_unsent_seg+0x274>)
 800ce52:	f240 325b 	movw	r2, #859	; 0x35b
 800ce56:	4983      	ldr	r1, [pc, #524]	; (800d064 <tcp_split_unsent_seg+0x284>)
 800ce58:	4880      	ldr	r0, [pc, #512]	; (800d05c <tcp_split_unsent_seg+0x27c>)
 800ce5a:	f004 ffc9 	bl	8011df0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	891b      	ldrh	r3, [r3, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d106      	bne.n	800ce74 <tcp_split_unsent_seg+0x94>
 800ce66:	4b7b      	ldr	r3, [pc, #492]	; (800d054 <tcp_split_unsent_seg+0x274>)
 800ce68:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ce6c:	497e      	ldr	r1, [pc, #504]	; (800d068 <tcp_split_unsent_seg+0x288>)
 800ce6e:	487b      	ldr	r0, [pc, #492]	; (800d05c <tcp_split_unsent_seg+0x27c>)
 800ce70:	f004 ffbe 	bl	8011df0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	7a9b      	ldrb	r3, [r3, #10]
 800ce78:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ce7a:	7bfb      	ldrb	r3, [r7, #15]
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	f003 0304 	and.w	r3, r3, #4
 800ce84:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	891a      	ldrh	r2, [r3, #8]
 800ce8a:	887b      	ldrh	r3, [r7, #2]
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ce90:	7bbb      	ldrb	r3, [r7, #14]
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	89bb      	ldrh	r3, [r7, #12]
 800ce96:	4413      	add	r3, r2
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce9e:	4619      	mov	r1, r3
 800cea0:	2036      	movs	r0, #54	; 0x36
 800cea2:	f7fb facb 	bl	800843c <pbuf_alloc>
 800cea6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f000 80b7 	beq.w	800d01e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	891a      	ldrh	r2, [r3, #8]
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	891b      	ldrh	r3, [r3, #8]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	887b      	ldrh	r3, [r7, #2]
 800cec0:	4413      	add	r3, r2
 800cec2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	6858      	ldr	r0, [r3, #4]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
 800cece:	18d1      	adds	r1, r2, r3
 800ced0:	897b      	ldrh	r3, [r7, #10]
 800ced2:	89ba      	ldrh	r2, [r7, #12]
 800ced4:	f7fb ff80 	bl	8008dd8 <pbuf_copy_partial>
 800ced8:	4603      	mov	r3, r0
 800ceda:	461a      	mov	r2, r3
 800cedc:	89bb      	ldrh	r3, [r7, #12]
 800cede:	4293      	cmp	r3, r2
 800cee0:	f040 809f 	bne.w	800d022 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	899b      	ldrh	r3, [r3, #12]
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fa fa2b 	bl	8007348 <lwip_htons>
 800cef2:	4603      	mov	r3, r0
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cefa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cefc:	2300      	movs	r3, #0
 800cefe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cf00:	7efb      	ldrb	r3, [r7, #27]
 800cf02:	f003 0308 	and.w	r3, r3, #8
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d007      	beq.n	800cf1a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cf0a:	7efb      	ldrb	r3, [r7, #27]
 800cf0c:	f023 0308 	bic.w	r3, r3, #8
 800cf10:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cf12:	7ebb      	ldrb	r3, [r7, #26]
 800cf14:	f043 0308 	orr.w	r3, r3, #8
 800cf18:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cf1a:	7efb      	ldrb	r3, [r7, #27]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d007      	beq.n	800cf34 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cf24:	7efb      	ldrb	r3, [r7, #27]
 800cf26:	f023 0301 	bic.w	r3, r3, #1
 800cf2a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cf2c:	7ebb      	ldrb	r3, [r7, #26]
 800cf2e:	f043 0301 	orr.w	r3, r3, #1
 800cf32:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fa fa19 	bl	8007372 <lwip_htonl>
 800cf40:	4602      	mov	r2, r0
 800cf42:	887b      	ldrh	r3, [r7, #2]
 800cf44:	18d1      	adds	r1, r2, r3
 800cf46:	7eba      	ldrb	r2, [r7, #26]
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	6939      	ldr	r1, [r7, #16]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff fea7 	bl	800cca4 <tcp_create_segment>
 800cf56:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d063      	beq.n	800d026 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fb fdd6 	bl	8008b14 <pbuf_clen>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf72:	1a9b      	subs	r3, r3, r2
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	6858      	ldr	r0, [r3, #4]
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	891a      	ldrh	r2, [r3, #8]
 800cf86:	89bb      	ldrh	r3, [r7, #12]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	f7fb fbb3 	bl	80086f8 <pbuf_realloc>
  useg->len -= remainder;
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	891a      	ldrh	r2, [r3, #8]
 800cf96:	89bb      	ldrh	r3, [r7, #12]
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	899b      	ldrh	r3, [r3, #12]
 800cfa6:	b29c      	uxth	r4, r3
 800cfa8:	7efb      	ldrb	r3, [r7, #27]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fa f9cb 	bl	8007348 <lwip_htons>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	4322      	orrs	r2, r4
 800cfbc:	b292      	uxth	r2, r2
 800cfbe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fb fda5 	bl	8008b14 <pbuf_clen>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	461a      	mov	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfd4:	4413      	add	r3, r2
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fb fd96 	bl	8008b14 <pbuf_clen>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461a      	mov	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cff2:	4413      	add	r3, r2
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d103      	bne.n	800d01a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	e016      	b.n	800d04c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d01e:	bf00      	nop
 800d020:	e002      	b.n	800d028 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d022:	bf00      	nop
 800d024:	e000      	b.n	800d028 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d026:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d006      	beq.n	800d03c <tcp_split_unsent_seg+0x25c>
 800d02e:	4b09      	ldr	r3, [pc, #36]	; (800d054 <tcp_split_unsent_seg+0x274>)
 800d030:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d034:	490d      	ldr	r1, [pc, #52]	; (800d06c <tcp_split_unsent_seg+0x28c>)
 800d036:	4809      	ldr	r0, [pc, #36]	; (800d05c <tcp_split_unsent_seg+0x27c>)
 800d038:	f004 feda 	bl	8011df0 <iprintf>
  if (p != NULL) {
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d042:	6938      	ldr	r0, [r7, #16]
 800d044:	f7fb fcde 	bl	8008a04 <pbuf_free>
  }

  return ERR_MEM;
 800d048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3724      	adds	r7, #36	; 0x24
 800d050:	46bd      	mov	sp, r7
 800d052:	bd90      	pop	{r4, r7, pc}
 800d054:	08015490 	.word	0x08015490
 800d058:	08015824 	.word	0x08015824
 800d05c:	080154e4 	.word	0x080154e4
 800d060:	08015848 	.word	0x08015848
 800d064:	0801586c 	.word	0x0801586c
 800d068:	0801587c 	.word	0x0801587c
 800d06c:	0801588c 	.word	0x0801588c

0800d070 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d070:	b590      	push	{r4, r7, lr}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d106      	bne.n	800d08c <tcp_send_fin+0x1c>
 800d07e:	4b21      	ldr	r3, [pc, #132]	; (800d104 <tcp_send_fin+0x94>)
 800d080:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d084:	4920      	ldr	r1, [pc, #128]	; (800d108 <tcp_send_fin+0x98>)
 800d086:	4821      	ldr	r0, [pc, #132]	; (800d10c <tcp_send_fin+0x9c>)
 800d088:	f004 feb2 	bl	8011df0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d02e      	beq.n	800d0f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d098:	60fb      	str	r3, [r7, #12]
 800d09a:	e002      	b.n	800d0a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1f8      	bne.n	800d09c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	899b      	ldrh	r3, [r3, #12]
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fa f948 	bl	8007348 <lwip_htons>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	f003 0307 	and.w	r3, r3, #7
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d116      	bne.n	800d0f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	899b      	ldrh	r3, [r3, #12]
 800d0ca:	b29c      	uxth	r4, r3
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	f7fa f93b 	bl	8007348 <lwip_htons>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	4322      	orrs	r2, r4
 800d0dc:	b292      	uxth	r2, r2
 800d0de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	8b5b      	ldrh	r3, [r3, #26]
 800d0e4:	f043 0320 	orr.w	r3, r3, #32
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	e004      	b.n	800d0fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f80b 	bl	800d110 <tcp_enqueue_flags>
 800d0fa:	4603      	mov	r3, r0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	bd90      	pop	{r4, r7, pc}
 800d104:	08015490 	.word	0x08015490
 800d108:	08015898 	.word	0x08015898
 800d10c:	080154e4 	.word	0x080154e4

0800d110 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08a      	sub	sp, #40	; 0x28
 800d114:	af02      	add	r7, sp, #8
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	460b      	mov	r3, r1
 800d11a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d124:	78fb      	ldrb	r3, [r7, #3]
 800d126:	f003 0303 	and.w	r3, r3, #3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <tcp_enqueue_flags+0x2c>
 800d12e:	4b67      	ldr	r3, [pc, #412]	; (800d2cc <tcp_enqueue_flags+0x1bc>)
 800d130:	f240 4211 	movw	r2, #1041	; 0x411
 800d134:	4966      	ldr	r1, [pc, #408]	; (800d2d0 <tcp_enqueue_flags+0x1c0>)
 800d136:	4867      	ldr	r0, [pc, #412]	; (800d2d4 <tcp_enqueue_flags+0x1c4>)
 800d138:	f004 fe5a 	bl	8011df0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <tcp_enqueue_flags+0x40>
 800d142:	4b62      	ldr	r3, [pc, #392]	; (800d2cc <tcp_enqueue_flags+0x1bc>)
 800d144:	f240 4213 	movw	r2, #1043	; 0x413
 800d148:	4963      	ldr	r1, [pc, #396]	; (800d2d8 <tcp_enqueue_flags+0x1c8>)
 800d14a:	4862      	ldr	r0, [pc, #392]	; (800d2d4 <tcp_enqueue_flags+0x1c4>)
 800d14c:	f004 fe50 	bl	8011df0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d150:	78fb      	ldrb	r3, [r7, #3]
 800d152:	f003 0302 	and.w	r3, r3, #2
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d15a:	2301      	movs	r3, #1
 800d15c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d15e:	7ffb      	ldrb	r3, [r7, #31]
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	b2db      	uxtb	r3, r3
 800d164:	f003 0304 	and.w	r3, r3, #4
 800d168:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d16a:	7dfb      	ldrb	r3, [r7, #23]
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d172:	4619      	mov	r1, r3
 800d174:	2036      	movs	r0, #54	; 0x36
 800d176:	f7fb f961 	bl	800843c <pbuf_alloc>
 800d17a:	6138      	str	r0, [r7, #16]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d109      	bne.n	800d196 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8b5b      	ldrh	r3, [r3, #26]
 800d186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d194:	e095      	b.n	800d2c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	895a      	ldrh	r2, [r3, #10]
 800d19a:	7dfb      	ldrb	r3, [r7, #23]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d206      	bcs.n	800d1b0 <tcp_enqueue_flags+0xa0>
 800d1a2:	4b4a      	ldr	r3, [pc, #296]	; (800d2cc <tcp_enqueue_flags+0x1bc>)
 800d1a4:	f240 4239 	movw	r2, #1081	; 0x439
 800d1a8:	494c      	ldr	r1, [pc, #304]	; (800d2dc <tcp_enqueue_flags+0x1cc>)
 800d1aa:	484a      	ldr	r0, [pc, #296]	; (800d2d4 <tcp_enqueue_flags+0x1c4>)
 800d1ac:	f004 fe20 	bl	8011df0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d1b4:	78fa      	ldrb	r2, [r7, #3]
 800d1b6:	7ffb      	ldrb	r3, [r7, #31]
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	6939      	ldr	r1, [r7, #16]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff fd70 	bl	800cca4 <tcp_create_segment>
 800d1c4:	60f8      	str	r0, [r7, #12]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d109      	bne.n	800d1e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	8b5b      	ldrh	r3, [r3, #26]
 800d1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d1da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1de:	e070      	b.n	800d2c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	f003 0303 	and.w	r3, r3, #3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d006      	beq.n	800d1fa <tcp_enqueue_flags+0xea>
 800d1ec:	4b37      	ldr	r3, [pc, #220]	; (800d2cc <tcp_enqueue_flags+0x1bc>)
 800d1ee:	f240 4242 	movw	r2, #1090	; 0x442
 800d1f2:	493b      	ldr	r1, [pc, #236]	; (800d2e0 <tcp_enqueue_flags+0x1d0>)
 800d1f4:	4837      	ldr	r0, [pc, #220]	; (800d2d4 <tcp_enqueue_flags+0x1c4>)
 800d1f6:	f004 fdfb 	bl	8011df0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	891b      	ldrh	r3, [r3, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d006      	beq.n	800d210 <tcp_enqueue_flags+0x100>
 800d202:	4b32      	ldr	r3, [pc, #200]	; (800d2cc <tcp_enqueue_flags+0x1bc>)
 800d204:	f240 4243 	movw	r2, #1091	; 0x443
 800d208:	4936      	ldr	r1, [pc, #216]	; (800d2e4 <tcp_enqueue_flags+0x1d4>)
 800d20a:	4832      	ldr	r0, [pc, #200]	; (800d2d4 <tcp_enqueue_flags+0x1c4>)
 800d20c:	f004 fdf0 	bl	8011df0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d103      	bne.n	800d220 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d21e:	e00d      	b.n	800d23c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d224:	61bb      	str	r3, [r7, #24]
 800d226:	e002      	b.n	800d22e <tcp_enqueue_flags+0x11e>
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	61bb      	str	r3, [r7, #24]
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1f8      	bne.n	800d228 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 0302 	and.w	r3, r3, #2
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d104      	bne.n	800d258 <tcp_enqueue_flags+0x148>
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	f003 0301 	and.w	r3, r3, #1
 800d254:	2b00      	cmp	r3, #0
 800d256:	d004      	beq.n	800d262 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d262:	78fb      	ldrb	r3, [r7, #3]
 800d264:	f003 0301 	and.w	r3, r3, #1
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d006      	beq.n	800d27a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	8b5b      	ldrh	r3, [r3, #26]
 800d270:	f043 0320 	orr.w	r3, r3, #32
 800d274:	b29a      	uxth	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fb fc48 	bl	8008b14 <pbuf_clen>
 800d284:	4603      	mov	r3, r0
 800d286:	461a      	mov	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d28e:	4413      	add	r3, r2
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00e      	beq.n	800d2c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10a      	bne.n	800d2c0 <tcp_enqueue_flags+0x1b0>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d106      	bne.n	800d2c0 <tcp_enqueue_flags+0x1b0>
 800d2b2:	4b06      	ldr	r3, [pc, #24]	; (800d2cc <tcp_enqueue_flags+0x1bc>)
 800d2b4:	f240 4265 	movw	r2, #1125	; 0x465
 800d2b8:	490b      	ldr	r1, [pc, #44]	; (800d2e8 <tcp_enqueue_flags+0x1d8>)
 800d2ba:	4806      	ldr	r0, [pc, #24]	; (800d2d4 <tcp_enqueue_flags+0x1c4>)
 800d2bc:	f004 fd98 	bl	8011df0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	08015490 	.word	0x08015490
 800d2d0:	080158b4 	.word	0x080158b4
 800d2d4:	080154e4 	.word	0x080154e4
 800d2d8:	0801590c 	.word	0x0801590c
 800d2dc:	0801592c 	.word	0x0801592c
 800d2e0:	08015968 	.word	0x08015968
 800d2e4:	08015980 	.word	0x08015980
 800d2e8:	080159ac 	.word	0x080159ac

0800d2ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d2ec:	b5b0      	push	{r4, r5, r7, lr}
 800d2ee:	b08a      	sub	sp, #40	; 0x28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <tcp_output+0x1c>
 800d2fa:	4b8a      	ldr	r3, [pc, #552]	; (800d524 <tcp_output+0x238>)
 800d2fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d300:	4989      	ldr	r1, [pc, #548]	; (800d528 <tcp_output+0x23c>)
 800d302:	488a      	ldr	r0, [pc, #552]	; (800d52c <tcp_output+0x240>)
 800d304:	f004 fd74 	bl	8011df0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7d1b      	ldrb	r3, [r3, #20]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d106      	bne.n	800d31e <tcp_output+0x32>
 800d310:	4b84      	ldr	r3, [pc, #528]	; (800d524 <tcp_output+0x238>)
 800d312:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d316:	4986      	ldr	r1, [pc, #536]	; (800d530 <tcp_output+0x244>)
 800d318:	4884      	ldr	r0, [pc, #528]	; (800d52c <tcp_output+0x240>)
 800d31a:	f004 fd69 	bl	8011df0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d31e:	4b85      	ldr	r3, [pc, #532]	; (800d534 <tcp_output+0x248>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	429a      	cmp	r2, r3
 800d326:	d101      	bne.n	800d32c <tcp_output+0x40>
    return ERR_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	e1ce      	b.n	800d6ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d338:	4293      	cmp	r3, r2
 800d33a:	bf28      	it	cs
 800d33c:	4613      	movcs	r3, r2
 800d33e:	b29b      	uxth	r3, r3
 800d340:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d346:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10b      	bne.n	800d366 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	8b5b      	ldrh	r3, [r3, #26]
 800d352:	f003 0302 	and.w	r3, r3, #2
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 81aa 	beq.w	800d6b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fdcb 	bl	800def8 <tcp_send_empty_ack>
 800d362:	4603      	mov	r3, r0
 800d364:	e1b1      	b.n	800d6ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3304      	adds	r3, #4
 800d36c:	461a      	mov	r2, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7ff fc7c 	bl	800cc6c <tcp_route>
 800d374:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d102      	bne.n	800d382 <tcp_output+0x96>
    return ERR_RTE;
 800d37c:	f06f 0303 	mvn.w	r3, #3
 800d380:	e1a3      	b.n	800d6ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d003      	beq.n	800d390 <tcp_output+0xa4>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d111      	bne.n	800d3b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <tcp_output+0xb0>
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	3304      	adds	r3, #4
 800d39a:	e000      	b.n	800d39e <tcp_output+0xb2>
 800d39c:	2300      	movs	r3, #0
 800d39e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <tcp_output+0xc0>
      return ERR_RTE;
 800d3a6:	f06f 0303 	mvn.w	r3, #3
 800d3aa:	e18e      	b.n	800d6ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f9 ffd9 	bl	8007372 <lwip_htonl>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ca:	8912      	ldrh	r2, [r2, #8]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	69ba      	ldr	r2, [r7, #24]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d227      	bcs.n	800d424 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3da:	461a      	mov	r2, r3
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d114      	bne.n	800d40c <tcp_output+0x120>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d110      	bne.n	800d40c <tcp_output+0x120>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10b      	bne.n	800d40c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	8b5b      	ldrh	r3, [r3, #26]
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 814d 	beq.w	800d6b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fd6c 	bl	800def8 <tcp_send_empty_ack>
 800d420:	4603      	mov	r3, r0
 800d422:	e152      	b.n	800d6ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d430:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d432:	6a3b      	ldr	r3, [r7, #32]
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 811c 	beq.w	800d672 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d43a:	e002      	b.n	800d442 <tcp_output+0x156>
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	623b      	str	r3, [r7, #32]
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1f8      	bne.n	800d43c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d44a:	e112      	b.n	800d672 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	899b      	ldrh	r3, [r3, #12]
 800d452:	b29b      	uxth	r3, r3
 800d454:	4618      	mov	r0, r3
 800d456:	f7f9 ff77 	bl	8007348 <lwip_htons>
 800d45a:	4603      	mov	r3, r0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	f003 0304 	and.w	r3, r3, #4
 800d462:	2b00      	cmp	r3, #0
 800d464:	d006      	beq.n	800d474 <tcp_output+0x188>
 800d466:	4b2f      	ldr	r3, [pc, #188]	; (800d524 <tcp_output+0x238>)
 800d468:	f240 5236 	movw	r2, #1334	; 0x536
 800d46c:	4932      	ldr	r1, [pc, #200]	; (800d538 <tcp_output+0x24c>)
 800d46e:	482f      	ldr	r0, [pc, #188]	; (800d52c <tcp_output+0x240>)
 800d470:	f004 fcbe 	bl	8011df0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d01f      	beq.n	800d4bc <tcp_output+0x1d0>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8b5b      	ldrh	r3, [r3, #26]
 800d480:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d484:	2b00      	cmp	r3, #0
 800d486:	d119      	bne.n	800d4bc <tcp_output+0x1d0>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00b      	beq.n	800d4a8 <tcp_output+0x1bc>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d110      	bne.n	800d4bc <tcp_output+0x1d0>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d49e:	891a      	ldrh	r2, [r3, #8]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d209      	bcs.n	800d4bc <tcp_output+0x1d0>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d004      	beq.n	800d4bc <tcp_output+0x1d0>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4b8:	2b08      	cmp	r3, #8
 800d4ba:	d901      	bls.n	800d4c0 <tcp_output+0x1d4>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e000      	b.n	800d4c2 <tcp_output+0x1d6>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	8b5b      	ldrh	r3, [r3, #26]
 800d4ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 80e4 	beq.w	800d69c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d00d      	beq.n	800d4f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	899b      	ldrh	r3, [r3, #12]
 800d4e2:	b29c      	uxth	r4, r3
 800d4e4:	2010      	movs	r0, #16
 800d4e6:	f7f9 ff2f 	bl	8007348 <lwip_htons>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	4322      	orrs	r2, r4
 800d4f4:	b292      	uxth	r2, r2
 800d4f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	6879      	ldr	r1, [r7, #4]
 800d4fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4fe:	f000 f909 	bl	800d714 <tcp_output_segment>
 800d502:	4603      	mov	r3, r0
 800d504:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d016      	beq.n	800d53c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	8b5b      	ldrh	r3, [r3, #26]
 800d512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d516:	b29a      	uxth	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	835a      	strh	r2, [r3, #26]
      return err;
 800d51c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d520:	e0d3      	b.n	800d6ca <tcp_output+0x3de>
 800d522:	bf00      	nop
 800d524:	08015490 	.word	0x08015490
 800d528:	080159d4 	.word	0x080159d4
 800d52c:	080154e4 	.word	0x080154e4
 800d530:	080159ec 	.word	0x080159ec
 800d534:	2000a81c 	.word	0x2000a81c
 800d538:	08015a14 	.word	0x08015a14
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	7d1b      	ldrb	r3, [r3, #20]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d006      	beq.n	800d55a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	8b5b      	ldrh	r3, [r3, #26]
 800d550:	f023 0303 	bic.w	r3, r3, #3
 800d554:	b29a      	uxth	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	f7f9 ff06 	bl	8007372 <lwip_htonl>
 800d566:	4604      	mov	r4, r0
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	891b      	ldrh	r3, [r3, #8]
 800d56c:	461d      	mov	r5, r3
 800d56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	899b      	ldrh	r3, [r3, #12]
 800d574:	b29b      	uxth	r3, r3
 800d576:	4618      	mov	r0, r3
 800d578:	f7f9 fee6 	bl	8007348 <lwip_htons>
 800d57c:	4603      	mov	r3, r0
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	f003 0303 	and.w	r3, r3, #3
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <tcp_output+0x2a0>
 800d588:	2301      	movs	r3, #1
 800d58a:	e000      	b.n	800d58e <tcp_output+0x2a2>
 800d58c:	2300      	movs	r3, #0
 800d58e:	442b      	add	r3, r5
 800d590:	4423      	add	r3, r4
 800d592:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	da02      	bge.n	800d5a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a8:	891b      	ldrh	r3, [r3, #8]
 800d5aa:	461c      	mov	r4, r3
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	899b      	ldrh	r3, [r3, #12]
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7f9 fec7 	bl	8007348 <lwip_htons>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0303 	and.w	r3, r3, #3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <tcp_output+0x2de>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e000      	b.n	800d5cc <tcp_output+0x2e0>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	4423      	add	r3, r4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d049      	beq.n	800d666 <tcp_output+0x37a>
      seg->next = NULL;
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d105      	bne.n	800d5ec <tcp_output+0x300>
        pcb->unacked = seg;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	623b      	str	r3, [r7, #32]
 800d5ea:	e03f      	b.n	800d66c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f9 febd 	bl	8007372 <lwip_htonl>
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	4618      	mov	r0, r3
 800d602:	f7f9 feb6 	bl	8007372 <lwip_htonl>
 800d606:	4603      	mov	r3, r0
 800d608:	1ae3      	subs	r3, r4, r3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	da24      	bge.n	800d658 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	3370      	adds	r3, #112	; 0x70
 800d612:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d614:	e002      	b.n	800d61c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d011      	beq.n	800d648 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7f9 fea0 	bl	8007372 <lwip_htonl>
 800d632:	4604      	mov	r4, r0
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7f9 fe99 	bl	8007372 <lwip_htonl>
 800d640:	4603      	mov	r3, r0
 800d642:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d644:	2b00      	cmp	r3, #0
 800d646:	dbe6      	blt.n	800d616 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	e009      	b.n	800d66c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d65c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	623b      	str	r3, [r7, #32]
 800d664:	e002      	b.n	800d66c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d668:	f7fc fc3f 	bl	8009eea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	2b00      	cmp	r3, #0
 800d676:	d012      	beq.n	800d69e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	4618      	mov	r0, r3
 800d680:	f7f9 fe77 	bl	8007372 <lwip_htonl>
 800d684:	4602      	mov	r2, r0
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d68e:	8912      	ldrh	r2, [r2, #8]
 800d690:	4413      	add	r3, r2
  while (seg != NULL &&
 800d692:	69ba      	ldr	r2, [r7, #24]
 800d694:	429a      	cmp	r2, r3
 800d696:	f4bf aed9 	bcs.w	800d44c <tcp_output+0x160>
 800d69a:	e000      	b.n	800d69e <tcp_output+0x3b2>
      break;
 800d69c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d108      	bne.n	800d6b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d6ae:	e004      	b.n	800d6ba <tcp_output+0x3ce>
    goto output_done;
 800d6b0:	bf00      	nop
 800d6b2:	e002      	b.n	800d6ba <tcp_output+0x3ce>
    goto output_done;
 800d6b4:	bf00      	nop
 800d6b6:	e000      	b.n	800d6ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d6b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	8b5b      	ldrh	r3, [r3, #26]
 800d6be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3728      	adds	r7, #40	; 0x28
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d6d2:	bf00      	nop

0800d6d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d106      	bne.n	800d6f0 <tcp_output_segment_busy+0x1c>
 800d6e2:	4b09      	ldr	r3, [pc, #36]	; (800d708 <tcp_output_segment_busy+0x34>)
 800d6e4:	f240 529a 	movw	r2, #1434	; 0x59a
 800d6e8:	4908      	ldr	r1, [pc, #32]	; (800d70c <tcp_output_segment_busy+0x38>)
 800d6ea:	4809      	ldr	r0, [pc, #36]	; (800d710 <tcp_output_segment_busy+0x3c>)
 800d6ec:	f004 fb80 	bl	8011df0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	7b9b      	ldrb	r3, [r3, #14]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d001      	beq.n	800d6fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e000      	b.n	800d700 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	08015490 	.word	0x08015490
 800d70c:	08015a2c 	.word	0x08015a2c
 800d710:	080154e4 	.word	0x080154e4

0800d714 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d714:	b5b0      	push	{r4, r5, r7, lr}
 800d716:	b08c      	sub	sp, #48	; 0x30
 800d718:	af04      	add	r7, sp, #16
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d106      	bne.n	800d734 <tcp_output_segment+0x20>
 800d726:	4b64      	ldr	r3, [pc, #400]	; (800d8b8 <tcp_output_segment+0x1a4>)
 800d728:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d72c:	4963      	ldr	r1, [pc, #396]	; (800d8bc <tcp_output_segment+0x1a8>)
 800d72e:	4864      	ldr	r0, [pc, #400]	; (800d8c0 <tcp_output_segment+0x1ac>)
 800d730:	f004 fb5e 	bl	8011df0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d106      	bne.n	800d748 <tcp_output_segment+0x34>
 800d73a:	4b5f      	ldr	r3, [pc, #380]	; (800d8b8 <tcp_output_segment+0x1a4>)
 800d73c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d740:	4960      	ldr	r1, [pc, #384]	; (800d8c4 <tcp_output_segment+0x1b0>)
 800d742:	485f      	ldr	r0, [pc, #380]	; (800d8c0 <tcp_output_segment+0x1ac>)
 800d744:	f004 fb54 	bl	8011df0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <tcp_output_segment+0x48>
 800d74e:	4b5a      	ldr	r3, [pc, #360]	; (800d8b8 <tcp_output_segment+0x1a4>)
 800d750:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d754:	495c      	ldr	r1, [pc, #368]	; (800d8c8 <tcp_output_segment+0x1b4>)
 800d756:	485a      	ldr	r0, [pc, #360]	; (800d8c0 <tcp_output_segment+0x1ac>)
 800d758:	f004 fb4a 	bl	8011df0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f7ff ffb9 	bl	800d6d4 <tcp_output_segment_busy>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	e0a1      	b.n	800d8b0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	68dc      	ldr	r4, [r3, #12]
 800d774:	4610      	mov	r0, r2
 800d776:	f7f9 fdfc 	bl	8007372 <lwip_htonl>
 800d77a:	4603      	mov	r3, r0
 800d77c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	68dc      	ldr	r4, [r3, #12]
 800d786:	4610      	mov	r0, r2
 800d788:	f7f9 fdde 	bl	8007348 <lwip_htons>
 800d78c:	4603      	mov	r3, r0
 800d78e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d798:	441a      	add	r2, r3
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	3314      	adds	r3, #20
 800d7a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	7a9b      	ldrb	r3, [r3, #10]
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d015      	beq.n	800d7de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	6879      	ldr	r1, [r7, #4]
 800d7ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d7be:	f7fc fe8b 	bl	800a4d8 <tcp_eff_send_mss_netif>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d7c6:	8b7b      	ldrh	r3, [r7, #26]
 800d7c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7f9 fdd0 	bl	8007372 <lwip_htonl>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	3304      	adds	r3, #4
 800d7dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	da02      	bge.n	800d7ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10c      	bne.n	800d810 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d7f6:	4b35      	ldr	r3, [pc, #212]	; (800d8cc <tcp_output_segment+0x1b8>)
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	4618      	mov	r0, r3
 800d806:	f7f9 fdb4 	bl	8007372 <lwip_htonl>
 800d80a:	4602      	mov	r2, r0
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	8959      	ldrh	r1, [r3, #10]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	8b3a      	ldrh	r2, [r7, #24]
 800d82a:	1a8a      	subs	r2, r1, r2
 800d82c:	b292      	uxth	r2, r2
 800d82e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	8919      	ldrh	r1, [r3, #8]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	8b3a      	ldrh	r2, [r7, #24]
 800d83c:	1a8a      	subs	r2, r1, r2
 800d83e:	b292      	uxth	r2, r2
 800d840:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	68d2      	ldr	r2, [r2, #12]
 800d84a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	741a      	strb	r2, [r3, #16]
 800d854:	2200      	movs	r2, #0
 800d856:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	68da      	ldr	r2, [r3, #12]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	7a9b      	ldrb	r3, [r3, #10]
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <tcp_output_segment+0x158>
 800d868:	2318      	movs	r3, #24
 800d86a:	e000      	b.n	800d86e <tcp_output_segment+0x15a>
 800d86c:	2314      	movs	r3, #20
 800d86e:	4413      	add	r3, r2
 800d870:	69fa      	ldr	r2, [r7, #28]
 800d872:	429a      	cmp	r2, r3
 800d874:	d006      	beq.n	800d884 <tcp_output_segment+0x170>
 800d876:	4b10      	ldr	r3, [pc, #64]	; (800d8b8 <tcp_output_segment+0x1a4>)
 800d878:	f240 621c 	movw	r2, #1564	; 0x61c
 800d87c:	4914      	ldr	r1, [pc, #80]	; (800d8d0 <tcp_output_segment+0x1bc>)
 800d87e:	4810      	ldr	r0, [pc, #64]	; (800d8c0 <tcp_output_segment+0x1ac>)
 800d880:	f004 fab6 	bl	8011df0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6858      	ldr	r0, [r3, #4]
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	1d1c      	adds	r4, r3, #4
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	7add      	ldrb	r5, [r3, #11]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	7a9b      	ldrb	r3, [r3, #10]
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	9202      	str	r2, [sp, #8]
 800d89a:	2206      	movs	r2, #6
 800d89c:	9201      	str	r2, [sp, #4]
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	462b      	mov	r3, r5
 800d8a2:	4622      	mov	r2, r4
 800d8a4:	f002 fb9a 	bl	800ffdc <ip4_output_if>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d8ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3720      	adds	r7, #32
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d8b8:	08015490 	.word	0x08015490
 800d8bc:	08015a54 	.word	0x08015a54
 800d8c0:	080154e4 	.word	0x080154e4
 800d8c4:	08015a74 	.word	0x08015a74
 800d8c8:	08015a94 	.word	0x08015a94
 800d8cc:	2000a7d0 	.word	0x2000a7d0
 800d8d0:	08015ab8 	.word	0x08015ab8

0800d8d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d8d4:	b5b0      	push	{r4, r5, r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <tcp_rexmit_rto_prepare+0x1c>
 800d8e2:	4b31      	ldr	r3, [pc, #196]	; (800d9a8 <tcp_rexmit_rto_prepare+0xd4>)
 800d8e4:	f240 6263 	movw	r2, #1635	; 0x663
 800d8e8:	4930      	ldr	r1, [pc, #192]	; (800d9ac <tcp_rexmit_rto_prepare+0xd8>)
 800d8ea:	4831      	ldr	r0, [pc, #196]	; (800d9b0 <tcp_rexmit_rto_prepare+0xdc>)
 800d8ec:	f004 fa80 	bl	8011df0 <iprintf>

  if (pcb->unacked == NULL) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d8f8:	f06f 0305 	mvn.w	r3, #5
 800d8fc:	e050      	b.n	800d9a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	e00b      	b.n	800d91e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7ff fee4 	bl	800d6d4 <tcp_output_segment_busy>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d002      	beq.n	800d918 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d912:	f06f 0305 	mvn.w	r3, #5
 800d916:	e043      	b.n	800d9a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	60fb      	str	r3, [r7, #12]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1ef      	bne.n	800d906 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f7ff fed4 	bl	800d6d4 <tcp_output_segment_busy>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d002      	beq.n	800d938 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d932:	f06f 0305 	mvn.w	r3, #5
 800d936:	e033      	b.n	800d9a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	8b5b      	ldrh	r3, [r3, #26]
 800d952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d956:	b29a      	uxth	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	4618      	mov	r0, r3
 800d964:	f7f9 fd05 	bl	8007372 <lwip_htonl>
 800d968:	4604      	mov	r4, r0
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	891b      	ldrh	r3, [r3, #8]
 800d96e:	461d      	mov	r5, r3
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	899b      	ldrh	r3, [r3, #12]
 800d976:	b29b      	uxth	r3, r3
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f9 fce5 	bl	8007348 <lwip_htons>
 800d97e:	4603      	mov	r3, r0
 800d980:	b2db      	uxtb	r3, r3
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <tcp_rexmit_rto_prepare+0xba>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e000      	b.n	800d990 <tcp_rexmit_rto_prepare+0xbc>
 800d98e:	2300      	movs	r3, #0
 800d990:	442b      	add	r3, r5
 800d992:	18e2      	adds	r2, r4, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a8:	08015490 	.word	0x08015490
 800d9ac:	08015acc 	.word	0x08015acc
 800d9b0:	080154e4 	.word	0x080154e4

0800d9b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d106      	bne.n	800d9d0 <tcp_rexmit_rto_commit+0x1c>
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <tcp_rexmit_rto_commit+0x44>)
 800d9c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d9c8:	490c      	ldr	r1, [pc, #48]	; (800d9fc <tcp_rexmit_rto_commit+0x48>)
 800d9ca:	480d      	ldr	r0, [pc, #52]	; (800da00 <tcp_rexmit_rto_commit+0x4c>)
 800d9cc:	f004 fa10 	bl	8011df0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9d6:	2bff      	cmp	r3, #255	; 0xff
 800d9d8:	d007      	beq.n	800d9ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f7ff fc7e 	bl	800d2ec <tcp_output>
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	08015490 	.word	0x08015490
 800d9fc:	08015af0 	.word	0x08015af0
 800da00:	080154e4 	.word	0x080154e4

0800da04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d106      	bne.n	800da20 <tcp_rexmit_rto+0x1c>
 800da12:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <tcp_rexmit_rto+0x38>)
 800da14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800da18:	4909      	ldr	r1, [pc, #36]	; (800da40 <tcp_rexmit_rto+0x3c>)
 800da1a:	480a      	ldr	r0, [pc, #40]	; (800da44 <tcp_rexmit_rto+0x40>)
 800da1c:	f004 f9e8 	bl	8011df0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff ff57 	bl	800d8d4 <tcp_rexmit_rto_prepare>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d102      	bne.n	800da32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7ff ffc1 	bl	800d9b4 <tcp_rexmit_rto_commit>
  }
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	08015490 	.word	0x08015490
 800da40:	08015b14 	.word	0x08015b14
 800da44:	080154e4 	.word	0x080154e4

0800da48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800da48:	b590      	push	{r4, r7, lr}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <tcp_rexmit+0x1c>
 800da56:	4b2f      	ldr	r3, [pc, #188]	; (800db14 <tcp_rexmit+0xcc>)
 800da58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800da5c:	492e      	ldr	r1, [pc, #184]	; (800db18 <tcp_rexmit+0xd0>)
 800da5e:	482f      	ldr	r0, [pc, #188]	; (800db1c <tcp_rexmit+0xd4>)
 800da60:	f004 f9c6 	bl	8011df0 <iprintf>

  if (pcb->unacked == NULL) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d102      	bne.n	800da72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800da6c:	f06f 0305 	mvn.w	r3, #5
 800da70:	e04c      	b.n	800db0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800da78:	68b8      	ldr	r0, [r7, #8]
 800da7a:	f7ff fe2b 	bl	800d6d4 <tcp_output_segment_busy>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800da84:	f06f 0305 	mvn.w	r3, #5
 800da88:	e040      	b.n	800db0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	336c      	adds	r3, #108	; 0x6c
 800da96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800da98:	e002      	b.n	800daa0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d011      	beq.n	800dacc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7f9 fc5e 	bl	8007372 <lwip_htonl>
 800dab6:	4604      	mov	r4, r0
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f9 fc57 	bl	8007372 <lwip_htonl>
 800dac4:	4603      	mov	r3, r0
 800dac6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dbe6      	blt.n	800da9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d103      	bne.n	800daea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daf0:	2bff      	cmp	r3, #255	; 0xff
 800daf2:	d007      	beq.n	800db04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dafa:	3301      	adds	r3, #1
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	bd90      	pop	{r4, r7, pc}
 800db14:	08015490 	.word	0x08015490
 800db18:	08015b30 	.word	0x08015b30
 800db1c:	080154e4 	.word	0x080154e4

0800db20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d106      	bne.n	800db3c <tcp_rexmit_fast+0x1c>
 800db2e:	4b2a      	ldr	r3, [pc, #168]	; (800dbd8 <tcp_rexmit_fast+0xb8>)
 800db30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800db34:	4929      	ldr	r1, [pc, #164]	; (800dbdc <tcp_rexmit_fast+0xbc>)
 800db36:	482a      	ldr	r0, [pc, #168]	; (800dbe0 <tcp_rexmit_fast+0xc0>)
 800db38:	f004 f95a 	bl	8011df0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db40:	2b00      	cmp	r3, #0
 800db42:	d045      	beq.n	800dbd0 <tcp_rexmit_fast+0xb0>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8b5b      	ldrh	r3, [r3, #26]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d13f      	bne.n	800dbd0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff ff79 	bl	800da48 <tcp_rexmit>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d139      	bne.n	800dbd0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db68:	4293      	cmp	r3, r2
 800db6a:	bf28      	it	cs
 800db6c:	4613      	movcs	r3, r2
 800db6e:	b29b      	uxth	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	da00      	bge.n	800db76 <tcp_rexmit_fast+0x56>
 800db74:	3301      	adds	r3, #1
 800db76:	105b      	asrs	r3, r3, #1
 800db78:	b29a      	uxth	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800db86:	461a      	mov	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db8c:	005b      	lsls	r3, r3, #1
 800db8e:	429a      	cmp	r2, r3
 800db90:	d206      	bcs.n	800dba0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db96:	005b      	lsls	r3, r3, #1
 800db98:	b29a      	uxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbaa:	4619      	mov	r1, r3
 800dbac:	0049      	lsls	r1, r1, #1
 800dbae:	440b      	add	r3, r1
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	4413      	add	r3, r2
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	8b5b      	ldrh	r3, [r3, #26]
 800dbc0:	f043 0304 	orr.w	r3, r3, #4
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dbd0:	bf00      	nop
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	08015490 	.word	0x08015490
 800dbdc:	08015b48 	.word	0x08015b48
 800dbe0:	080154e4 	.word	0x080154e4

0800dbe4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b086      	sub	sp, #24
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	607b      	str	r3, [r7, #4]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	817b      	strh	r3, [r7, #10]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dbf6:	897a      	ldrh	r2, [r7, #10]
 800dbf8:	893b      	ldrh	r3, [r7, #8]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	3314      	adds	r3, #20
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc06:	4619      	mov	r1, r3
 800dc08:	2022      	movs	r0, #34	; 0x22
 800dc0a:	f7fa fc17 	bl	800843c <pbuf_alloc>
 800dc0e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d04d      	beq.n	800dcb2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dc16:	897b      	ldrh	r3, [r7, #10]
 800dc18:	3313      	adds	r3, #19
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	8952      	ldrh	r2, [r2, #10]
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	db06      	blt.n	800dc30 <tcp_output_alloc_header_common+0x4c>
 800dc22:	4b26      	ldr	r3, [pc, #152]	; (800dcbc <tcp_output_alloc_header_common+0xd8>)
 800dc24:	f240 7223 	movw	r2, #1827	; 0x723
 800dc28:	4925      	ldr	r1, [pc, #148]	; (800dcc0 <tcp_output_alloc_header_common+0xdc>)
 800dc2a:	4826      	ldr	r0, [pc, #152]	; (800dcc4 <tcp_output_alloc_header_common+0xe0>)
 800dc2c:	f004 f8e0 	bl	8011df0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dc36:	8c3b      	ldrh	r3, [r7, #32]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7f9 fb85 	bl	8007348 <lwip_htons>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	461a      	mov	r2, r3
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dc46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7f9 fb7d 	bl	8007348 <lwip_htons>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	461a      	mov	r2, r3
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7f9 fb88 	bl	8007372 <lwip_htonl>
 800dc62:	4602      	mov	r2, r0
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dc68:	897b      	ldrh	r3, [r7, #10]
 800dc6a:	089b      	lsrs	r3, r3, #2
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	3305      	adds	r3, #5
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	031b      	lsls	r3, r3, #12
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f9 fb61 	bl	8007348 <lwip_htons>
 800dc86:	4603      	mov	r3, r0
 800dc88:	461a      	mov	r2, r3
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dc8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7f9 fb59 	bl	8007348 <lwip_htons>
 800dc96:	4603      	mov	r3, r0
 800dc98:	461a      	mov	r2, r3
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	2200      	movs	r2, #0
 800dca2:	741a      	strb	r2, [r3, #16]
 800dca4:	2200      	movs	r2, #0
 800dca6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	749a      	strb	r2, [r3, #18]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800dcb2:	697b      	ldr	r3, [r7, #20]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3718      	adds	r7, #24
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	08015490 	.word	0x08015490
 800dcc0:	08015b68 	.word	0x08015b68
 800dcc4:	080154e4 	.word	0x080154e4

0800dcc8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dcc8:	b5b0      	push	{r4, r5, r7, lr}
 800dcca:	b08a      	sub	sp, #40	; 0x28
 800dccc:	af04      	add	r7, sp, #16
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	607b      	str	r3, [r7, #4]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	817b      	strh	r3, [r7, #10]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d106      	bne.n	800dcee <tcp_output_alloc_header+0x26>
 800dce0:	4b15      	ldr	r3, [pc, #84]	; (800dd38 <tcp_output_alloc_header+0x70>)
 800dce2:	f240 7242 	movw	r2, #1858	; 0x742
 800dce6:	4915      	ldr	r1, [pc, #84]	; (800dd3c <tcp_output_alloc_header+0x74>)
 800dce8:	4815      	ldr	r0, [pc, #84]	; (800dd40 <tcp_output_alloc_header+0x78>)
 800dcea:	f004 f881 	bl	8011df0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8adb      	ldrh	r3, [r3, #22]
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	8b12      	ldrh	r2, [r2, #24]
 800dcfa:	68f9      	ldr	r1, [r7, #12]
 800dcfc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dcfe:	893d      	ldrh	r5, [r7, #8]
 800dd00:	897c      	ldrh	r4, [r7, #10]
 800dd02:	9103      	str	r1, [sp, #12]
 800dd04:	2110      	movs	r1, #16
 800dd06:	9102      	str	r1, [sp, #8]
 800dd08:	9201      	str	r2, [sp, #4]
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	462a      	mov	r2, r5
 800dd10:	4621      	mov	r1, r4
 800dd12:	f7ff ff67 	bl	800dbe4 <tcp_output_alloc_header_common>
 800dd16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dd26:	441a      	add	r2, r3
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dd2c:	697b      	ldr	r3, [r7, #20]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bdb0      	pop	{r4, r5, r7, pc}
 800dd36:	bf00      	nop
 800dd38:	08015490 	.word	0x08015490
 800dd3c:	08015b98 	.word	0x08015b98
 800dd40:	080154e4 	.word	0x080154e4

0800dd44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	4611      	mov	r1, r2
 800dd50:	461a      	mov	r2, r3
 800dd52:	460b      	mov	r3, r1
 800dd54:	71fb      	strb	r3, [r7, #7]
 800dd56:	4613      	mov	r3, r2
 800dd58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d106      	bne.n	800dd72 <tcp_output_fill_options+0x2e>
 800dd64:	4b12      	ldr	r3, [pc, #72]	; (800ddb0 <tcp_output_fill_options+0x6c>)
 800dd66:	f240 7256 	movw	r2, #1878	; 0x756
 800dd6a:	4912      	ldr	r1, [pc, #72]	; (800ddb4 <tcp_output_fill_options+0x70>)
 800dd6c:	4812      	ldr	r0, [pc, #72]	; (800ddb8 <tcp_output_fill_options+0x74>)
 800dd6e:	f004 f83f 	bl	8011df0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	3314      	adds	r3, #20
 800dd7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dd7e:	8bfb      	ldrh	r3, [r7, #30]
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	461a      	mov	r2, r3
 800dd84:	79fb      	ldrb	r3, [r7, #7]
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	f003 0304 	and.w	r3, r3, #4
 800dd8c:	4413      	add	r3, r2
 800dd8e:	3314      	adds	r3, #20
 800dd90:	69ba      	ldr	r2, [r7, #24]
 800dd92:	4413      	add	r3, r2
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d006      	beq.n	800dda8 <tcp_output_fill_options+0x64>
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <tcp_output_fill_options+0x6c>)
 800dd9c:	f240 7275 	movw	r2, #1909	; 0x775
 800dda0:	4906      	ldr	r1, [pc, #24]	; (800ddbc <tcp_output_fill_options+0x78>)
 800dda2:	4805      	ldr	r0, [pc, #20]	; (800ddb8 <tcp_output_fill_options+0x74>)
 800dda4:	f004 f824 	bl	8011df0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dda8:	bf00      	nop
 800ddaa:	3720      	adds	r7, #32
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	08015490 	.word	0x08015490
 800ddb4:	08015bc0 	.word	0x08015bc0
 800ddb8:	080154e4 	.word	0x080154e4
 800ddbc:	08015ab8 	.word	0x08015ab8

0800ddc0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08a      	sub	sp, #40	; 0x28
 800ddc4:	af04      	add	r7, sp, #16
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
 800ddcc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d106      	bne.n	800dde2 <tcp_output_control_segment+0x22>
 800ddd4:	4b1c      	ldr	r3, [pc, #112]	; (800de48 <tcp_output_control_segment+0x88>)
 800ddd6:	f240 7287 	movw	r2, #1927	; 0x787
 800ddda:	491c      	ldr	r1, [pc, #112]	; (800de4c <tcp_output_control_segment+0x8c>)
 800dddc:	481c      	ldr	r0, [pc, #112]	; (800de50 <tcp_output_control_segment+0x90>)
 800ddde:	f004 f807 	bl	8011df0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	6879      	ldr	r1, [r7, #4]
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	f7fe ff40 	bl	800cc6c <tcp_route>
 800ddec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d102      	bne.n	800ddfa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ddf4:	23fc      	movs	r3, #252	; 0xfc
 800ddf6:	75fb      	strb	r3, [r7, #23]
 800ddf8:	e01c      	b.n	800de34 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d006      	beq.n	800de0e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	7adb      	ldrb	r3, [r3, #11]
 800de04:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	7a9b      	ldrb	r3, [r3, #10]
 800de0a:	757b      	strb	r3, [r7, #21]
 800de0c:	e003      	b.n	800de16 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800de0e:	23ff      	movs	r3, #255	; 0xff
 800de10:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800de16:	7dba      	ldrb	r2, [r7, #22]
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	9302      	str	r3, [sp, #8]
 800de1c:	2306      	movs	r3, #6
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	7d7b      	ldrb	r3, [r7, #21]
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	4613      	mov	r3, r2
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	6879      	ldr	r1, [r7, #4]
 800de2a:	68b8      	ldr	r0, [r7, #8]
 800de2c:	f002 f8d6 	bl	800ffdc <ip4_output_if>
 800de30:	4603      	mov	r3, r0
 800de32:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800de34:	68b8      	ldr	r0, [r7, #8]
 800de36:	f7fa fde5 	bl	8008a04 <pbuf_free>
  return err;
 800de3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	08015490 	.word	0x08015490
 800de4c:	08015be8 	.word	0x08015be8
 800de50:	080154e4 	.word	0x080154e4

0800de54 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800de54:	b590      	push	{r4, r7, lr}
 800de56:	b08b      	sub	sp, #44	; 0x2c
 800de58:	af04      	add	r7, sp, #16
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
 800de60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d106      	bne.n	800de76 <tcp_rst+0x22>
 800de68:	4b1f      	ldr	r3, [pc, #124]	; (800dee8 <tcp_rst+0x94>)
 800de6a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800de6e:	491f      	ldr	r1, [pc, #124]	; (800deec <tcp_rst+0x98>)
 800de70:	481f      	ldr	r0, [pc, #124]	; (800def0 <tcp_rst+0x9c>)
 800de72:	f003 ffbd 	bl	8011df0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d106      	bne.n	800de8a <tcp_rst+0x36>
 800de7c:	4b1a      	ldr	r3, [pc, #104]	; (800dee8 <tcp_rst+0x94>)
 800de7e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800de82:	491c      	ldr	r1, [pc, #112]	; (800def4 <tcp_rst+0xa0>)
 800de84:	481a      	ldr	r0, [pc, #104]	; (800def0 <tcp_rst+0x9c>)
 800de86:	f003 ffb3 	bl	8011df0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de8a:	2300      	movs	r3, #0
 800de8c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800de8e:	f246 0308 	movw	r3, #24584	; 0x6008
 800de92:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800de94:	7dfb      	ldrb	r3, [r7, #23]
 800de96:	b29c      	uxth	r4, r3
 800de98:	68b8      	ldr	r0, [r7, #8]
 800de9a:	f7f9 fa6a 	bl	8007372 <lwip_htonl>
 800de9e:	4602      	mov	r2, r0
 800dea0:	8abb      	ldrh	r3, [r7, #20]
 800dea2:	9303      	str	r3, [sp, #12]
 800dea4:	2314      	movs	r3, #20
 800dea6:	9302      	str	r3, [sp, #8]
 800dea8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800deaa:	9301      	str	r3, [sp, #4]
 800deac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	4613      	mov	r3, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	4621      	mov	r1, r4
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7ff fe94 	bl	800dbe4 <tcp_output_alloc_header_common>
 800debc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00c      	beq.n	800dede <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dec4:	7dfb      	ldrb	r3, [r7, #23]
 800dec6:	2200      	movs	r2, #0
 800dec8:	6939      	ldr	r1, [r7, #16]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7ff ff3a 	bl	800dd44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	6939      	ldr	r1, [r7, #16]
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff ff72 	bl	800ddc0 <tcp_output_control_segment>
 800dedc:	e000      	b.n	800dee0 <tcp_rst+0x8c>
    return;
 800dede:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd90      	pop	{r4, r7, pc}
 800dee6:	bf00      	nop
 800dee8:	08015490 	.word	0x08015490
 800deec:	08015c14 	.word	0x08015c14
 800def0:	080154e4 	.word	0x080154e4
 800def4:	08015c30 	.word	0x08015c30

0800def8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b087      	sub	sp, #28
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d106      	bne.n	800df1c <tcp_send_empty_ack+0x24>
 800df0e:	4b28      	ldr	r3, [pc, #160]	; (800dfb0 <tcp_send_empty_ack+0xb8>)
 800df10:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800df14:	4927      	ldr	r1, [pc, #156]	; (800dfb4 <tcp_send_empty_ack+0xbc>)
 800df16:	4828      	ldr	r0, [pc, #160]	; (800dfb8 <tcp_send_empty_ack+0xc0>)
 800df18:	f003 ff6a 	bl	8011df0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	b2db      	uxtb	r3, r3
 800df22:	f003 0304 	and.w	r3, r3, #4
 800df26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800df28:	7d7b      	ldrb	r3, [r7, #21]
 800df2a:	b29c      	uxth	r4, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df30:	4618      	mov	r0, r3
 800df32:	f7f9 fa1e 	bl	8007372 <lwip_htonl>
 800df36:	4603      	mov	r3, r0
 800df38:	2200      	movs	r2, #0
 800df3a:	4621      	mov	r1, r4
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff fec3 	bl	800dcc8 <tcp_output_alloc_header>
 800df42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d109      	bne.n	800df5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	8b5b      	ldrh	r3, [r3, #26]
 800df4e:	f043 0303 	orr.w	r3, r3, #3
 800df52:	b29a      	uxth	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800df58:	f06f 0301 	mvn.w	r3, #1
 800df5c:	e023      	b.n	800dfa6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800df5e:	7dbb      	ldrb	r3, [r7, #22]
 800df60:	7dfa      	ldrb	r2, [r7, #23]
 800df62:	6939      	ldr	r1, [r7, #16]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7ff feed 	bl	800dd44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3304      	adds	r3, #4
 800df70:	6939      	ldr	r1, [r7, #16]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7ff ff24 	bl	800ddc0 <tcp_output_control_segment>
 800df78:	4603      	mov	r3, r0
 800df7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800df7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d007      	beq.n	800df94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	8b5b      	ldrh	r3, [r3, #26]
 800df88:	f043 0303 	orr.w	r3, r3, #3
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	835a      	strh	r2, [r3, #26]
 800df92:	e006      	b.n	800dfa2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	8b5b      	ldrh	r3, [r3, #26]
 800df98:	f023 0303 	bic.w	r3, r3, #3
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dfa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd90      	pop	{r4, r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	08015490 	.word	0x08015490
 800dfb4:	08015c4c 	.word	0x08015c4c
 800dfb8:	080154e4 	.word	0x080154e4

0800dfbc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dfbc:	b590      	push	{r4, r7, lr}
 800dfbe:	b087      	sub	sp, #28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d106      	bne.n	800dfdc <tcp_keepalive+0x20>
 800dfce:	4b18      	ldr	r3, [pc, #96]	; (800e030 <tcp_keepalive+0x74>)
 800dfd0:	f640 0224 	movw	r2, #2084	; 0x824
 800dfd4:	4917      	ldr	r1, [pc, #92]	; (800e034 <tcp_keepalive+0x78>)
 800dfd6:	4818      	ldr	r0, [pc, #96]	; (800e038 <tcp_keepalive+0x7c>)
 800dfd8:	f003 ff0a 	bl	8011df0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dfdc:	7dfb      	ldrb	r3, [r7, #23]
 800dfde:	b29c      	uxth	r4, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f9 f9c3 	bl	8007372 <lwip_htonl>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2200      	movs	r2, #0
 800dff0:	4621      	mov	r1, r4
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7ff fe68 	bl	800dcc8 <tcp_output_alloc_header>
 800dff8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d102      	bne.n	800e006 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e004:	e010      	b.n	800e028 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e006:	7dfb      	ldrb	r3, [r7, #23]
 800e008:	2200      	movs	r2, #0
 800e00a:	6939      	ldr	r1, [r7, #16]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff fe99 	bl	800dd44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3304      	adds	r3, #4
 800e018:	6939      	ldr	r1, [r7, #16]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff fed0 	bl	800ddc0 <tcp_output_control_segment>
 800e020:	4603      	mov	r3, r0
 800e022:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e024:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	371c      	adds	r7, #28
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd90      	pop	{r4, r7, pc}
 800e030:	08015490 	.word	0x08015490
 800e034:	08015c6c 	.word	0x08015c6c
 800e038:	080154e4 	.word	0x080154e4

0800e03c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e03c:	b590      	push	{r4, r7, lr}
 800e03e:	b08b      	sub	sp, #44	; 0x2c
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e044:	2300      	movs	r3, #0
 800e046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d106      	bne.n	800e05e <tcp_zero_window_probe+0x22>
 800e050:	4b4c      	ldr	r3, [pc, #304]	; (800e184 <tcp_zero_window_probe+0x148>)
 800e052:	f640 024f 	movw	r2, #2127	; 0x84f
 800e056:	494c      	ldr	r1, [pc, #304]	; (800e188 <tcp_zero_window_probe+0x14c>)
 800e058:	484c      	ldr	r0, [pc, #304]	; (800e18c <tcp_zero_window_probe+0x150>)
 800e05a:	f003 fec9 	bl	8011df0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e062:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	e086      	b.n	800e17c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e074:	2bff      	cmp	r3, #255	; 0xff
 800e076:	d007      	beq.n	800e088 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e07e:	3301      	adds	r3, #1
 800e080:	b2da      	uxtb	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	899b      	ldrh	r3, [r3, #12]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	4618      	mov	r0, r3
 800e092:	f7f9 f959 	bl	8007348 <lwip_htons>
 800e096:	4603      	mov	r3, r0
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d005      	beq.n	800e0ae <tcp_zero_window_probe+0x72>
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	891b      	ldrh	r3, [r3, #8]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d101      	bne.n	800e0ae <tcp_zero_window_probe+0x72>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <tcp_zero_window_probe+0x74>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e0b2:	7ffb      	ldrb	r3, [r7, #31]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bf0c      	ite	eq
 800e0b8:	2301      	moveq	r3, #1
 800e0ba:	2300      	movne	r3, #0
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c4:	b299      	uxth	r1, r3
 800e0c6:	6a3b      	ldr	r3, [r7, #32]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	8bba      	ldrh	r2, [r7, #28]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7ff fdfa 	bl	800dcc8 <tcp_output_alloc_header>
 800e0d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d102      	bne.n	800e0e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0e0:	e04c      	b.n	800e17c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e0e8:	7ffb      	ldrb	r3, [r7, #31]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d011      	beq.n	800e112 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	899b      	ldrh	r3, [r3, #12]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	b21b      	sxth	r3, r3
 800e0f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0fa:	b21c      	sxth	r4, r3
 800e0fc:	2011      	movs	r0, #17
 800e0fe:	f7f9 f923 	bl	8007348 <lwip_htons>
 800e102:	4603      	mov	r3, r0
 800e104:	b21b      	sxth	r3, r3
 800e106:	4323      	orrs	r3, r4
 800e108:	b21b      	sxth	r3, r3
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	819a      	strh	r2, [r3, #12]
 800e110:	e010      	b.n	800e134 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	3314      	adds	r3, #20
 800e118:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	6858      	ldr	r0, [r3, #4]
 800e11e:	6a3b      	ldr	r3, [r7, #32]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	891a      	ldrh	r2, [r3, #8]
 800e124:	6a3b      	ldr	r3, [r7, #32]
 800e126:	891b      	ldrh	r3, [r3, #8]
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	2201      	movs	r2, #1
 800e12e:	6939      	ldr	r1, [r7, #16]
 800e130:	f7fa fe52 	bl	8008dd8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e134:	6a3b      	ldr	r3, [r7, #32]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7f9 f919 	bl	8007372 <lwip_htonl>
 800e140:	4603      	mov	r3, r0
 800e142:	3301      	adds	r3, #1
 800e144:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	da02      	bge.n	800e158 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e15c:	2200      	movs	r2, #0
 800e15e:	69b9      	ldr	r1, [r7, #24]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff fdef 	bl	800dd44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3304      	adds	r3, #4
 800e16c:	69b9      	ldr	r1, [r7, #24]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff fe26 	bl	800ddc0 <tcp_output_control_segment>
 800e174:	4603      	mov	r3, r0
 800e176:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e178:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	372c      	adds	r7, #44	; 0x2c
 800e180:	46bd      	mov	sp, r7
 800e182:	bd90      	pop	{r4, r7, pc}
 800e184:	08015490 	.word	0x08015490
 800e188:	08015c88 	.word	0x08015c88
 800e18c:	080154e4 	.word	0x080154e4

0800e190 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e198:	f7fa ff0c 	bl	8008fb4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e19c:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <tcpip_tcp_timer+0x38>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d103      	bne.n	800e1ac <tcpip_tcp_timer+0x1c>
 800e1a4:	4b09      	ldr	r3, [pc, #36]	; (800e1cc <tcpip_tcp_timer+0x3c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d005      	beq.n	800e1b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	4908      	ldr	r1, [pc, #32]	; (800e1d0 <tcpip_tcp_timer+0x40>)
 800e1b0:	20fa      	movs	r0, #250	; 0xfa
 800e1b2:	f000 f8f3 	bl	800e39c <sys_timeout>
 800e1b6:	e003      	b.n	800e1c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e1b8:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <tcpip_tcp_timer+0x44>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	601a      	str	r2, [r3, #0]
  }
}
 800e1be:	bf00      	nop
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	2000a7dc 	.word	0x2000a7dc
 800e1cc:	2000a7e0 	.word	0x2000a7e0
 800e1d0:	0800e191 	.word	0x0800e191
 800e1d4:	2000a828 	.word	0x2000a828

0800e1d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e1dc:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <tcp_timer_needed+0x30>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d10f      	bne.n	800e204 <tcp_timer_needed+0x2c>
 800e1e4:	4b09      	ldr	r3, [pc, #36]	; (800e20c <tcp_timer_needed+0x34>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d103      	bne.n	800e1f4 <tcp_timer_needed+0x1c>
 800e1ec:	4b08      	ldr	r3, [pc, #32]	; (800e210 <tcp_timer_needed+0x38>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d007      	beq.n	800e204 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e1f4:	4b04      	ldr	r3, [pc, #16]	; (800e208 <tcp_timer_needed+0x30>)
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	4905      	ldr	r1, [pc, #20]	; (800e214 <tcp_timer_needed+0x3c>)
 800e1fe:	20fa      	movs	r0, #250	; 0xfa
 800e200:	f000 f8cc 	bl	800e39c <sys_timeout>
  }
}
 800e204:	bf00      	nop
 800e206:	bd80      	pop	{r7, pc}
 800e208:	2000a828 	.word	0x2000a828
 800e20c:	2000a7dc 	.word	0x2000a7dc
 800e210:	2000a7e0 	.word	0x2000a7e0
 800e214:	0800e191 	.word	0x0800e191

0800e218 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e224:	2006      	movs	r0, #6
 800e226:	f7f9 fd07 	bl	8007c38 <memp_malloc>
 800e22a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d109      	bne.n	800e246 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d151      	bne.n	800e2dc <sys_timeout_abs+0xc4>
 800e238:	4b2a      	ldr	r3, [pc, #168]	; (800e2e4 <sys_timeout_abs+0xcc>)
 800e23a:	22be      	movs	r2, #190	; 0xbe
 800e23c:	492a      	ldr	r1, [pc, #168]	; (800e2e8 <sys_timeout_abs+0xd0>)
 800e23e:	482b      	ldr	r0, [pc, #172]	; (800e2ec <sys_timeout_abs+0xd4>)
 800e240:	f003 fdd6 	bl	8011df0 <iprintf>
    return;
 800e244:	e04a      	b.n	800e2dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e25e:	4b24      	ldr	r3, [pc, #144]	; (800e2f0 <sys_timeout_abs+0xd8>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d103      	bne.n	800e26e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e266:	4a22      	ldr	r2, [pc, #136]	; (800e2f0 <sys_timeout_abs+0xd8>)
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6013      	str	r3, [r2, #0]
    return;
 800e26c:	e037      	b.n	800e2de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	4b1f      	ldr	r3, [pc, #124]	; (800e2f0 <sys_timeout_abs+0xd8>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	0fdb      	lsrs	r3, r3, #31
 800e27c:	f003 0301 	and.w	r3, r3, #1
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b00      	cmp	r3, #0
 800e284:	d007      	beq.n	800e296 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e286:	4b1a      	ldr	r3, [pc, #104]	; (800e2f0 <sys_timeout_abs+0xd8>)
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e28e:	4a18      	ldr	r2, [pc, #96]	; (800e2f0 <sys_timeout_abs+0xd8>)
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	e023      	b.n	800e2de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e296:	4b16      	ldr	r3, [pc, #88]	; (800e2f0 <sys_timeout_abs+0xd8>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	617b      	str	r3, [r7, #20]
 800e29c:	e01a      	b.n	800e2d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d00b      	beq.n	800e2be <sys_timeout_abs+0xa6>
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	0fdb      	lsrs	r3, r3, #31
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d007      	beq.n	800e2ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	601a      	str	r2, [r3, #0]
        break;
 800e2cc:	e007      	b.n	800e2de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	617b      	str	r3, [r7, #20]
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1e1      	bne.n	800e29e <sys_timeout_abs+0x86>
 800e2da:	e000      	b.n	800e2de <sys_timeout_abs+0xc6>
    return;
 800e2dc:	bf00      	nop
      }
    }
  }
}
 800e2de:	3718      	adds	r7, #24
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	08015cac 	.word	0x08015cac
 800e2e8:	08015ce0 	.word	0x08015ce0
 800e2ec:	08015d20 	.word	0x08015d20
 800e2f0:	2000a820 	.word	0x2000a820

0800e2f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b086      	sub	sp, #24
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	4798      	blx	r3

  now = sys_now();
 800e306:	f7f8 fe0b 	bl	8006f20 <sys_now>
 800e30a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	4b0f      	ldr	r3, [pc, #60]	; (800e350 <lwip_cyclic_timer+0x5c>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4413      	add	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	0fdb      	lsrs	r3, r3, #31
 800e320:	f003 0301 	and.w	r3, r3, #1
 800e324:	b2db      	uxtb	r3, r3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d009      	beq.n	800e33e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	4413      	add	r3, r2
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	4907      	ldr	r1, [pc, #28]	; (800e354 <lwip_cyclic_timer+0x60>)
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff ff6e 	bl	800e218 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e33c:	e004      	b.n	800e348 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	4904      	ldr	r1, [pc, #16]	; (800e354 <lwip_cyclic_timer+0x60>)
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f7ff ff68 	bl	800e218 <sys_timeout_abs>
}
 800e348:	bf00      	nop
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	2000a824 	.word	0x2000a824
 800e354:	0800e2f5 	.word	0x0800e2f5

0800e358 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e35e:	2301      	movs	r3, #1
 800e360:	607b      	str	r3, [r7, #4]
 800e362:	e00e      	b.n	800e382 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e364:	4a0b      	ldr	r2, [pc, #44]	; (800e394 <sys_timeouts_init+0x3c>)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	4a08      	ldr	r2, [pc, #32]	; (800e394 <sys_timeouts_init+0x3c>)
 800e372:	4413      	add	r3, r2
 800e374:	461a      	mov	r2, r3
 800e376:	4908      	ldr	r1, [pc, #32]	; (800e398 <sys_timeouts_init+0x40>)
 800e378:	f000 f810 	bl	800e39c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3301      	adds	r3, #1
 800e380:	607b      	str	r3, [r7, #4]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b02      	cmp	r3, #2
 800e386:	d9ed      	bls.n	800e364 <sys_timeouts_init+0xc>
  }
}
 800e388:	bf00      	nop
 800e38a:	bf00      	nop
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	0801689c 	.word	0x0801689c
 800e398:	0800e2f5 	.word	0x0800e2f5

0800e39c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3ae:	d306      	bcc.n	800e3be <sys_timeout+0x22>
 800e3b0:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <sys_timeout+0x40>)
 800e3b2:	f240 1229 	movw	r2, #297	; 0x129
 800e3b6:	490a      	ldr	r1, [pc, #40]	; (800e3e0 <sys_timeout+0x44>)
 800e3b8:	480a      	ldr	r0, [pc, #40]	; (800e3e4 <sys_timeout+0x48>)
 800e3ba:	f003 fd19 	bl	8011df0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e3be:	f7f8 fdaf 	bl	8006f20 <sys_now>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	6978      	ldr	r0, [r7, #20]
 800e3d0:	f7ff ff22 	bl	800e218 <sys_timeout_abs>
#endif
}
 800e3d4:	bf00      	nop
 800e3d6:	3718      	adds	r7, #24
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	08015cac 	.word	0x08015cac
 800e3e0:	08015d48 	.word	0x08015d48
 800e3e4:	08015d20 	.word	0x08015d20

0800e3e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e3ee:	f7f8 fd97 	bl	8006f20 <sys_now>
 800e3f2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e3f4:	4b1a      	ldr	r3, [pc, #104]	; (800e460 <sys_check_timeouts+0x78>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <sys_check_timeouts+0x1a>
 800e3fe:	f7f9 ffc7 	bl	8008390 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e402:	4b18      	ldr	r3, [pc, #96]	; (800e464 <sys_check_timeouts+0x7c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d022      	beq.n	800e454 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	0fdb      	lsrs	r3, r3, #31
 800e418:	f003 0301 	and.w	r3, r3, #1
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d11a      	bne.n	800e458 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a0f      	ldr	r2, [pc, #60]	; (800e464 <sys_check_timeouts+0x7c>)
 800e428:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	4a0b      	ldr	r2, [pc, #44]	; (800e468 <sys_check_timeouts+0x80>)
 800e43c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e43e:	68b9      	ldr	r1, [r7, #8]
 800e440:	2006      	movs	r0, #6
 800e442:	f7f9 fc69 	bl	8007d18 <memp_free>
    if (handler != NULL) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d0d3      	beq.n	800e3f4 <sys_check_timeouts+0xc>
      handler(arg);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6838      	ldr	r0, [r7, #0]
 800e450:	4798      	blx	r3
  do {
 800e452:	e7cf      	b.n	800e3f4 <sys_check_timeouts+0xc>
      return;
 800e454:	bf00      	nop
 800e456:	e000      	b.n	800e45a <sys_check_timeouts+0x72>
      return;
 800e458:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	2000a7cd 	.word	0x2000a7cd
 800e464:	2000a820 	.word	0x2000a820
 800e468:	2000a824 	.word	0x2000a824

0800e46c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e470:	f002 fde6 	bl	8011040 <rand>
 800e474:	4603      	mov	r3, r0
 800e476:	b29b      	uxth	r3, r3
 800e478:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e482:	b29a      	uxth	r2, r3
 800e484:	4b01      	ldr	r3, [pc, #4]	; (800e48c <udp_init+0x20>)
 800e486:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e488:	bf00      	nop
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	20000028 	.word	0x20000028

0800e490 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e49a:	4b17      	ldr	r3, [pc, #92]	; (800e4f8 <udp_new_port+0x68>)
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	b291      	uxth	r1, r2
 800e4a2:	4a15      	ldr	r2, [pc, #84]	; (800e4f8 <udp_new_port+0x68>)
 800e4a4:	8011      	strh	r1, [r2, #0]
 800e4a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d103      	bne.n	800e4b6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e4ae:	4b12      	ldr	r3, [pc, #72]	; (800e4f8 <udp_new_port+0x68>)
 800e4b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e4b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4b6:	4b11      	ldr	r3, [pc, #68]	; (800e4fc <udp_new_port+0x6c>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	603b      	str	r3, [r7, #0]
 800e4bc:	e011      	b.n	800e4e2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	8a5a      	ldrh	r2, [r3, #18]
 800e4c2:	4b0d      	ldr	r3, [pc, #52]	; (800e4f8 <udp_new_port+0x68>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d108      	bne.n	800e4dc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	80fb      	strh	r3, [r7, #6]
 800e4d0:	88fb      	ldrh	r3, [r7, #6]
 800e4d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4d6:	d3e0      	bcc.n	800e49a <udp_new_port+0xa>
        return 0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	e007      	b.n	800e4ec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	603b      	str	r3, [r7, #0]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1ea      	bne.n	800e4be <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e4e8:	4b03      	ldr	r3, [pc, #12]	; (800e4f8 <udp_new_port+0x68>)
 800e4ea:	881b      	ldrh	r3, [r3, #0]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr
 800e4f8:	20000028 	.word	0x20000028
 800e4fc:	2000a82c 	.word	0x2000a82c

0800e500 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	4613      	mov	r3, r2
 800e50c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d105      	bne.n	800e520 <udp_input_local_match+0x20>
 800e514:	4b27      	ldr	r3, [pc, #156]	; (800e5b4 <udp_input_local_match+0xb4>)
 800e516:	2287      	movs	r2, #135	; 0x87
 800e518:	4927      	ldr	r1, [pc, #156]	; (800e5b8 <udp_input_local_match+0xb8>)
 800e51a:	4828      	ldr	r0, [pc, #160]	; (800e5bc <udp_input_local_match+0xbc>)
 800e51c:	f003 fc68 	bl	8011df0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d105      	bne.n	800e532 <udp_input_local_match+0x32>
 800e526:	4b23      	ldr	r3, [pc, #140]	; (800e5b4 <udp_input_local_match+0xb4>)
 800e528:	2288      	movs	r2, #136	; 0x88
 800e52a:	4925      	ldr	r1, [pc, #148]	; (800e5c0 <udp_input_local_match+0xc0>)
 800e52c:	4823      	ldr	r0, [pc, #140]	; (800e5bc <udp_input_local_match+0xbc>)
 800e52e:	f003 fc5f 	bl	8011df0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	7a1b      	ldrb	r3, [r3, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	7a1a      	ldrb	r2, [r3, #8]
 800e53e:	4b21      	ldr	r3, [pc, #132]	; (800e5c4 <udp_input_local_match+0xc4>)
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e546:	3301      	adds	r3, #1
 800e548:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d001      	beq.n	800e552 <udp_input_local_match+0x52>
    return 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	e02b      	b.n	800e5aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d018      	beq.n	800e58a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d013      	beq.n	800e586 <udp_input_local_match+0x86>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00f      	beq.n	800e586 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e566:	4b17      	ldr	r3, [pc, #92]	; (800e5c4 <udp_input_local_match+0xc4>)
 800e568:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e56a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56e:	d00a      	beq.n	800e586 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	4b13      	ldr	r3, [pc, #76]	; (800e5c4 <udp_input_local_match+0xc4>)
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	405a      	eors	r2, r3
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	3308      	adds	r3, #8
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e582:	2b00      	cmp	r3, #0
 800e584:	d110      	bne.n	800e5a8 <udp_input_local_match+0xa8>
          return 1;
 800e586:	2301      	movs	r3, #1
 800e588:	e00f      	b.n	800e5aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d009      	beq.n	800e5a4 <udp_input_local_match+0xa4>
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d005      	beq.n	800e5a4 <udp_input_local_match+0xa4>
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <udp_input_local_match+0xc4>)
 800e59e:	695b      	ldr	r3, [r3, #20]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d101      	bne.n	800e5a8 <udp_input_local_match+0xa8>
        return 1;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e000      	b.n	800e5aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e5a8:	2300      	movs	r3, #0
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	08015d94 	.word	0x08015d94
 800e5b8:	08015dc4 	.word	0x08015dc4
 800e5bc:	08015de8 	.word	0x08015de8
 800e5c0:	08015e10 	.word	0x08015e10
 800e5c4:	200050a0 	.word	0x200050a0

0800e5c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e5c8:	b590      	push	{r4, r7, lr}
 800e5ca:	b08d      	sub	sp, #52	; 0x34
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d105      	bne.n	800e5e8 <udp_input+0x20>
 800e5dc:	4b7c      	ldr	r3, [pc, #496]	; (800e7d0 <udp_input+0x208>)
 800e5de:	22cf      	movs	r2, #207	; 0xcf
 800e5e0:	497c      	ldr	r1, [pc, #496]	; (800e7d4 <udp_input+0x20c>)
 800e5e2:	487d      	ldr	r0, [pc, #500]	; (800e7d8 <udp_input+0x210>)
 800e5e4:	f003 fc04 	bl	8011df0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d105      	bne.n	800e5fa <udp_input+0x32>
 800e5ee:	4b78      	ldr	r3, [pc, #480]	; (800e7d0 <udp_input+0x208>)
 800e5f0:	22d0      	movs	r2, #208	; 0xd0
 800e5f2:	497a      	ldr	r1, [pc, #488]	; (800e7dc <udp_input+0x214>)
 800e5f4:	4878      	ldr	r0, [pc, #480]	; (800e7d8 <udp_input+0x210>)
 800e5f6:	f003 fbfb 	bl	8011df0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	895b      	ldrh	r3, [r3, #10]
 800e5fe:	2b07      	cmp	r3, #7
 800e600:	d803      	bhi.n	800e60a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7fa f9fe 	bl	8008a04 <pbuf_free>
    goto end;
 800e608:	e0de      	b.n	800e7c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e610:	4b73      	ldr	r3, [pc, #460]	; (800e7e0 <udp_input+0x218>)
 800e612:	695b      	ldr	r3, [r3, #20]
 800e614:	4a72      	ldr	r2, [pc, #456]	; (800e7e0 <udp_input+0x218>)
 800e616:	6812      	ldr	r2, [r2, #0]
 800e618:	4611      	mov	r1, r2
 800e61a:	4618      	mov	r0, r3
 800e61c:	f001 fdb6 	bl	801018c <ip4_addr_isbroadcast_u32>
 800e620:	4603      	mov	r3, r0
 800e622:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	881b      	ldrh	r3, [r3, #0]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7f8 fe8c 	bl	8007348 <lwip_htons>
 800e630:	4603      	mov	r3, r0
 800e632:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	885b      	ldrh	r3, [r3, #2]
 800e638:	b29b      	uxth	r3, r3
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7f8 fe84 	bl	8007348 <lwip_htons>
 800e640:	4603      	mov	r3, r0
 800e642:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e644:	2300      	movs	r3, #0
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e648:	2300      	movs	r3, #0
 800e64a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e64c:	2300      	movs	r3, #0
 800e64e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e650:	4b64      	ldr	r3, [pc, #400]	; (800e7e4 <udp_input+0x21c>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	627b      	str	r3, [r7, #36]	; 0x24
 800e656:	e054      	b.n	800e702 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	8a5b      	ldrh	r3, [r3, #18]
 800e65c:	89fa      	ldrh	r2, [r7, #14]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d14a      	bne.n	800e6f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e662:	7cfb      	ldrb	r3, [r7, #19]
 800e664:	461a      	mov	r2, r3
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e66a:	f7ff ff49 	bl	800e500 <udp_input_local_match>
 800e66e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e670:	2b00      	cmp	r3, #0
 800e672:	d041      	beq.n	800e6f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	7c1b      	ldrb	r3, [r3, #16]
 800e678:	f003 0304 	and.w	r3, r3, #4
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d11d      	bne.n	800e6bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d102      	bne.n	800e68c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	61fb      	str	r3, [r7, #28]
 800e68a:	e017      	b.n	800e6bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e68c:	7cfb      	ldrb	r3, [r7, #19]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d014      	beq.n	800e6bc <udp_input+0xf4>
 800e692:	4b53      	ldr	r3, [pc, #332]	; (800e7e0 <udp_input+0x218>)
 800e694:	695b      	ldr	r3, [r3, #20]
 800e696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e69a:	d10f      	bne.n	800e6bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d008      	beq.n	800e6bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d101      	bne.n	800e6bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	8a9b      	ldrh	r3, [r3, #20]
 800e6c0:	8a3a      	ldrh	r2, [r7, #16]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d118      	bne.n	800e6f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d005      	beq.n	800e6da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	685a      	ldr	r2, [r3, #4]
 800e6d2:	4b43      	ldr	r3, [pc, #268]	; (800e7e0 <udp_input+0x218>)
 800e6d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d10e      	bne.n	800e6f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d014      	beq.n	800e70a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	68da      	ldr	r2, [r3, #12]
 800e6e4:	6a3b      	ldr	r3, [r7, #32]
 800e6e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e6e8:	4b3e      	ldr	r3, [pc, #248]	; (800e7e4 <udp_input+0x21c>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e6f0:	4a3c      	ldr	r2, [pc, #240]	; (800e7e4 <udp_input+0x21c>)
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e6f6:	e008      	b.n	800e70a <udp_input+0x142>
      }
    }

    prev = pcb;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	627b      	str	r3, [r7, #36]	; 0x24
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	2b00      	cmp	r3, #0
 800e706:	d1a7      	bne.n	800e658 <udp_input+0x90>
 800e708:	e000      	b.n	800e70c <udp_input+0x144>
        break;
 800e70a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d101      	bne.n	800e716 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <udp_input+0x15a>
    for_us = 1;
 800e71c:	2301      	movs	r3, #1
 800e71e:	76fb      	strb	r3, [r7, #27]
 800e720:	e00a      	b.n	800e738 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	3304      	adds	r3, #4
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	4b2d      	ldr	r3, [pc, #180]	; (800e7e0 <udp_input+0x218>)
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	bf0c      	ite	eq
 800e730:	2301      	moveq	r3, #1
 800e732:	2300      	movne	r3, #0
 800e734:	b2db      	uxtb	r3, r3
 800e736:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e738:	7efb      	ldrb	r3, [r7, #27]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d041      	beq.n	800e7c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e73e:	2108      	movs	r1, #8
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7fa f8d9 	bl	80088f8 <pbuf_remove_header>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00a      	beq.n	800e762 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e74c:	4b20      	ldr	r3, [pc, #128]	; (800e7d0 <udp_input+0x208>)
 800e74e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e752:	4925      	ldr	r1, [pc, #148]	; (800e7e8 <udp_input+0x220>)
 800e754:	4820      	ldr	r0, [pc, #128]	; (800e7d8 <udp_input+0x210>)
 800e756:	f003 fb4b 	bl	8011df0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7fa f952 	bl	8008a04 <pbuf_free>
      goto end;
 800e760:	e032      	b.n	800e7c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	2b00      	cmp	r3, #0
 800e766:	d012      	beq.n	800e78e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	699b      	ldr	r3, [r3, #24]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00a      	beq.n	800e786 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	699c      	ldr	r4, [r3, #24]
 800e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e776:	69d8      	ldr	r0, [r3, #28]
 800e778:	8a3b      	ldrh	r3, [r7, #16]
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	4b1b      	ldr	r3, [pc, #108]	; (800e7ec <udp_input+0x224>)
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e782:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e784:	e021      	b.n	800e7ca <udp_input+0x202>
        pbuf_free(p);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7fa f93c 	bl	8008a04 <pbuf_free>
        goto end;
 800e78c:	e01c      	b.n	800e7c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e78e:	7cfb      	ldrb	r3, [r7, #19]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d112      	bne.n	800e7ba <udp_input+0x1f2>
 800e794:	4b12      	ldr	r3, [pc, #72]	; (800e7e0 <udp_input+0x218>)
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e79c:	2be0      	cmp	r3, #224	; 0xe0
 800e79e:	d00c      	beq.n	800e7ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e7a0:	4b0f      	ldr	r3, [pc, #60]	; (800e7e0 <udp_input+0x218>)
 800e7a2:	899b      	ldrh	r3, [r3, #12]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	b21b      	sxth	r3, r3
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7fa f916 	bl	80089de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e7b2:	2103      	movs	r1, #3
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 f9c9 	bl	800fb4c <icmp_dest_unreach>
      pbuf_free(p);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f7fa f922 	bl	8008a04 <pbuf_free>
  return;
 800e7c0:	e003      	b.n	800e7ca <udp_input+0x202>
    pbuf_free(p);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7fa f91e 	bl	8008a04 <pbuf_free>
  return;
 800e7c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e7ca:	372c      	adds	r7, #44	; 0x2c
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd90      	pop	{r4, r7, pc}
 800e7d0:	08015d94 	.word	0x08015d94
 800e7d4:	08015e38 	.word	0x08015e38
 800e7d8:	08015de8 	.word	0x08015de8
 800e7dc:	08015e50 	.word	0x08015e50
 800e7e0:	200050a0 	.word	0x200050a0
 800e7e4:	2000a82c 	.word	0x2000a82c
 800e7e8:	08015e6c 	.word	0x08015e6c
 800e7ec:	200050b0 	.word	0x200050b0

0800e7f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d101      	bne.n	800e808 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e804:	4b39      	ldr	r3, [pc, #228]	; (800e8ec <udp_bind+0xfc>)
 800e806:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d109      	bne.n	800e822 <udp_bind+0x32>
 800e80e:	4b38      	ldr	r3, [pc, #224]	; (800e8f0 <udp_bind+0x100>)
 800e810:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e814:	4937      	ldr	r1, [pc, #220]	; (800e8f4 <udp_bind+0x104>)
 800e816:	4838      	ldr	r0, [pc, #224]	; (800e8f8 <udp_bind+0x108>)
 800e818:	f003 faea 	bl	8011df0 <iprintf>
 800e81c:	f06f 030f 	mvn.w	r3, #15
 800e820:	e060      	b.n	800e8e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e822:	2300      	movs	r3, #0
 800e824:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e826:	4b35      	ldr	r3, [pc, #212]	; (800e8fc <udp_bind+0x10c>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	617b      	str	r3, [r7, #20]
 800e82c:	e009      	b.n	800e842 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	429a      	cmp	r2, r3
 800e834:	d102      	bne.n	800e83c <udp_bind+0x4c>
      rebind = 1;
 800e836:	2301      	movs	r3, #1
 800e838:	74fb      	strb	r3, [r7, #19]
      break;
 800e83a:	e005      	b.n	800e848 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	617b      	str	r3, [r7, #20]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1f2      	bne.n	800e82e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e848:	88fb      	ldrh	r3, [r7, #6]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d109      	bne.n	800e862 <udp_bind+0x72>
    port = udp_new_port();
 800e84e:	f7ff fe1f 	bl	800e490 <udp_new_port>
 800e852:	4603      	mov	r3, r0
 800e854:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e856:	88fb      	ldrh	r3, [r7, #6]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d12c      	bne.n	800e8b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e85c:	f06f 0307 	mvn.w	r3, #7
 800e860:	e040      	b.n	800e8e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e862:	4b26      	ldr	r3, [pc, #152]	; (800e8fc <udp_bind+0x10c>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	e022      	b.n	800e8b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d01b      	beq.n	800e8aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	8a5b      	ldrh	r3, [r3, #18]
 800e876:	88fa      	ldrh	r2, [r7, #6]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d116      	bne.n	800e8aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e884:	429a      	cmp	r2, r3
 800e886:	d00d      	beq.n	800e8a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00a      	beq.n	800e8a4 <udp_bind+0xb4>
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d006      	beq.n	800e8a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e896:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d003      	beq.n	800e8a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d102      	bne.n	800e8aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e8a4:	f06f 0307 	mvn.w	r3, #7
 800e8a8:	e01c      	b.n	800e8e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1d9      	bne.n	800e86a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d002      	beq.n	800e8c2 <udp_bind+0xd2>
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	e000      	b.n	800e8c4 <udp_bind+0xd4>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	88fa      	ldrh	r2, [r7, #6]
 800e8cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e8ce:	7cfb      	ldrb	r3, [r7, #19]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d106      	bne.n	800e8e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e8d4:	4b09      	ldr	r3, [pc, #36]	; (800e8fc <udp_bind+0x10c>)
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e8dc:	4a07      	ldr	r2, [pc, #28]	; (800e8fc <udp_bind+0x10c>)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3718      	adds	r7, #24
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	080168b4 	.word	0x080168b4
 800e8f0:	08015d94 	.word	0x08015d94
 800e8f4:	0801605c 	.word	0x0801605c
 800e8f8:	08015de8 	.word	0x08015de8
 800e8fc:	2000a82c 	.word	0x2000a82c

0800e900 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	4613      	mov	r3, r2
 800e90c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d109      	bne.n	800e928 <udp_connect+0x28>
 800e914:	4b2c      	ldr	r3, [pc, #176]	; (800e9c8 <udp_connect+0xc8>)
 800e916:	f240 4235 	movw	r2, #1077	; 0x435
 800e91a:	492c      	ldr	r1, [pc, #176]	; (800e9cc <udp_connect+0xcc>)
 800e91c:	482c      	ldr	r0, [pc, #176]	; (800e9d0 <udp_connect+0xd0>)
 800e91e:	f003 fa67 	bl	8011df0 <iprintf>
 800e922:	f06f 030f 	mvn.w	r3, #15
 800e926:	e04b      	b.n	800e9c0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d109      	bne.n	800e942 <udp_connect+0x42>
 800e92e:	4b26      	ldr	r3, [pc, #152]	; (800e9c8 <udp_connect+0xc8>)
 800e930:	f240 4236 	movw	r2, #1078	; 0x436
 800e934:	4927      	ldr	r1, [pc, #156]	; (800e9d4 <udp_connect+0xd4>)
 800e936:	4826      	ldr	r0, [pc, #152]	; (800e9d0 <udp_connect+0xd0>)
 800e938:	f003 fa5a 	bl	8011df0 <iprintf>
 800e93c:	f06f 030f 	mvn.w	r3, #15
 800e940:	e03e      	b.n	800e9c0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	8a5b      	ldrh	r3, [r3, #18]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d10f      	bne.n	800e96a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e94a:	68f9      	ldr	r1, [r7, #12]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	8a5b      	ldrh	r3, [r3, #18]
 800e950:	461a      	mov	r2, r3
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f7ff ff4c 	bl	800e7f0 <udp_bind>
 800e958:	4603      	mov	r3, r0
 800e95a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e95c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <udp_connect+0x6a>
      return err;
 800e964:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e968:	e02a      	b.n	800e9c0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <udp_connect+0x76>
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	e000      	b.n	800e978 <udp_connect+0x78>
 800e976:	2300      	movs	r3, #0
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	88fa      	ldrh	r2, [r7, #6]
 800e980:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	7c1b      	ldrb	r3, [r3, #16]
 800e986:	f043 0304 	orr.w	r3, r3, #4
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e990:	4b11      	ldr	r3, [pc, #68]	; (800e9d8 <udp_connect+0xd8>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	617b      	str	r3, [r7, #20]
 800e996:	e008      	b.n	800e9aa <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d101      	bne.n	800e9a4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e00d      	b.n	800e9c0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	617b      	str	r3, [r7, #20]
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1f3      	bne.n	800e998 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e9b0:	4b09      	ldr	r3, [pc, #36]	; (800e9d8 <udp_connect+0xd8>)
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e9b8:	4a07      	ldr	r2, [pc, #28]	; (800e9d8 <udp_connect+0xd8>)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	08015d94 	.word	0x08015d94
 800e9cc:	08016074 	.word	0x08016074
 800e9d0:	08015de8 	.word	0x08015de8
 800e9d4:	08016090 	.word	0x08016090
 800e9d8:	2000a82c 	.word	0x2000a82c

0800e9dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d107      	bne.n	800e9fe <udp_recv+0x22>
 800e9ee:	4b08      	ldr	r3, [pc, #32]	; (800ea10 <udp_recv+0x34>)
 800e9f0:	f240 428a 	movw	r2, #1162	; 0x48a
 800e9f4:	4907      	ldr	r1, [pc, #28]	; (800ea14 <udp_recv+0x38>)
 800e9f6:	4808      	ldr	r0, [pc, #32]	; (800ea18 <udp_recv+0x3c>)
 800e9f8:	f003 f9fa 	bl	8011df0 <iprintf>
 800e9fc:	e005      	b.n	800ea0a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	61da      	str	r2, [r3, #28]
}
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	08015d94 	.word	0x08015d94
 800ea14:	080160c8 	.word	0x080160c8
 800ea18:	08015de8 	.word	0x08015de8

0800ea1c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ea22:	2000      	movs	r0, #0
 800ea24:	f7f9 f908 	bl	8007c38 <memp_malloc>
 800ea28:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d007      	beq.n	800ea40 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ea30:	2220      	movs	r2, #32
 800ea32:	2100      	movs	r1, #0
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f003 fa40 	bl	8011eba <memset>
    pcb->ttl = UDP_TTL;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	22ff      	movs	r2, #255	; 0xff
 800ea3e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ea40:	687b      	ldr	r3, [r7, #4]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
	...

0800ea4c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d01e      	beq.n	800ea9a <udp_netif_ip_addr_changed+0x4e>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d01a      	beq.n	800ea9a <udp_netif_ip_addr_changed+0x4e>
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d017      	beq.n	800ea9a <udp_netif_ip_addr_changed+0x4e>
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d013      	beq.n	800ea9a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ea72:	4b0d      	ldr	r3, [pc, #52]	; (800eaa8 <udp_netif_ip_addr_changed+0x5c>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	60fb      	str	r3, [r7, #12]
 800ea78:	e00c      	b.n	800ea94 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d103      	bne.n	800ea8e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1ef      	bne.n	800ea7a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ea9a:	bf00      	nop
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	2000a82c 	.word	0x2000a82c

0800eaac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800eab4:	4915      	ldr	r1, [pc, #84]	; (800eb0c <etharp_free_entry+0x60>)
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	4613      	mov	r3, r2
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	4413      	add	r3, r2
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	440b      	add	r3, r1
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d013      	beq.n	800eaf0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800eac8:	4910      	ldr	r1, [pc, #64]	; (800eb0c <etharp_free_entry+0x60>)
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	4613      	mov	r3, r2
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	4413      	add	r3, r2
 800ead2:	00db      	lsls	r3, r3, #3
 800ead4:	440b      	add	r3, r1
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4618      	mov	r0, r3
 800eada:	f7f9 ff93 	bl	8008a04 <pbuf_free>
    arp_table[i].q = NULL;
 800eade:	490b      	ldr	r1, [pc, #44]	; (800eb0c <etharp_free_entry+0x60>)
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	4613      	mov	r3, r2
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	4413      	add	r3, r2
 800eae8:	00db      	lsls	r3, r3, #3
 800eaea:	440b      	add	r3, r1
 800eaec:	2200      	movs	r2, #0
 800eaee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800eaf0:	4906      	ldr	r1, [pc, #24]	; (800eb0c <etharp_free_entry+0x60>)
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	4413      	add	r3, r2
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	440b      	add	r3, r1
 800eafe:	3314      	adds	r3, #20
 800eb00:	2200      	movs	r2, #0
 800eb02:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	2000a830 	.word	0x2000a830

0800eb10 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb16:	2300      	movs	r3, #0
 800eb18:	607b      	str	r3, [r7, #4]
 800eb1a:	e096      	b.n	800ec4a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800eb1c:	494f      	ldr	r1, [pc, #316]	; (800ec5c <etharp_tmr+0x14c>)
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	4613      	mov	r3, r2
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	4413      	add	r3, r2
 800eb26:	00db      	lsls	r3, r3, #3
 800eb28:	440b      	add	r3, r1
 800eb2a:	3314      	adds	r3, #20
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f000 8086 	beq.w	800ec44 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800eb38:	4948      	ldr	r1, [pc, #288]	; (800ec5c <etharp_tmr+0x14c>)
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	005b      	lsls	r3, r3, #1
 800eb40:	4413      	add	r3, r2
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	440b      	add	r3, r1
 800eb46:	3312      	adds	r3, #18
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	b298      	uxth	r0, r3
 800eb4e:	4943      	ldr	r1, [pc, #268]	; (800ec5c <etharp_tmr+0x14c>)
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	4613      	mov	r3, r2
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	4413      	add	r3, r2
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	440b      	add	r3, r1
 800eb5c:	3312      	adds	r3, #18
 800eb5e:	4602      	mov	r2, r0
 800eb60:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eb62:	493e      	ldr	r1, [pc, #248]	; (800ec5c <etharp_tmr+0x14c>)
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	4613      	mov	r3, r2
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	4413      	add	r3, r2
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	440b      	add	r3, r1
 800eb70:	3312      	adds	r3, #18
 800eb72:	881b      	ldrh	r3, [r3, #0]
 800eb74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800eb78:	d215      	bcs.n	800eba6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eb7a:	4938      	ldr	r1, [pc, #224]	; (800ec5c <etharp_tmr+0x14c>)
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	4413      	add	r3, r2
 800eb84:	00db      	lsls	r3, r3, #3
 800eb86:	440b      	add	r3, r1
 800eb88:	3314      	adds	r3, #20
 800eb8a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d10e      	bne.n	800ebae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800eb90:	4932      	ldr	r1, [pc, #200]	; (800ec5c <etharp_tmr+0x14c>)
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	4613      	mov	r3, r2
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	4413      	add	r3, r2
 800eb9a:	00db      	lsls	r3, r3, #3
 800eb9c:	440b      	add	r3, r1
 800eb9e:	3312      	adds	r3, #18
 800eba0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eba2:	2b04      	cmp	r3, #4
 800eba4:	d903      	bls.n	800ebae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff ff80 	bl	800eaac <etharp_free_entry>
 800ebac:	e04a      	b.n	800ec44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ebae:	492b      	ldr	r1, [pc, #172]	; (800ec5c <etharp_tmr+0x14c>)
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4413      	add	r3, r2
 800ebb8:	00db      	lsls	r3, r3, #3
 800ebba:	440b      	add	r3, r1
 800ebbc:	3314      	adds	r3, #20
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	2b03      	cmp	r3, #3
 800ebc2:	d10a      	bne.n	800ebda <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ebc4:	4925      	ldr	r1, [pc, #148]	; (800ec5c <etharp_tmr+0x14c>)
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	005b      	lsls	r3, r3, #1
 800ebcc:	4413      	add	r3, r2
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3314      	adds	r3, #20
 800ebd4:	2204      	movs	r2, #4
 800ebd6:	701a      	strb	r2, [r3, #0]
 800ebd8:	e034      	b.n	800ec44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ebda:	4920      	ldr	r1, [pc, #128]	; (800ec5c <etharp_tmr+0x14c>)
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	4413      	add	r3, r2
 800ebe4:	00db      	lsls	r3, r3, #3
 800ebe6:	440b      	add	r3, r1
 800ebe8:	3314      	adds	r3, #20
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	d10a      	bne.n	800ec06 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ebf0:	491a      	ldr	r1, [pc, #104]	; (800ec5c <etharp_tmr+0x14c>)
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	005b      	lsls	r3, r3, #1
 800ebf8:	4413      	add	r3, r2
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	440b      	add	r3, r1
 800ebfe:	3314      	adds	r3, #20
 800ec00:	2202      	movs	r2, #2
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	e01e      	b.n	800ec44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ec06:	4915      	ldr	r1, [pc, #84]	; (800ec5c <etharp_tmr+0x14c>)
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	005b      	lsls	r3, r3, #1
 800ec0e:	4413      	add	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	440b      	add	r3, r1
 800ec14:	3314      	adds	r3, #20
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d113      	bne.n	800ec44 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ec1c:	490f      	ldr	r1, [pc, #60]	; (800ec5c <etharp_tmr+0x14c>)
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	4613      	mov	r3, r2
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	4413      	add	r3, r2
 800ec26:	00db      	lsls	r3, r3, #3
 800ec28:	440b      	add	r3, r1
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	6818      	ldr	r0, [r3, #0]
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	4613      	mov	r3, r2
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	4413      	add	r3, r2
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	4a08      	ldr	r2, [pc, #32]	; (800ec5c <etharp_tmr+0x14c>)
 800ec3a:	4413      	add	r3, r2
 800ec3c:	3304      	adds	r3, #4
 800ec3e:	4619      	mov	r1, r3
 800ec40:	f000 fe6e 	bl	800f920 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3301      	adds	r3, #1
 800ec48:	607b      	str	r3, [r7, #4]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b09      	cmp	r3, #9
 800ec4e:	f77f af65 	ble.w	800eb1c <etharp_tmr+0xc>
      }
    }
  }
}
 800ec52:	bf00      	nop
 800ec54:	bf00      	nop
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	2000a830 	.word	0x2000a830

0800ec60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b08a      	sub	sp, #40	; 0x28
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	607a      	str	r2, [r7, #4]
 800ec6c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ec6e:	230a      	movs	r3, #10
 800ec70:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ec72:	230a      	movs	r3, #10
 800ec74:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ec76:	230a      	movs	r3, #10
 800ec78:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ec7e:	230a      	movs	r3, #10
 800ec80:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	83bb      	strh	r3, [r7, #28]
 800ec86:	2300      	movs	r3, #0
 800ec88:	837b      	strh	r3, [r7, #26]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec8e:	2300      	movs	r3, #0
 800ec90:	843b      	strh	r3, [r7, #32]
 800ec92:	e0ae      	b.n	800edf2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ec94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec98:	49a6      	ldr	r1, [pc, #664]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4413      	add	r3, r2
 800eca0:	00db      	lsls	r3, r3, #3
 800eca2:	440b      	add	r3, r1
 800eca4:	3314      	adds	r3, #20
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ecaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ecae:	2b0a      	cmp	r3, #10
 800ecb0:	d105      	bne.n	800ecbe <etharp_find_entry+0x5e>
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ecb8:	8c3b      	ldrh	r3, [r7, #32]
 800ecba:	847b      	strh	r3, [r7, #34]	; 0x22
 800ecbc:	e095      	b.n	800edea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ecbe:	7dfb      	ldrb	r3, [r7, #23]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 8092 	beq.w	800edea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d009      	beq.n	800ece0 <etharp_find_entry+0x80>
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d806      	bhi.n	800ece0 <etharp_find_entry+0x80>
 800ecd2:	4b99      	ldr	r3, [pc, #612]	; (800ef38 <etharp_find_entry+0x2d8>)
 800ecd4:	f240 1223 	movw	r2, #291	; 0x123
 800ecd8:	4998      	ldr	r1, [pc, #608]	; (800ef3c <etharp_find_entry+0x2dc>)
 800ecda:	4899      	ldr	r0, [pc, #612]	; (800ef40 <etharp_find_entry+0x2e0>)
 800ecdc:	f003 f888 	bl	8011df0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d020      	beq.n	800ed28 <etharp_find_entry+0xc8>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6819      	ldr	r1, [r3, #0]
 800ecea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecee:	4891      	ldr	r0, [pc, #580]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	4413      	add	r3, r2
 800ecf6:	00db      	lsls	r3, r3, #3
 800ecf8:	4403      	add	r3, r0
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4299      	cmp	r1, r3
 800ed00:	d112      	bne.n	800ed28 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00c      	beq.n	800ed22 <etharp_find_entry+0xc2>
 800ed08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed0c:	4989      	ldr	r1, [pc, #548]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ed0e:	4613      	mov	r3, r2
 800ed10:	005b      	lsls	r3, r3, #1
 800ed12:	4413      	add	r3, r2
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	440b      	add	r3, r1
 800ed18:	3308      	adds	r3, #8
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d102      	bne.n	800ed28 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ed22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed26:	e100      	b.n	800ef2a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ed28:	7dfb      	ldrb	r3, [r7, #23]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d140      	bne.n	800edb0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ed2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed32:	4980      	ldr	r1, [pc, #512]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ed34:	4613      	mov	r3, r2
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	4413      	add	r3, r2
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	440b      	add	r3, r1
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d01a      	beq.n	800ed7a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ed44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed48:	497a      	ldr	r1, [pc, #488]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	005b      	lsls	r3, r3, #1
 800ed4e:	4413      	add	r3, r2
 800ed50:	00db      	lsls	r3, r3, #3
 800ed52:	440b      	add	r3, r1
 800ed54:	3312      	adds	r3, #18
 800ed56:	881b      	ldrh	r3, [r3, #0]
 800ed58:	8bba      	ldrh	r2, [r7, #28]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d845      	bhi.n	800edea <etharp_find_entry+0x18a>
            old_queue = i;
 800ed5e:	8c3b      	ldrh	r3, [r7, #32]
 800ed60:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ed62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed66:	4973      	ldr	r1, [pc, #460]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ed68:	4613      	mov	r3, r2
 800ed6a:	005b      	lsls	r3, r3, #1
 800ed6c:	4413      	add	r3, r2
 800ed6e:	00db      	lsls	r3, r3, #3
 800ed70:	440b      	add	r3, r1
 800ed72:	3312      	adds	r3, #18
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	83bb      	strh	r3, [r7, #28]
 800ed78:	e037      	b.n	800edea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ed7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed7e:	496d      	ldr	r1, [pc, #436]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ed80:	4613      	mov	r3, r2
 800ed82:	005b      	lsls	r3, r3, #1
 800ed84:	4413      	add	r3, r2
 800ed86:	00db      	lsls	r3, r3, #3
 800ed88:	440b      	add	r3, r1
 800ed8a:	3312      	adds	r3, #18
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	8b7a      	ldrh	r2, [r7, #26]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d82a      	bhi.n	800edea <etharp_find_entry+0x18a>
            old_pending = i;
 800ed94:	8c3b      	ldrh	r3, [r7, #32]
 800ed96:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ed98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed9c:	4965      	ldr	r1, [pc, #404]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ed9e:	4613      	mov	r3, r2
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	4413      	add	r3, r2
 800eda4:	00db      	lsls	r3, r3, #3
 800eda6:	440b      	add	r3, r1
 800eda8:	3312      	adds	r3, #18
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	837b      	strh	r3, [r7, #26]
 800edae:	e01c      	b.n	800edea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800edb0:	7dfb      	ldrb	r3, [r7, #23]
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d919      	bls.n	800edea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800edb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edba:	495e      	ldr	r1, [pc, #376]	; (800ef34 <etharp_find_entry+0x2d4>)
 800edbc:	4613      	mov	r3, r2
 800edbe:	005b      	lsls	r3, r3, #1
 800edc0:	4413      	add	r3, r2
 800edc2:	00db      	lsls	r3, r3, #3
 800edc4:	440b      	add	r3, r1
 800edc6:	3312      	adds	r3, #18
 800edc8:	881b      	ldrh	r3, [r3, #0]
 800edca:	8b3a      	ldrh	r2, [r7, #24]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d80c      	bhi.n	800edea <etharp_find_entry+0x18a>
            old_stable = i;
 800edd0:	8c3b      	ldrh	r3, [r7, #32]
 800edd2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800edd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edd8:	4956      	ldr	r1, [pc, #344]	; (800ef34 <etharp_find_entry+0x2d4>)
 800edda:	4613      	mov	r3, r2
 800eddc:	005b      	lsls	r3, r3, #1
 800edde:	4413      	add	r3, r2
 800ede0:	00db      	lsls	r3, r3, #3
 800ede2:	440b      	add	r3, r1
 800ede4:	3312      	adds	r3, #18
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800edea:	8c3b      	ldrh	r3, [r7, #32]
 800edec:	3301      	adds	r3, #1
 800edee:	b29b      	uxth	r3, r3
 800edf0:	843b      	strh	r3, [r7, #32]
 800edf2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edf6:	2b09      	cmp	r3, #9
 800edf8:	f77f af4c 	ble.w	800ec94 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800edfc:	7afb      	ldrb	r3, [r7, #11]
 800edfe:	f003 0302 	and.w	r3, r3, #2
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d108      	bne.n	800ee18 <etharp_find_entry+0x1b8>
 800ee06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ee0a:	2b0a      	cmp	r3, #10
 800ee0c:	d107      	bne.n	800ee1e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ee0e:	7afb      	ldrb	r3, [r7, #11]
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d102      	bne.n	800ee1e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ee18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee1c:	e085      	b.n	800ef2a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ee1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ee22:	2b09      	cmp	r3, #9
 800ee24:	dc02      	bgt.n	800ee2c <etharp_find_entry+0x1cc>
    i = empty;
 800ee26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee28:	843b      	strh	r3, [r7, #32]
 800ee2a:	e039      	b.n	800eea0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ee2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ee30:	2b09      	cmp	r3, #9
 800ee32:	dc14      	bgt.n	800ee5e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ee34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee36:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ee38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee3c:	493d      	ldr	r1, [pc, #244]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ee3e:	4613      	mov	r3, r2
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	440b      	add	r3, r1
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d018      	beq.n	800ee80 <etharp_find_entry+0x220>
 800ee4e:	4b3a      	ldr	r3, [pc, #232]	; (800ef38 <etharp_find_entry+0x2d8>)
 800ee50:	f240 126d 	movw	r2, #365	; 0x16d
 800ee54:	493b      	ldr	r1, [pc, #236]	; (800ef44 <etharp_find_entry+0x2e4>)
 800ee56:	483a      	ldr	r0, [pc, #232]	; (800ef40 <etharp_find_entry+0x2e0>)
 800ee58:	f002 ffca 	bl	8011df0 <iprintf>
 800ee5c:	e010      	b.n	800ee80 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ee5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ee62:	2b09      	cmp	r3, #9
 800ee64:	dc02      	bgt.n	800ee6c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ee66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee68:	843b      	strh	r3, [r7, #32]
 800ee6a:	e009      	b.n	800ee80 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ee6c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ee70:	2b09      	cmp	r3, #9
 800ee72:	dc02      	bgt.n	800ee7a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ee74:	8bfb      	ldrh	r3, [r7, #30]
 800ee76:	843b      	strh	r3, [r7, #32]
 800ee78:	e002      	b.n	800ee80 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ee7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee7e:	e054      	b.n	800ef2a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ee80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee84:	2b09      	cmp	r3, #9
 800ee86:	dd06      	ble.n	800ee96 <etharp_find_entry+0x236>
 800ee88:	4b2b      	ldr	r3, [pc, #172]	; (800ef38 <etharp_find_entry+0x2d8>)
 800ee8a:	f240 127f 	movw	r2, #383	; 0x17f
 800ee8e:	492e      	ldr	r1, [pc, #184]	; (800ef48 <etharp_find_entry+0x2e8>)
 800ee90:	482b      	ldr	r0, [pc, #172]	; (800ef40 <etharp_find_entry+0x2e0>)
 800ee92:	f002 ffad 	bl	8011df0 <iprintf>
    etharp_free_entry(i);
 800ee96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff fe06 	bl	800eaac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eea0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eea4:	2b09      	cmp	r3, #9
 800eea6:	dd06      	ble.n	800eeb6 <etharp_find_entry+0x256>
 800eea8:	4b23      	ldr	r3, [pc, #140]	; (800ef38 <etharp_find_entry+0x2d8>)
 800eeaa:	f240 1283 	movw	r2, #387	; 0x183
 800eeae:	4926      	ldr	r1, [pc, #152]	; (800ef48 <etharp_find_entry+0x2e8>)
 800eeb0:	4823      	ldr	r0, [pc, #140]	; (800ef40 <etharp_find_entry+0x2e0>)
 800eeb2:	f002 ff9d 	bl	8011df0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800eeb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eeba:	491e      	ldr	r1, [pc, #120]	; (800ef34 <etharp_find_entry+0x2d4>)
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	440b      	add	r3, r1
 800eec6:	3314      	adds	r3, #20
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d006      	beq.n	800eedc <etharp_find_entry+0x27c>
 800eece:	4b1a      	ldr	r3, [pc, #104]	; (800ef38 <etharp_find_entry+0x2d8>)
 800eed0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800eed4:	491d      	ldr	r1, [pc, #116]	; (800ef4c <etharp_find_entry+0x2ec>)
 800eed6:	481a      	ldr	r0, [pc, #104]	; (800ef40 <etharp_find_entry+0x2e0>)
 800eed8:	f002 ff8a 	bl	8011df0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00b      	beq.n	800eefa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800eee2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	4812      	ldr	r0, [pc, #72]	; (800ef34 <etharp_find_entry+0x2d4>)
 800eeec:	4613      	mov	r3, r2
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	4413      	add	r3, r2
 800eef2:	00db      	lsls	r3, r3, #3
 800eef4:	4403      	add	r3, r0
 800eef6:	3304      	adds	r3, #4
 800eef8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800eefa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eefe:	490d      	ldr	r1, [pc, #52]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ef00:	4613      	mov	r3, r2
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	4413      	add	r3, r2
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	440b      	add	r3, r1
 800ef0a:	3312      	adds	r3, #18
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ef10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef14:	4907      	ldr	r1, [pc, #28]	; (800ef34 <etharp_find_entry+0x2d4>)
 800ef16:	4613      	mov	r3, r2
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	00db      	lsls	r3, r3, #3
 800ef1e:	440b      	add	r3, r1
 800ef20:	3308      	adds	r3, #8
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ef26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3728      	adds	r7, #40	; 0x28
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	2000a830 	.word	0x2000a830
 800ef38:	080160f8 	.word	0x080160f8
 800ef3c:	08016130 	.word	0x08016130
 800ef40:	08016170 	.word	0x08016170
 800ef44:	08016198 	.word	0x08016198
 800ef48:	080161b0 	.word	0x080161b0
 800ef4c:	080161c4 	.word	0x080161c4

0800ef50 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b088      	sub	sp, #32
 800ef54:	af02      	add	r7, sp, #8
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef64:	2b06      	cmp	r3, #6
 800ef66:	d006      	beq.n	800ef76 <etharp_update_arp_entry+0x26>
 800ef68:	4b48      	ldr	r3, [pc, #288]	; (800f08c <etharp_update_arp_entry+0x13c>)
 800ef6a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ef6e:	4948      	ldr	r1, [pc, #288]	; (800f090 <etharp_update_arp_entry+0x140>)
 800ef70:	4848      	ldr	r0, [pc, #288]	; (800f094 <etharp_update_arp_entry+0x144>)
 800ef72:	f002 ff3d 	bl	8011df0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d012      	beq.n	800efa2 <etharp_update_arp_entry+0x52>
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00e      	beq.n	800efa2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68f9      	ldr	r1, [r7, #12]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f001 f8fe 	bl	801018c <ip4_addr_isbroadcast_u32>
 800ef90:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d105      	bne.n	800efa2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ef9e:	2be0      	cmp	r3, #224	; 0xe0
 800efa0:	d102      	bne.n	800efa8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800efa2:	f06f 030f 	mvn.w	r3, #15
 800efa6:	e06c      	b.n	800f082 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800efa8:	78fb      	ldrb	r3, [r7, #3]
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	4619      	mov	r1, r3
 800efae:	68b8      	ldr	r0, [r7, #8]
 800efb0:	f7ff fe56 	bl	800ec60 <etharp_find_entry>
 800efb4:	4603      	mov	r3, r0
 800efb6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800efb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	da02      	bge.n	800efc6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800efc0:	8afb      	ldrh	r3, [r7, #22]
 800efc2:	b25b      	sxtb	r3, r3
 800efc4:	e05d      	b.n	800f082 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800efc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800efca:	4933      	ldr	r1, [pc, #204]	; (800f098 <etharp_update_arp_entry+0x148>)
 800efcc:	4613      	mov	r3, r2
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	4413      	add	r3, r2
 800efd2:	00db      	lsls	r3, r3, #3
 800efd4:	440b      	add	r3, r1
 800efd6:	3314      	adds	r3, #20
 800efd8:	2202      	movs	r2, #2
 800efda:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800efdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800efe0:	492d      	ldr	r1, [pc, #180]	; (800f098 <etharp_update_arp_entry+0x148>)
 800efe2:	4613      	mov	r3, r2
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	4413      	add	r3, r2
 800efe8:	00db      	lsls	r3, r3, #3
 800efea:	440b      	add	r3, r1
 800efec:	3308      	adds	r3, #8
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800eff2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eff6:	4613      	mov	r3, r2
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	4413      	add	r3, r2
 800effc:	00db      	lsls	r3, r3, #3
 800effe:	3308      	adds	r3, #8
 800f000:	4a25      	ldr	r2, [pc, #148]	; (800f098 <etharp_update_arp_entry+0x148>)
 800f002:	4413      	add	r3, r2
 800f004:	3304      	adds	r3, #4
 800f006:	2206      	movs	r2, #6
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f003 f851 	bl	80120b2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f014:	4920      	ldr	r1, [pc, #128]	; (800f098 <etharp_update_arp_entry+0x148>)
 800f016:	4613      	mov	r3, r2
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	4413      	add	r3, r2
 800f01c:	00db      	lsls	r3, r3, #3
 800f01e:	440b      	add	r3, r1
 800f020:	3312      	adds	r3, #18
 800f022:	2200      	movs	r2, #0
 800f024:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f026:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f02a:	491b      	ldr	r1, [pc, #108]	; (800f098 <etharp_update_arp_entry+0x148>)
 800f02c:	4613      	mov	r3, r2
 800f02e:	005b      	lsls	r3, r3, #1
 800f030:	4413      	add	r3, r2
 800f032:	00db      	lsls	r3, r3, #3
 800f034:	440b      	add	r3, r1
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d021      	beq.n	800f080 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f03c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f040:	4915      	ldr	r1, [pc, #84]	; (800f098 <etharp_update_arp_entry+0x148>)
 800f042:	4613      	mov	r3, r2
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	4413      	add	r3, r2
 800f048:	00db      	lsls	r3, r3, #3
 800f04a:	440b      	add	r3, r1
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f050:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f054:	4910      	ldr	r1, [pc, #64]	; (800f098 <etharp_update_arp_entry+0x148>)
 800f056:	4613      	mov	r3, r2
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	4413      	add	r3, r2
 800f05c:	00db      	lsls	r3, r3, #3
 800f05e:	440b      	add	r3, r1
 800f060:	2200      	movs	r2, #0
 800f062:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f06a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6939      	ldr	r1, [r7, #16]
 800f074:	68f8      	ldr	r0, [r7, #12]
 800f076:	f001 ff97 	bl	8010fa8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f07a:	6938      	ldr	r0, [r7, #16]
 800f07c:	f7f9 fcc2 	bl	8008a04 <pbuf_free>
  }
  return ERR_OK;
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3718      	adds	r7, #24
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	080160f8 	.word	0x080160f8
 800f090:	080161f0 	.word	0x080161f0
 800f094:	08016170 	.word	0x08016170
 800f098:	2000a830 	.word	0x2000a830

0800f09c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	60fb      	str	r3, [r7, #12]
 800f0a8:	e01e      	b.n	800f0e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f0aa:	4913      	ldr	r1, [pc, #76]	; (800f0f8 <etharp_cleanup_netif+0x5c>)
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	005b      	lsls	r3, r3, #1
 800f0b2:	4413      	add	r3, r2
 800f0b4:	00db      	lsls	r3, r3, #3
 800f0b6:	440b      	add	r3, r1
 800f0b8:	3314      	adds	r3, #20
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f0be:	7afb      	ldrb	r3, [r7, #11]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00e      	beq.n	800f0e2 <etharp_cleanup_netif+0x46>
 800f0c4:	490c      	ldr	r1, [pc, #48]	; (800f0f8 <etharp_cleanup_netif+0x5c>)
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	4613      	mov	r3, r2
 800f0ca:	005b      	lsls	r3, r3, #1
 800f0cc:	4413      	add	r3, r2
 800f0ce:	00db      	lsls	r3, r3, #3
 800f0d0:	440b      	add	r3, r1
 800f0d2:	3308      	adds	r3, #8
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d102      	bne.n	800f0e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f7ff fce5 	bl	800eaac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	60fb      	str	r3, [r7, #12]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2b09      	cmp	r3, #9
 800f0ec:	dddd      	ble.n	800f0aa <etharp_cleanup_netif+0xe>
    }
  }
}
 800f0ee:	bf00      	nop
 800f0f0:	bf00      	nop
 800f0f2:	3710      	adds	r7, #16
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	2000a830 	.word	0x2000a830

0800f0fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f0fc:	b5b0      	push	{r4, r5, r7, lr}
 800f0fe:	b08a      	sub	sp, #40	; 0x28
 800f100:	af04      	add	r7, sp, #16
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d107      	bne.n	800f11c <etharp_input+0x20>
 800f10c:	4b3d      	ldr	r3, [pc, #244]	; (800f204 <etharp_input+0x108>)
 800f10e:	f240 228a 	movw	r2, #650	; 0x28a
 800f112:	493d      	ldr	r1, [pc, #244]	; (800f208 <etharp_input+0x10c>)
 800f114:	483d      	ldr	r0, [pc, #244]	; (800f20c <etharp_input+0x110>)
 800f116:	f002 fe6b 	bl	8011df0 <iprintf>
 800f11a:	e06f      	b.n	800f1fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	881b      	ldrh	r3, [r3, #0]
 800f126:	b29b      	uxth	r3, r3
 800f128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f12c:	d10c      	bne.n	800f148 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f132:	2b06      	cmp	r3, #6
 800f134:	d108      	bne.n	800f148 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f13a:	2b04      	cmp	r3, #4
 800f13c:	d104      	bne.n	800f148 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	885b      	ldrh	r3, [r3, #2]
 800f142:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f144:	2b08      	cmp	r3, #8
 800f146:	d003      	beq.n	800f150 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7f9 fc5b 	bl	8008a04 <pbuf_free>
    return;
 800f14e:	e055      	b.n	800f1fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	330e      	adds	r3, #14
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	3318      	adds	r3, #24
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	3304      	adds	r3, #4
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d102      	bne.n	800f170 <etharp_input+0x74>
    for_us = 0;
 800f16a:	2300      	movs	r3, #0
 800f16c:	75fb      	strb	r3, [r7, #23]
 800f16e:	e009      	b.n	800f184 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	3304      	adds	r3, #4
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	429a      	cmp	r2, r3
 800f17a:	bf0c      	ite	eq
 800f17c:	2301      	moveq	r3, #1
 800f17e:	2300      	movne	r3, #0
 800f180:	b2db      	uxtb	r3, r3
 800f182:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	f103 0208 	add.w	r2, r3, #8
 800f18a:	7dfb      	ldrb	r3, [r7, #23]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <etharp_input+0x98>
 800f190:	2301      	movs	r3, #1
 800f192:	e000      	b.n	800f196 <etharp_input+0x9a>
 800f194:	2302      	movs	r3, #2
 800f196:	f107 010c 	add.w	r1, r7, #12
 800f19a:	6838      	ldr	r0, [r7, #0]
 800f19c:	f7ff fed8 	bl	800ef50 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	88db      	ldrh	r3, [r3, #6]
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1aa:	d003      	beq.n	800f1b4 <etharp_input+0xb8>
 800f1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1b0:	d01e      	beq.n	800f1f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f1b2:	e020      	b.n	800f1f6 <etharp_input+0xfa>
      if (for_us) {
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d01c      	beq.n	800f1f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f1d0:	693a      	ldr	r2, [r7, #16]
 800f1d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f1d4:	2102      	movs	r1, #2
 800f1d6:	9103      	str	r1, [sp, #12]
 800f1d8:	f107 010c 	add.w	r1, r7, #12
 800f1dc:	9102      	str	r1, [sp, #8]
 800f1de:	9201      	str	r2, [sp, #4]
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	462b      	mov	r3, r5
 800f1e4:	4622      	mov	r2, r4
 800f1e6:	4601      	mov	r1, r0
 800f1e8:	6838      	ldr	r0, [r7, #0]
 800f1ea:	f000 faeb 	bl	800f7c4 <etharp_raw>
      break;
 800f1ee:	e001      	b.n	800f1f4 <etharp_input+0xf8>
      break;
 800f1f0:	bf00      	nop
 800f1f2:	e000      	b.n	800f1f6 <etharp_input+0xfa>
      break;
 800f1f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7f9 fc04 	bl	8008a04 <pbuf_free>
}
 800f1fc:	3718      	adds	r7, #24
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bdb0      	pop	{r4, r5, r7, pc}
 800f202:	bf00      	nop
 800f204:	080160f8 	.word	0x080160f8
 800f208:	08016248 	.word	0x08016248
 800f20c:	08016170 	.word	0x08016170

0800f210 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af02      	add	r7, sp, #8
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	4613      	mov	r3, r2
 800f21c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f21e:	79fa      	ldrb	r2, [r7, #7]
 800f220:	4944      	ldr	r1, [pc, #272]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f222:	4613      	mov	r3, r2
 800f224:	005b      	lsls	r3, r3, #1
 800f226:	4413      	add	r3, r2
 800f228:	00db      	lsls	r3, r3, #3
 800f22a:	440b      	add	r3, r1
 800f22c:	3314      	adds	r3, #20
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d806      	bhi.n	800f242 <etharp_output_to_arp_index+0x32>
 800f234:	4b40      	ldr	r3, [pc, #256]	; (800f338 <etharp_output_to_arp_index+0x128>)
 800f236:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f23a:	4940      	ldr	r1, [pc, #256]	; (800f33c <etharp_output_to_arp_index+0x12c>)
 800f23c:	4840      	ldr	r0, [pc, #256]	; (800f340 <etharp_output_to_arp_index+0x130>)
 800f23e:	f002 fdd7 	bl	8011df0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f242:	79fa      	ldrb	r2, [r7, #7]
 800f244:	493b      	ldr	r1, [pc, #236]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f246:	4613      	mov	r3, r2
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	4413      	add	r3, r2
 800f24c:	00db      	lsls	r3, r3, #3
 800f24e:	440b      	add	r3, r1
 800f250:	3314      	adds	r3, #20
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	2b02      	cmp	r3, #2
 800f256:	d153      	bne.n	800f300 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f258:	79fa      	ldrb	r2, [r7, #7]
 800f25a:	4936      	ldr	r1, [pc, #216]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f25c:	4613      	mov	r3, r2
 800f25e:	005b      	lsls	r3, r3, #1
 800f260:	4413      	add	r3, r2
 800f262:	00db      	lsls	r3, r3, #3
 800f264:	440b      	add	r3, r1
 800f266:	3312      	adds	r3, #18
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f26e:	d919      	bls.n	800f2a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f270:	79fa      	ldrb	r2, [r7, #7]
 800f272:	4613      	mov	r3, r2
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	4413      	add	r3, r2
 800f278:	00db      	lsls	r3, r3, #3
 800f27a:	4a2e      	ldr	r2, [pc, #184]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f27c:	4413      	add	r3, r2
 800f27e:	3304      	adds	r3, #4
 800f280:	4619      	mov	r1, r3
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f000 fb4c 	bl	800f920 <etharp_request>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d138      	bne.n	800f300 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f28e:	79fa      	ldrb	r2, [r7, #7]
 800f290:	4928      	ldr	r1, [pc, #160]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f292:	4613      	mov	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	4413      	add	r3, r2
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	440b      	add	r3, r1
 800f29c:	3314      	adds	r3, #20
 800f29e:	2203      	movs	r2, #3
 800f2a0:	701a      	strb	r2, [r3, #0]
 800f2a2:	e02d      	b.n	800f300 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f2a4:	79fa      	ldrb	r2, [r7, #7]
 800f2a6:	4923      	ldr	r1, [pc, #140]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	005b      	lsls	r3, r3, #1
 800f2ac:	4413      	add	r3, r2
 800f2ae:	00db      	lsls	r3, r3, #3
 800f2b0:	440b      	add	r3, r1
 800f2b2:	3312      	adds	r3, #18
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f2ba:	d321      	bcc.n	800f300 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f2bc:	79fa      	ldrb	r2, [r7, #7]
 800f2be:	4613      	mov	r3, r2
 800f2c0:	005b      	lsls	r3, r3, #1
 800f2c2:	4413      	add	r3, r2
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	4a1b      	ldr	r2, [pc, #108]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f2c8:	4413      	add	r3, r2
 800f2ca:	1d19      	adds	r1, r3, #4
 800f2cc:	79fa      	ldrb	r2, [r7, #7]
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	4413      	add	r3, r2
 800f2d4:	00db      	lsls	r3, r3, #3
 800f2d6:	3308      	adds	r3, #8
 800f2d8:	4a16      	ldr	r2, [pc, #88]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f2da:	4413      	add	r3, r2
 800f2dc:	3304      	adds	r3, #4
 800f2de:	461a      	mov	r2, r3
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f000 fafb 	bl	800f8dc <etharp_request_dst>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d109      	bne.n	800f300 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f2ec:	79fa      	ldrb	r2, [r7, #7]
 800f2ee:	4911      	ldr	r1, [pc, #68]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	005b      	lsls	r3, r3, #1
 800f2f4:	4413      	add	r3, r2
 800f2f6:	00db      	lsls	r3, r3, #3
 800f2f8:	440b      	add	r3, r1
 800f2fa:	3314      	adds	r3, #20
 800f2fc:	2203      	movs	r2, #3
 800f2fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f306:	79fa      	ldrb	r2, [r7, #7]
 800f308:	4613      	mov	r3, r2
 800f30a:	005b      	lsls	r3, r3, #1
 800f30c:	4413      	add	r3, r2
 800f30e:	00db      	lsls	r3, r3, #3
 800f310:	3308      	adds	r3, #8
 800f312:	4a08      	ldr	r2, [pc, #32]	; (800f334 <etharp_output_to_arp_index+0x124>)
 800f314:	4413      	add	r3, r2
 800f316:	3304      	adds	r3, #4
 800f318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f31c:	9200      	str	r2, [sp, #0]
 800f31e:	460a      	mov	r2, r1
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f001 fe40 	bl	8010fa8 <ethernet_output>
 800f328:	4603      	mov	r3, r0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	2000a830 	.word	0x2000a830
 800f338:	080160f8 	.word	0x080160f8
 800f33c:	08016268 	.word	0x08016268
 800f340:	08016170 	.word	0x08016170

0800f344 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08a      	sub	sp, #40	; 0x28
 800f348:	af02      	add	r7, sp, #8
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d106      	bne.n	800f368 <etharp_output+0x24>
 800f35a:	4b73      	ldr	r3, [pc, #460]	; (800f528 <etharp_output+0x1e4>)
 800f35c:	f240 321e 	movw	r2, #798	; 0x31e
 800f360:	4972      	ldr	r1, [pc, #456]	; (800f52c <etharp_output+0x1e8>)
 800f362:	4873      	ldr	r0, [pc, #460]	; (800f530 <etharp_output+0x1ec>)
 800f364:	f002 fd44 	bl	8011df0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d106      	bne.n	800f37c <etharp_output+0x38>
 800f36e:	4b6e      	ldr	r3, [pc, #440]	; (800f528 <etharp_output+0x1e4>)
 800f370:	f240 321f 	movw	r2, #799	; 0x31f
 800f374:	496f      	ldr	r1, [pc, #444]	; (800f534 <etharp_output+0x1f0>)
 800f376:	486e      	ldr	r0, [pc, #440]	; (800f530 <etharp_output+0x1ec>)
 800f378:	f002 fd3a 	bl	8011df0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d106      	bne.n	800f390 <etharp_output+0x4c>
 800f382:	4b69      	ldr	r3, [pc, #420]	; (800f528 <etharp_output+0x1e4>)
 800f384:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f388:	496b      	ldr	r1, [pc, #428]	; (800f538 <etharp_output+0x1f4>)
 800f38a:	4869      	ldr	r0, [pc, #420]	; (800f530 <etharp_output+0x1ec>)
 800f38c:	f002 fd30 	bl	8011df0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	68f9      	ldr	r1, [r7, #12]
 800f396:	4618      	mov	r0, r3
 800f398:	f000 fef8 	bl	801018c <ip4_addr_isbroadcast_u32>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d002      	beq.n	800f3a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f3a2:	4b66      	ldr	r3, [pc, #408]	; (800f53c <etharp_output+0x1f8>)
 800f3a4:	61fb      	str	r3, [r7, #28]
 800f3a6:	e0af      	b.n	800f508 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3b0:	2be0      	cmp	r3, #224	; 0xe0
 800f3b2:	d118      	bne.n	800f3e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f3bc:	235e      	movs	r3, #94	; 0x5e
 800f3be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	3302      	adds	r3, #2
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	3303      	adds	r3, #3
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f3de:	f107 0310 	add.w	r3, r7, #16
 800f3e2:	61fb      	str	r3, [r7, #28]
 800f3e4:	e090      	b.n	800f508 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	405a      	eors	r2, r3
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	3308      	adds	r3, #8
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d012      	beq.n	800f424 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f404:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f408:	4293      	cmp	r3, r2
 800f40a:	d00b      	beq.n	800f424 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	330c      	adds	r3, #12
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d003      	beq.n	800f41e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	330c      	adds	r3, #12
 800f41a:	61bb      	str	r3, [r7, #24]
 800f41c:	e002      	b.n	800f424 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f41e:	f06f 0303 	mvn.w	r3, #3
 800f422:	e07d      	b.n	800f520 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f424:	4b46      	ldr	r3, [pc, #280]	; (800f540 <etharp_output+0x1fc>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	4619      	mov	r1, r3
 800f42a:	4a46      	ldr	r2, [pc, #280]	; (800f544 <etharp_output+0x200>)
 800f42c:	460b      	mov	r3, r1
 800f42e:	005b      	lsls	r3, r3, #1
 800f430:	440b      	add	r3, r1
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	4413      	add	r3, r2
 800f436:	3314      	adds	r3, #20
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	d925      	bls.n	800f48a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f43e:	4b40      	ldr	r3, [pc, #256]	; (800f540 <etharp_output+0x1fc>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	4619      	mov	r1, r3
 800f444:	4a3f      	ldr	r2, [pc, #252]	; (800f544 <etharp_output+0x200>)
 800f446:	460b      	mov	r3, r1
 800f448:	005b      	lsls	r3, r3, #1
 800f44a:	440b      	add	r3, r1
 800f44c:	00db      	lsls	r3, r3, #3
 800f44e:	4413      	add	r3, r2
 800f450:	3308      	adds	r3, #8
 800f452:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	429a      	cmp	r2, r3
 800f458:	d117      	bne.n	800f48a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	4b38      	ldr	r3, [pc, #224]	; (800f540 <etharp_output+0x1fc>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	4618      	mov	r0, r3
 800f464:	4937      	ldr	r1, [pc, #220]	; (800f544 <etharp_output+0x200>)
 800f466:	4603      	mov	r3, r0
 800f468:	005b      	lsls	r3, r3, #1
 800f46a:	4403      	add	r3, r0
 800f46c:	00db      	lsls	r3, r3, #3
 800f46e:	440b      	add	r3, r1
 800f470:	3304      	adds	r3, #4
 800f472:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f474:	429a      	cmp	r2, r3
 800f476:	d108      	bne.n	800f48a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f478:	4b31      	ldr	r3, [pc, #196]	; (800f540 <etharp_output+0x1fc>)
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	461a      	mov	r2, r3
 800f47e:	68b9      	ldr	r1, [r7, #8]
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f7ff fec5 	bl	800f210 <etharp_output_to_arp_index>
 800f486:	4603      	mov	r3, r0
 800f488:	e04a      	b.n	800f520 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f48a:	2300      	movs	r3, #0
 800f48c:	75fb      	strb	r3, [r7, #23]
 800f48e:	e031      	b.n	800f4f4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f490:	7dfa      	ldrb	r2, [r7, #23]
 800f492:	492c      	ldr	r1, [pc, #176]	; (800f544 <etharp_output+0x200>)
 800f494:	4613      	mov	r3, r2
 800f496:	005b      	lsls	r3, r3, #1
 800f498:	4413      	add	r3, r2
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	440b      	add	r3, r1
 800f49e:	3314      	adds	r3, #20
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d923      	bls.n	800f4ee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f4a6:	7dfa      	ldrb	r2, [r7, #23]
 800f4a8:	4926      	ldr	r1, [pc, #152]	; (800f544 <etharp_output+0x200>)
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	4413      	add	r3, r2
 800f4b0:	00db      	lsls	r3, r3, #3
 800f4b2:	440b      	add	r3, r1
 800f4b4:	3308      	adds	r3, #8
 800f4b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d117      	bne.n	800f4ee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	6819      	ldr	r1, [r3, #0]
 800f4c2:	7dfa      	ldrb	r2, [r7, #23]
 800f4c4:	481f      	ldr	r0, [pc, #124]	; (800f544 <etharp_output+0x200>)
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	005b      	lsls	r3, r3, #1
 800f4ca:	4413      	add	r3, r2
 800f4cc:	00db      	lsls	r3, r3, #3
 800f4ce:	4403      	add	r3, r0
 800f4d0:	3304      	adds	r3, #4
 800f4d2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f4d4:	4299      	cmp	r1, r3
 800f4d6:	d10a      	bne.n	800f4ee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f4d8:	4a19      	ldr	r2, [pc, #100]	; (800f540 <etharp_output+0x1fc>)
 800f4da:	7dfb      	ldrb	r3, [r7, #23]
 800f4dc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f4de:	7dfb      	ldrb	r3, [r7, #23]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	68b9      	ldr	r1, [r7, #8]
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f7ff fe93 	bl	800f210 <etharp_output_to_arp_index>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	e018      	b.n	800f520 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	75fb      	strb	r3, [r7, #23]
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
 800f4f6:	2b09      	cmp	r3, #9
 800f4f8:	d9ca      	bls.n	800f490 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	69b9      	ldr	r1, [r7, #24]
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	f000 f822 	bl	800f548 <etharp_query>
 800f504:	4603      	mov	r3, r0
 800f506:	e00b      	b.n	800f520 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f50e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f512:	9300      	str	r3, [sp, #0]
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	68b9      	ldr	r1, [r7, #8]
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f001 fd45 	bl	8010fa8 <ethernet_output>
 800f51e:	4603      	mov	r3, r0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3720      	adds	r7, #32
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	080160f8 	.word	0x080160f8
 800f52c:	08016248 	.word	0x08016248
 800f530:	08016170 	.word	0x08016170
 800f534:	08016298 	.word	0x08016298
 800f538:	08016238 	.word	0x08016238
 800f53c:	080168b8 	.word	0x080168b8
 800f540:	2000a920 	.word	0x2000a920
 800f544:	2000a830 	.word	0x2000a830

0800f548 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b08c      	sub	sp, #48	; 0x30
 800f54c:	af02      	add	r7, sp, #8
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3326      	adds	r3, #38	; 0x26
 800f558:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f55a:	23ff      	movs	r3, #255	; 0xff
 800f55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68f9      	ldr	r1, [r7, #12]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 fe0e 	bl	801018c <ip4_addr_isbroadcast_u32>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d10c      	bne.n	800f590 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f57e:	2be0      	cmp	r3, #224	; 0xe0
 800f580:	d006      	beq.n	800f590 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d003      	beq.n	800f590 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d102      	bne.n	800f596 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f590:	f06f 030f 	mvn.w	r3, #15
 800f594:	e101      	b.n	800f79a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	2101      	movs	r1, #1
 800f59a:	68b8      	ldr	r0, [r7, #8]
 800f59c:	f7ff fb60 	bl	800ec60 <etharp_find_entry>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f5a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	da02      	bge.n	800f5b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f5ac:	8a7b      	ldrh	r3, [r7, #18]
 800f5ae:	b25b      	sxtb	r3, r3
 800f5b0:	e0f3      	b.n	800f79a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f5b2:	8a7b      	ldrh	r3, [r7, #18]
 800f5b4:	2b7e      	cmp	r3, #126	; 0x7e
 800f5b6:	d906      	bls.n	800f5c6 <etharp_query+0x7e>
 800f5b8:	4b7a      	ldr	r3, [pc, #488]	; (800f7a4 <etharp_query+0x25c>)
 800f5ba:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f5be:	497a      	ldr	r1, [pc, #488]	; (800f7a8 <etharp_query+0x260>)
 800f5c0:	487a      	ldr	r0, [pc, #488]	; (800f7ac <etharp_query+0x264>)
 800f5c2:	f002 fc15 	bl	8011df0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f5c6:	8a7b      	ldrh	r3, [r7, #18]
 800f5c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f5ca:	7c7a      	ldrb	r2, [r7, #17]
 800f5cc:	4978      	ldr	r1, [pc, #480]	; (800f7b0 <etharp_query+0x268>)
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	005b      	lsls	r3, r3, #1
 800f5d2:	4413      	add	r3, r2
 800f5d4:	00db      	lsls	r3, r3, #3
 800f5d6:	440b      	add	r3, r1
 800f5d8:	3314      	adds	r3, #20
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d115      	bne.n	800f60c <etharp_query+0xc4>
    is_new_entry = 1;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f5e4:	7c7a      	ldrb	r2, [r7, #17]
 800f5e6:	4972      	ldr	r1, [pc, #456]	; (800f7b0 <etharp_query+0x268>)
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	4413      	add	r3, r2
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	440b      	add	r3, r1
 800f5f2:	3314      	adds	r3, #20
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f5f8:	7c7a      	ldrb	r2, [r7, #17]
 800f5fa:	496d      	ldr	r1, [pc, #436]	; (800f7b0 <etharp_query+0x268>)
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	005b      	lsls	r3, r3, #1
 800f600:	4413      	add	r3, r2
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	440b      	add	r3, r1
 800f606:	3308      	adds	r3, #8
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f60c:	7c7a      	ldrb	r2, [r7, #17]
 800f60e:	4968      	ldr	r1, [pc, #416]	; (800f7b0 <etharp_query+0x268>)
 800f610:	4613      	mov	r3, r2
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	4413      	add	r3, r2
 800f616:	00db      	lsls	r3, r3, #3
 800f618:	440b      	add	r3, r1
 800f61a:	3314      	adds	r3, #20
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d011      	beq.n	800f646 <etharp_query+0xfe>
 800f622:	7c7a      	ldrb	r2, [r7, #17]
 800f624:	4962      	ldr	r1, [pc, #392]	; (800f7b0 <etharp_query+0x268>)
 800f626:	4613      	mov	r3, r2
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	4413      	add	r3, r2
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	440b      	add	r3, r1
 800f630:	3314      	adds	r3, #20
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d806      	bhi.n	800f646 <etharp_query+0xfe>
 800f638:	4b5a      	ldr	r3, [pc, #360]	; (800f7a4 <etharp_query+0x25c>)
 800f63a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f63e:	495d      	ldr	r1, [pc, #372]	; (800f7b4 <etharp_query+0x26c>)
 800f640:	485a      	ldr	r0, [pc, #360]	; (800f7ac <etharp_query+0x264>)
 800f642:	f002 fbd5 	bl	8011df0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f646:	6a3b      	ldr	r3, [r7, #32]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d102      	bne.n	800f652 <etharp_query+0x10a>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d10c      	bne.n	800f66c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f652:	68b9      	ldr	r1, [r7, #8]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 f963 	bl	800f920 <etharp_request>
 800f65a:	4603      	mov	r3, r0
 800f65c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d102      	bne.n	800f66c <etharp_query+0x124>
      return result;
 800f666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f66a:	e096      	b.n	800f79a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <etharp_query+0x138>
 800f672:	4b4c      	ldr	r3, [pc, #304]	; (800f7a4 <etharp_query+0x25c>)
 800f674:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f678:	494f      	ldr	r1, [pc, #316]	; (800f7b8 <etharp_query+0x270>)
 800f67a:	484c      	ldr	r0, [pc, #304]	; (800f7ac <etharp_query+0x264>)
 800f67c:	f002 fbb8 	bl	8011df0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f680:	7c7a      	ldrb	r2, [r7, #17]
 800f682:	494b      	ldr	r1, [pc, #300]	; (800f7b0 <etharp_query+0x268>)
 800f684:	4613      	mov	r3, r2
 800f686:	005b      	lsls	r3, r3, #1
 800f688:	4413      	add	r3, r2
 800f68a:	00db      	lsls	r3, r3, #3
 800f68c:	440b      	add	r3, r1
 800f68e:	3314      	adds	r3, #20
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	2b01      	cmp	r3, #1
 800f694:	d917      	bls.n	800f6c6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f696:	4a49      	ldr	r2, [pc, #292]	; (800f7bc <etharp_query+0x274>)
 800f698:	7c7b      	ldrb	r3, [r7, #17]
 800f69a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f69c:	7c7a      	ldrb	r2, [r7, #17]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	005b      	lsls	r3, r3, #1
 800f6a2:	4413      	add	r3, r2
 800f6a4:	00db      	lsls	r3, r3, #3
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	4a41      	ldr	r2, [pc, #260]	; (800f7b0 <etharp_query+0x268>)
 800f6aa:	4413      	add	r3, r2
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f6b2:	9200      	str	r2, [sp, #0]
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	6879      	ldr	r1, [r7, #4]
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f001 fc75 	bl	8010fa8 <ethernet_output>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6c4:	e067      	b.n	800f796 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f6c6:	7c7a      	ldrb	r2, [r7, #17]
 800f6c8:	4939      	ldr	r1, [pc, #228]	; (800f7b0 <etharp_query+0x268>)
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	4413      	add	r3, r2
 800f6d0:	00db      	lsls	r3, r3, #3
 800f6d2:	440b      	add	r3, r1
 800f6d4:	3314      	adds	r3, #20
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d15c      	bne.n	800f796 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f6e4:	e01c      	b.n	800f720 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	895a      	ldrh	r2, [r3, #10]
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	891b      	ldrh	r3, [r3, #8]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d10a      	bne.n	800f708 <etharp_query+0x1c0>
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d006      	beq.n	800f708 <etharp_query+0x1c0>
 800f6fa:	4b2a      	ldr	r3, [pc, #168]	; (800f7a4 <etharp_query+0x25c>)
 800f6fc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f700:	492f      	ldr	r1, [pc, #188]	; (800f7c0 <etharp_query+0x278>)
 800f702:	482a      	ldr	r0, [pc, #168]	; (800f7ac <etharp_query+0x264>)
 800f704:	f002 fb74 	bl	8011df0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	7b1b      	ldrb	r3, [r3, #12]
 800f70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <etharp_query+0x1d2>
        copy_needed = 1;
 800f714:	2301      	movs	r3, #1
 800f716:	61bb      	str	r3, [r7, #24]
        break;
 800f718:	e005      	b.n	800f726 <etharp_query+0x1de>
      }
      p = p->next;
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d1df      	bne.n	800f6e6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d007      	beq.n	800f73c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f732:	200e      	movs	r0, #14
 800f734:	f7f9 fbc2 	bl	8008ebc <pbuf_clone>
 800f738:	61f8      	str	r0, [r7, #28]
 800f73a:	e004      	b.n	800f746 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f740:	69f8      	ldr	r0, [r7, #28]
 800f742:	f7f9 f9ff 	bl	8008b44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d021      	beq.n	800f790 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f74c:	7c7a      	ldrb	r2, [r7, #17]
 800f74e:	4918      	ldr	r1, [pc, #96]	; (800f7b0 <etharp_query+0x268>)
 800f750:	4613      	mov	r3, r2
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	4413      	add	r3, r2
 800f756:	00db      	lsls	r3, r3, #3
 800f758:	440b      	add	r3, r1
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00a      	beq.n	800f776 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f760:	7c7a      	ldrb	r2, [r7, #17]
 800f762:	4913      	ldr	r1, [pc, #76]	; (800f7b0 <etharp_query+0x268>)
 800f764:	4613      	mov	r3, r2
 800f766:	005b      	lsls	r3, r3, #1
 800f768:	4413      	add	r3, r2
 800f76a:	00db      	lsls	r3, r3, #3
 800f76c:	440b      	add	r3, r1
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4618      	mov	r0, r3
 800f772:	f7f9 f947 	bl	8008a04 <pbuf_free>
      }
      arp_table[i].q = p;
 800f776:	7c7a      	ldrb	r2, [r7, #17]
 800f778:	490d      	ldr	r1, [pc, #52]	; (800f7b0 <etharp_query+0x268>)
 800f77a:	4613      	mov	r3, r2
 800f77c:	005b      	lsls	r3, r3, #1
 800f77e:	4413      	add	r3, r2
 800f780:	00db      	lsls	r3, r3, #3
 800f782:	440b      	add	r3, r1
 800f784:	69fa      	ldr	r2, [r7, #28]
 800f786:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f788:	2300      	movs	r3, #0
 800f78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f78e:	e002      	b.n	800f796 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f790:	23ff      	movs	r3, #255	; 0xff
 800f792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f796:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3728      	adds	r7, #40	; 0x28
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	080160f8 	.word	0x080160f8
 800f7a8:	080162a4 	.word	0x080162a4
 800f7ac:	08016170 	.word	0x08016170
 800f7b0:	2000a830 	.word	0x2000a830
 800f7b4:	080162b4 	.word	0x080162b4
 800f7b8:	08016298 	.word	0x08016298
 800f7bc:	2000a920 	.word	0x2000a920
 800f7c0:	080162dc 	.word	0x080162dc

0800f7c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08a      	sub	sp, #40	; 0x28
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d106      	bne.n	800f7ea <etharp_raw+0x26>
 800f7dc:	4b3a      	ldr	r3, [pc, #232]	; (800f8c8 <etharp_raw+0x104>)
 800f7de:	f240 4257 	movw	r2, #1111	; 0x457
 800f7e2:	493a      	ldr	r1, [pc, #232]	; (800f8cc <etharp_raw+0x108>)
 800f7e4:	483a      	ldr	r0, [pc, #232]	; (800f8d0 <etharp_raw+0x10c>)
 800f7e6:	f002 fb03 	bl	8011df0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f7ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7ee:	211c      	movs	r1, #28
 800f7f0:	200e      	movs	r0, #14
 800f7f2:	f7f8 fe23 	bl	800843c <pbuf_alloc>
 800f7f6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d102      	bne.n	800f804 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f7fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f802:	e05d      	b.n	800f8c0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	895b      	ldrh	r3, [r3, #10]
 800f808:	2b1b      	cmp	r3, #27
 800f80a:	d806      	bhi.n	800f81a <etharp_raw+0x56>
 800f80c:	4b2e      	ldr	r3, [pc, #184]	; (800f8c8 <etharp_raw+0x104>)
 800f80e:	f240 4262 	movw	r2, #1122	; 0x462
 800f812:	4930      	ldr	r1, [pc, #192]	; (800f8d4 <etharp_raw+0x110>)
 800f814:	482e      	ldr	r0, [pc, #184]	; (800f8d0 <etharp_raw+0x10c>)
 800f816:	f002 faeb 	bl	8011df0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f820:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f822:	4618      	mov	r0, r3
 800f824:	f7f7 fd90 	bl	8007348 <lwip_htons>
 800f828:	4603      	mov	r3, r0
 800f82a:	461a      	mov	r2, r3
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f836:	2b06      	cmp	r3, #6
 800f838:	d006      	beq.n	800f848 <etharp_raw+0x84>
 800f83a:	4b23      	ldr	r3, [pc, #140]	; (800f8c8 <etharp_raw+0x104>)
 800f83c:	f240 4269 	movw	r2, #1129	; 0x469
 800f840:	4925      	ldr	r1, [pc, #148]	; (800f8d8 <etharp_raw+0x114>)
 800f842:	4823      	ldr	r0, [pc, #140]	; (800f8d0 <etharp_raw+0x10c>)
 800f844:	f002 fad4 	bl	8011df0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	3308      	adds	r3, #8
 800f84c:	2206      	movs	r2, #6
 800f84e:	6839      	ldr	r1, [r7, #0]
 800f850:	4618      	mov	r0, r3
 800f852:	f002 fc2e 	bl	80120b2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	3312      	adds	r3, #18
 800f85a:	2206      	movs	r2, #6
 800f85c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f85e:	4618      	mov	r0, r3
 800f860:	f002 fc27 	bl	80120b2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	330e      	adds	r3, #14
 800f868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f86a:	6812      	ldr	r2, [r2, #0]
 800f86c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	3318      	adds	r3, #24
 800f872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f874:	6812      	ldr	r2, [r2, #0]
 800f876:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	2200      	movs	r2, #0
 800f87c:	701a      	strb	r2, [r3, #0]
 800f87e:	2200      	movs	r2, #0
 800f880:	f042 0201 	orr.w	r2, r2, #1
 800f884:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	2200      	movs	r2, #0
 800f88a:	f042 0208 	orr.w	r2, r2, #8
 800f88e:	709a      	strb	r2, [r3, #2]
 800f890:	2200      	movs	r2, #0
 800f892:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	2206      	movs	r2, #6
 800f898:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2204      	movs	r2, #4
 800f89e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f8a0:	f640 0306 	movw	r3, #2054	; 0x806
 800f8a4:	9300      	str	r3, [sp, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	69b9      	ldr	r1, [r7, #24]
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f001 fb7b 	bl	8010fa8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f8b2:	69b8      	ldr	r0, [r7, #24]
 800f8b4:	f7f9 f8a6 	bl	8008a04 <pbuf_free>
  p = NULL;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f8bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3720      	adds	r7, #32
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	080160f8 	.word	0x080160f8
 800f8cc:	08016248 	.word	0x08016248
 800f8d0:	08016170 	.word	0x08016170
 800f8d4:	080162f8 	.word	0x080162f8
 800f8d8:	0801632c 	.word	0x0801632c

0800f8dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b088      	sub	sp, #32
 800f8e0:	af04      	add	r7, sp, #16
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	9203      	str	r2, [sp, #12]
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	9202      	str	r2, [sp, #8]
 800f900:	4a06      	ldr	r2, [pc, #24]	; (800f91c <etharp_request_dst+0x40>)
 800f902:	9201      	str	r2, [sp, #4]
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	4603      	mov	r3, r0
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f7ff ff5a 	bl	800f7c4 <etharp_raw>
 800f910:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	080168c0 	.word	0x080168c0

0800f920 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f92a:	4a05      	ldr	r2, [pc, #20]	; (800f940 <etharp_request+0x20>)
 800f92c:	6839      	ldr	r1, [r7, #0]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff ffd4 	bl	800f8dc <etharp_request_dst>
 800f934:	4603      	mov	r3, r0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	080168b8 	.word	0x080168b8

0800f944 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b08e      	sub	sp, #56	; 0x38
 800f948:	af04      	add	r7, sp, #16
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f94e:	4b79      	ldr	r3, [pc, #484]	; (800fb34 <icmp_input+0x1f0>)
 800f950:	689b      	ldr	r3, [r3, #8]
 800f952:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	f003 030f 	and.w	r3, r3, #15
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	b2db      	uxtb	r3, r3
 800f962:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f966:	2b13      	cmp	r3, #19
 800f968:	f240 80cd 	bls.w	800fb06 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	895b      	ldrh	r3, [r3, #10]
 800f970:	2b03      	cmp	r3, #3
 800f972:	f240 80ca 	bls.w	800fb0a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f980:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f984:	2b00      	cmp	r3, #0
 800f986:	f000 80b7 	beq.w	800faf8 <icmp_input+0x1b4>
 800f98a:	2b08      	cmp	r3, #8
 800f98c:	f040 80b7 	bne.w	800fafe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f990:	4b69      	ldr	r3, [pc, #420]	; (800fb38 <icmp_input+0x1f4>)
 800f992:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f994:	4b67      	ldr	r3, [pc, #412]	; (800fb34 <icmp_input+0x1f0>)
 800f996:	695b      	ldr	r3, [r3, #20]
 800f998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f99c:	2be0      	cmp	r3, #224	; 0xe0
 800f99e:	f000 80bb 	beq.w	800fb18 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f9a2:	4b64      	ldr	r3, [pc, #400]	; (800fb34 <icmp_input+0x1f0>)
 800f9a4:	695b      	ldr	r3, [r3, #20]
 800f9a6:	4a63      	ldr	r2, [pc, #396]	; (800fb34 <icmp_input+0x1f0>)
 800f9a8:	6812      	ldr	r2, [r2, #0]
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f000 fbed 	bl	801018c <ip4_addr_isbroadcast_u32>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f040 80b1 	bne.w	800fb1c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	891b      	ldrh	r3, [r3, #8]
 800f9be:	2b07      	cmp	r3, #7
 800f9c0:	f240 80a5 	bls.w	800fb0e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f9c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9c6:	330e      	adds	r3, #14
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7f8 ff84 	bl	80088d8 <pbuf_add_header>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d04b      	beq.n	800fa6e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	891a      	ldrh	r2, [r3, #8]
 800f9da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9dc:	4413      	add	r3, r2
 800f9de:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	891b      	ldrh	r3, [r3, #8]
 800f9e4:	8b7a      	ldrh	r2, [r7, #26]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	f0c0 809a 	bcc.w	800fb20 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f9ec:	8b7b      	ldrh	r3, [r7, #26]
 800f9ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	200e      	movs	r0, #14
 800f9f6:	f7f8 fd21 	bl	800843c <pbuf_alloc>
 800f9fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	f000 8090 	beq.w	800fb24 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	895b      	ldrh	r3, [r3, #10]
 800fa08:	461a      	mov	r2, r3
 800fa0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa0c:	3308      	adds	r3, #8
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d203      	bcs.n	800fa1a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fa12:	6978      	ldr	r0, [r7, #20]
 800fa14:	f7f8 fff6 	bl	8008a04 <pbuf_free>
          goto icmperr;
 800fa18:	e085      	b.n	800fb26 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fa20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa22:	4618      	mov	r0, r3
 800fa24:	f002 fb45 	bl	80120b2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fa28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6978      	ldr	r0, [r7, #20]
 800fa2e:	f7f8 ff63 	bl	80088f8 <pbuf_remove_header>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d009      	beq.n	800fa4c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fa38:	4b40      	ldr	r3, [pc, #256]	; (800fb3c <icmp_input+0x1f8>)
 800fa3a:	22b6      	movs	r2, #182	; 0xb6
 800fa3c:	4940      	ldr	r1, [pc, #256]	; (800fb40 <icmp_input+0x1fc>)
 800fa3e:	4841      	ldr	r0, [pc, #260]	; (800fb44 <icmp_input+0x200>)
 800fa40:	f002 f9d6 	bl	8011df0 <iprintf>
          pbuf_free(r);
 800fa44:	6978      	ldr	r0, [r7, #20]
 800fa46:	f7f8 ffdd 	bl	8008a04 <pbuf_free>
          goto icmperr;
 800fa4a:	e06c      	b.n	800fb26 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fa4c:	6879      	ldr	r1, [r7, #4]
 800fa4e:	6978      	ldr	r0, [r7, #20]
 800fa50:	f7f9 f8f0 	bl	8008c34 <pbuf_copy>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d003      	beq.n	800fa62 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fa5a:	6978      	ldr	r0, [r7, #20]
 800fa5c:	f7f8 ffd2 	bl	8008a04 <pbuf_free>
          goto icmperr;
 800fa60:	e061      	b.n	800fb26 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7f8 ffce 	bl	8008a04 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	607b      	str	r3, [r7, #4]
 800fa6c:	e00f      	b.n	800fa8e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fa6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa70:	330e      	adds	r3, #14
 800fa72:	4619      	mov	r1, r3
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7f8 ff3f 	bl	80088f8 <pbuf_remove_header>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d006      	beq.n	800fa8e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fa80:	4b2e      	ldr	r3, [pc, #184]	; (800fb3c <icmp_input+0x1f8>)
 800fa82:	22c7      	movs	r2, #199	; 0xc7
 800fa84:	4930      	ldr	r1, [pc, #192]	; (800fb48 <icmp_input+0x204>)
 800fa86:	482f      	ldr	r0, [pc, #188]	; (800fb44 <icmp_input+0x200>)
 800fa88:	f002 f9b2 	bl	8011df0 <iprintf>
          goto icmperr;
 800fa8c:	e04b      	b.n	800fb26 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fa94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa96:	4619      	mov	r1, r3
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7f8 ff1d 	bl	80088d8 <pbuf_add_header>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d12b      	bne.n	800fafc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fab2:	4b20      	ldr	r3, [pc, #128]	; (800fb34 <icmp_input+0x1f0>)
 800fab4:	691a      	ldr	r2, [r3, #16]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	2200      	movs	r2, #0
 800fabe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	2200      	movs	r2, #0
 800fac4:	709a      	strb	r2, [r3, #2]
 800fac6:	2200      	movs	r2, #0
 800fac8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	22ff      	movs	r2, #255	; 0xff
 800face:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2200      	movs	r2, #0
 800fad4:	729a      	strb	r2, [r3, #10]
 800fad6:	2200      	movs	r2, #0
 800fad8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	9302      	str	r3, [sp, #8]
 800fade:	2301      	movs	r3, #1
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	2300      	movs	r3, #0
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	23ff      	movs	r3, #255	; 0xff
 800fae8:	2200      	movs	r2, #0
 800faea:	69f9      	ldr	r1, [r7, #28]
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 fa75 	bl	800ffdc <ip4_output_if>
 800faf2:	4603      	mov	r3, r0
 800faf4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800faf6:	e001      	b.n	800fafc <icmp_input+0x1b8>
      break;
 800faf8:	bf00      	nop
 800fafa:	e000      	b.n	800fafe <icmp_input+0x1ba>
      break;
 800fafc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f7f8 ff80 	bl	8008a04 <pbuf_free>
  return;
 800fb04:	e013      	b.n	800fb2e <icmp_input+0x1ea>
    goto lenerr;
 800fb06:	bf00      	nop
 800fb08:	e002      	b.n	800fb10 <icmp_input+0x1cc>
    goto lenerr;
 800fb0a:	bf00      	nop
 800fb0c:	e000      	b.n	800fb10 <icmp_input+0x1cc>
        goto lenerr;
 800fb0e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7f8 ff77 	bl	8008a04 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fb16:	e00a      	b.n	800fb2e <icmp_input+0x1ea>
        goto icmperr;
 800fb18:	bf00      	nop
 800fb1a:	e004      	b.n	800fb26 <icmp_input+0x1e2>
        goto icmperr;
 800fb1c:	bf00      	nop
 800fb1e:	e002      	b.n	800fb26 <icmp_input+0x1e2>
          goto icmperr;
 800fb20:	bf00      	nop
 800fb22:	e000      	b.n	800fb26 <icmp_input+0x1e2>
          goto icmperr;
 800fb24:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7f8 ff6c 	bl	8008a04 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fb2c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fb2e:	3728      	adds	r7, #40	; 0x28
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	200050a0 	.word	0x200050a0
 800fb38:	200050b4 	.word	0x200050b4
 800fb3c:	08016370 	.word	0x08016370
 800fb40:	080163a8 	.word	0x080163a8
 800fb44:	080163e0 	.word	0x080163e0
 800fb48:	08016408 	.word	0x08016408

0800fb4c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	460b      	mov	r3, r1
 800fb56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fb58:	78fb      	ldrb	r3, [r7, #3]
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	2103      	movs	r1, #3
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f814 	bl	800fb8c <icmp_send_response>
}
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	460b      	mov	r3, r1
 800fb76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fb78:	78fb      	ldrb	r3, [r7, #3]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	210b      	movs	r1, #11
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 f804 	bl	800fb8c <icmp_send_response>
}
 800fb84:	bf00      	nop
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08c      	sub	sp, #48	; 0x30
 800fb90:	af04      	add	r7, sp, #16
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	460b      	mov	r3, r1
 800fb96:	70fb      	strb	r3, [r7, #3]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fb9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fba0:	2124      	movs	r1, #36	; 0x24
 800fba2:	2022      	movs	r0, #34	; 0x22
 800fba4:	f7f8 fc4a 	bl	800843c <pbuf_alloc>
 800fba8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d04c      	beq.n	800fc4a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	895b      	ldrh	r3, [r3, #10]
 800fbb4:	2b23      	cmp	r3, #35	; 0x23
 800fbb6:	d806      	bhi.n	800fbc6 <icmp_send_response+0x3a>
 800fbb8:	4b26      	ldr	r3, [pc, #152]	; (800fc54 <icmp_send_response+0xc8>)
 800fbba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fbbe:	4926      	ldr	r1, [pc, #152]	; (800fc58 <icmp_send_response+0xcc>)
 800fbc0:	4826      	ldr	r0, [pc, #152]	; (800fc5c <icmp_send_response+0xd0>)
 800fbc2:	f002 f915 	bl	8011df0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	78fa      	ldrb	r2, [r7, #3]
 800fbd6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	78ba      	ldrb	r2, [r7, #2]
 800fbdc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	711a      	strb	r2, [r3, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	2200      	movs	r2, #0
 800fbec:	719a      	strb	r2, [r3, #6]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	f103 0008 	add.w	r0, r3, #8
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	221c      	movs	r2, #28
 800fc00:	4619      	mov	r1, r3
 800fc02:	f002 fa56 	bl	80120b2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	68db      	ldr	r3, [r3, #12]
 800fc0a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fc0c:	f107 030c 	add.w	r3, r7, #12
 800fc10:	4618      	mov	r0, r3
 800fc12:	f000 f825 	bl	800fc60 <ip4_route>
 800fc16:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d011      	beq.n	800fc42 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2200      	movs	r2, #0
 800fc22:	709a      	strb	r2, [r3, #2]
 800fc24:	2200      	movs	r2, #0
 800fc26:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fc28:	f107 020c 	add.w	r2, r7, #12
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	9302      	str	r3, [sp, #8]
 800fc30:	2301      	movs	r3, #1
 800fc32:	9301      	str	r3, [sp, #4]
 800fc34:	2300      	movs	r3, #0
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	23ff      	movs	r3, #255	; 0xff
 800fc3a:	2100      	movs	r1, #0
 800fc3c:	69f8      	ldr	r0, [r7, #28]
 800fc3e:	f000 f9cd 	bl	800ffdc <ip4_output_if>
  }
  pbuf_free(q);
 800fc42:	69f8      	ldr	r0, [r7, #28]
 800fc44:	f7f8 fede 	bl	8008a04 <pbuf_free>
 800fc48:	e000      	b.n	800fc4c <icmp_send_response+0xc0>
    return;
 800fc4a:	bf00      	nop
}
 800fc4c:	3720      	adds	r7, #32
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	08016370 	.word	0x08016370
 800fc58:	0801643c 	.word	0x0801643c
 800fc5c:	080163e0 	.word	0x080163e0

0800fc60 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fc68:	4b33      	ldr	r3, [pc, #204]	; (800fd38 <ip4_route+0xd8>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	60fb      	str	r3, [r7, #12]
 800fc6e:	e036      	b.n	800fcde <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc76:	f003 0301 	and.w	r3, r3, #1
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d02b      	beq.n	800fcd8 <ip4_route+0x78>
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc86:	089b      	lsrs	r3, r3, #2
 800fc88:	f003 0301 	and.w	r3, r3, #1
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d022      	beq.n	800fcd8 <ip4_route+0x78>
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	3304      	adds	r3, #4
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d01d      	beq.n	800fcd8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	3304      	adds	r3, #4
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	405a      	eors	r2, r3
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	3308      	adds	r3, #8
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4013      	ands	r3, r2
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d101      	bne.n	800fcb8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	e038      	b.n	800fd2a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcbe:	f003 0302 	and.w	r3, r3, #2
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d108      	bne.n	800fcd8 <ip4_route+0x78>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	330c      	adds	r3, #12
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d101      	bne.n	800fcd8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	e028      	b.n	800fd2a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	60fb      	str	r3, [r7, #12]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d1c5      	bne.n	800fc70 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fce4:	4b15      	ldr	r3, [pc, #84]	; (800fd3c <ip4_route+0xdc>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d01a      	beq.n	800fd22 <ip4_route+0xc2>
 800fcec:	4b13      	ldr	r3, [pc, #76]	; (800fd3c <ip4_route+0xdc>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcf4:	f003 0301 	and.w	r3, r3, #1
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d012      	beq.n	800fd22 <ip4_route+0xc2>
 800fcfc:	4b0f      	ldr	r3, [pc, #60]	; (800fd3c <ip4_route+0xdc>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd04:	f003 0304 	and.w	r3, r3, #4
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00a      	beq.n	800fd22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fd0c:	4b0b      	ldr	r3, [pc, #44]	; (800fd3c <ip4_route+0xdc>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3304      	adds	r3, #4
 800fd12:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d004      	beq.n	800fd22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	2b7f      	cmp	r3, #127	; 0x7f
 800fd20:	d101      	bne.n	800fd26 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fd22:	2300      	movs	r3, #0
 800fd24:	e001      	b.n	800fd2a <ip4_route+0xca>
  }

  return netif_default;
 800fd26:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <ip4_route+0xdc>)
 800fd28:	681b      	ldr	r3, [r3, #0]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3714      	adds	r7, #20
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	2000a7c4 	.word	0x2000a7c4
 800fd3c:	2000a7c8 	.word	0x2000a7c8

0800fd40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d016      	beq.n	800fd86 <ip4_input_accept+0x46>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	3304      	adds	r3, #4
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d011      	beq.n	800fd86 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fd62:	4b0b      	ldr	r3, [pc, #44]	; (800fd90 <ip4_input_accept+0x50>)
 800fd64:	695a      	ldr	r2, [r3, #20]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	3304      	adds	r3, #4
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d008      	beq.n	800fd82 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fd70:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <ip4_input_accept+0x50>)
 800fd72:	695b      	ldr	r3, [r3, #20]
 800fd74:	6879      	ldr	r1, [r7, #4]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 fa08 	bl	801018c <ip4_addr_isbroadcast_u32>
 800fd7c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fd82:	2301      	movs	r3, #1
 800fd84:	e000      	b.n	800fd88 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fd86:	2300      	movs	r3, #0
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	200050a0 	.word	0x200050a0

0800fd94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b086      	sub	sp, #24
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	091b      	lsrs	r3, r3, #4
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b04      	cmp	r3, #4
 800fdae:	d004      	beq.n	800fdba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f7f8 fe27 	bl	8008a04 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	e107      	b.n	800ffca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	f003 030f 	and.w	r3, r3, #15
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	885b      	ldrh	r3, [r3, #2]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7f7 fab9 	bl	8007348 <lwip_htons>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	891b      	ldrh	r3, [r3, #8]
 800fdde:	89ba      	ldrh	r2, [r7, #12]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d204      	bcs.n	800fdee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fde4:	89bb      	ldrh	r3, [r7, #12]
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7f8 fc85 	bl	80086f8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	895b      	ldrh	r3, [r3, #10]
 800fdf2:	89fa      	ldrh	r2, [r7, #14]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d807      	bhi.n	800fe08 <ip4_input+0x74>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	891b      	ldrh	r3, [r3, #8]
 800fdfc:	89ba      	ldrh	r2, [r7, #12]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d802      	bhi.n	800fe08 <ip4_input+0x74>
 800fe02:	89fb      	ldrh	r3, [r7, #14]
 800fe04:	2b13      	cmp	r3, #19
 800fe06:	d804      	bhi.n	800fe12 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7f8 fdfb 	bl	8008a04 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e0db      	b.n	800ffca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	4a6f      	ldr	r2, [pc, #444]	; (800ffd4 <ip4_input+0x240>)
 800fe18:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	4a6d      	ldr	r2, [pc, #436]	; (800ffd4 <ip4_input+0x240>)
 800fe20:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fe22:	4b6c      	ldr	r3, [pc, #432]	; (800ffd4 <ip4_input+0x240>)
 800fe24:	695b      	ldr	r3, [r3, #20]
 800fe26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe2a:	2be0      	cmp	r3, #224	; 0xe0
 800fe2c:	d112      	bne.n	800fe54 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d007      	beq.n	800fe4e <ip4_input+0xba>
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	3304      	adds	r3, #4
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <ip4_input+0xba>
      netif = inp;
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	613b      	str	r3, [r7, #16]
 800fe4c:	e02a      	b.n	800fea4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	613b      	str	r3, [r7, #16]
 800fe52:	e027      	b.n	800fea4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fe54:	6838      	ldr	r0, [r7, #0]
 800fe56:	f7ff ff73 	bl	800fd40 <ip4_input_accept>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <ip4_input+0xd2>
      netif = inp;
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	613b      	str	r3, [r7, #16]
 800fe64:	e01e      	b.n	800fea4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fe66:	2300      	movs	r3, #0
 800fe68:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fe6a:	4b5a      	ldr	r3, [pc, #360]	; (800ffd4 <ip4_input+0x240>)
 800fe6c:	695b      	ldr	r3, [r3, #20]
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	2b7f      	cmp	r3, #127	; 0x7f
 800fe72:	d017      	beq.n	800fea4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fe74:	4b58      	ldr	r3, [pc, #352]	; (800ffd8 <ip4_input+0x244>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	613b      	str	r3, [r7, #16]
 800fe7a:	e00e      	b.n	800fe9a <ip4_input+0x106>
          if (netif == inp) {
 800fe7c:	693a      	ldr	r2, [r7, #16]
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d006      	beq.n	800fe92 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fe84:	6938      	ldr	r0, [r7, #16]
 800fe86:	f7ff ff5b 	bl	800fd40 <ip4_input_accept>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d108      	bne.n	800fea2 <ip4_input+0x10e>
 800fe90:	e000      	b.n	800fe94 <ip4_input+0x100>
            continue;
 800fe92:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	613b      	str	r3, [r7, #16]
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1ed      	bne.n	800fe7c <ip4_input+0xe8>
 800fea0:	e000      	b.n	800fea4 <ip4_input+0x110>
            break;
 800fea2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fea4:	4b4b      	ldr	r3, [pc, #300]	; (800ffd4 <ip4_input+0x240>)
 800fea6:	691b      	ldr	r3, [r3, #16]
 800fea8:	6839      	ldr	r1, [r7, #0]
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 f96e 	bl	801018c <ip4_addr_isbroadcast_u32>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d105      	bne.n	800fec2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800feb6:	4b47      	ldr	r3, [pc, #284]	; (800ffd4 <ip4_input+0x240>)
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800febe:	2be0      	cmp	r3, #224	; 0xe0
 800fec0:	d104      	bne.n	800fecc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7f8 fd9e 	bl	8008a04 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fec8:	2300      	movs	r3, #0
 800feca:	e07e      	b.n	800ffca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d104      	bne.n	800fedc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f7f8 fd96 	bl	8008a04 <pbuf_free>
    return ERR_OK;
 800fed8:	2300      	movs	r3, #0
 800feda:	e076      	b.n	800ffca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	88db      	ldrh	r3, [r3, #6]
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	461a      	mov	r2, r3
 800fee4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fee8:	4013      	ands	r3, r2
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00b      	beq.n	800ff06 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 fc92 	bl	8010818 <ip4_reass>
 800fef4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d101      	bne.n	800ff00 <ip4_input+0x16c>
      return ERR_OK;
 800fefc:	2300      	movs	r3, #0
 800fefe:	e064      	b.n	800ffca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ff06:	4a33      	ldr	r2, [pc, #204]	; (800ffd4 <ip4_input+0x240>)
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ff0c:	4a31      	ldr	r2, [pc, #196]	; (800ffd4 <ip4_input+0x240>)
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ff12:	4a30      	ldr	r2, [pc, #192]	; (800ffd4 <ip4_input+0x240>)
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	f003 030f 	and.w	r3, r3, #15
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	4b2a      	ldr	r3, [pc, #168]	; (800ffd4 <ip4_input+0x240>)
 800ff2a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ff2c:	89fb      	ldrh	r3, [r7, #14]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7f8 fce1 	bl	80088f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	7a5b      	ldrb	r3, [r3, #9]
 800ff3a:	2b11      	cmp	r3, #17
 800ff3c:	d006      	beq.n	800ff4c <ip4_input+0x1b8>
 800ff3e:	2b11      	cmp	r3, #17
 800ff40:	dc13      	bgt.n	800ff6a <ip4_input+0x1d6>
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	d00c      	beq.n	800ff60 <ip4_input+0x1cc>
 800ff46:	2b06      	cmp	r3, #6
 800ff48:	d005      	beq.n	800ff56 <ip4_input+0x1c2>
 800ff4a:	e00e      	b.n	800ff6a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7fe fb3a 	bl	800e5c8 <udp_input>
        break;
 800ff54:	e026      	b.n	800ffa4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7fa fb7b 	bl	800a654 <tcp_input>
        break;
 800ff5e:	e021      	b.n	800ffa4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ff60:	6839      	ldr	r1, [r7, #0]
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7ff fcee 	bl	800f944 <icmp_input>
        break;
 800ff68:	e01c      	b.n	800ffa4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ff6a:	4b1a      	ldr	r3, [pc, #104]	; (800ffd4 <ip4_input+0x240>)
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	6939      	ldr	r1, [r7, #16]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f000 f90b 	bl	801018c <ip4_addr_isbroadcast_u32>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10f      	bne.n	800ff9c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ff7c:	4b15      	ldr	r3, [pc, #84]	; (800ffd4 <ip4_input+0x240>)
 800ff7e:	695b      	ldr	r3, [r3, #20]
 800ff80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ff84:	2be0      	cmp	r3, #224	; 0xe0
 800ff86:	d009      	beq.n	800ff9c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ff88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7f8 fd25 	bl	80089de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ff94:	2102      	movs	r1, #2
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7ff fdd8 	bl	800fb4c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f7f8 fd31 	bl	8008a04 <pbuf_free>
        break;
 800ffa2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ffa4:	4b0b      	ldr	r3, [pc, #44]	; (800ffd4 <ip4_input+0x240>)
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ffaa:	4b0a      	ldr	r3, [pc, #40]	; (800ffd4 <ip4_input+0x240>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ffb0:	4b08      	ldr	r3, [pc, #32]	; (800ffd4 <ip4_input+0x240>)
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ffb6:	4b07      	ldr	r3, [pc, #28]	; (800ffd4 <ip4_input+0x240>)
 800ffb8:	2200      	movs	r2, #0
 800ffba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ffbc:	4b05      	ldr	r3, [pc, #20]	; (800ffd4 <ip4_input+0x240>)
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ffc2:	4b04      	ldr	r3, [pc, #16]	; (800ffd4 <ip4_input+0x240>)
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3718      	adds	r7, #24
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	200050a0 	.word	0x200050a0
 800ffd8:	2000a7c4 	.word	0x2000a7c4

0800ffdc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b08a      	sub	sp, #40	; 0x28
 800ffe0:	af04      	add	r7, sp, #16
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
 800ffe8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d009      	beq.n	8010008 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d003      	beq.n	8010002 <ip4_output_if+0x26>
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d102      	bne.n	8010008 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010004:	3304      	adds	r3, #4
 8010006:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010008:	78fa      	ldrb	r2, [r7, #3]
 801000a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000c:	9302      	str	r3, [sp, #8]
 801000e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010012:	9301      	str	r3, [sp, #4]
 8010014:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	4613      	mov	r3, r2
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	6979      	ldr	r1, [r7, #20]
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f000 f805 	bl	8010030 <ip4_output_if_src>
 8010026:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010028:	4618      	mov	r0, r3
 801002a:	3718      	adds	r7, #24
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	7b9b      	ldrb	r3, [r3, #14]
 8010042:	2b01      	cmp	r3, #1
 8010044:	d006      	beq.n	8010054 <ip4_output_if_src+0x24>
 8010046:	4b4b      	ldr	r3, [pc, #300]	; (8010174 <ip4_output_if_src+0x144>)
 8010048:	f44f 7255 	mov.w	r2, #852	; 0x354
 801004c:	494a      	ldr	r1, [pc, #296]	; (8010178 <ip4_output_if_src+0x148>)
 801004e:	484b      	ldr	r0, [pc, #300]	; (801017c <ip4_output_if_src+0x14c>)
 8010050:	f001 fece 	bl	8011df0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d060      	beq.n	801011c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801005a:	2314      	movs	r3, #20
 801005c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801005e:	2114      	movs	r1, #20
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f7f8 fc39 	bl	80088d8 <pbuf_add_header>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801006c:	f06f 0301 	mvn.w	r3, #1
 8010070:	e07c      	b.n	801016c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	895b      	ldrh	r3, [r3, #10]
 801007c:	2b13      	cmp	r3, #19
 801007e:	d806      	bhi.n	801008e <ip4_output_if_src+0x5e>
 8010080:	4b3c      	ldr	r3, [pc, #240]	; (8010174 <ip4_output_if_src+0x144>)
 8010082:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010086:	493e      	ldr	r1, [pc, #248]	; (8010180 <ip4_output_if_src+0x150>)
 8010088:	483c      	ldr	r0, [pc, #240]	; (801017c <ip4_output_if_src+0x14c>)
 801008a:	f001 feb1 	bl	8011df0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	78fa      	ldrb	r2, [r7, #3]
 8010092:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801009a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80100a4:	8b7b      	ldrh	r3, [r7, #26]
 80100a6:	089b      	lsrs	r3, r3, #2
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100b0:	b2da      	uxtb	r2, r3
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80100bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	891b      	ldrh	r3, [r3, #8]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7f7 f940 	bl	8007348 <lwip_htons>
 80100c8:	4603      	mov	r3, r0
 80100ca:	461a      	mov	r2, r3
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	2200      	movs	r2, #0
 80100d4:	719a      	strb	r2, [r3, #6]
 80100d6:	2200      	movs	r2, #0
 80100d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80100da:	4b2a      	ldr	r3, [pc, #168]	; (8010184 <ip4_output_if_src+0x154>)
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7f7 f932 	bl	8007348 <lwip_htons>
 80100e4:	4603      	mov	r3, r0
 80100e6:	461a      	mov	r2, r3
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80100ec:	4b25      	ldr	r3, [pc, #148]	; (8010184 <ip4_output_if_src+0x154>)
 80100ee:	881b      	ldrh	r3, [r3, #0]
 80100f0:	3301      	adds	r3, #1
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	4b23      	ldr	r3, [pc, #140]	; (8010184 <ip4_output_if_src+0x154>)
 80100f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d104      	bne.n	8010108 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80100fe:	4b22      	ldr	r3, [pc, #136]	; (8010188 <ip4_output_if_src+0x158>)
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	60da      	str	r2, [r3, #12]
 8010106:	e003      	b.n	8010110 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	2200      	movs	r2, #0
 8010114:	729a      	strb	r2, [r3, #10]
 8010116:	2200      	movs	r2, #0
 8010118:	72da      	strb	r2, [r3, #11]
 801011a:	e00f      	b.n	801013c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	895b      	ldrh	r3, [r3, #10]
 8010120:	2b13      	cmp	r3, #19
 8010122:	d802      	bhi.n	801012a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010124:	f06f 0301 	mvn.w	r3, #1
 8010128:	e020      	b.n	801016c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010136:	f107 0314 	add.w	r3, r7, #20
 801013a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00c      	beq.n	801015e <ip4_output_if_src+0x12e>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	891a      	ldrh	r2, [r3, #8]
 8010148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801014c:	429a      	cmp	r2, r3
 801014e:	d906      	bls.n	801015e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010154:	68f8      	ldr	r0, [r7, #12]
 8010156:	f000 fd53 	bl	8010c00 <ip4_frag>
 801015a:	4603      	mov	r3, r0
 801015c:	e006      	b.n	801016c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801015e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010160:	695b      	ldr	r3, [r3, #20]
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	68f9      	ldr	r1, [r7, #12]
 8010166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010168:	4798      	blx	r3
 801016a:	4603      	mov	r3, r0
}
 801016c:	4618      	mov	r0, r3
 801016e:	3720      	adds	r7, #32
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	08016468 	.word	0x08016468
 8010178:	0801649c 	.word	0x0801649c
 801017c:	080164a8 	.word	0x080164a8
 8010180:	080164d0 	.word	0x080164d0
 8010184:	2000a922 	.word	0x2000a922
 8010188:	080168b4 	.word	0x080168b4

0801018c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801018c:	b480      	push	{r7}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101a0:	d002      	beq.n	80101a8 <ip4_addr_isbroadcast_u32+0x1c>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80101a8:	2301      	movs	r3, #1
 80101aa:	e02a      	b.n	8010202 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80101b2:	f003 0302 	and.w	r3, r3, #2
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	e021      	b.n	8010202 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	3304      	adds	r3, #4
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d101      	bne.n	80101ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80101ca:	2300      	movs	r3, #0
 80101cc:	e019      	b.n	8010202 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	3304      	adds	r3, #4
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	405a      	eors	r2, r3
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	3308      	adds	r3, #8
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4013      	ands	r3, r2
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10d      	bne.n	8010200 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	3308      	adds	r3, #8
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	43da      	mvns	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	3308      	adds	r3, #8
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d101      	bne.n	8010200 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80101fc:	2301      	movs	r3, #1
 80101fe:	e000      	b.n	8010202 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010200:	2300      	movs	r3, #0
  }
}
 8010202:	4618      	mov	r0, r3
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr
	...

08010210 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010216:	2300      	movs	r3, #0
 8010218:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801021a:	4b12      	ldr	r3, [pc, #72]	; (8010264 <ip_reass_tmr+0x54>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010220:	e018      	b.n	8010254 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	7fdb      	ldrb	r3, [r3, #31]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d00b      	beq.n	8010242 <ip_reass_tmr+0x32>
      r->timer--;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	7fdb      	ldrb	r3, [r3, #31]
 801022e:	3b01      	subs	r3, #1
 8010230:	b2da      	uxtb	r2, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	e008      	b.n	8010254 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801024c:	68b9      	ldr	r1, [r7, #8]
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 f80a 	bl	8010268 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1e3      	bne.n	8010222 <ip_reass_tmr+0x12>
    }
  }
}
 801025a:	bf00      	nop
 801025c:	bf00      	nop
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	2000a924 	.word	0x2000a924

08010268 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010272:	2300      	movs	r3, #0
 8010274:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010276:	683a      	ldr	r2, [r7, #0]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	429a      	cmp	r2, r3
 801027c:	d105      	bne.n	801028a <ip_reass_free_complete_datagram+0x22>
 801027e:	4b45      	ldr	r3, [pc, #276]	; (8010394 <ip_reass_free_complete_datagram+0x12c>)
 8010280:	22ab      	movs	r2, #171	; 0xab
 8010282:	4945      	ldr	r1, [pc, #276]	; (8010398 <ip_reass_free_complete_datagram+0x130>)
 8010284:	4845      	ldr	r0, [pc, #276]	; (801039c <ip_reass_free_complete_datagram+0x134>)
 8010286:	f001 fdb3 	bl	8011df0 <iprintf>
  if (prev != NULL) {
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00a      	beq.n	80102a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	429a      	cmp	r2, r3
 8010298:	d005      	beq.n	80102a6 <ip_reass_free_complete_datagram+0x3e>
 801029a:	4b3e      	ldr	r3, [pc, #248]	; (8010394 <ip_reass_free_complete_datagram+0x12c>)
 801029c:	22ad      	movs	r2, #173	; 0xad
 801029e:	4940      	ldr	r1, [pc, #256]	; (80103a0 <ip_reass_free_complete_datagram+0x138>)
 80102a0:	483e      	ldr	r0, [pc, #248]	; (801039c <ip_reass_free_complete_datagram+0x134>)
 80102a2:	f001 fda5 	bl	8011df0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	889b      	ldrh	r3, [r3, #4]
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d12a      	bne.n	801030e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	6858      	ldr	r0, [r3, #4]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	3308      	adds	r3, #8
 80102ce:	2214      	movs	r2, #20
 80102d0:	4619      	mov	r1, r3
 80102d2:	f001 feee 	bl	80120b2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80102d6:	2101      	movs	r1, #1
 80102d8:	69b8      	ldr	r0, [r7, #24]
 80102da:	f7ff fc47 	bl	800fb6c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80102de:	69b8      	ldr	r0, [r7, #24]
 80102e0:	f7f8 fc18 	bl	8008b14 <pbuf_clen>
 80102e4:	4603      	mov	r3, r0
 80102e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80102e8:	8bfa      	ldrh	r2, [r7, #30]
 80102ea:	8a7b      	ldrh	r3, [r7, #18]
 80102ec:	4413      	add	r3, r2
 80102ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102f2:	db05      	blt.n	8010300 <ip_reass_free_complete_datagram+0x98>
 80102f4:	4b27      	ldr	r3, [pc, #156]	; (8010394 <ip_reass_free_complete_datagram+0x12c>)
 80102f6:	22bc      	movs	r2, #188	; 0xbc
 80102f8:	492a      	ldr	r1, [pc, #168]	; (80103a4 <ip_reass_free_complete_datagram+0x13c>)
 80102fa:	4828      	ldr	r0, [pc, #160]	; (801039c <ip_reass_free_complete_datagram+0x134>)
 80102fc:	f001 fd78 	bl	8011df0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010300:	8bfa      	ldrh	r2, [r7, #30]
 8010302:	8a7b      	ldrh	r3, [r7, #18]
 8010304:	4413      	add	r3, r2
 8010306:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010308:	69b8      	ldr	r0, [r7, #24]
 801030a:	f7f8 fb7b 	bl	8008a04 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010314:	e01f      	b.n	8010356 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f7f8 fbf4 	bl	8008b14 <pbuf_clen>
 801032c:	4603      	mov	r3, r0
 801032e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010330:	8bfa      	ldrh	r2, [r7, #30]
 8010332:	8a7b      	ldrh	r3, [r7, #18]
 8010334:	4413      	add	r3, r2
 8010336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801033a:	db05      	blt.n	8010348 <ip_reass_free_complete_datagram+0xe0>
 801033c:	4b15      	ldr	r3, [pc, #84]	; (8010394 <ip_reass_free_complete_datagram+0x12c>)
 801033e:	22cc      	movs	r2, #204	; 0xcc
 8010340:	4918      	ldr	r1, [pc, #96]	; (80103a4 <ip_reass_free_complete_datagram+0x13c>)
 8010342:	4816      	ldr	r0, [pc, #88]	; (801039c <ip_reass_free_complete_datagram+0x134>)
 8010344:	f001 fd54 	bl	8011df0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010348:	8bfa      	ldrh	r2, [r7, #30]
 801034a:	8a7b      	ldrh	r3, [r7, #18]
 801034c:	4413      	add	r3, r2
 801034e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f7f8 fb57 	bl	8008a04 <pbuf_free>
  while (p != NULL) {
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1dc      	bne.n	8010316 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801035c:	6839      	ldr	r1, [r7, #0]
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 f8c2 	bl	80104e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010364:	4b10      	ldr	r3, [pc, #64]	; (80103a8 <ip_reass_free_complete_datagram+0x140>)
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	8bfa      	ldrh	r2, [r7, #30]
 801036a:	429a      	cmp	r2, r3
 801036c:	d905      	bls.n	801037a <ip_reass_free_complete_datagram+0x112>
 801036e:	4b09      	ldr	r3, [pc, #36]	; (8010394 <ip_reass_free_complete_datagram+0x12c>)
 8010370:	22d2      	movs	r2, #210	; 0xd2
 8010372:	490e      	ldr	r1, [pc, #56]	; (80103ac <ip_reass_free_complete_datagram+0x144>)
 8010374:	4809      	ldr	r0, [pc, #36]	; (801039c <ip_reass_free_complete_datagram+0x134>)
 8010376:	f001 fd3b 	bl	8011df0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801037a:	4b0b      	ldr	r3, [pc, #44]	; (80103a8 <ip_reass_free_complete_datagram+0x140>)
 801037c:	881a      	ldrh	r2, [r3, #0]
 801037e:	8bfb      	ldrh	r3, [r7, #30]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	b29a      	uxth	r2, r3
 8010384:	4b08      	ldr	r3, [pc, #32]	; (80103a8 <ip_reass_free_complete_datagram+0x140>)
 8010386:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010388:	8bfb      	ldrh	r3, [r7, #30]
}
 801038a:	4618      	mov	r0, r3
 801038c:	3720      	adds	r7, #32
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	08016500 	.word	0x08016500
 8010398:	0801653c 	.word	0x0801653c
 801039c:	08016548 	.word	0x08016548
 80103a0:	08016570 	.word	0x08016570
 80103a4:	08016584 	.word	0x08016584
 80103a8:	2000a928 	.word	0x2000a928
 80103ac:	080165a4 	.word	0x080165a4

080103b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b08a      	sub	sp, #40	; 0x28
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80103ba:	2300      	movs	r3, #0
 80103bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80103be:	2300      	movs	r3, #0
 80103c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80103c2:	2300      	movs	r3, #0
 80103c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80103c6:	2300      	movs	r3, #0
 80103c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80103ce:	4b28      	ldr	r3, [pc, #160]	; (8010470 <ip_reass_remove_oldest_datagram+0xc0>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80103d4:	e030      	b.n	8010438 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80103d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d8:	695a      	ldr	r2, [r3, #20]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d10c      	bne.n	80103fc <ip_reass_remove_oldest_datagram+0x4c>
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e4:	699a      	ldr	r2, [r3, #24]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d106      	bne.n	80103fc <ip_reass_remove_oldest_datagram+0x4c>
 80103ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f0:	899a      	ldrh	r2, [r3, #12]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	889b      	ldrh	r3, [r3, #4]
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d014      	beq.n	8010426 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	3301      	adds	r3, #1
 8010400:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010402:	6a3b      	ldr	r3, [r7, #32]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d104      	bne.n	8010412 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	61bb      	str	r3, [r7, #24]
 8010410:	e009      	b.n	8010426 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010414:	7fda      	ldrb	r2, [r3, #31]
 8010416:	6a3b      	ldr	r3, [r7, #32]
 8010418:	7fdb      	ldrb	r3, [r3, #31]
 801041a:	429a      	cmp	r2, r3
 801041c:	d803      	bhi.n	8010426 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010420:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d001      	beq.n	8010432 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010430:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1cb      	bne.n	80103d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801043e:	6a3b      	ldr	r3, [r7, #32]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d008      	beq.n	8010456 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010444:	69b9      	ldr	r1, [r7, #24]
 8010446:	6a38      	ldr	r0, [r7, #32]
 8010448:	f7ff ff0e 	bl	8010268 <ip_reass_free_complete_datagram>
 801044c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801044e:	697a      	ldr	r2, [r7, #20]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	4413      	add	r3, r2
 8010454:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010456:	697a      	ldr	r2, [r7, #20]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	429a      	cmp	r2, r3
 801045c:	da02      	bge.n	8010464 <ip_reass_remove_oldest_datagram+0xb4>
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	2b01      	cmp	r3, #1
 8010462:	dcac      	bgt.n	80103be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010464:	697b      	ldr	r3, [r7, #20]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3728      	adds	r7, #40	; 0x28
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	2000a924 	.word	0x2000a924

08010474 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801047e:	2004      	movs	r0, #4
 8010480:	f7f7 fbda 	bl	8007c38 <memp_malloc>
 8010484:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d110      	bne.n	80104ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801048c:	6839      	ldr	r1, [r7, #0]
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7ff ff8e 	bl	80103b0 <ip_reass_remove_oldest_datagram>
 8010494:	4602      	mov	r2, r0
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	4293      	cmp	r3, r2
 801049a:	dc03      	bgt.n	80104a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801049c:	2004      	movs	r0, #4
 801049e:	f7f7 fbcb 	bl	8007c38 <memp_malloc>
 80104a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80104aa:	2300      	movs	r3, #0
 80104ac:	e016      	b.n	80104dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80104ae:	2220      	movs	r2, #32
 80104b0:	2100      	movs	r1, #0
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f001 fd01 	bl	8011eba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	220f      	movs	r2, #15
 80104bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80104be:	4b09      	ldr	r3, [pc, #36]	; (80104e4 <ip_reass_enqueue_new_datagram+0x70>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80104c6:	4a07      	ldr	r2, [pc, #28]	; (80104e4 <ip_reass_enqueue_new_datagram+0x70>)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	3308      	adds	r3, #8
 80104d0:	2214      	movs	r2, #20
 80104d2:	6879      	ldr	r1, [r7, #4]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f001 fdec 	bl	80120b2 <memcpy>
  return ipr;
 80104da:	68fb      	ldr	r3, [r7, #12]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	2000a924 	.word	0x2000a924

080104e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80104f2:	4b10      	ldr	r3, [pc, #64]	; (8010534 <ip_reass_dequeue_datagram+0x4c>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d104      	bne.n	8010506 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a0c      	ldr	r2, [pc, #48]	; (8010534 <ip_reass_dequeue_datagram+0x4c>)
 8010502:	6013      	str	r3, [r2, #0]
 8010504:	e00d      	b.n	8010522 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d106      	bne.n	801051a <ip_reass_dequeue_datagram+0x32>
 801050c:	4b0a      	ldr	r3, [pc, #40]	; (8010538 <ip_reass_dequeue_datagram+0x50>)
 801050e:	f240 1245 	movw	r2, #325	; 0x145
 8010512:	490a      	ldr	r1, [pc, #40]	; (801053c <ip_reass_dequeue_datagram+0x54>)
 8010514:	480a      	ldr	r0, [pc, #40]	; (8010540 <ip_reass_dequeue_datagram+0x58>)
 8010516:	f001 fc6b 	bl	8011df0 <iprintf>
    prev->next = ipr->next;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010522:	6879      	ldr	r1, [r7, #4]
 8010524:	2004      	movs	r0, #4
 8010526:	f7f7 fbf7 	bl	8007d18 <memp_free>
}
 801052a:	bf00      	nop
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	2000a924 	.word	0x2000a924
 8010538:	08016500 	.word	0x08016500
 801053c:	080165c8 	.word	0x080165c8
 8010540:	08016548 	.word	0x08016548

08010544 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b08c      	sub	sp, #48	; 0x30
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010550:	2300      	movs	r3, #0
 8010552:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010554:	2301      	movs	r3, #1
 8010556:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	885b      	ldrh	r3, [r3, #2]
 8010562:	b29b      	uxth	r3, r3
 8010564:	4618      	mov	r0, r3
 8010566:	f7f6 feef 	bl	8007348 <lwip_htons>
 801056a:	4603      	mov	r3, r0
 801056c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	f003 030f 	and.w	r3, r3, #15
 8010576:	b2db      	uxtb	r3, r3
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801057c:	7e7b      	ldrb	r3, [r7, #25]
 801057e:	b29b      	uxth	r3, r3
 8010580:	8b7a      	ldrh	r2, [r7, #26]
 8010582:	429a      	cmp	r2, r3
 8010584:	d202      	bcs.n	801058c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801058a:	e135      	b.n	80107f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801058c:	7e7b      	ldrb	r3, [r7, #25]
 801058e:	b29b      	uxth	r3, r3
 8010590:	8b7a      	ldrh	r2, [r7, #26]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	88db      	ldrh	r3, [r3, #6]
 801059a:	b29b      	uxth	r3, r3
 801059c:	4618      	mov	r0, r3
 801059e:	f7f6 fed3 	bl	8007348 <lwip_htons>
 80105a2:	4603      	mov	r3, r0
 80105a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80105b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]
 80105ba:	2200      	movs	r2, #0
 80105bc:	705a      	strb	r2, [r3, #1]
 80105be:	2200      	movs	r2, #0
 80105c0:	709a      	strb	r2, [r3, #2]
 80105c2:	2200      	movs	r2, #0
 80105c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80105c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c8:	8afa      	ldrh	r2, [r7, #22]
 80105ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80105cc:	8afa      	ldrh	r2, [r7, #22]
 80105ce:	8b7b      	ldrh	r3, [r7, #26]
 80105d0:	4413      	add	r3, r2
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	88db      	ldrh	r3, [r3, #6]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	8afa      	ldrh	r2, [r7, #22]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d902      	bls.n	80105ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80105e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105e8:	e106      	b.n	80107f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	627b      	str	r3, [r7, #36]	; 0x24
 80105f0:	e068      	b.n	80106c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80105f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80105f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fa:	889b      	ldrh	r3, [r3, #4]
 80105fc:	b29a      	uxth	r2, r3
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	889b      	ldrh	r3, [r3, #4]
 8010602:	b29b      	uxth	r3, r3
 8010604:	429a      	cmp	r2, r3
 8010606:	d235      	bcs.n	8010674 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801060c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010610:	2b00      	cmp	r3, #0
 8010612:	d020      	beq.n	8010656 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010616:	889b      	ldrh	r3, [r3, #4]
 8010618:	b29a      	uxth	r2, r3
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	88db      	ldrh	r3, [r3, #6]
 801061e:	b29b      	uxth	r3, r3
 8010620:	429a      	cmp	r2, r3
 8010622:	d307      	bcc.n	8010634 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010626:	88db      	ldrh	r3, [r3, #6]
 8010628:	b29a      	uxth	r2, r3
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	889b      	ldrh	r3, [r3, #4]
 801062e:	b29b      	uxth	r3, r3
 8010630:	429a      	cmp	r2, r3
 8010632:	d902      	bls.n	801063a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010638:	e0de      	b.n	80107f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063c:	68ba      	ldr	r2, [r7, #8]
 801063e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010642:	88db      	ldrh	r3, [r3, #6]
 8010644:	b29a      	uxth	r2, r3
 8010646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010648:	889b      	ldrh	r3, [r3, #4]
 801064a:	b29b      	uxth	r3, r3
 801064c:	429a      	cmp	r2, r3
 801064e:	d03d      	beq.n	80106cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010650:	2300      	movs	r3, #0
 8010652:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010654:	e03a      	b.n	80106cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010658:	88db      	ldrh	r3, [r3, #6]
 801065a:	b29a      	uxth	r2, r3
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	889b      	ldrh	r3, [r3, #4]
 8010660:	b29b      	uxth	r3, r3
 8010662:	429a      	cmp	r2, r3
 8010664:	d902      	bls.n	801066c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801066a:	e0c5      	b.n	80107f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	605a      	str	r2, [r3, #4]
      break;
 8010672:	e02b      	b.n	80106cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010676:	889b      	ldrh	r3, [r3, #4]
 8010678:	b29a      	uxth	r2, r3
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	889b      	ldrh	r3, [r3, #4]
 801067e:	b29b      	uxth	r3, r3
 8010680:	429a      	cmp	r2, r3
 8010682:	d102      	bne.n	801068a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010688:	e0b6      	b.n	80107f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068c:	889b      	ldrh	r3, [r3, #4]
 801068e:	b29a      	uxth	r2, r3
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	88db      	ldrh	r3, [r3, #6]
 8010694:	b29b      	uxth	r3, r3
 8010696:	429a      	cmp	r2, r3
 8010698:	d202      	bcs.n	80106a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801069a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801069e:	e0ab      	b.n	80107f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80106a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d009      	beq.n	80106ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80106a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a8:	88db      	ldrh	r3, [r3, #6]
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	889b      	ldrh	r3, [r3, #4]
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d001      	beq.n	80106ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80106b6:	2300      	movs	r3, #0
 80106b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d193      	bne.n	80105f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80106ca:	e000      	b.n	80106ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80106cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d12d      	bne.n	8010730 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80106d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d01c      	beq.n	8010714 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	88db      	ldrh	r3, [r3, #6]
 80106de:	b29a      	uxth	r2, r3
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	889b      	ldrh	r3, [r3, #4]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d906      	bls.n	80106f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80106ea:	4b45      	ldr	r3, [pc, #276]	; (8010800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80106ec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80106f0:	4944      	ldr	r1, [pc, #272]	; (8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80106f2:	4845      	ldr	r0, [pc, #276]	; (8010808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80106f4:	f001 fb7c 	bl	8011df0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80106fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010700:	88db      	ldrh	r3, [r3, #6]
 8010702:	b29a      	uxth	r2, r3
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010706:	889b      	ldrh	r3, [r3, #4]
 8010708:	b29b      	uxth	r3, r3
 801070a:	429a      	cmp	r2, r3
 801070c:	d010      	beq.n	8010730 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	623b      	str	r3, [r7, #32]
 8010712:	e00d      	b.n	8010730 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d006      	beq.n	801072a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801071c:	4b38      	ldr	r3, [pc, #224]	; (8010800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801071e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010722:	493a      	ldr	r1, [pc, #232]	; (801080c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010724:	4838      	ldr	r0, [pc, #224]	; (8010808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010726:	f001 fb63 	bl	8011df0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d105      	bne.n	8010742 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	7f9b      	ldrb	r3, [r3, #30]
 801073a:	f003 0301 	and.w	r3, r3, #1
 801073e:	2b00      	cmp	r3, #0
 8010740:	d059      	beq.n	80107f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010742:	6a3b      	ldr	r3, [r7, #32]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d04f      	beq.n	80107e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d006      	beq.n	801075e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	889b      	ldrh	r3, [r3, #4]
 8010758:	b29b      	uxth	r3, r3
 801075a:	2b00      	cmp	r3, #0
 801075c:	d002      	beq.n	8010764 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	623b      	str	r3, [r7, #32]
 8010762:	e041      	b.n	80107e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010766:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801076e:	e012      	b.n	8010796 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010778:	88db      	ldrh	r3, [r3, #6]
 801077a:	b29a      	uxth	r2, r3
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	889b      	ldrh	r3, [r3, #4]
 8010780:	b29b      	uxth	r3, r3
 8010782:	429a      	cmp	r2, r3
 8010784:	d002      	beq.n	801078c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010786:	2300      	movs	r3, #0
 8010788:	623b      	str	r3, [r7, #32]
            break;
 801078a:	e007      	b.n	801079c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1e9      	bne.n	8010770 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801079c:	6a3b      	ldr	r3, [r7, #32]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d022      	beq.n	80107e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d106      	bne.n	80107b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80107aa:	4b15      	ldr	r3, [pc, #84]	; (8010800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80107ac:	f240 12df 	movw	r2, #479	; 0x1df
 80107b0:	4917      	ldr	r1, [pc, #92]	; (8010810 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80107b2:	4815      	ldr	r0, [pc, #84]	; (8010808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80107b4:	f001 fb1c 	bl	8011df0 <iprintf>
          LWIP_ASSERT("sanity check",
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d106      	bne.n	80107d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80107c4:	4b0e      	ldr	r3, [pc, #56]	; (8010800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80107c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80107ca:	4911      	ldr	r1, [pc, #68]	; (8010810 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80107cc:	480e      	ldr	r0, [pc, #56]	; (8010808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80107ce:	f001 fb0f 	bl	8011df0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80107d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d006      	beq.n	80107e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80107da:	4b09      	ldr	r3, [pc, #36]	; (8010800 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80107dc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80107e0:	490c      	ldr	r1, [pc, #48]	; (8010814 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80107e2:	4809      	ldr	r0, [pc, #36]	; (8010808 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80107e4:	f001 fb04 	bl	8011df0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	bf14      	ite	ne
 80107ee:	2301      	movne	r3, #1
 80107f0:	2300      	moveq	r3, #0
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	e000      	b.n	80107f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80107f6:	2300      	movs	r3, #0
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3730      	adds	r7, #48	; 0x30
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	08016500 	.word	0x08016500
 8010804:	080165e4 	.word	0x080165e4
 8010808:	08016548 	.word	0x08016548
 801080c:	08016604 	.word	0x08016604
 8010810:	0801663c 	.word	0x0801663c
 8010814:	0801664c 	.word	0x0801664c

08010818 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b08e      	sub	sp, #56	; 0x38
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	f003 030f 	and.w	r3, r3, #15
 801082e:	b2db      	uxtb	r3, r3
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	b2db      	uxtb	r3, r3
 8010834:	2b14      	cmp	r3, #20
 8010836:	f040 8171 	bne.w	8010b1c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	88db      	ldrh	r3, [r3, #6]
 801083e:	b29b      	uxth	r3, r3
 8010840:	4618      	mov	r0, r3
 8010842:	f7f6 fd81 	bl	8007348 <lwip_htons>
 8010846:	4603      	mov	r3, r0
 8010848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801084c:	b29b      	uxth	r3, r3
 801084e:	00db      	lsls	r3, r3, #3
 8010850:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010854:	885b      	ldrh	r3, [r3, #2]
 8010856:	b29b      	uxth	r3, r3
 8010858:	4618      	mov	r0, r3
 801085a:	f7f6 fd75 	bl	8007348 <lwip_htons>
 801085e:	4603      	mov	r3, r0
 8010860:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	f003 030f 	and.w	r3, r3, #15
 801086a:	b2db      	uxtb	r3, r3
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010876:	b29b      	uxth	r3, r3
 8010878:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801087a:	429a      	cmp	r2, r3
 801087c:	f0c0 8150 	bcc.w	8010b20 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010884:	b29b      	uxth	r3, r3
 8010886:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f7f8 f941 	bl	8008b14 <pbuf_clen>
 8010892:	4603      	mov	r3, r0
 8010894:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010896:	4b8c      	ldr	r3, [pc, #560]	; (8010ac8 <ip4_reass+0x2b0>)
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	8c3b      	ldrh	r3, [r7, #32]
 801089e:	4413      	add	r3, r2
 80108a0:	2b0a      	cmp	r3, #10
 80108a2:	dd10      	ble.n	80108c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80108a4:	8c3b      	ldrh	r3, [r7, #32]
 80108a6:	4619      	mov	r1, r3
 80108a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108aa:	f7ff fd81 	bl	80103b0 <ip_reass_remove_oldest_datagram>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 8137 	beq.w	8010b24 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80108b6:	4b84      	ldr	r3, [pc, #528]	; (8010ac8 <ip4_reass+0x2b0>)
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	461a      	mov	r2, r3
 80108bc:	8c3b      	ldrh	r3, [r7, #32]
 80108be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80108c0:	2b0a      	cmp	r3, #10
 80108c2:	f300 812f 	bgt.w	8010b24 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80108c6:	4b81      	ldr	r3, [pc, #516]	; (8010acc <ip4_reass+0x2b4>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	633b      	str	r3, [r7, #48]	; 0x30
 80108cc:	e015      	b.n	80108fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	695a      	ldr	r2, [r3, #20]
 80108d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d10c      	bne.n	80108f4 <ip4_reass+0xdc>
 80108da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108dc:	699a      	ldr	r2, [r3, #24]
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d106      	bne.n	80108f4 <ip4_reass+0xdc>
 80108e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e8:	899a      	ldrh	r2, [r3, #12]
 80108ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ec:	889b      	ldrh	r3, [r3, #4]
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d006      	beq.n	8010902 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80108f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	633b      	str	r3, [r7, #48]	; 0x30
 80108fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d1e6      	bne.n	80108ce <ip4_reass+0xb6>
 8010900:	e000      	b.n	8010904 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010902:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010906:	2b00      	cmp	r3, #0
 8010908:	d109      	bne.n	801091e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801090a:	8c3b      	ldrh	r3, [r7, #32]
 801090c:	4619      	mov	r1, r3
 801090e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010910:	f7ff fdb0 	bl	8010474 <ip_reass_enqueue_new_datagram>
 8010914:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010918:	2b00      	cmp	r3, #0
 801091a:	d11c      	bne.n	8010956 <ip4_reass+0x13e>
      goto nullreturn;
 801091c:	e105      	b.n	8010b2a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010920:	88db      	ldrh	r3, [r3, #6]
 8010922:	b29b      	uxth	r3, r3
 8010924:	4618      	mov	r0, r3
 8010926:	f7f6 fd0f 	bl	8007348 <lwip_htons>
 801092a:	4603      	mov	r3, r0
 801092c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010930:	2b00      	cmp	r3, #0
 8010932:	d110      	bne.n	8010956 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010936:	89db      	ldrh	r3, [r3, #14]
 8010938:	4618      	mov	r0, r3
 801093a:	f7f6 fd05 	bl	8007348 <lwip_htons>
 801093e:	4603      	mov	r3, r0
 8010940:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010944:	2b00      	cmp	r3, #0
 8010946:	d006      	beq.n	8010956 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	3308      	adds	r3, #8
 801094c:	2214      	movs	r2, #20
 801094e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010950:	4618      	mov	r0, r3
 8010952:	f001 fbae 	bl	80120b2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	88db      	ldrh	r3, [r3, #6]
 801095a:	b29b      	uxth	r3, r3
 801095c:	f003 0320 	and.w	r3, r3, #32
 8010960:	2b00      	cmp	r3, #0
 8010962:	bf0c      	ite	eq
 8010964:	2301      	moveq	r3, #1
 8010966:	2300      	movne	r3, #0
 8010968:	b2db      	uxtb	r3, r3
 801096a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00e      	beq.n	8010990 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010972:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010976:	4413      	add	r3, r2
 8010978:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801097a:	8b7a      	ldrh	r2, [r7, #26]
 801097c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801097e:	429a      	cmp	r2, r3
 8010980:	f0c0 80a0 	bcc.w	8010ac4 <ip4_reass+0x2ac>
 8010984:	8b7b      	ldrh	r3, [r7, #26]
 8010986:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801098a:	4293      	cmp	r3, r2
 801098c:	f200 809a 	bhi.w	8010ac4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010990:	69fa      	ldr	r2, [r7, #28]
 8010992:	6879      	ldr	r1, [r7, #4]
 8010994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010996:	f7ff fdd5 	bl	8010544 <ip_reass_chain_frag_into_datagram_and_validate>
 801099a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109a2:	f000 809b 	beq.w	8010adc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80109a6:	4b48      	ldr	r3, [pc, #288]	; (8010ac8 <ip4_reass+0x2b0>)
 80109a8:	881a      	ldrh	r2, [r3, #0]
 80109aa:	8c3b      	ldrh	r3, [r7, #32]
 80109ac:	4413      	add	r3, r2
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	4b45      	ldr	r3, [pc, #276]	; (8010ac8 <ip4_reass+0x2b0>)
 80109b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d00d      	beq.n	80109d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80109ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80109bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109be:	4413      	add	r3, r2
 80109c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	8a7a      	ldrh	r2, [r7, #18]
 80109c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80109c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ca:	7f9b      	ldrb	r3, [r3, #30]
 80109cc:	f043 0301 	orr.w	r3, r3, #1
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d171      	bne.n	8010ac0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80109dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109de:	8b9b      	ldrh	r3, [r3, #28]
 80109e0:	3314      	adds	r3, #20
 80109e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80109f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f8:	3308      	adds	r3, #8
 80109fa:	2214      	movs	r2, #20
 80109fc:	4619      	mov	r1, r3
 80109fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a00:	f001 fb57 	bl	80120b2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010a04:	8a3b      	ldrh	r3, [r7, #16]
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7f6 fc9e 	bl	8007348 <lwip_htons>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	461a      	mov	r2, r3
 8010a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a12:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	2200      	movs	r2, #0
 8010a18:	719a      	strb	r2, [r3, #6]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a20:	2200      	movs	r2, #0
 8010a22:	729a      	strb	r2, [r3, #10]
 8010a24:	2200      	movs	r2, #0
 8010a26:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010a2e:	e00d      	b.n	8010a4c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010a36:	2114      	movs	r1, #20
 8010a38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a3a:	f7f7 ff5d 	bl	80088f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010a3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7f8 f8a1 	bl	8008b88 <pbuf_cat>
      r = iprh->next_pbuf;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1ee      	bne.n	8010a30 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010a52:	4b1e      	ldr	r3, [pc, #120]	; (8010acc <ip4_reass+0x2b4>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d102      	bne.n	8010a62 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a60:	e010      	b.n	8010a84 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010a62:	4b1a      	ldr	r3, [pc, #104]	; (8010acc <ip4_reass+0x2b4>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a68:	e007      	b.n	8010a7a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d006      	beq.n	8010a82 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d1f4      	bne.n	8010a6a <ip4_reass+0x252>
 8010a80:	e000      	b.n	8010a84 <ip4_reass+0x26c>
          break;
 8010a82:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a88:	f7ff fd2e 	bl	80104e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7f8 f841 	bl	8008b14 <pbuf_clen>
 8010a92:	4603      	mov	r3, r0
 8010a94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010a96:	4b0c      	ldr	r3, [pc, #48]	; (8010ac8 <ip4_reass+0x2b0>)
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	8c3a      	ldrh	r2, [r7, #32]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d906      	bls.n	8010aae <ip4_reass+0x296>
 8010aa0:	4b0b      	ldr	r3, [pc, #44]	; (8010ad0 <ip4_reass+0x2b8>)
 8010aa2:	f240 229b 	movw	r2, #667	; 0x29b
 8010aa6:	490b      	ldr	r1, [pc, #44]	; (8010ad4 <ip4_reass+0x2bc>)
 8010aa8:	480b      	ldr	r0, [pc, #44]	; (8010ad8 <ip4_reass+0x2c0>)
 8010aaa:	f001 f9a1 	bl	8011df0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010aae:	4b06      	ldr	r3, [pc, #24]	; (8010ac8 <ip4_reass+0x2b0>)
 8010ab0:	881a      	ldrh	r2, [r3, #0]
 8010ab2:	8c3b      	ldrh	r3, [r7, #32]
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	4b03      	ldr	r3, [pc, #12]	; (8010ac8 <ip4_reass+0x2b0>)
 8010aba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	e038      	b.n	8010b32 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e036      	b.n	8010b32 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010ac4:	bf00      	nop
 8010ac6:	e00a      	b.n	8010ade <ip4_reass+0x2c6>
 8010ac8:	2000a928 	.word	0x2000a928
 8010acc:	2000a924 	.word	0x2000a924
 8010ad0:	08016500 	.word	0x08016500
 8010ad4:	08016670 	.word	0x08016670
 8010ad8:	08016548 	.word	0x08016548
    goto nullreturn_ipr;
 8010adc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d106      	bne.n	8010af2 <ip4_reass+0x2da>
 8010ae4:	4b15      	ldr	r3, [pc, #84]	; (8010b3c <ip4_reass+0x324>)
 8010ae6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010aea:	4915      	ldr	r1, [pc, #84]	; (8010b40 <ip4_reass+0x328>)
 8010aec:	4815      	ldr	r0, [pc, #84]	; (8010b44 <ip4_reass+0x32c>)
 8010aee:	f001 f97f 	bl	8011df0 <iprintf>
  if (ipr->p == NULL) {
 8010af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d116      	bne.n	8010b28 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010afa:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <ip4_reass+0x330>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d006      	beq.n	8010b12 <ip4_reass+0x2fa>
 8010b04:	4b0d      	ldr	r3, [pc, #52]	; (8010b3c <ip4_reass+0x324>)
 8010b06:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010b0a:	4910      	ldr	r1, [pc, #64]	; (8010b4c <ip4_reass+0x334>)
 8010b0c:	480d      	ldr	r0, [pc, #52]	; (8010b44 <ip4_reass+0x32c>)
 8010b0e:	f001 f96f 	bl	8011df0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010b12:	2100      	movs	r1, #0
 8010b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b16:	f7ff fce7 	bl	80104e8 <ip_reass_dequeue_datagram>
 8010b1a:	e006      	b.n	8010b2a <ip4_reass+0x312>
    goto nullreturn;
 8010b1c:	bf00      	nop
 8010b1e:	e004      	b.n	8010b2a <ip4_reass+0x312>
    goto nullreturn;
 8010b20:	bf00      	nop
 8010b22:	e002      	b.n	8010b2a <ip4_reass+0x312>
      goto nullreturn;
 8010b24:	bf00      	nop
 8010b26:	e000      	b.n	8010b2a <ip4_reass+0x312>
  }

nullreturn:
 8010b28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7f7 ff6a 	bl	8008a04 <pbuf_free>
  return NULL;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3738      	adds	r7, #56	; 0x38
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	08016500 	.word	0x08016500
 8010b40:	0801668c 	.word	0x0801668c
 8010b44:	08016548 	.word	0x08016548
 8010b48:	2000a924 	.word	0x2000a924
 8010b4c:	08016698 	.word	0x08016698

08010b50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010b54:	2005      	movs	r0, #5
 8010b56:	f7f7 f86f 	bl	8007c38 <memp_malloc>
 8010b5a:	4603      	mov	r3, r0
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d106      	bne.n	8010b7c <ip_frag_free_pbuf_custom_ref+0x1c>
 8010b6e:	4b07      	ldr	r3, [pc, #28]	; (8010b8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010b70:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010b74:	4906      	ldr	r1, [pc, #24]	; (8010b90 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010b76:	4807      	ldr	r0, [pc, #28]	; (8010b94 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010b78:	f001 f93a 	bl	8011df0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010b7c:	6879      	ldr	r1, [r7, #4]
 8010b7e:	2005      	movs	r0, #5
 8010b80:	f7f7 f8ca 	bl	8007d18 <memp_free>
}
 8010b84:	bf00      	nop
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	08016500 	.word	0x08016500
 8010b90:	080166b8 	.word	0x080166b8
 8010b94:	08016548 	.word	0x08016548

08010b98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d106      	bne.n	8010bb8 <ipfrag_free_pbuf_custom+0x20>
 8010baa:	4b11      	ldr	r3, [pc, #68]	; (8010bf0 <ipfrag_free_pbuf_custom+0x58>)
 8010bac:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010bb0:	4910      	ldr	r1, [pc, #64]	; (8010bf4 <ipfrag_free_pbuf_custom+0x5c>)
 8010bb2:	4811      	ldr	r0, [pc, #68]	; (8010bf8 <ipfrag_free_pbuf_custom+0x60>)
 8010bb4:	f001 f91c 	bl	8011df0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d006      	beq.n	8010bce <ipfrag_free_pbuf_custom+0x36>
 8010bc0:	4b0b      	ldr	r3, [pc, #44]	; (8010bf0 <ipfrag_free_pbuf_custom+0x58>)
 8010bc2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010bc6:	490d      	ldr	r1, [pc, #52]	; (8010bfc <ipfrag_free_pbuf_custom+0x64>)
 8010bc8:	480b      	ldr	r0, [pc, #44]	; (8010bf8 <ipfrag_free_pbuf_custom+0x60>)
 8010bca:	f001 f911 	bl	8011df0 <iprintf>
  if (pcr->original != NULL) {
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	695b      	ldr	r3, [r3, #20]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d004      	beq.n	8010be0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	695b      	ldr	r3, [r3, #20]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7f7 ff12 	bl	8008a04 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f7ff ffbd 	bl	8010b60 <ip_frag_free_pbuf_custom_ref>
}
 8010be6:	bf00      	nop
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	08016500 	.word	0x08016500
 8010bf4:	080166c4 	.word	0x080166c4
 8010bf8:	08016548 	.word	0x08016548
 8010bfc:	080166d0 	.word	0x080166d0

08010c00 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b094      	sub	sp, #80	; 0x50
 8010c04:	af02      	add	r7, sp, #8
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c16:	3b14      	subs	r3, #20
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da00      	bge.n	8010c1e <ip4_frag+0x1e>
 8010c1c:	3307      	adds	r3, #7
 8010c1e:	10db      	asrs	r3, r3, #3
 8010c20:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010c22:	2314      	movs	r3, #20
 8010c24:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	f003 030f 	and.w	r3, r3, #15
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	2b14      	cmp	r3, #20
 8010c40:	d002      	beq.n	8010c48 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010c42:	f06f 0305 	mvn.w	r3, #5
 8010c46:	e110      	b.n	8010e6a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	895b      	ldrh	r3, [r3, #10]
 8010c4c:	2b13      	cmp	r3, #19
 8010c4e:	d809      	bhi.n	8010c64 <ip4_frag+0x64>
 8010c50:	4b88      	ldr	r3, [pc, #544]	; (8010e74 <ip4_frag+0x274>)
 8010c52:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010c56:	4988      	ldr	r1, [pc, #544]	; (8010e78 <ip4_frag+0x278>)
 8010c58:	4888      	ldr	r0, [pc, #544]	; (8010e7c <ip4_frag+0x27c>)
 8010c5a:	f001 f8c9 	bl	8011df0 <iprintf>
 8010c5e:	f06f 0305 	mvn.w	r3, #5
 8010c62:	e102      	b.n	8010e6a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	88db      	ldrh	r3, [r3, #6]
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7f6 fb6c 	bl	8007348 <lwip_htons>
 8010c70:	4603      	mov	r3, r0
 8010c72:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010c74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010c7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010c84:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	891b      	ldrh	r3, [r3, #8]
 8010c8a:	3b14      	subs	r3, #20
 8010c8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010c90:	e0e1      	b.n	8010e56 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010c92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c94:	00db      	lsls	r3, r3, #3
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	bf28      	it	cs
 8010ca0:	4613      	movcs	r3, r2
 8010ca2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010ca4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ca8:	2114      	movs	r1, #20
 8010caa:	200e      	movs	r0, #14
 8010cac:	f7f7 fbc6 	bl	800843c <pbuf_alloc>
 8010cb0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f000 80d5 	beq.w	8010e64 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	895b      	ldrh	r3, [r3, #10]
 8010cbe:	2b13      	cmp	r3, #19
 8010cc0:	d806      	bhi.n	8010cd0 <ip4_frag+0xd0>
 8010cc2:	4b6c      	ldr	r3, [pc, #432]	; (8010e74 <ip4_frag+0x274>)
 8010cc4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010cc8:	496d      	ldr	r1, [pc, #436]	; (8010e80 <ip4_frag+0x280>)
 8010cca:	486c      	ldr	r0, [pc, #432]	; (8010e7c <ip4_frag+0x27c>)
 8010ccc:	f001 f890 	bl	8011df0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	2214      	movs	r2, #20
 8010cd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f001 f9ea 	bl	80120b2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010ce4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ce6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010cea:	e064      	b.n	8010db6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	895a      	ldrh	r2, [r3, #10]
 8010cf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010cf2:	1ad3      	subs	r3, r2, r3
 8010cf4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	895b      	ldrh	r3, [r3, #10]
 8010cfa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d906      	bls.n	8010d0e <ip4_frag+0x10e>
 8010d00:	4b5c      	ldr	r3, [pc, #368]	; (8010e74 <ip4_frag+0x274>)
 8010d02:	f240 322d 	movw	r2, #813	; 0x32d
 8010d06:	495f      	ldr	r1, [pc, #380]	; (8010e84 <ip4_frag+0x284>)
 8010d08:	485c      	ldr	r0, [pc, #368]	; (8010e7c <ip4_frag+0x27c>)
 8010d0a:	f001 f871 	bl	8011df0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010d0e:	8bfa      	ldrh	r2, [r7, #30]
 8010d10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d14:	4293      	cmp	r3, r2
 8010d16:	bf28      	it	cs
 8010d18:	4613      	movcs	r3, r2
 8010d1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010d1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d105      	bne.n	8010d32 <ip4_frag+0x132>
        poff = 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	60fb      	str	r3, [r7, #12]
        continue;
 8010d30:	e041      	b.n	8010db6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010d32:	f7ff ff0d 	bl	8010b50 <ip_frag_alloc_pbuf_custom_ref>
 8010d36:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d103      	bne.n	8010d46 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d40:	f7f7 fe60 	bl	8008a04 <pbuf_free>
        goto memerr;
 8010d44:	e08f      	b.n	8010e66 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010d46:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010d4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d4e:	4413      	add	r3, r2
 8010d50:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010d54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010d58:	9201      	str	r2, [sp, #4]
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2241      	movs	r2, #65	; 0x41
 8010d60:	2000      	movs	r0, #0
 8010d62:	f7f7 fc95 	bl	8008690 <pbuf_alloced_custom>
 8010d66:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d106      	bne.n	8010d7c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010d6e:	69b8      	ldr	r0, [r7, #24]
 8010d70:	f7ff fef6 	bl	8010b60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d76:	f7f7 fe45 	bl	8008a04 <pbuf_free>
        goto memerr;
 8010d7a:	e074      	b.n	8010e66 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7f7 fee1 	bl	8008b44 <pbuf_ref>
      pcr->original = p;
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	4a3f      	ldr	r2, [pc, #252]	; (8010e88 <ip4_frag+0x288>)
 8010d8c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010d8e:	6979      	ldr	r1, [r7, #20]
 8010d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d92:	f7f7 fef9 	bl	8008b88 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010d96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010d9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010da4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d004      	beq.n	8010db6 <ip4_frag+0x1b6>
        poff = 0;
 8010dac:	2300      	movs	r3, #0
 8010dae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010db6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d196      	bne.n	8010cec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010dbe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010dc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010dc4:	4413      	add	r3, r2
 8010dc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010dcc:	f1a3 0213 	sub.w	r2, r3, #19
 8010dd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	bfcc      	ite	gt
 8010dd8:	2301      	movgt	r3, #1
 8010dda:	2300      	movle	r3, #0
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010de0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010de8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010dea:	6a3b      	ldr	r3, [r7, #32]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <ip4_frag+0x1f6>
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d003      	beq.n	8010dfe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010df6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010dfc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010dfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f6 faa1 	bl	8007348 <lwip_htons>
 8010e06:	4603      	mov	r3, r0
 8010e08:	461a      	mov	r2, r3
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010e0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010e10:	3314      	adds	r3, #20
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7f6 fa97 	bl	8007348 <lwip_htons>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e20:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e24:	2200      	movs	r2, #0
 8010e26:	729a      	strb	r2, [r3, #10]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	695b      	ldr	r3, [r3, #20]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e34:	68b8      	ldr	r0, [r7, #8]
 8010e36:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e3a:	f7f7 fde3 	bl	8008a04 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010e3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010e44:	1ad3      	subs	r3, r2, r3
 8010e46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010e4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010e4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e50:	4413      	add	r3, r2
 8010e52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010e56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f47f af19 	bne.w	8010c92 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	e002      	b.n	8010e6a <ip4_frag+0x26a>
      goto memerr;
 8010e64:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3748      	adds	r7, #72	; 0x48
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	08016500 	.word	0x08016500
 8010e78:	080166dc 	.word	0x080166dc
 8010e7c:	08016548 	.word	0x08016548
 8010e80:	080166f8 	.word	0x080166f8
 8010e84:	08016718 	.word	0x08016718
 8010e88:	08010b99 	.word	0x08010b99

08010e8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010e96:	230e      	movs	r3, #14
 8010e98:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	895b      	ldrh	r3, [r3, #10]
 8010e9e:	2b0e      	cmp	r3, #14
 8010ea0:	d96e      	bls.n	8010f80 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	7bdb      	ldrb	r3, [r3, #15]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d106      	bne.n	8010eb8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	b2da      	uxtb	r2, r3
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	7b1a      	ldrb	r2, [r3, #12]
 8010ec2:	7b5b      	ldrb	r3, [r3, #13]
 8010ec4:	021b      	lsls	r3, r3, #8
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d023      	beq.n	8010f1e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d10f      	bne.n	8010efe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	785b      	ldrb	r3, [r3, #1]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d11b      	bne.n	8010f1e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010eea:	2b5e      	cmp	r3, #94	; 0x5e
 8010eec:	d117      	bne.n	8010f1e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	7b5b      	ldrb	r3, [r3, #13]
 8010ef2:	f043 0310 	orr.w	r3, r3, #16
 8010ef6:	b2da      	uxtb	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	735a      	strb	r2, [r3, #13]
 8010efc:	e00f      	b.n	8010f1e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	2206      	movs	r2, #6
 8010f02:	4928      	ldr	r1, [pc, #160]	; (8010fa4 <ethernet_input+0x118>)
 8010f04:	4618      	mov	r0, r3
 8010f06:	f000 ffc8 	bl	8011e9a <memcmp>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d106      	bne.n	8010f1e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	7b5b      	ldrb	r3, [r3, #13]
 8010f14:	f043 0308 	orr.w	r3, r3, #8
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010f1e:	89fb      	ldrh	r3, [r7, #14]
 8010f20:	2b08      	cmp	r3, #8
 8010f22:	d003      	beq.n	8010f2c <ethernet_input+0xa0>
 8010f24:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010f28:	d014      	beq.n	8010f54 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010f2a:	e032      	b.n	8010f92 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f32:	f003 0308 	and.w	r3, r3, #8
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d024      	beq.n	8010f84 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010f3a:	8afb      	ldrh	r3, [r7, #22]
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7f7 fcda 	bl	80088f8 <pbuf_remove_header>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d11e      	bne.n	8010f88 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010f4a:	6839      	ldr	r1, [r7, #0]
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7fe ff21 	bl	800fd94 <ip4_input>
      break;
 8010f52:	e013      	b.n	8010f7c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f5a:	f003 0308 	and.w	r3, r3, #8
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d014      	beq.n	8010f8c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010f62:	8afb      	ldrh	r3, [r7, #22]
 8010f64:	4619      	mov	r1, r3
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f7f7 fcc6 	bl	80088f8 <pbuf_remove_header>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d10e      	bne.n	8010f90 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010f72:	6839      	ldr	r1, [r7, #0]
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7fe f8c1 	bl	800f0fc <etharp_input>
      break;
 8010f7a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	e00c      	b.n	8010f9a <ethernet_input+0x10e>
    goto free_and_return;
 8010f80:	bf00      	nop
 8010f82:	e006      	b.n	8010f92 <ethernet_input+0x106>
        goto free_and_return;
 8010f84:	bf00      	nop
 8010f86:	e004      	b.n	8010f92 <ethernet_input+0x106>
        goto free_and_return;
 8010f88:	bf00      	nop
 8010f8a:	e002      	b.n	8010f92 <ethernet_input+0x106>
        goto free_and_return;
 8010f8c:	bf00      	nop
 8010f8e:	e000      	b.n	8010f92 <ethernet_input+0x106>
        goto free_and_return;
 8010f90:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7f7 fd36 	bl	8008a04 <pbuf_free>
  return ERR_OK;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3718      	adds	r7, #24
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	080168b8 	.word	0x080168b8

08010fa8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b086      	sub	sp, #24
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	607a      	str	r2, [r7, #4]
 8010fb4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010fb6:	8c3b      	ldrh	r3, [r7, #32]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7f6 f9c5 	bl	8007348 <lwip_htons>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010fc2:	210e      	movs	r1, #14
 8010fc4:	68b8      	ldr	r0, [r7, #8]
 8010fc6:	f7f7 fc87 	bl	80088d8 <pbuf_add_header>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d125      	bne.n	801101c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	8afa      	ldrh	r2, [r7, #22]
 8010fda:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	2206      	movs	r2, #6
 8010fe0:	6839      	ldr	r1, [r7, #0]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f001 f865 	bl	80120b2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	3306      	adds	r3, #6
 8010fec:	2206      	movs	r2, #6
 8010fee:	6879      	ldr	r1, [r7, #4]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f001 f85e 	bl	80120b2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ffc:	2b06      	cmp	r3, #6
 8010ffe:	d006      	beq.n	801100e <ethernet_output+0x66>
 8011000:	4b0a      	ldr	r3, [pc, #40]	; (801102c <ethernet_output+0x84>)
 8011002:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011006:	490a      	ldr	r1, [pc, #40]	; (8011030 <ethernet_output+0x88>)
 8011008:	480a      	ldr	r0, [pc, #40]	; (8011034 <ethernet_output+0x8c>)
 801100a:	f000 fef1 	bl	8011df0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	699b      	ldr	r3, [r3, #24]
 8011012:	68b9      	ldr	r1, [r7, #8]
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	4798      	blx	r3
 8011018:	4603      	mov	r3, r0
 801101a:	e002      	b.n	8011022 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801101c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801101e:	f06f 0301 	mvn.w	r3, #1
}
 8011022:	4618      	mov	r0, r3
 8011024:	3718      	adds	r7, #24
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	08016728 	.word	0x08016728
 8011030:	08016760 	.word	0x08016760
 8011034:	08016794 	.word	0x08016794

08011038 <atof>:
 8011038:	2100      	movs	r1, #0
 801103a:	f000 be0b 	b.w	8011c54 <strtod>
	...

08011040 <rand>:
 8011040:	4b16      	ldr	r3, [pc, #88]	; (801109c <rand+0x5c>)
 8011042:	b510      	push	{r4, lr}
 8011044:	681c      	ldr	r4, [r3, #0]
 8011046:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011048:	b9b3      	cbnz	r3, 8011078 <rand+0x38>
 801104a:	2018      	movs	r0, #24
 801104c:	f001 fc0a 	bl	8012864 <malloc>
 8011050:	4602      	mov	r2, r0
 8011052:	6320      	str	r0, [r4, #48]	; 0x30
 8011054:	b920      	cbnz	r0, 8011060 <rand+0x20>
 8011056:	4b12      	ldr	r3, [pc, #72]	; (80110a0 <rand+0x60>)
 8011058:	4812      	ldr	r0, [pc, #72]	; (80110a4 <rand+0x64>)
 801105a:	2152      	movs	r1, #82	; 0x52
 801105c:	f001 f840 	bl	80120e0 <__assert_func>
 8011060:	4911      	ldr	r1, [pc, #68]	; (80110a8 <rand+0x68>)
 8011062:	4b12      	ldr	r3, [pc, #72]	; (80110ac <rand+0x6c>)
 8011064:	e9c0 1300 	strd	r1, r3, [r0]
 8011068:	4b11      	ldr	r3, [pc, #68]	; (80110b0 <rand+0x70>)
 801106a:	6083      	str	r3, [r0, #8]
 801106c:	230b      	movs	r3, #11
 801106e:	8183      	strh	r3, [r0, #12]
 8011070:	2100      	movs	r1, #0
 8011072:	2001      	movs	r0, #1
 8011074:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011078:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801107a:	480e      	ldr	r0, [pc, #56]	; (80110b4 <rand+0x74>)
 801107c:	690b      	ldr	r3, [r1, #16]
 801107e:	694c      	ldr	r4, [r1, #20]
 8011080:	4a0d      	ldr	r2, [pc, #52]	; (80110b8 <rand+0x78>)
 8011082:	4358      	muls	r0, r3
 8011084:	fb02 0004 	mla	r0, r2, r4, r0
 8011088:	fba3 3202 	umull	r3, r2, r3, r2
 801108c:	3301      	adds	r3, #1
 801108e:	eb40 0002 	adc.w	r0, r0, r2
 8011092:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011096:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801109a:	bd10      	pop	{r4, pc}
 801109c:	200001f0 	.word	0x200001f0
 80110a0:	080168c6 	.word	0x080168c6
 80110a4:	080168dd 	.word	0x080168dd
 80110a8:	abcd330e 	.word	0xabcd330e
 80110ac:	e66d1234 	.word	0xe66d1234
 80110b0:	0005deec 	.word	0x0005deec
 80110b4:	5851f42d 	.word	0x5851f42d
 80110b8:	4c957f2d 	.word	0x4c957f2d

080110bc <sulp>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	4604      	mov	r4, r0
 80110c0:	460d      	mov	r5, r1
 80110c2:	4616      	mov	r6, r2
 80110c4:	ec45 4b10 	vmov	d0, r4, r5
 80110c8:	f001 fffe 	bl	80130c8 <__ulp>
 80110cc:	b17e      	cbz	r6, 80110ee <sulp+0x32>
 80110ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	dd09      	ble.n	80110ee <sulp+0x32>
 80110da:	051b      	lsls	r3, r3, #20
 80110dc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80110e0:	2000      	movs	r0, #0
 80110e2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80110e6:	ec41 0b17 	vmov	d7, r0, r1
 80110ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 80110ee:	bd70      	pop	{r4, r5, r6, pc}

080110f0 <_strtod_l>:
 80110f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f4:	ed2d 8b0e 	vpush	{d8-d14}
 80110f8:	b097      	sub	sp, #92	; 0x5c
 80110fa:	4604      	mov	r4, r0
 80110fc:	920d      	str	r2, [sp, #52]	; 0x34
 80110fe:	2200      	movs	r2, #0
 8011100:	9212      	str	r2, [sp, #72]	; 0x48
 8011102:	468a      	mov	sl, r1
 8011104:	f04f 0800 	mov.w	r8, #0
 8011108:	f04f 0900 	mov.w	r9, #0
 801110c:	460a      	mov	r2, r1
 801110e:	9211      	str	r2, [sp, #68]	; 0x44
 8011110:	7811      	ldrb	r1, [r2, #0]
 8011112:	292b      	cmp	r1, #43	; 0x2b
 8011114:	d04c      	beq.n	80111b0 <_strtod_l+0xc0>
 8011116:	d839      	bhi.n	801118c <_strtod_l+0x9c>
 8011118:	290d      	cmp	r1, #13
 801111a:	d833      	bhi.n	8011184 <_strtod_l+0x94>
 801111c:	2908      	cmp	r1, #8
 801111e:	d833      	bhi.n	8011188 <_strtod_l+0x98>
 8011120:	2900      	cmp	r1, #0
 8011122:	d03c      	beq.n	801119e <_strtod_l+0xae>
 8011124:	2200      	movs	r2, #0
 8011126:	9208      	str	r2, [sp, #32]
 8011128:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801112a:	7832      	ldrb	r2, [r6, #0]
 801112c:	2a30      	cmp	r2, #48	; 0x30
 801112e:	f040 80b8 	bne.w	80112a2 <_strtod_l+0x1b2>
 8011132:	7872      	ldrb	r2, [r6, #1]
 8011134:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011138:	2a58      	cmp	r2, #88	; 0x58
 801113a:	d170      	bne.n	801121e <_strtod_l+0x12e>
 801113c:	9302      	str	r3, [sp, #8]
 801113e:	9b08      	ldr	r3, [sp, #32]
 8011140:	9301      	str	r3, [sp, #4]
 8011142:	ab12      	add	r3, sp, #72	; 0x48
 8011144:	9300      	str	r3, [sp, #0]
 8011146:	4a91      	ldr	r2, [pc, #580]	; (801138c <_strtod_l+0x29c>)
 8011148:	ab13      	add	r3, sp, #76	; 0x4c
 801114a:	a911      	add	r1, sp, #68	; 0x44
 801114c:	4620      	mov	r0, r4
 801114e:	f001 f899 	bl	8012284 <__gethex>
 8011152:	f010 070f 	ands.w	r7, r0, #15
 8011156:	4605      	mov	r5, r0
 8011158:	d005      	beq.n	8011166 <_strtod_l+0x76>
 801115a:	2f06      	cmp	r7, #6
 801115c:	d12a      	bne.n	80111b4 <_strtod_l+0xc4>
 801115e:	3601      	adds	r6, #1
 8011160:	2300      	movs	r3, #0
 8011162:	9611      	str	r6, [sp, #68]	; 0x44
 8011164:	9308      	str	r3, [sp, #32]
 8011166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011168:	2b00      	cmp	r3, #0
 801116a:	f040 8555 	bne.w	8011c18 <_strtod_l+0xb28>
 801116e:	9b08      	ldr	r3, [sp, #32]
 8011170:	ec49 8b10 	vmov	d0, r8, r9
 8011174:	b1cb      	cbz	r3, 80111aa <_strtod_l+0xba>
 8011176:	eeb1 0b40 	vneg.f64	d0, d0
 801117a:	b017      	add	sp, #92	; 0x5c
 801117c:	ecbd 8b0e 	vpop	{d8-d14}
 8011180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011184:	2920      	cmp	r1, #32
 8011186:	d1cd      	bne.n	8011124 <_strtod_l+0x34>
 8011188:	3201      	adds	r2, #1
 801118a:	e7c0      	b.n	801110e <_strtod_l+0x1e>
 801118c:	292d      	cmp	r1, #45	; 0x2d
 801118e:	d1c9      	bne.n	8011124 <_strtod_l+0x34>
 8011190:	2101      	movs	r1, #1
 8011192:	9108      	str	r1, [sp, #32]
 8011194:	1c51      	adds	r1, r2, #1
 8011196:	9111      	str	r1, [sp, #68]	; 0x44
 8011198:	7852      	ldrb	r2, [r2, #1]
 801119a:	2a00      	cmp	r2, #0
 801119c:	d1c4      	bne.n	8011128 <_strtod_l+0x38>
 801119e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111a0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f040 8535 	bne.w	8011c14 <_strtod_l+0xb24>
 80111aa:	ec49 8b10 	vmov	d0, r8, r9
 80111ae:	e7e4      	b.n	801117a <_strtod_l+0x8a>
 80111b0:	2100      	movs	r1, #0
 80111b2:	e7ee      	b.n	8011192 <_strtod_l+0xa2>
 80111b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80111b6:	b13a      	cbz	r2, 80111c8 <_strtod_l+0xd8>
 80111b8:	2135      	movs	r1, #53	; 0x35
 80111ba:	a814      	add	r0, sp, #80	; 0x50
 80111bc:	f002 f87e 	bl	80132bc <__copybits>
 80111c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80111c2:	4620      	mov	r0, r4
 80111c4:	f001 fc54 	bl	8012a70 <_Bfree>
 80111c8:	1e7b      	subs	r3, r7, #1
 80111ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80111cc:	2b04      	cmp	r3, #4
 80111ce:	d806      	bhi.n	80111de <_strtod_l+0xee>
 80111d0:	e8df f003 	tbb	[pc, r3]
 80111d4:	201d0314 	.word	0x201d0314
 80111d8:	14          	.byte	0x14
 80111d9:	00          	.byte	0x00
 80111da:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80111de:	05eb      	lsls	r3, r5, #23
 80111e0:	bf48      	it	mi
 80111e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80111e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111ea:	0d1b      	lsrs	r3, r3, #20
 80111ec:	051b      	lsls	r3, r3, #20
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1b9      	bne.n	8011166 <_strtod_l+0x76>
 80111f2:	f000 ff31 	bl	8012058 <__errno>
 80111f6:	2322      	movs	r3, #34	; 0x22
 80111f8:	6003      	str	r3, [r0, #0]
 80111fa:	e7b4      	b.n	8011166 <_strtod_l+0x76>
 80111fc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8011200:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011204:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011208:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801120c:	e7e7      	b.n	80111de <_strtod_l+0xee>
 801120e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8011394 <_strtod_l+0x2a4>
 8011212:	e7e4      	b.n	80111de <_strtod_l+0xee>
 8011214:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011218:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801121c:	e7df      	b.n	80111de <_strtod_l+0xee>
 801121e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011220:	1c5a      	adds	r2, r3, #1
 8011222:	9211      	str	r2, [sp, #68]	; 0x44
 8011224:	785b      	ldrb	r3, [r3, #1]
 8011226:	2b30      	cmp	r3, #48	; 0x30
 8011228:	d0f9      	beq.n	801121e <_strtod_l+0x12e>
 801122a:	2b00      	cmp	r3, #0
 801122c:	d09b      	beq.n	8011166 <_strtod_l+0x76>
 801122e:	2301      	movs	r3, #1
 8011230:	9306      	str	r3, [sp, #24]
 8011232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011234:	9309      	str	r3, [sp, #36]	; 0x24
 8011236:	2300      	movs	r3, #0
 8011238:	9305      	str	r3, [sp, #20]
 801123a:	9307      	str	r3, [sp, #28]
 801123c:	461e      	mov	r6, r3
 801123e:	220a      	movs	r2, #10
 8011240:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011242:	7805      	ldrb	r5, [r0, #0]
 8011244:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8011248:	b2d9      	uxtb	r1, r3
 801124a:	2909      	cmp	r1, #9
 801124c:	d92b      	bls.n	80112a6 <_strtod_l+0x1b6>
 801124e:	4950      	ldr	r1, [pc, #320]	; (8011390 <_strtod_l+0x2a0>)
 8011250:	2201      	movs	r2, #1
 8011252:	f000 fe3a 	bl	8011eca <strncmp>
 8011256:	2800      	cmp	r0, #0
 8011258:	d035      	beq.n	80112c6 <_strtod_l+0x1d6>
 801125a:	2000      	movs	r0, #0
 801125c:	462a      	mov	r2, r5
 801125e:	4633      	mov	r3, r6
 8011260:	4683      	mov	fp, r0
 8011262:	4601      	mov	r1, r0
 8011264:	2a65      	cmp	r2, #101	; 0x65
 8011266:	d001      	beq.n	801126c <_strtod_l+0x17c>
 8011268:	2a45      	cmp	r2, #69	; 0x45
 801126a:	d118      	bne.n	801129e <_strtod_l+0x1ae>
 801126c:	b91b      	cbnz	r3, 8011276 <_strtod_l+0x186>
 801126e:	9b06      	ldr	r3, [sp, #24]
 8011270:	4303      	orrs	r3, r0
 8011272:	d094      	beq.n	801119e <_strtod_l+0xae>
 8011274:	2300      	movs	r3, #0
 8011276:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801127a:	f10a 0201 	add.w	r2, sl, #1
 801127e:	9211      	str	r2, [sp, #68]	; 0x44
 8011280:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8011284:	2a2b      	cmp	r2, #43	; 0x2b
 8011286:	d075      	beq.n	8011374 <_strtod_l+0x284>
 8011288:	2a2d      	cmp	r2, #45	; 0x2d
 801128a:	d07b      	beq.n	8011384 <_strtod_l+0x294>
 801128c:	f04f 0e00 	mov.w	lr, #0
 8011290:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8011294:	2d09      	cmp	r5, #9
 8011296:	f240 8083 	bls.w	80113a0 <_strtod_l+0x2b0>
 801129a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801129e:	2500      	movs	r5, #0
 80112a0:	e09e      	b.n	80113e0 <_strtod_l+0x2f0>
 80112a2:	2300      	movs	r3, #0
 80112a4:	e7c4      	b.n	8011230 <_strtod_l+0x140>
 80112a6:	2e08      	cmp	r6, #8
 80112a8:	bfd5      	itete	le
 80112aa:	9907      	ldrle	r1, [sp, #28]
 80112ac:	9905      	ldrgt	r1, [sp, #20]
 80112ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80112b2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80112b6:	f100 0001 	add.w	r0, r0, #1
 80112ba:	bfd4      	ite	le
 80112bc:	9307      	strle	r3, [sp, #28]
 80112be:	9305      	strgt	r3, [sp, #20]
 80112c0:	3601      	adds	r6, #1
 80112c2:	9011      	str	r0, [sp, #68]	; 0x44
 80112c4:	e7bc      	b.n	8011240 <_strtod_l+0x150>
 80112c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112c8:	1c5a      	adds	r2, r3, #1
 80112ca:	9211      	str	r2, [sp, #68]	; 0x44
 80112cc:	785a      	ldrb	r2, [r3, #1]
 80112ce:	b3ae      	cbz	r6, 801133c <_strtod_l+0x24c>
 80112d0:	4683      	mov	fp, r0
 80112d2:	4633      	mov	r3, r6
 80112d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80112d8:	2909      	cmp	r1, #9
 80112da:	d912      	bls.n	8011302 <_strtod_l+0x212>
 80112dc:	2101      	movs	r1, #1
 80112de:	e7c1      	b.n	8011264 <_strtod_l+0x174>
 80112e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112e2:	1c5a      	adds	r2, r3, #1
 80112e4:	9211      	str	r2, [sp, #68]	; 0x44
 80112e6:	785a      	ldrb	r2, [r3, #1]
 80112e8:	3001      	adds	r0, #1
 80112ea:	2a30      	cmp	r2, #48	; 0x30
 80112ec:	d0f8      	beq.n	80112e0 <_strtod_l+0x1f0>
 80112ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80112f2:	2b08      	cmp	r3, #8
 80112f4:	f200 8495 	bhi.w	8011c22 <_strtod_l+0xb32>
 80112f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112fa:	9309      	str	r3, [sp, #36]	; 0x24
 80112fc:	4683      	mov	fp, r0
 80112fe:	2000      	movs	r0, #0
 8011300:	4603      	mov	r3, r0
 8011302:	3a30      	subs	r2, #48	; 0x30
 8011304:	f100 0101 	add.w	r1, r0, #1
 8011308:	d012      	beq.n	8011330 <_strtod_l+0x240>
 801130a:	448b      	add	fp, r1
 801130c:	eb00 0c03 	add.w	ip, r0, r3
 8011310:	4619      	mov	r1, r3
 8011312:	250a      	movs	r5, #10
 8011314:	4561      	cmp	r1, ip
 8011316:	d113      	bne.n	8011340 <_strtod_l+0x250>
 8011318:	1819      	adds	r1, r3, r0
 801131a:	2908      	cmp	r1, #8
 801131c:	f103 0301 	add.w	r3, r3, #1
 8011320:	4403      	add	r3, r0
 8011322:	dc1b      	bgt.n	801135c <_strtod_l+0x26c>
 8011324:	9807      	ldr	r0, [sp, #28]
 8011326:	210a      	movs	r1, #10
 8011328:	fb01 2200 	mla	r2, r1, r0, r2
 801132c:	9207      	str	r2, [sp, #28]
 801132e:	2100      	movs	r1, #0
 8011330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011332:	1c50      	adds	r0, r2, #1
 8011334:	9011      	str	r0, [sp, #68]	; 0x44
 8011336:	7852      	ldrb	r2, [r2, #1]
 8011338:	4608      	mov	r0, r1
 801133a:	e7cb      	b.n	80112d4 <_strtod_l+0x1e4>
 801133c:	4630      	mov	r0, r6
 801133e:	e7d4      	b.n	80112ea <_strtod_l+0x1fa>
 8011340:	2908      	cmp	r1, #8
 8011342:	f101 0101 	add.w	r1, r1, #1
 8011346:	dc03      	bgt.n	8011350 <_strtod_l+0x260>
 8011348:	9f07      	ldr	r7, [sp, #28]
 801134a:	436f      	muls	r7, r5
 801134c:	9707      	str	r7, [sp, #28]
 801134e:	e7e1      	b.n	8011314 <_strtod_l+0x224>
 8011350:	2910      	cmp	r1, #16
 8011352:	bfde      	ittt	le
 8011354:	9f05      	ldrle	r7, [sp, #20]
 8011356:	436f      	mulle	r7, r5
 8011358:	9705      	strle	r7, [sp, #20]
 801135a:	e7db      	b.n	8011314 <_strtod_l+0x224>
 801135c:	2b10      	cmp	r3, #16
 801135e:	bfdf      	itttt	le
 8011360:	9805      	ldrle	r0, [sp, #20]
 8011362:	210a      	movle	r1, #10
 8011364:	fb01 2200 	mlale	r2, r1, r0, r2
 8011368:	9205      	strle	r2, [sp, #20]
 801136a:	e7e0      	b.n	801132e <_strtod_l+0x23e>
 801136c:	f04f 0b00 	mov.w	fp, #0
 8011370:	2101      	movs	r1, #1
 8011372:	e77c      	b.n	801126e <_strtod_l+0x17e>
 8011374:	f04f 0e00 	mov.w	lr, #0
 8011378:	f10a 0202 	add.w	r2, sl, #2
 801137c:	9211      	str	r2, [sp, #68]	; 0x44
 801137e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8011382:	e785      	b.n	8011290 <_strtod_l+0x1a0>
 8011384:	f04f 0e01 	mov.w	lr, #1
 8011388:	e7f6      	b.n	8011378 <_strtod_l+0x288>
 801138a:	bf00      	nop
 801138c:	08016944 	.word	0x08016944
 8011390:	08016935 	.word	0x08016935
 8011394:	7ff00000 	.word	0x7ff00000
 8011398:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801139a:	1c55      	adds	r5, r2, #1
 801139c:	9511      	str	r5, [sp, #68]	; 0x44
 801139e:	7852      	ldrb	r2, [r2, #1]
 80113a0:	2a30      	cmp	r2, #48	; 0x30
 80113a2:	d0f9      	beq.n	8011398 <_strtod_l+0x2a8>
 80113a4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80113a8:	2d08      	cmp	r5, #8
 80113aa:	f63f af78 	bhi.w	801129e <_strtod_l+0x1ae>
 80113ae:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80113b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113b4:	920a      	str	r2, [sp, #40]	; 0x28
 80113b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113b8:	1c55      	adds	r5, r2, #1
 80113ba:	9511      	str	r5, [sp, #68]	; 0x44
 80113bc:	7852      	ldrb	r2, [r2, #1]
 80113be:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80113c2:	2f09      	cmp	r7, #9
 80113c4:	d937      	bls.n	8011436 <_strtod_l+0x346>
 80113c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80113c8:	1bed      	subs	r5, r5, r7
 80113ca:	2d08      	cmp	r5, #8
 80113cc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80113d0:	dc02      	bgt.n	80113d8 <_strtod_l+0x2e8>
 80113d2:	4565      	cmp	r5, ip
 80113d4:	bfa8      	it	ge
 80113d6:	4665      	movge	r5, ip
 80113d8:	f1be 0f00 	cmp.w	lr, #0
 80113dc:	d000      	beq.n	80113e0 <_strtod_l+0x2f0>
 80113de:	426d      	negs	r5, r5
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d14d      	bne.n	8011480 <_strtod_l+0x390>
 80113e4:	9b06      	ldr	r3, [sp, #24]
 80113e6:	4303      	orrs	r3, r0
 80113e8:	f47f aebd 	bne.w	8011166 <_strtod_l+0x76>
 80113ec:	2900      	cmp	r1, #0
 80113ee:	f47f aed6 	bne.w	801119e <_strtod_l+0xae>
 80113f2:	2a69      	cmp	r2, #105	; 0x69
 80113f4:	d027      	beq.n	8011446 <_strtod_l+0x356>
 80113f6:	dc24      	bgt.n	8011442 <_strtod_l+0x352>
 80113f8:	2a49      	cmp	r2, #73	; 0x49
 80113fa:	d024      	beq.n	8011446 <_strtod_l+0x356>
 80113fc:	2a4e      	cmp	r2, #78	; 0x4e
 80113fe:	f47f aece 	bne.w	801119e <_strtod_l+0xae>
 8011402:	4995      	ldr	r1, [pc, #596]	; (8011658 <_strtod_l+0x568>)
 8011404:	a811      	add	r0, sp, #68	; 0x44
 8011406:	f001 f97d 	bl	8012704 <__match>
 801140a:	2800      	cmp	r0, #0
 801140c:	f43f aec7 	beq.w	801119e <_strtod_l+0xae>
 8011410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b28      	cmp	r3, #40	; 0x28
 8011416:	d12d      	bne.n	8011474 <_strtod_l+0x384>
 8011418:	4990      	ldr	r1, [pc, #576]	; (801165c <_strtod_l+0x56c>)
 801141a:	aa14      	add	r2, sp, #80	; 0x50
 801141c:	a811      	add	r0, sp, #68	; 0x44
 801141e:	f001 f985 	bl	801272c <__hexnan>
 8011422:	2805      	cmp	r0, #5
 8011424:	d126      	bne.n	8011474 <_strtod_l+0x384>
 8011426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011428:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801142c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011430:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011434:	e697      	b.n	8011166 <_strtod_l+0x76>
 8011436:	250a      	movs	r5, #10
 8011438:	fb05 2c0c 	mla	ip, r5, ip, r2
 801143c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8011440:	e7b9      	b.n	80113b6 <_strtod_l+0x2c6>
 8011442:	2a6e      	cmp	r2, #110	; 0x6e
 8011444:	e7db      	b.n	80113fe <_strtod_l+0x30e>
 8011446:	4986      	ldr	r1, [pc, #536]	; (8011660 <_strtod_l+0x570>)
 8011448:	a811      	add	r0, sp, #68	; 0x44
 801144a:	f001 f95b 	bl	8012704 <__match>
 801144e:	2800      	cmp	r0, #0
 8011450:	f43f aea5 	beq.w	801119e <_strtod_l+0xae>
 8011454:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011456:	4983      	ldr	r1, [pc, #524]	; (8011664 <_strtod_l+0x574>)
 8011458:	3b01      	subs	r3, #1
 801145a:	a811      	add	r0, sp, #68	; 0x44
 801145c:	9311      	str	r3, [sp, #68]	; 0x44
 801145e:	f001 f951 	bl	8012704 <__match>
 8011462:	b910      	cbnz	r0, 801146a <_strtod_l+0x37a>
 8011464:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011466:	3301      	adds	r3, #1
 8011468:	9311      	str	r3, [sp, #68]	; 0x44
 801146a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8011678 <_strtod_l+0x588>
 801146e:	f04f 0800 	mov.w	r8, #0
 8011472:	e678      	b.n	8011166 <_strtod_l+0x76>
 8011474:	487c      	ldr	r0, [pc, #496]	; (8011668 <_strtod_l+0x578>)
 8011476:	f000 fe2b 	bl	80120d0 <nan>
 801147a:	ec59 8b10 	vmov	r8, r9, d0
 801147e:	e672      	b.n	8011166 <_strtod_l+0x76>
 8011480:	eddd 7a07 	vldr	s15, [sp, #28]
 8011484:	eba5 020b 	sub.w	r2, r5, fp
 8011488:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801148c:	2e00      	cmp	r6, #0
 801148e:	bf08      	it	eq
 8011490:	461e      	moveq	r6, r3
 8011492:	2b10      	cmp	r3, #16
 8011494:	9206      	str	r2, [sp, #24]
 8011496:	461a      	mov	r2, r3
 8011498:	bfa8      	it	ge
 801149a:	2210      	movge	r2, #16
 801149c:	2b09      	cmp	r3, #9
 801149e:	ec59 8b17 	vmov	r8, r9, d7
 80114a2:	dd0c      	ble.n	80114be <_strtod_l+0x3ce>
 80114a4:	4971      	ldr	r1, [pc, #452]	; (801166c <_strtod_l+0x57c>)
 80114a6:	eddd 6a05 	vldr	s13, [sp, #20]
 80114aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80114ae:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80114b2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80114b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80114ba:	ec59 8b16 	vmov	r8, r9, d6
 80114be:	2b0f      	cmp	r3, #15
 80114c0:	dc37      	bgt.n	8011532 <_strtod_l+0x442>
 80114c2:	9906      	ldr	r1, [sp, #24]
 80114c4:	2900      	cmp	r1, #0
 80114c6:	f43f ae4e 	beq.w	8011166 <_strtod_l+0x76>
 80114ca:	dd23      	ble.n	8011514 <_strtod_l+0x424>
 80114cc:	2916      	cmp	r1, #22
 80114ce:	dc0b      	bgt.n	80114e8 <_strtod_l+0x3f8>
 80114d0:	4b66      	ldr	r3, [pc, #408]	; (801166c <_strtod_l+0x57c>)
 80114d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80114d6:	ed93 7b00 	vldr	d7, [r3]
 80114da:	ec49 8b16 	vmov	d6, r8, r9
 80114de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114e2:	ec59 8b17 	vmov	r8, r9, d7
 80114e6:	e63e      	b.n	8011166 <_strtod_l+0x76>
 80114e8:	9806      	ldr	r0, [sp, #24]
 80114ea:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80114ee:	4281      	cmp	r1, r0
 80114f0:	db1f      	blt.n	8011532 <_strtod_l+0x442>
 80114f2:	4a5e      	ldr	r2, [pc, #376]	; (801166c <_strtod_l+0x57c>)
 80114f4:	f1c3 030f 	rsb	r3, r3, #15
 80114f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80114fc:	ed91 7b00 	vldr	d7, [r1]
 8011500:	ec49 8b16 	vmov	d6, r8, r9
 8011504:	1ac3      	subs	r3, r0, r3
 8011506:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801150a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801150e:	ed92 6b00 	vldr	d6, [r2]
 8011512:	e7e4      	b.n	80114de <_strtod_l+0x3ee>
 8011514:	9906      	ldr	r1, [sp, #24]
 8011516:	3116      	adds	r1, #22
 8011518:	db0b      	blt.n	8011532 <_strtod_l+0x442>
 801151a:	4b54      	ldr	r3, [pc, #336]	; (801166c <_strtod_l+0x57c>)
 801151c:	ebab 0505 	sub.w	r5, fp, r5
 8011520:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011524:	ed95 7b00 	vldr	d7, [r5]
 8011528:	ec49 8b16 	vmov	d6, r8, r9
 801152c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011530:	e7d7      	b.n	80114e2 <_strtod_l+0x3f2>
 8011532:	9906      	ldr	r1, [sp, #24]
 8011534:	1a9a      	subs	r2, r3, r2
 8011536:	440a      	add	r2, r1
 8011538:	2a00      	cmp	r2, #0
 801153a:	dd6e      	ble.n	801161a <_strtod_l+0x52a>
 801153c:	f012 000f 	ands.w	r0, r2, #15
 8011540:	d00a      	beq.n	8011558 <_strtod_l+0x468>
 8011542:	494a      	ldr	r1, [pc, #296]	; (801166c <_strtod_l+0x57c>)
 8011544:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011548:	ed91 7b00 	vldr	d7, [r1]
 801154c:	ec49 8b16 	vmov	d6, r8, r9
 8011550:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011554:	ec59 8b17 	vmov	r8, r9, d7
 8011558:	f032 020f 	bics.w	r2, r2, #15
 801155c:	d04e      	beq.n	80115fc <_strtod_l+0x50c>
 801155e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011562:	dd22      	ble.n	80115aa <_strtod_l+0x4ba>
 8011564:	2500      	movs	r5, #0
 8011566:	462e      	mov	r6, r5
 8011568:	9507      	str	r5, [sp, #28]
 801156a:	462f      	mov	r7, r5
 801156c:	2322      	movs	r3, #34	; 0x22
 801156e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011678 <_strtod_l+0x588>
 8011572:	6023      	str	r3, [r4, #0]
 8011574:	f04f 0800 	mov.w	r8, #0
 8011578:	9b07      	ldr	r3, [sp, #28]
 801157a:	2b00      	cmp	r3, #0
 801157c:	f43f adf3 	beq.w	8011166 <_strtod_l+0x76>
 8011580:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011582:	4620      	mov	r0, r4
 8011584:	f001 fa74 	bl	8012a70 <_Bfree>
 8011588:	4639      	mov	r1, r7
 801158a:	4620      	mov	r0, r4
 801158c:	f001 fa70 	bl	8012a70 <_Bfree>
 8011590:	4631      	mov	r1, r6
 8011592:	4620      	mov	r0, r4
 8011594:	f001 fa6c 	bl	8012a70 <_Bfree>
 8011598:	9907      	ldr	r1, [sp, #28]
 801159a:	4620      	mov	r0, r4
 801159c:	f001 fa68 	bl	8012a70 <_Bfree>
 80115a0:	4629      	mov	r1, r5
 80115a2:	4620      	mov	r0, r4
 80115a4:	f001 fa64 	bl	8012a70 <_Bfree>
 80115a8:	e5dd      	b.n	8011166 <_strtod_l+0x76>
 80115aa:	2000      	movs	r0, #0
 80115ac:	ec49 8b17 	vmov	d7, r8, r9
 80115b0:	4f2f      	ldr	r7, [pc, #188]	; (8011670 <_strtod_l+0x580>)
 80115b2:	1112      	asrs	r2, r2, #4
 80115b4:	4601      	mov	r1, r0
 80115b6:	2a01      	cmp	r2, #1
 80115b8:	dc23      	bgt.n	8011602 <_strtod_l+0x512>
 80115ba:	b108      	cbz	r0, 80115c0 <_strtod_l+0x4d0>
 80115bc:	ec59 8b17 	vmov	r8, r9, d7
 80115c0:	4a2b      	ldr	r2, [pc, #172]	; (8011670 <_strtod_l+0x580>)
 80115c2:	482c      	ldr	r0, [pc, #176]	; (8011674 <_strtod_l+0x584>)
 80115c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80115c8:	ed92 7b00 	vldr	d7, [r2]
 80115cc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80115d0:	ec49 8b16 	vmov	d6, r8, r9
 80115d4:	4a28      	ldr	r2, [pc, #160]	; (8011678 <_strtod_l+0x588>)
 80115d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115da:	ee17 1a90 	vmov	r1, s15
 80115de:	400a      	ands	r2, r1
 80115e0:	4282      	cmp	r2, r0
 80115e2:	ec59 8b17 	vmov	r8, r9, d7
 80115e6:	d8bd      	bhi.n	8011564 <_strtod_l+0x474>
 80115e8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80115ec:	4282      	cmp	r2, r0
 80115ee:	bf86      	itte	hi
 80115f0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801167c <_strtod_l+0x58c>
 80115f4:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80115f8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80115fc:	2200      	movs	r2, #0
 80115fe:	9205      	str	r2, [sp, #20]
 8011600:	e076      	b.n	80116f0 <_strtod_l+0x600>
 8011602:	f012 0f01 	tst.w	r2, #1
 8011606:	d004      	beq.n	8011612 <_strtod_l+0x522>
 8011608:	ed97 6b00 	vldr	d6, [r7]
 801160c:	2001      	movs	r0, #1
 801160e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011612:	3101      	adds	r1, #1
 8011614:	1052      	asrs	r2, r2, #1
 8011616:	3708      	adds	r7, #8
 8011618:	e7cd      	b.n	80115b6 <_strtod_l+0x4c6>
 801161a:	d0ef      	beq.n	80115fc <_strtod_l+0x50c>
 801161c:	4252      	negs	r2, r2
 801161e:	f012 000f 	ands.w	r0, r2, #15
 8011622:	d00a      	beq.n	801163a <_strtod_l+0x54a>
 8011624:	4911      	ldr	r1, [pc, #68]	; (801166c <_strtod_l+0x57c>)
 8011626:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801162a:	ed91 7b00 	vldr	d7, [r1]
 801162e:	ec49 8b16 	vmov	d6, r8, r9
 8011632:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011636:	ec59 8b17 	vmov	r8, r9, d7
 801163a:	1112      	asrs	r2, r2, #4
 801163c:	d0de      	beq.n	80115fc <_strtod_l+0x50c>
 801163e:	2a1f      	cmp	r2, #31
 8011640:	dd1e      	ble.n	8011680 <_strtod_l+0x590>
 8011642:	2500      	movs	r5, #0
 8011644:	462e      	mov	r6, r5
 8011646:	9507      	str	r5, [sp, #28]
 8011648:	462f      	mov	r7, r5
 801164a:	2322      	movs	r3, #34	; 0x22
 801164c:	f04f 0800 	mov.w	r8, #0
 8011650:	f04f 0900 	mov.w	r9, #0
 8011654:	6023      	str	r3, [r4, #0]
 8011656:	e78f      	b.n	8011578 <_strtod_l+0x488>
 8011658:	08016940 	.word	0x08016940
 801165c:	08016958 	.word	0x08016958
 8011660:	08016937 	.word	0x08016937
 8011664:	0801693a 	.word	0x0801693a
 8011668:	08016b36 	.word	0x08016b36
 801166c:	08016c30 	.word	0x08016c30
 8011670:	08016c08 	.word	0x08016c08
 8011674:	7ca00000 	.word	0x7ca00000
 8011678:	7ff00000 	.word	0x7ff00000
 801167c:	7fefffff 	.word	0x7fefffff
 8011680:	f012 0110 	ands.w	r1, r2, #16
 8011684:	bf18      	it	ne
 8011686:	216a      	movne	r1, #106	; 0x6a
 8011688:	9105      	str	r1, [sp, #20]
 801168a:	ec49 8b17 	vmov	d7, r8, r9
 801168e:	49be      	ldr	r1, [pc, #760]	; (8011988 <_strtod_l+0x898>)
 8011690:	2000      	movs	r0, #0
 8011692:	07d7      	lsls	r7, r2, #31
 8011694:	d504      	bpl.n	80116a0 <_strtod_l+0x5b0>
 8011696:	ed91 6b00 	vldr	d6, [r1]
 801169a:	2001      	movs	r0, #1
 801169c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116a0:	1052      	asrs	r2, r2, #1
 80116a2:	f101 0108 	add.w	r1, r1, #8
 80116a6:	d1f4      	bne.n	8011692 <_strtod_l+0x5a2>
 80116a8:	b108      	cbz	r0, 80116ae <_strtod_l+0x5be>
 80116aa:	ec59 8b17 	vmov	r8, r9, d7
 80116ae:	9a05      	ldr	r2, [sp, #20]
 80116b0:	b1ba      	cbz	r2, 80116e2 <_strtod_l+0x5f2>
 80116b2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80116b6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80116ba:	2a00      	cmp	r2, #0
 80116bc:	4648      	mov	r0, r9
 80116be:	dd10      	ble.n	80116e2 <_strtod_l+0x5f2>
 80116c0:	2a1f      	cmp	r2, #31
 80116c2:	f340 812c 	ble.w	801191e <_strtod_l+0x82e>
 80116c6:	2a34      	cmp	r2, #52	; 0x34
 80116c8:	bfde      	ittt	le
 80116ca:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80116ce:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80116d2:	408a      	lslle	r2, r1
 80116d4:	f04f 0800 	mov.w	r8, #0
 80116d8:	bfcc      	ite	gt
 80116da:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80116de:	ea02 0900 	andle.w	r9, r2, r0
 80116e2:	ec49 8b17 	vmov	d7, r8, r9
 80116e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ee:	d0a8      	beq.n	8011642 <_strtod_l+0x552>
 80116f0:	9a07      	ldr	r2, [sp, #28]
 80116f2:	9200      	str	r2, [sp, #0]
 80116f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116f6:	4632      	mov	r2, r6
 80116f8:	4620      	mov	r0, r4
 80116fa:	f001 fa21 	bl	8012b40 <__s2b>
 80116fe:	9007      	str	r0, [sp, #28]
 8011700:	2800      	cmp	r0, #0
 8011702:	f43f af2f 	beq.w	8011564 <_strtod_l+0x474>
 8011706:	9a06      	ldr	r2, [sp, #24]
 8011708:	2a00      	cmp	r2, #0
 801170a:	ebab 0305 	sub.w	r3, fp, r5
 801170e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011968 <_strtod_l+0x878>
 8011712:	bfa8      	it	ge
 8011714:	2300      	movge	r3, #0
 8011716:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011970 <_strtod_l+0x880>
 801171a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8011978 <_strtod_l+0x888>
 801171e:	9309      	str	r3, [sp, #36]	; 0x24
 8011720:	2500      	movs	r5, #0
 8011722:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011726:	930c      	str	r3, [sp, #48]	; 0x30
 8011728:	462e      	mov	r6, r5
 801172a:	9b07      	ldr	r3, [sp, #28]
 801172c:	4620      	mov	r0, r4
 801172e:	6859      	ldr	r1, [r3, #4]
 8011730:	f001 f95e 	bl	80129f0 <_Balloc>
 8011734:	4607      	mov	r7, r0
 8011736:	2800      	cmp	r0, #0
 8011738:	f43f af18 	beq.w	801156c <_strtod_l+0x47c>
 801173c:	9b07      	ldr	r3, [sp, #28]
 801173e:	691a      	ldr	r2, [r3, #16]
 8011740:	3202      	adds	r2, #2
 8011742:	f103 010c 	add.w	r1, r3, #12
 8011746:	0092      	lsls	r2, r2, #2
 8011748:	300c      	adds	r0, #12
 801174a:	f000 fcb2 	bl	80120b2 <memcpy>
 801174e:	ec49 8b10 	vmov	d0, r8, r9
 8011752:	aa14      	add	r2, sp, #80	; 0x50
 8011754:	a913      	add	r1, sp, #76	; 0x4c
 8011756:	4620      	mov	r0, r4
 8011758:	f001 fd26 	bl	80131a8 <__d2b>
 801175c:	ec49 8b18 	vmov	d8, r8, r9
 8011760:	9012      	str	r0, [sp, #72]	; 0x48
 8011762:	2800      	cmp	r0, #0
 8011764:	f43f af02 	beq.w	801156c <_strtod_l+0x47c>
 8011768:	2101      	movs	r1, #1
 801176a:	4620      	mov	r0, r4
 801176c:	f001 fa80 	bl	8012c70 <__i2b>
 8011770:	4606      	mov	r6, r0
 8011772:	2800      	cmp	r0, #0
 8011774:	f43f aefa 	beq.w	801156c <_strtod_l+0x47c>
 8011778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801177a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801177c:	2b00      	cmp	r3, #0
 801177e:	bfab      	itete	ge
 8011780:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8011782:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8011784:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8011788:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801178c:	bfac      	ite	ge
 801178e:	eb03 0b02 	addge.w	fp, r3, r2
 8011792:	eba2 0a03 	sublt.w	sl, r2, r3
 8011796:	9a05      	ldr	r2, [sp, #20]
 8011798:	1a9b      	subs	r3, r3, r2
 801179a:	440b      	add	r3, r1
 801179c:	4a7b      	ldr	r2, [pc, #492]	; (801198c <_strtod_l+0x89c>)
 801179e:	3b01      	subs	r3, #1
 80117a0:	4293      	cmp	r3, r2
 80117a2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80117a6:	f280 80cd 	bge.w	8011944 <_strtod_l+0x854>
 80117aa:	1ad2      	subs	r2, r2, r3
 80117ac:	2a1f      	cmp	r2, #31
 80117ae:	eba1 0102 	sub.w	r1, r1, r2
 80117b2:	f04f 0001 	mov.w	r0, #1
 80117b6:	f300 80b9 	bgt.w	801192c <_strtod_l+0x83c>
 80117ba:	fa00 f302 	lsl.w	r3, r0, r2
 80117be:	930b      	str	r3, [sp, #44]	; 0x2c
 80117c0:	2300      	movs	r3, #0
 80117c2:	930a      	str	r3, [sp, #40]	; 0x28
 80117c4:	eb0b 0301 	add.w	r3, fp, r1
 80117c8:	9a05      	ldr	r2, [sp, #20]
 80117ca:	459b      	cmp	fp, r3
 80117cc:	448a      	add	sl, r1
 80117ce:	4492      	add	sl, r2
 80117d0:	465a      	mov	r2, fp
 80117d2:	bfa8      	it	ge
 80117d4:	461a      	movge	r2, r3
 80117d6:	4552      	cmp	r2, sl
 80117d8:	bfa8      	it	ge
 80117da:	4652      	movge	r2, sl
 80117dc:	2a00      	cmp	r2, #0
 80117de:	bfc2      	ittt	gt
 80117e0:	1a9b      	subgt	r3, r3, r2
 80117e2:	ebaa 0a02 	subgt.w	sl, sl, r2
 80117e6:	ebab 0b02 	subgt.w	fp, fp, r2
 80117ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117ec:	2a00      	cmp	r2, #0
 80117ee:	dd18      	ble.n	8011822 <_strtod_l+0x732>
 80117f0:	4631      	mov	r1, r6
 80117f2:	4620      	mov	r0, r4
 80117f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80117f6:	f001 fafb 	bl	8012df0 <__pow5mult>
 80117fa:	4606      	mov	r6, r0
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f43f aeb5 	beq.w	801156c <_strtod_l+0x47c>
 8011802:	4601      	mov	r1, r0
 8011804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011806:	4620      	mov	r0, r4
 8011808:	f001 fa48 	bl	8012c9c <__multiply>
 801180c:	900e      	str	r0, [sp, #56]	; 0x38
 801180e:	2800      	cmp	r0, #0
 8011810:	f43f aeac 	beq.w	801156c <_strtod_l+0x47c>
 8011814:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011816:	4620      	mov	r0, r4
 8011818:	f001 f92a 	bl	8012a70 <_Bfree>
 801181c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801181e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011820:	9212      	str	r2, [sp, #72]	; 0x48
 8011822:	2b00      	cmp	r3, #0
 8011824:	f300 8093 	bgt.w	801194e <_strtod_l+0x85e>
 8011828:	9b06      	ldr	r3, [sp, #24]
 801182a:	2b00      	cmp	r3, #0
 801182c:	dd08      	ble.n	8011840 <_strtod_l+0x750>
 801182e:	4639      	mov	r1, r7
 8011830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011832:	4620      	mov	r0, r4
 8011834:	f001 fadc 	bl	8012df0 <__pow5mult>
 8011838:	4607      	mov	r7, r0
 801183a:	2800      	cmp	r0, #0
 801183c:	f43f ae96 	beq.w	801156c <_strtod_l+0x47c>
 8011840:	f1ba 0f00 	cmp.w	sl, #0
 8011844:	dd08      	ble.n	8011858 <_strtod_l+0x768>
 8011846:	4639      	mov	r1, r7
 8011848:	4652      	mov	r2, sl
 801184a:	4620      	mov	r0, r4
 801184c:	f001 fb2a 	bl	8012ea4 <__lshift>
 8011850:	4607      	mov	r7, r0
 8011852:	2800      	cmp	r0, #0
 8011854:	f43f ae8a 	beq.w	801156c <_strtod_l+0x47c>
 8011858:	f1bb 0f00 	cmp.w	fp, #0
 801185c:	dd08      	ble.n	8011870 <_strtod_l+0x780>
 801185e:	4631      	mov	r1, r6
 8011860:	465a      	mov	r2, fp
 8011862:	4620      	mov	r0, r4
 8011864:	f001 fb1e 	bl	8012ea4 <__lshift>
 8011868:	4606      	mov	r6, r0
 801186a:	2800      	cmp	r0, #0
 801186c:	f43f ae7e 	beq.w	801156c <_strtod_l+0x47c>
 8011870:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011872:	463a      	mov	r2, r7
 8011874:	4620      	mov	r0, r4
 8011876:	f001 fb9d 	bl	8012fb4 <__mdiff>
 801187a:	4605      	mov	r5, r0
 801187c:	2800      	cmp	r0, #0
 801187e:	f43f ae75 	beq.w	801156c <_strtod_l+0x47c>
 8011882:	2300      	movs	r3, #0
 8011884:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8011888:	60c3      	str	r3, [r0, #12]
 801188a:	4631      	mov	r1, r6
 801188c:	f001 fb76 	bl	8012f7c <__mcmp>
 8011890:	2800      	cmp	r0, #0
 8011892:	da7f      	bge.n	8011994 <_strtod_l+0x8a4>
 8011894:	ea5a 0a08 	orrs.w	sl, sl, r8
 8011898:	f040 80a5 	bne.w	80119e6 <_strtod_l+0x8f6>
 801189c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f040 80a0 	bne.w	80119e6 <_strtod_l+0x8f6>
 80118a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80118aa:	0d1b      	lsrs	r3, r3, #20
 80118ac:	051b      	lsls	r3, r3, #20
 80118ae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80118b2:	f240 8098 	bls.w	80119e6 <_strtod_l+0x8f6>
 80118b6:	696b      	ldr	r3, [r5, #20]
 80118b8:	b91b      	cbnz	r3, 80118c2 <_strtod_l+0x7d2>
 80118ba:	692b      	ldr	r3, [r5, #16]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	f340 8092 	ble.w	80119e6 <_strtod_l+0x8f6>
 80118c2:	4629      	mov	r1, r5
 80118c4:	2201      	movs	r2, #1
 80118c6:	4620      	mov	r0, r4
 80118c8:	f001 faec 	bl	8012ea4 <__lshift>
 80118cc:	4631      	mov	r1, r6
 80118ce:	4605      	mov	r5, r0
 80118d0:	f001 fb54 	bl	8012f7c <__mcmp>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	f340 8086 	ble.w	80119e6 <_strtod_l+0x8f6>
 80118da:	9905      	ldr	r1, [sp, #20]
 80118dc:	4a2c      	ldr	r2, [pc, #176]	; (8011990 <_strtod_l+0x8a0>)
 80118de:	464b      	mov	r3, r9
 80118e0:	2900      	cmp	r1, #0
 80118e2:	f000 809f 	beq.w	8011a24 <_strtod_l+0x934>
 80118e6:	ea02 0109 	and.w	r1, r2, r9
 80118ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80118ee:	f300 8099 	bgt.w	8011a24 <_strtod_l+0x934>
 80118f2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80118f6:	f77f aea8 	ble.w	801164a <_strtod_l+0x55a>
 80118fa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011980 <_strtod_l+0x890>
 80118fe:	ec49 8b16 	vmov	d6, r8, r9
 8011902:	4b23      	ldr	r3, [pc, #140]	; (8011990 <_strtod_l+0x8a0>)
 8011904:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011908:	ee17 2a90 	vmov	r2, s15
 801190c:	4013      	ands	r3, r2
 801190e:	ec59 8b17 	vmov	r8, r9, d7
 8011912:	2b00      	cmp	r3, #0
 8011914:	f47f ae34 	bne.w	8011580 <_strtod_l+0x490>
 8011918:	2322      	movs	r3, #34	; 0x22
 801191a:	6023      	str	r3, [r4, #0]
 801191c:	e630      	b.n	8011580 <_strtod_l+0x490>
 801191e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011922:	fa01 f202 	lsl.w	r2, r1, r2
 8011926:	ea02 0808 	and.w	r8, r2, r8
 801192a:	e6da      	b.n	80116e2 <_strtod_l+0x5f2>
 801192c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011930:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011934:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011938:	33e2      	adds	r3, #226	; 0xe2
 801193a:	fa00 f303 	lsl.w	r3, r0, r3
 801193e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8011942:	e73f      	b.n	80117c4 <_strtod_l+0x6d4>
 8011944:	2200      	movs	r2, #0
 8011946:	2301      	movs	r3, #1
 8011948:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801194c:	e73a      	b.n	80117c4 <_strtod_l+0x6d4>
 801194e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011950:	461a      	mov	r2, r3
 8011952:	4620      	mov	r0, r4
 8011954:	f001 faa6 	bl	8012ea4 <__lshift>
 8011958:	9012      	str	r0, [sp, #72]	; 0x48
 801195a:	2800      	cmp	r0, #0
 801195c:	f47f af64 	bne.w	8011828 <_strtod_l+0x738>
 8011960:	e604      	b.n	801156c <_strtod_l+0x47c>
 8011962:	bf00      	nop
 8011964:	f3af 8000 	nop.w
 8011968:	94a03595 	.word	0x94a03595
 801196c:	3fcfffff 	.word	0x3fcfffff
 8011970:	94a03595 	.word	0x94a03595
 8011974:	3fdfffff 	.word	0x3fdfffff
 8011978:	35afe535 	.word	0x35afe535
 801197c:	3fe00000 	.word	0x3fe00000
 8011980:	00000000 	.word	0x00000000
 8011984:	39500000 	.word	0x39500000
 8011988:	08016970 	.word	0x08016970
 801198c:	fffffc02 	.word	0xfffffc02
 8011990:	7ff00000 	.word	0x7ff00000
 8011994:	46cb      	mov	fp, r9
 8011996:	d15f      	bne.n	8011a58 <_strtod_l+0x968>
 8011998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801199c:	f1ba 0f00 	cmp.w	sl, #0
 80119a0:	d02a      	beq.n	80119f8 <_strtod_l+0x908>
 80119a2:	4aa7      	ldr	r2, [pc, #668]	; (8011c40 <_strtod_l+0xb50>)
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d12b      	bne.n	8011a00 <_strtod_l+0x910>
 80119a8:	9b05      	ldr	r3, [sp, #20]
 80119aa:	4642      	mov	r2, r8
 80119ac:	b1fb      	cbz	r3, 80119ee <_strtod_l+0x8fe>
 80119ae:	4ba5      	ldr	r3, [pc, #660]	; (8011c44 <_strtod_l+0xb54>)
 80119b0:	ea09 0303 	and.w	r3, r9, r3
 80119b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80119b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80119bc:	d81a      	bhi.n	80119f4 <_strtod_l+0x904>
 80119be:	0d1b      	lsrs	r3, r3, #20
 80119c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80119c4:	fa01 f303 	lsl.w	r3, r1, r3
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d119      	bne.n	8011a00 <_strtod_l+0x910>
 80119cc:	4b9e      	ldr	r3, [pc, #632]	; (8011c48 <_strtod_l+0xb58>)
 80119ce:	459b      	cmp	fp, r3
 80119d0:	d102      	bne.n	80119d8 <_strtod_l+0x8e8>
 80119d2:	3201      	adds	r2, #1
 80119d4:	f43f adca 	beq.w	801156c <_strtod_l+0x47c>
 80119d8:	4b9a      	ldr	r3, [pc, #616]	; (8011c44 <_strtod_l+0xb54>)
 80119da:	ea0b 0303 	and.w	r3, fp, r3
 80119de:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80119e2:	f04f 0800 	mov.w	r8, #0
 80119e6:	9b05      	ldr	r3, [sp, #20]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d186      	bne.n	80118fa <_strtod_l+0x80a>
 80119ec:	e5c8      	b.n	8011580 <_strtod_l+0x490>
 80119ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119f2:	e7e9      	b.n	80119c8 <_strtod_l+0x8d8>
 80119f4:	460b      	mov	r3, r1
 80119f6:	e7e7      	b.n	80119c8 <_strtod_l+0x8d8>
 80119f8:	ea53 0308 	orrs.w	r3, r3, r8
 80119fc:	f43f af6d 	beq.w	80118da <_strtod_l+0x7ea>
 8011a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a02:	b1cb      	cbz	r3, 8011a38 <_strtod_l+0x948>
 8011a04:	ea13 0f0b 	tst.w	r3, fp
 8011a08:	d0ed      	beq.n	80119e6 <_strtod_l+0x8f6>
 8011a0a:	9a05      	ldr	r2, [sp, #20]
 8011a0c:	4640      	mov	r0, r8
 8011a0e:	4649      	mov	r1, r9
 8011a10:	f1ba 0f00 	cmp.w	sl, #0
 8011a14:	d014      	beq.n	8011a40 <_strtod_l+0x950>
 8011a16:	f7ff fb51 	bl	80110bc <sulp>
 8011a1a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8011a1e:	ec59 8b17 	vmov	r8, r9, d7
 8011a22:	e7e0      	b.n	80119e6 <_strtod_l+0x8f6>
 8011a24:	4013      	ands	r3, r2
 8011a26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a2a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011a2e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011a32:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011a36:	e7d6      	b.n	80119e6 <_strtod_l+0x8f6>
 8011a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a3a:	ea13 0f08 	tst.w	r3, r8
 8011a3e:	e7e3      	b.n	8011a08 <_strtod_l+0x918>
 8011a40:	f7ff fb3c 	bl	80110bc <sulp>
 8011a44:	ee38 0b40 	vsub.f64	d0, d8, d0
 8011a48:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a50:	ec59 8b10 	vmov	r8, r9, d0
 8011a54:	d1c7      	bne.n	80119e6 <_strtod_l+0x8f6>
 8011a56:	e5f8      	b.n	801164a <_strtod_l+0x55a>
 8011a58:	4631      	mov	r1, r6
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f001 fbfe 	bl	801325c <__ratio>
 8011a60:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011a64:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6c:	d85f      	bhi.n	8011b2e <_strtod_l+0xa3e>
 8011a6e:	f1ba 0f00 	cmp.w	sl, #0
 8011a72:	d166      	bne.n	8011b42 <_strtod_l+0xa52>
 8011a74:	f1b8 0f00 	cmp.w	r8, #0
 8011a78:	d14d      	bne.n	8011b16 <_strtod_l+0xa26>
 8011a7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a7e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d162      	bne.n	8011b4c <_strtod_l+0xa5c>
 8011a86:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8011a8a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8011a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a92:	d401      	bmi.n	8011a98 <_strtod_l+0x9a8>
 8011a94:	ee20 db0d 	vmul.f64	d13, d0, d13
 8011a98:	eeb1 cb4d 	vneg.f64	d12, d13
 8011a9c:	4869      	ldr	r0, [pc, #420]	; (8011c44 <_strtod_l+0xb54>)
 8011a9e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8011c50 <_strtod_l+0xb60>
 8011aa2:	ea0b 0100 	and.w	r1, fp, r0
 8011aa6:	4561      	cmp	r1, ip
 8011aa8:	ec53 2b1c 	vmov	r2, r3, d12
 8011aac:	d17a      	bne.n	8011ba4 <_strtod_l+0xab4>
 8011aae:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8011ab2:	ec49 8b10 	vmov	d0, r8, r9
 8011ab6:	910a      	str	r1, [sp, #40]	; 0x28
 8011ab8:	f001 fb06 	bl	80130c8 <__ulp>
 8011abc:	ec49 8b1e 	vmov	d14, r8, r9
 8011ac0:	4860      	ldr	r0, [pc, #384]	; (8011c44 <_strtod_l+0xb54>)
 8011ac2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8011ac6:	ee1e 3a90 	vmov	r3, s29
 8011aca:	4a60      	ldr	r2, [pc, #384]	; (8011c4c <_strtod_l+0xb5c>)
 8011acc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011ace:	4018      	ands	r0, r3
 8011ad0:	4290      	cmp	r0, r2
 8011ad2:	ec59 8b1e 	vmov	r8, r9, d14
 8011ad6:	d93c      	bls.n	8011b52 <_strtod_l+0xa62>
 8011ad8:	ee18 2a90 	vmov	r2, s17
 8011adc:	4b5a      	ldr	r3, [pc, #360]	; (8011c48 <_strtod_l+0xb58>)
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d104      	bne.n	8011aec <_strtod_l+0x9fc>
 8011ae2:	ee18 3a10 	vmov	r3, s16
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	f43f ad40 	beq.w	801156c <_strtod_l+0x47c>
 8011aec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8011c48 <_strtod_l+0xb58>
 8011af0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011af4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011af6:	4620      	mov	r0, r4
 8011af8:	f000 ffba 	bl	8012a70 <_Bfree>
 8011afc:	4639      	mov	r1, r7
 8011afe:	4620      	mov	r0, r4
 8011b00:	f000 ffb6 	bl	8012a70 <_Bfree>
 8011b04:	4631      	mov	r1, r6
 8011b06:	4620      	mov	r0, r4
 8011b08:	f000 ffb2 	bl	8012a70 <_Bfree>
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f000 ffae 	bl	8012a70 <_Bfree>
 8011b14:	e609      	b.n	801172a <_strtod_l+0x63a>
 8011b16:	f1b8 0f01 	cmp.w	r8, #1
 8011b1a:	d103      	bne.n	8011b24 <_strtod_l+0xa34>
 8011b1c:	f1b9 0f00 	cmp.w	r9, #0
 8011b20:	f43f ad93 	beq.w	801164a <_strtod_l+0x55a>
 8011b24:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8011b28:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8011b2c:	e7b6      	b.n	8011a9c <_strtod_l+0x9ac>
 8011b2e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8011b32:	ee20 db0d 	vmul.f64	d13, d0, d13
 8011b36:	f1ba 0f00 	cmp.w	sl, #0
 8011b3a:	d0ad      	beq.n	8011a98 <_strtod_l+0x9a8>
 8011b3c:	eeb0 cb4d 	vmov.f64	d12, d13
 8011b40:	e7ac      	b.n	8011a9c <_strtod_l+0x9ac>
 8011b42:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8011b46:	eeb0 db4c 	vmov.f64	d13, d12
 8011b4a:	e7a7      	b.n	8011a9c <_strtod_l+0x9ac>
 8011b4c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8011b50:	e7a4      	b.n	8011a9c <_strtod_l+0x9ac>
 8011b52:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8011b56:	9b05      	ldr	r3, [sp, #20]
 8011b58:	46cb      	mov	fp, r9
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d1ca      	bne.n	8011af4 <_strtod_l+0xa04>
 8011b5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b62:	0d1b      	lsrs	r3, r3, #20
 8011b64:	051b      	lsls	r3, r3, #20
 8011b66:	4299      	cmp	r1, r3
 8011b68:	d1c4      	bne.n	8011af4 <_strtod_l+0xa04>
 8011b6a:	ec51 0b1d 	vmov	r0, r1, d13
 8011b6e:	f7ee fd8b 	bl	8000688 <__aeabi_d2lz>
 8011b72:	f7ee fd43 	bl	80005fc <__aeabi_l2d>
 8011b76:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8011b7a:	ec41 0b17 	vmov	d7, r0, r1
 8011b7e:	ea4b 0b08 	orr.w	fp, fp, r8
 8011b82:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8011b86:	ee3d db47 	vsub.f64	d13, d13, d7
 8011b8a:	d03c      	beq.n	8011c06 <_strtod_l+0xb16>
 8011b8c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8011b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b94:	f53f acf4 	bmi.w	8011580 <_strtod_l+0x490>
 8011b98:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8011b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba0:	dda8      	ble.n	8011af4 <_strtod_l+0xa04>
 8011ba2:	e4ed      	b.n	8011580 <_strtod_l+0x490>
 8011ba4:	9805      	ldr	r0, [sp, #20]
 8011ba6:	b1f0      	cbz	r0, 8011be6 <_strtod_l+0xaf6>
 8011ba8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8011bac:	d81b      	bhi.n	8011be6 <_strtod_l+0xaf6>
 8011bae:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011c38 <_strtod_l+0xb48>
 8011bb2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8011bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bba:	d811      	bhi.n	8011be0 <_strtod_l+0xaf0>
 8011bbc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8011bc0:	ee1d 3a10 	vmov	r3, s26
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	bf38      	it	cc
 8011bc8:	2301      	movcc	r3, #1
 8011bca:	ee0d 3a10 	vmov	s26, r3
 8011bce:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8011bd2:	f1ba 0f00 	cmp.w	sl, #0
 8011bd6:	d113      	bne.n	8011c00 <_strtod_l+0xb10>
 8011bd8:	eeb1 7b4d 	vneg.f64	d7, d13
 8011bdc:	ec53 2b17 	vmov	r2, r3, d7
 8011be0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8011be4:	1a43      	subs	r3, r0, r1
 8011be6:	eeb0 0b48 	vmov.f64	d0, d8
 8011bea:	ec43 2b1c 	vmov	d12, r2, r3
 8011bee:	910a      	str	r1, [sp, #40]	; 0x28
 8011bf0:	f001 fa6a 	bl	80130c8 <__ulp>
 8011bf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011bf6:	eeac 8b00 	vfma.f64	d8, d12, d0
 8011bfa:	ec59 8b18 	vmov	r8, r9, d8
 8011bfe:	e7aa      	b.n	8011b56 <_strtod_l+0xa66>
 8011c00:	eeb0 7b4d 	vmov.f64	d7, d13
 8011c04:	e7ea      	b.n	8011bdc <_strtod_l+0xaec>
 8011c06:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8011c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0e:	f57f af71 	bpl.w	8011af4 <_strtod_l+0xa04>
 8011c12:	e4b5      	b.n	8011580 <_strtod_l+0x490>
 8011c14:	2300      	movs	r3, #0
 8011c16:	9308      	str	r3, [sp, #32]
 8011c18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c1c:	6013      	str	r3, [r2, #0]
 8011c1e:	f7ff baa6 	b.w	801116e <_strtod_l+0x7e>
 8011c22:	2a65      	cmp	r2, #101	; 0x65
 8011c24:	f43f aba2 	beq.w	801136c <_strtod_l+0x27c>
 8011c28:	2a45      	cmp	r2, #69	; 0x45
 8011c2a:	f43f ab9f 	beq.w	801136c <_strtod_l+0x27c>
 8011c2e:	2101      	movs	r1, #1
 8011c30:	f7ff bbd8 	b.w	80113e4 <_strtod_l+0x2f4>
 8011c34:	f3af 8000 	nop.w
 8011c38:	ffc00000 	.word	0xffc00000
 8011c3c:	41dfffff 	.word	0x41dfffff
 8011c40:	000fffff 	.word	0x000fffff
 8011c44:	7ff00000 	.word	0x7ff00000
 8011c48:	7fefffff 	.word	0x7fefffff
 8011c4c:	7c9fffff 	.word	0x7c9fffff
 8011c50:	7fe00000 	.word	0x7fe00000

08011c54 <strtod>:
 8011c54:	460a      	mov	r2, r1
 8011c56:	4601      	mov	r1, r0
 8011c58:	4802      	ldr	r0, [pc, #8]	; (8011c64 <strtod+0x10>)
 8011c5a:	4b03      	ldr	r3, [pc, #12]	; (8011c68 <strtod+0x14>)
 8011c5c:	6800      	ldr	r0, [r0, #0]
 8011c5e:	f7ff ba47 	b.w	80110f0 <_strtod_l>
 8011c62:	bf00      	nop
 8011c64:	200001f0 	.word	0x200001f0
 8011c68:	20000038 	.word	0x20000038

08011c6c <std>:
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	b510      	push	{r4, lr}
 8011c70:	4604      	mov	r4, r0
 8011c72:	e9c0 3300 	strd	r3, r3, [r0]
 8011c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c7a:	6083      	str	r3, [r0, #8]
 8011c7c:	8181      	strh	r1, [r0, #12]
 8011c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8011c80:	81c2      	strh	r2, [r0, #14]
 8011c82:	6183      	str	r3, [r0, #24]
 8011c84:	4619      	mov	r1, r3
 8011c86:	2208      	movs	r2, #8
 8011c88:	305c      	adds	r0, #92	; 0x5c
 8011c8a:	f000 f916 	bl	8011eba <memset>
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	; (8011cc4 <std+0x58>)
 8011c90:	6263      	str	r3, [r4, #36]	; 0x24
 8011c92:	4b0d      	ldr	r3, [pc, #52]	; (8011cc8 <std+0x5c>)
 8011c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c96:	4b0d      	ldr	r3, [pc, #52]	; (8011ccc <std+0x60>)
 8011c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c9a:	4b0d      	ldr	r3, [pc, #52]	; (8011cd0 <std+0x64>)
 8011c9c:	6323      	str	r3, [r4, #48]	; 0x30
 8011c9e:	4b0d      	ldr	r3, [pc, #52]	; (8011cd4 <std+0x68>)
 8011ca0:	6224      	str	r4, [r4, #32]
 8011ca2:	429c      	cmp	r4, r3
 8011ca4:	d006      	beq.n	8011cb4 <std+0x48>
 8011ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011caa:	4294      	cmp	r4, r2
 8011cac:	d002      	beq.n	8011cb4 <std+0x48>
 8011cae:	33d0      	adds	r3, #208	; 0xd0
 8011cb0:	429c      	cmp	r4, r3
 8011cb2:	d105      	bne.n	8011cc0 <std+0x54>
 8011cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cbc:	f000 b9f6 	b.w	80120ac <__retarget_lock_init_recursive>
 8011cc0:	bd10      	pop	{r4, pc}
 8011cc2:	bf00      	nop
 8011cc4:	08011e15 	.word	0x08011e15
 8011cc8:	08011e37 	.word	0x08011e37
 8011ccc:	08011e6f 	.word	0x08011e6f
 8011cd0:	08011e93 	.word	0x08011e93
 8011cd4:	2000a92c 	.word	0x2000a92c

08011cd8 <stdio_exit_handler>:
 8011cd8:	4a02      	ldr	r2, [pc, #8]	; (8011ce4 <stdio_exit_handler+0xc>)
 8011cda:	4903      	ldr	r1, [pc, #12]	; (8011ce8 <stdio_exit_handler+0x10>)
 8011cdc:	4803      	ldr	r0, [pc, #12]	; (8011cec <stdio_exit_handler+0x14>)
 8011cde:	f000 b869 	b.w	8011db4 <_fwalk_sglue>
 8011ce2:	bf00      	nop
 8011ce4:	2000002c 	.word	0x2000002c
 8011ce8:	08013a11 	.word	0x08013a11
 8011cec:	200001a4 	.word	0x200001a4

08011cf0 <cleanup_stdio>:
 8011cf0:	6841      	ldr	r1, [r0, #4]
 8011cf2:	4b0c      	ldr	r3, [pc, #48]	; (8011d24 <cleanup_stdio+0x34>)
 8011cf4:	4299      	cmp	r1, r3
 8011cf6:	b510      	push	{r4, lr}
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	d001      	beq.n	8011d00 <cleanup_stdio+0x10>
 8011cfc:	f001 fe88 	bl	8013a10 <_fflush_r>
 8011d00:	68a1      	ldr	r1, [r4, #8]
 8011d02:	4b09      	ldr	r3, [pc, #36]	; (8011d28 <cleanup_stdio+0x38>)
 8011d04:	4299      	cmp	r1, r3
 8011d06:	d002      	beq.n	8011d0e <cleanup_stdio+0x1e>
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f001 fe81 	bl	8013a10 <_fflush_r>
 8011d0e:	68e1      	ldr	r1, [r4, #12]
 8011d10:	4b06      	ldr	r3, [pc, #24]	; (8011d2c <cleanup_stdio+0x3c>)
 8011d12:	4299      	cmp	r1, r3
 8011d14:	d004      	beq.n	8011d20 <cleanup_stdio+0x30>
 8011d16:	4620      	mov	r0, r4
 8011d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d1c:	f001 be78 	b.w	8013a10 <_fflush_r>
 8011d20:	bd10      	pop	{r4, pc}
 8011d22:	bf00      	nop
 8011d24:	2000a92c 	.word	0x2000a92c
 8011d28:	2000a994 	.word	0x2000a994
 8011d2c:	2000a9fc 	.word	0x2000a9fc

08011d30 <global_stdio_init.part.0>:
 8011d30:	b510      	push	{r4, lr}
 8011d32:	4b0b      	ldr	r3, [pc, #44]	; (8011d60 <global_stdio_init.part.0+0x30>)
 8011d34:	4c0b      	ldr	r4, [pc, #44]	; (8011d64 <global_stdio_init.part.0+0x34>)
 8011d36:	4a0c      	ldr	r2, [pc, #48]	; (8011d68 <global_stdio_init.part.0+0x38>)
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	2104      	movs	r1, #4
 8011d40:	f7ff ff94 	bl	8011c6c <std>
 8011d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011d48:	2201      	movs	r2, #1
 8011d4a:	2109      	movs	r1, #9
 8011d4c:	f7ff ff8e 	bl	8011c6c <std>
 8011d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011d54:	2202      	movs	r2, #2
 8011d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d5a:	2112      	movs	r1, #18
 8011d5c:	f7ff bf86 	b.w	8011c6c <std>
 8011d60:	2000aa64 	.word	0x2000aa64
 8011d64:	2000a92c 	.word	0x2000a92c
 8011d68:	08011cd9 	.word	0x08011cd9

08011d6c <__sfp_lock_acquire>:
 8011d6c:	4801      	ldr	r0, [pc, #4]	; (8011d74 <__sfp_lock_acquire+0x8>)
 8011d6e:	f000 b99e 	b.w	80120ae <__retarget_lock_acquire_recursive>
 8011d72:	bf00      	nop
 8011d74:	2000aa6d 	.word	0x2000aa6d

08011d78 <__sfp_lock_release>:
 8011d78:	4801      	ldr	r0, [pc, #4]	; (8011d80 <__sfp_lock_release+0x8>)
 8011d7a:	f000 b999 	b.w	80120b0 <__retarget_lock_release_recursive>
 8011d7e:	bf00      	nop
 8011d80:	2000aa6d 	.word	0x2000aa6d

08011d84 <__sinit>:
 8011d84:	b510      	push	{r4, lr}
 8011d86:	4604      	mov	r4, r0
 8011d88:	f7ff fff0 	bl	8011d6c <__sfp_lock_acquire>
 8011d8c:	6a23      	ldr	r3, [r4, #32]
 8011d8e:	b11b      	cbz	r3, 8011d98 <__sinit+0x14>
 8011d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d94:	f7ff bff0 	b.w	8011d78 <__sfp_lock_release>
 8011d98:	4b04      	ldr	r3, [pc, #16]	; (8011dac <__sinit+0x28>)
 8011d9a:	6223      	str	r3, [r4, #32]
 8011d9c:	4b04      	ldr	r3, [pc, #16]	; (8011db0 <__sinit+0x2c>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d1f5      	bne.n	8011d90 <__sinit+0xc>
 8011da4:	f7ff ffc4 	bl	8011d30 <global_stdio_init.part.0>
 8011da8:	e7f2      	b.n	8011d90 <__sinit+0xc>
 8011daa:	bf00      	nop
 8011dac:	08011cf1 	.word	0x08011cf1
 8011db0:	2000aa64 	.word	0x2000aa64

08011db4 <_fwalk_sglue>:
 8011db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011db8:	4607      	mov	r7, r0
 8011dba:	4688      	mov	r8, r1
 8011dbc:	4614      	mov	r4, r2
 8011dbe:	2600      	movs	r6, #0
 8011dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8011dc8:	d505      	bpl.n	8011dd6 <_fwalk_sglue+0x22>
 8011dca:	6824      	ldr	r4, [r4, #0]
 8011dcc:	2c00      	cmp	r4, #0
 8011dce:	d1f7      	bne.n	8011dc0 <_fwalk_sglue+0xc>
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dd6:	89ab      	ldrh	r3, [r5, #12]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d907      	bls.n	8011dec <_fwalk_sglue+0x38>
 8011ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011de0:	3301      	adds	r3, #1
 8011de2:	d003      	beq.n	8011dec <_fwalk_sglue+0x38>
 8011de4:	4629      	mov	r1, r5
 8011de6:	4638      	mov	r0, r7
 8011de8:	47c0      	blx	r8
 8011dea:	4306      	orrs	r6, r0
 8011dec:	3568      	adds	r5, #104	; 0x68
 8011dee:	e7e9      	b.n	8011dc4 <_fwalk_sglue+0x10>

08011df0 <iprintf>:
 8011df0:	b40f      	push	{r0, r1, r2, r3}
 8011df2:	b507      	push	{r0, r1, r2, lr}
 8011df4:	4906      	ldr	r1, [pc, #24]	; (8011e10 <iprintf+0x20>)
 8011df6:	ab04      	add	r3, sp, #16
 8011df8:	6808      	ldr	r0, [r1, #0]
 8011dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dfe:	6881      	ldr	r1, [r0, #8]
 8011e00:	9301      	str	r3, [sp, #4]
 8011e02:	f001 fad5 	bl	80133b0 <_vfiprintf_r>
 8011e06:	b003      	add	sp, #12
 8011e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e0c:	b004      	add	sp, #16
 8011e0e:	4770      	bx	lr
 8011e10:	200001f0 	.word	0x200001f0

08011e14 <__sread>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	460c      	mov	r4, r1
 8011e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e1c:	f000 f8f8 	bl	8012010 <_read_r>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	bfab      	itete	ge
 8011e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011e26:	89a3      	ldrhlt	r3, [r4, #12]
 8011e28:	181b      	addge	r3, r3, r0
 8011e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011e2e:	bfac      	ite	ge
 8011e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8011e32:	81a3      	strhlt	r3, [r4, #12]
 8011e34:	bd10      	pop	{r4, pc}

08011e36 <__swrite>:
 8011e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e3a:	461f      	mov	r7, r3
 8011e3c:	898b      	ldrh	r3, [r1, #12]
 8011e3e:	05db      	lsls	r3, r3, #23
 8011e40:	4605      	mov	r5, r0
 8011e42:	460c      	mov	r4, r1
 8011e44:	4616      	mov	r6, r2
 8011e46:	d505      	bpl.n	8011e54 <__swrite+0x1e>
 8011e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e4c:	2302      	movs	r3, #2
 8011e4e:	2200      	movs	r2, #0
 8011e50:	f000 f8cc 	bl	8011fec <_lseek_r>
 8011e54:	89a3      	ldrh	r3, [r4, #12]
 8011e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e5e:	81a3      	strh	r3, [r4, #12]
 8011e60:	4632      	mov	r2, r6
 8011e62:	463b      	mov	r3, r7
 8011e64:	4628      	mov	r0, r5
 8011e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6a:	f000 b8e3 	b.w	8012034 <_write_r>

08011e6e <__sseek>:
 8011e6e:	b510      	push	{r4, lr}
 8011e70:	460c      	mov	r4, r1
 8011e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e76:	f000 f8b9 	bl	8011fec <_lseek_r>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	bf15      	itete	ne
 8011e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8011e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011e8a:	81a3      	strheq	r3, [r4, #12]
 8011e8c:	bf18      	it	ne
 8011e8e:	81a3      	strhne	r3, [r4, #12]
 8011e90:	bd10      	pop	{r4, pc}

08011e92 <__sclose>:
 8011e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e96:	f000 b899 	b.w	8011fcc <_close_r>

08011e9a <memcmp>:
 8011e9a:	b510      	push	{r4, lr}
 8011e9c:	3901      	subs	r1, #1
 8011e9e:	4402      	add	r2, r0
 8011ea0:	4290      	cmp	r0, r2
 8011ea2:	d101      	bne.n	8011ea8 <memcmp+0xe>
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	e005      	b.n	8011eb4 <memcmp+0x1a>
 8011ea8:	7803      	ldrb	r3, [r0, #0]
 8011eaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011eae:	42a3      	cmp	r3, r4
 8011eb0:	d001      	beq.n	8011eb6 <memcmp+0x1c>
 8011eb2:	1b18      	subs	r0, r3, r4
 8011eb4:	bd10      	pop	{r4, pc}
 8011eb6:	3001      	adds	r0, #1
 8011eb8:	e7f2      	b.n	8011ea0 <memcmp+0x6>

08011eba <memset>:
 8011eba:	4402      	add	r2, r0
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d100      	bne.n	8011ec4 <memset+0xa>
 8011ec2:	4770      	bx	lr
 8011ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8011ec8:	e7f9      	b.n	8011ebe <memset+0x4>

08011eca <strncmp>:
 8011eca:	b510      	push	{r4, lr}
 8011ecc:	b16a      	cbz	r2, 8011eea <strncmp+0x20>
 8011ece:	3901      	subs	r1, #1
 8011ed0:	1884      	adds	r4, r0, r2
 8011ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ed6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d103      	bne.n	8011ee6 <strncmp+0x1c>
 8011ede:	42a0      	cmp	r0, r4
 8011ee0:	d001      	beq.n	8011ee6 <strncmp+0x1c>
 8011ee2:	2a00      	cmp	r2, #0
 8011ee4:	d1f5      	bne.n	8011ed2 <strncmp+0x8>
 8011ee6:	1ad0      	subs	r0, r2, r3
 8011ee8:	bd10      	pop	{r4, pc}
 8011eea:	4610      	mov	r0, r2
 8011eec:	e7fc      	b.n	8011ee8 <strncmp+0x1e>

08011eee <strncpy>:
 8011eee:	b510      	push	{r4, lr}
 8011ef0:	3901      	subs	r1, #1
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	b132      	cbz	r2, 8011f04 <strncpy+0x16>
 8011ef6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011efa:	f803 4b01 	strb.w	r4, [r3], #1
 8011efe:	3a01      	subs	r2, #1
 8011f00:	2c00      	cmp	r4, #0
 8011f02:	d1f7      	bne.n	8011ef4 <strncpy+0x6>
 8011f04:	441a      	add	r2, r3
 8011f06:	2100      	movs	r1, #0
 8011f08:	4293      	cmp	r3, r2
 8011f0a:	d100      	bne.n	8011f0e <strncpy+0x20>
 8011f0c:	bd10      	pop	{r4, pc}
 8011f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8011f12:	e7f9      	b.n	8011f08 <strncpy+0x1a>

08011f14 <strtok>:
 8011f14:	4b16      	ldr	r3, [pc, #88]	; (8011f70 <strtok+0x5c>)
 8011f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f18:	681e      	ldr	r6, [r3, #0]
 8011f1a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011f1c:	4605      	mov	r5, r0
 8011f1e:	b9fc      	cbnz	r4, 8011f60 <strtok+0x4c>
 8011f20:	2050      	movs	r0, #80	; 0x50
 8011f22:	9101      	str	r1, [sp, #4]
 8011f24:	f000 fc9e 	bl	8012864 <malloc>
 8011f28:	9901      	ldr	r1, [sp, #4]
 8011f2a:	6470      	str	r0, [r6, #68]	; 0x44
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	b920      	cbnz	r0, 8011f3a <strtok+0x26>
 8011f30:	4b10      	ldr	r3, [pc, #64]	; (8011f74 <strtok+0x60>)
 8011f32:	4811      	ldr	r0, [pc, #68]	; (8011f78 <strtok+0x64>)
 8011f34:	215b      	movs	r1, #91	; 0x5b
 8011f36:	f000 f8d3 	bl	80120e0 <__assert_func>
 8011f3a:	e9c0 4400 	strd	r4, r4, [r0]
 8011f3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011f42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011f46:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011f4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011f4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011f52:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011f56:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011f5a:	6184      	str	r4, [r0, #24]
 8011f5c:	7704      	strb	r4, [r0, #28]
 8011f5e:	6244      	str	r4, [r0, #36]	; 0x24
 8011f60:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8011f62:	2301      	movs	r3, #1
 8011f64:	4628      	mov	r0, r5
 8011f66:	b002      	add	sp, #8
 8011f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f6c:	f000 b806 	b.w	8011f7c <__strtok_r>
 8011f70:	200001f0 	.word	0x200001f0
 8011f74:	080168c6 	.word	0x080168c6
 8011f78:	08016a99 	.word	0x08016a99

08011f7c <__strtok_r>:
 8011f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f7e:	b908      	cbnz	r0, 8011f84 <__strtok_r+0x8>
 8011f80:	6810      	ldr	r0, [r2, #0]
 8011f82:	b188      	cbz	r0, 8011fa8 <__strtok_r+0x2c>
 8011f84:	4604      	mov	r4, r0
 8011f86:	4620      	mov	r0, r4
 8011f88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011f8c:	460f      	mov	r7, r1
 8011f8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011f92:	b91e      	cbnz	r6, 8011f9c <__strtok_r+0x20>
 8011f94:	b965      	cbnz	r5, 8011fb0 <__strtok_r+0x34>
 8011f96:	6015      	str	r5, [r2, #0]
 8011f98:	4628      	mov	r0, r5
 8011f9a:	e005      	b.n	8011fa8 <__strtok_r+0x2c>
 8011f9c:	42b5      	cmp	r5, r6
 8011f9e:	d1f6      	bne.n	8011f8e <__strtok_r+0x12>
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1f0      	bne.n	8011f86 <__strtok_r+0xa>
 8011fa4:	6014      	str	r4, [r2, #0]
 8011fa6:	7003      	strb	r3, [r0, #0]
 8011fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011faa:	461c      	mov	r4, r3
 8011fac:	e00c      	b.n	8011fc8 <__strtok_r+0x4c>
 8011fae:	b915      	cbnz	r5, 8011fb6 <__strtok_r+0x3a>
 8011fb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011fb4:	460e      	mov	r6, r1
 8011fb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011fba:	42ab      	cmp	r3, r5
 8011fbc:	d1f7      	bne.n	8011fae <__strtok_r+0x32>
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d0f3      	beq.n	8011faa <__strtok_r+0x2e>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011fc8:	6014      	str	r4, [r2, #0]
 8011fca:	e7ed      	b.n	8011fa8 <__strtok_r+0x2c>

08011fcc <_close_r>:
 8011fcc:	b538      	push	{r3, r4, r5, lr}
 8011fce:	4d06      	ldr	r5, [pc, #24]	; (8011fe8 <_close_r+0x1c>)
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	4608      	mov	r0, r1
 8011fd6:	602b      	str	r3, [r5, #0]
 8011fd8:	f7ef fbc7 	bl	800176a <_close>
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	d102      	bne.n	8011fe6 <_close_r+0x1a>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	b103      	cbz	r3, 8011fe6 <_close_r+0x1a>
 8011fe4:	6023      	str	r3, [r4, #0]
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	2000aa68 	.word	0x2000aa68

08011fec <_lseek_r>:
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	4d07      	ldr	r5, [pc, #28]	; (801200c <_lseek_r+0x20>)
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	4608      	mov	r0, r1
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	602a      	str	r2, [r5, #0]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	f7ef fbdc 	bl	80017b8 <_lseek>
 8012000:	1c43      	adds	r3, r0, #1
 8012002:	d102      	bne.n	801200a <_lseek_r+0x1e>
 8012004:	682b      	ldr	r3, [r5, #0]
 8012006:	b103      	cbz	r3, 801200a <_lseek_r+0x1e>
 8012008:	6023      	str	r3, [r4, #0]
 801200a:	bd38      	pop	{r3, r4, r5, pc}
 801200c:	2000aa68 	.word	0x2000aa68

08012010 <_read_r>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	4d07      	ldr	r5, [pc, #28]	; (8012030 <_read_r+0x20>)
 8012014:	4604      	mov	r4, r0
 8012016:	4608      	mov	r0, r1
 8012018:	4611      	mov	r1, r2
 801201a:	2200      	movs	r2, #0
 801201c:	602a      	str	r2, [r5, #0]
 801201e:	461a      	mov	r2, r3
 8012020:	f7ef fb6a 	bl	80016f8 <_read>
 8012024:	1c43      	adds	r3, r0, #1
 8012026:	d102      	bne.n	801202e <_read_r+0x1e>
 8012028:	682b      	ldr	r3, [r5, #0]
 801202a:	b103      	cbz	r3, 801202e <_read_r+0x1e>
 801202c:	6023      	str	r3, [r4, #0]
 801202e:	bd38      	pop	{r3, r4, r5, pc}
 8012030:	2000aa68 	.word	0x2000aa68

08012034 <_write_r>:
 8012034:	b538      	push	{r3, r4, r5, lr}
 8012036:	4d07      	ldr	r5, [pc, #28]	; (8012054 <_write_r+0x20>)
 8012038:	4604      	mov	r4, r0
 801203a:	4608      	mov	r0, r1
 801203c:	4611      	mov	r1, r2
 801203e:	2200      	movs	r2, #0
 8012040:	602a      	str	r2, [r5, #0]
 8012042:	461a      	mov	r2, r3
 8012044:	f7ef fb75 	bl	8001732 <_write>
 8012048:	1c43      	adds	r3, r0, #1
 801204a:	d102      	bne.n	8012052 <_write_r+0x1e>
 801204c:	682b      	ldr	r3, [r5, #0]
 801204e:	b103      	cbz	r3, 8012052 <_write_r+0x1e>
 8012050:	6023      	str	r3, [r4, #0]
 8012052:	bd38      	pop	{r3, r4, r5, pc}
 8012054:	2000aa68 	.word	0x2000aa68

08012058 <__errno>:
 8012058:	4b01      	ldr	r3, [pc, #4]	; (8012060 <__errno+0x8>)
 801205a:	6818      	ldr	r0, [r3, #0]
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	200001f0 	.word	0x200001f0

08012064 <__libc_init_array>:
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	4d0d      	ldr	r5, [pc, #52]	; (801209c <__libc_init_array+0x38>)
 8012068:	4c0d      	ldr	r4, [pc, #52]	; (80120a0 <__libc_init_array+0x3c>)
 801206a:	1b64      	subs	r4, r4, r5
 801206c:	10a4      	asrs	r4, r4, #2
 801206e:	2600      	movs	r6, #0
 8012070:	42a6      	cmp	r6, r4
 8012072:	d109      	bne.n	8012088 <__libc_init_array+0x24>
 8012074:	4d0b      	ldr	r5, [pc, #44]	; (80120a4 <__libc_init_array+0x40>)
 8012076:	4c0c      	ldr	r4, [pc, #48]	; (80120a8 <__libc_init_array+0x44>)
 8012078:	f001 fe90 	bl	8013d9c <_init>
 801207c:	1b64      	subs	r4, r4, r5
 801207e:	10a4      	asrs	r4, r4, #2
 8012080:	2600      	movs	r6, #0
 8012082:	42a6      	cmp	r6, r4
 8012084:	d105      	bne.n	8012092 <__libc_init_array+0x2e>
 8012086:	bd70      	pop	{r4, r5, r6, pc}
 8012088:	f855 3b04 	ldr.w	r3, [r5], #4
 801208c:	4798      	blx	r3
 801208e:	3601      	adds	r6, #1
 8012090:	e7ee      	b.n	8012070 <__libc_init_array+0xc>
 8012092:	f855 3b04 	ldr.w	r3, [r5], #4
 8012096:	4798      	blx	r3
 8012098:	3601      	adds	r6, #1
 801209a:	e7f2      	b.n	8012082 <__libc_init_array+0x1e>
 801209c:	08016d40 	.word	0x08016d40
 80120a0:	08016d40 	.word	0x08016d40
 80120a4:	08016d40 	.word	0x08016d40
 80120a8:	08016d44 	.word	0x08016d44

080120ac <__retarget_lock_init_recursive>:
 80120ac:	4770      	bx	lr

080120ae <__retarget_lock_acquire_recursive>:
 80120ae:	4770      	bx	lr

080120b0 <__retarget_lock_release_recursive>:
 80120b0:	4770      	bx	lr

080120b2 <memcpy>:
 80120b2:	440a      	add	r2, r1
 80120b4:	4291      	cmp	r1, r2
 80120b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80120ba:	d100      	bne.n	80120be <memcpy+0xc>
 80120bc:	4770      	bx	lr
 80120be:	b510      	push	{r4, lr}
 80120c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120c8:	4291      	cmp	r1, r2
 80120ca:	d1f9      	bne.n	80120c0 <memcpy+0xe>
 80120cc:	bd10      	pop	{r4, pc}
	...

080120d0 <nan>:
 80120d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80120d8 <nan+0x8>
 80120d4:	4770      	bx	lr
 80120d6:	bf00      	nop
 80120d8:	00000000 	.word	0x00000000
 80120dc:	7ff80000 	.word	0x7ff80000

080120e0 <__assert_func>:
 80120e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120e2:	4614      	mov	r4, r2
 80120e4:	461a      	mov	r2, r3
 80120e6:	4b09      	ldr	r3, [pc, #36]	; (801210c <__assert_func+0x2c>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4605      	mov	r5, r0
 80120ec:	68d8      	ldr	r0, [r3, #12]
 80120ee:	b14c      	cbz	r4, 8012104 <__assert_func+0x24>
 80120f0:	4b07      	ldr	r3, [pc, #28]	; (8012110 <__assert_func+0x30>)
 80120f2:	9100      	str	r1, [sp, #0]
 80120f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120f8:	4906      	ldr	r1, [pc, #24]	; (8012114 <__assert_func+0x34>)
 80120fa:	462b      	mov	r3, r5
 80120fc:	f001 fcb0 	bl	8013a60 <fiprintf>
 8012100:	f001 fd66 	bl	8013bd0 <abort>
 8012104:	4b04      	ldr	r3, [pc, #16]	; (8012118 <__assert_func+0x38>)
 8012106:	461c      	mov	r4, r3
 8012108:	e7f3      	b.n	80120f2 <__assert_func+0x12>
 801210a:	bf00      	nop
 801210c:	200001f0 	.word	0x200001f0
 8012110:	08016afb 	.word	0x08016afb
 8012114:	08016b08 	.word	0x08016b08
 8012118:	08016b36 	.word	0x08016b36

0801211c <_free_r>:
 801211c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801211e:	2900      	cmp	r1, #0
 8012120:	d044      	beq.n	80121ac <_free_r+0x90>
 8012122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012126:	9001      	str	r0, [sp, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	f1a1 0404 	sub.w	r4, r1, #4
 801212e:	bfb8      	it	lt
 8012130:	18e4      	addlt	r4, r4, r3
 8012132:	f000 fc51 	bl	80129d8 <__malloc_lock>
 8012136:	4a1e      	ldr	r2, [pc, #120]	; (80121b0 <_free_r+0x94>)
 8012138:	9801      	ldr	r0, [sp, #4]
 801213a:	6813      	ldr	r3, [r2, #0]
 801213c:	b933      	cbnz	r3, 801214c <_free_r+0x30>
 801213e:	6063      	str	r3, [r4, #4]
 8012140:	6014      	str	r4, [r2, #0]
 8012142:	b003      	add	sp, #12
 8012144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012148:	f000 bc4c 	b.w	80129e4 <__malloc_unlock>
 801214c:	42a3      	cmp	r3, r4
 801214e:	d908      	bls.n	8012162 <_free_r+0x46>
 8012150:	6825      	ldr	r5, [r4, #0]
 8012152:	1961      	adds	r1, r4, r5
 8012154:	428b      	cmp	r3, r1
 8012156:	bf01      	itttt	eq
 8012158:	6819      	ldreq	r1, [r3, #0]
 801215a:	685b      	ldreq	r3, [r3, #4]
 801215c:	1949      	addeq	r1, r1, r5
 801215e:	6021      	streq	r1, [r4, #0]
 8012160:	e7ed      	b.n	801213e <_free_r+0x22>
 8012162:	461a      	mov	r2, r3
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	b10b      	cbz	r3, 801216c <_free_r+0x50>
 8012168:	42a3      	cmp	r3, r4
 801216a:	d9fa      	bls.n	8012162 <_free_r+0x46>
 801216c:	6811      	ldr	r1, [r2, #0]
 801216e:	1855      	adds	r5, r2, r1
 8012170:	42a5      	cmp	r5, r4
 8012172:	d10b      	bne.n	801218c <_free_r+0x70>
 8012174:	6824      	ldr	r4, [r4, #0]
 8012176:	4421      	add	r1, r4
 8012178:	1854      	adds	r4, r2, r1
 801217a:	42a3      	cmp	r3, r4
 801217c:	6011      	str	r1, [r2, #0]
 801217e:	d1e0      	bne.n	8012142 <_free_r+0x26>
 8012180:	681c      	ldr	r4, [r3, #0]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	6053      	str	r3, [r2, #4]
 8012186:	440c      	add	r4, r1
 8012188:	6014      	str	r4, [r2, #0]
 801218a:	e7da      	b.n	8012142 <_free_r+0x26>
 801218c:	d902      	bls.n	8012194 <_free_r+0x78>
 801218e:	230c      	movs	r3, #12
 8012190:	6003      	str	r3, [r0, #0]
 8012192:	e7d6      	b.n	8012142 <_free_r+0x26>
 8012194:	6825      	ldr	r5, [r4, #0]
 8012196:	1961      	adds	r1, r4, r5
 8012198:	428b      	cmp	r3, r1
 801219a:	bf04      	itt	eq
 801219c:	6819      	ldreq	r1, [r3, #0]
 801219e:	685b      	ldreq	r3, [r3, #4]
 80121a0:	6063      	str	r3, [r4, #4]
 80121a2:	bf04      	itt	eq
 80121a4:	1949      	addeq	r1, r1, r5
 80121a6:	6021      	streq	r1, [r4, #0]
 80121a8:	6054      	str	r4, [r2, #4]
 80121aa:	e7ca      	b.n	8012142 <_free_r+0x26>
 80121ac:	b003      	add	sp, #12
 80121ae:	bd30      	pop	{r4, r5, pc}
 80121b0:	2000aa70 	.word	0x2000aa70

080121b4 <rshift>:
 80121b4:	6903      	ldr	r3, [r0, #16]
 80121b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80121ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80121c2:	f100 0414 	add.w	r4, r0, #20
 80121c6:	dd45      	ble.n	8012254 <rshift+0xa0>
 80121c8:	f011 011f 	ands.w	r1, r1, #31
 80121cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80121d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80121d4:	d10c      	bne.n	80121f0 <rshift+0x3c>
 80121d6:	f100 0710 	add.w	r7, r0, #16
 80121da:	4629      	mov	r1, r5
 80121dc:	42b1      	cmp	r1, r6
 80121de:	d334      	bcc.n	801224a <rshift+0x96>
 80121e0:	1a9b      	subs	r3, r3, r2
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	1eea      	subs	r2, r5, #3
 80121e6:	4296      	cmp	r6, r2
 80121e8:	bf38      	it	cc
 80121ea:	2300      	movcc	r3, #0
 80121ec:	4423      	add	r3, r4
 80121ee:	e015      	b.n	801221c <rshift+0x68>
 80121f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80121f4:	f1c1 0820 	rsb	r8, r1, #32
 80121f8:	40cf      	lsrs	r7, r1
 80121fa:	f105 0e04 	add.w	lr, r5, #4
 80121fe:	46a1      	mov	r9, r4
 8012200:	4576      	cmp	r6, lr
 8012202:	46f4      	mov	ip, lr
 8012204:	d815      	bhi.n	8012232 <rshift+0x7e>
 8012206:	1a9a      	subs	r2, r3, r2
 8012208:	0092      	lsls	r2, r2, #2
 801220a:	3a04      	subs	r2, #4
 801220c:	3501      	adds	r5, #1
 801220e:	42ae      	cmp	r6, r5
 8012210:	bf38      	it	cc
 8012212:	2200      	movcc	r2, #0
 8012214:	18a3      	adds	r3, r4, r2
 8012216:	50a7      	str	r7, [r4, r2]
 8012218:	b107      	cbz	r7, 801221c <rshift+0x68>
 801221a:	3304      	adds	r3, #4
 801221c:	1b1a      	subs	r2, r3, r4
 801221e:	42a3      	cmp	r3, r4
 8012220:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012224:	bf08      	it	eq
 8012226:	2300      	moveq	r3, #0
 8012228:	6102      	str	r2, [r0, #16]
 801222a:	bf08      	it	eq
 801222c:	6143      	streq	r3, [r0, #20]
 801222e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012232:	f8dc c000 	ldr.w	ip, [ip]
 8012236:	fa0c fc08 	lsl.w	ip, ip, r8
 801223a:	ea4c 0707 	orr.w	r7, ip, r7
 801223e:	f849 7b04 	str.w	r7, [r9], #4
 8012242:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012246:	40cf      	lsrs	r7, r1
 8012248:	e7da      	b.n	8012200 <rshift+0x4c>
 801224a:	f851 cb04 	ldr.w	ip, [r1], #4
 801224e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012252:	e7c3      	b.n	80121dc <rshift+0x28>
 8012254:	4623      	mov	r3, r4
 8012256:	e7e1      	b.n	801221c <rshift+0x68>

08012258 <__hexdig_fun>:
 8012258:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801225c:	2b09      	cmp	r3, #9
 801225e:	d802      	bhi.n	8012266 <__hexdig_fun+0xe>
 8012260:	3820      	subs	r0, #32
 8012262:	b2c0      	uxtb	r0, r0
 8012264:	4770      	bx	lr
 8012266:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801226a:	2b05      	cmp	r3, #5
 801226c:	d801      	bhi.n	8012272 <__hexdig_fun+0x1a>
 801226e:	3847      	subs	r0, #71	; 0x47
 8012270:	e7f7      	b.n	8012262 <__hexdig_fun+0xa>
 8012272:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012276:	2b05      	cmp	r3, #5
 8012278:	d801      	bhi.n	801227e <__hexdig_fun+0x26>
 801227a:	3827      	subs	r0, #39	; 0x27
 801227c:	e7f1      	b.n	8012262 <__hexdig_fun+0xa>
 801227e:	2000      	movs	r0, #0
 8012280:	4770      	bx	lr
	...

08012284 <__gethex>:
 8012284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012288:	4617      	mov	r7, r2
 801228a:	680a      	ldr	r2, [r1, #0]
 801228c:	b085      	sub	sp, #20
 801228e:	f102 0b02 	add.w	fp, r2, #2
 8012292:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012296:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801229a:	4681      	mov	r9, r0
 801229c:	468a      	mov	sl, r1
 801229e:	9302      	str	r3, [sp, #8]
 80122a0:	32fe      	adds	r2, #254	; 0xfe
 80122a2:	eb02 030b 	add.w	r3, r2, fp
 80122a6:	46d8      	mov	r8, fp
 80122a8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80122ac:	9301      	str	r3, [sp, #4]
 80122ae:	2830      	cmp	r0, #48	; 0x30
 80122b0:	d0f7      	beq.n	80122a2 <__gethex+0x1e>
 80122b2:	f7ff ffd1 	bl	8012258 <__hexdig_fun>
 80122b6:	4604      	mov	r4, r0
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d138      	bne.n	801232e <__gethex+0xaa>
 80122bc:	49a7      	ldr	r1, [pc, #668]	; (801255c <__gethex+0x2d8>)
 80122be:	2201      	movs	r2, #1
 80122c0:	4640      	mov	r0, r8
 80122c2:	f7ff fe02 	bl	8011eca <strncmp>
 80122c6:	4606      	mov	r6, r0
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d169      	bne.n	80123a0 <__gethex+0x11c>
 80122cc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80122d0:	465d      	mov	r5, fp
 80122d2:	f7ff ffc1 	bl	8012258 <__hexdig_fun>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	d064      	beq.n	80123a4 <__gethex+0x120>
 80122da:	465a      	mov	r2, fp
 80122dc:	7810      	ldrb	r0, [r2, #0]
 80122de:	2830      	cmp	r0, #48	; 0x30
 80122e0:	4690      	mov	r8, r2
 80122e2:	f102 0201 	add.w	r2, r2, #1
 80122e6:	d0f9      	beq.n	80122dc <__gethex+0x58>
 80122e8:	f7ff ffb6 	bl	8012258 <__hexdig_fun>
 80122ec:	2301      	movs	r3, #1
 80122ee:	fab0 f480 	clz	r4, r0
 80122f2:	0964      	lsrs	r4, r4, #5
 80122f4:	465e      	mov	r6, fp
 80122f6:	9301      	str	r3, [sp, #4]
 80122f8:	4642      	mov	r2, r8
 80122fa:	4615      	mov	r5, r2
 80122fc:	3201      	adds	r2, #1
 80122fe:	7828      	ldrb	r0, [r5, #0]
 8012300:	f7ff ffaa 	bl	8012258 <__hexdig_fun>
 8012304:	2800      	cmp	r0, #0
 8012306:	d1f8      	bne.n	80122fa <__gethex+0x76>
 8012308:	4994      	ldr	r1, [pc, #592]	; (801255c <__gethex+0x2d8>)
 801230a:	2201      	movs	r2, #1
 801230c:	4628      	mov	r0, r5
 801230e:	f7ff fddc 	bl	8011eca <strncmp>
 8012312:	b978      	cbnz	r0, 8012334 <__gethex+0xb0>
 8012314:	b946      	cbnz	r6, 8012328 <__gethex+0xa4>
 8012316:	1c6e      	adds	r6, r5, #1
 8012318:	4632      	mov	r2, r6
 801231a:	4615      	mov	r5, r2
 801231c:	3201      	adds	r2, #1
 801231e:	7828      	ldrb	r0, [r5, #0]
 8012320:	f7ff ff9a 	bl	8012258 <__hexdig_fun>
 8012324:	2800      	cmp	r0, #0
 8012326:	d1f8      	bne.n	801231a <__gethex+0x96>
 8012328:	1b73      	subs	r3, r6, r5
 801232a:	009e      	lsls	r6, r3, #2
 801232c:	e004      	b.n	8012338 <__gethex+0xb4>
 801232e:	2400      	movs	r4, #0
 8012330:	4626      	mov	r6, r4
 8012332:	e7e1      	b.n	80122f8 <__gethex+0x74>
 8012334:	2e00      	cmp	r6, #0
 8012336:	d1f7      	bne.n	8012328 <__gethex+0xa4>
 8012338:	782b      	ldrb	r3, [r5, #0]
 801233a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801233e:	2b50      	cmp	r3, #80	; 0x50
 8012340:	d13d      	bne.n	80123be <__gethex+0x13a>
 8012342:	786b      	ldrb	r3, [r5, #1]
 8012344:	2b2b      	cmp	r3, #43	; 0x2b
 8012346:	d02f      	beq.n	80123a8 <__gethex+0x124>
 8012348:	2b2d      	cmp	r3, #45	; 0x2d
 801234a:	d031      	beq.n	80123b0 <__gethex+0x12c>
 801234c:	1c69      	adds	r1, r5, #1
 801234e:	f04f 0b00 	mov.w	fp, #0
 8012352:	7808      	ldrb	r0, [r1, #0]
 8012354:	f7ff ff80 	bl	8012258 <__hexdig_fun>
 8012358:	1e42      	subs	r2, r0, #1
 801235a:	b2d2      	uxtb	r2, r2
 801235c:	2a18      	cmp	r2, #24
 801235e:	d82e      	bhi.n	80123be <__gethex+0x13a>
 8012360:	f1a0 0210 	sub.w	r2, r0, #16
 8012364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012368:	f7ff ff76 	bl	8012258 <__hexdig_fun>
 801236c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8012370:	fa5f fc8c 	uxtb.w	ip, ip
 8012374:	f1bc 0f18 	cmp.w	ip, #24
 8012378:	d91d      	bls.n	80123b6 <__gethex+0x132>
 801237a:	f1bb 0f00 	cmp.w	fp, #0
 801237e:	d000      	beq.n	8012382 <__gethex+0xfe>
 8012380:	4252      	negs	r2, r2
 8012382:	4416      	add	r6, r2
 8012384:	f8ca 1000 	str.w	r1, [sl]
 8012388:	b1dc      	cbz	r4, 80123c2 <__gethex+0x13e>
 801238a:	9b01      	ldr	r3, [sp, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	bf14      	ite	ne
 8012390:	f04f 0800 	movne.w	r8, #0
 8012394:	f04f 0806 	moveq.w	r8, #6
 8012398:	4640      	mov	r0, r8
 801239a:	b005      	add	sp, #20
 801239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a0:	4645      	mov	r5, r8
 80123a2:	4626      	mov	r6, r4
 80123a4:	2401      	movs	r4, #1
 80123a6:	e7c7      	b.n	8012338 <__gethex+0xb4>
 80123a8:	f04f 0b00 	mov.w	fp, #0
 80123ac:	1ca9      	adds	r1, r5, #2
 80123ae:	e7d0      	b.n	8012352 <__gethex+0xce>
 80123b0:	f04f 0b01 	mov.w	fp, #1
 80123b4:	e7fa      	b.n	80123ac <__gethex+0x128>
 80123b6:	230a      	movs	r3, #10
 80123b8:	fb03 0002 	mla	r0, r3, r2, r0
 80123bc:	e7d0      	b.n	8012360 <__gethex+0xdc>
 80123be:	4629      	mov	r1, r5
 80123c0:	e7e0      	b.n	8012384 <__gethex+0x100>
 80123c2:	eba5 0308 	sub.w	r3, r5, r8
 80123c6:	3b01      	subs	r3, #1
 80123c8:	4621      	mov	r1, r4
 80123ca:	2b07      	cmp	r3, #7
 80123cc:	dc0a      	bgt.n	80123e4 <__gethex+0x160>
 80123ce:	4648      	mov	r0, r9
 80123d0:	f000 fb0e 	bl	80129f0 <_Balloc>
 80123d4:	4604      	mov	r4, r0
 80123d6:	b940      	cbnz	r0, 80123ea <__gethex+0x166>
 80123d8:	4b61      	ldr	r3, [pc, #388]	; (8012560 <__gethex+0x2dc>)
 80123da:	4602      	mov	r2, r0
 80123dc:	21e4      	movs	r1, #228	; 0xe4
 80123de:	4861      	ldr	r0, [pc, #388]	; (8012564 <__gethex+0x2e0>)
 80123e0:	f7ff fe7e 	bl	80120e0 <__assert_func>
 80123e4:	3101      	adds	r1, #1
 80123e6:	105b      	asrs	r3, r3, #1
 80123e8:	e7ef      	b.n	80123ca <__gethex+0x146>
 80123ea:	f100 0a14 	add.w	sl, r0, #20
 80123ee:	2300      	movs	r3, #0
 80123f0:	495a      	ldr	r1, [pc, #360]	; (801255c <__gethex+0x2d8>)
 80123f2:	f8cd a004 	str.w	sl, [sp, #4]
 80123f6:	469b      	mov	fp, r3
 80123f8:	45a8      	cmp	r8, r5
 80123fa:	d342      	bcc.n	8012482 <__gethex+0x1fe>
 80123fc:	9801      	ldr	r0, [sp, #4]
 80123fe:	f840 bb04 	str.w	fp, [r0], #4
 8012402:	eba0 000a 	sub.w	r0, r0, sl
 8012406:	1080      	asrs	r0, r0, #2
 8012408:	6120      	str	r0, [r4, #16]
 801240a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801240e:	4658      	mov	r0, fp
 8012410:	f000 fbe0 	bl	8012bd4 <__hi0bits>
 8012414:	683d      	ldr	r5, [r7, #0]
 8012416:	eba8 0000 	sub.w	r0, r8, r0
 801241a:	42a8      	cmp	r0, r5
 801241c:	dd59      	ble.n	80124d2 <__gethex+0x24e>
 801241e:	eba0 0805 	sub.w	r8, r0, r5
 8012422:	4641      	mov	r1, r8
 8012424:	4620      	mov	r0, r4
 8012426:	f000 ff6c 	bl	8013302 <__any_on>
 801242a:	4683      	mov	fp, r0
 801242c:	b1b8      	cbz	r0, 801245e <__gethex+0x1da>
 801242e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8012432:	1159      	asrs	r1, r3, #5
 8012434:	f003 021f 	and.w	r2, r3, #31
 8012438:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801243c:	f04f 0b01 	mov.w	fp, #1
 8012440:	fa0b f202 	lsl.w	r2, fp, r2
 8012444:	420a      	tst	r2, r1
 8012446:	d00a      	beq.n	801245e <__gethex+0x1da>
 8012448:	455b      	cmp	r3, fp
 801244a:	dd06      	ble.n	801245a <__gethex+0x1d6>
 801244c:	f1a8 0102 	sub.w	r1, r8, #2
 8012450:	4620      	mov	r0, r4
 8012452:	f000 ff56 	bl	8013302 <__any_on>
 8012456:	2800      	cmp	r0, #0
 8012458:	d138      	bne.n	80124cc <__gethex+0x248>
 801245a:	f04f 0b02 	mov.w	fp, #2
 801245e:	4641      	mov	r1, r8
 8012460:	4620      	mov	r0, r4
 8012462:	f7ff fea7 	bl	80121b4 <rshift>
 8012466:	4446      	add	r6, r8
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	42b3      	cmp	r3, r6
 801246c:	da41      	bge.n	80124f2 <__gethex+0x26e>
 801246e:	4621      	mov	r1, r4
 8012470:	4648      	mov	r0, r9
 8012472:	f000 fafd 	bl	8012a70 <_Bfree>
 8012476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012478:	2300      	movs	r3, #0
 801247a:	6013      	str	r3, [r2, #0]
 801247c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012480:	e78a      	b.n	8012398 <__gethex+0x114>
 8012482:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8012486:	2a2e      	cmp	r2, #46	; 0x2e
 8012488:	d014      	beq.n	80124b4 <__gethex+0x230>
 801248a:	2b20      	cmp	r3, #32
 801248c:	d106      	bne.n	801249c <__gethex+0x218>
 801248e:	9b01      	ldr	r3, [sp, #4]
 8012490:	f843 bb04 	str.w	fp, [r3], #4
 8012494:	f04f 0b00 	mov.w	fp, #0
 8012498:	9301      	str	r3, [sp, #4]
 801249a:	465b      	mov	r3, fp
 801249c:	7828      	ldrb	r0, [r5, #0]
 801249e:	9303      	str	r3, [sp, #12]
 80124a0:	f7ff feda 	bl	8012258 <__hexdig_fun>
 80124a4:	9b03      	ldr	r3, [sp, #12]
 80124a6:	f000 000f 	and.w	r0, r0, #15
 80124aa:	4098      	lsls	r0, r3
 80124ac:	ea4b 0b00 	orr.w	fp, fp, r0
 80124b0:	3304      	adds	r3, #4
 80124b2:	e7a1      	b.n	80123f8 <__gethex+0x174>
 80124b4:	45a8      	cmp	r8, r5
 80124b6:	d8e8      	bhi.n	801248a <__gethex+0x206>
 80124b8:	2201      	movs	r2, #1
 80124ba:	4628      	mov	r0, r5
 80124bc:	9303      	str	r3, [sp, #12]
 80124be:	f7ff fd04 	bl	8011eca <strncmp>
 80124c2:	4926      	ldr	r1, [pc, #152]	; (801255c <__gethex+0x2d8>)
 80124c4:	9b03      	ldr	r3, [sp, #12]
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d1df      	bne.n	801248a <__gethex+0x206>
 80124ca:	e795      	b.n	80123f8 <__gethex+0x174>
 80124cc:	f04f 0b03 	mov.w	fp, #3
 80124d0:	e7c5      	b.n	801245e <__gethex+0x1da>
 80124d2:	da0b      	bge.n	80124ec <__gethex+0x268>
 80124d4:	eba5 0800 	sub.w	r8, r5, r0
 80124d8:	4621      	mov	r1, r4
 80124da:	4642      	mov	r2, r8
 80124dc:	4648      	mov	r0, r9
 80124de:	f000 fce1 	bl	8012ea4 <__lshift>
 80124e2:	eba6 0608 	sub.w	r6, r6, r8
 80124e6:	4604      	mov	r4, r0
 80124e8:	f100 0a14 	add.w	sl, r0, #20
 80124ec:	f04f 0b00 	mov.w	fp, #0
 80124f0:	e7ba      	b.n	8012468 <__gethex+0x1e4>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	42b3      	cmp	r3, r6
 80124f6:	dd73      	ble.n	80125e0 <__gethex+0x35c>
 80124f8:	1b9e      	subs	r6, r3, r6
 80124fa:	42b5      	cmp	r5, r6
 80124fc:	dc34      	bgt.n	8012568 <__gethex+0x2e4>
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2b02      	cmp	r3, #2
 8012502:	d023      	beq.n	801254c <__gethex+0x2c8>
 8012504:	2b03      	cmp	r3, #3
 8012506:	d025      	beq.n	8012554 <__gethex+0x2d0>
 8012508:	2b01      	cmp	r3, #1
 801250a:	d115      	bne.n	8012538 <__gethex+0x2b4>
 801250c:	42b5      	cmp	r5, r6
 801250e:	d113      	bne.n	8012538 <__gethex+0x2b4>
 8012510:	2d01      	cmp	r5, #1
 8012512:	d10b      	bne.n	801252c <__gethex+0x2a8>
 8012514:	9a02      	ldr	r2, [sp, #8]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6013      	str	r3, [r2, #0]
 801251a:	2301      	movs	r3, #1
 801251c:	6123      	str	r3, [r4, #16]
 801251e:	f8ca 3000 	str.w	r3, [sl]
 8012522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012524:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012528:	601c      	str	r4, [r3, #0]
 801252a:	e735      	b.n	8012398 <__gethex+0x114>
 801252c:	1e69      	subs	r1, r5, #1
 801252e:	4620      	mov	r0, r4
 8012530:	f000 fee7 	bl	8013302 <__any_on>
 8012534:	2800      	cmp	r0, #0
 8012536:	d1ed      	bne.n	8012514 <__gethex+0x290>
 8012538:	4621      	mov	r1, r4
 801253a:	4648      	mov	r0, r9
 801253c:	f000 fa98 	bl	8012a70 <_Bfree>
 8012540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012542:	2300      	movs	r3, #0
 8012544:	6013      	str	r3, [r2, #0]
 8012546:	f04f 0850 	mov.w	r8, #80	; 0x50
 801254a:	e725      	b.n	8012398 <__gethex+0x114>
 801254c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801254e:	2b00      	cmp	r3, #0
 8012550:	d1f2      	bne.n	8012538 <__gethex+0x2b4>
 8012552:	e7df      	b.n	8012514 <__gethex+0x290>
 8012554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012556:	2b00      	cmp	r3, #0
 8012558:	d1dc      	bne.n	8012514 <__gethex+0x290>
 801255a:	e7ed      	b.n	8012538 <__gethex+0x2b4>
 801255c:	08016935 	.word	0x08016935
 8012560:	08016b37 	.word	0x08016b37
 8012564:	08016b48 	.word	0x08016b48
 8012568:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801256c:	f1bb 0f00 	cmp.w	fp, #0
 8012570:	d133      	bne.n	80125da <__gethex+0x356>
 8012572:	f1b8 0f00 	cmp.w	r8, #0
 8012576:	d004      	beq.n	8012582 <__gethex+0x2fe>
 8012578:	4641      	mov	r1, r8
 801257a:	4620      	mov	r0, r4
 801257c:	f000 fec1 	bl	8013302 <__any_on>
 8012580:	4683      	mov	fp, r0
 8012582:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012586:	2301      	movs	r3, #1
 8012588:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801258c:	f008 081f 	and.w	r8, r8, #31
 8012590:	fa03 f308 	lsl.w	r3, r3, r8
 8012594:	4213      	tst	r3, r2
 8012596:	4631      	mov	r1, r6
 8012598:	4620      	mov	r0, r4
 801259a:	bf18      	it	ne
 801259c:	f04b 0b02 	orrne.w	fp, fp, #2
 80125a0:	1bad      	subs	r5, r5, r6
 80125a2:	f7ff fe07 	bl	80121b4 <rshift>
 80125a6:	687e      	ldr	r6, [r7, #4]
 80125a8:	f04f 0802 	mov.w	r8, #2
 80125ac:	f1bb 0f00 	cmp.w	fp, #0
 80125b0:	d04a      	beq.n	8012648 <__gethex+0x3c4>
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2b02      	cmp	r3, #2
 80125b6:	d016      	beq.n	80125e6 <__gethex+0x362>
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d018      	beq.n	80125ee <__gethex+0x36a>
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d109      	bne.n	80125d4 <__gethex+0x350>
 80125c0:	f01b 0f02 	tst.w	fp, #2
 80125c4:	d006      	beq.n	80125d4 <__gethex+0x350>
 80125c6:	f8da 3000 	ldr.w	r3, [sl]
 80125ca:	ea4b 0b03 	orr.w	fp, fp, r3
 80125ce:	f01b 0f01 	tst.w	fp, #1
 80125d2:	d10f      	bne.n	80125f4 <__gethex+0x370>
 80125d4:	f048 0810 	orr.w	r8, r8, #16
 80125d8:	e036      	b.n	8012648 <__gethex+0x3c4>
 80125da:	f04f 0b01 	mov.w	fp, #1
 80125de:	e7d0      	b.n	8012582 <__gethex+0x2fe>
 80125e0:	f04f 0801 	mov.w	r8, #1
 80125e4:	e7e2      	b.n	80125ac <__gethex+0x328>
 80125e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125e8:	f1c3 0301 	rsb	r3, r3, #1
 80125ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80125ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d0ef      	beq.n	80125d4 <__gethex+0x350>
 80125f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80125f8:	f104 0214 	add.w	r2, r4, #20
 80125fc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012600:	9301      	str	r3, [sp, #4]
 8012602:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012606:	2300      	movs	r3, #0
 8012608:	4694      	mov	ip, r2
 801260a:	f852 1b04 	ldr.w	r1, [r2], #4
 801260e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8012612:	d01e      	beq.n	8012652 <__gethex+0x3ce>
 8012614:	3101      	adds	r1, #1
 8012616:	f8cc 1000 	str.w	r1, [ip]
 801261a:	f1b8 0f02 	cmp.w	r8, #2
 801261e:	f104 0214 	add.w	r2, r4, #20
 8012622:	d13d      	bne.n	80126a0 <__gethex+0x41c>
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	3b01      	subs	r3, #1
 8012628:	42ab      	cmp	r3, r5
 801262a:	d10b      	bne.n	8012644 <__gethex+0x3c0>
 801262c:	1169      	asrs	r1, r5, #5
 801262e:	2301      	movs	r3, #1
 8012630:	f005 051f 	and.w	r5, r5, #31
 8012634:	fa03 f505 	lsl.w	r5, r3, r5
 8012638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801263c:	421d      	tst	r5, r3
 801263e:	bf18      	it	ne
 8012640:	f04f 0801 	movne.w	r8, #1
 8012644:	f048 0820 	orr.w	r8, r8, #32
 8012648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801264a:	601c      	str	r4, [r3, #0]
 801264c:	9b02      	ldr	r3, [sp, #8]
 801264e:	601e      	str	r6, [r3, #0]
 8012650:	e6a2      	b.n	8012398 <__gethex+0x114>
 8012652:	4290      	cmp	r0, r2
 8012654:	f842 3c04 	str.w	r3, [r2, #-4]
 8012658:	d8d6      	bhi.n	8012608 <__gethex+0x384>
 801265a:	68a2      	ldr	r2, [r4, #8]
 801265c:	4593      	cmp	fp, r2
 801265e:	db17      	blt.n	8012690 <__gethex+0x40c>
 8012660:	6861      	ldr	r1, [r4, #4]
 8012662:	4648      	mov	r0, r9
 8012664:	3101      	adds	r1, #1
 8012666:	f000 f9c3 	bl	80129f0 <_Balloc>
 801266a:	4682      	mov	sl, r0
 801266c:	b918      	cbnz	r0, 8012676 <__gethex+0x3f2>
 801266e:	4b1b      	ldr	r3, [pc, #108]	; (80126dc <__gethex+0x458>)
 8012670:	4602      	mov	r2, r0
 8012672:	2184      	movs	r1, #132	; 0x84
 8012674:	e6b3      	b.n	80123de <__gethex+0x15a>
 8012676:	6922      	ldr	r2, [r4, #16]
 8012678:	3202      	adds	r2, #2
 801267a:	f104 010c 	add.w	r1, r4, #12
 801267e:	0092      	lsls	r2, r2, #2
 8012680:	300c      	adds	r0, #12
 8012682:	f7ff fd16 	bl	80120b2 <memcpy>
 8012686:	4621      	mov	r1, r4
 8012688:	4648      	mov	r0, r9
 801268a:	f000 f9f1 	bl	8012a70 <_Bfree>
 801268e:	4654      	mov	r4, sl
 8012690:	6922      	ldr	r2, [r4, #16]
 8012692:	1c51      	adds	r1, r2, #1
 8012694:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012698:	6121      	str	r1, [r4, #16]
 801269a:	2101      	movs	r1, #1
 801269c:	6151      	str	r1, [r2, #20]
 801269e:	e7bc      	b.n	801261a <__gethex+0x396>
 80126a0:	6921      	ldr	r1, [r4, #16]
 80126a2:	4559      	cmp	r1, fp
 80126a4:	dd0b      	ble.n	80126be <__gethex+0x43a>
 80126a6:	2101      	movs	r1, #1
 80126a8:	4620      	mov	r0, r4
 80126aa:	f7ff fd83 	bl	80121b4 <rshift>
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	3601      	adds	r6, #1
 80126b2:	42b3      	cmp	r3, r6
 80126b4:	f6ff aedb 	blt.w	801246e <__gethex+0x1ea>
 80126b8:	f04f 0801 	mov.w	r8, #1
 80126bc:	e7c2      	b.n	8012644 <__gethex+0x3c0>
 80126be:	f015 051f 	ands.w	r5, r5, #31
 80126c2:	d0f9      	beq.n	80126b8 <__gethex+0x434>
 80126c4:	9b01      	ldr	r3, [sp, #4]
 80126c6:	441a      	add	r2, r3
 80126c8:	f1c5 0520 	rsb	r5, r5, #32
 80126cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80126d0:	f000 fa80 	bl	8012bd4 <__hi0bits>
 80126d4:	42a8      	cmp	r0, r5
 80126d6:	dbe6      	blt.n	80126a6 <__gethex+0x422>
 80126d8:	e7ee      	b.n	80126b8 <__gethex+0x434>
 80126da:	bf00      	nop
 80126dc:	08016b37 	.word	0x08016b37

080126e0 <L_shift>:
 80126e0:	f1c2 0208 	rsb	r2, r2, #8
 80126e4:	0092      	lsls	r2, r2, #2
 80126e6:	b570      	push	{r4, r5, r6, lr}
 80126e8:	f1c2 0620 	rsb	r6, r2, #32
 80126ec:	6843      	ldr	r3, [r0, #4]
 80126ee:	6804      	ldr	r4, [r0, #0]
 80126f0:	fa03 f506 	lsl.w	r5, r3, r6
 80126f4:	432c      	orrs	r4, r5
 80126f6:	40d3      	lsrs	r3, r2
 80126f8:	6004      	str	r4, [r0, #0]
 80126fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80126fe:	4288      	cmp	r0, r1
 8012700:	d3f4      	bcc.n	80126ec <L_shift+0xc>
 8012702:	bd70      	pop	{r4, r5, r6, pc}

08012704 <__match>:
 8012704:	b530      	push	{r4, r5, lr}
 8012706:	6803      	ldr	r3, [r0, #0]
 8012708:	3301      	adds	r3, #1
 801270a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801270e:	b914      	cbnz	r4, 8012716 <__match+0x12>
 8012710:	6003      	str	r3, [r0, #0]
 8012712:	2001      	movs	r0, #1
 8012714:	bd30      	pop	{r4, r5, pc}
 8012716:	f813 2b01 	ldrb.w	r2, [r3], #1
 801271a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801271e:	2d19      	cmp	r5, #25
 8012720:	bf98      	it	ls
 8012722:	3220      	addls	r2, #32
 8012724:	42a2      	cmp	r2, r4
 8012726:	d0f0      	beq.n	801270a <__match+0x6>
 8012728:	2000      	movs	r0, #0
 801272a:	e7f3      	b.n	8012714 <__match+0x10>

0801272c <__hexnan>:
 801272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012730:	680b      	ldr	r3, [r1, #0]
 8012732:	6801      	ldr	r1, [r0, #0]
 8012734:	115e      	asrs	r6, r3, #5
 8012736:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801273a:	f013 031f 	ands.w	r3, r3, #31
 801273e:	b087      	sub	sp, #28
 8012740:	bf18      	it	ne
 8012742:	3604      	addne	r6, #4
 8012744:	2500      	movs	r5, #0
 8012746:	1f37      	subs	r7, r6, #4
 8012748:	4682      	mov	sl, r0
 801274a:	4690      	mov	r8, r2
 801274c:	9301      	str	r3, [sp, #4]
 801274e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012752:	46b9      	mov	r9, r7
 8012754:	463c      	mov	r4, r7
 8012756:	9502      	str	r5, [sp, #8]
 8012758:	46ab      	mov	fp, r5
 801275a:	784a      	ldrb	r2, [r1, #1]
 801275c:	1c4b      	adds	r3, r1, #1
 801275e:	9303      	str	r3, [sp, #12]
 8012760:	b342      	cbz	r2, 80127b4 <__hexnan+0x88>
 8012762:	4610      	mov	r0, r2
 8012764:	9105      	str	r1, [sp, #20]
 8012766:	9204      	str	r2, [sp, #16]
 8012768:	f7ff fd76 	bl	8012258 <__hexdig_fun>
 801276c:	2800      	cmp	r0, #0
 801276e:	d14f      	bne.n	8012810 <__hexnan+0xe4>
 8012770:	9a04      	ldr	r2, [sp, #16]
 8012772:	9905      	ldr	r1, [sp, #20]
 8012774:	2a20      	cmp	r2, #32
 8012776:	d818      	bhi.n	80127aa <__hexnan+0x7e>
 8012778:	9b02      	ldr	r3, [sp, #8]
 801277a:	459b      	cmp	fp, r3
 801277c:	dd13      	ble.n	80127a6 <__hexnan+0x7a>
 801277e:	454c      	cmp	r4, r9
 8012780:	d206      	bcs.n	8012790 <__hexnan+0x64>
 8012782:	2d07      	cmp	r5, #7
 8012784:	dc04      	bgt.n	8012790 <__hexnan+0x64>
 8012786:	462a      	mov	r2, r5
 8012788:	4649      	mov	r1, r9
 801278a:	4620      	mov	r0, r4
 801278c:	f7ff ffa8 	bl	80126e0 <L_shift>
 8012790:	4544      	cmp	r4, r8
 8012792:	d950      	bls.n	8012836 <__hexnan+0x10a>
 8012794:	2300      	movs	r3, #0
 8012796:	f1a4 0904 	sub.w	r9, r4, #4
 801279a:	f844 3c04 	str.w	r3, [r4, #-4]
 801279e:	f8cd b008 	str.w	fp, [sp, #8]
 80127a2:	464c      	mov	r4, r9
 80127a4:	461d      	mov	r5, r3
 80127a6:	9903      	ldr	r1, [sp, #12]
 80127a8:	e7d7      	b.n	801275a <__hexnan+0x2e>
 80127aa:	2a29      	cmp	r2, #41	; 0x29
 80127ac:	d155      	bne.n	801285a <__hexnan+0x12e>
 80127ae:	3102      	adds	r1, #2
 80127b0:	f8ca 1000 	str.w	r1, [sl]
 80127b4:	f1bb 0f00 	cmp.w	fp, #0
 80127b8:	d04f      	beq.n	801285a <__hexnan+0x12e>
 80127ba:	454c      	cmp	r4, r9
 80127bc:	d206      	bcs.n	80127cc <__hexnan+0xa0>
 80127be:	2d07      	cmp	r5, #7
 80127c0:	dc04      	bgt.n	80127cc <__hexnan+0xa0>
 80127c2:	462a      	mov	r2, r5
 80127c4:	4649      	mov	r1, r9
 80127c6:	4620      	mov	r0, r4
 80127c8:	f7ff ff8a 	bl	80126e0 <L_shift>
 80127cc:	4544      	cmp	r4, r8
 80127ce:	d934      	bls.n	801283a <__hexnan+0x10e>
 80127d0:	f1a8 0204 	sub.w	r2, r8, #4
 80127d4:	4623      	mov	r3, r4
 80127d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80127da:	f842 1f04 	str.w	r1, [r2, #4]!
 80127de:	429f      	cmp	r7, r3
 80127e0:	d2f9      	bcs.n	80127d6 <__hexnan+0xaa>
 80127e2:	1b3b      	subs	r3, r7, r4
 80127e4:	f023 0303 	bic.w	r3, r3, #3
 80127e8:	3304      	adds	r3, #4
 80127ea:	3e03      	subs	r6, #3
 80127ec:	3401      	adds	r4, #1
 80127ee:	42a6      	cmp	r6, r4
 80127f0:	bf38      	it	cc
 80127f2:	2304      	movcc	r3, #4
 80127f4:	4443      	add	r3, r8
 80127f6:	2200      	movs	r2, #0
 80127f8:	f843 2b04 	str.w	r2, [r3], #4
 80127fc:	429f      	cmp	r7, r3
 80127fe:	d2fb      	bcs.n	80127f8 <__hexnan+0xcc>
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	b91b      	cbnz	r3, 801280c <__hexnan+0xe0>
 8012804:	4547      	cmp	r7, r8
 8012806:	d126      	bne.n	8012856 <__hexnan+0x12a>
 8012808:	2301      	movs	r3, #1
 801280a:	603b      	str	r3, [r7, #0]
 801280c:	2005      	movs	r0, #5
 801280e:	e025      	b.n	801285c <__hexnan+0x130>
 8012810:	3501      	adds	r5, #1
 8012812:	2d08      	cmp	r5, #8
 8012814:	f10b 0b01 	add.w	fp, fp, #1
 8012818:	dd06      	ble.n	8012828 <__hexnan+0xfc>
 801281a:	4544      	cmp	r4, r8
 801281c:	d9c3      	bls.n	80127a6 <__hexnan+0x7a>
 801281e:	2300      	movs	r3, #0
 8012820:	f844 3c04 	str.w	r3, [r4, #-4]
 8012824:	2501      	movs	r5, #1
 8012826:	3c04      	subs	r4, #4
 8012828:	6822      	ldr	r2, [r4, #0]
 801282a:	f000 000f 	and.w	r0, r0, #15
 801282e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012832:	6020      	str	r0, [r4, #0]
 8012834:	e7b7      	b.n	80127a6 <__hexnan+0x7a>
 8012836:	2508      	movs	r5, #8
 8012838:	e7b5      	b.n	80127a6 <__hexnan+0x7a>
 801283a:	9b01      	ldr	r3, [sp, #4]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d0df      	beq.n	8012800 <__hexnan+0xd4>
 8012840:	f1c3 0320 	rsb	r3, r3, #32
 8012844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012848:	40da      	lsrs	r2, r3
 801284a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801284e:	4013      	ands	r3, r2
 8012850:	f846 3c04 	str.w	r3, [r6, #-4]
 8012854:	e7d4      	b.n	8012800 <__hexnan+0xd4>
 8012856:	3f04      	subs	r7, #4
 8012858:	e7d2      	b.n	8012800 <__hexnan+0xd4>
 801285a:	2004      	movs	r0, #4
 801285c:	b007      	add	sp, #28
 801285e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012864 <malloc>:
 8012864:	4b02      	ldr	r3, [pc, #8]	; (8012870 <malloc+0xc>)
 8012866:	4601      	mov	r1, r0
 8012868:	6818      	ldr	r0, [r3, #0]
 801286a:	f000 b823 	b.w	80128b4 <_malloc_r>
 801286e:	bf00      	nop
 8012870:	200001f0 	.word	0x200001f0

08012874 <sbrk_aligned>:
 8012874:	b570      	push	{r4, r5, r6, lr}
 8012876:	4e0e      	ldr	r6, [pc, #56]	; (80128b0 <sbrk_aligned+0x3c>)
 8012878:	460c      	mov	r4, r1
 801287a:	6831      	ldr	r1, [r6, #0]
 801287c:	4605      	mov	r5, r0
 801287e:	b911      	cbnz	r1, 8012886 <sbrk_aligned+0x12>
 8012880:	f001 f996 	bl	8013bb0 <_sbrk_r>
 8012884:	6030      	str	r0, [r6, #0]
 8012886:	4621      	mov	r1, r4
 8012888:	4628      	mov	r0, r5
 801288a:	f001 f991 	bl	8013bb0 <_sbrk_r>
 801288e:	1c43      	adds	r3, r0, #1
 8012890:	d00a      	beq.n	80128a8 <sbrk_aligned+0x34>
 8012892:	1cc4      	adds	r4, r0, #3
 8012894:	f024 0403 	bic.w	r4, r4, #3
 8012898:	42a0      	cmp	r0, r4
 801289a:	d007      	beq.n	80128ac <sbrk_aligned+0x38>
 801289c:	1a21      	subs	r1, r4, r0
 801289e:	4628      	mov	r0, r5
 80128a0:	f001 f986 	bl	8013bb0 <_sbrk_r>
 80128a4:	3001      	adds	r0, #1
 80128a6:	d101      	bne.n	80128ac <sbrk_aligned+0x38>
 80128a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80128ac:	4620      	mov	r0, r4
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	2000aa74 	.word	0x2000aa74

080128b4 <_malloc_r>:
 80128b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128b8:	1ccd      	adds	r5, r1, #3
 80128ba:	f025 0503 	bic.w	r5, r5, #3
 80128be:	3508      	adds	r5, #8
 80128c0:	2d0c      	cmp	r5, #12
 80128c2:	bf38      	it	cc
 80128c4:	250c      	movcc	r5, #12
 80128c6:	2d00      	cmp	r5, #0
 80128c8:	4607      	mov	r7, r0
 80128ca:	db01      	blt.n	80128d0 <_malloc_r+0x1c>
 80128cc:	42a9      	cmp	r1, r5
 80128ce:	d905      	bls.n	80128dc <_malloc_r+0x28>
 80128d0:	230c      	movs	r3, #12
 80128d2:	603b      	str	r3, [r7, #0]
 80128d4:	2600      	movs	r6, #0
 80128d6:	4630      	mov	r0, r6
 80128d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80129b0 <_malloc_r+0xfc>
 80128e0:	f000 f87a 	bl	80129d8 <__malloc_lock>
 80128e4:	f8d8 3000 	ldr.w	r3, [r8]
 80128e8:	461c      	mov	r4, r3
 80128ea:	bb5c      	cbnz	r4, 8012944 <_malloc_r+0x90>
 80128ec:	4629      	mov	r1, r5
 80128ee:	4638      	mov	r0, r7
 80128f0:	f7ff ffc0 	bl	8012874 <sbrk_aligned>
 80128f4:	1c43      	adds	r3, r0, #1
 80128f6:	4604      	mov	r4, r0
 80128f8:	d155      	bne.n	80129a6 <_malloc_r+0xf2>
 80128fa:	f8d8 4000 	ldr.w	r4, [r8]
 80128fe:	4626      	mov	r6, r4
 8012900:	2e00      	cmp	r6, #0
 8012902:	d145      	bne.n	8012990 <_malloc_r+0xdc>
 8012904:	2c00      	cmp	r4, #0
 8012906:	d048      	beq.n	801299a <_malloc_r+0xe6>
 8012908:	6823      	ldr	r3, [r4, #0]
 801290a:	4631      	mov	r1, r6
 801290c:	4638      	mov	r0, r7
 801290e:	eb04 0903 	add.w	r9, r4, r3
 8012912:	f001 f94d 	bl	8013bb0 <_sbrk_r>
 8012916:	4581      	cmp	r9, r0
 8012918:	d13f      	bne.n	801299a <_malloc_r+0xe6>
 801291a:	6821      	ldr	r1, [r4, #0]
 801291c:	1a6d      	subs	r5, r5, r1
 801291e:	4629      	mov	r1, r5
 8012920:	4638      	mov	r0, r7
 8012922:	f7ff ffa7 	bl	8012874 <sbrk_aligned>
 8012926:	3001      	adds	r0, #1
 8012928:	d037      	beq.n	801299a <_malloc_r+0xe6>
 801292a:	6823      	ldr	r3, [r4, #0]
 801292c:	442b      	add	r3, r5
 801292e:	6023      	str	r3, [r4, #0]
 8012930:	f8d8 3000 	ldr.w	r3, [r8]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d038      	beq.n	80129aa <_malloc_r+0xf6>
 8012938:	685a      	ldr	r2, [r3, #4]
 801293a:	42a2      	cmp	r2, r4
 801293c:	d12b      	bne.n	8012996 <_malloc_r+0xe2>
 801293e:	2200      	movs	r2, #0
 8012940:	605a      	str	r2, [r3, #4]
 8012942:	e00f      	b.n	8012964 <_malloc_r+0xb0>
 8012944:	6822      	ldr	r2, [r4, #0]
 8012946:	1b52      	subs	r2, r2, r5
 8012948:	d41f      	bmi.n	801298a <_malloc_r+0xd6>
 801294a:	2a0b      	cmp	r2, #11
 801294c:	d917      	bls.n	801297e <_malloc_r+0xca>
 801294e:	1961      	adds	r1, r4, r5
 8012950:	42a3      	cmp	r3, r4
 8012952:	6025      	str	r5, [r4, #0]
 8012954:	bf18      	it	ne
 8012956:	6059      	strne	r1, [r3, #4]
 8012958:	6863      	ldr	r3, [r4, #4]
 801295a:	bf08      	it	eq
 801295c:	f8c8 1000 	streq.w	r1, [r8]
 8012960:	5162      	str	r2, [r4, r5]
 8012962:	604b      	str	r3, [r1, #4]
 8012964:	4638      	mov	r0, r7
 8012966:	f104 060b 	add.w	r6, r4, #11
 801296a:	f000 f83b 	bl	80129e4 <__malloc_unlock>
 801296e:	f026 0607 	bic.w	r6, r6, #7
 8012972:	1d23      	adds	r3, r4, #4
 8012974:	1af2      	subs	r2, r6, r3
 8012976:	d0ae      	beq.n	80128d6 <_malloc_r+0x22>
 8012978:	1b9b      	subs	r3, r3, r6
 801297a:	50a3      	str	r3, [r4, r2]
 801297c:	e7ab      	b.n	80128d6 <_malloc_r+0x22>
 801297e:	42a3      	cmp	r3, r4
 8012980:	6862      	ldr	r2, [r4, #4]
 8012982:	d1dd      	bne.n	8012940 <_malloc_r+0x8c>
 8012984:	f8c8 2000 	str.w	r2, [r8]
 8012988:	e7ec      	b.n	8012964 <_malloc_r+0xb0>
 801298a:	4623      	mov	r3, r4
 801298c:	6864      	ldr	r4, [r4, #4]
 801298e:	e7ac      	b.n	80128ea <_malloc_r+0x36>
 8012990:	4634      	mov	r4, r6
 8012992:	6876      	ldr	r6, [r6, #4]
 8012994:	e7b4      	b.n	8012900 <_malloc_r+0x4c>
 8012996:	4613      	mov	r3, r2
 8012998:	e7cc      	b.n	8012934 <_malloc_r+0x80>
 801299a:	230c      	movs	r3, #12
 801299c:	603b      	str	r3, [r7, #0]
 801299e:	4638      	mov	r0, r7
 80129a0:	f000 f820 	bl	80129e4 <__malloc_unlock>
 80129a4:	e797      	b.n	80128d6 <_malloc_r+0x22>
 80129a6:	6025      	str	r5, [r4, #0]
 80129a8:	e7dc      	b.n	8012964 <_malloc_r+0xb0>
 80129aa:	605b      	str	r3, [r3, #4]
 80129ac:	deff      	udf	#255	; 0xff
 80129ae:	bf00      	nop
 80129b0:	2000aa70 	.word	0x2000aa70

080129b4 <__ascii_mbtowc>:
 80129b4:	b082      	sub	sp, #8
 80129b6:	b901      	cbnz	r1, 80129ba <__ascii_mbtowc+0x6>
 80129b8:	a901      	add	r1, sp, #4
 80129ba:	b142      	cbz	r2, 80129ce <__ascii_mbtowc+0x1a>
 80129bc:	b14b      	cbz	r3, 80129d2 <__ascii_mbtowc+0x1e>
 80129be:	7813      	ldrb	r3, [r2, #0]
 80129c0:	600b      	str	r3, [r1, #0]
 80129c2:	7812      	ldrb	r2, [r2, #0]
 80129c4:	1e10      	subs	r0, r2, #0
 80129c6:	bf18      	it	ne
 80129c8:	2001      	movne	r0, #1
 80129ca:	b002      	add	sp, #8
 80129cc:	4770      	bx	lr
 80129ce:	4610      	mov	r0, r2
 80129d0:	e7fb      	b.n	80129ca <__ascii_mbtowc+0x16>
 80129d2:	f06f 0001 	mvn.w	r0, #1
 80129d6:	e7f8      	b.n	80129ca <__ascii_mbtowc+0x16>

080129d8 <__malloc_lock>:
 80129d8:	4801      	ldr	r0, [pc, #4]	; (80129e0 <__malloc_lock+0x8>)
 80129da:	f7ff bb68 	b.w	80120ae <__retarget_lock_acquire_recursive>
 80129de:	bf00      	nop
 80129e0:	2000aa6c 	.word	0x2000aa6c

080129e4 <__malloc_unlock>:
 80129e4:	4801      	ldr	r0, [pc, #4]	; (80129ec <__malloc_unlock+0x8>)
 80129e6:	f7ff bb63 	b.w	80120b0 <__retarget_lock_release_recursive>
 80129ea:	bf00      	nop
 80129ec:	2000aa6c 	.word	0x2000aa6c

080129f0 <_Balloc>:
 80129f0:	b570      	push	{r4, r5, r6, lr}
 80129f2:	69c6      	ldr	r6, [r0, #28]
 80129f4:	4604      	mov	r4, r0
 80129f6:	460d      	mov	r5, r1
 80129f8:	b976      	cbnz	r6, 8012a18 <_Balloc+0x28>
 80129fa:	2010      	movs	r0, #16
 80129fc:	f7ff ff32 	bl	8012864 <malloc>
 8012a00:	4602      	mov	r2, r0
 8012a02:	61e0      	str	r0, [r4, #28]
 8012a04:	b920      	cbnz	r0, 8012a10 <_Balloc+0x20>
 8012a06:	4b18      	ldr	r3, [pc, #96]	; (8012a68 <_Balloc+0x78>)
 8012a08:	4818      	ldr	r0, [pc, #96]	; (8012a6c <_Balloc+0x7c>)
 8012a0a:	216b      	movs	r1, #107	; 0x6b
 8012a0c:	f7ff fb68 	bl	80120e0 <__assert_func>
 8012a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a14:	6006      	str	r6, [r0, #0]
 8012a16:	60c6      	str	r6, [r0, #12]
 8012a18:	69e6      	ldr	r6, [r4, #28]
 8012a1a:	68f3      	ldr	r3, [r6, #12]
 8012a1c:	b183      	cbz	r3, 8012a40 <_Balloc+0x50>
 8012a1e:	69e3      	ldr	r3, [r4, #28]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a26:	b9b8      	cbnz	r0, 8012a58 <_Balloc+0x68>
 8012a28:	2101      	movs	r1, #1
 8012a2a:	fa01 f605 	lsl.w	r6, r1, r5
 8012a2e:	1d72      	adds	r2, r6, #5
 8012a30:	0092      	lsls	r2, r2, #2
 8012a32:	4620      	mov	r0, r4
 8012a34:	f001 f8d3 	bl	8013bde <_calloc_r>
 8012a38:	b160      	cbz	r0, 8012a54 <_Balloc+0x64>
 8012a3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012a3e:	e00e      	b.n	8012a5e <_Balloc+0x6e>
 8012a40:	2221      	movs	r2, #33	; 0x21
 8012a42:	2104      	movs	r1, #4
 8012a44:	4620      	mov	r0, r4
 8012a46:	f001 f8ca 	bl	8013bde <_calloc_r>
 8012a4a:	69e3      	ldr	r3, [r4, #28]
 8012a4c:	60f0      	str	r0, [r6, #12]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d1e4      	bne.n	8012a1e <_Balloc+0x2e>
 8012a54:	2000      	movs	r0, #0
 8012a56:	bd70      	pop	{r4, r5, r6, pc}
 8012a58:	6802      	ldr	r2, [r0, #0]
 8012a5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a5e:	2300      	movs	r3, #0
 8012a60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012a64:	e7f7      	b.n	8012a56 <_Balloc+0x66>
 8012a66:	bf00      	nop
 8012a68:	080168c6 	.word	0x080168c6
 8012a6c:	08016ba8 	.word	0x08016ba8

08012a70 <_Bfree>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	69c6      	ldr	r6, [r0, #28]
 8012a74:	4605      	mov	r5, r0
 8012a76:	460c      	mov	r4, r1
 8012a78:	b976      	cbnz	r6, 8012a98 <_Bfree+0x28>
 8012a7a:	2010      	movs	r0, #16
 8012a7c:	f7ff fef2 	bl	8012864 <malloc>
 8012a80:	4602      	mov	r2, r0
 8012a82:	61e8      	str	r0, [r5, #28]
 8012a84:	b920      	cbnz	r0, 8012a90 <_Bfree+0x20>
 8012a86:	4b09      	ldr	r3, [pc, #36]	; (8012aac <_Bfree+0x3c>)
 8012a88:	4809      	ldr	r0, [pc, #36]	; (8012ab0 <_Bfree+0x40>)
 8012a8a:	218f      	movs	r1, #143	; 0x8f
 8012a8c:	f7ff fb28 	bl	80120e0 <__assert_func>
 8012a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a94:	6006      	str	r6, [r0, #0]
 8012a96:	60c6      	str	r6, [r0, #12]
 8012a98:	b13c      	cbz	r4, 8012aaa <_Bfree+0x3a>
 8012a9a:	69eb      	ldr	r3, [r5, #28]
 8012a9c:	6862      	ldr	r2, [r4, #4]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012aa4:	6021      	str	r1, [r4, #0]
 8012aa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012aaa:	bd70      	pop	{r4, r5, r6, pc}
 8012aac:	080168c6 	.word	0x080168c6
 8012ab0:	08016ba8 	.word	0x08016ba8

08012ab4 <__multadd>:
 8012ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab8:	690d      	ldr	r5, [r1, #16]
 8012aba:	4607      	mov	r7, r0
 8012abc:	460c      	mov	r4, r1
 8012abe:	461e      	mov	r6, r3
 8012ac0:	f101 0c14 	add.w	ip, r1, #20
 8012ac4:	2000      	movs	r0, #0
 8012ac6:	f8dc 3000 	ldr.w	r3, [ip]
 8012aca:	b299      	uxth	r1, r3
 8012acc:	fb02 6101 	mla	r1, r2, r1, r6
 8012ad0:	0c1e      	lsrs	r6, r3, #16
 8012ad2:	0c0b      	lsrs	r3, r1, #16
 8012ad4:	fb02 3306 	mla	r3, r2, r6, r3
 8012ad8:	b289      	uxth	r1, r1
 8012ada:	3001      	adds	r0, #1
 8012adc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ae0:	4285      	cmp	r5, r0
 8012ae2:	f84c 1b04 	str.w	r1, [ip], #4
 8012ae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012aea:	dcec      	bgt.n	8012ac6 <__multadd+0x12>
 8012aec:	b30e      	cbz	r6, 8012b32 <__multadd+0x7e>
 8012aee:	68a3      	ldr	r3, [r4, #8]
 8012af0:	42ab      	cmp	r3, r5
 8012af2:	dc19      	bgt.n	8012b28 <__multadd+0x74>
 8012af4:	6861      	ldr	r1, [r4, #4]
 8012af6:	4638      	mov	r0, r7
 8012af8:	3101      	adds	r1, #1
 8012afa:	f7ff ff79 	bl	80129f0 <_Balloc>
 8012afe:	4680      	mov	r8, r0
 8012b00:	b928      	cbnz	r0, 8012b0e <__multadd+0x5a>
 8012b02:	4602      	mov	r2, r0
 8012b04:	4b0c      	ldr	r3, [pc, #48]	; (8012b38 <__multadd+0x84>)
 8012b06:	480d      	ldr	r0, [pc, #52]	; (8012b3c <__multadd+0x88>)
 8012b08:	21ba      	movs	r1, #186	; 0xba
 8012b0a:	f7ff fae9 	bl	80120e0 <__assert_func>
 8012b0e:	6922      	ldr	r2, [r4, #16]
 8012b10:	3202      	adds	r2, #2
 8012b12:	f104 010c 	add.w	r1, r4, #12
 8012b16:	0092      	lsls	r2, r2, #2
 8012b18:	300c      	adds	r0, #12
 8012b1a:	f7ff faca 	bl	80120b2 <memcpy>
 8012b1e:	4621      	mov	r1, r4
 8012b20:	4638      	mov	r0, r7
 8012b22:	f7ff ffa5 	bl	8012a70 <_Bfree>
 8012b26:	4644      	mov	r4, r8
 8012b28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012b2c:	3501      	adds	r5, #1
 8012b2e:	615e      	str	r6, [r3, #20]
 8012b30:	6125      	str	r5, [r4, #16]
 8012b32:	4620      	mov	r0, r4
 8012b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b38:	08016b37 	.word	0x08016b37
 8012b3c:	08016ba8 	.word	0x08016ba8

08012b40 <__s2b>:
 8012b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b44:	460c      	mov	r4, r1
 8012b46:	4615      	mov	r5, r2
 8012b48:	461f      	mov	r7, r3
 8012b4a:	2209      	movs	r2, #9
 8012b4c:	3308      	adds	r3, #8
 8012b4e:	4606      	mov	r6, r0
 8012b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b54:	2100      	movs	r1, #0
 8012b56:	2201      	movs	r2, #1
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	db09      	blt.n	8012b70 <__s2b+0x30>
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f7ff ff47 	bl	80129f0 <_Balloc>
 8012b62:	b940      	cbnz	r0, 8012b76 <__s2b+0x36>
 8012b64:	4602      	mov	r2, r0
 8012b66:	4b19      	ldr	r3, [pc, #100]	; (8012bcc <__s2b+0x8c>)
 8012b68:	4819      	ldr	r0, [pc, #100]	; (8012bd0 <__s2b+0x90>)
 8012b6a:	21d3      	movs	r1, #211	; 0xd3
 8012b6c:	f7ff fab8 	bl	80120e0 <__assert_func>
 8012b70:	0052      	lsls	r2, r2, #1
 8012b72:	3101      	adds	r1, #1
 8012b74:	e7f0      	b.n	8012b58 <__s2b+0x18>
 8012b76:	9b08      	ldr	r3, [sp, #32]
 8012b78:	6143      	str	r3, [r0, #20]
 8012b7a:	2d09      	cmp	r5, #9
 8012b7c:	f04f 0301 	mov.w	r3, #1
 8012b80:	6103      	str	r3, [r0, #16]
 8012b82:	dd16      	ble.n	8012bb2 <__s2b+0x72>
 8012b84:	f104 0909 	add.w	r9, r4, #9
 8012b88:	46c8      	mov	r8, r9
 8012b8a:	442c      	add	r4, r5
 8012b8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012b90:	4601      	mov	r1, r0
 8012b92:	3b30      	subs	r3, #48	; 0x30
 8012b94:	220a      	movs	r2, #10
 8012b96:	4630      	mov	r0, r6
 8012b98:	f7ff ff8c 	bl	8012ab4 <__multadd>
 8012b9c:	45a0      	cmp	r8, r4
 8012b9e:	d1f5      	bne.n	8012b8c <__s2b+0x4c>
 8012ba0:	f1a5 0408 	sub.w	r4, r5, #8
 8012ba4:	444c      	add	r4, r9
 8012ba6:	1b2d      	subs	r5, r5, r4
 8012ba8:	1963      	adds	r3, r4, r5
 8012baa:	42bb      	cmp	r3, r7
 8012bac:	db04      	blt.n	8012bb8 <__s2b+0x78>
 8012bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb2:	340a      	adds	r4, #10
 8012bb4:	2509      	movs	r5, #9
 8012bb6:	e7f6      	b.n	8012ba6 <__s2b+0x66>
 8012bb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012bbc:	4601      	mov	r1, r0
 8012bbe:	3b30      	subs	r3, #48	; 0x30
 8012bc0:	220a      	movs	r2, #10
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	f7ff ff76 	bl	8012ab4 <__multadd>
 8012bc8:	e7ee      	b.n	8012ba8 <__s2b+0x68>
 8012bca:	bf00      	nop
 8012bcc:	08016b37 	.word	0x08016b37
 8012bd0:	08016ba8 	.word	0x08016ba8

08012bd4 <__hi0bits>:
 8012bd4:	0c03      	lsrs	r3, r0, #16
 8012bd6:	041b      	lsls	r3, r3, #16
 8012bd8:	b9d3      	cbnz	r3, 8012c10 <__hi0bits+0x3c>
 8012bda:	0400      	lsls	r0, r0, #16
 8012bdc:	2310      	movs	r3, #16
 8012bde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012be2:	bf04      	itt	eq
 8012be4:	0200      	lsleq	r0, r0, #8
 8012be6:	3308      	addeq	r3, #8
 8012be8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012bec:	bf04      	itt	eq
 8012bee:	0100      	lsleq	r0, r0, #4
 8012bf0:	3304      	addeq	r3, #4
 8012bf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012bf6:	bf04      	itt	eq
 8012bf8:	0080      	lsleq	r0, r0, #2
 8012bfa:	3302      	addeq	r3, #2
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	db05      	blt.n	8012c0c <__hi0bits+0x38>
 8012c00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012c04:	f103 0301 	add.w	r3, r3, #1
 8012c08:	bf08      	it	eq
 8012c0a:	2320      	moveq	r3, #32
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	4770      	bx	lr
 8012c10:	2300      	movs	r3, #0
 8012c12:	e7e4      	b.n	8012bde <__hi0bits+0xa>

08012c14 <__lo0bits>:
 8012c14:	6803      	ldr	r3, [r0, #0]
 8012c16:	f013 0207 	ands.w	r2, r3, #7
 8012c1a:	d00c      	beq.n	8012c36 <__lo0bits+0x22>
 8012c1c:	07d9      	lsls	r1, r3, #31
 8012c1e:	d422      	bmi.n	8012c66 <__lo0bits+0x52>
 8012c20:	079a      	lsls	r2, r3, #30
 8012c22:	bf49      	itett	mi
 8012c24:	085b      	lsrmi	r3, r3, #1
 8012c26:	089b      	lsrpl	r3, r3, #2
 8012c28:	6003      	strmi	r3, [r0, #0]
 8012c2a:	2201      	movmi	r2, #1
 8012c2c:	bf5c      	itt	pl
 8012c2e:	6003      	strpl	r3, [r0, #0]
 8012c30:	2202      	movpl	r2, #2
 8012c32:	4610      	mov	r0, r2
 8012c34:	4770      	bx	lr
 8012c36:	b299      	uxth	r1, r3
 8012c38:	b909      	cbnz	r1, 8012c3e <__lo0bits+0x2a>
 8012c3a:	0c1b      	lsrs	r3, r3, #16
 8012c3c:	2210      	movs	r2, #16
 8012c3e:	b2d9      	uxtb	r1, r3
 8012c40:	b909      	cbnz	r1, 8012c46 <__lo0bits+0x32>
 8012c42:	3208      	adds	r2, #8
 8012c44:	0a1b      	lsrs	r3, r3, #8
 8012c46:	0719      	lsls	r1, r3, #28
 8012c48:	bf04      	itt	eq
 8012c4a:	091b      	lsreq	r3, r3, #4
 8012c4c:	3204      	addeq	r2, #4
 8012c4e:	0799      	lsls	r1, r3, #30
 8012c50:	bf04      	itt	eq
 8012c52:	089b      	lsreq	r3, r3, #2
 8012c54:	3202      	addeq	r2, #2
 8012c56:	07d9      	lsls	r1, r3, #31
 8012c58:	d403      	bmi.n	8012c62 <__lo0bits+0x4e>
 8012c5a:	085b      	lsrs	r3, r3, #1
 8012c5c:	f102 0201 	add.w	r2, r2, #1
 8012c60:	d003      	beq.n	8012c6a <__lo0bits+0x56>
 8012c62:	6003      	str	r3, [r0, #0]
 8012c64:	e7e5      	b.n	8012c32 <__lo0bits+0x1e>
 8012c66:	2200      	movs	r2, #0
 8012c68:	e7e3      	b.n	8012c32 <__lo0bits+0x1e>
 8012c6a:	2220      	movs	r2, #32
 8012c6c:	e7e1      	b.n	8012c32 <__lo0bits+0x1e>
	...

08012c70 <__i2b>:
 8012c70:	b510      	push	{r4, lr}
 8012c72:	460c      	mov	r4, r1
 8012c74:	2101      	movs	r1, #1
 8012c76:	f7ff febb 	bl	80129f0 <_Balloc>
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	b928      	cbnz	r0, 8012c8a <__i2b+0x1a>
 8012c7e:	4b05      	ldr	r3, [pc, #20]	; (8012c94 <__i2b+0x24>)
 8012c80:	4805      	ldr	r0, [pc, #20]	; (8012c98 <__i2b+0x28>)
 8012c82:	f240 1145 	movw	r1, #325	; 0x145
 8012c86:	f7ff fa2b 	bl	80120e0 <__assert_func>
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	6144      	str	r4, [r0, #20]
 8012c8e:	6103      	str	r3, [r0, #16]
 8012c90:	bd10      	pop	{r4, pc}
 8012c92:	bf00      	nop
 8012c94:	08016b37 	.word	0x08016b37
 8012c98:	08016ba8 	.word	0x08016ba8

08012c9c <__multiply>:
 8012c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca0:	4691      	mov	r9, r2
 8012ca2:	690a      	ldr	r2, [r1, #16]
 8012ca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	bfb8      	it	lt
 8012cac:	460b      	movlt	r3, r1
 8012cae:	460c      	mov	r4, r1
 8012cb0:	bfbc      	itt	lt
 8012cb2:	464c      	movlt	r4, r9
 8012cb4:	4699      	movlt	r9, r3
 8012cb6:	6927      	ldr	r7, [r4, #16]
 8012cb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012cbc:	68a3      	ldr	r3, [r4, #8]
 8012cbe:	6861      	ldr	r1, [r4, #4]
 8012cc0:	eb07 060a 	add.w	r6, r7, sl
 8012cc4:	42b3      	cmp	r3, r6
 8012cc6:	b085      	sub	sp, #20
 8012cc8:	bfb8      	it	lt
 8012cca:	3101      	addlt	r1, #1
 8012ccc:	f7ff fe90 	bl	80129f0 <_Balloc>
 8012cd0:	b930      	cbnz	r0, 8012ce0 <__multiply+0x44>
 8012cd2:	4602      	mov	r2, r0
 8012cd4:	4b44      	ldr	r3, [pc, #272]	; (8012de8 <__multiply+0x14c>)
 8012cd6:	4845      	ldr	r0, [pc, #276]	; (8012dec <__multiply+0x150>)
 8012cd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012cdc:	f7ff fa00 	bl	80120e0 <__assert_func>
 8012ce0:	f100 0514 	add.w	r5, r0, #20
 8012ce4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ce8:	462b      	mov	r3, r5
 8012cea:	2200      	movs	r2, #0
 8012cec:	4543      	cmp	r3, r8
 8012cee:	d321      	bcc.n	8012d34 <__multiply+0x98>
 8012cf0:	f104 0314 	add.w	r3, r4, #20
 8012cf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012cf8:	f109 0314 	add.w	r3, r9, #20
 8012cfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012d00:	9202      	str	r2, [sp, #8]
 8012d02:	1b3a      	subs	r2, r7, r4
 8012d04:	3a15      	subs	r2, #21
 8012d06:	f022 0203 	bic.w	r2, r2, #3
 8012d0a:	3204      	adds	r2, #4
 8012d0c:	f104 0115 	add.w	r1, r4, #21
 8012d10:	428f      	cmp	r7, r1
 8012d12:	bf38      	it	cc
 8012d14:	2204      	movcc	r2, #4
 8012d16:	9201      	str	r2, [sp, #4]
 8012d18:	9a02      	ldr	r2, [sp, #8]
 8012d1a:	9303      	str	r3, [sp, #12]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d80c      	bhi.n	8012d3a <__multiply+0x9e>
 8012d20:	2e00      	cmp	r6, #0
 8012d22:	dd03      	ble.n	8012d2c <__multiply+0x90>
 8012d24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d05b      	beq.n	8012de4 <__multiply+0x148>
 8012d2c:	6106      	str	r6, [r0, #16]
 8012d2e:	b005      	add	sp, #20
 8012d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d34:	f843 2b04 	str.w	r2, [r3], #4
 8012d38:	e7d8      	b.n	8012cec <__multiply+0x50>
 8012d3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8012d3e:	f1ba 0f00 	cmp.w	sl, #0
 8012d42:	d024      	beq.n	8012d8e <__multiply+0xf2>
 8012d44:	f104 0e14 	add.w	lr, r4, #20
 8012d48:	46a9      	mov	r9, r5
 8012d4a:	f04f 0c00 	mov.w	ip, #0
 8012d4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012d52:	f8d9 1000 	ldr.w	r1, [r9]
 8012d56:	fa1f fb82 	uxth.w	fp, r2
 8012d5a:	b289      	uxth	r1, r1
 8012d5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012d60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012d64:	f8d9 2000 	ldr.w	r2, [r9]
 8012d68:	4461      	add	r1, ip
 8012d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012d72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012d76:	b289      	uxth	r1, r1
 8012d78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012d7c:	4577      	cmp	r7, lr
 8012d7e:	f849 1b04 	str.w	r1, [r9], #4
 8012d82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d86:	d8e2      	bhi.n	8012d4e <__multiply+0xb2>
 8012d88:	9a01      	ldr	r2, [sp, #4]
 8012d8a:	f845 c002 	str.w	ip, [r5, r2]
 8012d8e:	9a03      	ldr	r2, [sp, #12]
 8012d90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012d94:	3304      	adds	r3, #4
 8012d96:	f1b9 0f00 	cmp.w	r9, #0
 8012d9a:	d021      	beq.n	8012de0 <__multiply+0x144>
 8012d9c:	6829      	ldr	r1, [r5, #0]
 8012d9e:	f104 0c14 	add.w	ip, r4, #20
 8012da2:	46ae      	mov	lr, r5
 8012da4:	f04f 0a00 	mov.w	sl, #0
 8012da8:	f8bc b000 	ldrh.w	fp, [ip]
 8012dac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012db0:	fb09 220b 	mla	r2, r9, fp, r2
 8012db4:	4452      	add	r2, sl
 8012db6:	b289      	uxth	r1, r1
 8012db8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012dbc:	f84e 1b04 	str.w	r1, [lr], #4
 8012dc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012dc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012dc8:	f8be 1000 	ldrh.w	r1, [lr]
 8012dcc:	fb09 110a 	mla	r1, r9, sl, r1
 8012dd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012dd4:	4567      	cmp	r7, ip
 8012dd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012dda:	d8e5      	bhi.n	8012da8 <__multiply+0x10c>
 8012ddc:	9a01      	ldr	r2, [sp, #4]
 8012dde:	50a9      	str	r1, [r5, r2]
 8012de0:	3504      	adds	r5, #4
 8012de2:	e799      	b.n	8012d18 <__multiply+0x7c>
 8012de4:	3e01      	subs	r6, #1
 8012de6:	e79b      	b.n	8012d20 <__multiply+0x84>
 8012de8:	08016b37 	.word	0x08016b37
 8012dec:	08016ba8 	.word	0x08016ba8

08012df0 <__pow5mult>:
 8012df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012df4:	4615      	mov	r5, r2
 8012df6:	f012 0203 	ands.w	r2, r2, #3
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	460f      	mov	r7, r1
 8012dfe:	d007      	beq.n	8012e10 <__pow5mult+0x20>
 8012e00:	4c25      	ldr	r4, [pc, #148]	; (8012e98 <__pow5mult+0xa8>)
 8012e02:	3a01      	subs	r2, #1
 8012e04:	2300      	movs	r3, #0
 8012e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e0a:	f7ff fe53 	bl	8012ab4 <__multadd>
 8012e0e:	4607      	mov	r7, r0
 8012e10:	10ad      	asrs	r5, r5, #2
 8012e12:	d03d      	beq.n	8012e90 <__pow5mult+0xa0>
 8012e14:	69f4      	ldr	r4, [r6, #28]
 8012e16:	b97c      	cbnz	r4, 8012e38 <__pow5mult+0x48>
 8012e18:	2010      	movs	r0, #16
 8012e1a:	f7ff fd23 	bl	8012864 <malloc>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	61f0      	str	r0, [r6, #28]
 8012e22:	b928      	cbnz	r0, 8012e30 <__pow5mult+0x40>
 8012e24:	4b1d      	ldr	r3, [pc, #116]	; (8012e9c <__pow5mult+0xac>)
 8012e26:	481e      	ldr	r0, [pc, #120]	; (8012ea0 <__pow5mult+0xb0>)
 8012e28:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012e2c:	f7ff f958 	bl	80120e0 <__assert_func>
 8012e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e34:	6004      	str	r4, [r0, #0]
 8012e36:	60c4      	str	r4, [r0, #12]
 8012e38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e40:	b94c      	cbnz	r4, 8012e56 <__pow5mult+0x66>
 8012e42:	f240 2171 	movw	r1, #625	; 0x271
 8012e46:	4630      	mov	r0, r6
 8012e48:	f7ff ff12 	bl	8012c70 <__i2b>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e52:	4604      	mov	r4, r0
 8012e54:	6003      	str	r3, [r0, #0]
 8012e56:	f04f 0900 	mov.w	r9, #0
 8012e5a:	07eb      	lsls	r3, r5, #31
 8012e5c:	d50a      	bpl.n	8012e74 <__pow5mult+0x84>
 8012e5e:	4639      	mov	r1, r7
 8012e60:	4622      	mov	r2, r4
 8012e62:	4630      	mov	r0, r6
 8012e64:	f7ff ff1a 	bl	8012c9c <__multiply>
 8012e68:	4639      	mov	r1, r7
 8012e6a:	4680      	mov	r8, r0
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f7ff fdff 	bl	8012a70 <_Bfree>
 8012e72:	4647      	mov	r7, r8
 8012e74:	106d      	asrs	r5, r5, #1
 8012e76:	d00b      	beq.n	8012e90 <__pow5mult+0xa0>
 8012e78:	6820      	ldr	r0, [r4, #0]
 8012e7a:	b938      	cbnz	r0, 8012e8c <__pow5mult+0x9c>
 8012e7c:	4622      	mov	r2, r4
 8012e7e:	4621      	mov	r1, r4
 8012e80:	4630      	mov	r0, r6
 8012e82:	f7ff ff0b 	bl	8012c9c <__multiply>
 8012e86:	6020      	str	r0, [r4, #0]
 8012e88:	f8c0 9000 	str.w	r9, [r0]
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	e7e4      	b.n	8012e5a <__pow5mult+0x6a>
 8012e90:	4638      	mov	r0, r7
 8012e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e96:	bf00      	nop
 8012e98:	08016cf8 	.word	0x08016cf8
 8012e9c:	080168c6 	.word	0x080168c6
 8012ea0:	08016ba8 	.word	0x08016ba8

08012ea4 <__lshift>:
 8012ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ea8:	460c      	mov	r4, r1
 8012eaa:	6849      	ldr	r1, [r1, #4]
 8012eac:	6923      	ldr	r3, [r4, #16]
 8012eae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012eb2:	68a3      	ldr	r3, [r4, #8]
 8012eb4:	4607      	mov	r7, r0
 8012eb6:	4691      	mov	r9, r2
 8012eb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012ebc:	f108 0601 	add.w	r6, r8, #1
 8012ec0:	42b3      	cmp	r3, r6
 8012ec2:	db0b      	blt.n	8012edc <__lshift+0x38>
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	f7ff fd93 	bl	80129f0 <_Balloc>
 8012eca:	4605      	mov	r5, r0
 8012ecc:	b948      	cbnz	r0, 8012ee2 <__lshift+0x3e>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	4b28      	ldr	r3, [pc, #160]	; (8012f74 <__lshift+0xd0>)
 8012ed2:	4829      	ldr	r0, [pc, #164]	; (8012f78 <__lshift+0xd4>)
 8012ed4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012ed8:	f7ff f902 	bl	80120e0 <__assert_func>
 8012edc:	3101      	adds	r1, #1
 8012ede:	005b      	lsls	r3, r3, #1
 8012ee0:	e7ee      	b.n	8012ec0 <__lshift+0x1c>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	f100 0114 	add.w	r1, r0, #20
 8012ee8:	f100 0210 	add.w	r2, r0, #16
 8012eec:	4618      	mov	r0, r3
 8012eee:	4553      	cmp	r3, sl
 8012ef0:	db33      	blt.n	8012f5a <__lshift+0xb6>
 8012ef2:	6920      	ldr	r0, [r4, #16]
 8012ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ef8:	f104 0314 	add.w	r3, r4, #20
 8012efc:	f019 091f 	ands.w	r9, r9, #31
 8012f00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f08:	d02b      	beq.n	8012f62 <__lshift+0xbe>
 8012f0a:	f1c9 0e20 	rsb	lr, r9, #32
 8012f0e:	468a      	mov	sl, r1
 8012f10:	2200      	movs	r2, #0
 8012f12:	6818      	ldr	r0, [r3, #0]
 8012f14:	fa00 f009 	lsl.w	r0, r0, r9
 8012f18:	4310      	orrs	r0, r2
 8012f1a:	f84a 0b04 	str.w	r0, [sl], #4
 8012f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f22:	459c      	cmp	ip, r3
 8012f24:	fa22 f20e 	lsr.w	r2, r2, lr
 8012f28:	d8f3      	bhi.n	8012f12 <__lshift+0x6e>
 8012f2a:	ebac 0304 	sub.w	r3, ip, r4
 8012f2e:	3b15      	subs	r3, #21
 8012f30:	f023 0303 	bic.w	r3, r3, #3
 8012f34:	3304      	adds	r3, #4
 8012f36:	f104 0015 	add.w	r0, r4, #21
 8012f3a:	4584      	cmp	ip, r0
 8012f3c:	bf38      	it	cc
 8012f3e:	2304      	movcc	r3, #4
 8012f40:	50ca      	str	r2, [r1, r3]
 8012f42:	b10a      	cbz	r2, 8012f48 <__lshift+0xa4>
 8012f44:	f108 0602 	add.w	r6, r8, #2
 8012f48:	3e01      	subs	r6, #1
 8012f4a:	4638      	mov	r0, r7
 8012f4c:	612e      	str	r6, [r5, #16]
 8012f4e:	4621      	mov	r1, r4
 8012f50:	f7ff fd8e 	bl	8012a70 <_Bfree>
 8012f54:	4628      	mov	r0, r5
 8012f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012f5e:	3301      	adds	r3, #1
 8012f60:	e7c5      	b.n	8012eee <__lshift+0x4a>
 8012f62:	3904      	subs	r1, #4
 8012f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f68:	f841 2f04 	str.w	r2, [r1, #4]!
 8012f6c:	459c      	cmp	ip, r3
 8012f6e:	d8f9      	bhi.n	8012f64 <__lshift+0xc0>
 8012f70:	e7ea      	b.n	8012f48 <__lshift+0xa4>
 8012f72:	bf00      	nop
 8012f74:	08016b37 	.word	0x08016b37
 8012f78:	08016ba8 	.word	0x08016ba8

08012f7c <__mcmp>:
 8012f7c:	b530      	push	{r4, r5, lr}
 8012f7e:	6902      	ldr	r2, [r0, #16]
 8012f80:	690c      	ldr	r4, [r1, #16]
 8012f82:	1b12      	subs	r2, r2, r4
 8012f84:	d10e      	bne.n	8012fa4 <__mcmp+0x28>
 8012f86:	f100 0314 	add.w	r3, r0, #20
 8012f8a:	3114      	adds	r1, #20
 8012f8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012f90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012f94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012f98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012f9c:	42a5      	cmp	r5, r4
 8012f9e:	d003      	beq.n	8012fa8 <__mcmp+0x2c>
 8012fa0:	d305      	bcc.n	8012fae <__mcmp+0x32>
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	4610      	mov	r0, r2
 8012fa6:	bd30      	pop	{r4, r5, pc}
 8012fa8:	4283      	cmp	r3, r0
 8012faa:	d3f3      	bcc.n	8012f94 <__mcmp+0x18>
 8012fac:	e7fa      	b.n	8012fa4 <__mcmp+0x28>
 8012fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fb2:	e7f7      	b.n	8012fa4 <__mcmp+0x28>

08012fb4 <__mdiff>:
 8012fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb8:	460c      	mov	r4, r1
 8012fba:	4606      	mov	r6, r0
 8012fbc:	4611      	mov	r1, r2
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	4690      	mov	r8, r2
 8012fc2:	f7ff ffdb 	bl	8012f7c <__mcmp>
 8012fc6:	1e05      	subs	r5, r0, #0
 8012fc8:	d110      	bne.n	8012fec <__mdiff+0x38>
 8012fca:	4629      	mov	r1, r5
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f7ff fd0f 	bl	80129f0 <_Balloc>
 8012fd2:	b930      	cbnz	r0, 8012fe2 <__mdiff+0x2e>
 8012fd4:	4b3a      	ldr	r3, [pc, #232]	; (80130c0 <__mdiff+0x10c>)
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	f240 2137 	movw	r1, #567	; 0x237
 8012fdc:	4839      	ldr	r0, [pc, #228]	; (80130c4 <__mdiff+0x110>)
 8012fde:	f7ff f87f 	bl	80120e0 <__assert_func>
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fec:	bfa4      	itt	ge
 8012fee:	4643      	movge	r3, r8
 8012ff0:	46a0      	movge	r8, r4
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ff8:	bfa6      	itte	ge
 8012ffa:	461c      	movge	r4, r3
 8012ffc:	2500      	movge	r5, #0
 8012ffe:	2501      	movlt	r5, #1
 8013000:	f7ff fcf6 	bl	80129f0 <_Balloc>
 8013004:	b920      	cbnz	r0, 8013010 <__mdiff+0x5c>
 8013006:	4b2e      	ldr	r3, [pc, #184]	; (80130c0 <__mdiff+0x10c>)
 8013008:	4602      	mov	r2, r0
 801300a:	f240 2145 	movw	r1, #581	; 0x245
 801300e:	e7e5      	b.n	8012fdc <__mdiff+0x28>
 8013010:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013014:	6926      	ldr	r6, [r4, #16]
 8013016:	60c5      	str	r5, [r0, #12]
 8013018:	f104 0914 	add.w	r9, r4, #20
 801301c:	f108 0514 	add.w	r5, r8, #20
 8013020:	f100 0e14 	add.w	lr, r0, #20
 8013024:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013028:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801302c:	f108 0210 	add.w	r2, r8, #16
 8013030:	46f2      	mov	sl, lr
 8013032:	2100      	movs	r1, #0
 8013034:	f859 3b04 	ldr.w	r3, [r9], #4
 8013038:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801303c:	fa11 f88b 	uxtah	r8, r1, fp
 8013040:	b299      	uxth	r1, r3
 8013042:	0c1b      	lsrs	r3, r3, #16
 8013044:	eba8 0801 	sub.w	r8, r8, r1
 8013048:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801304c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013050:	fa1f f888 	uxth.w	r8, r8
 8013054:	1419      	asrs	r1, r3, #16
 8013056:	454e      	cmp	r6, r9
 8013058:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801305c:	f84a 3b04 	str.w	r3, [sl], #4
 8013060:	d8e8      	bhi.n	8013034 <__mdiff+0x80>
 8013062:	1b33      	subs	r3, r6, r4
 8013064:	3b15      	subs	r3, #21
 8013066:	f023 0303 	bic.w	r3, r3, #3
 801306a:	3304      	adds	r3, #4
 801306c:	3415      	adds	r4, #21
 801306e:	42a6      	cmp	r6, r4
 8013070:	bf38      	it	cc
 8013072:	2304      	movcc	r3, #4
 8013074:	441d      	add	r5, r3
 8013076:	4473      	add	r3, lr
 8013078:	469e      	mov	lr, r3
 801307a:	462e      	mov	r6, r5
 801307c:	4566      	cmp	r6, ip
 801307e:	d30e      	bcc.n	801309e <__mdiff+0xea>
 8013080:	f10c 0203 	add.w	r2, ip, #3
 8013084:	1b52      	subs	r2, r2, r5
 8013086:	f022 0203 	bic.w	r2, r2, #3
 801308a:	3d03      	subs	r5, #3
 801308c:	45ac      	cmp	ip, r5
 801308e:	bf38      	it	cc
 8013090:	2200      	movcc	r2, #0
 8013092:	4413      	add	r3, r2
 8013094:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013098:	b17a      	cbz	r2, 80130ba <__mdiff+0x106>
 801309a:	6107      	str	r7, [r0, #16]
 801309c:	e7a4      	b.n	8012fe8 <__mdiff+0x34>
 801309e:	f856 8b04 	ldr.w	r8, [r6], #4
 80130a2:	fa11 f288 	uxtah	r2, r1, r8
 80130a6:	1414      	asrs	r4, r2, #16
 80130a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80130ac:	b292      	uxth	r2, r2
 80130ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80130b2:	f84e 2b04 	str.w	r2, [lr], #4
 80130b6:	1421      	asrs	r1, r4, #16
 80130b8:	e7e0      	b.n	801307c <__mdiff+0xc8>
 80130ba:	3f01      	subs	r7, #1
 80130bc:	e7ea      	b.n	8013094 <__mdiff+0xe0>
 80130be:	bf00      	nop
 80130c0:	08016b37 	.word	0x08016b37
 80130c4:	08016ba8 	.word	0x08016ba8

080130c8 <__ulp>:
 80130c8:	b082      	sub	sp, #8
 80130ca:	ed8d 0b00 	vstr	d0, [sp]
 80130ce:	9a01      	ldr	r2, [sp, #4]
 80130d0:	4b0f      	ldr	r3, [pc, #60]	; (8013110 <__ulp+0x48>)
 80130d2:	4013      	ands	r3, r2
 80130d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80130d8:	2b00      	cmp	r3, #0
 80130da:	dc08      	bgt.n	80130ee <__ulp+0x26>
 80130dc:	425b      	negs	r3, r3
 80130de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80130e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80130e6:	da04      	bge.n	80130f2 <__ulp+0x2a>
 80130e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80130ec:	4113      	asrs	r3, r2
 80130ee:	2200      	movs	r2, #0
 80130f0:	e008      	b.n	8013104 <__ulp+0x3c>
 80130f2:	f1a2 0314 	sub.w	r3, r2, #20
 80130f6:	2b1e      	cmp	r3, #30
 80130f8:	bfda      	itte	le
 80130fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80130fe:	40da      	lsrle	r2, r3
 8013100:	2201      	movgt	r2, #1
 8013102:	2300      	movs	r3, #0
 8013104:	4619      	mov	r1, r3
 8013106:	4610      	mov	r0, r2
 8013108:	ec41 0b10 	vmov	d0, r0, r1
 801310c:	b002      	add	sp, #8
 801310e:	4770      	bx	lr
 8013110:	7ff00000 	.word	0x7ff00000

08013114 <__b2d>:
 8013114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013118:	6906      	ldr	r6, [r0, #16]
 801311a:	f100 0814 	add.w	r8, r0, #20
 801311e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013122:	1f37      	subs	r7, r6, #4
 8013124:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013128:	4610      	mov	r0, r2
 801312a:	f7ff fd53 	bl	8012bd4 <__hi0bits>
 801312e:	f1c0 0320 	rsb	r3, r0, #32
 8013132:	280a      	cmp	r0, #10
 8013134:	600b      	str	r3, [r1, #0]
 8013136:	491b      	ldr	r1, [pc, #108]	; (80131a4 <__b2d+0x90>)
 8013138:	dc15      	bgt.n	8013166 <__b2d+0x52>
 801313a:	f1c0 0c0b 	rsb	ip, r0, #11
 801313e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013142:	45b8      	cmp	r8, r7
 8013144:	ea43 0501 	orr.w	r5, r3, r1
 8013148:	bf34      	ite	cc
 801314a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801314e:	2300      	movcs	r3, #0
 8013150:	3015      	adds	r0, #21
 8013152:	fa02 f000 	lsl.w	r0, r2, r0
 8013156:	fa23 f30c 	lsr.w	r3, r3, ip
 801315a:	4303      	orrs	r3, r0
 801315c:	461c      	mov	r4, r3
 801315e:	ec45 4b10 	vmov	d0, r4, r5
 8013162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013166:	45b8      	cmp	r8, r7
 8013168:	bf3a      	itte	cc
 801316a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801316e:	f1a6 0708 	subcc.w	r7, r6, #8
 8013172:	2300      	movcs	r3, #0
 8013174:	380b      	subs	r0, #11
 8013176:	d012      	beq.n	801319e <__b2d+0x8a>
 8013178:	f1c0 0120 	rsb	r1, r0, #32
 801317c:	fa23 f401 	lsr.w	r4, r3, r1
 8013180:	4082      	lsls	r2, r0
 8013182:	4322      	orrs	r2, r4
 8013184:	4547      	cmp	r7, r8
 8013186:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801318a:	bf8c      	ite	hi
 801318c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013190:	2200      	movls	r2, #0
 8013192:	4083      	lsls	r3, r0
 8013194:	40ca      	lsrs	r2, r1
 8013196:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801319a:	4313      	orrs	r3, r2
 801319c:	e7de      	b.n	801315c <__b2d+0x48>
 801319e:	ea42 0501 	orr.w	r5, r2, r1
 80131a2:	e7db      	b.n	801315c <__b2d+0x48>
 80131a4:	3ff00000 	.word	0x3ff00000

080131a8 <__d2b>:
 80131a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131ac:	460f      	mov	r7, r1
 80131ae:	2101      	movs	r1, #1
 80131b0:	ec59 8b10 	vmov	r8, r9, d0
 80131b4:	4616      	mov	r6, r2
 80131b6:	f7ff fc1b 	bl	80129f0 <_Balloc>
 80131ba:	4604      	mov	r4, r0
 80131bc:	b930      	cbnz	r0, 80131cc <__d2b+0x24>
 80131be:	4602      	mov	r2, r0
 80131c0:	4b24      	ldr	r3, [pc, #144]	; (8013254 <__d2b+0xac>)
 80131c2:	4825      	ldr	r0, [pc, #148]	; (8013258 <__d2b+0xb0>)
 80131c4:	f240 310f 	movw	r1, #783	; 0x30f
 80131c8:	f7fe ff8a 	bl	80120e0 <__assert_func>
 80131cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80131d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131d4:	bb2d      	cbnz	r5, 8013222 <__d2b+0x7a>
 80131d6:	9301      	str	r3, [sp, #4]
 80131d8:	f1b8 0300 	subs.w	r3, r8, #0
 80131dc:	d026      	beq.n	801322c <__d2b+0x84>
 80131de:	4668      	mov	r0, sp
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	f7ff fd17 	bl	8012c14 <__lo0bits>
 80131e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80131ea:	b1e8      	cbz	r0, 8013228 <__d2b+0x80>
 80131ec:	f1c0 0320 	rsb	r3, r0, #32
 80131f0:	fa02 f303 	lsl.w	r3, r2, r3
 80131f4:	430b      	orrs	r3, r1
 80131f6:	40c2      	lsrs	r2, r0
 80131f8:	6163      	str	r3, [r4, #20]
 80131fa:	9201      	str	r2, [sp, #4]
 80131fc:	9b01      	ldr	r3, [sp, #4]
 80131fe:	61a3      	str	r3, [r4, #24]
 8013200:	2b00      	cmp	r3, #0
 8013202:	bf14      	ite	ne
 8013204:	2202      	movne	r2, #2
 8013206:	2201      	moveq	r2, #1
 8013208:	6122      	str	r2, [r4, #16]
 801320a:	b1bd      	cbz	r5, 801323c <__d2b+0x94>
 801320c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013210:	4405      	add	r5, r0
 8013212:	603d      	str	r5, [r7, #0]
 8013214:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013218:	6030      	str	r0, [r6, #0]
 801321a:	4620      	mov	r0, r4
 801321c:	b003      	add	sp, #12
 801321e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013226:	e7d6      	b.n	80131d6 <__d2b+0x2e>
 8013228:	6161      	str	r1, [r4, #20]
 801322a:	e7e7      	b.n	80131fc <__d2b+0x54>
 801322c:	a801      	add	r0, sp, #4
 801322e:	f7ff fcf1 	bl	8012c14 <__lo0bits>
 8013232:	9b01      	ldr	r3, [sp, #4]
 8013234:	6163      	str	r3, [r4, #20]
 8013236:	3020      	adds	r0, #32
 8013238:	2201      	movs	r2, #1
 801323a:	e7e5      	b.n	8013208 <__d2b+0x60>
 801323c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013240:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013244:	6038      	str	r0, [r7, #0]
 8013246:	6918      	ldr	r0, [r3, #16]
 8013248:	f7ff fcc4 	bl	8012bd4 <__hi0bits>
 801324c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013250:	e7e2      	b.n	8013218 <__d2b+0x70>
 8013252:	bf00      	nop
 8013254:	08016b37 	.word	0x08016b37
 8013258:	08016ba8 	.word	0x08016ba8

0801325c <__ratio>:
 801325c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013260:	4688      	mov	r8, r1
 8013262:	4669      	mov	r1, sp
 8013264:	4681      	mov	r9, r0
 8013266:	f7ff ff55 	bl	8013114 <__b2d>
 801326a:	a901      	add	r1, sp, #4
 801326c:	4640      	mov	r0, r8
 801326e:	ec55 4b10 	vmov	r4, r5, d0
 8013272:	ee10 aa10 	vmov	sl, s0
 8013276:	f7ff ff4d 	bl	8013114 <__b2d>
 801327a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801327e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013282:	1ad2      	subs	r2, r2, r3
 8013284:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013288:	1a5b      	subs	r3, r3, r1
 801328a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801328e:	ec57 6b10 	vmov	r6, r7, d0
 8013292:	2b00      	cmp	r3, #0
 8013294:	bfd6      	itet	le
 8013296:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801329a:	462a      	movgt	r2, r5
 801329c:	463a      	movle	r2, r7
 801329e:	46ab      	mov	fp, r5
 80132a0:	bfd6      	itet	le
 80132a2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80132a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80132aa:	ee00 3a90 	vmovle	s1, r3
 80132ae:	ec4b ab17 	vmov	d7, sl, fp
 80132b2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80132b6:	b003      	add	sp, #12
 80132b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132bc <__copybits>:
 80132bc:	3901      	subs	r1, #1
 80132be:	b570      	push	{r4, r5, r6, lr}
 80132c0:	1149      	asrs	r1, r1, #5
 80132c2:	6914      	ldr	r4, [r2, #16]
 80132c4:	3101      	adds	r1, #1
 80132c6:	f102 0314 	add.w	r3, r2, #20
 80132ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80132ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80132d2:	1f05      	subs	r5, r0, #4
 80132d4:	42a3      	cmp	r3, r4
 80132d6:	d30c      	bcc.n	80132f2 <__copybits+0x36>
 80132d8:	1aa3      	subs	r3, r4, r2
 80132da:	3b11      	subs	r3, #17
 80132dc:	f023 0303 	bic.w	r3, r3, #3
 80132e0:	3211      	adds	r2, #17
 80132e2:	42a2      	cmp	r2, r4
 80132e4:	bf88      	it	hi
 80132e6:	2300      	movhi	r3, #0
 80132e8:	4418      	add	r0, r3
 80132ea:	2300      	movs	r3, #0
 80132ec:	4288      	cmp	r0, r1
 80132ee:	d305      	bcc.n	80132fc <__copybits+0x40>
 80132f0:	bd70      	pop	{r4, r5, r6, pc}
 80132f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80132f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80132fa:	e7eb      	b.n	80132d4 <__copybits+0x18>
 80132fc:	f840 3b04 	str.w	r3, [r0], #4
 8013300:	e7f4      	b.n	80132ec <__copybits+0x30>

08013302 <__any_on>:
 8013302:	f100 0214 	add.w	r2, r0, #20
 8013306:	6900      	ldr	r0, [r0, #16]
 8013308:	114b      	asrs	r3, r1, #5
 801330a:	4298      	cmp	r0, r3
 801330c:	b510      	push	{r4, lr}
 801330e:	db11      	blt.n	8013334 <__any_on+0x32>
 8013310:	dd0a      	ble.n	8013328 <__any_on+0x26>
 8013312:	f011 011f 	ands.w	r1, r1, #31
 8013316:	d007      	beq.n	8013328 <__any_on+0x26>
 8013318:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801331c:	fa24 f001 	lsr.w	r0, r4, r1
 8013320:	fa00 f101 	lsl.w	r1, r0, r1
 8013324:	428c      	cmp	r4, r1
 8013326:	d10b      	bne.n	8013340 <__any_on+0x3e>
 8013328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801332c:	4293      	cmp	r3, r2
 801332e:	d803      	bhi.n	8013338 <__any_on+0x36>
 8013330:	2000      	movs	r0, #0
 8013332:	bd10      	pop	{r4, pc}
 8013334:	4603      	mov	r3, r0
 8013336:	e7f7      	b.n	8013328 <__any_on+0x26>
 8013338:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801333c:	2900      	cmp	r1, #0
 801333e:	d0f5      	beq.n	801332c <__any_on+0x2a>
 8013340:	2001      	movs	r0, #1
 8013342:	e7f6      	b.n	8013332 <__any_on+0x30>

08013344 <__ascii_wctomb>:
 8013344:	b149      	cbz	r1, 801335a <__ascii_wctomb+0x16>
 8013346:	2aff      	cmp	r2, #255	; 0xff
 8013348:	bf85      	ittet	hi
 801334a:	238a      	movhi	r3, #138	; 0x8a
 801334c:	6003      	strhi	r3, [r0, #0]
 801334e:	700a      	strbls	r2, [r1, #0]
 8013350:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013354:	bf98      	it	ls
 8013356:	2001      	movls	r0, #1
 8013358:	4770      	bx	lr
 801335a:	4608      	mov	r0, r1
 801335c:	4770      	bx	lr

0801335e <__sfputc_r>:
 801335e:	6893      	ldr	r3, [r2, #8]
 8013360:	3b01      	subs	r3, #1
 8013362:	2b00      	cmp	r3, #0
 8013364:	b410      	push	{r4}
 8013366:	6093      	str	r3, [r2, #8]
 8013368:	da08      	bge.n	801337c <__sfputc_r+0x1e>
 801336a:	6994      	ldr	r4, [r2, #24]
 801336c:	42a3      	cmp	r3, r4
 801336e:	db01      	blt.n	8013374 <__sfputc_r+0x16>
 8013370:	290a      	cmp	r1, #10
 8013372:	d103      	bne.n	801337c <__sfputc_r+0x1e>
 8013374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013378:	f000 bb84 	b.w	8013a84 <__swbuf_r>
 801337c:	6813      	ldr	r3, [r2, #0]
 801337e:	1c58      	adds	r0, r3, #1
 8013380:	6010      	str	r0, [r2, #0]
 8013382:	7019      	strb	r1, [r3, #0]
 8013384:	4608      	mov	r0, r1
 8013386:	f85d 4b04 	ldr.w	r4, [sp], #4
 801338a:	4770      	bx	lr

0801338c <__sfputs_r>:
 801338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801338e:	4606      	mov	r6, r0
 8013390:	460f      	mov	r7, r1
 8013392:	4614      	mov	r4, r2
 8013394:	18d5      	adds	r5, r2, r3
 8013396:	42ac      	cmp	r4, r5
 8013398:	d101      	bne.n	801339e <__sfputs_r+0x12>
 801339a:	2000      	movs	r0, #0
 801339c:	e007      	b.n	80133ae <__sfputs_r+0x22>
 801339e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133a2:	463a      	mov	r2, r7
 80133a4:	4630      	mov	r0, r6
 80133a6:	f7ff ffda 	bl	801335e <__sfputc_r>
 80133aa:	1c43      	adds	r3, r0, #1
 80133ac:	d1f3      	bne.n	8013396 <__sfputs_r+0xa>
 80133ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080133b0 <_vfiprintf_r>:
 80133b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	460d      	mov	r5, r1
 80133b6:	b09d      	sub	sp, #116	; 0x74
 80133b8:	4614      	mov	r4, r2
 80133ba:	4698      	mov	r8, r3
 80133bc:	4606      	mov	r6, r0
 80133be:	b118      	cbz	r0, 80133c8 <_vfiprintf_r+0x18>
 80133c0:	6a03      	ldr	r3, [r0, #32]
 80133c2:	b90b      	cbnz	r3, 80133c8 <_vfiprintf_r+0x18>
 80133c4:	f7fe fcde 	bl	8011d84 <__sinit>
 80133c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133ca:	07d9      	lsls	r1, r3, #31
 80133cc:	d405      	bmi.n	80133da <_vfiprintf_r+0x2a>
 80133ce:	89ab      	ldrh	r3, [r5, #12]
 80133d0:	059a      	lsls	r2, r3, #22
 80133d2:	d402      	bmi.n	80133da <_vfiprintf_r+0x2a>
 80133d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133d6:	f7fe fe6a 	bl	80120ae <__retarget_lock_acquire_recursive>
 80133da:	89ab      	ldrh	r3, [r5, #12]
 80133dc:	071b      	lsls	r3, r3, #28
 80133de:	d501      	bpl.n	80133e4 <_vfiprintf_r+0x34>
 80133e0:	692b      	ldr	r3, [r5, #16]
 80133e2:	b99b      	cbnz	r3, 801340c <_vfiprintf_r+0x5c>
 80133e4:	4629      	mov	r1, r5
 80133e6:	4630      	mov	r0, r6
 80133e8:	f000 fb8a 	bl	8013b00 <__swsetup_r>
 80133ec:	b170      	cbz	r0, 801340c <_vfiprintf_r+0x5c>
 80133ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133f0:	07dc      	lsls	r4, r3, #31
 80133f2:	d504      	bpl.n	80133fe <_vfiprintf_r+0x4e>
 80133f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133f8:	b01d      	add	sp, #116	; 0x74
 80133fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133fe:	89ab      	ldrh	r3, [r5, #12]
 8013400:	0598      	lsls	r0, r3, #22
 8013402:	d4f7      	bmi.n	80133f4 <_vfiprintf_r+0x44>
 8013404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013406:	f7fe fe53 	bl	80120b0 <__retarget_lock_release_recursive>
 801340a:	e7f3      	b.n	80133f4 <_vfiprintf_r+0x44>
 801340c:	2300      	movs	r3, #0
 801340e:	9309      	str	r3, [sp, #36]	; 0x24
 8013410:	2320      	movs	r3, #32
 8013412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013416:	f8cd 800c 	str.w	r8, [sp, #12]
 801341a:	2330      	movs	r3, #48	; 0x30
 801341c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80135d0 <_vfiprintf_r+0x220>
 8013420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013424:	f04f 0901 	mov.w	r9, #1
 8013428:	4623      	mov	r3, r4
 801342a:	469a      	mov	sl, r3
 801342c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013430:	b10a      	cbz	r2, 8013436 <_vfiprintf_r+0x86>
 8013432:	2a25      	cmp	r2, #37	; 0x25
 8013434:	d1f9      	bne.n	801342a <_vfiprintf_r+0x7a>
 8013436:	ebba 0b04 	subs.w	fp, sl, r4
 801343a:	d00b      	beq.n	8013454 <_vfiprintf_r+0xa4>
 801343c:	465b      	mov	r3, fp
 801343e:	4622      	mov	r2, r4
 8013440:	4629      	mov	r1, r5
 8013442:	4630      	mov	r0, r6
 8013444:	f7ff ffa2 	bl	801338c <__sfputs_r>
 8013448:	3001      	adds	r0, #1
 801344a:	f000 80a9 	beq.w	80135a0 <_vfiprintf_r+0x1f0>
 801344e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013450:	445a      	add	r2, fp
 8013452:	9209      	str	r2, [sp, #36]	; 0x24
 8013454:	f89a 3000 	ldrb.w	r3, [sl]
 8013458:	2b00      	cmp	r3, #0
 801345a:	f000 80a1 	beq.w	80135a0 <_vfiprintf_r+0x1f0>
 801345e:	2300      	movs	r3, #0
 8013460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013468:	f10a 0a01 	add.w	sl, sl, #1
 801346c:	9304      	str	r3, [sp, #16]
 801346e:	9307      	str	r3, [sp, #28]
 8013470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013474:	931a      	str	r3, [sp, #104]	; 0x68
 8013476:	4654      	mov	r4, sl
 8013478:	2205      	movs	r2, #5
 801347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801347e:	4854      	ldr	r0, [pc, #336]	; (80135d0 <_vfiprintf_r+0x220>)
 8013480:	f7ec fede 	bl	8000240 <memchr>
 8013484:	9a04      	ldr	r2, [sp, #16]
 8013486:	b9d8      	cbnz	r0, 80134c0 <_vfiprintf_r+0x110>
 8013488:	06d1      	lsls	r1, r2, #27
 801348a:	bf44      	itt	mi
 801348c:	2320      	movmi	r3, #32
 801348e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013492:	0713      	lsls	r3, r2, #28
 8013494:	bf44      	itt	mi
 8013496:	232b      	movmi	r3, #43	; 0x2b
 8013498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801349c:	f89a 3000 	ldrb.w	r3, [sl]
 80134a0:	2b2a      	cmp	r3, #42	; 0x2a
 80134a2:	d015      	beq.n	80134d0 <_vfiprintf_r+0x120>
 80134a4:	9a07      	ldr	r2, [sp, #28]
 80134a6:	4654      	mov	r4, sl
 80134a8:	2000      	movs	r0, #0
 80134aa:	f04f 0c0a 	mov.w	ip, #10
 80134ae:	4621      	mov	r1, r4
 80134b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134b4:	3b30      	subs	r3, #48	; 0x30
 80134b6:	2b09      	cmp	r3, #9
 80134b8:	d94d      	bls.n	8013556 <_vfiprintf_r+0x1a6>
 80134ba:	b1b0      	cbz	r0, 80134ea <_vfiprintf_r+0x13a>
 80134bc:	9207      	str	r2, [sp, #28]
 80134be:	e014      	b.n	80134ea <_vfiprintf_r+0x13a>
 80134c0:	eba0 0308 	sub.w	r3, r0, r8
 80134c4:	fa09 f303 	lsl.w	r3, r9, r3
 80134c8:	4313      	orrs	r3, r2
 80134ca:	9304      	str	r3, [sp, #16]
 80134cc:	46a2      	mov	sl, r4
 80134ce:	e7d2      	b.n	8013476 <_vfiprintf_r+0xc6>
 80134d0:	9b03      	ldr	r3, [sp, #12]
 80134d2:	1d19      	adds	r1, r3, #4
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	9103      	str	r1, [sp, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	bfbb      	ittet	lt
 80134dc:	425b      	neglt	r3, r3
 80134de:	f042 0202 	orrlt.w	r2, r2, #2
 80134e2:	9307      	strge	r3, [sp, #28]
 80134e4:	9307      	strlt	r3, [sp, #28]
 80134e6:	bfb8      	it	lt
 80134e8:	9204      	strlt	r2, [sp, #16]
 80134ea:	7823      	ldrb	r3, [r4, #0]
 80134ec:	2b2e      	cmp	r3, #46	; 0x2e
 80134ee:	d10c      	bne.n	801350a <_vfiprintf_r+0x15a>
 80134f0:	7863      	ldrb	r3, [r4, #1]
 80134f2:	2b2a      	cmp	r3, #42	; 0x2a
 80134f4:	d134      	bne.n	8013560 <_vfiprintf_r+0x1b0>
 80134f6:	9b03      	ldr	r3, [sp, #12]
 80134f8:	1d1a      	adds	r2, r3, #4
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	9203      	str	r2, [sp, #12]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	bfb8      	it	lt
 8013502:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013506:	3402      	adds	r4, #2
 8013508:	9305      	str	r3, [sp, #20]
 801350a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80135e0 <_vfiprintf_r+0x230>
 801350e:	7821      	ldrb	r1, [r4, #0]
 8013510:	2203      	movs	r2, #3
 8013512:	4650      	mov	r0, sl
 8013514:	f7ec fe94 	bl	8000240 <memchr>
 8013518:	b138      	cbz	r0, 801352a <_vfiprintf_r+0x17a>
 801351a:	9b04      	ldr	r3, [sp, #16]
 801351c:	eba0 000a 	sub.w	r0, r0, sl
 8013520:	2240      	movs	r2, #64	; 0x40
 8013522:	4082      	lsls	r2, r0
 8013524:	4313      	orrs	r3, r2
 8013526:	3401      	adds	r4, #1
 8013528:	9304      	str	r3, [sp, #16]
 801352a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801352e:	4829      	ldr	r0, [pc, #164]	; (80135d4 <_vfiprintf_r+0x224>)
 8013530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013534:	2206      	movs	r2, #6
 8013536:	f7ec fe83 	bl	8000240 <memchr>
 801353a:	2800      	cmp	r0, #0
 801353c:	d03f      	beq.n	80135be <_vfiprintf_r+0x20e>
 801353e:	4b26      	ldr	r3, [pc, #152]	; (80135d8 <_vfiprintf_r+0x228>)
 8013540:	bb1b      	cbnz	r3, 801358a <_vfiprintf_r+0x1da>
 8013542:	9b03      	ldr	r3, [sp, #12]
 8013544:	3307      	adds	r3, #7
 8013546:	f023 0307 	bic.w	r3, r3, #7
 801354a:	3308      	adds	r3, #8
 801354c:	9303      	str	r3, [sp, #12]
 801354e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013550:	443b      	add	r3, r7
 8013552:	9309      	str	r3, [sp, #36]	; 0x24
 8013554:	e768      	b.n	8013428 <_vfiprintf_r+0x78>
 8013556:	fb0c 3202 	mla	r2, ip, r2, r3
 801355a:	460c      	mov	r4, r1
 801355c:	2001      	movs	r0, #1
 801355e:	e7a6      	b.n	80134ae <_vfiprintf_r+0xfe>
 8013560:	2300      	movs	r3, #0
 8013562:	3401      	adds	r4, #1
 8013564:	9305      	str	r3, [sp, #20]
 8013566:	4619      	mov	r1, r3
 8013568:	f04f 0c0a 	mov.w	ip, #10
 801356c:	4620      	mov	r0, r4
 801356e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013572:	3a30      	subs	r2, #48	; 0x30
 8013574:	2a09      	cmp	r2, #9
 8013576:	d903      	bls.n	8013580 <_vfiprintf_r+0x1d0>
 8013578:	2b00      	cmp	r3, #0
 801357a:	d0c6      	beq.n	801350a <_vfiprintf_r+0x15a>
 801357c:	9105      	str	r1, [sp, #20]
 801357e:	e7c4      	b.n	801350a <_vfiprintf_r+0x15a>
 8013580:	fb0c 2101 	mla	r1, ip, r1, r2
 8013584:	4604      	mov	r4, r0
 8013586:	2301      	movs	r3, #1
 8013588:	e7f0      	b.n	801356c <_vfiprintf_r+0x1bc>
 801358a:	ab03      	add	r3, sp, #12
 801358c:	9300      	str	r3, [sp, #0]
 801358e:	462a      	mov	r2, r5
 8013590:	4b12      	ldr	r3, [pc, #72]	; (80135dc <_vfiprintf_r+0x22c>)
 8013592:	a904      	add	r1, sp, #16
 8013594:	4630      	mov	r0, r6
 8013596:	f3af 8000 	nop.w
 801359a:	4607      	mov	r7, r0
 801359c:	1c78      	adds	r0, r7, #1
 801359e:	d1d6      	bne.n	801354e <_vfiprintf_r+0x19e>
 80135a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135a2:	07d9      	lsls	r1, r3, #31
 80135a4:	d405      	bmi.n	80135b2 <_vfiprintf_r+0x202>
 80135a6:	89ab      	ldrh	r3, [r5, #12]
 80135a8:	059a      	lsls	r2, r3, #22
 80135aa:	d402      	bmi.n	80135b2 <_vfiprintf_r+0x202>
 80135ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135ae:	f7fe fd7f 	bl	80120b0 <__retarget_lock_release_recursive>
 80135b2:	89ab      	ldrh	r3, [r5, #12]
 80135b4:	065b      	lsls	r3, r3, #25
 80135b6:	f53f af1d 	bmi.w	80133f4 <_vfiprintf_r+0x44>
 80135ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135bc:	e71c      	b.n	80133f8 <_vfiprintf_r+0x48>
 80135be:	ab03      	add	r3, sp, #12
 80135c0:	9300      	str	r3, [sp, #0]
 80135c2:	462a      	mov	r2, r5
 80135c4:	4b05      	ldr	r3, [pc, #20]	; (80135dc <_vfiprintf_r+0x22c>)
 80135c6:	a904      	add	r1, sp, #16
 80135c8:	4630      	mov	r0, r6
 80135ca:	f000 f879 	bl	80136c0 <_printf_i>
 80135ce:	e7e4      	b.n	801359a <_vfiprintf_r+0x1ea>
 80135d0:	08016d04 	.word	0x08016d04
 80135d4:	08016d0e 	.word	0x08016d0e
 80135d8:	00000000 	.word	0x00000000
 80135dc:	0801338d 	.word	0x0801338d
 80135e0:	08016d0a 	.word	0x08016d0a

080135e4 <_printf_common>:
 80135e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135e8:	4616      	mov	r6, r2
 80135ea:	4699      	mov	r9, r3
 80135ec:	688a      	ldr	r2, [r1, #8]
 80135ee:	690b      	ldr	r3, [r1, #16]
 80135f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80135f4:	4293      	cmp	r3, r2
 80135f6:	bfb8      	it	lt
 80135f8:	4613      	movlt	r3, r2
 80135fa:	6033      	str	r3, [r6, #0]
 80135fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013600:	4607      	mov	r7, r0
 8013602:	460c      	mov	r4, r1
 8013604:	b10a      	cbz	r2, 801360a <_printf_common+0x26>
 8013606:	3301      	adds	r3, #1
 8013608:	6033      	str	r3, [r6, #0]
 801360a:	6823      	ldr	r3, [r4, #0]
 801360c:	0699      	lsls	r1, r3, #26
 801360e:	bf42      	ittt	mi
 8013610:	6833      	ldrmi	r3, [r6, #0]
 8013612:	3302      	addmi	r3, #2
 8013614:	6033      	strmi	r3, [r6, #0]
 8013616:	6825      	ldr	r5, [r4, #0]
 8013618:	f015 0506 	ands.w	r5, r5, #6
 801361c:	d106      	bne.n	801362c <_printf_common+0x48>
 801361e:	f104 0a19 	add.w	sl, r4, #25
 8013622:	68e3      	ldr	r3, [r4, #12]
 8013624:	6832      	ldr	r2, [r6, #0]
 8013626:	1a9b      	subs	r3, r3, r2
 8013628:	42ab      	cmp	r3, r5
 801362a:	dc26      	bgt.n	801367a <_printf_common+0x96>
 801362c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013630:	1e13      	subs	r3, r2, #0
 8013632:	6822      	ldr	r2, [r4, #0]
 8013634:	bf18      	it	ne
 8013636:	2301      	movne	r3, #1
 8013638:	0692      	lsls	r2, r2, #26
 801363a:	d42b      	bmi.n	8013694 <_printf_common+0xb0>
 801363c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013640:	4649      	mov	r1, r9
 8013642:	4638      	mov	r0, r7
 8013644:	47c0      	blx	r8
 8013646:	3001      	adds	r0, #1
 8013648:	d01e      	beq.n	8013688 <_printf_common+0xa4>
 801364a:	6823      	ldr	r3, [r4, #0]
 801364c:	6922      	ldr	r2, [r4, #16]
 801364e:	f003 0306 	and.w	r3, r3, #6
 8013652:	2b04      	cmp	r3, #4
 8013654:	bf02      	ittt	eq
 8013656:	68e5      	ldreq	r5, [r4, #12]
 8013658:	6833      	ldreq	r3, [r6, #0]
 801365a:	1aed      	subeq	r5, r5, r3
 801365c:	68a3      	ldr	r3, [r4, #8]
 801365e:	bf0c      	ite	eq
 8013660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013664:	2500      	movne	r5, #0
 8013666:	4293      	cmp	r3, r2
 8013668:	bfc4      	itt	gt
 801366a:	1a9b      	subgt	r3, r3, r2
 801366c:	18ed      	addgt	r5, r5, r3
 801366e:	2600      	movs	r6, #0
 8013670:	341a      	adds	r4, #26
 8013672:	42b5      	cmp	r5, r6
 8013674:	d11a      	bne.n	80136ac <_printf_common+0xc8>
 8013676:	2000      	movs	r0, #0
 8013678:	e008      	b.n	801368c <_printf_common+0xa8>
 801367a:	2301      	movs	r3, #1
 801367c:	4652      	mov	r2, sl
 801367e:	4649      	mov	r1, r9
 8013680:	4638      	mov	r0, r7
 8013682:	47c0      	blx	r8
 8013684:	3001      	adds	r0, #1
 8013686:	d103      	bne.n	8013690 <_printf_common+0xac>
 8013688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801368c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013690:	3501      	adds	r5, #1
 8013692:	e7c6      	b.n	8013622 <_printf_common+0x3e>
 8013694:	18e1      	adds	r1, r4, r3
 8013696:	1c5a      	adds	r2, r3, #1
 8013698:	2030      	movs	r0, #48	; 0x30
 801369a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801369e:	4422      	add	r2, r4
 80136a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80136a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80136a8:	3302      	adds	r3, #2
 80136aa:	e7c7      	b.n	801363c <_printf_common+0x58>
 80136ac:	2301      	movs	r3, #1
 80136ae:	4622      	mov	r2, r4
 80136b0:	4649      	mov	r1, r9
 80136b2:	4638      	mov	r0, r7
 80136b4:	47c0      	blx	r8
 80136b6:	3001      	adds	r0, #1
 80136b8:	d0e6      	beq.n	8013688 <_printf_common+0xa4>
 80136ba:	3601      	adds	r6, #1
 80136bc:	e7d9      	b.n	8013672 <_printf_common+0x8e>
	...

080136c0 <_printf_i>:
 80136c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80136c4:	7e0f      	ldrb	r7, [r1, #24]
 80136c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80136c8:	2f78      	cmp	r7, #120	; 0x78
 80136ca:	4691      	mov	r9, r2
 80136cc:	4680      	mov	r8, r0
 80136ce:	460c      	mov	r4, r1
 80136d0:	469a      	mov	sl, r3
 80136d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80136d6:	d807      	bhi.n	80136e8 <_printf_i+0x28>
 80136d8:	2f62      	cmp	r7, #98	; 0x62
 80136da:	d80a      	bhi.n	80136f2 <_printf_i+0x32>
 80136dc:	2f00      	cmp	r7, #0
 80136de:	f000 80d4 	beq.w	801388a <_printf_i+0x1ca>
 80136e2:	2f58      	cmp	r7, #88	; 0x58
 80136e4:	f000 80c0 	beq.w	8013868 <_printf_i+0x1a8>
 80136e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80136f0:	e03a      	b.n	8013768 <_printf_i+0xa8>
 80136f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80136f6:	2b15      	cmp	r3, #21
 80136f8:	d8f6      	bhi.n	80136e8 <_printf_i+0x28>
 80136fa:	a101      	add	r1, pc, #4	; (adr r1, 8013700 <_printf_i+0x40>)
 80136fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013700:	08013759 	.word	0x08013759
 8013704:	0801376d 	.word	0x0801376d
 8013708:	080136e9 	.word	0x080136e9
 801370c:	080136e9 	.word	0x080136e9
 8013710:	080136e9 	.word	0x080136e9
 8013714:	080136e9 	.word	0x080136e9
 8013718:	0801376d 	.word	0x0801376d
 801371c:	080136e9 	.word	0x080136e9
 8013720:	080136e9 	.word	0x080136e9
 8013724:	080136e9 	.word	0x080136e9
 8013728:	080136e9 	.word	0x080136e9
 801372c:	08013871 	.word	0x08013871
 8013730:	08013799 	.word	0x08013799
 8013734:	0801382b 	.word	0x0801382b
 8013738:	080136e9 	.word	0x080136e9
 801373c:	080136e9 	.word	0x080136e9
 8013740:	08013893 	.word	0x08013893
 8013744:	080136e9 	.word	0x080136e9
 8013748:	08013799 	.word	0x08013799
 801374c:	080136e9 	.word	0x080136e9
 8013750:	080136e9 	.word	0x080136e9
 8013754:	08013833 	.word	0x08013833
 8013758:	682b      	ldr	r3, [r5, #0]
 801375a:	1d1a      	adds	r2, r3, #4
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	602a      	str	r2, [r5, #0]
 8013760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013768:	2301      	movs	r3, #1
 801376a:	e09f      	b.n	80138ac <_printf_i+0x1ec>
 801376c:	6820      	ldr	r0, [r4, #0]
 801376e:	682b      	ldr	r3, [r5, #0]
 8013770:	0607      	lsls	r7, r0, #24
 8013772:	f103 0104 	add.w	r1, r3, #4
 8013776:	6029      	str	r1, [r5, #0]
 8013778:	d501      	bpl.n	801377e <_printf_i+0xbe>
 801377a:	681e      	ldr	r6, [r3, #0]
 801377c:	e003      	b.n	8013786 <_printf_i+0xc6>
 801377e:	0646      	lsls	r6, r0, #25
 8013780:	d5fb      	bpl.n	801377a <_printf_i+0xba>
 8013782:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013786:	2e00      	cmp	r6, #0
 8013788:	da03      	bge.n	8013792 <_printf_i+0xd2>
 801378a:	232d      	movs	r3, #45	; 0x2d
 801378c:	4276      	negs	r6, r6
 801378e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013792:	485a      	ldr	r0, [pc, #360]	; (80138fc <_printf_i+0x23c>)
 8013794:	230a      	movs	r3, #10
 8013796:	e012      	b.n	80137be <_printf_i+0xfe>
 8013798:	682b      	ldr	r3, [r5, #0]
 801379a:	6820      	ldr	r0, [r4, #0]
 801379c:	1d19      	adds	r1, r3, #4
 801379e:	6029      	str	r1, [r5, #0]
 80137a0:	0605      	lsls	r5, r0, #24
 80137a2:	d501      	bpl.n	80137a8 <_printf_i+0xe8>
 80137a4:	681e      	ldr	r6, [r3, #0]
 80137a6:	e002      	b.n	80137ae <_printf_i+0xee>
 80137a8:	0641      	lsls	r1, r0, #25
 80137aa:	d5fb      	bpl.n	80137a4 <_printf_i+0xe4>
 80137ac:	881e      	ldrh	r6, [r3, #0]
 80137ae:	4853      	ldr	r0, [pc, #332]	; (80138fc <_printf_i+0x23c>)
 80137b0:	2f6f      	cmp	r7, #111	; 0x6f
 80137b2:	bf0c      	ite	eq
 80137b4:	2308      	moveq	r3, #8
 80137b6:	230a      	movne	r3, #10
 80137b8:	2100      	movs	r1, #0
 80137ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80137be:	6865      	ldr	r5, [r4, #4]
 80137c0:	60a5      	str	r5, [r4, #8]
 80137c2:	2d00      	cmp	r5, #0
 80137c4:	bfa2      	ittt	ge
 80137c6:	6821      	ldrge	r1, [r4, #0]
 80137c8:	f021 0104 	bicge.w	r1, r1, #4
 80137cc:	6021      	strge	r1, [r4, #0]
 80137ce:	b90e      	cbnz	r6, 80137d4 <_printf_i+0x114>
 80137d0:	2d00      	cmp	r5, #0
 80137d2:	d04b      	beq.n	801386c <_printf_i+0x1ac>
 80137d4:	4615      	mov	r5, r2
 80137d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80137da:	fb03 6711 	mls	r7, r3, r1, r6
 80137de:	5dc7      	ldrb	r7, [r0, r7]
 80137e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80137e4:	4637      	mov	r7, r6
 80137e6:	42bb      	cmp	r3, r7
 80137e8:	460e      	mov	r6, r1
 80137ea:	d9f4      	bls.n	80137d6 <_printf_i+0x116>
 80137ec:	2b08      	cmp	r3, #8
 80137ee:	d10b      	bne.n	8013808 <_printf_i+0x148>
 80137f0:	6823      	ldr	r3, [r4, #0]
 80137f2:	07de      	lsls	r6, r3, #31
 80137f4:	d508      	bpl.n	8013808 <_printf_i+0x148>
 80137f6:	6923      	ldr	r3, [r4, #16]
 80137f8:	6861      	ldr	r1, [r4, #4]
 80137fa:	4299      	cmp	r1, r3
 80137fc:	bfde      	ittt	le
 80137fe:	2330      	movle	r3, #48	; 0x30
 8013800:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013804:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013808:	1b52      	subs	r2, r2, r5
 801380a:	6122      	str	r2, [r4, #16]
 801380c:	f8cd a000 	str.w	sl, [sp]
 8013810:	464b      	mov	r3, r9
 8013812:	aa03      	add	r2, sp, #12
 8013814:	4621      	mov	r1, r4
 8013816:	4640      	mov	r0, r8
 8013818:	f7ff fee4 	bl	80135e4 <_printf_common>
 801381c:	3001      	adds	r0, #1
 801381e:	d14a      	bne.n	80138b6 <_printf_i+0x1f6>
 8013820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013824:	b004      	add	sp, #16
 8013826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801382a:	6823      	ldr	r3, [r4, #0]
 801382c:	f043 0320 	orr.w	r3, r3, #32
 8013830:	6023      	str	r3, [r4, #0]
 8013832:	4833      	ldr	r0, [pc, #204]	; (8013900 <_printf_i+0x240>)
 8013834:	2778      	movs	r7, #120	; 0x78
 8013836:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	6829      	ldr	r1, [r5, #0]
 801383e:	061f      	lsls	r7, r3, #24
 8013840:	f851 6b04 	ldr.w	r6, [r1], #4
 8013844:	d402      	bmi.n	801384c <_printf_i+0x18c>
 8013846:	065f      	lsls	r7, r3, #25
 8013848:	bf48      	it	mi
 801384a:	b2b6      	uxthmi	r6, r6
 801384c:	07df      	lsls	r7, r3, #31
 801384e:	bf48      	it	mi
 8013850:	f043 0320 	orrmi.w	r3, r3, #32
 8013854:	6029      	str	r1, [r5, #0]
 8013856:	bf48      	it	mi
 8013858:	6023      	strmi	r3, [r4, #0]
 801385a:	b91e      	cbnz	r6, 8013864 <_printf_i+0x1a4>
 801385c:	6823      	ldr	r3, [r4, #0]
 801385e:	f023 0320 	bic.w	r3, r3, #32
 8013862:	6023      	str	r3, [r4, #0]
 8013864:	2310      	movs	r3, #16
 8013866:	e7a7      	b.n	80137b8 <_printf_i+0xf8>
 8013868:	4824      	ldr	r0, [pc, #144]	; (80138fc <_printf_i+0x23c>)
 801386a:	e7e4      	b.n	8013836 <_printf_i+0x176>
 801386c:	4615      	mov	r5, r2
 801386e:	e7bd      	b.n	80137ec <_printf_i+0x12c>
 8013870:	682b      	ldr	r3, [r5, #0]
 8013872:	6826      	ldr	r6, [r4, #0]
 8013874:	6961      	ldr	r1, [r4, #20]
 8013876:	1d18      	adds	r0, r3, #4
 8013878:	6028      	str	r0, [r5, #0]
 801387a:	0635      	lsls	r5, r6, #24
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	d501      	bpl.n	8013884 <_printf_i+0x1c4>
 8013880:	6019      	str	r1, [r3, #0]
 8013882:	e002      	b.n	801388a <_printf_i+0x1ca>
 8013884:	0670      	lsls	r0, r6, #25
 8013886:	d5fb      	bpl.n	8013880 <_printf_i+0x1c0>
 8013888:	8019      	strh	r1, [r3, #0]
 801388a:	2300      	movs	r3, #0
 801388c:	6123      	str	r3, [r4, #16]
 801388e:	4615      	mov	r5, r2
 8013890:	e7bc      	b.n	801380c <_printf_i+0x14c>
 8013892:	682b      	ldr	r3, [r5, #0]
 8013894:	1d1a      	adds	r2, r3, #4
 8013896:	602a      	str	r2, [r5, #0]
 8013898:	681d      	ldr	r5, [r3, #0]
 801389a:	6862      	ldr	r2, [r4, #4]
 801389c:	2100      	movs	r1, #0
 801389e:	4628      	mov	r0, r5
 80138a0:	f7ec fcce 	bl	8000240 <memchr>
 80138a4:	b108      	cbz	r0, 80138aa <_printf_i+0x1ea>
 80138a6:	1b40      	subs	r0, r0, r5
 80138a8:	6060      	str	r0, [r4, #4]
 80138aa:	6863      	ldr	r3, [r4, #4]
 80138ac:	6123      	str	r3, [r4, #16]
 80138ae:	2300      	movs	r3, #0
 80138b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138b4:	e7aa      	b.n	801380c <_printf_i+0x14c>
 80138b6:	6923      	ldr	r3, [r4, #16]
 80138b8:	462a      	mov	r2, r5
 80138ba:	4649      	mov	r1, r9
 80138bc:	4640      	mov	r0, r8
 80138be:	47d0      	blx	sl
 80138c0:	3001      	adds	r0, #1
 80138c2:	d0ad      	beq.n	8013820 <_printf_i+0x160>
 80138c4:	6823      	ldr	r3, [r4, #0]
 80138c6:	079b      	lsls	r3, r3, #30
 80138c8:	d413      	bmi.n	80138f2 <_printf_i+0x232>
 80138ca:	68e0      	ldr	r0, [r4, #12]
 80138cc:	9b03      	ldr	r3, [sp, #12]
 80138ce:	4298      	cmp	r0, r3
 80138d0:	bfb8      	it	lt
 80138d2:	4618      	movlt	r0, r3
 80138d4:	e7a6      	b.n	8013824 <_printf_i+0x164>
 80138d6:	2301      	movs	r3, #1
 80138d8:	4632      	mov	r2, r6
 80138da:	4649      	mov	r1, r9
 80138dc:	4640      	mov	r0, r8
 80138de:	47d0      	blx	sl
 80138e0:	3001      	adds	r0, #1
 80138e2:	d09d      	beq.n	8013820 <_printf_i+0x160>
 80138e4:	3501      	adds	r5, #1
 80138e6:	68e3      	ldr	r3, [r4, #12]
 80138e8:	9903      	ldr	r1, [sp, #12]
 80138ea:	1a5b      	subs	r3, r3, r1
 80138ec:	42ab      	cmp	r3, r5
 80138ee:	dcf2      	bgt.n	80138d6 <_printf_i+0x216>
 80138f0:	e7eb      	b.n	80138ca <_printf_i+0x20a>
 80138f2:	2500      	movs	r5, #0
 80138f4:	f104 0619 	add.w	r6, r4, #25
 80138f8:	e7f5      	b.n	80138e6 <_printf_i+0x226>
 80138fa:	bf00      	nop
 80138fc:	08016d15 	.word	0x08016d15
 8013900:	08016d26 	.word	0x08016d26

08013904 <__sflush_r>:
 8013904:	898a      	ldrh	r2, [r1, #12]
 8013906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801390a:	4605      	mov	r5, r0
 801390c:	0710      	lsls	r0, r2, #28
 801390e:	460c      	mov	r4, r1
 8013910:	d458      	bmi.n	80139c4 <__sflush_r+0xc0>
 8013912:	684b      	ldr	r3, [r1, #4]
 8013914:	2b00      	cmp	r3, #0
 8013916:	dc05      	bgt.n	8013924 <__sflush_r+0x20>
 8013918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801391a:	2b00      	cmp	r3, #0
 801391c:	dc02      	bgt.n	8013924 <__sflush_r+0x20>
 801391e:	2000      	movs	r0, #0
 8013920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013926:	2e00      	cmp	r6, #0
 8013928:	d0f9      	beq.n	801391e <__sflush_r+0x1a>
 801392a:	2300      	movs	r3, #0
 801392c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013930:	682f      	ldr	r7, [r5, #0]
 8013932:	6a21      	ldr	r1, [r4, #32]
 8013934:	602b      	str	r3, [r5, #0]
 8013936:	d032      	beq.n	801399e <__sflush_r+0x9a>
 8013938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801393a:	89a3      	ldrh	r3, [r4, #12]
 801393c:	075a      	lsls	r2, r3, #29
 801393e:	d505      	bpl.n	801394c <__sflush_r+0x48>
 8013940:	6863      	ldr	r3, [r4, #4]
 8013942:	1ac0      	subs	r0, r0, r3
 8013944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013946:	b10b      	cbz	r3, 801394c <__sflush_r+0x48>
 8013948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801394a:	1ac0      	subs	r0, r0, r3
 801394c:	2300      	movs	r3, #0
 801394e:	4602      	mov	r2, r0
 8013950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013952:	6a21      	ldr	r1, [r4, #32]
 8013954:	4628      	mov	r0, r5
 8013956:	47b0      	blx	r6
 8013958:	1c43      	adds	r3, r0, #1
 801395a:	89a3      	ldrh	r3, [r4, #12]
 801395c:	d106      	bne.n	801396c <__sflush_r+0x68>
 801395e:	6829      	ldr	r1, [r5, #0]
 8013960:	291d      	cmp	r1, #29
 8013962:	d82b      	bhi.n	80139bc <__sflush_r+0xb8>
 8013964:	4a29      	ldr	r2, [pc, #164]	; (8013a0c <__sflush_r+0x108>)
 8013966:	410a      	asrs	r2, r1
 8013968:	07d6      	lsls	r6, r2, #31
 801396a:	d427      	bmi.n	80139bc <__sflush_r+0xb8>
 801396c:	2200      	movs	r2, #0
 801396e:	6062      	str	r2, [r4, #4]
 8013970:	04d9      	lsls	r1, r3, #19
 8013972:	6922      	ldr	r2, [r4, #16]
 8013974:	6022      	str	r2, [r4, #0]
 8013976:	d504      	bpl.n	8013982 <__sflush_r+0x7e>
 8013978:	1c42      	adds	r2, r0, #1
 801397a:	d101      	bne.n	8013980 <__sflush_r+0x7c>
 801397c:	682b      	ldr	r3, [r5, #0]
 801397e:	b903      	cbnz	r3, 8013982 <__sflush_r+0x7e>
 8013980:	6560      	str	r0, [r4, #84]	; 0x54
 8013982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013984:	602f      	str	r7, [r5, #0]
 8013986:	2900      	cmp	r1, #0
 8013988:	d0c9      	beq.n	801391e <__sflush_r+0x1a>
 801398a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801398e:	4299      	cmp	r1, r3
 8013990:	d002      	beq.n	8013998 <__sflush_r+0x94>
 8013992:	4628      	mov	r0, r5
 8013994:	f7fe fbc2 	bl	801211c <_free_r>
 8013998:	2000      	movs	r0, #0
 801399a:	6360      	str	r0, [r4, #52]	; 0x34
 801399c:	e7c0      	b.n	8013920 <__sflush_r+0x1c>
 801399e:	2301      	movs	r3, #1
 80139a0:	4628      	mov	r0, r5
 80139a2:	47b0      	blx	r6
 80139a4:	1c41      	adds	r1, r0, #1
 80139a6:	d1c8      	bne.n	801393a <__sflush_r+0x36>
 80139a8:	682b      	ldr	r3, [r5, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d0c5      	beq.n	801393a <__sflush_r+0x36>
 80139ae:	2b1d      	cmp	r3, #29
 80139b0:	d001      	beq.n	80139b6 <__sflush_r+0xb2>
 80139b2:	2b16      	cmp	r3, #22
 80139b4:	d101      	bne.n	80139ba <__sflush_r+0xb6>
 80139b6:	602f      	str	r7, [r5, #0]
 80139b8:	e7b1      	b.n	801391e <__sflush_r+0x1a>
 80139ba:	89a3      	ldrh	r3, [r4, #12]
 80139bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139c0:	81a3      	strh	r3, [r4, #12]
 80139c2:	e7ad      	b.n	8013920 <__sflush_r+0x1c>
 80139c4:	690f      	ldr	r7, [r1, #16]
 80139c6:	2f00      	cmp	r7, #0
 80139c8:	d0a9      	beq.n	801391e <__sflush_r+0x1a>
 80139ca:	0793      	lsls	r3, r2, #30
 80139cc:	680e      	ldr	r6, [r1, #0]
 80139ce:	bf08      	it	eq
 80139d0:	694b      	ldreq	r3, [r1, #20]
 80139d2:	600f      	str	r7, [r1, #0]
 80139d4:	bf18      	it	ne
 80139d6:	2300      	movne	r3, #0
 80139d8:	eba6 0807 	sub.w	r8, r6, r7
 80139dc:	608b      	str	r3, [r1, #8]
 80139de:	f1b8 0f00 	cmp.w	r8, #0
 80139e2:	dd9c      	ble.n	801391e <__sflush_r+0x1a>
 80139e4:	6a21      	ldr	r1, [r4, #32]
 80139e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139e8:	4643      	mov	r3, r8
 80139ea:	463a      	mov	r2, r7
 80139ec:	4628      	mov	r0, r5
 80139ee:	47b0      	blx	r6
 80139f0:	2800      	cmp	r0, #0
 80139f2:	dc06      	bgt.n	8013a02 <__sflush_r+0xfe>
 80139f4:	89a3      	ldrh	r3, [r4, #12]
 80139f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139fa:	81a3      	strh	r3, [r4, #12]
 80139fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a00:	e78e      	b.n	8013920 <__sflush_r+0x1c>
 8013a02:	4407      	add	r7, r0
 8013a04:	eba8 0800 	sub.w	r8, r8, r0
 8013a08:	e7e9      	b.n	80139de <__sflush_r+0xda>
 8013a0a:	bf00      	nop
 8013a0c:	dfbffffe 	.word	0xdfbffffe

08013a10 <_fflush_r>:
 8013a10:	b538      	push	{r3, r4, r5, lr}
 8013a12:	690b      	ldr	r3, [r1, #16]
 8013a14:	4605      	mov	r5, r0
 8013a16:	460c      	mov	r4, r1
 8013a18:	b913      	cbnz	r3, 8013a20 <_fflush_r+0x10>
 8013a1a:	2500      	movs	r5, #0
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	bd38      	pop	{r3, r4, r5, pc}
 8013a20:	b118      	cbz	r0, 8013a2a <_fflush_r+0x1a>
 8013a22:	6a03      	ldr	r3, [r0, #32]
 8013a24:	b90b      	cbnz	r3, 8013a2a <_fflush_r+0x1a>
 8013a26:	f7fe f9ad 	bl	8011d84 <__sinit>
 8013a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d0f3      	beq.n	8013a1a <_fflush_r+0xa>
 8013a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a34:	07d0      	lsls	r0, r2, #31
 8013a36:	d404      	bmi.n	8013a42 <_fflush_r+0x32>
 8013a38:	0599      	lsls	r1, r3, #22
 8013a3a:	d402      	bmi.n	8013a42 <_fflush_r+0x32>
 8013a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a3e:	f7fe fb36 	bl	80120ae <__retarget_lock_acquire_recursive>
 8013a42:	4628      	mov	r0, r5
 8013a44:	4621      	mov	r1, r4
 8013a46:	f7ff ff5d 	bl	8013904 <__sflush_r>
 8013a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a4c:	07da      	lsls	r2, r3, #31
 8013a4e:	4605      	mov	r5, r0
 8013a50:	d4e4      	bmi.n	8013a1c <_fflush_r+0xc>
 8013a52:	89a3      	ldrh	r3, [r4, #12]
 8013a54:	059b      	lsls	r3, r3, #22
 8013a56:	d4e1      	bmi.n	8013a1c <_fflush_r+0xc>
 8013a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a5a:	f7fe fb29 	bl	80120b0 <__retarget_lock_release_recursive>
 8013a5e:	e7dd      	b.n	8013a1c <_fflush_r+0xc>

08013a60 <fiprintf>:
 8013a60:	b40e      	push	{r1, r2, r3}
 8013a62:	b503      	push	{r0, r1, lr}
 8013a64:	4601      	mov	r1, r0
 8013a66:	ab03      	add	r3, sp, #12
 8013a68:	4805      	ldr	r0, [pc, #20]	; (8013a80 <fiprintf+0x20>)
 8013a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a6e:	6800      	ldr	r0, [r0, #0]
 8013a70:	9301      	str	r3, [sp, #4]
 8013a72:	f7ff fc9d 	bl	80133b0 <_vfiprintf_r>
 8013a76:	b002      	add	sp, #8
 8013a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a7c:	b003      	add	sp, #12
 8013a7e:	4770      	bx	lr
 8013a80:	200001f0 	.word	0x200001f0

08013a84 <__swbuf_r>:
 8013a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a86:	460e      	mov	r6, r1
 8013a88:	4614      	mov	r4, r2
 8013a8a:	4605      	mov	r5, r0
 8013a8c:	b118      	cbz	r0, 8013a96 <__swbuf_r+0x12>
 8013a8e:	6a03      	ldr	r3, [r0, #32]
 8013a90:	b90b      	cbnz	r3, 8013a96 <__swbuf_r+0x12>
 8013a92:	f7fe f977 	bl	8011d84 <__sinit>
 8013a96:	69a3      	ldr	r3, [r4, #24]
 8013a98:	60a3      	str	r3, [r4, #8]
 8013a9a:	89a3      	ldrh	r3, [r4, #12]
 8013a9c:	071a      	lsls	r2, r3, #28
 8013a9e:	d525      	bpl.n	8013aec <__swbuf_r+0x68>
 8013aa0:	6923      	ldr	r3, [r4, #16]
 8013aa2:	b31b      	cbz	r3, 8013aec <__swbuf_r+0x68>
 8013aa4:	6823      	ldr	r3, [r4, #0]
 8013aa6:	6922      	ldr	r2, [r4, #16]
 8013aa8:	1a98      	subs	r0, r3, r2
 8013aaa:	6963      	ldr	r3, [r4, #20]
 8013aac:	b2f6      	uxtb	r6, r6
 8013aae:	4283      	cmp	r3, r0
 8013ab0:	4637      	mov	r7, r6
 8013ab2:	dc04      	bgt.n	8013abe <__swbuf_r+0x3a>
 8013ab4:	4621      	mov	r1, r4
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f7ff ffaa 	bl	8013a10 <_fflush_r>
 8013abc:	b9e0      	cbnz	r0, 8013af8 <__swbuf_r+0x74>
 8013abe:	68a3      	ldr	r3, [r4, #8]
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	60a3      	str	r3, [r4, #8]
 8013ac4:	6823      	ldr	r3, [r4, #0]
 8013ac6:	1c5a      	adds	r2, r3, #1
 8013ac8:	6022      	str	r2, [r4, #0]
 8013aca:	701e      	strb	r6, [r3, #0]
 8013acc:	6962      	ldr	r2, [r4, #20]
 8013ace:	1c43      	adds	r3, r0, #1
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d004      	beq.n	8013ade <__swbuf_r+0x5a>
 8013ad4:	89a3      	ldrh	r3, [r4, #12]
 8013ad6:	07db      	lsls	r3, r3, #31
 8013ad8:	d506      	bpl.n	8013ae8 <__swbuf_r+0x64>
 8013ada:	2e0a      	cmp	r6, #10
 8013adc:	d104      	bne.n	8013ae8 <__swbuf_r+0x64>
 8013ade:	4621      	mov	r1, r4
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	f7ff ff95 	bl	8013a10 <_fflush_r>
 8013ae6:	b938      	cbnz	r0, 8013af8 <__swbuf_r+0x74>
 8013ae8:	4638      	mov	r0, r7
 8013aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013aec:	4621      	mov	r1, r4
 8013aee:	4628      	mov	r0, r5
 8013af0:	f000 f806 	bl	8013b00 <__swsetup_r>
 8013af4:	2800      	cmp	r0, #0
 8013af6:	d0d5      	beq.n	8013aa4 <__swbuf_r+0x20>
 8013af8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013afc:	e7f4      	b.n	8013ae8 <__swbuf_r+0x64>
	...

08013b00 <__swsetup_r>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	4b2a      	ldr	r3, [pc, #168]	; (8013bac <__swsetup_r+0xac>)
 8013b04:	4605      	mov	r5, r0
 8013b06:	6818      	ldr	r0, [r3, #0]
 8013b08:	460c      	mov	r4, r1
 8013b0a:	b118      	cbz	r0, 8013b14 <__swsetup_r+0x14>
 8013b0c:	6a03      	ldr	r3, [r0, #32]
 8013b0e:	b90b      	cbnz	r3, 8013b14 <__swsetup_r+0x14>
 8013b10:	f7fe f938 	bl	8011d84 <__sinit>
 8013b14:	89a3      	ldrh	r3, [r4, #12]
 8013b16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b1a:	0718      	lsls	r0, r3, #28
 8013b1c:	d422      	bmi.n	8013b64 <__swsetup_r+0x64>
 8013b1e:	06d9      	lsls	r1, r3, #27
 8013b20:	d407      	bmi.n	8013b32 <__swsetup_r+0x32>
 8013b22:	2309      	movs	r3, #9
 8013b24:	602b      	str	r3, [r5, #0]
 8013b26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013b2a:	81a3      	strh	r3, [r4, #12]
 8013b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b30:	e034      	b.n	8013b9c <__swsetup_r+0x9c>
 8013b32:	0758      	lsls	r0, r3, #29
 8013b34:	d512      	bpl.n	8013b5c <__swsetup_r+0x5c>
 8013b36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b38:	b141      	cbz	r1, 8013b4c <__swsetup_r+0x4c>
 8013b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b3e:	4299      	cmp	r1, r3
 8013b40:	d002      	beq.n	8013b48 <__swsetup_r+0x48>
 8013b42:	4628      	mov	r0, r5
 8013b44:	f7fe faea 	bl	801211c <_free_r>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	6363      	str	r3, [r4, #52]	; 0x34
 8013b4c:	89a3      	ldrh	r3, [r4, #12]
 8013b4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013b52:	81a3      	strh	r3, [r4, #12]
 8013b54:	2300      	movs	r3, #0
 8013b56:	6063      	str	r3, [r4, #4]
 8013b58:	6923      	ldr	r3, [r4, #16]
 8013b5a:	6023      	str	r3, [r4, #0]
 8013b5c:	89a3      	ldrh	r3, [r4, #12]
 8013b5e:	f043 0308 	orr.w	r3, r3, #8
 8013b62:	81a3      	strh	r3, [r4, #12]
 8013b64:	6923      	ldr	r3, [r4, #16]
 8013b66:	b94b      	cbnz	r3, 8013b7c <__swsetup_r+0x7c>
 8013b68:	89a3      	ldrh	r3, [r4, #12]
 8013b6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b72:	d003      	beq.n	8013b7c <__swsetup_r+0x7c>
 8013b74:	4621      	mov	r1, r4
 8013b76:	4628      	mov	r0, r5
 8013b78:	f000 f86d 	bl	8013c56 <__smakebuf_r>
 8013b7c:	89a0      	ldrh	r0, [r4, #12]
 8013b7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b82:	f010 0301 	ands.w	r3, r0, #1
 8013b86:	d00a      	beq.n	8013b9e <__swsetup_r+0x9e>
 8013b88:	2300      	movs	r3, #0
 8013b8a:	60a3      	str	r3, [r4, #8]
 8013b8c:	6963      	ldr	r3, [r4, #20]
 8013b8e:	425b      	negs	r3, r3
 8013b90:	61a3      	str	r3, [r4, #24]
 8013b92:	6923      	ldr	r3, [r4, #16]
 8013b94:	b943      	cbnz	r3, 8013ba8 <__swsetup_r+0xa8>
 8013b96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b9a:	d1c4      	bne.n	8013b26 <__swsetup_r+0x26>
 8013b9c:	bd38      	pop	{r3, r4, r5, pc}
 8013b9e:	0781      	lsls	r1, r0, #30
 8013ba0:	bf58      	it	pl
 8013ba2:	6963      	ldrpl	r3, [r4, #20]
 8013ba4:	60a3      	str	r3, [r4, #8]
 8013ba6:	e7f4      	b.n	8013b92 <__swsetup_r+0x92>
 8013ba8:	2000      	movs	r0, #0
 8013baa:	e7f7      	b.n	8013b9c <__swsetup_r+0x9c>
 8013bac:	200001f0 	.word	0x200001f0

08013bb0 <_sbrk_r>:
 8013bb0:	b538      	push	{r3, r4, r5, lr}
 8013bb2:	4d06      	ldr	r5, [pc, #24]	; (8013bcc <_sbrk_r+0x1c>)
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	4608      	mov	r0, r1
 8013bba:	602b      	str	r3, [r5, #0]
 8013bbc:	f7ed fe0a 	bl	80017d4 <_sbrk>
 8013bc0:	1c43      	adds	r3, r0, #1
 8013bc2:	d102      	bne.n	8013bca <_sbrk_r+0x1a>
 8013bc4:	682b      	ldr	r3, [r5, #0]
 8013bc6:	b103      	cbz	r3, 8013bca <_sbrk_r+0x1a>
 8013bc8:	6023      	str	r3, [r4, #0]
 8013bca:	bd38      	pop	{r3, r4, r5, pc}
 8013bcc:	2000aa68 	.word	0x2000aa68

08013bd0 <abort>:
 8013bd0:	b508      	push	{r3, lr}
 8013bd2:	2006      	movs	r0, #6
 8013bd4:	f000 f8a4 	bl	8013d20 <raise>
 8013bd8:	2001      	movs	r0, #1
 8013bda:	f7ed fd83 	bl	80016e4 <_exit>

08013bde <_calloc_r>:
 8013bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013be0:	fba1 2402 	umull	r2, r4, r1, r2
 8013be4:	b94c      	cbnz	r4, 8013bfa <_calloc_r+0x1c>
 8013be6:	4611      	mov	r1, r2
 8013be8:	9201      	str	r2, [sp, #4]
 8013bea:	f7fe fe63 	bl	80128b4 <_malloc_r>
 8013bee:	9a01      	ldr	r2, [sp, #4]
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	b930      	cbnz	r0, 8013c02 <_calloc_r+0x24>
 8013bf4:	4628      	mov	r0, r5
 8013bf6:	b003      	add	sp, #12
 8013bf8:	bd30      	pop	{r4, r5, pc}
 8013bfa:	220c      	movs	r2, #12
 8013bfc:	6002      	str	r2, [r0, #0]
 8013bfe:	2500      	movs	r5, #0
 8013c00:	e7f8      	b.n	8013bf4 <_calloc_r+0x16>
 8013c02:	4621      	mov	r1, r4
 8013c04:	f7fe f959 	bl	8011eba <memset>
 8013c08:	e7f4      	b.n	8013bf4 <_calloc_r+0x16>

08013c0a <__swhatbuf_r>:
 8013c0a:	b570      	push	{r4, r5, r6, lr}
 8013c0c:	460c      	mov	r4, r1
 8013c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c12:	2900      	cmp	r1, #0
 8013c14:	b096      	sub	sp, #88	; 0x58
 8013c16:	4615      	mov	r5, r2
 8013c18:	461e      	mov	r6, r3
 8013c1a:	da0d      	bge.n	8013c38 <__swhatbuf_r+0x2e>
 8013c1c:	89a3      	ldrh	r3, [r4, #12]
 8013c1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013c22:	f04f 0100 	mov.w	r1, #0
 8013c26:	bf0c      	ite	eq
 8013c28:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013c2c:	2340      	movne	r3, #64	; 0x40
 8013c2e:	2000      	movs	r0, #0
 8013c30:	6031      	str	r1, [r6, #0]
 8013c32:	602b      	str	r3, [r5, #0]
 8013c34:	b016      	add	sp, #88	; 0x58
 8013c36:	bd70      	pop	{r4, r5, r6, pc}
 8013c38:	466a      	mov	r2, sp
 8013c3a:	f000 f879 	bl	8013d30 <_fstat_r>
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	dbec      	blt.n	8013c1c <__swhatbuf_r+0x12>
 8013c42:	9901      	ldr	r1, [sp, #4]
 8013c44:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013c48:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013c4c:	4259      	negs	r1, r3
 8013c4e:	4159      	adcs	r1, r3
 8013c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c54:	e7eb      	b.n	8013c2e <__swhatbuf_r+0x24>

08013c56 <__smakebuf_r>:
 8013c56:	898b      	ldrh	r3, [r1, #12]
 8013c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c5a:	079d      	lsls	r5, r3, #30
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	460c      	mov	r4, r1
 8013c60:	d507      	bpl.n	8013c72 <__smakebuf_r+0x1c>
 8013c62:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	6123      	str	r3, [r4, #16]
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	6163      	str	r3, [r4, #20]
 8013c6e:	b002      	add	sp, #8
 8013c70:	bd70      	pop	{r4, r5, r6, pc}
 8013c72:	ab01      	add	r3, sp, #4
 8013c74:	466a      	mov	r2, sp
 8013c76:	f7ff ffc8 	bl	8013c0a <__swhatbuf_r>
 8013c7a:	9900      	ldr	r1, [sp, #0]
 8013c7c:	4605      	mov	r5, r0
 8013c7e:	4630      	mov	r0, r6
 8013c80:	f7fe fe18 	bl	80128b4 <_malloc_r>
 8013c84:	b948      	cbnz	r0, 8013c9a <__smakebuf_r+0x44>
 8013c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c8a:	059a      	lsls	r2, r3, #22
 8013c8c:	d4ef      	bmi.n	8013c6e <__smakebuf_r+0x18>
 8013c8e:	f023 0303 	bic.w	r3, r3, #3
 8013c92:	f043 0302 	orr.w	r3, r3, #2
 8013c96:	81a3      	strh	r3, [r4, #12]
 8013c98:	e7e3      	b.n	8013c62 <__smakebuf_r+0xc>
 8013c9a:	89a3      	ldrh	r3, [r4, #12]
 8013c9c:	6020      	str	r0, [r4, #0]
 8013c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ca2:	81a3      	strh	r3, [r4, #12]
 8013ca4:	9b00      	ldr	r3, [sp, #0]
 8013ca6:	6163      	str	r3, [r4, #20]
 8013ca8:	9b01      	ldr	r3, [sp, #4]
 8013caa:	6120      	str	r0, [r4, #16]
 8013cac:	b15b      	cbz	r3, 8013cc6 <__smakebuf_r+0x70>
 8013cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f000 f84e 	bl	8013d54 <_isatty_r>
 8013cb8:	b128      	cbz	r0, 8013cc6 <__smakebuf_r+0x70>
 8013cba:	89a3      	ldrh	r3, [r4, #12]
 8013cbc:	f023 0303 	bic.w	r3, r3, #3
 8013cc0:	f043 0301 	orr.w	r3, r3, #1
 8013cc4:	81a3      	strh	r3, [r4, #12]
 8013cc6:	89a3      	ldrh	r3, [r4, #12]
 8013cc8:	431d      	orrs	r5, r3
 8013cca:	81a5      	strh	r5, [r4, #12]
 8013ccc:	e7cf      	b.n	8013c6e <__smakebuf_r+0x18>

08013cce <_raise_r>:
 8013cce:	291f      	cmp	r1, #31
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	460d      	mov	r5, r1
 8013cd6:	d904      	bls.n	8013ce2 <_raise_r+0x14>
 8013cd8:	2316      	movs	r3, #22
 8013cda:	6003      	str	r3, [r0, #0]
 8013cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ce0:	bd38      	pop	{r3, r4, r5, pc}
 8013ce2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013ce4:	b112      	cbz	r2, 8013cec <_raise_r+0x1e>
 8013ce6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013cea:	b94b      	cbnz	r3, 8013d00 <_raise_r+0x32>
 8013cec:	4620      	mov	r0, r4
 8013cee:	f000 f853 	bl	8013d98 <_getpid_r>
 8013cf2:	462a      	mov	r2, r5
 8013cf4:	4601      	mov	r1, r0
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cfc:	f000 b83a 	b.w	8013d74 <_kill_r>
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d00a      	beq.n	8013d1a <_raise_r+0x4c>
 8013d04:	1c59      	adds	r1, r3, #1
 8013d06:	d103      	bne.n	8013d10 <_raise_r+0x42>
 8013d08:	2316      	movs	r3, #22
 8013d0a:	6003      	str	r3, [r0, #0]
 8013d0c:	2001      	movs	r0, #1
 8013d0e:	e7e7      	b.n	8013ce0 <_raise_r+0x12>
 8013d10:	2400      	movs	r4, #0
 8013d12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013d16:	4628      	mov	r0, r5
 8013d18:	4798      	blx	r3
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	e7e0      	b.n	8013ce0 <_raise_r+0x12>
	...

08013d20 <raise>:
 8013d20:	4b02      	ldr	r3, [pc, #8]	; (8013d2c <raise+0xc>)
 8013d22:	4601      	mov	r1, r0
 8013d24:	6818      	ldr	r0, [r3, #0]
 8013d26:	f7ff bfd2 	b.w	8013cce <_raise_r>
 8013d2a:	bf00      	nop
 8013d2c:	200001f0 	.word	0x200001f0

08013d30 <_fstat_r>:
 8013d30:	b538      	push	{r3, r4, r5, lr}
 8013d32:	4d07      	ldr	r5, [pc, #28]	; (8013d50 <_fstat_r+0x20>)
 8013d34:	2300      	movs	r3, #0
 8013d36:	4604      	mov	r4, r0
 8013d38:	4608      	mov	r0, r1
 8013d3a:	4611      	mov	r1, r2
 8013d3c:	602b      	str	r3, [r5, #0]
 8013d3e:	f7ed fd20 	bl	8001782 <_fstat>
 8013d42:	1c43      	adds	r3, r0, #1
 8013d44:	d102      	bne.n	8013d4c <_fstat_r+0x1c>
 8013d46:	682b      	ldr	r3, [r5, #0]
 8013d48:	b103      	cbz	r3, 8013d4c <_fstat_r+0x1c>
 8013d4a:	6023      	str	r3, [r4, #0]
 8013d4c:	bd38      	pop	{r3, r4, r5, pc}
 8013d4e:	bf00      	nop
 8013d50:	2000aa68 	.word	0x2000aa68

08013d54 <_isatty_r>:
 8013d54:	b538      	push	{r3, r4, r5, lr}
 8013d56:	4d06      	ldr	r5, [pc, #24]	; (8013d70 <_isatty_r+0x1c>)
 8013d58:	2300      	movs	r3, #0
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	4608      	mov	r0, r1
 8013d5e:	602b      	str	r3, [r5, #0]
 8013d60:	f7ed fd1f 	bl	80017a2 <_isatty>
 8013d64:	1c43      	adds	r3, r0, #1
 8013d66:	d102      	bne.n	8013d6e <_isatty_r+0x1a>
 8013d68:	682b      	ldr	r3, [r5, #0]
 8013d6a:	b103      	cbz	r3, 8013d6e <_isatty_r+0x1a>
 8013d6c:	6023      	str	r3, [r4, #0]
 8013d6e:	bd38      	pop	{r3, r4, r5, pc}
 8013d70:	2000aa68 	.word	0x2000aa68

08013d74 <_kill_r>:
 8013d74:	b538      	push	{r3, r4, r5, lr}
 8013d76:	4d07      	ldr	r5, [pc, #28]	; (8013d94 <_kill_r+0x20>)
 8013d78:	2300      	movs	r3, #0
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	4608      	mov	r0, r1
 8013d7e:	4611      	mov	r1, r2
 8013d80:	602b      	str	r3, [r5, #0]
 8013d82:	f7ed fc9d 	bl	80016c0 <_kill>
 8013d86:	1c43      	adds	r3, r0, #1
 8013d88:	d102      	bne.n	8013d90 <_kill_r+0x1c>
 8013d8a:	682b      	ldr	r3, [r5, #0]
 8013d8c:	b103      	cbz	r3, 8013d90 <_kill_r+0x1c>
 8013d8e:	6023      	str	r3, [r4, #0]
 8013d90:	bd38      	pop	{r3, r4, r5, pc}
 8013d92:	bf00      	nop
 8013d94:	2000aa68 	.word	0x2000aa68

08013d98 <_getpid_r>:
 8013d98:	f7ed bc8a 	b.w	80016b0 <_getpid>

08013d9c <_init>:
 8013d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9e:	bf00      	nop
 8013da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013da2:	bc08      	pop	{r3}
 8013da4:	469e      	mov	lr, r3
 8013da6:	4770      	bx	lr

08013da8 <_fini>:
 8013da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013daa:	bf00      	nop
 8013dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dae:	bc08      	pop	{r3}
 8013db0:	469e      	mov	lr, r3
 8013db2:	4770      	bx	lr
